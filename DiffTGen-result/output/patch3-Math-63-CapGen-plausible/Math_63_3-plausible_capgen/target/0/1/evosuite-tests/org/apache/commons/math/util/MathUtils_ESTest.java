/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:00:34 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      int int0 = MathUtils.pow(0, 0);
      float float0 = MathUtils.sign(Float.NaN);
      double double1 = MathUtils.sign((double) 0);
      int int1 = MathUtils.hash((-3586.690046141092));
      byte byte0 = (byte)15;
      byte byte1 = MathUtils.indicator((byte)15);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.indicator(1.633123935319537E16);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) Float.NaN, (double) (-1927916528), (-1212));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-450L), (-98L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.not();
      long long1 = bigInteger0.longValueExact();
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger2 = bigInteger0.not();
      int int0 = bigInteger0.signum();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(749.5259405, 6.283185297958996, 1717986918);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = MathUtils.sign(1368);
      boolean boolean0 = MathUtils.equals((double) 1, 2308.338, 0.0);
      byte byte0 = MathUtils.indicator((byte)18);
      double double0 = MathUtils.scalb(0.0, 157);
      double double1 = MathUtils.factorialDouble(0);
      double double2 = MathUtils.binomialCoefficientDouble(1368, 118);
      short short0 = MathUtils.indicator((short) (byte)1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = MathUtils.sign(1368);
      boolean boolean0 = MathUtils.equals((double) 1, 2308.338, 0.0);
      byte byte0 = MathUtils.indicator((byte)18);
      double double0 = MathUtils.scalb(0.0, 157);
      double double1 = MathUtils.factorialDouble(0);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-65181L), 4649395353320981078L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.indicator(121645100408832000L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) (-489);
      doubleArray0[2] = (double) 121645100408832000L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 121645100408832000L;
      doubleArray0[7] = (double) 1L;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1L;
      doubleArray1[1] = (double) 1L;
      doubleArray1[2] = (double) 121645100408832000L;
      doubleArray1[3] = (double) 1L;
      doubleArray1[4] = (double) 121645100408832000L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = (-4698.07);
      byte byte0 = MathUtils.sign((byte)4);
      float float0 = MathUtils.sign((float) (byte)1);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 1;
      float float0 = MathUtils.round((-1.0F), 1, 1);
      try { 
        MathUtils.pow((-707L), (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-707^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = MathUtils.gcd(1116, 1116);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1116, 0.0, 0.6366197723675814);
      int int1 = MathUtils.indicator(1116);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 1116, 0.0);
      long long0 = MathUtils.indicator((long) 1116);
      float float0 = MathUtils.indicator(Float.NaN);
      short short0 = MathUtils.indicator((short)570);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) 1;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long1 = MathUtils.mulAndCheck((long) (short)570, 682L);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int2 = MathUtils.gcd(1116, (-4989));
      double double3 = MathUtils.sinh(0.0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float1 = MathUtils.round((-1.0F), (int) (short)570);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(2147483647L, 2147483647L);
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      long long1 = MathUtils.lcm(2147483647L, 2147483647L);
      double double0 = 142.1185216923;
      boolean boolean1 = MathUtils.equalsIncludingNaN(142.1185216923, 129.871);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)105;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigInteger bigInteger3 = bigInteger1.andNot(bigInteger2);
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger not invertible.
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = MathUtils.pow(1792L, 0);
      int int0 = MathUtils.gcd(0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = (-1456);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0, 3, (-1456));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,456, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 567.3226;
      doubleArray0[1] = 2938.9530882706295;
      doubleArray0[2] = 1.1102230246251565E-16;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-600.9034875));
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-918);
      intArray0[2] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.round((double) 0, (-2322));
      boolean boolean0 = MathUtils.equals((-2453.95514450724), (double) 0, (-538.50390986882));
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 0;
      boolean boolean1 = MathUtils.equals(doubleArray2, doubleArray1);
      boolean boolean2 = MathUtils.equals(630.1245074, (double) (-918));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(3748.166547451515, (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 197;
      float float0 = MathUtils.round(3565.3F, 197);
      double double0 = MathUtils.binomialCoefficientDouble(197, (-764));
      double double1 = MathUtils.round((double) Float.NaN, 16);
      try { 
        MathUtils.pow((-3079L), (-3392L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,079^-3,392)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(1174);
      int int0 = 871;
      int int1 = MathUtils.pow(1331, 871);
      int int2 = MathUtils.addAndCheck(1916, 1331);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.indicator((long) 871);
      int int3 = MathUtils.pow((-2305), 0L);
      byte byte0 = MathUtils.sign((byte)22);
      float float0 = MathUtils.round((float) 1916, (-2305));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray2 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.lcm((-1648L), (-3958705157555305932L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1209L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      int int0 = MathUtils.gcd(220, 220);
      double double0 = MathUtils.round((double) 220, 220, 5);
      int int1 = MathUtils.indicator(5);
      long long1 = MathUtils.pow((-1896L), 0L);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1609.0);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(0L, 0);
      double double1 = MathUtils.log(0.0, 0.0);
      long long1 = 0L;
      long long2 = MathUtils.mulAndCheck(1L, 0L);
      long long3 = MathUtils.gcd(1598L, (long) 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger0 = BigInteger.ZERO;
      double double2 = bigInteger0.doubleValue();
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(2107L, 0L);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 2.0);
      double double0 = MathUtils.indicator(0.0);
      double double1 = MathUtils.sign(0.0);
      long long0 = MathUtils.gcd(0L, 0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (-1780.774059486181);
      doubleArray0[6] = 2.0;
      doubleArray0[7] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-828));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short) (-828), 6164.1, 6164.1);
      int int0 = MathUtils.lcm((int) (short) (-828), 0);
      double double0 = MathUtils.log(Double.POSITIVE_INFINITY, 2921.26869498188);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = (-3325);
      int int1 = 0;
      int int2 = MathUtils.lcm((-3325), 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (double) 0, (double) (-3325));
      long long0 = MathUtils.addAndCheck((long) (-3325), (long) 0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      int int3 = 55;
      intArray0[1] = 55;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-3325);
      int[] intArray1 = new int[5];
      intArray1[0] = 55;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 55;
      intArray1[4] = (-3325);
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = MathUtils.cosh((-1145.891049165));
      int int0 = MathUtils.indicator(129);
      double double1 = MathUtils.cosh(129);
      double double2 = MathUtils.sign(0.5);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1322.355502411;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.5;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      double double3 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equals(1.0, 1360.79314);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      boolean boolean1 = bigInteger0.equals(bigInteger1);
      int int1 = bigInteger0.bitCount();
      BigInteger bigInteger2 = bigInteger1.or(bigInteger0);
      int int2 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) 129);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = (-3099L);
      long long1 = MathUtils.lcm((-3099L), 3136L);
      double double0 = MathUtils.sinh(0.0);
      double double1 = MathUtils.log((-3099L), 2157.5856710843705);
      float float0 = MathUtils.indicator((-1.0F));
      int int0 = MathUtils.sign(50);
      double double2 = 0.0;
      double double3 = MathUtils.sinh(0.0);
      int int1 = MathUtils.gcd((-2475), 50);
      short short0 = MathUtils.sign((short) (-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.setBit(1);
      // Undeclared exception!
      try { 
        bigInteger0.testBit((-1053));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = MathUtils.sign((-1652.0));
      double double1 = MathUtils.scalb((-1.0), 1267);
      int int0 = MathUtils.gcd(1267, 1267);
      double double2 = MathUtils.sinh(1267);
      int int1 = 76;
      // Undeclared exception!
      try { 
        MathUtils.factorial(76);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.1102230246251565E-16;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1366.0);
      doubleArray0[3] = 42.0;
      doubleArray0[4] = 1.1102230246251565E-16;
      doubleArray0[5] = 179.8;
      doubleArray0[6] = 3796.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.1102230246251565E-16;
      doubleArray1[2] = 1.1102230246251565E-16;
      doubleArray1[3] = 3796.0;
      doubleArray1[4] = 1.1102230246251565E-16;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(534, 534);
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = bigInteger0.toString();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 578);
      BigInteger bigInteger2 = bigInteger0.setBit(1068);
      BigInteger bigInteger3 = BigInteger.valueOf(534);
      BigInteger bigInteger4 = bigInteger0.modPow(bigInteger3, bigInteger3);
      double double0 = MathUtils.sign(0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1068;
      doubleArray0[1] = (double) 578;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 534;
      doubleArray0[4] = 0.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      BigInteger bigInteger5 = bigInteger0.abs();
      double double2 = MathUtils.binomialCoefficientLog(21, (-1373));
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, (long) 1068);
      long long0 = MathUtils.addAndCheck((long) 1068, 0L);
      double double3 = MathUtils.indicator((double) 21);
      short short0 = MathUtils.sign((short) (-1689));
      long long1 = MathUtils.subAndCheck(0L, (long) (-1373));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 244.328;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1203.095820527831;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 244.328)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 8;
      int int1 = MathUtils.mulAndCheck(8, 8);
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 64;
      doubleArray0[2] = (double) 64;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 8;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 64;
      doubleArray1[1] = 1.4456468917292502E-16;
      doubleArray1[2] = (double) 8;
      doubleArray1[3] = 0.19999954104423523;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (64 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.gcd((-9223372036854775808L), (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow: gcd(-9,223,372,036,854,775,808, -9,223,372,036,854,775,808) is 2^63
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = (-1003);
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, (-1003), 479);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 479, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-761.05537974);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1353.7038259164135;
      doubleArray0[4] = (-2657.327);
      doubleArray0[5] = (-655.3301097);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not increasing (1,353.704 > -2,657.327)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2026.0;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1863.75178115593;
      doubleArray0[4] = (-114.20389214);
      doubleArray0[5] = 3272.057143558;
      doubleArray0[6] = 21.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.factorial(0);
      double double1 = MathUtils.binomialCoefficientDouble(135, 135);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = MathUtils.gcd((-378), (-378));
      double double0 = MathUtils.binomialCoefficientLog(2169, 1889);
      long long0 = MathUtils.addAndCheck((long) (-378), 4095L);
      byte byte0 = MathUtils.sign((byte)8);
      byte byte1 = MathUtils.indicator((byte)8);
      boolean boolean0 = MathUtils.equalsIncludingNaN(3013.66, 0.0, 272);
      float float0 = MathUtils.round((float) 272, 2169, (int) (byte)1);
      long long1 = MathUtils.factorial((byte)1);
      int int1 = MathUtils.pow(378, (long) (byte)1);
      byte byte2 = MathUtils.sign((byte)1);
      int int2 = MathUtils.subAndCheck(0, (-65));
      int int3 = MathUtils.gcd((-65), 52);
      int int4 = MathUtils.gcd(0, 840);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (byte)1, (double) 3717L, (int) (byte)1);
      double double1 = MathUtils.log(1325.12, 3660.08137835474);
      BigInteger bigInteger0 = BigInteger.ONE;
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = (-880);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-880));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -880
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      double double1 = MathUtils.sign(1261.7);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      byte byte0 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-487.9);
      doubleArray0[2] = 0.0;
      double double0 = 0.0;
      doubleArray0[3] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      byte byte0 = (byte) (-34);
      byte byte1 = MathUtils.sign((byte) (-34));
      int int1 = MathUtils.addAndCheck((-679), (int) (byte) (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      double double1 = bigInteger0.doubleValue();
      float float0 = bigInteger0.floatValue();
      try { 
        MathUtils.pow(bigInteger0, (-679));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-679)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = 121645100408832000L;
      long long1 = MathUtils.indicator(121645100408832000L);
      int int0 = (-489);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-489));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -489
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = MathUtils.hash(0.3333333333332802);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(0, 0);
      int int2 = MathUtils.indicator(0);
      long long0 = MathUtils.mulAndCheck((long) 1, (long) 1);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      int int3 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.factorialDouble(49);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double2 = MathUtils.sign(0.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf(".UR[\"+<]mHXtO/<C~:");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection..UR[\"+<]mHXtO/<C~:
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      short short0 = MathUtils.sign((short)697);
      double double0 = MathUtils.factorialDouble(59);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 59);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1433.228160518;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1433.228160518, 1433.228160518);
      long long0 = MathUtils.indicator(2400L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      int int0 = bigInteger3.bitLength();
      byte byte0 = bigInteger0.byteValueExact();
      int int1 = bigInteger3.signum();
      BigInteger bigInteger4 = bigInteger3.setBit(1);
      long long1 = bigInteger3.longValue();
      BigInteger bigInteger5 = bigInteger3.shiftRight((-5826));
      BigInteger bigInteger6 = bigInteger3.negate();
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, bigInteger3);
      long long2 = MathUtils.pow((-9218868437227405313L), 60);
      int int2 = MathUtils.addAndCheck(1212, (int) (byte)0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      BigInteger bigInteger8 = new BigInteger(byteArray0);
      BigInteger bigInteger9 = bigInteger8.shiftLeft(0);
      BigInteger bigInteger10 = MathUtils.pow(bigInteger1, bigInteger8);
      short short0 = MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(0, 979L);
      long long0 = MathUtils.sign((long) 0);
      boolean boolean0 = MathUtils.equals((double) 0, (-1744.364488872));
      byte byte0 = (byte)6;
      byte byte1 = MathUtils.sign((byte)6);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) (byte)6;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int2 = 17;
      double double0 = MathUtils.factorialDouble(17);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3783.74277925;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2563.189906305413);
      doubleArray0[6] = 0.3;
      doubleArray0[7] = 3.141592653589793;
      doubleArray0[8] = 218.900952321;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 3.141592653589793;
      doubleArray1[1] = 3783.74277925;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 3783.74277925;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      boolean boolean1 = MathUtils.equalsIncludingNaN(703.055036638, 9.220590270857665E-9, 122);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)19;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-3650), 0);
      short short0 = MathUtils.indicator((short)1369);
      long long0 = MathUtils.sign((-3192L));
      double double0 = MathUtils.cosh(2270.710067238);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-3157), (-2566));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -3,157, k = -2,566
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = MathUtils.compareTo(42.0, 42.0, 42.0);
      long long0 = MathUtils.sign((-374L));
      double double0 = MathUtils.cosh((-374L));
      int int1 = MathUtils.addAndCheck(0, 2439);
      double double1 = MathUtils.binomialCoefficientDouble(39, 0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = (-1407);
      int int1 = MathUtils.sign((-1407));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1), (-1420));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      double double0 = MathUtils.log((-2253.17), 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = Double.NaN;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      double double3 = MathUtils.binomialCoefficientDouble(0, (-2142));
      int int1 = MathUtils.pow(0, 0);
      double double4 = MathUtils.factorialLog(0);
      long long0 = MathUtils.addAndCheck((long) (-2142), (long) 0);
      double double5 = MathUtils.sign((double) (-2142));
      double double6 = MathUtils.factorialLog(1599);
      short short0 = MathUtils.indicator((short)1141);
      boolean boolean0 = MathUtils.equals((double) (-2142), 0.0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-2142);
      intArray0[2] = 0;
      intArray0[3] = (-2142);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1599;
      intArray0[7] = (int) (short)1;
      intArray0[8] = (-2142);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2334.2420862, 2334.2420862);
      float float0 = MathUtils.round((-2260.682F), 0);
      double double0 = MathUtils.round((double) (-2260.682F), 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2334.2420862;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-2261.0);
      doubleArray0[3] = (double) (-2261.0F);
      int int0 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.indicator((-2261.0));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte) (-104);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-6,465,995,164,132,831,336^-6,465,995,164,132,831,336)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.sinh((-6.032174644509064E-23));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathUtils.round(0.375, 2097);
      long long0 = MathUtils.mulAndCheck((long) 2097, 40320L);
      short short0 = MathUtils.indicator((short)0);
      long long1 = MathUtils.binomialCoefficient((short)1, (short)1);
      byte byte0 = MathUtils.indicator((byte) (-9));
      // Undeclared exception!
      try { 
        MathUtils.round((-724.0888837), 0, 15);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 1116;
      int int1 = MathUtils.gcd(1116, 1116);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1116, 0.0, 0.6366197723675814);
      int int2 = MathUtils.indicator(1116);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      long long0 = MathUtils.indicator((long) 1116);
      float float0 = MathUtils.indicator(Float.NaN);
      int int3 = (-4989);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-4989));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,989
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(2865, 2865);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("Inexact result from rounding");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.Inexact result from rounding
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-4692);
      intArray0[1] = (-1191);
      intArray0[2] = 49;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-1828.7194909716395);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-4692);
      doubleArray0[4] = (double) (-1191);
      doubleArray0[5] = (double) (-4692);
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = 120L;
      long long1 = MathUtils.indicator(120L);
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      long long2 = MathUtils.addAndCheck(0L, (-2319L));
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      try { 
        MathUtils.pow(4836L, (-2319L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4,836^-2,319)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      long long0 = MathUtils.subAndCheck((long) 0, (long) 0);
      boolean boolean0 = MathUtils.equals((double) 0, (-1110.728507395), (double) 0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(967);
      double double1 = MathUtils.round(0.0, 967);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(9, 9);
      int int1 = MathUtils.addAndCheck(247, 9);
      int int2 = MathUtils.sign(38);
      float float0 = MathUtils.indicator((-1445.0F));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = (-3000);
      try { 
        MathUtils.pow(0L, (-3000));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-3,000)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-745.61);
      doubleArray0[2] = 1101.5809995;
      doubleArray0[3] = 1.5707963267948966;
      doubleArray0[4] = 4754.034795284409;
      doubleArray0[5] = 0.016;
      doubleArray0[6] = 1189.326085077952;
      doubleArray0[7] = 5.650007086920087E-9;
      doubleArray0[8] = 0.6366197723675814;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2208L, 4503599627370496L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1718.0, 1282.89, (double) 1);
      float float0 = MathUtils.round((float) 1, 1);
      int int1 = (-559);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-559), (-559));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -559
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 24.00246012;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = (-1413.5306);
      doubleArray0[3] = 9.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 24.00246012);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      try { 
        MathUtils.pow(569L, (-4040L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (569^-4,040)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 1430;
      int int1 = MathUtils.indicator(1430);
      int int2 = 63;
      try { 
        MathUtils.pow((-823L), (-10));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-823^-10)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      float float0 = MathUtils.sign((-506.032F));
      double double1 = MathUtils.factorialDouble(0);
      int int0 = MathUtils.addAndCheck(0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
      byte byte0 = MathUtils.indicator((byte)59);
      int int1 = MathUtils.lcm((int) (byte)59, 0);
      int[] intArray0 = new int[0];
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.addAndCheck((long) 0, (long) (byte)1);
      int int3 = MathUtils.mulAndCheck(2068, (int) (byte)1);
      short short0 = MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = MathUtils.mulAndCheck(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 419;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 8;
      intArray0[5] = 0;
      int[] intArray1 = new int[4];
      intArray1[0] = 2;
      intArray1[1] = 8;
      intArray1[2] = 419;
      intArray1[3] = 8;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = 565L;
      long long1 = MathUtils.mulAndCheck(565L, 565L);
      int int0 = 202;
      int int1 = MathUtils.addAndCheck(202, 202);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1943.3839746758);
      doubleArray0[1] = 749.5259405;
      doubleArray0[2] = 1.1102230246251565E-16;
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = 3.141592653589793;
      doubleArray0[5] = 2462.755313416276;
      doubleArray0[6] = (-442.996216);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,943.384 <= 749.526)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2799;
      intArray0[1] = 7;
      intArray0[2] = 80;
      intArray0[3] = 3457;
      intArray0[4] = (-1592);
      intArray0[5] = 17;
      int[] intArray1 = new int[6];
      intArray1[0] = (-1592);
      intArray1[1] = 0;
      intArray1[2] = 3457;
      intArray1[3] = 7;
      intArray1[4] = 7;
      intArray1[5] = 7;
      double double0 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathUtils.cosh(2841.326035907365);
      int int0 = 2017;
      // Undeclared exception!
      try { 
        MathUtils.factorial(2017);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = MathUtils.indicator(591L);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long1 = MathUtils.pow(591L, 0);
      double double1 = MathUtils.indicator(973.15);
      byte byte0 = MathUtils.sign((byte)108);
      long long2 = MathUtils.mulAndCheck(1L, (long) (byte)108);
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double2 = 0.0;
      boolean boolean1 = MathUtils.equals(0.0, 0.0, 1.0);
      int int0 = MathUtils.hash((double[]) null);
      byte byte1 = MathUtils.sign((byte) (-57));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1555);
      boolean boolean0 = MathUtils.equals((double) (short)1, (double) (short)1555, (double) (short)1555);
      long long0 = MathUtils.lcm((long) (short)1555, (-2260L));
      float float0 = MathUtils.round(269.5197F, (int) (short)1555);
      float float1 = MathUtils.indicator((float) 702860L);
      int int0 = MathUtils.mulAndCheck((int) (short)1555, 30);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) 30;
      doubleArray0[3] = (double) (short)1555;
      doubleArray0[4] = (double) 269.5197F;
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) 269.5197F;
      doubleArray0[7] = (double) Float.NaN;
      int int1 = MathUtils.hash(doubleArray0);
      short short1 = MathUtils.indicator((short)2637);
      short short2 = MathUtils.indicator((short)19);
      boolean boolean1 = MathUtils.equals(Double.NaN, 1817.3943812452092, 67);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 291.5892862597332);
      double double0 = MathUtils.indicator((double) (short)19);
      double double1 = MathUtils.log(46650, 9.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = (-2189);
      int int1 = MathUtils.addAndCheck((-2189), (-2189));
      float float0 = MathUtils.sign(Float.NaN);
      int int2 = 0;
      double double0 = MathUtils.factorialLog(0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-4378));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,378
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = MathUtils.gcd(100, 100);
      long long0 = MathUtils.sign((long) 100);
      // Undeclared exception!
      try { 
        MathUtils.round((-1.0F), 100, (-1964));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,964, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(5040L, 9223372036854775807L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 1050);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = MathUtils.gcd(4607182418800017408L, 4607182418800017408L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(67L, 4607182418800017408L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = (-1380);
      long long0 = MathUtils.binomialCoefficient(0, (-1380));
      float float0 = MathUtils.round((-1.0F), 1260, 0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) Float.NaN;
      doubleArray1[1] = (-61.812714004871);
      doubleArray1[2] = (double) 1260;
      doubleArray1[3] = (double) (-1.0F);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      long long1 = (-1L);
      try { 
        MathUtils.pow(0, (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(534, 534);
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = bigInteger0.toString();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 578);
      BigInteger bigInteger2 = bigInteger0.setBit(1068);
      BigInteger bigInteger3 = BigInteger.valueOf(534);
      BigInteger bigInteger4 = bigInteger0.modPow(bigInteger3, bigInteger3);
      double double0 = MathUtils.sign(0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1068;
      doubleArray0[1] = (double) 578;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 534;
      doubleArray0[4] = 0.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      BigInteger bigInteger5 = bigInteger0.abs();
      double double2 = MathUtils.binomialCoefficientLog(21, (-1373));
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, (long) 1068);
      long long0 = MathUtils.addAndCheck((long) 1068, 0L);
      double double3 = MathUtils.indicator((double) 21);
      short short0 = MathUtils.indicator((short) (-1689));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-291.0));
      double double0 = MathUtils.sign(3156.0);
      double double1 = MathUtils.scalb(2.2250738585072014E-308, (-28));
      long long0 = MathUtils.factorial(0);
      double double2 = MathUtils.binomialCoefficientLog(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (-291.0);
      doubleArray0[4] = (-291.0);
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      int int0 = MathUtils.lcm(634, 0);
      byte byte0 = MathUtils.indicator((byte)102);
      double double1 = MathUtils.normalizeAngle((-2405.8427), (-527.02));
      double[] doubleArray0 = new double[0];
      int int1 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.pow(4208363204685324176L, 4208363204685324176L);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      float float0 = 0.0F;
      float float1 = MathUtils.indicator(0.0F);
      double double1 = MathUtils.normalizeAngle(0.0F, Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 1720L);
      int int0 = MathUtils.pow(880, 0);
      double double0 = MathUtils.log(880, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.1818181574344635, 0.1818181574344635);
      int int0 = 1315;
      boolean boolean1 = MathUtils.equals(0.1818181574344635, 0.1818181574344635, 1315);
      boolean boolean2 = MathUtils.equals(0.1818181574344635, 0.1818181574344635, 1315);
      int int1 = MathUtils.pow(1315, (long) 1315);
      long long0 = MathUtils.pow(0L, 1315);
      long long1 = MathUtils.binomialCoefficient(1315, 1315);
      int int2 = (-1713);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1713), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,713, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-468.995047), (-468.995047), (-468.995047));
      boolean boolean1 = MathUtils.equals((-468.995047), (-468.995047), 19);
      int int0 = MathUtils.mulAndCheck(19, 19);
      short short0 = MathUtils.sign((short)1052);
      int[] intArray0 = new int[7];
      intArray0[0] = 361;
      intArray0[1] = (-1463);
      intArray0[2] = 19;
      intArray0[3] = 361;
      intArray0[4] = (-368);
      intArray0[5] = 66;
      intArray0[6] = 361;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(3366L, 3366L);
      boolean boolean0 = MathUtils.equals((double) 0L, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (-6.032174644509064E-23), 0.0);
      int int0 = MathUtils.pow(2004, 30L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 2004;
      doubleArray0[4] = (double) 3366L;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 2004;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (-6.032174644509064E-23);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-6.032174644509064E-23);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (double) 3366L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)57);
      short short0 = MathUtils.sign((short) (byte)1);
      long long0 = MathUtils.indicator((long) (byte)57);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (byte)57;
      doubleArray0[3] = (double) (byte)57;
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = (double) (byte)1;
      doubleArray0[6] = (double) 1L;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.pow((int) (short)1, (long) (short)1);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double double1 = MathUtils.factorialLog(3566);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      double double0 = MathUtils.log(4127.7695097, 0);
      int int1 = MathUtils.pow(0, 1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4127.7695097;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1010.819605004;
      doubleArray0[3] = 911.749301;
      doubleArray0[4] = (double) 1;
      int int2 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      int int0 = bigInteger1.intValue();
      String string0 = bigInteger0.toString();
      int int1 = 0;
      BigInteger bigInteger2 = bigInteger1.setBit(66);
      String string1 = bigInteger0.toString(0);
      byte[] byteArray0 = bigInteger1.toByteArray();
      BigInteger bigInteger3 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      int int2 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0, (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-92));
      int int0 = MathUtils.mulAndCheck((int) (byte) (-1), 14);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-92);
      MathUtils.checkOrder(doubleArray0);
      byte byte1 = (byte)0;
      byte byte2 = MathUtils.indicator((byte)0);
      try { 
        MathUtils.pow(474, (int) (byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (474^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      long long1 = MathUtils.mulAndCheck((-557L), 586L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long2 = MathUtils.subAndCheck((-1607L), (-1607L));
      double double0 = MathUtils.log(0.5, 0.0);
      int int0 = MathUtils.lcm((-281), (-281));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.compareTo(0L, (-857.79542019119), 0.1818181574344635);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, (double) 0L, 281);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (-557L), 0.2857142686843872, 281);
      long long3 = MathUtils.mulAndCheck((long) (-281), 0L);
      int int2 = MathUtils.subAndCheck((-2024), 19);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(536.545945, 536.545945, 99.137989760989);
      double double0 = MathUtils.log(99.137989760989, 0.0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float float0 = MathUtils.indicator(1582.8711F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-121.02834912548285);
      doubleArray0[2] = 1597.92659447621;
      double double0 = 0.5;
      doubleArray0[3] = 0.5;
      doubleArray0[4] = (-2664.42368);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 455.08816594;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -121.028)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 8;
      int int1 = MathUtils.mulAndCheck(8, 8);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 64;
      doubleArray0[2] = (double) 64;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 8;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 64;
      doubleArray1[1] = 1.4456468917292502E-16;
      doubleArray1[2] = (double) 8;
      doubleArray1[3] = 0.19999954104423523;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (64 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)114);
      boolean boolean0 = MathUtils.equals((-1.5707963267948966), (-1.5707963267948966), 644.446);
      long long0 = MathUtils.mulAndCheck(3987L, (-200L));
      byte byte1 = MathUtils.sign((byte) (-34));
      int int0 = MathUtils.sign(301);
      long long1 = MathUtils.indicator((-1599L));
      int int1 = MathUtils.mulAndCheck(301, 1561);
      long long2 = MathUtils.subAndCheck(3276L, 20922789888000L);
      double double0 = (-592.31386754929);
      double double1 = MathUtils.scalb((-592.31386754929), (byte) (-34));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.6666666269302368, (-490.44), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 105.96;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1247.463);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2124.2740959667);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (2,321.46 >= -0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      short short0 = MathUtils.indicator((short)2579);
      boolean boolean0 = MathUtils.equals((double) (short)1, (-970.18722164), (int) (short)1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-970.18722164);
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (short)2579;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) (short)1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (2,579 > 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.compareTo((-553.2), (-553.2), 1241.8237);
      double double0 = MathUtils.factorialLog(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-553.2);
      doubleArray0[1] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 121;
      boolean boolean0 = MathUtils.equals(3177.12486, 13.07, 121);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      long long0 = MathUtils.addAndCheck((long) (byte)0, (long) (byte)1);
      double double0 = MathUtils.sign(0.0);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)1;
      double double1 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.round((float) 0, 1);
      double double2 = MathUtils.sinh((-1370.2792229));
      long long1 = MathUtils.mulAndCheck(2019L, (-2120L));
      byte byte1 = MathUtils.indicator((byte)0);
      double double3 = MathUtils.indicator((double) (-2120L));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, (-976L));
      int[] intArray0 = new int[1];
      intArray0[0] = 2078;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(1661L, (-252L));
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = bigInteger0.toString();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 175);
      int int0 = MathUtils.pow(175, 175);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-61.3071848112014), (-61.3071848112014), 2481.654504886648);
      int int0 = MathUtils.indicator(407);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-61.3071848112014);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-61.3071848112014);
      doubleArray0[3] = (-1944.4920434);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int1 = (-2189);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2189));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,189
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-42));
      // Undeclared exception!
      try { 
        MathUtils.round(1352.742F, (int) (byte) (-1), (int) (byte) (-42));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -42, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathUtils.sinh((-2808.7804));
      int int0 = (-301);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-301));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -301
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(4014.1F, 28, 28);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 28, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-67));
      byte byte1 = MathUtils.sign((byte) (-67));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("o?D2");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.o?D2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 207;
      int int1 = 2104;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(207, 2104);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 207, k = 2,104
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)57);
      boolean boolean0 = MathUtils.equals((double) (byte)1, (double) (byte)1);
      double double0 = MathUtils.cosh((byte)1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.5430806348152437;
      doubleArray0[1] = 710.958605169282;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.indicator(1.5430806348152437);
      double double3 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.addAndCheck(942L, 247L);
      int int0 = MathUtils.gcd((int) (byte)57, (int) (byte)1);
      float float0 = MathUtils.round(0.0F, (int) (byte)57, (int) (byte)1);
      boolean boolean1 = MathUtils.equals((double) 942L, 1.5430806348152437, 3443.90349124191);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 20;
      intArray0[1] = (-193);
      intArray0[2] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2611.537167563, (double) 0, 0.0);
      long long0 = MathUtils.pow((long) (-193), 656L);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-800);
      intArray0[1] = 0;
      intArray0[2] = 1963;
      intArray0[3] = 13;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.subAndCheck(0, 13);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(1963, 2919);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1,963, k = 2,919
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.indicator(0L);
      long long2 = 0L;
      long long3 = 0L;
      long long4 = MathUtils.lcm(0L, 0L);
      double double0 = MathUtils.sign((double) 0L);
      int int0 = 403;
      int int1 = MathUtils.gcd(403, 0);
      int int2 = MathUtils.lcm((-530), 403);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 50, 88);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        MathUtils.pow((-2882L), (-2882L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,882^-2,882)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      float float0 = MathUtils.sign((float) (short)0);
      int int0 = (-1247);
      double double0 = MathUtils.scalb((short)0, (-1247));
      // Undeclared exception!
      try { 
        MathUtils.round((double) 0.0F, (int) (short)1, (-1247));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((-0.5), 0.0);
      long long0 = MathUtils.sign(0L);
      try { 
        MathUtils.normalizeArray(doubleArray0, (-0.5));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = (-180.4);
      double double1 = 1653.55835789449;
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals((-180.4), 1653.55835789449, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-111));
      double double0 = MathUtils.binomialCoefficientLog(250, (byte) (-1));
      boolean boolean0 = MathUtils.equals(723.0811689500551, (double) (byte) (-1));
      byte byte1 = MathUtils.indicator((byte) (-1));
      long long0 = MathUtils.gcd(945L, 945L);
      int int0 = MathUtils.compareTo((byte) (-111), 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.2857142686843872, 0.0);
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientLog(1, 0);
      boolean boolean1 = MathUtils.equals(0.2857142686843872, (-2998.11), 0.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 1);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = MathUtils.sign(7910884519577875640L);
      double double0 = MathUtils.cosh(1L);
      int int0 = (-2783);
      // Undeclared exception!
      try { 
        MathUtils.equals(1.5430806348152437, 1.5430806348152437, (-2783));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      try { 
        MathUtils.pow(0L, (-2029L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,029)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1433.521667238869), 0.0);
      int int0 = MathUtils.pow(2153, 2153);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1433.521667238869);
      doubleArray0[1] = (double) 89610153;
      doubleArray0[2] = (double) 2153;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1433.521667238869);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1433.521667238869);
      doubleArray0[8] = (-1433.521667238869);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals((-1433.521667238869), (-1433.521667238869));
      boolean boolean2 = MathUtils.equals((double[]) null, doubleArray0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2271.324469519488);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = MathUtils.compareTo((-6217.3910126), 6.283185307179586, (-6217.3910126));
      double double0 = MathUtils.round((-6217.3910126), (-1));
      long long0 = MathUtils.lcm((long) (-1), (long) (-1));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-6220.0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1));
      double double1 = MathUtils.distance(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      long long0 = bigInteger1.longValue();
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      int int0 = bigInteger0.bitCount();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 584L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 584L, (double) 584L, 1969);
      long long1 = MathUtils.subAndCheck(584L, (-4267615245585081135L));
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 584L);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
      long long0 = MathUtils.pow((long) 1, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(10.0, (-3281.50792719521), 134);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = (-1798);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1798), 4973);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,798, k = 4,973
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 103;
      double double0 = MathUtils.binomialCoefficientLog(103, 103);
      long long0 = (-2212L);
      long long1 = MathUtils.indicator((-2212L));
      // Undeclared exception!
      try { 
        MathUtils.factorial(103);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.pow(0L, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(219);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 6;
      intArray0[1] = (-2689);
      intArray0[2] = 13;
      intArray0[3] = 0;
      intArray0[4] = (-1250);
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = MathUtils.sinh(620.6);
      int int0 = MathUtils.indicator(262);
      double double1 = MathUtils.normalizeAngle((-1030.53), (-1030.53));
      float float0 = MathUtils.sign(2579.847F);
      long long0 = MathUtils.binomialCoefficient(262, 9);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = MathUtils.gcd(2712L, 1415L);
      int int0 = MathUtils.lcm(10, 10);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = MathUtils.scalb(105.1126848, 974);
      byte byte0 = MathUtils.sign((byte)31);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.6783050669380595E295;
      doubleArray0[1] = 105.1126848;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = 1.6783050669380595E295;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
      double double0 = MathUtils.scalb(0, 0);
      int int0 = MathUtils.lcm(0, 0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, (-4.9E-324));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = MathUtils.pow(118L, 3054);
      boolean boolean0 = MathUtils.equalsIncludingNaN(137.26, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 137.26;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 3054;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 118L;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 118L;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.1428571343421936, 1364.8189244);
      double double0 = MathUtils.sign((-1.0));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3113.775);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-3724.48925);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 829.63512799;
      doubleArray0[1] = 2327.88;
      doubleArray0[2] = (-2035.08);
      doubleArray0[3] = 1.2246467991473532E-16;
      doubleArray0[4] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = MathUtils.lcm(606L, 1161L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 234522L;
      doubleArray0[1] = (double) 1161L;
      doubleArray0[2] = (double) 1161L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1161L);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, 9.220590270857665E-9, 757.189);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float float0 = (-850.893F);
      float float1 = MathUtils.sign((-850.893F));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-850.893F), (double) (-850.893F));
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (-1.0F), (double) (-1.0F), 10.0);
      int int0 = 773;
      int int1 = MathUtils.sign(773);
      int int2 = MathUtils.subAndCheck(1, 773);
      int int3 = 2084322364;
      int int4 = MathUtils.gcd((-772), 2084322364);
      // Undeclared exception!
      MathUtils.factorialLog(2084322364);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      short short0 = MathUtils.indicator((short)250);
      long long0 = MathUtils.mulAndCheck((-450L), (-98L));
      int int0 = MathUtils.pow((int) (short)1, 44100L);
      int int1 = 1717986918;
      // Undeclared exception!
      try { 
        MathUtils.lcm(1717986918, (int) (short)250);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      float float0 = MathUtils.sign((-1.0F));
      int int0 = MathUtils.lcm(2, 0);
      byte byte0 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.normalizeAngle((byte)0, 0);
      short short0 = MathUtils.indicator((short) (-160));
      float float1 = MathUtils.round((-1.0F), 886);
      int int1 = MathUtils.hash((double) (byte)0);
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 165;
      intArray0[4] = (int) (short) (-160);
      intArray0[5] = 2886;
      intArray0[6] = 0;
      int[] intArray1 = new int[8];
      intArray1[0] = 886;
      intArray1[1] = 2886;
      intArray1[2] = (int) (byte)1;
      intArray1[3] = 886;
      intArray1[4] = 165;
      intArray1[5] = 328;
      intArray1[6] = 165;
      intArray1[7] = 2;
      int int2 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 19;
      int int1 = MathUtils.pow(21, 19);
      int int2 = MathUtils.indicator(21);
      long long0 = MathUtils.sign(0L);
      int int3 = MathUtils.indicator((-1670));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 21;
      doubleArray0[1] = 9.313225746154785E-10;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 19;
      doubleArray1[1] = (double) 21;
      doubleArray1[2] = (double) 547383789;
      doubleArray1[3] = (double) (-1);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      float float0 = MathUtils.round((float) 0L, 60, 6);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-112);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(129, byteArray0);
      } catch(NumberFormatException e) {
         //
         // Invalid signum value
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 1409;
      // Undeclared exception!
      try { 
        MathUtils.factorial(1409);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      float float0 = MathUtils.sign((float) 0L);
      int int0 = MathUtils.subAndCheck(203, 0);
      double double0 = MathUtils.binomialCoefficientLog(203, 101);
      float float1 = MathUtils.sign((-486.4F));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 137.82280081881376;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 203;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 101;
      doubleArray0[7] = 137.82280081881376;
      doubleArray0[8] = (double) 101;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = 12;
      int int1 = MathUtils.subAndCheck((-489), 12);
      double[] doubleArray1 = new double[0];
      double double1 = MathUtils.safeNorm(doubleArray1);
      long long0 = MathUtils.pow((long) (-501), 12);
      int int2 = MathUtils.hash(doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.TEN;
      int int3 = bigInteger2.bitCount();
      BigInteger bigInteger3 = bigInteger0.xor(bigInteger2);
      double double2 = bigInteger0.doubleValue();
      BigInteger bigInteger4 = bigInteger1.divide(bigInteger2);
      boolean boolean0 = bigInteger3.isProbablePrime(12);
      BigInteger bigInteger5 = bigInteger0.min(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-691L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-691)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.max(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.modInverse(bigInteger1);
      BigInteger bigInteger4 = BigInteger.TEN;
      BigInteger bigInteger5 = bigInteger4.shiftRight(248);
      BigInteger bigInteger6 = bigInteger4.abs();
      double double0 = bigInteger4.doubleValue();
      BigInteger bigInteger7 = bigInteger0.divide(bigInteger4);
      BigInteger bigInteger8 = MathUtils.pow(bigInteger0, 0);
      double double1 = MathUtils.sign(6.283185307179586);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 6.283185307179586;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
      int int0 = MathUtils.hash(969.35);
      double double2 = MathUtils.round(0.0, 0);
      int int1 = MathUtils.addAndCheck(8, (-1941797375));
      float float0 = MathUtils.sign(0.0F);
      int int2 = MathUtils.compareTo(6.283185307179586, 9.220590270857665E-9, 1.0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 13, (-1072));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(Integer.MIN_VALUE, Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      long long0 = MathUtils.gcd(720L, 720L);
      long long1 = MathUtils.subAndCheck((-1193L), 720L);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1613);
      intArray0[1] = 18;
      intArray0[2] = 2990;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double1 = MathUtils.indicator(24.703);
  }
}
