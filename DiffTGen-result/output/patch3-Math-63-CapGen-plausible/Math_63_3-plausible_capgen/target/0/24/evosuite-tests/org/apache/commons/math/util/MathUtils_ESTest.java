/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:11:43 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(16, (-739));
      // Undeclared exception!
      try { 
        MathUtils.equals(848.8825571118524, (double) 16, (-739));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 4365;
      int int1 = MathUtils.pow(4365, (long) 4365);
      // Undeclared exception!
      try { 
        MathUtils.round(1030.0, 134, 134);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.sign(0.0F);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.log((-0.2499999997677497), 1005.23553);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (-0.2499999997677497);
      doubleArray0[2] = (-0.2499999997677497);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0.0F;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.074);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      double double0 = MathUtils.normalizeAngle(4.9E-324, 0);
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = (-1725);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.subAndCheck(6, 0);
      double double1 = MathUtils.factorialLog(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1725);
      doubleArray0[4] = 4.9E-324;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int3 = MathUtils.compareTo(31.0, 10.0, 2018.38);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = MathUtils.pow(703, 0L);
      int int1 = 874;
      int int2 = MathUtils.mulAndCheck(1, 874);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 874;
      doubleArray0[1] = (double) 874;
      doubleArray0[2] = 874.0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not decreasing (0 < 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1073, 1073);
      boolean boolean0 = MathUtils.equals(0.041666666666666664, 0.0);
      double double1 = MathUtils.sign(0.041666666666666664);
      int int0 = (-3076);
      int int1 = MathUtils.lcm((-3076), (-3076));
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) (-3076), (-5034868814120038125L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 1227;
      long long0 = MathUtils.binomialCoefficient(1227, 1227);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2993, 1227);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)17);
      int int0 = MathUtils.sign((int) (byte)1);
      try { 
        MathUtils.pow((long) (byte)17, (-4575));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (17^-4,575)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        MathUtils.pow(0L, (-818));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-818)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      long long0 = bigInteger2.longValueExact();
      BigInteger bigInteger3 = bigInteger0.and(bigInteger2);
      BigInteger bigInteger4 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      int int0 = (-716);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-716));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -716
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(2780L, 2780L);
      double double0 = MathUtils.normalizeAngle((-1927.0515), 0.08371849358081818);
      int[] intArray0 = new int[5];
      intArray0[0] = 2710;
      intArray0[1] = 0;
      intArray0[2] = (-5363);
      intArray0[3] = (-194);
      intArray0[4] = 821;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double1 = MathUtils.cosh((-551.81827701));
      boolean boolean0 = MathUtils.equals(4204.482053413951, (-1927.0515));
      int int1 = MathUtils.sign((-194));
      double double2 = MathUtils.factorialDouble(243);
      int int2 = MathUtils.mulAndCheck(243, 15);
      boolean boolean1 = MathUtils.equalsIncludingNaN(2311.676172891922, (-515.985), 0.0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = MathUtils.indicator((-2028L));
      int int0 = MathUtils.lcm(0, 0);
      long long1 = MathUtils.factorial(0);
      float float0 = 0.0F;
      float float1 = MathUtils.round(0.0F, 0, 0);
      float float2 = MathUtils.sign(3692.186F);
      float float3 = MathUtils.indicator(2110.0F);
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientLog(0, (-2135));
      double double1 = MathUtils.log(3.834E-20, (-299.354238961264));
      double double2 = MathUtils.sign(363.132473753845);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1L), 3277.8840479);
      long long2 = 339L;
      long long3 = MathUtils.lcm((-1296L), 339L);
      double double3 = MathUtils.round((double) 1L, 0, 0);
      float float4 = MathUtils.indicator(8.453837F);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float float0 = (-2690.63F);
      int int0 = 0;
      float float1 = MathUtils.round((-2690.63F), 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2691.0F);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-2691.0F);
      doubleArray0[3] = (double) (-2691.0F);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= -2,691)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(3028, (-1234));
      int int1 = MathUtils.lcm(369, 211);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 886.144;
      doubleArray0[1] = (double) (-1234);
      doubleArray0[2] = (double) 4262;
      doubleArray0[3] = (double) 3028;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 211;
      doubleArray0[6] = (double) 4262;
      doubleArray0[7] = (double) 3028;
      doubleArray0[8] = (double) 211;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.sinh(0.0);
      int int2 = MathUtils.lcm(1030, 211);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 1.304E19);
      float float0 = MathUtils.sign((float) 1030);
      double double2 = MathUtils.sign(0.0);
      int int3 = MathUtils.pow(0, 0);
      double double3 = MathUtils.cosh(119.02);
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(1003, 1030, mockRandom0);
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
      double double4 = MathUtils.sign((-2857.589010355852));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float float0 = MathUtils.sign(1896.27F);
      double double0 = MathUtils.sign((double) 1.0F);
      int int0 = 20;
      int int1 = MathUtils.pow(20, 20);
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, 0.0);
      long long0 = MathUtils.factorial(20);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2432902008176640000L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1896.27F;
      doubleArray0[3] = 1.1102230246251565E-16;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(93, 0);
      short short0 = MathUtils.sign((short)188);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)188;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 93;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 93;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double0 = MathUtils.log(0.0, (-1831.678760811));
      byte byte0 = MathUtils.sign((byte) (-48));
      double double1 = MathUtils.indicator(0.0);
      int int0 = MathUtils.pow((-724), 2212L);
      byte byte1 = MathUtils.sign((byte)70);
      int int1 = MathUtils.lcm((int) (byte) (-1), 0);
      float float0 = MathUtils.round((-1.0F), (int) (byte) (-1));
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (int) (byte)70;
      intArray0[6] = (int) (byte) (-1);
      double double2 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = (-790.41828);
      int int0 = 0;
      double double1 = MathUtils.round((-790.41828), 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-790.41828);
      doubleArray0[1] = (-790.0);
      doubleArray0[2] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      int int1 = 0;
      double double2 = MathUtils.round((-790.0), 0);
      int int2 = (-2190);
      double double3 = MathUtils.binomialCoefficientLog(6, (-2190));
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = MathUtils.lcm(1307674368000L, 1307674368000L);
      long long1 = MathUtils.addAndCheck(1307674368000L, 1307674368000L);
      long long2 = MathUtils.sign(0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1307674368000L, (double) 1307674368000L);
      int int0 = MathUtils.subAndCheck(2108, 891);
      double double0 = MathUtils.round((double) 0L, 0);
      byte byte0 = MathUtils.indicator((byte)0);
      int int1 = MathUtils.hash((double[]) null);
      double double1 = MathUtils.factorialDouble(2108);
      double double2 = MathUtils.sinh(1217);
      double[] doubleArray0 = new double[0];
      double double3 = MathUtils.distance(doubleArray0, (double[]) null);
      int[] intArray0 = new int[4];
      intArray0[0] = 891;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = 0;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      long long3 = MathUtils.addAndCheck(1862L, 0L);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 1307674368000L, 6.283185307179586, Double.POSITIVE_INFINITY);
      int int3 = MathUtils.indicator(846);
      try { 
        MathUtils.pow(891, (-1928L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (891^-1,928)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = bigInteger0.not();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[5] = 1.1430250008909141E-8;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (3.142 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = MathUtils.log(Double.NEGATIVE_INFINITY, 3150.7);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.gcd(0L, (-3056L));
      int int0 = 35;
      int int1 = 3843;
      // Undeclared exception!
      try { 
        MathUtils.round(3150.7, 35, 3843);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 0L;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 0L;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = MathUtils.pow(151, 151);
      int int1 = MathUtils.pow((-882304409), 151);
      int int2 = MathUtils.hash((double) (-1653899241));
      byte byte0 = (byte)99;
      byte byte1 = MathUtils.sign((byte)99);
      // Undeclared exception!
      try { 
        MathUtils.equals(1.5707963267948966, (double) (-882304409), (-1187));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = MathUtils.sign(3634L);
      int int0 = MathUtils.pow(1631, 471);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2407.5964, (double) (-719018337));
      double double0 = MathUtils.cosh(2.0);
      long long1 = MathUtils.sign(0L);
      short short0 = MathUtils.indicator((short)2636);
      int int1 = MathUtils.lcm(109, 471);
      BigInteger bigInteger0 = BigInteger.TEN;
      double double1 = bigInteger0.doubleValue();
      long long2 = bigInteger0.longValueExact();
      int int2 = bigInteger0.intValue();
      try { 
        MathUtils.pow(bigInteger0, (-2174));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-2,174)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = 1822L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(1822L, (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 1.1102230246251565E-16;
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2138.07411743908;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.normalizeAngle(0.0, 0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.valueOf(2175L);
      int int0 = (-4063);
      // Undeclared exception!
      try { 
        bigInteger0.testBit((-4063));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 495.517534829057);
      long long0 = MathUtils.pow(68L, 68L);
      double double0 = MathUtils.sinh(0L);
      double double1 = MathUtils.indicator((-7.44321345601866E-11));
      int[] intArray0 = new int[4];
      intArray0[0] = (-603);
      intArray0[1] = 2113;
      intArray0[2] = 1601;
      intArray0[3] = 1852;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = (-1856);
      double double0 = MathUtils.round((-3168.2199), (-1856));
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = 2395.63989;
      double double1 = MathUtils.sinh(2395.63989);
      int int0 = (-2216);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2216));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,216
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(Integer.MIN_VALUE, Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -2,147,483,648 + -2,147,483,648
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-238.5537120621192), 0.0);
      double double0 = 0.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN((-238.5537120621192), 0.0, 10.0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)60;
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)6;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.clearBit((byte)60);
      BigInteger bigInteger2 = bigInteger0.clearBit((byte)6);
      double double1 = bigInteger0.doubleValue();
      BigInteger bigInteger3 = bigInteger0.gcd(bigInteger2);
      int int0 = bigInteger0.bitLength();
      try { 
        MathUtils.pow(bigInteger0, (-1168L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (15,366^-1,168)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float float0 = MathUtils.sign((-4345.218F));
      int int0 = MathUtils.hash((-3977.81453));
      long long0 = MathUtils.indicator((-2644281811660520851L));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)7;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (long) (byte) (-5));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-322,297^-5)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(9.220590270857665E-9, (-1279.24475876), 1467);
      int int0 = MathUtils.sign(1467);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-1279.24475876);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 1062.1131347;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(2L, 2L);
      double double0 = MathUtils.factorialDouble(0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.subAndCheck(0, 2630);
      int int2 = MathUtils.gcd(0, (-212));
      boolean boolean0 = MathUtils.equalsIncludingNaN(2150.502133466515, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-212));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -212
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-633.4055970968249);
      doubleArray0[1] = 2.356194490192345;
      doubleArray0[2] = 560.1923080331;
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte)0);
      double double1 = MathUtils.scalb((byte)1, 88);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-100));
      double double0 = MathUtils.factorialLog(9);
      int int0 = MathUtils.compareTo(12.801827480081469, (byte) (-100), (-1087.1));
      boolean boolean0 = MathUtils.equals((-633.37), (double) 9);
      int int1 = MathUtils.pow(0, 1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 12.801827480081469;
      doubleArray0[5] = (-633.37);
      doubleArray0[6] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (9 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 0, 0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (-1216.2077));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.subAndCheck((long) 31, (long) 31);
      int int1 = MathUtils.sign(31);
      boolean boolean0 = MathUtils.equals((double) 31, 0.0, 1795.857438643018);
      long long1 = MathUtils.pow((long) 1, 0L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int2 = MathUtils.pow(704, (long) 704);
      float float0 = MathUtils.round((float) 704, 2101);
      int int3 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 31;
      intArray0[2] = 704;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 0;
      int int4 = MathUtils.distanceInf(intArray0, intArray0);
      int[] intArray1 = new int[5];
      intArray1[0] = 704;
      intArray1[1] = 0;
      intArray1[2] = 31;
      intArray1[3] = 1;
      intArray1[4] = 704;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      int int0 = 0;
      int int1 = MathUtils.lcm((-771), 0);
      long long0 = MathUtils.mulAndCheck((long) 0, 9193070505571053912L);
      long long1 = MathUtils.subAndCheck((long) 0, (long) 0);
      int int2 = MathUtils.subAndCheck(0, (-771));
      int int3 = MathUtils.indicator(771);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 771;
      doubleArray0[1] = (-2476.6624205455);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1;
      double double1 = (-2112.3591619);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2112.3591619));
      long long2 = MathUtils.mulAndCheck(0L, (-302932621132653753L));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-2,476.662 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = MathUtils.pow(703, 0L);
      int int1 = MathUtils.sign(0);
      int int2 = 874;
      int int3 = MathUtils.mulAndCheck(0, 874);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 874;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 10.0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 10)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 1016;
      double double1 = MathUtils.scalb(0.0, 1016);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("ROUND_HALF_UP");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.ROUND_HALF_UP
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = MathUtils.cosh((-1148.3558));
      boolean boolean0 = MathUtils.equals(1.304E19, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double1 = MathUtils.normalizeAngle(559.987547213564, 0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean1 = bigInteger0.equals("");
      BigInteger bigInteger1 = BigInteger.ZERO;
      int int0 = bigInteger1.intValueExact();
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.and(bigInteger1);
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0L);
      boolean boolean2 = MathUtils.equals((double[]) null, (double[]) null);
      double double2 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      double double0 = MathUtils.normalizeAngle(14.0, 14.0);
      float float0 = MathUtils.sign(0.0F);
      boolean boolean1 = MathUtils.equalsIncludingNaN(14.0, (double) 0.0F, 14.0);
      double double1 = MathUtils.sinh(1067.4587480545);
      long long0 = MathUtils.sign(2819561105158720014L);
      boolean boolean2 = MathUtils.equals((-18.831), 3482.4071714024253);
      double double2 = MathUtils.binomialCoefficientLog(0, (-3530));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = MathUtils.sinh(0.036);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = 9;
      int int1 = MathUtils.indicator(9);
      int int2 = 1555;
      double double1 = MathUtils.round(0.01745329052209854, 1555, 0);
      int int3 = MathUtils.gcd(1555, 0);
      long long0 = MathUtils.addAndCheck(0L, (long) 0);
      boolean boolean0 = MathUtils.equals((double) 0, 0.0, (double) 1555);
      double double2 = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.equals(0.01745329052209854, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-1376), (-320));
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 335;
      int int0 = 478;
      intArray0[3] = 478;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-416);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.normalizeAngle((-416), 478);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (double) 0);
      int int2 = MathUtils.indicator(0);
      float float0 = MathUtils.round((float) 478, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2767));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,767
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, (-660.058));
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      long long0 = MathUtils.lcm((long) 0, (long) 0);
      int int2 = MathUtils.hash((-660.058));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-210));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -210
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1073, 0);
      boolean boolean0 = MathUtils.equals(0.041666666666666664, 0.0);
      double double1 = MathUtils.sign(0.041666666666666664);
      int int0 = (-3076);
      int int1 = MathUtils.addAndCheck((-3076), (-3076));
      long long0 = MathUtils.mulAndCheck((long) 0, (-5034868814120038111L));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 1073);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1,073
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = MathUtils.hash((-1524.93363742));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.negate();
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      String string0 = bigInteger0.toString(0);
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 305);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 305);
      int[] intArray0 = new int[4];
      intArray0[0] = 305;
      intArray0[1] = 305;
      intArray0[2] = 305;
      intArray0[3] = 305;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.log(420.25, 420.25);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 305);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 305
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-99));
      boolean boolean0 = MathUtils.equals((double) (short) (-99), (double) (short) (-99));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-99);
      doubleArray0[1] = (double) (short) (-99);
      doubleArray0[2] = (double) (short) (-99);
      doubleArray0[3] = (double) (short) (-99);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (short) (-99);
      doubleArray0[6] = (double) (short) (-99);
      doubleArray0[7] = 1.1102230246251565E-16;
      doubleArray0[8] = (double) (short) (-99);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-99 >= -99)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = (-874.04093239844);
      double double1 = (-2124.44463766);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-874.04093239844), (-2124.44463766));
      long long0 = MathUtils.indicator(0L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      try { 
        MathUtils.normalizeArray(doubleArray0, (-2322.2720878));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-925.721293090853), 1294.984, 0.0);
      try { 
        MathUtils.pow((-3795), (-3795));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,795^-3,795)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = MathUtils.pow(9223372036854775807L, 0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = 0;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(0);
      BigInteger bigInteger2 = bigInteger1.subtract(bigInteger0);
      // Undeclared exception!
      try { 
        bigInteger1.modInverse(bigInteger0);
      } catch(ArithmeticException e) {
         //
         // BigInteger not invertible.
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1192.38736197);
      doubleArray0[2] = 0.5;
      doubleArray0[3] = (-1527.56455);
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 914.0079;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1117.7659783);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.sinh((-883.0));
      int int0 = MathUtils.compareTo((-605.0), (-883.0), 1.304E19);
      double double1 = MathUtils.normalizeAngle(0.0, 939.8159497455409);
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = bigInteger0.isProbablePrime(1349);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        MathUtils.round((-883.0), 1349, 1349);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 4736;
      intArray0[1] = (-1443);
      intArray0[2] = (-309);
      intArray0[3] = (-2723);
      intArray0[4] = (-1806);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((double) 4736, (double) (-2723), 3977.516474246818);
      float float0 = MathUtils.indicator((float) 4736);
      long long0 = MathUtils.addAndCheck((long) 4736, 2062L);
      short short0 = MathUtils.sign((short) (-2437));
      int int0 = MathUtils.addAndCheck((-938), 4736);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 880, (-309));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -309, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      int int2 = (-2387);
      int int3 = MathUtils.lcm(1, (-2387));
      long long0 = MathUtils.pow((long) (-2387), (long) 1);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-1554.7979), (double) (-2387L), (-2387));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = (-760);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-760), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -760, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = (-2008);
      int int1 = MathUtils.sign((-2008));
      long long0 = 1300L;
      long long1 = MathUtils.mulAndCheck((long) (-1), 1300L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = (-4627);
      int int1 = (-1034);
      int int2 = MathUtils.gcd((-4627), (-1034));
      double double0 = MathUtils.sinh(2083.07);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1034);
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) (-4627);
      doubleArray0[4] = (-3941.8967);
      doubleArray0[5] = (double) (-4627);
      try { 
        MathUtils.normalizeArray(doubleArray0, 3940.4);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = MathUtils.log(0.0, (-2025.0));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 6090.9;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(2935890503282001226L, 0);
      short short0 = MathUtils.sign((short) (-601));
      double double1 = MathUtils.cosh(0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (-2025.0), (-1395.7522));
      double double2 = MathUtils.cosh(1.4456468917292502E-16);
      long long1 = MathUtils.indicator(1L);
      long long2 = MathUtils.sign((-1127L));
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) (short) (-601), 0.0);
      int int0 = MathUtils.indicator((-227));
      float float0 = MathUtils.round((float) 1L, (int) (short) (-601), 0);
      double double3 = MathUtils.log(6090.9, 0.0);
      byte byte0 = MathUtils.sign((byte)0);
      long long3 = MathUtils.lcm((-583L), (-583L));
      long long4 = MathUtils.subAndCheck(1L, 40320L);
      float float1 = MathUtils.round(0.0F, (-2081));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      double double1 = MathUtils.log(1.0, 0.0);
      short short0 = (short)18;
      short short1 = MathUtils.sign((short)18);
      int int0 = 1205;
      // Undeclared exception!
      try { 
        MathUtils.round((float) (short)18, 0, 1205);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,205, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.cosh(0.2);
      double double1 = MathUtils.indicator(1.020066755619076);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.020066755619076, 1.0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 11, 746);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.gcd((long) 29791, (long) (byte)0);
      int int1 = MathUtils.pow((int) (byte)0, (long) (byte)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int2 = MathUtils.pow(71, (long) (byte)0);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.sinh((byte)0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = MathUtils.lcm((-844L), (-844L));
      int int0 = (-370);
      int int1 = MathUtils.pow((-370), 720L);
      long long1 = MathUtils.lcm((long) (-370), (long) 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      double double0 = bigInteger0.doubleValue();
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = 0.0;
      int int0 = MathUtils.hash(0.0);
      double double1 = MathUtils.sign((double) 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = 0;
      int int2 = MathUtils.lcm(0, 0);
      MathUtils.checkOrder(doubleArray0);
      double double3 = MathUtils.round((double) 0, 0);
      double double4 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double5 = MathUtils.indicator(0.0);
      int int3 = 0;
      int int4 = MathUtils.indicator(0);
      long long0 = MathUtils.lcm((long) 0, (long) 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger0 = null;
      try { 
        MathUtils.pow((BigInteger) null, (-3519));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-3,519)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.gcd((long) 29791, (long) (byte)0);
      int int1 = MathUtils.pow((int) (byte)0, (long) (byte)0);
      int int2 = MathUtils.pow(71, (long) (byte)0);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.TWO_PI;
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = 0L;
      long long1 = 0L;
      long long2 = MathUtils.subAndCheck(0L, 0L);
      int int0 = (-1170);
      int int1 = MathUtils.indicator((-1170));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("s}tl/'iuP9{");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.s}tl/'iuP9{
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = 329;
      boolean boolean0 = bigInteger0.testBit(329);
      long long0 = 0L;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      int int1 = (-1216);
      try { 
        MathUtils.pow(bigInteger1, (-1216));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1,216)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-4623.3266), 12.0);
      float float0 = MathUtils.round((-1968.1509F), 1844);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float float0 = MathUtils.sign(1.0F);
      int int0 = MathUtils.gcd(1730, 1730);
      boolean boolean0 = MathUtils.equals((-3698.176399475), (double) 1730, 1730);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (-3698.176399475);
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (-3698.176399475);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float1 = MathUtils.sign(0.0F);
      int int1 = MathUtils.addAndCheck(1730, 121);
      long long0 = MathUtils.subAndCheck(1326L, (long) 1851);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(6L, 6L);
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 398.993;
      doubleArray0[1] = 982.62784346966;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.round(0.0, (-414));
      int int0 = MathUtils.hash(0.0);
      int int1 = MathUtils.subAndCheck(1603, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (-836.874456214815), (double) (-414));
      boolean boolean1 = MathUtils.equals(0.0, (double) 0, (double) 0);
      float float0 = MathUtils.indicator((float) 0);
      int int2 = MathUtils.lcm(63, (-2383));
      long long0 = MathUtils.mulAndCheck((long) 150129, 0L);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 151);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathUtils.round(0.0, (-1273));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float float0 = (-497.21F);
      float float1 = MathUtils.round((-497.21F), (-1167), 0);
      int int0 = 1706;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 1706);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1,706
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-174);
      intArray0[1] = 107;
      intArray0[2] = (-1101);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1059.424;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-174));
      // Undeclared exception!
      try { 
        MathUtils.factorial(1544);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      int int0 = 932;
      // Undeclared exception!
      try { 
        MathUtils.factorial(932);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1636);
      intArray0[1] = 0;
      intArray0[2] = (-2995);
      intArray0[3] = 1378;
      intArray0[4] = 9;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, 1133.45, 2.0);
      long long0 = 0L;
      long long1 = MathUtils.lcm((-2683L), 0L);
      double double0 = (-3216.3676277481013);
      int int0 = 1147;
      double double1 = MathUtils.scalb((-3216.3676277481013), 1147);
      double double2 = 0.087;
      boolean boolean1 = MathUtils.equals(2.0, 0.087, 1147);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.087, (-1822.9513702025397), (-212));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.scalb((-896.6424283), 146);
      double double1 = MathUtils.cosh(0.0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.sign(0.0F);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float1 = MathUtils.indicator(0.0F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float float0 = MathUtils.indicator((-1963.2067F));
      int int0 = 0;
      int int1 = MathUtils.pow(0, 0);
      double double0 = MathUtils.sinh((-7001.5602462602));
      double double1 = MathUtils.round(Double.NEGATIVE_INFINITY, 1);
      double double2 = MathUtils.sign((double) 0);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      double double0 = MathUtils.normalizeAngle(4.9E-324, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = (-1725);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.subAndCheck(6, 2);
      double double1 = MathUtils.factorialLog(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1725);
      doubleArray0[4] = 4.9E-324;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 1289);
      byte byte0 = (byte)8;
      byte byte1 = MathUtils.sign((byte)8);
      float float0 = MathUtils.indicator((float) (byte)8);
      double double0 = MathUtils.factorialLog((byte)1);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, (-161.8830259156981), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)63);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)63;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      MathUtils.checkOrder(doubleArray0);
      long long0 = MathUtils.indicator((-284L));
      int int0 = MathUtils.compareTo(1382.324938539, (-284L), (byte)1);
      double double1 = MathUtils.log((-2765.12029784475), (-2765.12029784475));
      int int1 = MathUtils.sign((int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      double double0 = MathUtils.sign((-852.9753468478758));
      long long0 = MathUtils.lcm((long) 0, (-3328L));
      int int1 = MathUtils.indicator(0);
      short short0 = MathUtils.indicator((short)1724);
      byte byte0 = MathUtils.indicator((byte)81);
      long long1 = MathUtils.binomialCoefficient(0, 0);
      double double1 = MathUtils.sinh(0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-852.9753468478758);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (-993.66541651);
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = 3.141592653589793;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 1L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      double double0 = MathUtils.normalizeAngle(4.9E-324, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = (-1725);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.subAndCheck(6, 2);
      double double1 = MathUtils.factorialLog(0);
      long long0 = MathUtils.indicator((-873L));
      float float0 = MathUtils.indicator(1896.27F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-226L), (-226L));
      int int0 = MathUtils.mulAndCheck(592, 670);
      int int1 = MathUtils.lcm(592, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = BigInteger.probablePrime(670, mockRandom0);
      int int2 = bigInteger0.signum();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 60);
      double double0 = MathUtils.binomialCoefficientLog(4381, 4381);
      double double1 = MathUtils.binomialCoefficientDouble(1634, (-2147));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2147);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 592;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int3 = MathUtils.subAndCheck((-2400), 0);
      int int4 = MathUtils.indicator(380);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = 0L;
      long long1 = 1307L;
      long long2 = MathUtils.mulAndCheck(0L, 1307L);
      int int0 = 37;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(37, 2677);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 37, k = 2,677
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 254;
      int int1 = MathUtils.lcm(254, 254);
      int int2 = MathUtils.indicator(254);
      float float0 = MathUtils.indicator(254.7148F);
      double double0 = MathUtils.cosh(1115.0);
      byte byte0 = MathUtils.indicator((byte) (-112));
      float float1 = Float.NaN;
      float float2 = MathUtils.indicator(Float.NaN);
      long long0 = MathUtils.gcd((long) 254, (long) 254);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      String string0 = bigInteger0.toString();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      boolean boolean1 = bigInteger1.testBit(254);
      BigInteger bigInteger3 = bigInteger1.modInverse(bigInteger2);
      String string1 = bigInteger1.toString();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger1, bigInteger1);
      try { 
        MathUtils.pow(254L, (long) (byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (254^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2821.88, 41.9365958261687, (-837.3796377089));
      long long0 = MathUtils.gcd(39916800L, 39916800L);
      int int0 = 0;
      double double0 = MathUtils.factorialLog(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 39916800L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-837.3796377089);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.hash(doubleArray0);
      long long1 = MathUtils.mulAndCheck(720L, 1247L);
      int int2 = (-1054);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1054));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,054
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = MathUtils.lcm((-203L), 0L);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 136L);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.indicator(2403.92F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-88));
      int int0 = MathUtils.gcd(0, (int) (byte) (-88));
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = MathUtils.pow((-1674), 0);
      double double0 = MathUtils.cosh((-1674));
      double double1 = MathUtils.indicator((double) (-1674));
      long long0 = 0L;
      long long1 = MathUtils.subAndCheck(0L, 121645100408832000L);
      double double2 = MathUtils.sinh((-1674));
      int int1 = MathUtils.lcm(1, 1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 121645100408832000L;
      doubleArray0[6] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      long long2 = MathUtils.factorial(0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      int int1 = MathUtils.gcd(0, 219);
      double double0 = MathUtils.indicator((-853.12245725));
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 219;
      intArray0[3] = 0;
      intArray0[4] = 219;
      double double1 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, bigInteger0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = MathUtils.pow((-405), 0);
      short short0 = (short)42;
      short short1 = MathUtils.indicator((short)42);
      int int1 = MathUtils.compareTo((short)42, 1979.3917465110583, 0.0);
      int int2 = (-1904);
      int int3 = MathUtils.lcm((int) (short)42, (-1904));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1904), (short)42);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,904, k = 42
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-349);
      intArray0[1] = 0;
      intArray0[2] = (-473);
      intArray0[3] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.subAndCheck((long) (-349), 7910884519577875640L);
      double double0 = MathUtils.indicator(0.10526403784751892);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 7910884519577875640L, 796, (-1178));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      long long1 = MathUtils.sign(0L);
      long long2 = MathUtils.subAndCheck(24L, 0L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-64,808,774,795,264^-64,808,774,795,264)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-649));
      Random.setNextRandom((short) (-649));
      int int0 = MathUtils.gcd((int) (short) (-649), (int) (short) (-649));
      Random.setNextRandom(649);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3249.077);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.indicator(3249.077);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      int int0 = 3258;
      double double2 = MathUtils.scalb((-3249.077), 3258);
      long long0 = MathUtils.addAndCheck((long) 3258, (long) 3258);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = MathUtils.gcd((-1440L), (-593L));
      long long1 = MathUtils.indicator(1L);
      int int0 = 0;
      double double0 = MathUtils.factorialLog(0);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((-2000), mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-720.493707787);
      doubleArray0[1] = 250.974;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(4503599627370495L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 0L, (-1671), (-1671));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = MathUtils.pow(11, 0);
      int int1 = MathUtils.compareTo(0.0, 3.141592653589793, 11);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        MathUtils.pow(4194304, (-1131));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4,194,304^-1,131)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = MathUtils.compareTo(2.0, 254.241742735, 0.0);
      int int1 = MathUtils.mulAndCheck(0, 0);
      double double0 = MathUtils.sign((double) 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(31, 2160);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 31, k = 2,160
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-508));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      BigInteger bigInteger4 = bigInteger0.remainder(bigInteger3);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      float float0 = MathUtils.round(Float.NaN, 0, 0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = MathUtils.lcm(1968, 566);
      long long0 = MathUtils.mulAndCheck((long) 556944, (long) 566);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1968;
      intArray0[1] = 1968;
      intArray0[2] = 566;
      intArray0[3] = 1968;
      intArray0[4] = 1968;
      intArray0[5] = 556944;
      intArray0[6] = 556944;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = (-938);
      intArray0[2] = (-1288);
      intArray0[3] = 695;
      intArray0[4] = 4194304;
      intArray0[5] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.gcd(116, 1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long long0 = MathUtils.sign(2147483648L);
      int int0 = MathUtils.lcm((-3784), (-831));
      long long1 = MathUtils.mulAndCheck((long) (-831), (long) 3144504);
      int[] intArray0 = new int[4];
      intArray0[0] = 3144504;
      intArray0[1] = (-831);
      intArray0[2] = (-3784);
      intArray0[3] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      short short0 = MathUtils.indicator((short)686);
      int int1 = MathUtils.hash((double) (short)1);
      int int2 = MathUtils.gcd((int) (short)1, 0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = MathUtils.factorialLog(176);
      int[] intArray0 = new int[5];
      intArray0[0] = 176;
      intArray0[1] = 176;
      intArray0[2] = 176;
      intArray0[3] = 176;
      intArray0[4] = 176;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-23L), (-23L));
      byte byte0 = (byte) (-3);
      byte byte1 = MathUtils.sign((byte) (-3));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((byte) (-1), (byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-1522L), (-1522L));
      long long1 = MathUtils.sign((-1522L));
      long long2 = MathUtils.pow((-1522L), 0);
      long long3 = MathUtils.binomialCoefficient(0, 0);
      int int0 = MathUtils.compareTo(0.0, (-3044L), 0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(5065.723, 5065.723, 5065.723);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(0L, 0L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(5065.723, (double) 0L);
      long long1 = MathUtils.addAndCheck(2819561105158720014L, (-5034868814120038111L));
      double double1 = MathUtils.factorialLog(534);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.normalizeAngle(0.14285714285714285, 0.14285714285714285);
      double double1 = MathUtils.cosh((-1772.06081658));
      float float0 = MathUtils.indicator((-583.82086F));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-107));
      int int0 = MathUtils.subAndCheck((int) (byte) (-1), (int) (byte) (-107));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) 106;
      doubleArray0[4] = (double) 106;
      int int1 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.gcd((long) (byte) (-1), (-2644281811660520851L));
      long long1 = (-2644281811660520851L);
      try { 
        MathUtils.pow((-2644281811660520851L), (-3958705157555305932L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,644,281,811,660,520,851^-3,958,705,157,555,305,932)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, (double) 0L);
      double double0 = MathUtils.indicator(773.366158997);
      int int0 = 2296;
      int int1 = MathUtils.sign(2296);
      boolean boolean1 = MathUtils.equals((double) 0L, (-2.6033824355191673E-8));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-107));
      int int0 = MathUtils.subAndCheck((int) (byte) (-1), (int) (byte) (-107));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) 106;
      doubleArray0[4] = (double) 106;
      int int1 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.gcd((long) (byte) (-1), (-2644281811660520851L));
      try { 
        MathUtils.pow((-2644281811660520838L), (-3958705157555305932L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,644,281,811,660,520,838^-3,958,705,157,555,305,932)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = MathUtils.lcm(2432902008176640000L, 2432902008176640000L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2432902008176640000L;
      doubleArray0[1] = (double) 2432902008176640000L;
      doubleArray0[2] = (double) 2432902008176640000L;
      doubleArray0[3] = (double) 2432902008176640000L;
      doubleArray0[4] = (double) 2432902008176640000L;
      doubleArray0[5] = (double) 2432902008176640000L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("q!YTGC1D)lA#yykJk!");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.q!YTGC1D)lA#yykJk!
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 675.8806650104283;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.5;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1.1102230246251565E-16;
      doubleArray0[5] = 2.404307984052299E-9;
      doubleArray0[6] = 0.09090909090909091;
      doubleArray0[7] = 906.0534174629;
      doubleArray0[8] = 0.0952233225107193;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1285);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)63);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)63;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      MathUtils.checkOrder(doubleArray0);
      long long0 = MathUtils.indicator((-284L));
      int int0 = MathUtils.compareTo(1382.324938539, (-284L), (byte)1);
      double double1 = MathUtils.log((-2765.12029784475), (-2765.12029784475));
      int int1 = MathUtils.sign((int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = 2.0;
      boolean boolean0 = MathUtils.equals(2.0, 2.0, 4261);
      double double1 = MathUtils.sign((double) 4261);
      boolean boolean1 = MathUtils.equals(0.0, (-853.403066), 1620);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-853.403066);
      doubleArray0[1] = (double) 4261;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1620;
      doubleArray0[4] = (double) 4261;
      doubleArray0[5] = (-853.403066);
      doubleArray0[6] = (-853.403066);
      doubleArray0[7] = (-853.403066);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (4,261 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 66;
      long long0 = (-595L);
      try { 
        MathUtils.pow(66, (-595L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (66^-595)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals((-2592.88163), (-2592.88163), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = 6722166367014452318L;
      int int0 = 1183;
      long long1 = MathUtils.pow(6722166367014452318L, 1183);
      long long2 = 2935890503282001226L;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 2935890503282001226L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = MathUtils.pow(21, 0L);
      long long0 = MathUtils.addAndCheck(0L, (long) 21);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) 1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float float0 = MathUtils.sign((-2422.379F));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2422.379F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-2422.379F);
      doubleArray0[3] = (double) (-2422.379F);
      doubleArray0[4] = (double) (-1.0F);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (-1 >= -2,422.379)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1320.775574714), (-1320.775574714), 0.0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      short short0 = (short) (-4225);
      short short1 = MathUtils.sign((short) (-4225));
      try { 
        MathUtils.pow(1324, (-2086L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,324^-2,086)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = MathUtils.pow(1197, 1212L);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      short short0 = MathUtils.sign((short)231);
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double0 = MathUtils.indicator((double) (short)1);
      double double1 = MathUtils.normalizeAngle((short)231, (-233.521081692));
      double double2 = 361.03457225;
      boolean boolean1 = MathUtils.equals((double) (short)231, 361.03457225);
      short short1 = (short) (-424);
      short short2 = MathUtils.sign((short) (-424));
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom((-2018L));
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((short) (-424), mockRandom0);
      } catch(IllegalArgumentException e) {
         //
         // numBits must be non-negative
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = MathUtils.sign(2782.12);
      int int0 = MathUtils.addAndCheck(0, 0);
      int int1 = MathUtils.compareTo(1.0, 106.999427613, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2782.12;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (-1);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)23);
      long long0 = MathUtils.factorial((byte)1);
      double double0 = MathUtils.sign((double) (byte)23);
      long long1 = MathUtils.sign(1L);
      long long2 = MathUtils.pow(0L, 155);
      double double1 = MathUtils.binomialCoefficientDouble(155, 155);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (-724.9880853);
      doubleArray0[2] = (double) 155;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 155;
      doubleArray0[7] = (double) (byte)23;
      doubleArray0[8] = (double) 0L;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double3 = MathUtils.round((double) 1L, 0);
      int int0 = (-2718);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0L, (-2718), (-2718));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -2,718, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(2106, 21);
      short short0 = (short) (-445);
      short short1 = MathUtils.indicator((short) (-445));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short) (-1), 1057.641, 0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = 23;
      int int2 = MathUtils.subAndCheck(21, 23);
      int int3 = MathUtils.indicator(23);
      double double0 = MathUtils.factorialDouble(21);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) 2127;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = 1057.641;
      doubleArray0[4] = 1057.641;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator((float) (short) (-445));
      // Undeclared exception!
      try { 
        MathUtils.round((-5313.746002520292), 23, 2106);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.003;
      doubleArray0[1] = (-1561.940032);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1561.940032));
      double double0 = (-2517.05339539);
      double double1 = MathUtils.sinh((-2517.05339539));
      int int0 = 126;
      double double2 = MathUtils.binomialCoefficientLog(126, 126);
      double double3 = MathUtils.factorialDouble(126);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("]CU-h@cj");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.]CU-h@cj
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      double double1 = 1.304E19;
      double double2 = 974.6248462;
      int int0 = (-727);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1.304E19, 974.6248462, (-727));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = MathUtils.factorialLog(1779);
      long long0 = MathUtils.lcm((-2050L), (long) 1779);
      boolean boolean0 = MathUtils.equals((double) (-2050L), 3251.7434268643397, (double) (-2050L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (-2050L), (-3329.828264371759), 1.304E19);
      long long1 = MathUtils.gcd((-2050L), 0L);
      double double1 = MathUtils.sign(197.25465636021332);
      int int0 = MathUtils.pow(1779, 1779);
      byte byte0 = MathUtils.sign((byte) (-127));
      boolean boolean2 = MathUtils.equalsIncludingNaN(3251.7434268643397, (-914.1862934890245));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (double) 1779;
      doubleArray0[2] = (double) 2050L;
      doubleArray0[3] = 3251.7434268643397;
      doubleArray0[4] = (double) (byte) (-127);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (1,779 <= 2,050)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      int int0 = 0;
      int int1 = MathUtils.lcm((-771), 0);
      long long0 = MathUtils.mulAndCheck((long) 0, 9193070505571053912L);
      long long1 = MathUtils.subAndCheck((long) 0, (long) 0);
      int int2 = MathUtils.subAndCheck(0, (-771));
      int int3 = MathUtils.indicator(771);
      double double1 = (-2112.3591619);
      long long2 = MathUtils.mulAndCheck(0L, (-302932621132653753L));
      int int4 = 11;
      int int5 = MathUtils.lcm(2, 11);
      try { 
        MathUtils.pow((-1468), (-9218868437227405313L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,468^-9,218,868,437,227,405,313)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
