/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:08:01 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 1.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 4457.9816, 2147470249);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1644, 1297);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.pow(1644);
      BigInteger bigInteger3 = bigInteger0.and(bigInteger1);
      boolean boolean0 = bigInteger0.equals("");
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, (long) 1644);
      int int0 = 1688;
      // Undeclared exception!
      try { 
        MathUtils.round(611.18F, 1688, 1297);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,297, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = MathUtils.factorialLog(3022);
      int int0 = MathUtils.hash(0.0);
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((-3099L), 9223372036854775807L);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -9,223,372,036,854,775,807 + -3,099
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte byte0 = (byte)98;
      byte byte1 = MathUtils.sign((byte)98);
      double double0 = MathUtils.round(Double.POSITIVE_INFINITY, (int) (byte)1, (int) (byte)98);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 653.213;
      doubleArray0[3] = (double) (byte)98;
      doubleArray0[4] = (-1458.0);
      doubleArray0[5] = (double) (byte)98;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) (byte)98;
      doubleArray0[8] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 653.213)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-357);
      intArray0[2] = (-586);
      intArray0[3] = 2689;
      intArray0[4] = 84;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.binomialCoefficientDouble(3980, 19);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.cosh(2.2250738585072014E-308);
      long long0 = MathUtils.binomialCoefficient(3980, (-586));
      long long1 = MathUtils.addAndCheck(9218868437227405312L, 1751L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2689;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1751L;
      doubleArray0[3] = (double) 1751L;
      doubleArray0[4] = (double) 19;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 9218868437227407063L;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 1751L;
      double double3 = MathUtils.safeNorm(doubleArray0);
      double double4 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = 0.0;
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      int int1 = MathUtils.addAndCheck(0, 2253);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byte byte0 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray1 = bigInteger0.toByteArray();
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger3 = new BigInteger(byteArray0);
      int int2 = bigInteger3.compareTo(bigInteger0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger3);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-20,993^-20,993)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float float0 = 617.0449F;
      int int0 = 685;
      float float1 = MathUtils.round(617.0449F, 685);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 617.0449F;
      doubleArray0[1] = (double) 617.0449F;
      doubleArray0[2] = (double) 685;
      doubleArray0[3] = (double) 685;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) 617.0449F;
      doubleArray0[6] = (double) 685;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (617.045 >= 617.045)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.5830993332061267E-10, 1.5830993332061267E-10, 223);
      long long0 = MathUtils.addAndCheck((-281L), (-7278142539171889152L));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-281L);
      doubleArray0[1] = (double) (-281L);
      doubleArray0[2] = (double) (-7278142539171889152L);
      doubleArray0[3] = (double) (-7278142539171889433L);
      doubleArray0[4] = (double) (-281L);
      doubleArray0[5] = (double) (-281L);
      doubleArray0[6] = (double) 223;
      doubleArray0[7] = (double) (-281L);
      doubleArray0[8] = (double) (-7278142539171889152L);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.log(Double.NaN, (-1247.19));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.scalb((-2559.0), 0);
      int int1 = MathUtils.pow(0, (long) 0);
      boolean boolean0 = MathUtils.equals((double) 1, (double) 0, 1);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int2 = MathUtils.compareTo(1, 1, 0.5);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 346.036710622846;
      doubleArray1[3] = 0.5;
      doubleArray1[4] = (double) 0;
      double double2 = MathUtils.safeNorm(doubleArray1);
      int int3 = MathUtils.pow(0, (long) 0);
      long long0 = MathUtils.mulAndCheck((long) 0, 0L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, (double) 1, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-684.82094082009);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2138.0;
      doubleArray0[4] = (-1256.99348);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
      double double0 = MathUtils.round((-1686.266247510827), 66);
      double double1 = MathUtils.factorialDouble(66);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte)86;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-185L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,907,264,553,664,860,144,554^-185)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.not();
      BigInteger bigInteger3 = bigInteger1.min(bigInteger0);
      BigInteger bigInteger4 = bigInteger1.negate();
      BigInteger bigInteger5 = bigInteger1.negate();
      BigInteger bigInteger6 = bigInteger0.gcd(bigInteger1);
      int int0 = 2762;
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, 2762);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) 2762, (-5034868814120038111L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2881.04781947;
      doubleArray0[4] = 1316.497;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2609.606579;
      double double0 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.sign((-1471.8F));
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      int int0 = 444;
      int int1 = MathUtils.indicator(444);
      float float1 = MathUtils.round((float) 444, (-453));
      double double0 = MathUtils.sign(0.0);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 88;
      intArray0[2] = 4161;
      intArray0[3] = 21;
      intArray0[4] = 942;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.indicator(494);
      double double1 = MathUtils.round((-1.0), 1);
      int int1 = MathUtils.addAndCheck(1524, 1051);
      double double2 = MathUtils.binomialCoefficientDouble(21, (-358));
      double double3 = MathUtils.binomialCoefficientDouble(942, 88);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      double double4 = MathUtils.factorialDouble(78);
      double double5 = MathUtils.scalb(0.0, 0);
      long long0 = MathUtils.subAndCheck((long) 2575, (-1834L));
      int int2 = MathUtils.subAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = (-817);
      double double0 = MathUtils.binomialCoefficientLog(0, (-817));
      long long0 = MathUtils.subAndCheck((long) (-817), (long) (-817));
      long long1 = MathUtils.mulAndCheck(1571L, 1571L);
      double double1 = MathUtils.sinh(0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.gcd((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1388), 4194304);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,388, k = 4,194,304
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = MathUtils.cosh(0.16666666666666666);
      int int0 = MathUtils.addAndCheck(0, 0);
      double double1 = MathUtils.scalb((-775.421348581907), 1598);
      double double2 = MathUtils.cosh(0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = 1943;
      int int2 = MathUtils.mulAndCheck(1943, 0);
      int int3 = MathUtils.lcm((-1533), (-2532));
      int int4 = 1751;
      int int5 = MathUtils.pow(1751, 9223372036854775807L);
      int int6 = MathUtils.gcd((-1861), 3572);
      double[] doubleArray0 = new double[0];
      double double3 = 1761.34576682038;
      try { 
        MathUtils.normalizeArray(doubleArray0, 1761.34576682038);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      int[] intArray0 = new int[5];
      intArray0[0] = (-930);
      intArray0[1] = (-1227);
      intArray0[2] = 279;
      intArray0[3] = (-3863);
      intArray0[4] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2430.7147769930025);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.hash(0.0);
      double double2 = MathUtils.indicator(0.0);
      double double3 = MathUtils.sign(0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      double double4 = MathUtils.distance(doubleArray1, doubleArray1);
      long long0 = MathUtils.gcd(0L, (long) 0);
      double double5 = MathUtils.cosh((-2430.7147769930025));
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 3491;
      intArray0[0] = 3491;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float float0 = MathUtils.round(3383.5796F, 0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(4.455505956692757, 2.2250738585072014E-308, 2100.181958686426);
      double double0 = MathUtils.binomialCoefficientDouble(686, 0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 398;
      intArray0[3] = 686;
      intArray0[4] = (-2679);
      intArray0[5] = 0;
      intArray0[6] = 1227;
      intArray0[7] = 686;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (double) 3383.5796F, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.round((-335.0), 686, 1227);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = MathUtils.log(1902.6146831153715, 1902.6146831153715);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2185.108, (-1684.751991934));
      long long0 = MathUtils.mulAndCheck(2147483647L, 2147483647L);
      boolean boolean1 = MathUtils.equals(1902.6146831153715, (-883.087298938), 1571);
      short short0 = MathUtils.indicator((short)3332);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float float0 = MathUtils.round((-3788.5554F), 0, 0);
      double double0 = MathUtils.normalizeAngle(0.031, (-2923.723031654528));
      boolean boolean0 = MathUtils.equals(0.0, (-2921.6501678385075), 1022);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-2923.723031654528);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-3789.0F);
      doubleArray0[5] = (double) 0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-519.19828036);
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equals(13.07, 519.19828036, 13.07);
      BigInteger bigInteger0 = BigInteger.ONE;
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger1 = bigInteger0.shiftRight(2136);
      short short1 = bigInteger0.shortValueExact();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0L);
      long long0 = MathUtils.sign(4903L);
      byte byte0 = bigInteger0.byteValueExact();
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.07842259109020233, 1.986821492305628E-8, (double) 2136);
      long long1 = MathUtils.gcd((-1974L), (-1974L));
      double double1 = MathUtils.sinh((short)1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger2, bigInteger1);
      double double2 = MathUtils.factorialLog((byte)1);
      int int0 = MathUtils.mulAndCheck(2136, (-2178));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((short)1, 17);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 17
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.round(0.0F, (-3280), 0);
      long long0 = MathUtils.sign((long) (-3280));
      double double0 = MathUtils.factorialLog(0);
      boolean boolean0 = MathUtils.equals((double) (-3280), (double) 0.0F, (double) (-3280));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-3280), (-3280));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -3,280
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = MathUtils.indicator(121.0);
      float float0 = MathUtils.sign((-1.0F));
      double double1 = MathUtils.factorialLog(0);
      long long0 = MathUtils.addAndCheck((-632L), (-5034L));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = (-435);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-435), (-435));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -435
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.log(110.0, (-2.356194490192345));
      boolean boolean0 = MathUtils.equals((-1.5707963267948966), 1.997844754509471E-9, 1.7029898543501842E-8);
      boolean boolean1 = MathUtils.equals((-1765.9), 439.0, (double) (short)0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2611));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,611
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      byte byte0 = MathUtils.sign((byte)61);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-433.3534);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1974.914271229985;
      doubleArray0[5] = (-1120.023374806445);
      doubleArray0[6] = (-44.67752);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-643.028138483245);
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-643.028138483245);
      doubleArray1[1] = (-44.67752);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      double double2 = MathUtils.distance1(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals(9.0, 0.0, (-1845903807));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.1428571343421936;
      doubleArray0[1] = (-824.6479432816445);
      doubleArray0[2] = (-769.78496271);
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3.141592653589793;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = (-1217.077198272913);
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = (-167);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-167));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -167
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float float0 = MathUtils.sign(3543.202F);
      double double0 = MathUtils.log(1.0F, 0.375);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.008333333333329196;
      doubleArray0[2] = 1086.86;
      doubleArray0[3] = 57.2957763671875;
      doubleArray0[4] = 4400.1106;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1086.86);
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
      short short0 = MathUtils.indicator((short)699);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (213.06 >= 11.232)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 4);
      long long0 = MathUtils.gcd((long) 4, (long) 4);
      int int0 = MathUtils.pow(0, 0L);
      int int1 = MathUtils.pow(1, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1);
      BigInteger bigInteger2 = bigInteger1.setBit(0);
      long long1 = MathUtils.indicator(0L);
      BigInteger bigInteger3 = bigInteger0.and(bigInteger1);
      double[] doubleArray0 = new double[7];
      int int2 = bigInteger0.intValue();
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, (long) 4);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 1336;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-0.2499999701976776), 1336);
      int int1 = (-1279);
      int int2 = (-261);
      int int3 = MathUtils.lcm((-1279), (-261));
      int int4 = 2439;
      int int5 = MathUtils.indicator(2439);
      int int6 = (-1697);
      try { 
        MathUtils.pow(2439, (-1697));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,439^-1,697)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = MathUtils.hash(1651.872885);
      boolean boolean0 = MathUtils.equals(1651.872885, 2.0, (double) (-1794568240));
      double double0 = MathUtils.binomialCoefficientLog(1448, 17);
      double double1 = MathUtils.normalizeAngle(0.0, 0.0);
      int int1 = MathUtils.gcd(17, (-1412));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      int int0 = MathUtils.gcd(17, (-1412));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float float0 = MathUtils.round(2408.67F, (-708));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2408.67F;
      doubleArray0[1] = (double) 2408.67F;
      doubleArray0[2] = (double) 2408.67F;
      doubleArray0[3] = (double) (-708);
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) Float.NaN;
      doubleArray0[6] = (double) Float.NaN;
      doubleArray0[7] = (double) 2408.67F;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.gcd((-708), 89);
      int int1 = MathUtils.sign(63);
      long long0 = MathUtils.subAndCheck(5040L, (long) 1);
      byte byte0 = MathUtils.indicator((byte)0);
      long long1 = MathUtils.gcd(0L, 1478L);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1934.7188109323517);
      doubleArray0[1] = (-2258.21);
      doubleArray0[2] = (-366.3928692781);
      doubleArray0[3] = 3054.2493903;
      doubleArray0[4] = (-4518.98);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 220.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1934.7188109323517));
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-4518.98);
      doubleArray2[1] = 710.82972966691;
      doubleArray2[2] = 1066.4879826;
      doubleArray2[3] = (-2258.21);
      doubleArray2[4] = 3054.2493903;
      doubleArray2[5] = 220.0;
      doubleArray2[6] = 3.834E-20;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray2);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (1,066.488 >= -2,258.21)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = MathUtils.gcd(66, 66);
      double double0 = MathUtils.normalizeAngle(0.0, (-7.800414592973399E-9));
      double double1 = MathUtils.factorialDouble(0);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int1 = MathUtils.gcd(66, 4211);
      byte byte0 = MathUtils.sign((byte) (-46));
      double double2 = MathUtils.log(3358.40677, 1);
      long long0 = MathUtils.pow(0L, 0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 66, 2540.20977, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = (-1.5707963267948966);
      double double1 = MathUtils.normalizeAngle((-1.5707963267948966), (-1.5707963267948966));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger not invertible.
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(2.0, 2.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 250;
      double double0 = MathUtils.distance(intArray0, intArray0);
      byte byte0 = MathUtils.indicator((byte)17);
      int int0 = MathUtils.lcm(224, 250);
      double double1 = MathUtils.cosh(0.0);
      // Undeclared exception!
      MathUtils.factorialDouble(28000);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      int[] intArray0 = new int[5];
      intArray0[1] = 3638;
      intArray0[2] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.flipBit(1243);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-431));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)8;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (int) (byte) (-41));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-10,488^-41)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = MathUtils.pow(7, (long) 7);
      float float0 = MathUtils.indicator((float) 7);
      long long0 = MathUtils.pow((long) 823543, 0L);
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 823543;
      intArray0[3] = 7;
      intArray0[4] = 823543;
      intArray0[5] = 7;
      intArray0[6] = 823543;
      int[] intArray1 = new int[4];
      intArray1[0] = 823543;
      intArray1[1] = 7;
      intArray1[2] = 823543;
      intArray1[3] = 823543;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = (-754);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-754));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -754
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float float0 = MathUtils.sign(1513.757F);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      int int0 = MathUtils.hash((double[]) null);
      int int1 = MathUtils.subAndCheck(0, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      long long1 = MathUtils.addAndCheck(2414L, 2414L);
      int int3 = MathUtils.hash((double[]) null);
      byte byte0 = MathUtils.indicator((byte) (-87));
      double double0 = MathUtils.indicator((-2779.0566655451107));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-2779.0566655451107);
      doubleArray0[4] = (-1.0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      long long1 = MathUtils.mulAndCheck((-2147483648L), (-2147483648L));
      byte byte0 = MathUtils.indicator((byte) (-67));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte byte0 = (byte) (-36);
      byte byte1 = MathUtils.sign((byte) (-36));
      long long0 = MathUtils.indicator((long) (byte) (-1));
      try { 
        MathUtils.pow((-1L), (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathUtils.indicator(1948.40015337);
      short short0 = MathUtils.indicator((short)0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      String string0 = bigInteger0.toString();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 4991L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1948.40015337;
      doubleArray0[1] = 1948.40015337;
      doubleArray0[2] = (double) (short)1;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd((long) (byte) (-73), (-1283L));
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-73);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (byte) (-73);
      int[] intArray1 = new int[8];
      intArray1[0] = (int) (byte) (-73);
      intArray1[1] = (int) (short)0;
      intArray1[2] = (int) (short)0;
      intArray1[3] = (int) (short)0;
      intArray1[4] = (int) (byte)0;
      intArray1[5] = (int) (short)0;
      intArray1[6] = 111;
      intArray1[7] = (int) (byte) (-73);
      int int0 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = MathUtils.indicator(3706L);
      int int0 = 0;
      int int1 = MathUtils.lcm(0, 0);
      int int2 = MathUtils.mulAndCheck((-1889), (-1889));
      int int3 = MathUtils.gcd(0, (-443));
      double double0 = MathUtils.cosh(3568321);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1164.2128, (double) (-1889));
      long long1 = MathUtils.sign(1L);
      int int4 = MathUtils.compareTo(645.722, 1164.2128, (-443));
      int int5 = MathUtils.indicator((-443));
      long long2 = MathUtils.lcm((long) (-1), (long) (-1889));
      boolean boolean1 = MathUtils.equals(1164.2128, 1164.2128, (double) (-1));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (-1), 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = MathUtils.pow((-709L), 56);
      int int0 = 31;
      float float0 = MathUtils.round((-116.34F), 31);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double0 = MathUtils.cosh(66.734488);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-110.23856174);
      doubleArray0[1] = (-3306.213921408);
      doubleArray0[2] = 1.176342548272881E-8;
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double double2 = MathUtils.factorialDouble(21);
      int[] intArray0 = new int[7];
      intArray0[0] = 21;
      intArray0[1] = 21;
      intArray0[2] = 21;
      intArray0[3] = 21;
      intArray0[4] = 21;
      intArray0[5] = 21;
      intArray0[6] = 21;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, 6.283185307179586);
      double double4 = MathUtils.normalizeAngle(0.0, 0.0);
      double double5 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.round((-1071.7598F), 0, 3);
      double double6 = MathUtils.factorialDouble(0);
      long long0 = MathUtils.mulAndCheck((-1151L), (long) 21);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-3,306.214 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (-416.9718222856146);
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      double double1 = MathUtils.factorialDouble(21);
      float float0 = MathUtils.sign((float) 21);
      long long0 = MathUtils.sign((-1280L));
      long long1 = MathUtils.pow((long) 21, 2819561105158720014L);
      int[] intArray0 = new int[7];
      intArray0[0] = 21;
      intArray0[1] = 21;
      intArray0[2] = 21;
      intArray0[3] = 21;
      intArray0[4] = 21;
      intArray0[5] = 21;
      intArray0[6] = 21;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.addAndCheck(21, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 21;
      MathUtils.checkOrder(doubleArray0);
      int int2 = MathUtils.lcm(0, 11);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 21;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) (-1L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (21 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float float0 = MathUtils.round((-2931.1519F), 3, 3);
      int int0 = MathUtils.mulAndCheck(3, 3);
      float float1 = (-1530.2286F);
      float float2 = MathUtils.round((-1530.2286F), 984);
      long long0 = MathUtils.lcm((long) 3, 0L);
      double double0 = MathUtils.binomialCoefficientLog(2259, 9);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.cosh(135.294);
      short short0 = MathUtils.indicator((short)0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("x0{e9Ch4&gBE|CM");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.x0{e9Ch4&gBE|CM
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = 355687428096000L;
      try { 
        MathUtils.pow(355687428096000L, (-2254));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (355,687,428,096,000^-2,254)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = MathUtils.sign(67);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = (-2339);
      try { 
        MathUtils.pow(0L, (-2339));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,339)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      double double1 = MathUtils.binomialCoefficientDouble(192, 95);
      int int2 = 0;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 0, (-1796));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,796, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-1491));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1491);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short) (-1491);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (short) (-1491);
      doubleArray1[1] = (double) (short) (-1);
      doubleArray1[2] = (double) (short) (-1);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = MathUtils.sign(0.09090909090909091);
      int int0 = MathUtils.sign((-532));
      short short0 = MathUtils.sign((short) (-1442));
      double double1 = MathUtils.sign((double) (-532));
      int int1 = MathUtils.mulAndCheck(0, 2063);
      byte byte0 = MathUtils.sign((byte)33);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 525;
      int int1 = 2595;
      int int2 = MathUtils.mulAndCheck(525, 2595);
      int int3 = 3507;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(525, 3507);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 525, k = 3,507
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte byte0 = (byte)96;
      byte byte1 = MathUtils.indicator((byte)96);
      byte byte2 = (byte)0;
      byte byte3 = MathUtils.sign((byte)0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      long long0 = MathUtils.gcd(523L, (long) 0);
      int int1 = MathUtils.addAndCheck(2, (-1112));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(12, 907);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 10884;
      doubleArray0[1] = (double) 907;
      doubleArray0[2] = (double) 10884;
      doubleArray0[3] = (double) 12;
      doubleArray0[4] = (double) 10884;
      doubleArray0[5] = (double) 907;
      doubleArray0[6] = (double) 10884;
      doubleArray0[7] = (double) 10884;
      doubleArray0[8] = (double) 10884;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.round((double) 12, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.19999999999923582);
      double double2 = MathUtils.round(10884.0, 907);
      float float0 = MathUtils.round((float) 12, 0);
      long long0 = MathUtils.lcm((long) 12, 4607182418800017408L);
      float float1 = MathUtils.round(5380.1216F, 0);
      boolean boolean1 = MathUtils.equals(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.834E-20, 2263.0, 3.834E-20);
      short short0 = MathUtils.indicator((short)134);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2263.0;
      doubleArray0[1] = 2263.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = 3.834E-20;
      double double0 = 6.283185307179586;
      doubleArray0[6] = 6.283185307179586;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 3.834E-20);
      int int0 = MathUtils.addAndCheck((int) (short)1, (int) (short)134);
      int int1 = (-1053);
      // Undeclared exception!
      try { 
        MathUtils.round(1.0, (-1053), (int) (short)134);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-221);
      intArray0[4] = 2431;
      intArray0[5] = 11;
      intArray0[6] = (-172);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-172);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2431;
      doubleArray0[5] = (-1138.991385429579);
      doubleArray0[6] = (double) (-172);
      doubleArray0[7] = (double) (-221);
      doubleArray0[8] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-172 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = MathUtils.sign((-1392L));
      int int0 = MathUtils.addAndCheck(0, 0);
      long long1 = MathUtils.factorial(0);
      double double0 = MathUtils.scalb(1L, 1067);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4.892989160178156E-296);
      doubleArray0[1] = (double) (-1L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(4234, 4234);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = MathUtils.sign(0.0F);
      double double0 = MathUtils.round((double) 0.0F, 4234);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-656.3899736195);
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = MathUtils.compareTo(322.316, 0.0, 2539.6);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = MathUtils.indicator((-2523L));
      double double0 = MathUtils.log((-1L), (-2523L));
      byte byte0 = MathUtils.indicator((byte)4);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 1795.93195160515;
      doubleArray0[2] = (double) (byte)4;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) (byte)4;
      doubleArray0[5] = (double) (-2523L);
      doubleArray0[6] = (double) (-2523L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (1,795.932 > 4)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(12, 12);
      long long0 = MathUtils.mulAndCheck((long) 12, (-670L));
      int int1 = MathUtils.gcd(12, 152);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftRight(1030);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 61);
      byte byte0 = MathUtils.indicator((byte)100);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (int) (byte)1, 12);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 12, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-1102), (-567));
      try { 
        MathUtils.pow(751, (-535));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (751^-535)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 121645100408832000L);
      float float0 = MathUtils.indicator((float) (-121645100408832000L));
      float float1 = MathUtils.round(Float.NaN, 13);
      int[] intArray0 = new int[5];
      intArray0[0] = 13;
      intArray0[1] = 13;
      intArray0[2] = 13;
      intArray0[3] = 13;
      intArray0[4] = 13;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 121645100408832000L;
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (double) 121645100408832000L;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = (double) 13;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = MathUtils.sign(1292.0);
      int int0 = MathUtils.addAndCheck(20, 0);
      float float0 = MathUtils.round(0.0F, 0);
      long long0 = MathUtils.indicator((long) 0);
      double double1 = MathUtils.factorialLog(20);
      boolean boolean0 = MathUtils.equals((-1828.8712846), (double) 0.0F);
      long long1 = MathUtils.binomialCoefficient(20, 0);
      boolean boolean1 = MathUtils.equals((-2200.31432), (-3423.1));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2200.31432);
      doubleArray0[1] = 1.0;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double3 = MathUtils.log(0.0, (-115.252838499695));
      long long2 = MathUtils.pow(24L, 0L);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = 120L;
      long long1 = MathUtils.indicator(120L);
      int int0 = 0;
      double double0 = MathUtils.scalb(1L, 0);
      double double1 = 3.834E-20;
      double double2 = MathUtils.cosh(3.834E-20);
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = (-2077);
      // Undeclared exception!
      try { 
        MathUtils.equals(3.141592653589793, 3.141592653589793, (-2077));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      long long0 = MathUtils.factorial(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.hash(0.0);
      boolean boolean0 = MathUtils.equals(1.0, 0.0, (double) 1L);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(2994L, (-1366L));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2994L;
      doubleArray0[1] = (double) (-4089804L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.round((-2660.73F), 53, 53);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 53, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = (-1340L);
      long long1 = MathUtils.indicator((-1340L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 4390.0;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (-2635.1873);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = 1.5707963267948966;
      doubleArray0[6] = (double) (-1L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not decreasing (-2,635.187 < -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1628.221), (-365.293616404));
      long long0 = MathUtils.lcm(0L, 0L);
      double double0 = MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathUtils.round(1079.8218513, 1691);
      int[] intArray0 = new int[4];
      intArray0[0] = 1691;
      intArray0[1] = 1691;
      intArray0[2] = 1691;
      intArray0[3] = 1691;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1079.8218513;
      doubleArray0[1] = (double) 1691;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      double double3 = MathUtils.binomialCoefficientLog(1691, 1691);
      int int0 = MathUtils.pow(502, (long) 1691);
      long long0 = MathUtils.pow((long) 502, (long) 1691);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      short short0 = MathUtils.sign((short)20);
      double double4 = MathUtils.factorialDouble(0);
      double double5 = MathUtils.cosh(0L);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(1367);
      int[] intArray0 = new int[6];
      intArray0[0] = 1367;
      intArray0[1] = 1367;
      intArray0[2] = 1367;
      intArray0[3] = 1367;
      intArray0[4] = 288;
      intArray0[5] = 1367;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.sign(0.0);
      int int1 = MathUtils.mulAndCheck((-1613), (-1613));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 1367);
      double double2 = MathUtils.sinh(2355.733521005);
      int int2 = MathUtils.pow(288, (long) 1367);
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 1367);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      byte byte0 = MathUtils.sign((byte)2);
      double double0 = MathUtils.scalb((short)0, (short)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (byte)1, (-1560.0487981989738), (-1560.0487981989738));
      double double1 = MathUtils.binomialCoefficientLog(0, (short)0);
      double double2 = MathUtils.round((double) 0, 1558);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (short)1;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.sign((-1192));
      double double3 = MathUtils.cosh((-2502.4967));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = MathUtils.indicator((-1220L));
      long long1 = MathUtils.pow((-1723L), 1953L);
      double double0 = MathUtils.normalizeAngle(1953L, 2404.78255027);
      double double1 = MathUtils.indicator((double) (-1L));
      double double2 = MathUtils.round(0.333333333333333, 0, 0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = 2351;
      double double1 = MathUtils.binomialCoefficientLog(2351, 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte byte0 = (byte)30;
      byte byte1 = MathUtils.sign((byte)30);
      long long0 = 0L;
      long long1 = (-227L);
      long long2 = MathUtils.gcd(0L, (-227L));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 4701;
      // Undeclared exception!
      try { 
        MathUtils.round((-813.02F), 4701, 4701);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 4,701, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      try { 
        MathUtils.pow((-107), (long) (-107));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-107^-107)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-1842);
      intArray0[0] = (-1842);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = MathUtils.indicator((-121L));
      short short0 = MathUtils.sign((short)2313);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) (short)2313);
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigInteger bigInteger3 = bigInteger1.max(bigInteger2);
      int int0 = MathUtils.hash(0.0);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-3387.0));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = 0.0;
      int int0 = (-924);
      double double1 = MathUtils.scalb(0.0, (-924));
      try { 
        MathUtils.pow((-924), (long) (-924));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-924^-924)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 7.549789948768648E-8;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.01;
      doubleArray0[3] = (-1132.6548649543333);
      doubleArray0[4] = 10.0;
      doubleArray0[5] = 2.2250738585072014E-308;
      doubleArray0[6] = 3316.9;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[8] = 350;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte byte0 = (byte) (-106);
      byte byte1 = MathUtils.sign((byte) (-106));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.sign((float) (byte) (-1));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("!Q.8% MFQl?>Qu`");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.!Q.8% MFQl?>Qu`
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      float float0 = MathUtils.sign(Float.NaN);
      long long0 = MathUtils.pow((-2644281811660520851L), 0);
      long long1 = MathUtils.binomialCoefficient(0, (short)0);
      long long2 = MathUtils.pow(4398046511103L, (int) (short)0);
      int int0 = MathUtils.subAndCheck(2562, 0);
      double double0 = MathUtils.log(Double.POSITIVE_INFINITY, (short)0);
      long long3 = MathUtils.subAndCheck(733L, (-2644281811660520851L));
      double double1 = MathUtils.round((double) Float.NaN, 0);
      long long4 = MathUtils.pow(0L, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 733L;
      doubleArray0[4] = (double) 4398046511103L;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(2723);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float float0 = MathUtils.round(1087.2996F, 248);
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.round((double) Float.NaN, 1537);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) Float.NaN;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-207.0327816367);
      doubleArray0[7] = (double) 1087.2996F;
      doubleArray0[8] = 1.9699272335463627E-8;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(1.0, (-892.790058322138));
      double double2 = MathUtils.sinh(2564.462404209506);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathUtils.cosh((-1337.498351865));
      double double1 = MathUtils.scalb(Double.POSITIVE_INFINITY, 693);
      long long0 = MathUtils.pow((-251L), 190);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-785L), (-785L));
      double double0 = MathUtils.cosh(255.9573818);
      long long1 = MathUtils.subAndCheck(1880L, 616225L);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = MathUtils.factorialLog(66);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 66;
      doubleArray0[1] = 213.53224149456327;
      doubleArray0[2] = 213.53224149456327;
      doubleArray0[3] = (double) 66;
      doubleArray0[4] = 213.53224149456327;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1668.2871127417066);
      int int0 = MathUtils.compareTo(1668.2871127417066, 213.53224149456327, (-1312.112791339));
      float float0 = MathUtils.round(0.0F, 66);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      long long1 = MathUtils.gcd(24L, 1L);
      int int1 = MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathUtils.indicator((-818.7671115135164));
      double double1 = MathUtils.factorialLog(2172);
      double double2 = MathUtils.round((double) 2172, 2892);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0L);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.2250738585072014E-308;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.4456468917292502E-16;
      doubleArray0[3] = 2.479773539153719E-5;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 38.0568922891911;
      doubleArray0[7] = (-3794.5414240932);
      doubleArray0[8] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-534.252178596463), (-534.252178596463));
      long long0 = MathUtils.subAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = MathUtils.hash(779.084301);
      byte byte0 = (byte)115;
      byte byte1 = MathUtils.sign((byte)115);
      double double0 = 2.0;
      double double1 = (-0.2499999997677497);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, (-0.2499999997677497), (int) (byte)115);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-427235195), (byte)1);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -427,235,195, k = 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = MathUtils.sinh(2660.049312044021);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2660.049312044021;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.compareTo(Double.POSITIVE_INFINITY, (-455.75), 2660.049312044021);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      try { 
        MathUtils.pow((BigInteger) null, (-1373L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-1,373)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, (-4203L));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = MathUtils.indicator(1.1102230246251565E-16);
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, 0.0);
      int int0 = MathUtils.gcd(253, 253);
      float float0 = MathUtils.sign((float) 253);
      float float1 = MathUtils.round(2937.2F, 253);
      long long0 = MathUtils.addAndCheck(39916800L, 39916800L);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1211.2198058403;
      int int0 = MathUtils.hash(doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1211.2198058403;
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray1, 1415238396);
      int[] intArray0 = new int[1];
      intArray0[0] = 1415238396;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.sign(0.0);
      int int2 = MathUtils.hash(545.6839197383463);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int3 = MathUtils.hash(doubleArray2);
      int int4 = MathUtils.gcd(0, (-19589421));
      int int5 = MathUtils.hash((-1.0E-6));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.lcm(61, 61);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-574.45972);
      doubleArray0[3] = 1.1102230246251565E-16;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-225.5386176279596);
      doubleArray0[6] = 1875.7402441790205;
      doubleArray0[7] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 238;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(186, 238);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 186, k = 238
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = MathUtils.sign(4104L);
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double double1 = MathUtils.log(1L, 1L);
      // Undeclared exception!
      try { 
        MathUtils.factorial(3176);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf(0L);
      int int0 = bigInteger0.intValueExact();
      try { 
        MathUtils.pow(bigInteger0, (-9223372036854775808L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = MathUtils.log((-0.25), (-0.25));
      int int0 = MathUtils.compareTo(Double.NaN, (-0.25), 3.834E-20);
      double double1 = MathUtils.sinh((-0.25));
      int int1 = MathUtils.indicator(1);
      boolean boolean0 = MathUtils.equals((-1035.58817132427), (-2886.359585), (-1480.53142));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.04168701738764507, 0.04168701738764507);
      long long0 = MathUtils.binomialCoefficient(709, 709);
      double double0 = MathUtils.scalb(0.04168701738764507, 123);
      int[] intArray0 = new int[3];
      intArray0[0] = 123;
      intArray0[1] = 709;
      intArray0[2] = 123;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.pow(1025, (long) 709);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 709;
      doubleArray0[1] = 0.04168701738764507;
      doubleArray0[2] = (double) 709;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 4.4329240457944315E35;
      doubleArray0[5] = (double) 123;
      doubleArray0[6] = (double) 123;
      doubleArray0[7] = (double) 1L;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.indicator((long) 123);
      double double1 = MathUtils.scalb((-415.4823126), 123);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)89;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.and(bigInteger1);
      double double2 = bigInteger0.doubleValue();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0L);
      long long2 = MathUtils.factorial(0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1150.6273746108807, 1150.6273746108807, 0.0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-652);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1280);
      intArray0[4] = (-3874);
      intArray0[5] = 105;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean1 = MathUtils.equals((double) 105, 1093.47271068854, (double) (-652));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short) (-3244));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      int int0 = MathUtils.pow(3479, 4499201580859392L);
      long long1 = MathUtils.pow(4499201580859392L, 1617);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      short short1 = MathUtils.sign((short) (-1));
      try { 
        MathUtils.pow(0, (int) (short) (-3244));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-3,244)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1628.221), (-365.293616404));
      long long0 = MathUtils.addAndCheck(0L, 0L);
      double double0 = MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = MathUtils.sign(3688.9267215703644);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3688.9267215703644;
      doubleArray0[1] = 3688.9267215703644;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double2 = MathUtils.log(1.9699272335463627E-8, 1.9699272335463627E-8);
      int[] intArray0 = new int[8];
      intArray0[0] = 114;
      intArray0[1] = 0;
      intArray0[2] = 170;
      intArray0[3] = (-915);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 15;
      intArray0[7] = 1142;
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(2356);
      boolean boolean0 = MathUtils.equals((double) 2356, (double) 2356, 713);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = 0;
      float float0 = MathUtils.round((float) 2356, 2356, 0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0, 713, 2356);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,356, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = 911.584946;
      int int0 = 2927;
      boolean boolean0 = MathUtils.equalsIncludingNaN(2321.633, 911.584946, 2927);
      int int1 = 1465;
      double double1 = MathUtils.binomialCoefficientLog(2927, 1465);
      int int2 = (-742);
      int int3 = MathUtils.pow((-742), 2927);
      float float0 = MathUtils.sign(788.12F);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      int int0 = MathUtils.hash(0.05);
      long long0 = MathUtils.subAndCheck(0L, 2047L);
      byte byte0 = MathUtils.sign((byte)0);
      double double1 = MathUtils.factorialDouble(20);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1506803709);
      doubleArray0[1] = (double) (-2047L);
      doubleArray0[2] = (double) 2047L;
      doubleArray0[3] = (double) 0L;
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int1 = 19;
      long long1 = MathUtils.factorial(19);
      float float0 = MathUtils.indicator((float) (-2047L));
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray0, 0.0);
      byte byte1 = (byte)2;
      byte byte2 = MathUtils.sign((byte)2);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int2 = bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-1506803709));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1,506,803,709)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float float0 = MathUtils.sign((-1.0F));
      double double0 = MathUtils.normalizeAngle((-1.0F), 0.0);
      long long0 = MathUtils.addAndCheck((-233L), (-1198L));
      float float1 = MathUtils.sign((float) (-1431L));
      int int0 = MathUtils.compareTo(0.19999998807907104, (-1.0F), (-233L));
      long long1 = 1L;
      long long2 = MathUtils.pow((long) 1, 1L);
      double double1 = MathUtils.log((-1.0), 2.2250738585072014E-308);
      long long3 = MathUtils.lcm(4316L, 51L);
      int int1 = MathUtils.indicator(1);
      long long4 = MathUtils.subAndCheck((-1198L), 40320L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-233L);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-41518L);
      int int2 = MathUtils.hash(doubleArray0);
      float float2 = MathUtils.round((-139.37189F), 1, 1);
      int int3 = 11;
      int int4 = (-3164);
      try { 
        MathUtils.pow(11, (-3164));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (11^-3,164)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
