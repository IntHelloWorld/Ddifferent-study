/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:08:01 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.stream.IntStream;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 793.89037;
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = (-2033.186);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 793.89037;
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
      double double1 = MathUtils.factorialDouble(107);
      int int0 = MathUtils.gcd(134, 134);
      byte byte0 = MathUtils.sign((byte)11);
      int int1 = MathUtils.hash((double) 107);
      double double2 = MathUtils.scalb((byte)11, 134);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.2250738585072014E-308, (-1.0), 63);
      int int2 = MathUtils.sign(85);
      long long0 = MathUtils.binomialCoefficient((byte)11, 0);
      short short0 = MathUtils.indicator((short)0);
      long long1 = MathUtils.mulAndCheck(0L, 720L);
      double double3 = MathUtils.normalizeAngle((-32.849), 2.3955878631234068E41);
      long long2 = MathUtils.sign((long) 134);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = 3.834E-20;
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.834E-20, 3.834E-20, 3.834E-20);
      double double1 = MathUtils.sign(186.6);
      int int0 = (-1242);
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-1242), Integer.MAX_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 2584.37198758349;
      doubleArray0[3] = (-744.0);
      doubleArray0[4] = 0.5;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = 0;
      double double1 = MathUtils.round((-4130.003798341), 0, 0);
      float float0 = MathUtils.round(0.0F, 0);
      long long0 = MathUtils.factorial(0);
      int int1 = 1932;
      int int2 = MathUtils.gcd(1932, 1932);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double2 = MathUtils.log(1374.29986614, 17.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("COLUMN_INDEX_OUT_OF_RANGE");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.COLUMN_INDEX_OUT_OF_RANGE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, (-1039L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1039L);
      doubleArray0[1] = (double) (-1039L);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (-1039L);
      int int0 = MathUtils.hash(doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) (-1212287167);
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = (double) 0L;
      doubleArray1[5] = (double) (-1039L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.round(9.313225746154785E-10, 0, 11);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double double0 = 6.283185307179586;
      double double1 = MathUtils.indicator(6.283185307179586);
      int int0 = (-198);
      try { 
        MathUtils.pow(8, (-198));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (8^-198)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equals(0.0, 788.85589, 788.85589);
      int int0 = (-1773);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1773));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,773
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.lcm(0, (-869));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-869);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      float float0 = MathUtils.round((float) 0, 21, 0);
      double double0 = MathUtils.round(796.51168903, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(2270);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-0.1666666567325592);
      doubleArray0[1] = 3980.84127124773;
      doubleArray0[2] = (-1264.9223548);
      doubleArray0[3] = (-4126.397426231008);
      doubleArray0[4] = (-350.5);
      doubleArray0[5] = (-2399.026);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 8.251545029714408E-9;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1264.9223548));
      short short0 = MathUtils.sign((short)6087);
      double double0 = MathUtils.binomialCoefficientDouble((short)1, 0);
      float float0 = MathUtils.indicator(1901.0F);
      long long0 = MathUtils.lcm((-302932621132653753L), 0L);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      int int0 = MathUtils.gcd((int) (short)6087, (-1368));
      int int1 = MathUtils.indicator((int) (short)6087);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (double) (short)1);
      long long1 = MathUtils.binomialCoefficient(18, 3);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-710));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -710
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2576.01376167219;
      doubleArray0[1] = (-1141.988417200219);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = MathUtils.cosh(0.3333333333332802);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0560718678299215;
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.indicator((-639.0F));
      int int2 = 2282;
      boolean boolean1 = MathUtils.equals(4070.7597102, (double) (-639.0F), 2282);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
      double double2 = MathUtils.sinh(4070.7597102);
      long long0 = MathUtils.pow((long) 2282, (long) 0);
      boolean boolean3 = MathUtils.equals((double) (-1567095704), 0.3333333333332802);
      double double3 = MathUtils.binomialCoefficientLog(4680, 0);
      short short0 = MathUtils.sign((short)0);
      boolean boolean4 = MathUtils.equalsIncludingNaN(0.0, 2.2250738585072014E-308, (double) 0);
      double[] doubleArray1 = new double[0];
      double double4 = MathUtils.safeNorm(doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-1.0F));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 16;
      intArray0[2] = 161;
      intArray0[3] = 1165;
      intArray0[4] = 6465;
      intArray0[5] = 1024;
      intArray0[6] = 1443;
      intArray0[7] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.factorialDouble(84);
      double double1 = MathUtils.indicator((double) 6465);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1443;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 16;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 6465;
      doubleArray0[8] = (double) 0;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = (-4571);
      float float0 = MathUtils.round(Float.NaN, (-4571));
      long long0 = MathUtils.addAndCheck((long) (-4571), 0L);
      byte byte0 = MathUtils.sign((byte)127);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double0 = 4195.9291088;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 4195.9291088);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = 0L;
      long long1 = (-584L);
      try { 
        MathUtils.pow(0L, (-584L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-584)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = MathUtils.factorialLog(167);
      int int0 = MathUtils.subAndCheck(167, 16);
      double double1 = MathUtils.factorialLog(16);
      long long0 = MathUtils.sign((long) 151);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-2258.5), 2.2250738585072014E-308);
      double double2 = MathUtils.sign((double) 151);
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom(167);
      int int1 = mockRandom0.nextInt();
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      double double3 = mockRandom0.nextDouble();
      double double4 = mockRandom0.nextDouble();
      boolean boolean1 = mockRandom0.nextBoolean();
      int int2 = mockRandom0.nextInt();
      IntStream intStream0 = mockRandom0.ints((long) 16);
      BigInteger bigInteger1 = BigInteger.probablePrime(16, mockRandom0);
      long long1 = bigInteger1.longValue();
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      int int3 = bigInteger0.bitLength();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 1240L);
      double double5 = MathUtils.binomialCoefficientLog(16, 16);
      boolean boolean2 = MathUtils.equalsIncludingNaN(0.0, 0.0, 16);
      int int4 = MathUtils.subAndCheck(0, 0);
      double double6 = MathUtils.factorialDouble(11);
      long long2 = MathUtils.indicator((-741L));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) (short)1;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.round(1614.992390963, (int) (short)1);
      boolean boolean1 = MathUtils.equals(0.0, 1.0, 2741.129154);
      long long0 = MathUtils.binomialCoefficient(16, (short)1);
      double double1 = MathUtils.factorialLog(16);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double2 = MathUtils.distanceInf(doubleArray1, doubleArray0);
      float float0 = MathUtils.sign((float) (short)0);
      float float1 = MathUtils.round(Float.NaN, 16, (int) (short)0);
      int int0 = MathUtils.pow(16, 1651L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int1 = bigInteger0.getLowestSetBit();
      int int2 = bigInteger0.signum();
      // Undeclared exception!
      try { 
        bigInteger0.divideAndRemainder((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      int int1 = MathUtils.indicator(2425);
      int int2 = MathUtils.mulAndCheck(1, 436);
      int int3 = MathUtils.compareTo((-2744.1816), 3.834E-20, 1689.883019168449);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1), 0.1111111111111111);
      double double1 = MathUtils.binomialCoefficientDouble(639, 639);
      int int4 = MathUtils.indicator((-761));
      double double2 = MathUtils.cosh((-2201.331641122149));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2425;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 1689.883019168449;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 2425;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(2610.1850314, 0, (-1));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = MathUtils.pow(67, 11);
      int int1 = MathUtils.indicator((-874687301));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 11;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.cosh(0.0);
      int int2 = MathUtils.compareTo(572.2372844285529, 67, 11);
      double double2 = 1341.7769474;
      int int3 = 0;
      // Undeclared exception!
      try { 
        MathUtils.round(1341.7769474, 0, 3222);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      int int0 = MathUtils.hash(0.0);
      long long0 = MathUtils.pow((-5367L), 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger1 = bigInteger0.flipBit(0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((-496), mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = 9154082963658192752L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4369L, 9154082963658192752L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = MathUtils.gcd((-5732L), (-5732L));
      int int0 = (-3549);
      int int1 = (-2911);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-3549), (-2911));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -3,549, k = -2,911
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = MathUtils.gcd(364L, (-1L));
      double double0 = MathUtils.sinh(364L);
      double double1 = MathUtils.binomialCoefficientLog(3, 3);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(66, 145);
      int int1 = MathUtils.hash(0.07842259109020233);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 9570;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm((long) 9570, 20922789888000L);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 145;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 20);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 20
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = 3628800L;
      long long1 = MathUtils.pow(3628800L, 3628800L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, (double) 0L, (double) 0L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3628800L;
      doubleArray0[1] = (double) 3628800L;
      doubleArray0[2] = (double) 3628800L;
      doubleArray0[3] = (double) 3628800L;
      doubleArray0[4] = (double) 3628800L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long2 = MathUtils.indicator(0L);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = 158;
      int int1 = MathUtils.lcm(158, 31);
      int int2 = (-1643);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1643));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,643
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(3278.366603584895, 3278.366603584895);
      byte byte0 = MathUtils.indicator((byte) (-8));
      int int0 = MathUtils.gcd(2882, (-1672));
      short short0 = MathUtils.indicator((short) (byte) (-1));
      long long0 = MathUtils.lcm(0L, 120L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (byte) (-8);
      doubleArray0[2] = 3278.366603584895;
      doubleArray0[3] = 3278.366603584895;
      doubleArray0[4] = (double) 22;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = (-473.541);
      doubleArray0[3] = 6910.1202174;
      doubleArray0[4] = (-632.0);
      doubleArray0[5] = (-5036.23);
      doubleArray0[6] = (-914.6);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd((-621L), 915L);
      int int0 = MathUtils.mulAndCheck((-726), 0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm((-246), 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-246);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 0, (-246));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = MathUtils.sign((-4284));
      double double0 = MathUtils.scalb((-1349.464), (-2741));
      int int1 = MathUtils.compareTo(543.4218, (-4284), (-1));
      double double1 = MathUtils.normalizeAngle(0.0, 3386.922);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 9.219544613762692E-9;
      doubleArray0[1] = (double) (-2741);
      doubleArray0[2] = (double) (-2741);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-4284);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      float float1 = MathUtils.round(0.0F, 66);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray0 = bigInteger1.toByteArray();
      BigInteger bigInteger2 = bigInteger1.clearBit(631);
      BigInteger bigInteger3 = bigInteger1.shiftRight(66);
      BigInteger bigInteger4 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 66);
      double double0 = MathUtils.cosh(0.0F);
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      int int0 = 4;
      int int1 = (-1207);
      double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, 4, (-1207));
      int int2 = MathUtils.hash(0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int3 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, (double) 4, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 11;
      long long0 = MathUtils.pow((-2691L), 11);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 11);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 11
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(230.6381, (-1879.3361137029));
      double double0 = MathUtils.binomialCoefficientLog(17, 17);
      long long0 = MathUtils.mulAndCheck((-1114L), (-1114L));
      long long1 = MathUtils.factorial(0);
      int int0 = MathUtils.hash(0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 230.6381;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1L;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 10;
      double double2 = MathUtils.distance(intArray0, intArray0);
      double double3 = MathUtils.round(3287.9548455156155, 17, 0);
      boolean boolean1 = MathUtils.equals((-2137.756657614), 3281.1253681605, 10);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 1022, 0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3472.8191828;
      doubleArray0[2] = (-1.0);
      double double0 = 2.2250738585072014E-308;
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = 0.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (3,472.819 > -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-5);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.and(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.not();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, (long) 0);
      short short0 = MathUtils.sign((short)1169);
      double double1 = MathUtils.round((double) (short)1169, 0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2074.8094925515998);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-149), 2298);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -149, k = 2,298
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 6.283185307179586, 0.0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 781.048166907058;
      doubleArray0[1] = (-437.8656325749);
      doubleArray0[2] = 10.0;
      doubleArray0[3] = 2411.6527888651;
      doubleArray0[4] = 693.71496;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 10.0;
      doubleArray1[1] = 693.71496;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathUtils.indicator((-1961.49132));
      long long0 = MathUtils.pow((-1L), 998);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = MathUtils.compareTo(4076.3083, 4236.0, 1489.50356);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.pow(0);
      boolean boolean0 = bigInteger1.testBit(21);
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      long long1 = MathUtils.lcm(0L, 78L);
      short short0 = MathUtils.indicator((short)41);
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 78L);
      int int0 = MathUtils.indicator(359);
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      int int1 = MathUtils.gcd(1, 17);
      double[] doubleArray0 = new double[0];
      int int2 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.round((double) 1, 0, 1);
      BigInteger bigInteger3 = bigInteger0.min(bigInteger1);
      int int3 = bigInteger0.compareTo(bigInteger1);
      int int4 = MathUtils.sign(17);
      double double1 = MathUtils.scalb(0L, (-118));
      BigInteger bigInteger4 = BigInteger.ZERO;
      BigInteger bigInteger5 = MathUtils.pow(bigInteger4, bigInteger1);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 1L, 2369.571);
      int int5 = MathUtils.indicator(1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.scalb(0.0, 585);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 1007.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathUtils.scalb((-2596.112570261391), (-2216));
      int int0 = MathUtils.gcd((-2121), (-2121));
      int int1 = MathUtils.gcd(934, 2121);
      double double1 = MathUtils.sinh((-3738.059));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2273.0;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-3738.059);
      doubleArray0[3] = (-3738.059);
      doubleArray0[4] = (-6.938798061221391E-48);
      doubleArray0[5] = (-6.938798061221391E-48);
      doubleArray0[6] = (-6.938798061221391E-48);
      doubleArray0[7] = (double) 934;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      double double0 = MathUtils.sinh((-616.444945243695));
      int int1 = MathUtils.subAndCheck((-2444), (-2254));
      double double1 = MathUtils.cosh((-2444));
      long long0 = MathUtils.factorial(0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2444);
      doubleArray0[1] = (-2630.2);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-616.444945243695);
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = (double) 0;
      double double2 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathUtils.scalb((-8.0E298), 112);
      int int0 = MathUtils.lcm(112, 213);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 112;
      doubleArray0[1] = (double) 112;
      doubleArray0[2] = (-1.2853410608835377E-284);
      doubleArray0[3] = (double) 112;
      doubleArray0[4] = (-1.2853410608835377E-284);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 213;
      doubleArray1[1] = 6.283185307179586;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (-2060.9594810890726);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.3333333134651184;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.494140625;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.141592653589793;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = null;
      int int0 = 1693;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1693);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-77);
      byte byte1 = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)49;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (int) (byte) (-77));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (71,728,857,905^-77)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = (-552);
      try { 
        MathUtils.pow(2819561105158720014L, (-552));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,819,561,105,158,720,014^-552)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      int int0 = MathUtils.hash(548.0679857941595);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.5830993332061267E-10;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 548.0679857941595;
      doubleArray0[4] = 548.0679857941595;
      doubleArray0[5] = 2.2250738585072014E-308;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.087;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.008333333333333333, 0.008333333333333333);
      double double0 = MathUtils.scalb(1.5830993332061267E-10, 1310);
      long long0 = MathUtils.lcm((long) 1310, (long) 1310);
      int int0 = 2260;
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1310, 1310, 2260);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = MathUtils.lcm(1061L, 1061L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1061L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1061L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1061.0);
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 1061L;
      doubleArray3[3] = (double) 1061L;
      doubleArray3[4] = (double) 1061L;
      doubleArray3[5] = (double) 1061L;
      doubleArray3[6] = (double) 1061L;
      int int0 = MathUtils.hash(doubleArray3);
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray3, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = 0.0;
      int int0 = MathUtils.hash(0.0);
      long long0 = MathUtils.gcd((long) 0, (long) 0);
      double[] doubleArray0 = new double[3];
      double double1 = 1375.861;
      doubleArray0[0] = 1375.861;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = 126;
      int int2 = 69;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(126, 69);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = MathUtils.compareTo(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      int int1 = MathUtils.pow(0, (long) 0);
      long long0 = MathUtils.sign((long) 0);
      float float0 = MathUtils.sign(0.0F);
      long long1 = MathUtils.gcd(1335L, 145L);
      int int2 = 178;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(15, 178);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 15, k = 178
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (short)0;
      doubleArray1[1] = (double) (short)0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      int int0 = 2532;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(457, 2532);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 457, k = 2,532
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, (-2644281811660520851L));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = MathUtils.lcm((-9218868437227405313L), (-9218868437227405313L));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.indicator(0.0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 51;
      intArray0[2] = (-497);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.scalb(51, (-965));
      double double1 = MathUtils.binomialCoefficientLog(0, (-965));
      boolean boolean1 = MathUtils.equalsIncludingNaN(1242.612222, (double) (-497), 2869);
      boolean boolean2 = MathUtils.equalsIncludingNaN((-842.83036903794), 1.6354013817673218E-289);
      int int1 = 1531;
      double double2 = MathUtils.factorialDouble(1531);
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = MathUtils.hash((-3097.2966));
      boolean boolean0 = MathUtils.equals((-3097.2966), (-3097.2966), (-1334.1121));
      int int1 = MathUtils.gcd(459060586, (-1127));
      double double0 = MathUtils.binomialCoefficientLog(66, (-862));
      int int2 = MathUtils.indicator(2353);
      int int3 = MathUtils.mulAndCheck((-862), 7);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1104.04352998148);
      doubleArray0[1] = (double) 459060586;
      doubleArray0[2] = (double) 66;
      doubleArray0[3] = (-1334.1121);
      doubleArray0[4] = (double) 2353;
      doubleArray0[5] = (double) 1;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(16, (-2406));
      int int0 = MathUtils.indicator(0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom((-282L));
      BigInteger bigInteger2 = BigInteger.probablePrime(19, mockRandom0);
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger3 = bigInteger0.andNot(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = MathUtils.sign((float) (-2406));
      try { 
        MathUtils.pow(16, (-2611L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (16^-2,611)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(237, 237);
      long long0 = MathUtils.pow(0L, 56169);
      // Undeclared exception!
      try { 
        MathUtils.round((-1730.733452455295), 56169, 1786);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (-850.39919086);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 10.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-4055));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,055
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(233, 233);
      short short0 = (short)1174;
      short short1 = MathUtils.indicator((short)1174);
      int int1 = MathUtils.sign(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-22);
      byte byte0 = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-9);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 693);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0, (double) 0, (-2794));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1366.13;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 1762.503179818445;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1612.97966941475);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-509.9746231157758);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-240.91929);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.round(1276.2156F, 8);
      int int0 = MathUtils.addAndCheck(185, 8);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = MathUtils.sign(1812L);
      double double0 = MathUtils.round((-463.095), 4128, 0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = MathUtils.scalb(368.18902129, 1393);
      long long0 = MathUtils.pow(4577762542105553359L, 2570L);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1453);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      int int0 = (-3199);
      String string0 = bigInteger1.toString((-3199));
      BigInteger bigInteger2 = BigInteger.valueOf(0L);
      BigInteger bigInteger3 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger4 = bigInteger0.andNot(bigInteger2);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 0L);
      int int1 = (-1690);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1690), (-1690));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,690
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = (-4446.9);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals((-4446.9), (-80.785881), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0);
      int int0 = MathUtils.gcd(0, 200);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 200;
      doubleArray0[4] = (double) 200;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0.0F;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm((long) 200, 0L);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = MathUtils.pow(1020, 1020);
      int int1 = MathUtils.sign(0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = (-1224);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1224), (-1224));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,224
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm(0L, 0L);
      double double1 = MathUtils.binomialCoefficientDouble(11, 11);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.008336750013465571;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.008336750013465571;
      doubleArray1[1] = 0.008336750013465571;
      doubleArray1[2] = (-1.0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      short short0 = MathUtils.sign((short)106);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((short)106, 2514);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 106, k = 2,514
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = MathUtils.indicator((-1379L));
      double double0 = MathUtils.cosh((-1L));
      int int0 = MathUtils.sign(235);
      int int1 = MathUtils.pow((-1497), 1);
      int int2 = 0;
      int int3 = MathUtils.gcd(0, 0);
      long long1 = MathUtils.subAndCheck((-5034868814120038111L), 113236205062349959L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(3370.3712337180787, (double) 113236205062349959L, (-3147));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2480.550079584;
      doubleArray0[1] = (-4.503599627370496E15);
      doubleArray0[2] = 0.031;
      doubleArray0[3] = (-382.98645388481816);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-4,503,599,627,370,496 < 0.031)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 849.140899581352;
      doubleArray0[2] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (849.141 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 593.401;
      doubleArray0[2] = 2549.296536986;
      doubleArray0[3] = (-3343.5182433636);
      doubleArray0[4] = 677.40324;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-2909.096404);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = 0;
      long long0 = MathUtils.factorial(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-2909.096404), 3484);
      int int1 = MathUtils.compareTo(0.0, Double.POSITIVE_INFINITY, 0.0);
      int int2 = MathUtils.subAndCheck((-1), 3484);
      double double1 = MathUtils.indicator((double) 1L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1.1102230246251565E-16, (-2909.096404), (-3485));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 253;
      int int1 = 20;
      int int2 = MathUtils.subAndCheck(253, 20);
      double double0 = MathUtils.indicator((double) 233);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 20;
      doubleArray0[1] = (double) 20;
      doubleArray0[2] = (double) 253;
      doubleArray0[3] = (double) 20;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 9.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = MathUtils.sign(4507);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4507;
      doubleArray0[1] = (double) 4507;
      doubleArray0[2] = (double) 4507;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 543.5193;
      doubleArray0[5] = (double) 4507;
      doubleArray0[6] = (double) 4507;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 4507;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.normalizeAngle(0.0, 2.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 408;
      intArray0[1] = 1;
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.gcd((-3857L), 0L);
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.log(1.0, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.0, 2.2250738585072014E-308, 3.834E-20);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientLog(3, 0);
      int int2 = 1385;
      double double1 = MathUtils.factorialDouble(1385);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 3, (double) 1385, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-48));
      double double0 = MathUtils.indicator((double) (byte) (-1));
      float float0 = MathUtils.indicator((-1.0F));
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (byte) (-48), 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.subAndCheck(0, 0);
      long long0 = MathUtils.gcd((long) 0, (long) 0);
      long long1 = MathUtils.gcd(0L, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      int int2 = MathUtils.lcm(0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double1 = MathUtils.log(497.272457, (-93.8020412));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float float0 = MathUtils.sign(843.74F);
      double double0 = MathUtils.scalb(1.0F, (-3147));
      float float1 = MathUtils.round(120.2F, (-3147));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4.758454107128906E285;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) (-3147);
      doubleArray0[3] = (double) 843.74F;
      doubleArray0[4] = (double) 120.2F;
      doubleArray0[5] = (double) Float.NaN;
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, 3433.43494506759, 192);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(562L, 562L);
      long long1 = MathUtils.indicator(768L);
      int int0 = MathUtils.compareTo(0L, 2504.419514852, 1L);
      double double0 = MathUtils.sign((double) (-1));
      long long2 = MathUtils.pow(0L, 0L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2504.419514852;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 1L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 176.6798);
      double double1 = MathUtils.log(1.0, 1107.05149316);
      double double2 = MathUtils.log((-1.0), 1107.05149316);
      double double3 = MathUtils.cosh((-6.663542893624021E-14));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1804;
      intArray0[1] = (-3044);
      intArray0[2] = 3192;
      intArray0[3] = 3580;
      intArray0[4] = 0;
      intArray0[5] = 10;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.binomialCoefficientDouble(3580, 1608);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 10;
      try { 
        MathUtils.normalizeArray(doubleArray0, 20.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, (-2973));
      double double0 = MathUtils.normalizeAngle(Float.NaN, Float.NaN);
      long long0 = MathUtils.sign(0L);
      short short0 = MathUtils.indicator((short)2144);
      long long1 = MathUtils.addAndCheck((long) (-2973), 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3088.48244), (double) (-2973L));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = 500.791303135547;
      double double1 = MathUtils.sign(500.791303135547);
      long long0 = MathUtils.pow(0L, 0L);
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = 136;
      int int1 = 687;
      // Undeclared exception!
      try { 
        MathUtils.round(0.036, 136, 687);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.round(Float.NaN, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.normalizeAngle(Float.NaN, Double.NEGATIVE_INFINITY);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.modInverse(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.gcd(bigInteger1);
      long long0 = bigInteger0.longValue();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      double double1 = MathUtils.log(Float.NaN, 360.191959156681);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("`x<\"s$1");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.`x<\"s$1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        MathUtils.pow((-1050), (-3152L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,050^-3,152)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathUtils.indicator(0.1111111111111111);
      boolean boolean0 = MathUtils.equals(1.0, 1.0, 546);
      float float0 = MathUtils.round(Float.NaN, 270);
      boolean boolean1 = MathUtils.equals(1.0, (double) Float.NaN);
      long long0 = MathUtils.addAndCheck(1847L, 1847L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(0, mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = MathUtils.hash((double[]) null);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 1036);
      long long1 = MathUtils.pow((long) 0, (long) 1036);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0L, 0.0);
      double double0 = MathUtils.binomialCoefficientDouble(136, (-2136));
      int int1 = MathUtils.subAndCheck(0, 154);
      boolean boolean2 = MathUtils.equals((double[]) null, (double[]) null);
      long long2 = MathUtils.mulAndCheck((long) 154, (-753L));
      double double1 = MathUtils.sign(1957.2793170726);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.valueOf(0L);
      BigInteger bigInteger3 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.subAndCheck(4503599627370495L, 682L);
      int int0 = MathUtils.gcd(19, (-122));
      long long1 = MathUtils.binomialCoefficient(1, 0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(1.0F, 1481, 1481);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,481, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long long0 = MathUtils.lcm(826L, 826L);
      int[] intArray0 = new int[3];
      intArray0[0] = 308;
      intArray0[1] = (-1707);
      int int0 = 3506;
      intArray0[2] = 3506;
      double double0 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.indicator(2756.1F);
      long long1 = MathUtils.subAndCheck((-2391L), 0L);
      double double1 = MathUtils.normalizeAngle(3506, (-2391L));
      float float1 = MathUtils.sign((float) 0L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1707);
      doubleArray0[1] = (double) 826L;
      doubleArray0[2] = (double) 308;
      doubleArray0[3] = (double) (-2391L);
      int int1 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 6, 308);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 308, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathUtils.scalb(1.01, 371);
      int[] intArray0 = new int[4];
      intArray0[0] = 371;
      intArray0[1] = 371;
      intArray0[2] = 371;
      intArray0[3] = 371;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)62;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      int int1 = bigInteger0.bitLength();
      try { 
        MathUtils.pow(bigInteger0, (-838L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-838)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-995.82136), (-995.82136));
      int int0 = 4194304;
      // Undeclared exception!
      try { 
        MathUtils.factorial(4194304);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = bigInteger0.bitCount();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int int1 = MathUtils.pow(0, 0);
      long long0 = MathUtils.addAndCheck((long) 1, (long) 0);
      int int2 = 0;
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      double double1 = MathUtils.normalizeAngle(1L, 1);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1286));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,286
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator((-279.0F));
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow(55, 55);
      double double2 = MathUtils.binomialCoefficientDouble(55, 55);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1331));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,331
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 2545.5610178772);
      double double1 = MathUtils.normalizeAngle(-0.0, 15.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
      double double0 = MathUtils.sinh(0L);
      long long1 = MathUtils.sign(0L);
      long long2 = MathUtils.subAndCheck(1307674368000L, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, (double) 0L);
      short short0 = MathUtils.sign((short)198);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long long0 = MathUtils.sign((-2367L));
      long long1 = MathUtils.addAndCheck(0L, (-1L));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2367L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-2367L);
      doubleArray0[3] = (double) (-2367L);
      doubleArray0[4] = (double) (-1L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-9223372036854775808L), (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -9,223,372,036,854,775,808 + -9,223,372,036,854,775,808
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = (-854);
      int int1 = 0;
      int int2 = MathUtils.subAndCheck((-854), 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.add(bigInteger0);
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger0);
      long long0 = (-84L);
      try { 
        MathUtils.pow(bigInteger0, (-84L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-84)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long long0 = MathUtils.indicator((-683L));
      boolean boolean0 = MathUtils.equals(4.0, 811.680145, (-4347.7725446));
      int int0 = MathUtils.hash(Double.NEGATIVE_INFINITY);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-683L);
      doubleArray0[1] = (-4347.7725446);
      doubleArray0[2] = 4.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte)16);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = MathUtils.indicator((-683L));
      boolean boolean0 = MathUtils.equals(4.0, 811.680145, (-4347.7725446));
      int int0 = MathUtils.compareTo(811.680145, (-4347.7725446), (-1L));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-683L);
      doubleArray0[1] = (-4347.7725446);
      doubleArray0[2] = 4.0;
      byte byte0 = MathUtils.indicator((byte)16);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      long long0 = MathUtils.factorial(5);
      int int0 = MathUtils.gcd((-2737), 0);
      double double1 = MathUtils.round((double) 0, 2737);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = MathUtils.indicator((-3841L));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-3841L);
      doubleArray0[2] = (double) (-3841L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-3841L);
      doubleArray0[6] = (double) (-1L);
      doubleArray0[7] = 0.1111111111111111;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      long long0 = MathUtils.indicator(1L);
      int int1 = MathUtils.lcm(94, 123);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = MathUtils.lcm(543L, 543L);
      double double0 = MathUtils.normalizeAngle(1.0, 543L);
      double double1 = MathUtils.round(Double.NEGATIVE_INFINITY, (-1369));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1014.326246134), 0.0, (-1014.326246134));
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(893);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 893;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      long long0 = (-1L);
      long long1 = 3919L;
      long long2 = MathUtils.gcd((-1L), 3919L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("O!E7De");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.O!E7De
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1883.0);
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2298.464;
      doubleArray0[4] = 309.0491;
      double double0 = MathUtils.safeNorm(doubleArray0);
      byte byte0 = MathUtils.sign((byte) (-112));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = MathUtils.indicator(19.562);
      int int0 = MathUtils.sign(116);
      double double1 = MathUtils.sinh(19.562);
      long long0 = MathUtils.pow((long) 116, (long) 116);
      int[] intArray0 = new int[3];
      intArray0[0] = 772;
      intArray0[1] = 1;
      intArray0[2] = 116;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.5654480477146778E8;
      doubleArray0[1] = 19.562;
      doubleArray0[2] = (double) 1;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int2 = MathUtils.addAndCheck(116, 772);
      int int3 = MathUtils.gcd((-4445), 0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0);
      long long1 = MathUtils.mulAndCheck((long) 116, (long) 888);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.not();
      int int4 = bigInteger0.bitCount();
      boolean boolean1 = bigInteger0.isProbablePrime((-2229));
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0);
      float float0 = MathUtils.sign((float) 116);
      long long2 = MathUtils.lcm(6L, 1678L);
      // Undeclared exception!
      try { 
        MathUtils.round((-1.0), 10, 772);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = (-44);
      int int1 = MathUtils.lcm((-44), (-44));
      long long0 = MathUtils.sign((long) (-44));
      int int2 = 922;
      int int3 = (-1311);
      long long1 = MathUtils.binomialCoefficient(922, (-1311));
      int int4 = 0;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte byte0 = (byte) (-122);
      byte byte1 = MathUtils.sign((byte) (-122));
      int int0 = MathUtils.gcd(4181, 31);
      long long0 = MathUtils.gcd(4294967295L, 1021L);
      double double0 = (-2022.1789638);
      boolean boolean0 = MathUtils.equals(1676.3270940537939, 0.0, (-2022.1789638));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf(4208363204685324176L);
      double double1 = bigInteger0.doubleValue();
      // Undeclared exception!
      try { 
        bigInteger0.clearBit((byte) (-1));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-349.195684657);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator(0.0F);
      short short0 = MathUtils.indicator((short)0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.lcm(0, 0);
      int int2 = MathUtils.compareTo(0.0, (-647.05), 0.0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double1 = MathUtils.factorialLog(1);
      short short1 = MathUtils.sign((short)0);
      boolean boolean0 = MathUtils.equals((double) 0, 0.0, 2.0);
      long long0 = MathUtils.addAndCheck((long) (short)0, (long) (short)0);
      double double2 = MathUtils.safeNorm(doubleArray1);
      int int3 = MathUtils.pow(0, 1L);
      short short2 = MathUtils.indicator((short)0);
      int int4 = MathUtils.lcm((int) (short)0, 0);
      // Undeclared exception!
      try { 
        MathUtils.round((-718.703F), 0, 130);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 130, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = MathUtils.pow(4194304, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals((double) 4194304, (-99.210643));
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 37;
      intArray0[3] = 1;
      intArray0[4] = 1;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.indicator(0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.scalb((-875.863178040409), 37);
      long long0 = MathUtils.pow(120L, (long) 1);
      short short0 = MathUtils.sign((short) (-4770));
      int int3 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.scalb((-0.2499999997677497), (-3212));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 3131;
      double double0 = MathUtils.factorialLog(3131);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      long long0 = MathUtils.sign(0L);
      double double1 = MathUtils.sinh(0L);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 177;
      intArray0[1] = (-1015);
      intArray0[2] = 16;
      intArray0[3] = 1789569706;
      intArray0[4] = 1461;
      intArray0[5] = (-1884);
      intArray0[6] = (-2630);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }
}
