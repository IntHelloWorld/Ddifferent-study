/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:11:39 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(682, 682);
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.binomialCoefficientDouble(666, 42);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.63E18, (-1435.15906837));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1923));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,923
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = MathUtils.sign((-9223372036854775808L));
      int int0 = MathUtils.pow(0, 0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(2, 2);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(13, 13);
      long long0 = MathUtils.gcd((long) 26, (long) 26);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 26L;
      doubleArray0[1] = (double) 13;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((float) 13, 0);
      double double1 = MathUtils.log(675.15, 13);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.sign(0);
      float float1 = MathUtils.sign((float) 26);
      double double3 = MathUtils.sign((double) 0);
      byte byte0 = MathUtils.indicator((byte) (-17));
      double double4 = MathUtils.round(1.9868161777724352E-8, 0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 1.9868161777724352E-8;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = 0.3937029918788161;
      doubleArray1[6] = (double) (byte) (-1);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2.6033824355191673E-8);
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(304L, 304L);
      int int0 = MathUtils.mulAndCheck(2250, 2250);
      double double1 = MathUtils.normalizeAngle(0.0, (-7.800414592973399E-9));
      double double2 = MathUtils.binomialCoefficientLog(1630, 1630);
      int int1 = MathUtils.indicator(1268);
      int int2 = MathUtils.hash((double[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-2);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 1268);
      // Undeclared exception!
      try { 
        bigInteger3.divide(bigInteger0);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = MathUtils.gcd((-539L), 1L);
      double double0 = MathUtils.cosh(1L);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2467);
      intArray0[1] = (-2739);
      intArray0[2] = 103;
      intArray0[3] = 254;
      intArray0[4] = 0;
      intArray0[5] = 1488;
      intArray0[6] = 1221;
      intArray0[7] = 1347;
      int[] intArray1 = new int[5];
      intArray1[0] = 1488;
      intArray1[1] = 1488;
      intArray1[2] = (-2739);
      intArray1[3] = 0;
      intArray1[4] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-177);
      intArray0[0] = (-177);
      int int1 = 0;
      intArray0[1] = 0;
      intArray0[2] = 31;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, (-3555L));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = MathUtils.sign(4015.02);
      double double1 = MathUtils.indicator(0.0);
      int int0 = MathUtils.hash(4466.7730408);
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      long long1 = MathUtils.indicator((-439L));
      int int1 = MathUtils.gcd(13, (-3173));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = 4015.02;
      doubleArray0[2] = (double) 1;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = MathUtils.gcd((-1183), 63);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 63;
      doubleArray0[1] = (double) (-1183);
      doubleArray0[2] = (double) (-1183);
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (double) 63;
      doubleArray0[5] = (double) (-1183);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 3
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, (-2257));
      long long0 = MathUtils.pow((long) (-2257), 0);
      double double1 = MathUtils.round((double) 1L, 0, 0);
      double double2 = MathUtils.scalb(1L, 128);
      float float0 = MathUtils.round(204.0F, 184);
      float float1 = MathUtils.round((float) 184, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.lcm(0L, (long) 184);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      float float2 = MathUtils.indicator((-4034.3564F));
      long long2 = MathUtils.subAndCheck((-2604L), (-81L));
      double double3 = MathUtils.round(6.283185307179586, (-2257), 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = bigInteger0.toString((-1045));
      float float3 = bigInteger0.floatValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 3, 3);
      boolean boolean0 = MathUtils.equals((double) (-0.001F), 2.0, (-1184.51209349));
      long long0 = MathUtils.mulAndCheck((long) 3, (long) 3);
      double double0 = MathUtils.normalizeAngle(3, 0.0F);
      long long1 = MathUtils.lcm((-804L), (-2258L));
      int int0 = MathUtils.gcd(0, 0);
      short short0 = MathUtils.sign((short) (-7));
      double double1 = MathUtils.binomialCoefficientDouble(746, (-10));
      long long2 = MathUtils.pow((long) 0, 0L);
      int int1 = MathUtils.addAndCheck(0, 1549);
      boolean boolean1 = MathUtils.equals(2360.6851173419, (double) 9L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((short) (-1), 3);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1, k = 3
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = (-2751);
      int int1 = MathUtils.subAndCheck((-2751), 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2751);
      doubleArray0[1] = (double) (-2751);
      doubleArray0[2] = (double) (-2751);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-2751);
      doubleArray0[5] = (double) (-2751);
      doubleArray0[6] = (double) (-2751);
      doubleArray0[7] = (-1024.6);
      doubleArray0[8] = (double) (-2751);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-2751);
      doubleArray1[1] = (-1024.6);
      doubleArray1[2] = (-1024.6);
      doubleArray1[3] = (double) (-2751);
      doubleArray1[4] = (double) (-2751);
      doubleArray1[5] = (-1024.6);
      doubleArray1[6] = (double) (-2751);
      doubleArray1[7] = (double) (-2751);
      doubleArray1[8] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger("the closest orthogonal matrix has a negative determinant {0}", 14);
      } catch(NumberFormatException e) {
         //
         // For input string: \"the \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 10;
      int int1 = 3;
      int int2 = MathUtils.pow(10, 3);
      int int3 = MathUtils.sign(0);
      int int4 = MathUtils.lcm(1000, 1000);
      double double0 = MathUtils.factorialDouble(0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.factorial(3);
      double double1 = MathUtils.round(0.0, 0);
      long long1 = MathUtils.mulAndCheck((long) 0, (long) 1000);
      long long2 = MathUtils.indicator((long) 10);
      short short0 = MathUtils.sign((short)15);
      float float0 = MathUtils.sign(1.0F);
      long long3 = MathUtils.addAndCheck(590L, (-9218868437227405313L));
      double double2 = MathUtils.cosh((-2310.45));
      long long4 = MathUtils.addAndCheck((long) 0, 0L);
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      int int5 = MathUtils.distance1(intArray0, intArray0);
      int int6 = 1373;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(10, 1373);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 10, k = 1,373
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-94);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (byte)55;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte)55;
      doubleArray0[5] = (double) (byte) (-94);
      doubleArray0[6] = (double) (byte)55;
      doubleArray0[7] = (double) (byte)55;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.7553817452272217E-6, 0.2857142686843872, 0.2857142686843872);
      float float0 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte) (-68));
      int int0 = MathUtils.sign((int) (byte) (-1));
      float float1 = MathUtils.round((-2536.0F), (int) (byte) (-1), 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 1277.2784, 0.05);
      int int1 = MathUtils.mulAndCheck((-492), (-492));
      long long0 = MathUtils.subAndCheck((-1L), 0L);
      int int2 = MathUtils.subAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1996.857006);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = 837;
      boolean boolean0 = MathUtils.equals((-1996.857006), 1996.857006, 837);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.shiftRight(837);
      int int1 = bigInteger2.signum();
      BigInteger bigInteger3 = BigInteger.valueOf(837);
      BigInteger bigInteger4 = bigInteger0.divide(bigInteger3);
      long long0 = bigInteger3.longValueExact();
      BigInteger bigInteger5 = bigInteger3.not();
      BigInteger bigInteger6 = bigInteger0.xor(bigInteger2);
      BigInteger bigInteger7 = bigInteger1.modInverse(bigInteger0);
      BigInteger bigInteger8 = bigInteger0.and(bigInteger3);
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short short0 = MathUtils.sign((short)928);
      int int0 = MathUtils.lcm((int) (short)1, (-705));
      float float0 = MathUtils.sign((float) (short)1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.indicator((-2596.0));
      double double2 = MathUtils.log(1949.960288378799, 1.0);
      double double3 = MathUtils.binomialCoefficientDouble((short)1, (-705));
      long long0 = MathUtils.mulAndCheck(209L, (-777L));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2029.7291931;
      doubleArray0[2] = (-148.16725);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2029.7291931);
      double double0 = MathUtils.sign(2625.051240531028);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (2,189.564 > -159.835)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.setBit(0);
      BigInteger bigInteger2 = bigInteger1.and(bigInteger0);
      int int0 = bigInteger0.bitCount();
      BigInteger bigInteger3 = bigInteger0.divide(bigInteger1);
      boolean boolean0 = bigInteger0.testBit(361);
      BigInteger bigInteger4 = bigInteger0.multiply(bigInteger2);
      String string0 = bigInteger0.toString();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 1);
      byte byte0 = MathUtils.indicator((byte)10);
      double double0 = MathUtils.sign(9.313225746154785E-10);
      long long0 = MathUtils.subAndCheck(0L, (long) 1);
      int int1 = MathUtils.hash((double) 0);
      int int2 = MathUtils.lcm(361, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = 9.313225746154785E-10;
      doubleArray0[3] = 290.878567862;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 9.313225746154785E-10;
      int int3 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1307674368000L, (-1659L));
      double double0 = MathUtils.binomialCoefficientDouble(7, 7);
      long long1 = MathUtils.addAndCheck((-2067L), (long) 7);
      long long2 = MathUtils.subAndCheck((-2060L), 689L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1307674368000L;
      doubleArray0[1] = (double) (-1659L);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-1659L);
      int int0 = MathUtils.hash(doubleArray0);
      byte byte0 = MathUtils.indicator((byte)36);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.factorialDouble((byte)36);
      long long3 = MathUtils.indicator((-1659L));
      double double3 = MathUtils.sinh((-1526161238));
      double double4 = MathUtils.log((-2067L), (-795.0));
      double double5 = MathUtils.binomialCoefficientDouble(7, (byte)1);
      float float0 = MathUtils.round((float) 1307674368000L, (-1526161238));
      long long4 = MathUtils.binomialCoefficient((byte)1, 0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)63;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) (byte)70);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = MathUtils.lcm(2909L, 2909L);
      short short0 = MathUtils.indicator((short)12);
      int int0 = 187;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(508, 187);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = MathUtils.scalb((-868.0), 14);
      double double1 = MathUtils.normalizeAngle(1.1102230246251565E-16, (-1.4221312E7));
      int int0 = MathUtils.pow(14, 14);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.4221312E7);
      doubleArray0[1] = 1.1102230246251565E-16;
      doubleArray0[2] = 1.1102230246251565E-16;
      doubleArray0[3] = (-868.0);
      doubleArray0[4] = (-1.4221311358787818E7);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = MathUtils.round(1001.995, 9);
      double double1 = MathUtils.sign(1001.995);
      int int0 = MathUtils.gcd(2004, 2004);
      float float0 = MathUtils.round(0.0F, 2034);
      double double2 = MathUtils.sinh(0.0F);
      double double3 = MathUtils.round((double) 0.0F, 2004);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 9, 2004, (-394));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = 0.0;
      int int0 = (-585);
      double double1 = MathUtils.round(0.0, (-585));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-585), (-585));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -585
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 226;
      intArray0[1] = (-1728);
      intArray0[2] = 6;
      intArray0[3] = 408;
      intArray0[4] = (-1673);
      intArray0[5] = (-2355);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.factorialLog(226);
      double double1 = MathUtils.factorialDouble(0);
      long long0 = MathUtils.subAndCheck((long) (-1728), 1793L);
      double double2 = MathUtils.sinh((-1.0));
      int int1 = MathUtils.compareTo(226, (-2274.179), 226);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 408, 376.2718, 226);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (-1673), 0.0, 6);
      double double3 = MathUtils.normalizeAngle(1.0, 226);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float float0 = MathUtils.sign((-322.401F));
      double double0 = MathUtils.scalb(861.70497, 282);
      int int0 = 0;
      float float1 = MathUtils.round((-808.88F), 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(282, 1441);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 282, k = 1,441
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = MathUtils.indicator(253);
      int int1 = MathUtils.gcd(1, 253);
      double double0 = MathUtils.sinh(0.0);
      double double1 = MathUtils.indicator(0.0);
      int int2 = MathUtils.compareTo(1, 0.0, 1195.0);
      double double2 = MathUtils.sinh(0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1195.0;
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(4503599627370495L, 233);
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      double double4 = MathUtils.normalizeAngle(Double.NEGATIVE_INFINITY, (-66.1691));
      float float0 = MathUtils.round(Float.NaN, 1704);
      int int3 = MathUtils.hash(doubleArray0);
      double double5 = MathUtils.binomialCoefficientDouble(1083354143, (-2001));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1.4456468917292502E-16, 187.17832, 187.17832);
      long long0 = MathUtils.lcm((-1556L), (-1556L));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1616.706943897), 0.0);
      short short0 = MathUtils.sign((short) (-849));
      int int0 = MathUtils.compareTo((short) (-1), (-309.66381009769975), (short) (-1));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)81;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = bigInteger0.setBit((byte)36);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) (byte)13);
      boolean boolean0 = MathUtils.equals(793.227, (-453.5823), 1);
      try { 
        MathUtils.pow((int) (byte)77, (-1306));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (77^-1,306)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-2456L), (-2456L));
      float float0 = MathUtils.sign((float) 6031936L);
      float float1 = MathUtils.indicator((float) (-2456L));
      int int0 = MathUtils.subAndCheck(21, 21);
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.factorialLog(21);
      long long1 = MathUtils.addAndCheck(6031936L, (long) (short)1);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) (short)0);
      double double1 = MathUtils.log(0.0, 9.313225746154785E-10);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 9.313225746154785E-10;
      doubleArray0[3] = 45.38013889847691;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 10;
      double double0 = MathUtils.scalb((-3689.0), 10);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.lcm((-865L), (long) 10);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.log(10, (-3732.0522101));
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      long long1 = MathUtils.sign((-734L));
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double2 = MathUtils.sign(Double.NaN);
      double double3 = MathUtils.cosh(271.572799482244);
      double double4 = MathUtils.sinh((-3689.0));
      try { 
        MathUtils.normalizeArray(doubleArray0, (-3777536.0));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-400));
      long long0 = 930L;
      long long1 = MathUtils.subAndCheck((long) (short) (-400), 930L);
      byte byte0 = (byte)8;
      byte byte1 = MathUtils.indicator((byte)8);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2347.5400844413;
      doubleArray0[2] = (-1931.19623);
      doubleArray0[3] = 2076.71555;
      doubleArray0[4] = (-127.21378699031);
      doubleArray0[5] = (-619.712537242509);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,347.54 >= -1,931.196)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      byte byte0 = MathUtils.indicator((byte)99);
      double double0 = MathUtils.sign((-2626.7645));
      doubleArray0[4] = (-45.871368883);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not increasing (0 > -45.871)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = MathUtils.gcd((-1174L), (-1174L));
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1314;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long1 = MathUtils.binomialCoefficient(0, 0);
      int int1 = MathUtils.lcm(1314, (-1683));
      long long2 = MathUtils.gcd((long) 0, 321L);
      double double1 = MathUtils.factorialDouble(249);
      int int2 = MathUtils.hash((double) 1314);
      float float0 = MathUtils.round((float) 0, (-3027));
      double double2 = MathUtils.log(1.304E19, 0.0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, -0.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 63;
      intArray0[1] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byte byte0 = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (int) (byte) (-17));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (3,311^-17)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long1 = MathUtils.lcm(1L, 121645100408832000L);
      int int0 = MathUtils.hash((double) 1L);
      byte byte0 = MathUtils.sign((byte)57);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1L, 2238.00535734078);
      int[] intArray0 = new int[4];
      intArray0[0] = 1072693248;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (-1309);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double1 = MathUtils.factorialLog(1);
      float float0 = MathUtils.round((float) (-1309), 2059, 1);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (-1309), 0.0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(1450);
      float float0 = MathUtils.indicator((float) 1450);
      double double1 = MathUtils.sign(Double.POSITIVE_INFINITY);
      double double2 = MathUtils.round(0.030589580535888672, 61, 0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      float float0 = MathUtils.sign(0.0F);
      int[] intArray0 = new int[2];
      intArray0[0] = 1050;
      intArray0[1] = 2743;
      int[] intArray1 = new int[7];
      intArray1[0] = 2743;
      intArray1[1] = 2743;
      intArray1[2] = 2743;
      intArray1[3] = 1050;
      intArray1[4] = 2743;
      intArray1[5] = 1050;
      intArray1[6] = 2743;
      double double0 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = MathUtils.sign(1307674368000L);
      double double0 = MathUtils.cosh(1307674368000L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1L;
      double double1 = 447.0097267;
      doubleArray0[1] = 447.0097267;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 1L;
      doubleArray0[8] = (double) 1307674368000L;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-2950.937233);
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = (double) 1L;
      doubleArray1[4] = (double) 1L;
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1919);
      intArray0[2] = 0;
      int[] intArray1 = new int[2];
      intArray1[0] = (-302);
      intArray1[1] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double0 = MathUtils.indicator(6.283185307179586);
      int int0 = (-2754);
      int int1 = MathUtils.mulAndCheck((-2754), 0);
      boolean boolean1 = MathUtils.equals((double[]) null, (double[]) null);
      int int2 = MathUtils.hash((-1916.9));
      float float0 = MathUtils.round((float) 0, 1493461507);
      int int3 = (-1120);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1120));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,120
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = MathUtils.sign(2571);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1, 0.19999954104423523, 2571);
      float float0 = MathUtils.sign((float) 2571);
      byte byte0 = MathUtils.sign((byte) (-62));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2571;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) (byte) (-62);
      doubleArray0[3] = (double) 2571;
      doubleArray0[4] = (double) 2571;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = (double) (byte) (-1);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
      double double0 = MathUtils.SAFE_MIN;
      float float0 = MathUtils.indicator(57.57F);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 57.57F;
      doubleArray0[5] = (double) (-396L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2999.15989));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = 9;
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 9);
      int int1 = 2932;
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 9, 0.0, 2932);
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-1411.01516732);
      doubleArray0[7] = 1.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1915);
      int int0 = MathUtils.addAndCheck((int) (short)1, 0);
      int int1 = MathUtils.sign(110);
      float float0 = MathUtils.round(0.0F, (-270));
      int int2 = MathUtils.pow(1030, 1030);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1030, 2.0, (-373.9250258279098));
      boolean boolean1 = MathUtils.equals(1.4456468917292502E-16, (-3974.18801), 110);
      double double0 = MathUtils.round((double) 0.0F, 110, 0);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = MathUtils.compareTo((-523.91401485209), 3943.3256, 0.0);
      long long0 = (-78L);
      long long1 = MathUtils.addAndCheck((-78L), 2891L);
      long long2 = MathUtils.pow(2891L, 2891L);
      long long3 = MathUtils.mulAndCheck(2781L, 2781L);
      int int1 = MathUtils.lcm((-1), (-1));
      long long4 = MathUtils.addAndCheck(2147483648L, 2891L);
      long long5 = MathUtils.indicator(0L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1463.81122325;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1674324880777403411L;
      doubleArray0[4] = (double) 2781L;
      doubleArray0[5] = (double) (-78L);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 2147486539L;
      doubleArray1[1] = (double) 2891L;
      doubleArray1[2] = (double) 2813L;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = MathUtils.sinh((-3079.179));
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 609;
      intArray0[1] = 11;
      intArray0[2] = (-3605);
      intArray0[3] = (-2558);
      intArray0[4] = 229;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 609;
      doubleArray0[1] = (double) 229;
      doubleArray0[2] = (double) (-3605);
      doubleArray0[3] = (double) (-3605);
      doubleArray0[4] = (double) (-2558);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int1 = MathUtils.mulAndCheck((-494), 3069);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) (-2558);
      doubleArray1[2] = (double) (-1516086);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-67);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.not();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-494), 11, (-175));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = MathUtils.lcm((-4060), (-4060));
      short short0 = MathUtils.indicator((short) (-3856));
      long long0 = MathUtils.addAndCheck(6722166367014452318L, (-2644281811660520851L));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-2178.68054));
      int int1 = MathUtils.subAndCheck((int) (short) (-3856), 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0, (double) 0);
      float float0 = MathUtils.indicator((float) (-2644281811660520851L));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.sign(0);
      short short0 = MathUtils.indicator((short) (-1));
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.factorialLog(112);
      byte byte0 = MathUtils.indicator((byte)21);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      double double0 = MathUtils.indicator(0.0);
      int int0 = MathUtils.lcm((-1155), 8);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-1155);
      doubleArray1[1] = 0.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      double double2 = MathUtils.normalizeAngle(1.1102230246251565E-16, 9240);
      int int1 = MathUtils.sign((-1155));
      int int2 = MathUtils.subAndCheck(8, (-1155));
      long long0 = MathUtils.indicator(2035L);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-516));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -516
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathUtils.cosh(1.5962507444681813);
      double double1 = MathUtils.scalb(2.568575954661888, 3349);
      long long0 = MathUtils.pow((long) 3349, 3349);
      short short0 = MathUtils.indicator((short) (-605));
      // Undeclared exception!
      try { 
        MathUtils.factorial(1098);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = MathUtils.sign((-1426));
      double double0 = MathUtils.normalizeAngle((-1426), (-2144.0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = 49L;
      long long1 = MathUtils.subAndCheck(49L, 49L);
      double double0 = MathUtils.sinh(49L);
      int int0 = (-2430);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2430));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,430
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long1 = MathUtils.pow((-671L), 219);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      int[] intArray0 = new int[7];
      intArray0[0] = 219;
      intArray0[1] = 877;
      intArray0[2] = 219;
      intArray0[3] = 219;
      intArray0[4] = 219;
      intArray0[5] = 219;
      intArray0[6] = 219;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = MathUtils.sign(271L);
      try { 
        MathUtils.pow((-639), (-639));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-639^-639)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(2637L, 2637L);
      long long1 = MathUtils.pow(4577762542105553359L, 2210);
      double double0 = MathUtils.indicator((double) 2210);
      byte byte0 = MathUtils.sign((byte) (-71));
      long long2 = MathUtils.pow((long) 2210, 125);
      int int0 = MathUtils.gcd(0, (int) (byte) (-1));
      double double1 = MathUtils.log((-1672.8611), (-1327.7641187203));
      double double2 = MathUtils.scalb(0.0, 1661);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-2541L), (-3429L));
      double double0 = MathUtils.normalizeAngle((-2541L), (-2483.51));
      int[] intArray0 = new int[2];
      int int0 = (-159);
      intArray0[0] = (-159);
      intArray0[1] = (-3695);
      double double1 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.round((float) (-159), (-3695));
      long long1 = MathUtils.indicator((-1786L));
      int int1 = MathUtils.indicator(0);
      int int2 = MathUtils.addAndCheck(103, (-159));
      long long2 = MathUtils.sign((-1786L));
      long long3 = MathUtils.sign((-887L));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0, 0);
      long long0 = MathUtils.lcm(0L, 0L);
      double double0 = MathUtils.factorialLog(0);
      double double1 = MathUtils.indicator(1808.2139344438729);
      long long1 = MathUtils.addAndCheck((long) 0, (-5034868814120038111L));
      int int0 = MathUtils.addAndCheck(213, 145);
      int[] intArray0 = new int[2];
      intArray0[0] = 109;
      intArray0[1] = 213;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2182.06735257);
      doubleArray0[1] = 5748.64;
      doubleArray0[2] = 2048.2;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-0.12502530217170715);
      doubleArray0[6] = 3.141592653589793;
      doubleArray0[7] = 2.2250738585072014E-308;
      doubleArray0[8] = (-5089.311);
      double double0 = MathUtils.safeNorm(doubleArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)44;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (long) (byte) (-78));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-19,924^-78)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float float0 = MathUtils.round((-28.865887F), 117);
      long long0 = MathUtils.addAndCheck((long) 117, 0L);
      double double0 = MathUtils.cosh((-28.865887F));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = (-1116);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0L, (double) 0L, (-1116));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = MathUtils.indicator((-663));
      double double0 = MathUtils.round((-1033.9), 0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)56;
      byte byte0 = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)39;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      int int1 = bigInteger1.signum();
      // Undeclared exception!
      try { 
        bigInteger1.setBit((-1));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = MathUtils.indicator(799);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1, (double) 799, 307.055638269);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = (-1154);
      int int1 = MathUtils.indicator((-1154));
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1154));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,154
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1284.1997913, 1284.1997913);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = MathUtils.log(1453.7804949189, 0.0);
      int int0 = (-2542);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2542));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,542
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.negate();
      byte byte0 = bigInteger1.byteValueExact();
      String string0 = bigInteger1.toString((int) (byte)1);
      BigInteger bigInteger3 = bigInteger1.or(bigInteger0);
      BigInteger bigInteger4 = bigInteger0.clearBit((byte)1);
      BigInteger bigInteger5 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 0L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      long long0 = 0L;
      long long1 = MathUtils.pow(0L, 0L);
      int int0 = 863;
      double double1 = MathUtils.factorialLog(863);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      double double0 = MathUtils.binomialCoefficientDouble(2410, 2410);
      float float0 = MathUtils.round((float) 2410, 2410);
      BigInteger bigInteger0 = BigInteger.ZERO;
      float float1 = bigInteger0.floatValue();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.and(bigInteger1);
      int int0 = bigInteger0.compareTo(bigInteger1);
      int int1 = bigInteger0.intValue();
      int int2 = bigInteger0.intValue();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      double double1 = MathUtils.binomialCoefficientDouble(2410, 0);
      try { 
        MathUtils.pow(3235L, (-523));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (3,235^-523)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = BigInteger.probablePrime(18, mockRandom0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 1347L);
      long long0 = MathUtils.gcd((long) 18, 1347L);
      double double0 = MathUtils.indicator(2537.804);
      int int0 = MathUtils.gcd(18, (-3970));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-318), (-3970));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -318
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float float0 = MathUtils.indicator(980.09283F);
      int[] intArray0 = new int[8];
      double double0 = MathUtils.EPSILON;
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = bigInteger0.testBit(740);
      try { 
        MathUtils.pow(bigInteger0, (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = MathUtils.pow(3952090531849364496L, 3952090531849364496L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 3952090531849364496L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 3952090531849364496L;
      doubleArray0[4] = (double) 3952090531849364496L;
      doubleArray0[5] = 2.2250738585072014E-308;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 3952090531849364496L;
      doubleArray0[8] = (double) 0L;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      short short0 = MathUtils.sign((short)2095);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, (int) (short)1);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(381, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.remainder(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = MathUtils.pow((-396L), 0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-396L), 0, Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-2462.7464383));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(1235, 1235);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1235, 3.834E-20);
      double double0 = MathUtils.sign(3.834E-20);
      long long0 = MathUtils.mulAndCheck(355687428096000L, (long) 1235);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 439273973698560000L;
      doubleArray0[2] = (double) 355687428096000L;
      doubleArray0[3] = (double) 0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-916.72418426), (-916.72418426), (-916.72418426));
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(9193070505571053912L, 9193070505571053912L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3374.65996;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.subAndCheck(1024, 0);
      double double0 = MathUtils.sign(Double.NEGATIVE_INFINITY);
      boolean boolean1 = MathUtils.equals(534.981233737309, (double) 1024);
      int int1 = MathUtils.sign(1024);
      int int2 = MathUtils.addAndCheck((-525), (-1504));
      double double1 = MathUtils.factorialDouble(0);
      double double2 = MathUtils.factorialLog(0);
      float float0 = MathUtils.round((float) 1024, (-2029));
      long long0 = MathUtils.binomialCoefficient(42, (-1504));
      boolean boolean2 = MathUtils.equals((double) 1, (double) 1L, 1686.8452011);
      int int3 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 42);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 42
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.indicator(Float.NaN);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) Float.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = 11;
      int int1 = 62;
      int int2 = MathUtils.mulAndCheck(11, 62);
      byte byte0 = (byte) (-73);
      byte byte1 = MathUtils.indicator((byte) (-73));
      long long0 = MathUtils.lcm((long) 11, (long) (byte) (-1));
      // Undeclared exception!
      try { 
        MathUtils.factorial((byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.round(116.0F, 468);
      int int0 = MathUtils.subAndCheck(4658, (-1035));
      long long0 = MathUtils.gcd((long) 5693, (long) 468);
      boolean boolean0 = MathUtils.equals((double) 468, 417.34, 879);
      float float1 = MathUtils.sign((float) (-1035));
      float float2 = MathUtils.sign((-404.0F));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.indicator(Float.NaN);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) Float.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = 62;
      int int1 = MathUtils.mulAndCheck(11, 62);
      double double0 = 855.577;
      try { 
        MathUtils.pow(2864, (-859L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,864^-859)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.gcd((-2115), 0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2935890503282001226L, (-349L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      int int0 = 115;
      int int1 = MathUtils.sign(115);
      double double1 = MathUtils.factorialDouble(0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 14);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 14
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = (-1530);
      try { 
        MathUtils.pow((-1530), (long) (-1530));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,530^-1,530)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(3611L, 575L);
      long long1 = MathUtils.indicator((-3294L));
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long2 = MathUtils.gcd(4186L, (-1977L));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2726));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,726
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      short short0 = MathUtils.sign((short)231);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)231;
      doubleArray0[1] = (double) (short)231;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) (short)231;
      doubleArray0[5] = 2187.43;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = MathUtils.indicator(18);
      int int1 = MathUtils.hash((double[]) null);
      double double0 = MathUtils.scalb(0, 0);
      double double1 = MathUtils.round((-2127.0), 61);
      boolean boolean0 = MathUtils.equals(0.0, (-1551.6131937639));
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = MathUtils.scalb((-1.5707963267948966), 0);
      int int0 = MathUtils.compareTo(Double.NEGATIVE_INFINITY, 0.0, 10.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = (-1.5707963267948966);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-1.5707963267948966);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1.5707963267948966);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.scalb((-219.32591), 0);
      int int0 = MathUtils.compareTo((-219.32591), 0.0, (-1.0));
      long long0 = MathUtils.lcm((long) (-1), 74L);
      double double1 = MathUtils.round(0.0, (-1036));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = MathUtils.hash(2.0);
      int int1 = MathUtils.pow(1073741824, (long) 1073741824);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1073741824;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 3.141592653589793;
      doubleArray0[5] = (double) 1073741824;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 1073741824;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(14);
      double double1 = MathUtils.normalizeAngle(0.0, 8.71782912E10);
      int int0 = MathUtils.pow(14, (long) 14);
      double double2 = MathUtils.normalizeAngle(8.71782912E10, -0.0);
      double double3 = MathUtils.log(0.0, 371.8233);
      byte byte0 = MathUtils.indicator((byte)82);
      boolean boolean0 = MathUtils.equals((-1665.1315086044), (-1600.0), 0.16666666666745392);
      int int1 = MathUtils.gcd((int) (byte)1, (int) (byte)82);
      long long0 = MathUtils.pow((long) (byte)82, (int) (byte)82);
      byte byte1 = MathUtils.indicator((byte)51);
      boolean boolean1 = MathUtils.equals((double) 14, (-3871.3863437));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      double double1 = MathUtils.scalb(1.0, 886);
      long long0 = MathUtils.pow((long) 886, 886);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 1134.3283236755017, (-1585.546));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte byte0 = (byte) (-28);
      byte byte1 = MathUtils.indicator((byte) (-28));
      double double0 = MathUtils.round((-579.89384), (int) (byte) (-1));
      int int0 = MathUtils.addAndCheck((int) (byte) (-28), (int) (byte) (-28));
      byte byte2 = MathUtils.indicator((byte) (-28));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-580.0);
      doubleArray1[1] = (double) (byte) (-1);
      doubleArray1[2] = (double) (-56);
      doubleArray1[3] = (double) (byte) (-1);
      doubleArray1[4] = (double) (byte) (-1);
      doubleArray1[5] = (double) (byte) (-1);
      doubleArray1[6] = (double) (-56);
      doubleArray1[7] = (double) (-56);
      doubleArray1[8] = (-579.89384);
      double double1 = MathUtils.distance(doubleArray0, doubleArray1);
      try { 
        MathUtils.pow((long) (byte) (-28), (long) (byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-28^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(13, 13);
      long long0 = MathUtils.gcd((long) 26, (long) 26);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 26L;
      doubleArray0[1] = (double) 13;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((float) 13, 0);
      double double1 = MathUtils.log(675.15, (-1287.747062835));
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.sign(0);
      float float1 = MathUtils.sign((float) 26);
      double double3 = MathUtils.sign((double) 0);
      byte byte0 = MathUtils.indicator((byte) (-17));
      double double4 = MathUtils.round(1.9868161777724352E-8, 0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 291.93165635418;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2633.086;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 6.283185307179586;
      doubleArray0[5] = (-2879.6009);
      doubleArray0[6] = 2.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 2,633.086)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.15;
      MathUtils.checkOrder(doubleArray0);
      int int0 = 0;
      float float0 = MathUtils.round(115.79F, 246, 0);
      double double0 = MathUtils.sinh(0.15);
      float float1 = MathUtils.indicator(Float.NaN);
      short short0 = MathUtils.sign((short)0);
      long long0 = MathUtils.lcm((long) 246, (long) (short)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.15056313315161263, (double) 115.79F);
      double double1 = MathUtils.sinh(0.2222222089767456);
      boolean boolean1 = MathUtils.equals((double) Float.NaN, (double) Float.NaN, (double) Float.NaN);
      double double2 = MathUtils.indicator(0.22405571946856356);
      short short1 = MathUtils.indicator((short)0);
      int int1 = MathUtils.lcm(0, 246);
      try { 
        MathUtils.normalizeArray(doubleArray0, Float.NaN);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long long0 = MathUtils.sign((-9218868437227405313L));
      short short0 = MathUtils.sign((short)0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (short)0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      byte byte0 = MathUtils.sign((byte)0);
      short short0 = MathUtils.indicator((short) (byte)0);
      int int1 = MathUtils.sign((int) (byte)0);
      long long0 = MathUtils.lcm((long) (byte)0, 9223372036854775807L);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = MathUtils.lcm((-2835L), (-2835L));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      int int1 = MathUtils.lcm(0, 0);
      int int2 = MathUtils.indicator(257);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        MathUtils.pow((-2141L), (-2141L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,141^-2,141)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1043.006;
      doubleArray0[2] = (-860.6154);
      doubleArray0[3] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,043.006 >= -860.615)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 6019.293855963, (-84));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 2220;
      double double0 = MathUtils.binomialCoefficientLog(2220, 2220);
      // Undeclared exception!
      try { 
        MathUtils.factorial(2220);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = MathUtils.pow(892, 892);
      // Undeclared exception!
      try { 
        MathUtils.factorial(892);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (double) 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-2135.9954), (-2135.9954), 290);
      byte byte0 = (byte)1;
      byte byte1 = MathUtils.sign((byte)1);
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-824.238766798257);
      doubleArray0[1] = (-3458.0022174341234);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-824.239 >= -3,458.002)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      int int0 = MathUtils.addAndCheck(0, 1039);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 1039, (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 825);
      double double0 = MathUtils.log((-1204.7455168), (-1204.7455168));
      double double1 = MathUtils.round((-757.18164703), 825);
      float float0 = MathUtils.indicator((float) 825);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, Double.NaN, 0.0);
      double double2 = MathUtils.scalb(0.0, 0);
      long long0 = MathUtils.sign(7910884519577875640L);
      int[] intArray0 = new int[2];
      intArray0[0] = 1468;
      intArray0[1] = 825;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double3 = MathUtils.binomialCoefficientDouble(18, (-2454));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-757.18164703);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(825, 1468);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 825, k = 1,468
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(1501L, 1501L);
      long long1 = MathUtils.mulAndCheck((-3159L), (-3159L));
      byte byte0 = MathUtils.sign((byte)16);
      long long2 = MathUtils.gcd(1501L, (-3159L));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = MathUtils.indicator((-269L));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1274, (-1047));
      int int0 = MathUtils.gcd((-1047), (-1398));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1047);
      doubleArray0[1] = (double) (-1047);
      doubleArray0[2] = (double) (-1398);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1398);
      doubleArray0[5] = 3154.533195927574;
      doubleArray0[6] = (double) 1274;
      doubleArray0[7] = 1811.3946793709986;
      doubleArray0[8] = (double) (-1398);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,047 <= -1,047)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.pow((-95L), 0);
      byte byte0 = MathUtils.sign((byte) (-39));
      int int1 = MathUtils.mulAndCheck(240, 0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float float0 = MathUtils.round(3111.383F, (-636));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) Float.NaN;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd((-636), 202);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-1742.537530505331), (double) 2);
      int int1 = MathUtils.subAndCheck(104, 1341);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.subAndCheck((-676L), (-676L));
      int int0 = 116;
      int int1 = MathUtils.mulAndCheck(116, 116);
      int int2 = 10;
      int int3 = 20;
      // Undeclared exception!
      try { 
        MathUtils.round((float) 13456, 10, 20);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 20, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = MathUtils.round(871.278, (-2066));
      float float0 = 4349.851F;
      float float1 = MathUtils.sign(4349.851F);
      boolean boolean0 = MathUtils.equalsIncludingNaN(871.278, (double) 1.0F);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2066), (-2066));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,066
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 2161, 110);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 110, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1259L), (-1259L));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-1259L);
      doubleArray0[2] = (double) 0L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long1 = MathUtils.gcd(0L, (-1259L));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = (-472);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-472), (-472));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -472
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(885);
      double double1 = MathUtils.binomialCoefficientLog(885, 885);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = MathUtils.lcm((-3148), (-3148));
      long long0 = MathUtils.sign((-9223372036854775808L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-3148);
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 48;
      double double0 = MathUtils.factorialDouble(48);
      short short0 = (short)3220;
      short short1 = MathUtils.indicator((short)3220);
      int int1 = 71;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(48, 71);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 48, k = 71
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = MathUtils.compareTo(40.19140625, 40.19140625, (-1.0));
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 9;
      intArray0[3] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.cosh(615.1925481965653);
      long long0 = MathUtils.binomialCoefficient(109, (-2343));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.pow(2, (long) 0);
      float float0 = MathUtils.round(Float.NaN, 109, 2);
      int int2 = MathUtils.pow(2637, 63);
      int int3 = MathUtils.lcm(9, 65);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf(" @)");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection. @)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(2637L, 2637L);
      long long1 = MathUtils.pow(4577762542105553359L, 2210);
      double double0 = MathUtils.indicator((double) 2210);
      byte byte0 = MathUtils.sign((byte) (-71));
      long long2 = MathUtils.pow((long) 2210, 125);
      int int0 = MathUtils.gcd(0, (int) (byte) (-1));
      double double1 = MathUtils.log((-1672.8611), (-1327.7641187203));
      double double2 = MathUtils.scalb((-24.133396617254785), 1661);
      int int1 = MathUtils.mulAndCheck(236, 1661);
      double double3 = MathUtils.sign((-7.65614461893286E-116));
      long long3 = MathUtils.mulAndCheck((long) (byte) (-1), (long) (byte) (-1));
      double double4 = MathUtils.binomialCoefficientDouble(2210, 1661);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double double0 = MathUtils.indicator(1.997844754509471E-9);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 1.0, 0.3333333333333333);
      int int0 = MathUtils.lcm(991, 991);
      int int1 = MathUtils.gcd(991, 991);
      float float0 = MathUtils.round((float) 991, 991);
      int[] intArray0 = new int[8];
      intArray0[0] = 991;
      intArray0[1] = 991;
      intArray0[2] = 991;
      intArray0[3] = 991;
      intArray0[4] = 991;
      intArray0[5] = 991;
      intArray0[6] = 243;
      intArray0[7] = 991;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = MathUtils.log(0.5000000000042687, 0.5000000000042687);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1288.3283868307133), (-2708.213));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-930.002);
      doubleArray0[1] = (-1288.3283868307133);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-2708.213);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-1288.3283868307133);
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 0.5000000000042687;
      doubleArray0[8] = 1.0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.addAndCheck(39916800L, 1808L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(3611.315893570556, 6163.828, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long long0 = MathUtils.indicator(2254L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2254L;
      doubleArray0[1] = (double) 1L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,254 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 1849);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      long long0 = MathUtils.factorial(0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1849;
      doubleArray0[1] = (double) 1849;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 1849;
      doubleArray0[4] = (double) 1849;
      doubleArray0[5] = (double) 1849;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = (double) 0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double double2 = MathUtils.sinh(1849);
      double double3 = MathUtils.normalizeAngle(1849, 1L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = bigInteger1.negate();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger1);
      int int1 = MathUtils.hash(doubleArray0);
      long long1 = MathUtils.pow(2506L, 2506L);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2805.9917962307);
      doubleArray0[1] = 6.283185307179586;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.round(6.283185307179586, (-1261));
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2805.9917962307);
      doubleArray1[2] = (-2805.9917962307);
      doubleArray1[3] = (-2805.9917962307);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-95.77342006), 2588.707353478786, (-2999.15989));
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = (-4738);
      int int1 = (-2691);
      int int2 = MathUtils.addAndCheck((-4738), (-2691));
      double double1 = 111.0082394;
      boolean boolean1 = MathUtils.equalsIncludingNaN(111.0082394, (-2999.15989));
      float float0 = MathUtils.sign(654.6F);
      try { 
        MathUtils.pow((long) (-2691), (-7429));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,691^-7,429)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
