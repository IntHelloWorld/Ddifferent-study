/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:08:01 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 6.283185307179586;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      int[] intArray0 = new int[7];
      intArray0[6] = 579;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, 6.283185307179586);
      long long0 = MathUtils.mulAndCheck((-1009L), 634L);
      int int1 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.indicator(0.0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 579);
      double double1 = MathUtils.log(0, 1154.2835);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(1508);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 1936.3231853071795);
      try { 
        MathUtils.pow((BigInteger) null, (-1589L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-1,589)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      short short0 = MathUtils.sign((short)2067);
      long long0 = MathUtils.pow(479001600L, (long) (short)1);
      double double0 = MathUtils.log(1142.9236554, 2323.0);
      long long1 = MathUtils.binomialCoefficient((short)2067, (short)2067);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2323.0;
      doubleArray0[1] = (double) (short)2067;
      doubleArray0[2] = (double) (short)2067;
      doubleArray0[3] = (double) (short)1;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2323.0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 1142.9236554;
      doubleArray2[1] = 1.1007293177140707;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray2);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-75));
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      float float0 = MathUtils.indicator((-3040.0F));
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[9];
      long long0 = MathUtils.sign((-998L));
      intArray0[2] = 1804;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long1 = MathUtils.sign((long) 0);
      double double1 = MathUtils.factorialDouble(52);
      double double2 = MathUtils.cosh(0);
      double[] doubleArray0 = new double[0];
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      short short0 = MathUtils.sign((short)95);
      float float0 = MathUtils.round((float) 5040L, 0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 1650593459;
      int int1 = 477;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(1650593459, 477);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double double0 = MathUtils.log((-1246.0), 0.9999997615814209);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.round(0.0F, 0);
      int int0 = MathUtils.indicator(31);
      boolean boolean0 = MathUtils.equals(0.0, Double.NaN, 1232.52432);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.9999997615814209;
      doubleArray0[6] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1598.0), 0.0, 0.0);
      short short0 = MathUtils.sign((short)792);
      float float1 = MathUtils.round(1896.0F, 0, 1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      int int1 = MathUtils.hash((double) 0);
      byte byte0 = MathUtils.indicator((byte)19);
      double double0 = MathUtils.factorialLog(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.003, 346.8, 0.003);
      int[] intArray0 = new int[0];
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = MathUtils.subAndCheck((-2089L), (long) 0);
      double double2 = MathUtils.scalb((-3521.84638123), 0);
      boolean boolean1 = MathUtils.equals(0.0, 891.09);
      double double3 = MathUtils.distance(intArray0, intArray0);
      double double4 = MathUtils.distance(intArray0, intArray0);
      double double5 = MathUtils.distance(intArray0, intArray0);
      int int3 = MathUtils.hash(891.09);
      long long1 = MathUtils.pow((-2089L), (long) 0);
      byte byte1 = MathUtils.indicator((byte)1);
      double double6 = MathUtils.log(0, 0);
      long long2 = MathUtils.sign(0L);
      long long3 = MathUtils.lcm(0L, (long) 0);
      double double7 = MathUtils.binomialCoefficientLog(3139, (byte)1);
      byte byte2 = MathUtils.sign((byte)40);
      float float0 = MathUtils.round((float) 0, 0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte byte0 = (byte) (-25);
      byte byte1 = MathUtils.sign((byte) (-25));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger1 = bigInteger0.negate();
      boolean boolean0 = bigInteger0.equals("");
      BigInteger bigInteger2 = bigInteger0.not();
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-6,145^-6,145)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-363.9), (-363.9));
      int int0 = MathUtils.sign(0);
      double double1 = MathUtils.log((-7.44321345601866E-11), (-2235.6066));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-7.44321345601866E-11);
      doubleArray0[4] = (-363.9);
      doubleArray0[5] = 0.0;
      double double2 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.addAndCheck((-757L), (long) 0);
      int int1 = MathUtils.mulAndCheck((-2408), (-2732));
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte)0);
      double double4 = MathUtils.cosh(0);
      long long1 = MathUtils.indicator((long) 6578656);
      int int2 = MathUtils.mulAndCheck((int) (byte)1, 0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-2235.6066), (double) 0, (-1278));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = MathUtils.compareTo((-545.595046742176), (-545.595046742176), (-545.595046742176));
      double double0 = MathUtils.sinh((-4.503599627370496E15));
      double double1 = MathUtils.cosh(0.0);
      boolean boolean0 = MathUtils.equals(3060.4, 1.2393345855018391E-8, 3060.4);
      double double2 = MathUtils.cosh(0.0);
      long long0 = MathUtils.mulAndCheck(2947L, 2947L);
      boolean boolean1 = MathUtils.equals((-1302.0), 0.0);
      double double3 = MathUtils.cosh((-545.595046742176));
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 29;
      intArray0[6] = 0;
      intArray0[7] = (-1344);
      intArray0[8] = 0;
      double double4 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4.445167784382898E236;
      doubleArray0[1] = (-545.595046742176);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1344);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = MathUtils.log((-687.3568111041162), 0.0);
      double double1 = MathUtils.indicator((-687.3568111041162));
      double double2 = MathUtils.factorialDouble(2032);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-2977L), (-2977L));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 8862529L;
      doubleArray0[1] = (double) 8862529L;
      doubleArray0[2] = (double) 8862529L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3.141592653589793;
      doubleArray0[5] = 331.7171437;
      doubleArray0[6] = (double) (-2977L);
      doubleArray0[7] = (double) 8862529L;
      doubleArray0[8] = (double) (-2977L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      try { 
        MathUtils.pow((-1636L), (-299L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,636^-299)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = MathUtils.cosh(2.2250738585072014E-308);
      long long0 = MathUtils.pow(582L, 4503599627370496L);
      double double1 = MathUtils.binomialCoefficientLog(106, 0);
      int int0 = MathUtils.hash((double) 0);
      boolean boolean0 = MathUtils.equals(2.2250738585072014E-308, 0.0, 106);
      float float0 = MathUtils.sign((float) 0);
      long long1 = MathUtils.gcd(780L, 45L);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.subAndCheck((long) 0, 121645100408832000L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(0, (long) 0);
      double double0 = 1287.32793;
      int int2 = 137;
      double double1 = MathUtils.round(1287.32793, 137, 1);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = MathUtils.indicator(3395);
      float float0 = MathUtils.sign((float) 1);
      long long0 = MathUtils.gcd(1691L, 1691L);
      boolean boolean0 = MathUtils.equals((-940.07), 1148.28975656345, (-316.94721146873));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 160;
      int int1 = MathUtils.pow(160, 160);
      double double0 = MathUtils.normalizeAngle(160, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("7td!s\"rx7%+~[q");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.7td!s\"rx7%+~[q
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-0.49999999999999994);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.2250738585072014E-308;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1091.95647311;
      doubleArray0[7] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-565L), (-565L));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-565L);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-565L);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-565L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = (-309);
      int int1 = 0;
      int int2 = MathUtils.gcd((-309), 0);
      long long1 = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-9223372036854775808L), (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow: gcd(-9,223,372,036,854,775,808, -9,223,372,036,854,775,808) is 2^63
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.1428571343421936;
      doubleArray0[3] = (-2110.44713);
      doubleArray0[4] = 2625.13467715;
      doubleArray0[5] = 0.7853981633974483;
      doubleArray0[6] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.sign(0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int1 = bigInteger0.bitCount();
      try { 
        MathUtils.pow(bigInteger0, (-2470));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-2,470)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-1587));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (16,044,810,859,118,592^-1,587)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      long long0 = MathUtils.lcm(1135L, 1135L);
      int int0 = MathUtils.hash(5053.539584);
      long long1 = MathUtils.pow(1135L, 1654582520);
      int int1 = MathUtils.gcd(1654582520, 1654582520);
      double double0 = MathUtils.binomialCoefficientDouble(1654582520, 1654582520);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 1654582520;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 1135L;
      doubleArray0[7] = (double) 1654582520;
      doubleArray0[8] = 5053.539584;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 195;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1085);
      intArray0[3] = 228;
      int int1 = 1563;
      intArray0[4] = 1563;
      intArray0[5] = 2845;
      intArray0[6] = 6;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 195);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-612L), 1370L);
      int int0 = MathUtils.mulAndCheck(18, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 18;
      doubleArray0[5] = (double) 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(0.0, 0.0, 2860);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 18;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 18;
      intArray0[6] = 18;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 12;
      int int1 = MathUtils.sign(12);
      int int2 = MathUtils.pow(12, 1);
      double double0 = MathUtils.cosh(563.2337448751);
      long long0 = MathUtils.pow((long) 12, 0);
      short short0 = MathUtils.sign((short)0);
      long long1 = MathUtils.mulAndCheck(1L, 2951L);
      int int3 = MathUtils.pow(12, 1);
      float float0 = MathUtils.round((float) (short)0, (-1081));
      byte byte0 = MathUtils.indicator((byte) (-82));
      float float1 = MathUtils.sign((-1.0F));
      int int4 = MathUtils.subAndCheck(2528, (int) (byte) (-82));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = 0.1428571343421936;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1081));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,081
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      long long0 = MathUtils.pow(3533L, 0);
      double double0 = MathUtils.round((-3318.846), 0, 0);
      double double1 = MathUtils.cosh(3533L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 2197.7322526056);
      double double2 = MathUtils.binomialCoefficientDouble(114, (-7280));
      long long1 = MathUtils.binomialCoefficient(0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.hash((-694.7254));
      BigInteger bigInteger0 = BigInteger.ONE;
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      int int2 = MathUtils.sign(16);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)107);
      double double0 = MathUtils.round((double) (byte)1, 0);
      int int0 = MathUtils.lcm(0, 0);
      long long0 = MathUtils.mulAndCheck((long) 0, 4650L);
      int int1 = MathUtils.indicator((-879));
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte)107;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = (-1);
      intArray0[8] = 0;
      int int2 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = (-638.284204);
      double double1 = MathUtils.log((-638.284204), (-638.284204));
      int int0 = 1010;
      long long0 = (-4267615245585081135L);
      try { 
        MathUtils.pow(1010, (-4267615245585081135L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,010^-4,267,615,245,585,081,135)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = MathUtils.gcd((-1168L), (-1168L));
      double double0 = 0.5;
      int int0 = MathUtils.compareTo((-1168L), 1168L, 0.5);
      float float0 = 1.0F;
      float float1 = MathUtils.indicator(1.0F);
      int int1 = 0;
      int int2 = MathUtils.gcd(0, (-2564));
      int int3 = (-507);
      try { 
        MathUtils.pow((-507), (-1168L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-507^-1,168)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(11, 0);
      double double1 = MathUtils.cosh(0.0);
      int int1 = MathUtils.pow((-1181), (long) 0);
      int int2 = MathUtils.hash(2176.1276276);
      int int3 = 0;
      double double2 = MathUtils.scalb(11, 0);
      int int4 = MathUtils.pow(415670371, 4499201580859392L);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      double double3 = bigInteger0.doubleValue();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) 11);
      int int5 = MathUtils.pow(1, 3127L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 1664);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1,664
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      int[] intArray0 = new int[5];
      intArray0[0] = (-997);
      intArray0[1] = (-6640);
      intArray0[2] = 3;
      intArray0[3] = 0;
      intArray0[4] = 1963;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      int int0 = 0;
      float float0 = MathUtils.round((-3331.4F), 0);
      float float1 = MathUtils.indicator((-168.964F));
      int int1 = 0;
      double double1 = MathUtils.scalb(0.3333333134651184, 0);
      // Undeclared exception!
      try { 
        MathUtils.equals(1.570796251296997, (double) (-3331.0F), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      short short0 = MathUtils.sign((short)31);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.subAndCheck((long) (short)31, (-1656L));
      int int1 = MathUtils.lcm(0, 0);
      double double0 = MathUtils.round((double) 0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1659.650713997006), (double) 0, 18);
      long long1 = MathUtils.subAndCheck((long) (short)31, (long) 18);
      long long2 = MathUtils.indicator((long) 0);
      int int2 = MathUtils.gcd(1726, 135);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 18, 1.1102230246251565E-16, 681);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)115;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 13L);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2799.888902261511);
      double double0 = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      MathUtils.checkOrder(doubleArray1);
      double double1 = 1701.78111483;
      double double2 = MathUtils.scalb(1701.78111483, 2499);
      long long0 = MathUtils.addAndCheck((long) 2499, 0L);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-4035746434778044925L), 2499L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float float0 = MathUtils.indicator((-193.0F));
      int int0 = 1904;
      double double0 = MathUtils.factorialLog(1904);
      double[] doubleArray0 = null;
      int int1 = MathUtils.hash((double[]) null);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 123;
      intArray0[1] = 1585;
      intArray0[2] = 67;
      intArray0[3] = 91;
      intArray0[4] = 15;
      intArray0[5] = 13;
      intArray0[6] = (-735);
      intArray0[7] = 1090;
      intArray0[8] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.round((float) 91, 123);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 15;
      doubleArray0[1] = 1.1730463525082348E-7;
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (double) 1090;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      float float1 = MathUtils.sign((float) 0);
      int int0 = MathUtils.compareTo(0.0, (-4933.664486445467), 0.1111111111111111);
      int int1 = MathUtils.pow(123, (long) 13);
      double double2 = MathUtils.binomialCoefficientDouble(2, (-735));
      long long0 = MathUtils.lcm((long) 15, 0L);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1619.46726872531, (-2046.483577), Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        MathUtils.equals((-2046.483577), (-2046.483577), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, (-626));
      int[] intArray0 = new int[9];
      intArray0[0] = (-626);
      intArray0[1] = 0;
      intArray0[2] = (-626);
      intArray0[3] = (-3040);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-626);
      intArray0[7] = 0;
      intArray0[8] = (-626);
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.binomialCoefficientDouble(1, (-626));
      int int0 = MathUtils.subAndCheck((-3040), 0);
      long long0 = MathUtils.mulAndCheck(967L, (long) 0);
      int int1 = MathUtils.subAndCheck(46, 476);
      long long1 = MathUtils.sign((-2400L));
      short short0 = MathUtils.sign((short) (-4488));
      long long2 = MathUtils.subAndCheck((long) 46, (-7278142539171889152L));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.gcd((-3522), 0);
      int int2 = (-1773);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-895.4984541586368), (double) 0, (-1773));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-772.66535341);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-772.66535341);
      doubleArray1[1] = (-772.66535341);
      doubleArray1[2] = (-772.66535341);
      doubleArray1[3] = (-772.66535341);
      doubleArray1[4] = (-772.66535341);
      doubleArray1[5] = (-772.66535341);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      long long0 = MathUtils.pow(0L, 0L);
      int int0 = (-553);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-553), (-553));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -553
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, (-0.1428571423679182), (-0.1428571423679182));
      long long0 = MathUtils.sign((long) 0);
      int int0 = MathUtils.sign(0);
      float float0 = MathUtils.sign((float) 0L);
      long long1 = MathUtils.mulAndCheck(0L, (long) 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      double double1 = MathUtils.sign((double) 0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.sign(0L);
      double double1 = MathUtils.sinh(0.0);
      byte byte0 = (byte)109;
      byte byte1 = MathUtils.indicator((byte)109);
      byte byte2 = MathUtils.indicator((byte)109);
      int int0 = MathUtils.indicator((int) (byte)1);
      double double2 = MathUtils.sinh((byte)1);
      double double3 = MathUtils.log(1371.74, 0.0);
      long long1 = MathUtils.sign(0L);
      double double4 = MathUtils.safeNorm(doubleArray0);
      long long2 = MathUtils.sign(0L);
      double double5 = MathUtils.log((byte)1, 1.1752011936438014);
      long long3 = MathUtils.mulAndCheck(1L, (-229L));
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = (double) (-229L);
      doubleArray1[3] = 1386.71;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1.1752011936438014;
      doubleArray1[6] = (double) 1;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(1385);
      double double1 = MathUtils.round(Double.POSITIVE_INFINITY, (-2773));
      long long0 = MathUtils.sign(0L);
      int int0 = MathUtils.pow(0, (long) 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2773);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      long long1 = MathUtils.subAndCheck((long) (-2773), (long) 1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2316);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-2393));
      int int0 = MathUtils.pow((int) (short) (-2393), 95);
      double double0 = MathUtils.scalb((-1179.130696), (short) (-1));
      long long0 = MathUtils.addAndCheck((long) (short) (-2393), (long) (short) (-2393));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-41896937);
      doubleArray0[1] = (double) (-4786L);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (-1179.130696);
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = (double) (short) (-1);
      doubleArray0[7] = (double) (-41896937);
      doubleArray0[8] = (double) (short) (-2393);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathUtils.round(0.0, (-1968), 0);
      byte byte0 = MathUtils.sign((byte)0);
      long long0 = MathUtils.subAndCheck((long) (byte)0, (-4571L));
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-1968);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (-1968);
      intArray0[4] = (-1667);
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-214.6273815), (double) 4571L, 0.0);
      long long1 = MathUtils.lcm(1903L, (-4571L));
      int int1 = MathUtils.pow((-786), 0L);
      int int2 = MathUtils.hash((double) 0);
      float float0 = MathUtils.round((-761.23F), 0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(805);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 805, (-912.43742124));
      float float0 = MathUtils.indicator((-425.1F));
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(11, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 805);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 805
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        MathUtils.pow((-9223372036854775808L), (-9223372036854775808L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-9,223,372,036,854,775,808^-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, (-2493.00059797));
      int[] intArray0 = new int[7];
      intArray0[0] = 5;
      intArray0[1] = 0;
      intArray0[2] = 35;
      intArray0[3] = 1553;
      intArray0[4] = (-1958);
      intArray0[5] = (-681);
      intArray0[6] = 172;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.indicator(0.0);
      boolean boolean1 = MathUtils.equals((-2025.3219360640646), (-1931.3), 2246.5496698635507);
      short short0 = MathUtils.sign((short)3314);
      double double2 = MathUtils.sinh(0.0);
      float float0 = MathUtils.sign((float) (-681));
      boolean boolean2 = MathUtils.equalsIncludingNaN(0.0, 294.182, 1.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(239, (short)3314);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 239, k = 3,314
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialLog(0);
      int int1 = MathUtils.compareTo(0.5, 1809.1071834030909, 0.5);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 1809.1071834030909;
      doubleArray0[3] = 1809.1071834030909;
      doubleArray0[4] = 0.5;
      int int2 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.scalb((-5131.48875285519), (-801281921));
      int int3 = MathUtils.mulAndCheck((-801281921), (-1));
      // Undeclared exception!
      try { 
        MathUtils.round(1973.38, 801281921);
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.sign(0L);
      int int0 = MathUtils.compareTo((-3908.072), 0.0, (-1707.2854003122));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long2 = MathUtils.mulAndCheck(0L, 0L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-1 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = bigInteger0.flipBit(0);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.normalizeAngle(0.0, 0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.round(249.6996875750684, 0, 0);
      long long0 = MathUtils.lcm((long) 0, (-1L));
      double double1 = MathUtils.factorialLog(0);
      int int1 = MathUtils.pow(0, 0);
      int int2 = 1900;
      int int3 = MathUtils.addAndCheck(0, 1900);
      int int4 = 0;
      try { 
        MathUtils.pow(0, (-2282));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,282)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 989.321);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 4;
      try { 
        MathUtils.pow(4, (-2984));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4^-2,984)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1784.001, 1.5707963267948966);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1784.001;
      int int2 = MathUtils.hash(doubleArray0);
      byte byte0 = MathUtils.indicator((byte)2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float float0 = MathUtils.sign(1.0F);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = 531.3;
      doubleArray0[6] = (double) 1.0F;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.cosh(1.0);
      int int0 = MathUtils.mulAndCheck((-964), 0);
      double double2 = MathUtils.scalb(531.305646497381, 4795);
      int int1 = MathUtils.lcm((-964), 0);
      long long0 = MathUtils.indicator(4727L);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      double double4 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int2 = MathUtils.hash(1.0);
      long long1 = MathUtils.indicator((long) 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1195), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,195, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = MathUtils.sinh(10.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 11013.232874703393;
      doubleArray0[1] = 1728.5714;
      doubleArray0[2] = 11013.232874703393;
      doubleArray0[3] = 10.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (11,013.233 >= 1,728.571)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = (-464);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-464), (-464));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -464
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      int int1 = MathUtils.pow(0, 0);
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      int int2 = 388;
      // Undeclared exception!
      try { 
        MathUtils.round((-401.7978411998807), 1, 388);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float float0 = MathUtils.sign((-1.0F));
      int int0 = MathUtils.hash((double) (-1.0F));
      double double0 = MathUtils.factorialLog(77);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-1844), (-724));
      long long0 = 1283L;
      long long1 = MathUtils.addAndCheck((long) (-724), 1283L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 559L;
      doubleArray0[1] = (double) (-1844);
      doubleArray0[2] = (double) 559L;
      doubleArray0[3] = (double) 559L;
      int int1 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("statistics constructed from external moments cannot be cleared");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.statistics constructed from external moments cannot be cleared
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(5L, 5L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 5L;
      doubleArray0[1] = (double) 5L;
      doubleArray0[2] = (double) 5L;
      doubleArray0[3] = (double) 10L;
      doubleArray0[4] = (double) 5L;
      doubleArray0[5] = (double) 10L;
      doubleArray0[6] = (double) 10L;
      doubleArray0[7] = (double) 10L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-874);
      intArray0[1] = (-1375);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.sign(0.0);
      boolean boolean0 = MathUtils.equals((double) (-874), (double) (-874), (double) (-874));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1375);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1375);
      doubleArray0[3] = 0.0;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = (-3558);
      double double0 = MathUtils.scalb(0.0, (-3558));
      double double1 = Double.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, Double.NEGATIVE_INFINITY, (-3558));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.round(0.0, 1274);
      float float0 = MathUtils.indicator(0.0F);
      byte byte0 = MathUtils.indicator((byte)72);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (int) (byte)1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = MathUtils.indicator(122);
      long long0 = MathUtils.gcd(0L, (long) 122);
      double double0 = MathUtils.scalb((-656.48080148403), (-594));
      double double1 = MathUtils.scalb((-1711.981473987762), 122);
      byte byte0 = MathUtils.indicator((byte)21);
      byte byte1 = MathUtils.sign((byte)1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 1983L);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger3);
      boolean boolean0 = MathUtils.equals((-388.34), 0.0, 122);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, (-2863));
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (-2863), (double) (-2863), (-1673));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      double double0 = MathUtils.log(0, 0);
      boolean boolean0 = MathUtils.equals(Double.NaN, (double) 1L, Double.NaN);
      short short0 = MathUtils.indicator((short) (-1538));
      int int0 = (-2878);
      int int1 = MathUtils.mulAndCheck(0, (-2878));
      long long1 = MathUtils.binomialCoefficient(3, 0);
      boolean boolean1 = MathUtils.equals((-6.032174644509064E-23), (double) 3);
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((short) (-1), mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      float float0 = MathUtils.round(2408.2668F, 0);
      short short0 = MathUtils.indicator((short) (-1886));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)1419);
      int int0 = MathUtils.indicator(0);
      long long0 = MathUtils.gcd((-3994L), 0L);
      float float0 = MathUtils.indicator((float) 0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = (-601);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-601));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -601
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-3734), (-2065));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = (-1508);
      try { 
        MathUtils.pow((-1672L), (-1508));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,672^-1,508)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      int int0 = (-134);
      try { 
        MathUtils.pow(4154L, (-134));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4,154^-134)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.375);
      int int0 = MathUtils.gcd(0, 1565);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) 1565);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1565;
      doubleArray0[1] = (double) 1565;
      doubleArray0[2] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(6.283185307179586, (-1930.04), 1141.6636582211233);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1930.04);
      doubleArray0[1] = (-1930.04);
      doubleArray0[2] = 1141.6636582211233;
      int int0 = MathUtils.hash(doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.sign((-1650593459));
      int int2 = MathUtils.lcm((-1), (-1650593459));
      double double0 = MathUtils.log((-1930.04), (-242.5791));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 364.71;
      doubleArray0[1] = 3531.6342111434724;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 608, 608);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 3233.0);
      short short0 = MathUtils.sign((short)0);
      int int0 = MathUtils.gcd((-1819), 334);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.indicator((-3472.8357771511846));
      double double1 = MathUtils.normalizeAngle(2593.604790446421, 2593.604790446421);
      int int0 = 2877;
      int int1 = MathUtils.gcd(2877, 38);
      long long0 = MathUtils.subAndCheck((long) 38, (long) 2877);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(38, 2877);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 38, k = 2,877
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = 2115L;
      long long1 = MathUtils.indicator(2115L);
      int int0 = 6428;
      // Undeclared exception!
      try { 
        MathUtils.factorial(6428);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.1102230246251565E-16;
      doubleArray0[3] = (-154.988);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 802.0);
      short short0 = MathUtils.indicator((short)2665);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.1102230246251565E-16;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray2);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (short)1, (int) (short)2665, (-754));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -754, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float float0 = MathUtils.round(132.93F, 0, 0);
      int int0 = MathUtils.sign((-2054));
      int[] intArray0 = new int[3];
      intArray0[0] = (-2054);
      intArray0[1] = 0;
      intArray0[2] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.2250738585072014E-308;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double1 = MathUtils.distance1(doubleArray1, doubleArray0);
      int int1 = MathUtils.compareTo(0.0, (-2054), 2.2250738585072014E-308);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      int int1 = MathUtils.addAndCheck((-1), 16);
      double double0 = MathUtils.round((-3070.28272549735), 0);
      double double1 = MathUtils.binomialCoefficientDouble(2747, 15);
      double double2 = MathUtils.round(2.2250738585072014E-308, 0);
      boolean boolean0 = MathUtils.equals((double) 15, 0.0);
      double double3 = MathUtils.normalizeAngle((-262.7251055976845), 0.0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float float0 = MathUtils.indicator((-2665.7F));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (-76.522);
      doubleArray0[2] = (-192.2849586888);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow(780, (long) 780);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      short short0 = MathUtils.sign((short)0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-20);
      byteArray0[8] = (byte)126;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = MathUtils.pow(279L, 1348L);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1902.934571462;
      doubleArray0[2] = (-990.3119855744379);
      doubleArray0[3] = (-1028.0);
      doubleArray0[4] = 11.0;
      doubleArray0[5] = 0.5;
      doubleArray0[6] = 3133.91089679333;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1228.14046;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.sign((-993));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-993);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      float float0 = MathUtils.round((-2544.94F), 0, 0);
      double double0 = MathUtils.sign((double) (-2545.0F));
      short short0 = MathUtils.sign((short)2304);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte) (-8));
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = 0.0;
      double double2 = MathUtils.distance(doubleArray0, doubleArray1);
      int int0 = MathUtils.addAndCheck(118, 1663);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)31);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (-4654);
      intArray0[3] = (int) (byte)31;
      intArray0[4] = (int) (byte)31;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = (int) (byte)1;
      intArray0[7] = (int) (byte)1;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = MathUtils.log((-2063.108319482), (-2063.108319482));
      int int0 = MathUtils.compareTo(0.0, (-2063.108319482), 2259.633);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-2063.108319482);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.round(1024.0, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.01, 2259.633, 293.0);
      long long0 = MathUtils.pow((-2781L), (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0, 0, 2389);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,389, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(1L, 1L);
      int int0 = MathUtils.indicator(0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = MathUtils.lcm(1188L, 290L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 237);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 290L, 0.0, 2528);
      float float0 = MathUtils.indicator((float) 290L);
      long long1 = MathUtils.pow(0L, 816L);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = MathUtils.pow(297, 1098L);
      int int1 = MathUtils.sign(13);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = MathUtils.sign(1140L);
      long long1 = MathUtils.pow(1140L, 117);
      float float0 = MathUtils.round(1.0F, 117, 0);
      long long2 = MathUtils.subAndCheck((long) 0, (-1253L));
      double double0 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.479773539153719E-5;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2.479773539153719E-5;
      doubleArray1[1] = 2.479773539153719E-5;
      doubleArray1[2] = 2.479773539153719E-5;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.sinh((byte)0);
      int int0 = MathUtils.lcm(5675, (int) (byte)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 3.834E-20, (double) 5675);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long long0 = MathUtils.pow((-4L), 16);
      double double0 = MathUtils.scalb((-1421.867), (-224));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long1 = MathUtils.lcm((-748L), 221L);
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = MathUtils.gcd((-3852L), 4124L);
      int int0 = MathUtils.lcm(0, 0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = MathUtils.gcd((-2197L), (-4035746434778044925L));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3050.49);
      doubleArray0[1] = (-2001.1786023577658);
      doubleArray0[2] = 2486.058488;
      doubleArray0[3] = 755.96;
      doubleArray0[4] = 12.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-3,050.49 < -2,001.179)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.cosh(0.0);
      int int0 = 15;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 61, 15);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 15, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      int int1 = MathUtils.subAndCheck(75, 626);
      int int2 = (-591);
      double double0 = MathUtils.binomialCoefficientLog(626, (-591));
      double double1 = 1.0;
      double double2 = MathUtils.normalizeAngle(1.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-551), 957);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -551, k = 957
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.indicator((-3512299194304650054L));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3512299194304650054L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-3512299194304650054L);
      doubleArray0[5] = (double) (-3512299194304650054L);
      doubleArray0[6] = (double) (-3512299194304650054L);
      doubleArray0[7] = (double) (-3512299194304650054L);
      doubleArray0[8] = (double) (-1L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2314.149));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = 52.7199257;
      double double1 = MathUtils.round(52.7199257, 3630);
      int int0 = 187;
      double double2 = MathUtils.round((double) 3630, 187);
      int int1 = 1633;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(3630, 1633);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      long long0 = MathUtils.addAndCheck(0L, 0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = (double) Float.NaN;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.pow((-562673456), 0L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1.0));
      int int2 = MathUtils.gcd(0, 0);
      boolean boolean0 = MathUtils.equals((double) 0, 0.0, 0.0);
      int int3 = MathUtils.hash(doubleArray1);
      int int4 = MathUtils.pow(0, 537L);
      double double0 = MathUtils.sinh(0.0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float float0 = MathUtils.round(Float.NaN, 0);
      short short0 = MathUtils.indicator((short)69);
      int int0 = MathUtils.indicator(0);
      double double0 = MathUtils.factorialDouble((short)1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (short)69;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.scalb(0.0, 75);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(114, 114);
      int int1 = MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = MathUtils.sign((-2147483648L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-2147483648L), 62.0);
      int int0 = MathUtils.gcd(0, 0);
      double double0 = MathUtils.log(0.0, (-1L));
      boolean boolean1 = MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, (-0.12502530217170715));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      short short0 = (short)1921;
      short short1 = MathUtils.sign((short)1921);
      int int0 = MathUtils.indicator((int) (short)1);
      double double0 = MathUtils.indicator(0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1921;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) (short)1921, 6402373705728000L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = (-1212);
      int int1 = MathUtils.gcd(2494, (-1212));
      double double0 = MathUtils.sinh((-1212));
      long long0 = MathUtils.binomialCoefficient(2494, 2);
      int int2 = MathUtils.gcd(4529, 174);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int3 = 954;
      double double1 = MathUtils.binomialCoefficientLog(954, 66);
      long long1 = MathUtils.indicator((long) 66);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("s0ol^~Tb`]4@S]$");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.s0ol^~Tb`]4@S]$
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 1024.0);
      short short0 = MathUtils.sign((short)0);
      long long0 = MathUtils.binomialCoefficient((short)0, (-1417));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      try { 
        MathUtils.pow((long) (short)0, (-44L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-44)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1129, 1129);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      short short0 = MathUtils.sign((short)5010);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-4967), (short)1);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -4,967, k = 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1094.3809414507198), 0.0);
      int int0 = MathUtils.compareTo(5.0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2.356194490192345);
      doubleArray0[1] = (-1564.560461479);
      doubleArray0[2] = 815.575336;
      doubleArray0[3] = (-45.10963999611);
      doubleArray0[4] = 0.3333333134651184;
      doubleArray0[5] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck(0L, 0L);
      long long1 = MathUtils.pow(0L, 6L);
      double double1 = MathUtils.log((-461.057440617), (-461.057440617));
      int int0 = MathUtils.subAndCheck(0, 0);
      double double2 = MathUtils.sign(0.1818181574344635);
      int int1 = MathUtils.compareTo(Double.NaN, (-109.70449098969611), 143.8646496057);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = MathUtils.lcm(67, 67);
      double double0 = MathUtils.sinh(67);
      BigInteger bigInteger0 = BigInteger.valueOf(67);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.andNot(bigInteger0);
      int int1 = bigInteger1.intValueExact();
      BigInteger bigInteger3 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0L);
      double double1 = MathUtils.log(0.0, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(1896);
      float float0 = MathUtils.sign((float) 1896);
      int int0 = MathUtils.lcm(1896, 248);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1896;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 248;
      doubleArray0[4] = (double) 248;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = (double) 248;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (\u221E >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      short short0 = (short)16;
      short short1 = MathUtils.indicator((short)16);
      double double0 = MathUtils.indicator((double) (short)16);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2089.0), 4367.109759205137, 1.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4367.109759205137;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (-2089.0);
      doubleArray0[3] = 4367.109759205137;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = (-3755);
      int int1 = MathUtils.pow((-3755), 2432902008176640000L);
      long long0 = MathUtils.sign((long) (-3755));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-3755));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,755
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = MathUtils.factorialLog(3220);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-139));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -139
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = MathUtils.sign((-978L));
      float float0 = MathUtils.round((float) (-978L), 2336);
      byte byte0 = MathUtils.indicator((byte)62);
      int int0 = MathUtils.gcd(32, 15);
      int int1 = MathUtils.indicator(1);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double double2 = MathUtils.factorialDouble(1);
      float float1 = MathUtils.indicator((float) 1);
      int int2 = 52;
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1.0F, 32, 52);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.sign((short)0);
      int int0 = MathUtils.compareTo((-1537.0172), 2841.4845, (short)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 0L);
      int int1 = MathUtils.pow((-1), (int) (short)0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = 4426.0811518759;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 2841.4845;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = Double.POSITIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, (-1537.0172));
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 8
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(1404, 1404);
      double double0 = MathUtils.normalizeAngle(1404, (-998L));
      int[] intArray0 = new int[9];
      intArray0[0] = 1404;
      intArray0[1] = 1404;
      intArray0[2] = 1804;
      intArray0[3] = 1404;
      intArray0[4] = 2808;
      intArray0[5] = 2808;
      intArray0[6] = 2808;
      intArray0[7] = 2808;
      intArray0[8] = 1404;
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.sign((long) 2808);
      double double2 = MathUtils.factorialDouble(52);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2808, 252);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 2910.3285;
      doubleArray0[3] = 1728.399;
      doubleArray0[4] = 6.283185307179586;
      doubleArray0[5] = 1656.712778147;
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.lcm(1690, 0);
      MockRandom mockRandom0 = new MockRandom((-114L));
      BigInteger bigInteger0 = BigInteger.probablePrime(1690, mockRandom0);
      // Undeclared exception!
      try { 
        MathUtils.pow(bigInteger0, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = (-2128);
      long long0 = 562L;
      int int1 = MathUtils.pow((-2128), 562L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 562L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 3763.3306846);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3763.3306846;
      doubleArray0[1] = 3763.3306846;
      doubleArray0[2] = 3763.3306846;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3763.3306846;
      doubleArray0[6] = 3763.3306846;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(975.907, 3763.3306846, 0.0);
      int int0 = MathUtils.mulAndCheck(0, 0);
      long long0 = MathUtils.indicator(20922789888000L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(3763.3306846, 438.999657547, Double.POSITIVE_INFINITY);
      int int1 = MathUtils.addAndCheck(0, 66);
      float float0 = MathUtils.indicator((float) 0);
      long long1 = MathUtils.pow((long) 0, (long) 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean3 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      short short0 = MathUtils.indicator((short)0);
      boolean boolean4 = MathUtils.equalsIncludingNaN(0.0, (double) (short)1, 66);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 63;
      int int1 = MathUtils.addAndCheck(63, 2987);
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = MathUtils.pow((-9223372036854775808L), 1258L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-9223372036854775808L);
      doubleArray0[2] = (double) 1258L;
      doubleArray0[3] = (double) 1258L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = 0;
      double double0 = MathUtils.round((-873.651), 0, 0);
      int int1 = MathUtils.subAndCheck(0, 2041);
      float float0 = MathUtils.sign((float) 0L);
      byte byte0 = MathUtils.indicator((byte) (-94));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -9,223,372,036,854,776,000)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.indicator(989);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-2012.7448), 0.0, 10.0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 10.0;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 1;
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.scalb(0.0, 29);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) 0L, (-2012.7448));
      long long1 = MathUtils.sign((long) 989);
      int[] intArray0 = new int[9];
      intArray0[0] = 29;
      intArray0[1] = 29;
      intArray0[2] = 989;
      intArray0[3] = 1;
      intArray0[4] = 989;
      intArray0[5] = 29;
      intArray0[6] = 29;
      intArray0[7] = 989;
      intArray0[8] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double3 = MathUtils.round((-686.6595414813), 29);
  }
}
