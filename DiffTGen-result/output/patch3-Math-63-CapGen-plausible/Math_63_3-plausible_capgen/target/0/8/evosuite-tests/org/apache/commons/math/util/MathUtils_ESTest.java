/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:04:20 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = MathUtils.pow((-1587L), 1276);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = bigInteger0.isProbablePrime(17);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1544L);
      float float0 = MathUtils.indicator((float) (byte)21);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 984;
      int int1 = (-79);
      int int2 = MathUtils.subAndCheck(984, (-79));
      double double0 = MathUtils.indicator((double) 984);
      int int3 = 109;
      int int4 = 16;
      int int5 = MathUtils.pow(109, 16);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = MathUtils.hash((-0.49999999999999994));
      // Undeclared exception!
      try { 
        MathUtils.round((-704.3644), 1075838976);
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = (-3423L);
      long long1 = MathUtils.indicator((-3423L));
      long long2 = MathUtils.pow(434L, 0L);
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      int int1 = MathUtils.hash((-5640.1));
      double double1 = MathUtils.binomialCoefficientDouble(639, (-4387));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("c1a3m;1MAt2t");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.c1a3m;1MAt2t
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float float0 = MathUtils.round((-1629.8F), 0);
      int int0 = MathUtils.gcd(0, 0);
      long long0 = MathUtils.sign((long) 0);
      int int1 = MathUtils.compareTo((-713.787678908642), 0, (-713.787678908642));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1630.0F);
      doubleArray0[2] = 2.52276435453;
      doubleArray0[3] = (double) (-1630.0F);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1629.8F);
      doubleArray0[6] = (double) (-1630.0F);
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = 1923.1603612;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0L);
      int int2 = MathUtils.hash(doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = MathUtils.gcd(77, 77);
      long long0 = MathUtils.pow(5040L, 77);
      double double0 = MathUtils.normalizeAngle(77, 5040L);
      long long1 = MathUtils.pow(0L, 239);
      float float0 = MathUtils.round((float) 77, 2079);
      long long2 = 0L;
      long long3 = MathUtils.subAndCheck(0L, (-2147483648L));
      double double1 = MathUtils.normalizeAngle(2079, (-936.8));
      double double2 = MathUtils.scalb(0.0, 77);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 77);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 77
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 9.220590270857665E-9);
      float float0 = MathUtils.indicator(2684.5F);
      int int0 = MathUtils.subAndCheck(4, 1030);
      int int1 = MathUtils.hash((-1660.0));
      int int2 = MathUtils.mulAndCheck((-1026), 21);
      byte byte0 = MathUtils.sign((byte)0);
      long long0 = MathUtils.pow((-1669L), (long) (byte)0);
      int int3 = MathUtils.sign(0);
      int int4 = MathUtils.sign(0);
      long long1 = MathUtils.addAndCheck(0L, (-99L));
      double double1 = MathUtils.indicator(1.1102230246251565E-16);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1.0F;
      boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
      int int5 = MathUtils.sign((int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3740.67942320512);
      doubleArray0[2] = 1.7029898543501842E-8;
      doubleArray0[3] = (-3540.4652);
      doubleArray0[4] = 1.2393345855018391E-8;
      doubleArray0[5] = (-1454.3);
      doubleArray0[6] = 4008.96;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      int int1 = bigInteger1.signum();
      float float0 = bigInteger0.floatValue();
      int int2 = bigInteger0.bitLength();
      int int3 = bigInteger0.bitCount();
      BigInteger bigInteger2 = bigInteger1.abs();
      long long0 = bigInteger1.longValueExact();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      byte[] byteArray0 = bigInteger1.toByteArray();
      BigInteger bigInteger4 = bigInteger1.nextProbablePrime();
      double[] doubleArray0 = new double[1];
      BigInteger bigInteger5 = bigInteger1.add(bigInteger3);
      doubleArray0[0] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      boolean boolean0 = MathUtils.equalsIncludingNaN(316.1899089583, (double) 1);
      int int4 = MathUtils.sign(1);
      float float1 = MathUtils.indicator((float) 1);
      long long1 = MathUtils.sign((long) 1);
      long long2 = MathUtils.pow((long) 1, 1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(1, 10);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 10
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.087, 0.087, 1.9868161777724352E-8);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.087;
      doubleArray0[1] = 0.087;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1.9868161777724352E-8;
      doubleArray0[4] = 0.087;
      doubleArray0[5] = 1.9868161777724352E-8;
      doubleArray0[6] = 0.2;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.087);
      long long0 = MathUtils.lcm(553L, 2152L);
      long long1 = MathUtils.pow(69L, 164);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("AOt3?q4");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.AOt3?q4
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = MathUtils.compareTo(271.23581, 0.0, 0.0);
      double double0 = MathUtils.scalb(1365.9308854272738, 8);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      byte byte0 = (byte)65;
      byte byte1 = MathUtils.sign((byte)65);
      short short0 = MathUtils.indicator((short)0);
      double double1 = MathUtils.normalizeAngle(8, 0.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = MathUtils.compareTo(2.0, 2.0, 2.0);
      int int1 = MathUtils.addAndCheck(0, 0);
      int int2 = 134;
      int int3 = MathUtils.mulAndCheck(0, 134);
      long long0 = MathUtils.subAndCheck(1618L, 2186L);
      int int4 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals(2378.42549564, (double) (-568L), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 13);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.setBit(13);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 13);
      int int0 = 3617;
      short short0 = bigInteger0.shortValueExact();
      long long0 = MathUtils.pow((-9218868437227405313L), 3617);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-9218868437227405313L), 3617, 13);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 13, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2762;
      intArray0[1] = 1894;
      intArray0[2] = 1655;
      intArray0[3] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.scalb((-780.94543544), 0);
      int int1 = MathUtils.subAndCheck(0, 491);
      int int2 = MathUtils.sign((-491));
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.addAndCheck((-3156), 808);
      long long0 = MathUtils.addAndCheck((long) (-3156), 1543L);
      long long1 = MathUtils.factorial(19);
      byte byte0 = MathUtils.indicator((byte)0);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = 19;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = 808;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.sinh(1088.9255544483497);
      int int2 = MathUtils.pow((int) (byte)0, (long) 1);
      boolean boolean0 = MathUtils.equals(1088.9255544483497, (-3160.876));
      boolean boolean1 = MathUtils.equals((double) 0, 0.0, 2313);
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (int) (byte)1;
      intArray1[3] = 2313;
      intArray1[4] = (int) (byte)1;
      intArray1[5] = (int) (byte)0;
      intArray1[6] = 19;
      intArray1[7] = 2313;
      int int3 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 31;
      long long0 = 952L;
      int int1 = MathUtils.pow(31, 952L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(31, 1373411585);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 431.2026049331;
      doubleArray0[1] = (-1902.45634832555);
      doubleArray0[2] = 1485.794192840549;
      doubleArray0[3] = 199.19749384739188;
      doubleArray0[4] = (-1613.187029562);
      doubleArray0[5] = (-1666.372907466283);
      doubleArray0[6] = (-346.4722036806148);
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 2.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-3512299194304650054L), 4778L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 9.219544613762692E-9;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 9.219544613762692E-9;
      doubleArray1[1] = 9.219544613762692E-9;
      doubleArray1[2] = 9.219544613762692E-9;
      doubleArray1[3] = 9.219544613762692E-9;
      doubleArray1[4] = 9.219544613762692E-9;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray1, doubleArray2);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-567L), (-567L));
      int int0 = MathUtils.subAndCheck(375, 375);
      byte byte0 = MathUtils.indicator((byte)0);
      byte byte1 = MathUtils.sign((byte)0);
      short short0 = MathUtils.sign((short) (byte)0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      String string0 = bigInteger1.toString(2041);
      BigInteger bigInteger2 = bigInteger1.mod(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0L);
      double double0 = MathUtils.sinh((-1134L));
      long long1 = MathUtils.gcd((long) (byte)1, (-9223372036854775808L));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (byte)0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      long long2 = MathUtils.factorial((byte)0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = MathUtils.scalb(1469.370095755, 158);
      short short0 = MathUtils.sign((short)0);
      int int0 = MathUtils.mulAndCheck((int) (short)0, 17);
      double double1 = MathUtils.round(1469.370095755, (int) (short)0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      double double2 = MathUtils.distance(intArray0, intArray0);
      double double3 = MathUtils.scalb(294.00441368366444, (short)0);
      long long0 = MathUtils.pow((-4456L), 4208363204685324176L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 9.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (0 < 9)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = MathUtils.sign(137);
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-336.4509), 137);
      long long0 = MathUtils.pow((long) 137, 137);
      double double1 = MathUtils.binomialCoefficientLog(137, 1);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (long) 137);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = MathUtils.round((-2.6033824355191673E-8), 16);
      double double1 = MathUtils.binomialCoefficientDouble(520, 16);
      long long0 = MathUtils.factorial(16);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("aQ!v4wzO05OZedhA");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.aQ!v4wzO05OZedhA
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-68);
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)20;
      byte byte1 = (byte)40;
      byteArray0[3] = (byte)40;
      byte byte2 = (byte) (-18);
      byteArray0[4] = (byte) (-18);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-288,063,477,522^-288,063,477,522)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-126);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-31,102^-31,102)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(590.0, 2769.6137309);
      int int0 = (-861);
      int int1 = MathUtils.gcd(246, (-861));
      int int2 = MathUtils.addAndCheck((-2949), 1277);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int3 = MathUtils.pow(246, 1277);
      int int4 = MathUtils.addAndCheck(1277, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1672);
      intArray0[1] = 0;
      int int5 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.log(0.0, 0.5);
      int int6 = 4981;
      double double3 = MathUtils.scalb((-2363.74224), 4981);
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = MathUtils.lcm(2239, 2239);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2239;
      doubleArray0[1] = (double) 2239;
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.sign(2239);
      int int3 = MathUtils.sign(0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,239 >= 2,239)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float float0 = MathUtils.indicator((-1416.97F));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1416.97F);
      doubleArray0[3] = (double) (-1416.97F);
      doubleArray0[4] = (double) (-1416.97F);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = MathUtils.pow(2432902008176640000L, 0);
      long long1 = MathUtils.indicator(1L);
      float float0 = MathUtils.sign((float) 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 1278);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1278;
      intArray0[4] = 1278;
      intArray0[5] = 0;
      intArray0[6] = 1278;
      intArray0[7] = 1278;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 413.609823;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1143.1;
      doubleArray0[3] = (-657.8701904697);
      doubleArray0[4] = 1605.6305;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = MathUtils.hash(1.986821492305628E-8);
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-310L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-310)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-4428.759877075046);
      doubleArray0[1] = 0.036;
      double double0 = (-147.5517699788526);
      doubleArray0[2] = (-147.5517699788526);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator(0.0F);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0.036 >= -147.552)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-368);
      intArray0[1] = 0;
      intArray0[2] = 4;
      intArray0[3] = 937;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 17;
      intArray0[7] = 288;
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = (-1120);
      intArray1[2] = (-368);
      intArray1[3] = 0;
      intArray1[4] = 4;
      intArray1[5] = 288;
      intArray1[6] = 0;
      intArray1[7] = (-368);
      intArray1[8] = 937;
      double double0 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float float0 = MathUtils.round(148.0F, 113);
      int[] intArray0 = new int[5];
      intArray0[4] = 113;
      intArray0[1] = 113;
      intArray0[2] = 113;
      intArray0[3] = 113;
      intArray0[4] = 113;
      int[] intArray1 = new int[3];
      intArray1[0] = 113;
      intArray1[1] = 113;
      intArray1[2] = 113;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long long0 = MathUtils.indicator((-1510L));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = MathUtils.cosh(1372.3);
      int int0 = MathUtils.hash((-2576.11854029996));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2576.11854029996);
      doubleArray0[1] = (-2576.11854029996);
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) 1911836432;
      doubleArray0[4] = 1372.3;
      doubleArray0[5] = (double) 1911836432;
      doubleArray0[6] = (double) 1911836432;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = MathUtils.gcd(2398L, 2398L);
      double double0 = MathUtils.binomialCoefficientLog(2378, 104);
      double double1 = MathUtils.normalizeAngle(104, 104);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2398L;
      doubleArray0[1] = (double) 2378;
      doubleArray0[2] = (double) 104;
      doubleArray0[3] = (double) 2398L;
      doubleArray0[4] = (double) 2378;
      doubleArray0[5] = (double) 2398L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (2,398 > 2,378)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      float float0 = MathUtils.round(0.0F, 432);
      double double1 = MathUtils.round(0.5, 257, 0);
      long long0 = MathUtils.indicator(0L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.5;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double2 = MathUtils.round((-423.6167914), 432, 0);
      double double3 = MathUtils.binomialCoefficientLog(432, 432);
      boolean boolean1 = MathUtils.equals((double) 0, (double) 0.0F);
      int int0 = MathUtils.hash(0.0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.0;
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      long long0 = MathUtils.sign((-343L));
      // Undeclared exception!
      try { 
        MathUtils.round(9.140260083262505E-9, 0, (-617));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = MathUtils.factorialLog(1428);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1428, 0.0, (double) 1428);
      int int0 = MathUtils.compareTo((-1522.3485), 0.0, 2672.0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4329.73254;
      doubleArray0[1] = 0.3333333333333333;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1870.2800592);
      doubleArray0[5] = 432.66571;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.binomialCoefficient(118, (-1445));
      float float0 = MathUtils.indicator((float) 118);
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.round(1830.5, (-1445), (-1445));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = MathUtils.indicator(67);
      double double0 = MathUtils.scalb(67, 1);
      double double1 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 63;
      double double0 = MathUtils.binomialCoefficientDouble(63, 8);
      boolean boolean0 = MathUtils.equalsIncludingNaN(112.5791900453259, (double) 63);
      double double1 = MathUtils.log(63, 183.4702666308279);
      int int1 = MathUtils.hash((double) 63);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 63;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(63.0, (-1026.2478));
      float float0 = Float.NaN;
      int int2 = 230;
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 230, 4092);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 4,092, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = MathUtils.gcd((-3705L), (-477L));
      int int0 = 193;
      // Undeclared exception!
      try { 
        MathUtils.round((double) 3L, 248, 193);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = MathUtils.lcm(728L, 0L);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathUtils.round(3805.283353832, 128);
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(128, 0);
      int int1 = MathUtils.pow(128, 1186L);
      double double1 = MathUtils.factorialDouble(128);
      int int2 = 130;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(34, 130);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 34, k = 130
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = (-6172);
      int int1 = MathUtils.addAndCheck(37, (-6172));
      int int2 = MathUtils.compareTo(700.150101632217, 0.0, 37);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2857.626750159105), 1321.638447354562, 1);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (double) (-6135), (double) 37);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2857.626750159105);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      double double0 = MathUtils.sign(2.0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1321.638447354562;
      doubleArray1[1] = (-2857.626750159105);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.round(1.1102230246251565E-16, 1, 37);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-1388);
      intArray0[0] = (-1388);
      double double0 = MathUtils.distance(intArray0, intArray0);
      float float0 = (-3882.0F);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.round((-3882.0F), 0, (-1388));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,388, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float float0 = MathUtils.round(148.0F, 135);
      int[] intArray0 = new int[5];
      intArray0[0] = 135;
      intArray0[1] = 135;
      intArray0[2] = 135;
      intArray0[3] = 135;
      intArray0[4] = 135;
      int[] intArray1 = new int[3];
      intArray1[0] = 135;
      intArray1[1] = 135;
      intArray1[2] = 135;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-4594), 529);
      double double0 = MathUtils.sign((double) (-4065));
      int int1 = MathUtils.mulAndCheck(496, (-712));
      // Undeclared exception!
      try { 
        MathUtils.round((-1.0), 496, (-712));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1864, 1864);
      double double1 = MathUtils.log(10.0, 10.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 10.0, 1864);
      float float0 = MathUtils.sign((-1552.5237F));
      double double2 = MathUtils.cosh((-2255.7965548));
      boolean boolean1 = MathUtils.equals((-2255.7965548), 3.141592653589793);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1552.5237F);
      doubleArray0[1] = (double) 1864;
      doubleArray0[2] = 0.0;
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 1864, 1864);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-3958705157555305932L), (-3958705157555305932L));
      double double0 = MathUtils.indicator(0.0);
      float float0 = MathUtils.sign((float) (-7917410315110611864L));
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-7917410315110611864L), (-3958705157555305932L));
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -7,917,410,315,110,611,864 + -3,958,705,157,555,305,932
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)9);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.round(0.0, 2);
      double double2 = MathUtils.round(0.0, (int) (byte)9);
      int int0 = MathUtils.compareTo(6.283185307179586, 607.293194, 2);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      double double0 = MathUtils.binomialCoefficientLog(180, 180);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      boolean boolean1 = MathUtils.equals(0.0, 0.0);
      double double1 = MathUtils.binomialCoefficientDouble(34, (-645));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathUtils.cosh(1.494140625);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.494140625;
      doubleArray0[1] = 1.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.08371849358081818, 0.08371849358081818, 1269.0);
      int int0 = MathUtils.subAndCheck(0, 0);
      long long0 = MathUtils.pow((long) 0, (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.round(2204.818543, (-515), 4194304);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-3151);
      intArray0[1] = (-2060);
      intArray0[2] = (-19);
      intArray0[3] = 1188;
      intArray0[4] = (-1);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = (-2898);
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = (-19);
      intArray1[2] = 0;
      intArray1[3] = 1188;
      intArray1[4] = (-2898);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 1227);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = MathUtils.pow(10, 0);
      short short0 = MathUtils.sign((short)0);
      float float0 = MathUtils.indicator((float) 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2149);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger1, bigInteger1);
      long long0 = MathUtils.subAndCheck((long) 10, 1565L);
      BigInteger bigInteger3 = BigInteger.ONE;
      BigInteger bigInteger4 = MathUtils.pow(bigInteger3, 2301);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1565L;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 2149;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.13333332538604736, (-907.9511992292));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 339.580212191;
      doubleArray0[1] = 1.2393345855018391E-8;
      doubleArray0[2] = (-2396.0);
      doubleArray0[3] = (-4195.644194429327);
      doubleArray0[4] = 3844.017484120145;
      doubleArray0[5] = 889.8449;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.sign((-2396.0));
      int int0 = MathUtils.gcd(0, 2427);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 3844.017484120145;
      doubleArray1[2] = (-2396.0);
      doubleArray1[3] = 3844.017484120145;
      doubleArray1[4] = 191.07675;
      doubleArray1[5] = (double) 2427;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray1, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = MathUtils.indicator(1L);
      long long1 = MathUtils.mulAndCheck(1L, 437L);
      long long2 = MathUtils.indicator(1L);
      int[] intArray0 = new int[6];
      intArray0[0] = (-3332);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 53;
      intArray0[4] = 851;
      int int0 = 0;
      intArray0[5] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.factorialLog(851);
      int int2 = MathUtils.hash((-504.0805510088914));
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0, (-504.0805510088914), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = 0L;
      int int0 = (-173);
      try { 
        MathUtils.pow(0L, (-173));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-173)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.round(1.073741824E9, 0);
      float float0 = MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = (-128);
      try { 
        MathUtils.pow(0L, (-128));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-128)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1248.0, 0.5000000000042687);
      short short0 = MathUtils.sign((short)0);
      boolean boolean1 = MathUtils.equals(0.0, (double) (short)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger("\"(Au", (short)0);
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = MathUtils.gcd(77, 77);
      long long0 = MathUtils.pow(5039L, 77);
      double double0 = MathUtils.normalizeAngle(77, 5039L);
      long long1 = MathUtils.pow(4896118248557759983L, 239);
      float float0 = MathUtils.round((float) 77, 2079);
      long long2 = 0L;
      long long3 = MathUtils.subAndCheck(0L, (-2147483648L));
      double double1 = MathUtils.normalizeAngle(2079, (-936.8));
      double double2 = MathUtils.scalb(0.0, 77);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(11, 77);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 11, k = 77
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = MathUtils.indicator(1157L);
      int int0 = MathUtils.hash((double[]) null);
      double double0 = MathUtils.round(0.0, (-89));
      int int1 = MathUtils.hash((double[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)23;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)23);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      int int0 = MathUtils.mulAndCheck((int) (byte)1, (int) (byte)1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1810.5411024821349);
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = 1640.0;
      doubleArray0[5] = (double) 1;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
      long long0 = MathUtils.lcm((long) 1, (-3564L));
      long long1 = MathUtils.lcm((-3564L), (-3564L));
      float float0 = MathUtils.indicator(12.81194F);
      int int1 = MathUtils.indicator((int) (byte)1);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = 1;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)1;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      int int3 = MathUtils.hash(doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-904), (-1368361334));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = MathUtils.pow(193, 713L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1381214527), (double) 193, 443);
      double double0 = MathUtils.sign(0.008333333333329196);
      long long0 = MathUtils.indicator((-2415L));
      long long1 = MathUtils.indicator((-2415L));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = MathUtils.lcm((-1890L), (-3272L));
      int int0 = (-1772);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1772), (-1772));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,772
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = MathUtils.pow((-1587L), 1276);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-50);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1544L);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.003;
      doubleArray0[1] = 6.283185307179586;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow((-7278142539171889152L), 0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-3073.15395);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      double double1 = MathUtils.sign(0.0);
      double double2 = MathUtils.factorialDouble(0);
      boolean boolean0 = MathUtils.equals(1.0, 0.0, (-2102.5));
      double double3 = MathUtils.normalizeAngle(0.0, (-3073.15395));
      int int1 = MathUtils.hash((-640.668932));
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)12;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (-0.09088450866185192));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 189;
      double double0 = MathUtils.scalb((-2531.415005367), 189);
      int int1 = MathUtils.sign((-1503));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2531.415005367);
      doubleArray0[1] = (double) (-1503);
      doubleArray0[2] = (double) (-1503);
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = (-238.7366457);
      int int0 = MathUtils.compareTo((-533.929182), (-238.7366457), 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-238.7366457);
      doubleArray0[2] = (-238.7366457);
      doubleArray0[3] = (double) (-1);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("ROUND_FLOOR");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.ROUND_FLOOR
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)0, 3869.06483);
      double double0 = MathUtils.factorialDouble((short)0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = 1.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.scalb((-768.628331173), 0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2193.0, (-1232.0), 145);
      double double0 = MathUtils.sinh((-729.577898430943));
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (-2777.797));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1232.0);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-2777.797);
      doubleArray0[3] = (-729.577898430943);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-729.577898430943);
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-3193));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,193
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-363.03742853);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.5;
      double double0 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1260.2900273);
      int int0 = MathUtils.hash(doubleArray0);
      short short0 = (short) (-5522);
      short short1 = MathUtils.indicator((short) (-5522));
      float float0 = MathUtils.round((float) (short) (-1), (-760078975));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1459), (-760078975));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,459
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = MathUtils.compareTo(7.549789948768648E-8, 1638.7529062, 1638.7529062);
      short short0 = MathUtils.sign((short)0);
      long long0 = MathUtils.indicator(10L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0, (double) (short)0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = MathUtils.indicator(1247.90348);
      float float0 = MathUtils.indicator(Float.NaN);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equals((double) Float.NaN, 0.0, 584);
      short short0 = MathUtils.indicator((short)0);
      short short1 = MathUtils.indicator((short) (-3088));
      int int0 = MathUtils.mulAndCheck((-1878), (-737));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("u+P7B/,IA");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.u+P7B/,IA
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.intValueExact();
      double double0 = bigInteger0.doubleValue();
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger1 = BigInteger.ONE;
      int int1 = bigInteger1.getLowestSetBit();
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.nextProbablePrime();
      String string0 = bigInteger0.toString(16);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) (byte)10;
      doubleArray0[2] = (double) (byte)10;
      doubleArray0[3] = (double) (byte)10;
      double double1 = 1136.48445;
      doubleArray0[4] = 1136.48445;
      doubleArray0[5] = (double) 16;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (10 <= 10)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 4194304);
      int int0 = (-2173);
      // Undeclared exception!
      try { 
        MathUtils.lcm(4194304, (-2173));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = MathUtils.gcd(2494, 2494);
      long long0 = MathUtils.mulAndCheck((long) 2494, 0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2494;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 2494;
      doubleArray0[3] = (double) 2494;
      doubleArray0[4] = (double) 2494;
      doubleArray0[5] = 2.0;
      doubleArray0[6] = (double) 2494;
      doubleArray0[7] = (double) 2494;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = 406.024;
      int int0 = (-952);
      double double1 = MathUtils.scalb(406.024, (-952));
      int int1 = (-260);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-260), (-952));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -260
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = (-1245);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1245));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,245
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = MathUtils.sign(1718);
      int int1 = MathUtils.mulAndCheck(1481, (-2962));
      int int2 = MathUtils.hash((double[]) null);
      int int3 = MathUtils.indicator((-372));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, (-1873L));
      long long1 = 2833L;
      long long2 = MathUtils.addAndCheck(2833L, 1873L);
      int int0 = 4297;
      int int1 = 4194304;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(4297, 4194304);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 4,297, k = 4,194,304
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = (-424);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-424));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -424
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 239;
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 239, 30);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 30, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 1.0;
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2492.7651567059;
      doubleArray0[2] = 1.304E19;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(928);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = MathUtils.lcm(3113L, (-1370L));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = 0.0;
      int int0 = (-267);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.06666666666666667, 0.0, (-267));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      float float0 = MathUtils.sign((-393.0F));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      int int0 = MathUtils.mulAndCheck((-1318), (-2210));
      int int1 = MathUtils.pow(254, 4503599627370495L);
      double double1 = MathUtils.sinh(2912780);
      long long0 = MathUtils.sign((long) 0);
      int int2 = MathUtils.compareTo(Double.POSITIVE_INFINITY, 2912780, 0.0);
      double double2 = MathUtils.scalb(1.0, 17);
      long long1 = MathUtils.sign(6227020800L);
      int int3 = MathUtils.compareTo(6227020800L, 3613.532733, (-1061.997886442));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(99);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      long long0 = MathUtils.mulAndCheck((long) 1, (-5563L));
      int int2 = 21;
      // Undeclared exception!
      try { 
        MathUtils.round(432.07739, 0, 21);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = 2935890503282001226L;
      long long1 = (-7278142539171889152L);
      // Undeclared exception!
      try { 
        MathUtils.lcm(2935890503282001226L, (-7278142539171889152L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      short short0 = MathUtils.indicator((short)0);
      byte byte0 = MathUtils.sign((byte) (-77));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (byte) (-77);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (byte) (-77);
      doubleArray0[4] = 1306.809;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) (short)1;
      doubleArray0[8] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-77 < 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      byte byte0 = MathUtils.indicator((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (byte)0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathUtils.indicator(2827.0);
      short short0 = MathUtils.indicator((short)3952);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (short)3952;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = 3.145894820876798E-6;
      boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      int int0 = MathUtils.compareTo(2481.8692531, 1L, (-2394.5432350717));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1620));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,620
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equals(1030.8, 1030.8, 1030.8);
      double double0 = MathUtils.log((-1621.0323), 1030.8);
      int int0 = MathUtils.hash(3.141592653589793);
      double double1 = MathUtils.sign(Double.NaN);
      byte byte0 = MathUtils.indicator((byte) (-96));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1621.0323);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (byte) (-96);
      doubleArray0[4] = (double) 340593891;
      doubleArray0[5] = (-2280.5568);
      doubleArray0[6] = (-1621.0323);
      doubleArray0[7] = 263.35085;
      doubleArray0[8] = (double) (byte) (-96);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.abs();
      BigInteger bigInteger4 = BigInteger.valueOf(1884L);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 1443L);
      long long0 = MathUtils.subAndCheck((long) 340593891, 3876L);
      int int1 = MathUtils.indicator(0);
      long long1 = MathUtils.gcd(340590015L, 3876L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(2183.28356241, (double) 340590015L, (int) (byte) (-96));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.008333333333329196, 0.008333333333329196, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.equals(16.0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      int int0 = MathUtils.mulAndCheck((-1560), 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals((-2003.30733), (-1134.6599), 1489);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1560);
      intArray0[1] = (-1560);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-327.963);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.log(0.0, 0.0);
      double double3 = MathUtils.indicator(311.0);
      long long0 = MathUtils.lcm(0L, 0L);
      byte byte0 = MathUtils.sign((byte) (-16));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.gcd((int) (byte) (-1), 256);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      double double4 = MathUtils.sign(0.0);
      long long1 = MathUtils.pow((long) (byte) (-1), 511L);
      double double5 = MathUtils.round(0.0, (int) (byte) (-16), 0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2329.66828539;
      doubleArray0[1] = (-3845.523372);
      doubleArray0[2] = (-3016.453);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (2,329.668 > -3,845.523)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = MathUtils.round(1785.244541, 112);
      byte byte0 = MathUtils.indicator((byte) (-29));
      int int0 = MathUtils.lcm(0, 0);
      double double1 = MathUtils.sign(Double.NaN);
      double double2 = MathUtils.sign((-1628.27325));
      long long0 = MathUtils.mulAndCheck(0L, 1545L);
      int int1 = MathUtils.gcd((-378), 0);
      long long1 = MathUtils.mulAndCheck((-1791L), 0L);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) (byte) (-1);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (double) 112;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 1558.45672668;
      double double3 = MathUtils.distance(doubleArray0, doubleArray1);
      short short0 = MathUtils.sign((short)900);
      long long2 = MathUtils.sign((long) 0);
      double double4 = MathUtils.binomialCoefficientDouble(0, 0);
      byte byte1 = MathUtils.indicator((byte) (-29));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = MathUtils.scalb((-1461.02070748), 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1461.02070748);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1461.02070748);
      doubleArray0[3] = (-1461.02070748);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-1461.02070748);
      doubleArray0[6] = (-1461.02070748);
      doubleArray0[7] = (double) 0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean1 = MathUtils.equals((-1461.02070748), (-107.0));
      short short0 = MathUtils.indicator((short)0);
      int int0 = MathUtils.sign((int) (short)0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(0, 0);
      int int2 = MathUtils.gcd(0, 18);
      long long0 = MathUtils.factorial(19);
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-3285));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-3,285)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = MathUtils.pow((-442), 4);
      int int1 = MathUtils.pow(4, 1500);
      double double0 = MathUtils.indicator((double) 1500);
      long long0 = MathUtils.factorial(4);
      int int2 = MathUtils.pow((-2461), 2191L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)73;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 3834L);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(4411.592822191348, 4411.592822191348);
      long long0 = MathUtils.factorial(0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 4411.592822191348;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-105);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathUtils.factorialLog(2392);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-650.71246577493), (-650.71246577493));
      boolean boolean1 = MathUtils.equalsIncludingNaN(2300.8251, (double) 2392, 2392);
      short short0 = MathUtils.sign((short)3);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) (short)1, (double) 2392, 922);
      int int0 = MathUtils.pow((-2856), 33);
      boolean boolean3 = MathUtils.equals(2076.969842777, (-650.71246577493), 33);
      long long0 = MathUtils.subAndCheck((-9223372036854775808L), (-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(725L, 725L);
      double double0 = MathUtils.sinh(0L);
      int int0 = MathUtils.hash(500.51);
      float float0 = MathUtils.sign(Float.NaN);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 500.51;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) (-1245853836);
      doubleArray0[6] = (double) (-1245853836);
      doubleArray0[7] = 500.51;
      doubleArray0[8] = (double) (-1245853836);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 156.7);
      long long0 = MathUtils.binomialCoefficient(7, 7);
      int int0 = MathUtils.indicator(7);
      double double1 = MathUtils.sinh(1L);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      short short0 = MathUtils.sign((short)1148);
      int int0 = MathUtils.indicator(0);
      byte byte0 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.indicator((double) 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      boolean boolean0 = bigInteger1.isProbablePrime(224);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
      float float0 = MathUtils.round((float) (short)1148, 32);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathUtils.scalb((-934.4216135098), 0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      short short0 = MathUtils.indicator((short)2875);
      int int0 = MathUtils.addAndCheck((int) (short)1, (int) (short)2875);
      // Undeclared exception!
      try { 
        MathUtils.round(59.09342885, (int) (short)2875, 2876);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-1262.363513615);
      doubleArray0[0] = (-1262.363513615);
      double double1 = (-30.816438972);
      doubleArray0[1] = (-30.816438972);
      doubleArray0[2] = (-479.60407401515);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1249.46182);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (-30.816 >= -479.604)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = MathUtils.scalb((-1876.90812332906), 60);
      double double1 = MathUtils.indicator(0.0);
      boolean boolean0 = MathUtils.equals((-2.1639277375573532E21), 4.9E-324);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2529.723993249);
      doubleArray0[1] = 0.25;
      MathUtils.checkOrder(doubleArray0);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = (-1236);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1236));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,236
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      int int0 = MathUtils.pow(233, (long) 233);
      int int1 = MathUtils.hash((double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1411));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,411
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = MathUtils.indicator((-907.0356010335496));
      float float0 = MathUtils.round(Float.NaN, (-1764));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.9699272335463627E-8;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1760.3289243);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = (-477);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-477), (-477));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -477
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      long long1 = MathUtils.mulAndCheck(1L, (long) 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float float0 = MathUtils.indicator(1901.0F);
      byte byte0 = MathUtils.indicator((byte)25);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1.1921056801463227E-8, 1.1921056801463227E-8);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.1921056801463227E-8;
      doubleArray0[1] = 1.1921056801463227E-8;
      doubleArray0[2] = 1.1921056801463227E-8;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 1.1921056801463227E-8;
      doubleArray0[5] = 1.1921056801463227E-8;
      doubleArray0[6] = 1.1921056801463227E-8;
      doubleArray0[7] = 1.1921056801463227E-8;
      double double1 = MathUtils.safeNorm(doubleArray0);
      short short0 = MathUtils.sign((short) (-2725));
      long long0 = MathUtils.subAndCheck(1924L, 921L);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = MathUtils.pow(7910884519577875640L, 0L);
      double double0 = 0.5;
      boolean boolean0 = MathUtils.equals((double) 7910884519577875640L, 0.5, 7.0);
      long long1 = MathUtils.gcd(3628800L, 7910884519577875640L);
      double double1 = MathUtils.log(0.0, (-3764.50177809));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 32;
      int int1 = MathUtils.lcm(32, 485);
      int int2 = 1300;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1300, 32);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = MathUtils.indicator((-1136L));
      int int0 = MathUtils.sign(10);
      long long1 = MathUtils.gcd((-1524L), (-1505L));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-2046.796469663);
      doubleArray0[2] = 1977.432021158534;
      doubleArray0[3] = 112.5;
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NaN);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1479.0);
      doubleArray0[2] = 2063.2132486599353;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.718281828459045;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1479.0));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      boolean boolean0 = bigInteger0.equals(bigInteger1);
      int int0 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 1130);
      float float0 = MathUtils.sign(1.0F);
      boolean boolean1 = MathUtils.equals(0.0, (-2287.091542181803), 1130);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double double0 = MathUtils.log(2661.27053, 0.0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      short short0 = MathUtils.sign((short)10);
      long long0 = MathUtils.gcd(1265L, (long) (short)10);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = MathUtils.lcm((-3020), 574);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 574;
      doubleArray0[3] = (double) (-3020);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0.5 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      int int0 = MathUtils.mulAndCheck(0, 4194304);
      float float0 = MathUtils.sign((float) 4194304);
      int int1 = MathUtils.addAndCheck(993, 4194304);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(207, 12);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(16, 16);
      long long1 = MathUtils.indicator(1L);
      try { 
        MathUtils.pow((-1386), (-1260));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,386^-1,260)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-717), 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 233);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 233
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = MathUtils.sign(Double.NEGATIVE_INFINITY);
      int int0 = MathUtils.sign(360);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 360;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 360;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 360;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 360;
      doubleArray0[8] = (-1.0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)54;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = bigInteger0.flipBit(5);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (int) (byte)9);
      long long0 = MathUtils.subAndCheck((long) 1, (-1797L));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.factorialDouble(144);
      int int0 = MathUtils.subAndCheck(144, (-2567));
      int int1 = MathUtils.gcd(144, 2711);
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-65));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 2432902008176640000L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(53.66923, 1143.0, (-2828));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(4607182418800017399L, 0L);
      long long1 = MathUtils.pow(0L, 4607182418800017399L);
      double double0 = MathUtils.round((double) 4607182418800017399L, 7);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(4398046511103L, 4398046511103L);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long long0 = 143L;
      long long1 = MathUtils.pow(143L, 143L);
      int int0 = MathUtils.subAndCheck(1, (-533));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = bigInteger0.pow(534);
      BigInteger bigInteger3 = bigInteger0.shiftRight(1);
      BigInteger bigInteger4 = bigInteger0.pow(1);
      BigInteger bigInteger5 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger5.testBit((-313));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 8;
      // Undeclared exception!
      try { 
        MathUtils.round(245.13652532554, 8, 8);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.scalb(170.0, (byte)0);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.pow(1510, (long) 0);
      int int2 = MathUtils.pow((int) (byte)0, 1510);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = bigInteger0.toString((int) (byte)0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 1510);
      float float0 = MathUtils.round((float) 0, 1);
      int int3 = MathUtils.hash(0.0);
      int int4 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(714.212271998, 1747.019);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long long0 = MathUtils.lcm(355687428096000L, 355687428096000L);
      double double0 = MathUtils.binomialCoefficientDouble(16, 16);
      boolean boolean0 = MathUtils.equals((double) 16, (-2213.33897489429), (-2213.33897489429));
      byte byte0 = MathUtils.sign((byte)7);
      double double1 = MathUtils.normalizeAngle((-427.376252532995), (byte)1);
      int int0 = MathUtils.compareTo((-427.376252532995), 0.01745329052209854, (-0.11965164478311863));
      int int1 = MathUtils.compareTo(0.01745329052209854, 61.0, 1905.143978);
      long long1 = MathUtils.factorial(0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 355687428096000L;
      doubleArray0[2] = (-2213.33897489429);
      doubleArray0[3] = (double) 355687428096000L;
      doubleArray0[4] = 0.0;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = 17;
      float float1 = MathUtils.round((-1.0F), 17);
      long long0 = MathUtils.indicator((long) 17);
      long long1 = (-1798L);
      long long2 = (-1466L);
      try { 
        MathUtils.pow((-1798L), (-1466L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,798^-1,466)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = (-869);
      int int1 = (-4244);
      try { 
        MathUtils.pow((-869), (-4244));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-869^-4,244)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      int int0 = MathUtils.sign((-437));
      boolean boolean1 = MathUtils.equals((double[]) null, (double[]) null);
      int int1 = MathUtils.addAndCheck(0, 0);
      boolean boolean2 = MathUtils.equalsIncludingNaN((-160.3), 1.304E19);
      long long0 = MathUtils.mulAndCheck((long) (-1), 4208363204685324176L);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      long long0 = MathUtils.sign((-1910L));
      boolean boolean0 = MathUtils.equals(Double.NEGATIVE_INFINITY, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(3686.0, 718.973469476326, 6);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      short short0 = (short)67;
      short short1 = MathUtils.indicator((short)67);
      int int0 = MathUtils.indicator((int) (short)1);
      double double0 = MathUtils.factorialDouble(1);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, (-166.3));
      long long0 = MathUtils.gcd(0L, (-74L));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }
}
