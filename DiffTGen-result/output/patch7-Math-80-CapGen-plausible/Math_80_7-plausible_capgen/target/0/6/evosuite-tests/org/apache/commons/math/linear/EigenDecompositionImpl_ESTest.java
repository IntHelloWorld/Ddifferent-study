/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 14:52:38 GMT 2020
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2762.668766498;
      doubleArray0[1] = (-1480.683386797908);
      doubleArray0[2] = (-719.7);
      doubleArray0[3] = 2762.668766498;
      doubleArray0[4] = (-1781.39);
      doubleArray0[5] = 1442.715;
      doubleArray0[6] = 12.916004218699694;
      doubleArray0[7] = 0.08325;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1442.715;
      doubleArray1[1] = 12.916004218699694;
      doubleArray1[2] = (-1480.683386797908);
      doubleArray1[3] = 12.916004218699694;
      doubleArray1[0] = (-1480.683386797908);
      doubleArray1[5] = 12.916004218699694;
      doubleArray1[6] = 12.916004218699694;
      doubleArray1[0] = 898.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      double double0 = eigenDecompositionImpl0.getDeterminant();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      try { 
        eigenDecompositionImpl0.getEigenvector(1805);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1805
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2762.668766498;
      doubleArray0[1] = (-1480.683386797908);
      doubleArray0[2] = (-719.7);
      doubleArray0[6] = (-14.99227657690736);
      doubleArray0[4] = (-1781.39);
      doubleArray0[5] = (-14.99227657690736);
      doubleArray0[6] = 12.916004218699694;
      doubleArray0[7] = 0.08325;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1442.715;
      doubleArray1[1] = 12.916004218699694;
      doubleArray1[2] = (-1480.683386797908);
      doubleArray1[3] = 12.916004218699694;
      doubleArray1[4] = (-1480.683386797908);
      doubleArray1[5] = 12.916004218699694;
      doubleArray1[6] = 12.916004218699694;
      doubleArray1[0] = 898.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2762.668766498;
      doubleArray0[1] = (-1480.683386797908);
      doubleArray0[2] = (-719.7);
      doubleArray0[3] = (-14.99227657690736);
      doubleArray0[4] = (-1781.39);
      doubleArray0[5] = 2762.668766498;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 0.08325;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1480.683386797908);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1480.683386797908);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1480.683386797908);
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = 898.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      double double0 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2762.668766498;
      doubleArray0[1] = (-1480.683386797908);
      doubleArray0[2] = (-719.7);
      doubleArray0[3] = (-14.99227657690736);
      doubleArray0[4] = (-1781.39);
      doubleArray0[5] = 1442.715;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 0.08325;
      doubleArray0[8] = 3.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1442.715;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1480.683386797908);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1480.683386797908);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = 898.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2762.668766498;
      doubleArray0[1] = (-1480.683386797908);
      doubleArray0[2] = (-719.7);
      doubleArray0[3] = (-14.99227657690736);
      doubleArray0[4] = (-1781.39);
      doubleArray0[5] = 2762.668766498;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 0.08325;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-719.7);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1480.683386797908);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1480.683386797908);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = (-719.7);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      double double0 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2762.668766498;
      doubleArray0[1] = (-1480.683386797908);
      doubleArray0[2] = (-719.7);
      doubleArray0[3] = (-15.223988236260116);
      doubleArray0[4] = (-1781.39);
      doubleArray0[5] = 1442.715;
      doubleArray0[6] = 12.916004218699694;
      doubleArray0[7] = 0.08325;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1442.715;
      doubleArray1[1] = 12.916004218699694;
      doubleArray1[2] = (-1480.683386797908);
      doubleArray1[3] = 12.916004218699694;
      doubleArray1[4] = (-1480.683386797908);
      doubleArray1[5] = 12.916004218699694;
      doubleArray1[6] = 12.916004218699694;
      doubleArray1[0] = 898.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      try { 
        eigenDecompositionImpl0.getEigenvector((-12));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -12
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2762.668766498;
      doubleArray0[1] = (-1480.683386797908);
      doubleArray0[2] = (-719.7);
      doubleArray0[3] = (-14.99227657690736);
      doubleArray0[4] = (-1781.39);
      doubleArray0[5] = 1442.715;
      doubleArray0[6] = 12.916004218699694;
      doubleArray0[7] = 0.08325;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1442.715;
      doubleArray1[1] = 12.916004218699694;
      doubleArray1[2] = (-1480.683386797908);
      doubleArray1[3] = 12.916004218699694;
      doubleArray1[4] = (-1480.683386797908);
      doubleArray1[5] = 12.916004218699694;
      doubleArray1[6] = 12.916004218699694;
      doubleArray1[0] = 898.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      try { 
        eigenDecompositionImpl0.getEigenvector(1805);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1805
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2762.668766498;
      doubleArray0[1] = (-1480.683386797908);
      doubleArray0[2] = 2762.668766498;
      doubleArray0[3] = (-14.99227657690736);
      doubleArray0[4] = (-1781.39);
      doubleArray0[5] = 1442.715;
      doubleArray0[6] = 12.916004218699694;
      doubleArray0[7] = 0.08325;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1442.715;
      doubleArray1[1] = 12.916004218699694;
      doubleArray1[2] = (-1480.683386797908);
      doubleArray1[4] = (-1480.683386797908);
      doubleArray1[5] = 12.916004218699694;
      doubleArray1[6] = 12.916004218699694;
      doubleArray1[0] = 898.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      try { 
        eigenDecompositionImpl0.getEigenvector((-2146192693));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2146192693
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2762.668766498;
      doubleArray0[1] = (-1480.683386797908);
      doubleArray0[2] = (-719.7);
      doubleArray0[3] = (-14.99227657690736);
      doubleArray0[4] = (-1781.39);
      doubleArray0[5] = 1442.715;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 0.08325;
      doubleArray0[8] = 3.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1442.715;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1480.683386797908);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1480.683386797908);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = 898.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(605);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 605
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 557.5141289542;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double double0 = eigenDecompositionImpl0.getDeterminant();
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(8);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-16.234708375249973);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
      RealVector realVector0 = blockRealMatrix0.getRowVector(0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 401.4972543);
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x3 matrix
         //
         verifyException("org.apache.commons.math.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-4220.1827));
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1811, 18);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // a 1,811x18 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(1.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(1.0E-12);
      doubleArray0[2] = double2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[0]);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0E-12;
      doubleArray1[1] = 824.018557;
      doubleArray1[2] = 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray1);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (double) doubleArray0[0]);
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 3851;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(3851);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(3851, 3851);
      RealMatrix realMatrix0 = openMapRealVector1.outerProduct((RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapSin();
      RealMatrix realMatrix1 = openMapRealVector0.outerProduct((RealVector) openMapRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, 3851);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 4156.13863);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-799.4));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 12.566370614359172;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 42.7454;
      doubleArray0[3] = 2017.198;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 42.7454);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2128.813;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, Double.NEGATIVE_INFINITY);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2762.668766498;
      doubleArray0[1] = (-1480.683386797908);
      doubleArray0[2] = (-719.7);
      doubleArray0[3] = (-15.223988236260116);
      doubleArray0[4] = (-1781.39);
      doubleArray0[5] = 1442.715;
      doubleArray0[6] = 12.916004218699694;
      doubleArray0[7] = 0.08325;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1442.715;
      doubleArray1[1] = 12.916004218699694;
      doubleArray1[2] = (-1480.683386797908);
      doubleArray1[3] = 12.916004218699694;
      doubleArray1[4] = (-1480.683386797908);
      doubleArray1[5] = 12.916004218699694;
      doubleArray1[6] = 12.916004218699694;
      doubleArray1[0] = 898.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      try { 
        eigenDecompositionImpl0.getEigenvector((-12));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -12
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(3.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(3.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(3.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(1859.844614403);
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[2]);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[3]);
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[0]);
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[5]);
      doubleArray0[7] = double7;
      Double double8 = Double.valueOf((-7.0479920025));
      doubleArray0[8] = double8;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (double) doubleArray0[8]);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1655.18336252);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[22];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2762.668766498;
      doubleArray0[1] = (-1480.683386797908);
      doubleArray0[2] = (-719.7);
      doubleArray0[3] = (-14.99227657690736);
      doubleArray0[4] = (-1781.39);
      doubleArray0[5] = 1442.715;
      doubleArray0[6] = 12.916004218699694;
      doubleArray0[7] = 0.08325;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1442.715;
      doubleArray1[1] = 12.916004218699694;
      doubleArray1[2] = (-1480.683386797908);
      doubleArray1[3] = 12.916004218699694;
      doubleArray1[4] = (-1480.683386797908);
      doubleArray1[5] = 12.916004218699694;
      doubleArray1[6] = 12.916004218699694;
      doubleArray1[0] = 898.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-1.0));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 557.5141289542;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(8);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 2.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2762.668766498;
      doubleArray0[1] = (-1480.683386797908);
      doubleArray0[2] = (-719.7);
      doubleArray0[3] = (-14.99227657690736);
      doubleArray0[4] = (-1781.39);
      doubleArray0[5] = 1442.715;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 0.08325;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1442.715;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1480.683386797908);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1480.683386797908);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = 898.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      double double0 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 541.205;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }
}
