/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 00:01:14 GMT 2020
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixPreservingVisitor;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 641.52196296;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1951.7669286);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-499.57324866628755);
      doubleArray0[2] = (-2457.625235);
      doubleArray0[2] = 28.281368726339547;
      doubleArray0[3] = (-2143.10839);
      doubleArray0[4] = (-332.1);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector1.outerproduct(openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(openMapRealVector1);
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.mapExp();
      double double0 = openMapRealMatrix0.walkInRowOrder((RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor0, 0, 0, 0, 5);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-332.1));
      double double1 = eigenDecompositionImpl0.getDeterminant();
      double[][] doubleArray1 = openMapRealMatrix0.getData();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      double double2 = eigenDecompositionImpl0.getImagEigenvalue(0);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      double double3 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)eigenDecompositionImpl0.getEigenvector(0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      double double4 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray2 = openMapRealMatrix0.getColumn(0);
      ArrayRealVector arrayRealVector2 = (ArrayRealVector)arrayRealVector1.mapAcos();
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      Double double5 = new Double((-2143.10839));
      ArrayRealVector arrayRealVector3 = new ArrayRealVector(arrayRealVector1, arrayRealVector1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 641.52196296;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1039.2154;
      doubleArray0[6] = (-1952.9332243678846);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      double double0 = new Double(1039.2154);
      try { 
        eigenDecompositionImpl0.getEigenvector((-2257));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2257
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-499.57324866628755);
      doubleArray0[1] = (-2457.625235);
      doubleArray0[2] = 28.281368726339547;
      doubleArray0[3] = (-2143.10839);
      doubleArray0[4] = (-332.1);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector1.outerproduct(openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(openMapRealVector1);
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.mapExp();
      double double0 = openMapRealMatrix0.walkInRowOrder((RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor0, 0, 0, 0, 5);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-332.1));
      double double1 = eigenDecompositionImpl0.getDeterminant();
      double[][] doubleArray1 = openMapRealMatrix0.getData();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      double double2 = eigenDecompositionImpl0.getImagEigenvalue(0);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      double double3 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getD();
      double double4 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray2 = openMapRealMatrix0.getColumn(0);
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getD();
      Double double5 = new Double((-2143.10839));
      RealVector realVector1 = eigenDecompositionImpl0.getEigenvector(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-499.782054408);
      doubleArray0[1] = 0.0;
      doubleArray0[0] = 27.0;
      doubleArray0[3] = (-2143.10839);
      doubleArray0[4] = (-332.1);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector1.outerproduct(openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(openMapRealVector1);
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.mapExp();
      double double0 = openMapRealMatrix0.walkInRowOrder((RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor0, 0, 0, 0, 5);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-332.1));
      double double1 = new Double((-332.1));
      double[][] doubleArray1 = BlockRealMatrix.createBlocksLayout(0, 0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      double double2 = eigenDecompositionImpl0.getImagEigenvalue(0);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double double3 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(0, (-332.1));
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      double double4 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getD();
      RealVector realVector0 = arrayRealVector0.subtract(doubleArray2);
      double double5 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-499.782054408);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 27.0;
      doubleArray0[3] = (-2143.10839);
      doubleArray0[4] = (-332.1);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector1.outerproduct(openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(openMapRealVector1);
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.mapExp();
      double double0 = openMapRealMatrix0.walkInRowOrder((RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor0, 0, 0, 0, 5);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-332.1));
      double[][] doubleArray1 = openMapRealMatrix0.getData();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      double double1 = eigenDecompositionImpl0.getImagEigenvalue(0);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double double2 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      double double3 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getD();
      double double4 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getD();
      RealVector realVector1 = eigenDecompositionImpl0.getEigenvector(5);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-499.782054408);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 27.0;
      doubleArray0[3] = (-2143.10839);
      doubleArray0[4] = (-332.1);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector1.outerproduct(openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(openMapRealVector1);
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.mapExp();
      double double0 = openMapRealMatrix0.walkInRowOrder((RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor0, 0, 0, 0, 5);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-332.1));
      double double1 = eigenDecompositionImpl0.getDeterminant();
      double[][] doubleArray1 = openMapRealMatrix0.getData();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      double double2 = eigenDecompositionImpl0.getImagEigenvalue(0);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double double3 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      double double4 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getD();
      RealVector realVector1 = arrayRealVector0.subtract(doubleArray2);
      double double5 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2756.7856404242;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarMultiply((-1630.153588622781));
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2756.7856404242);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double double0 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-499.782054408);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-499.782054408);
      doubleArray0[3] = (-2143.10839);
      doubleArray0[4] = (-332.1);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector1.outerproduct(openMapRealVector0);
      openMapRealVector0.setEpsilon((-499.782054408));
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapExp();
      double double0 = openMapRealMatrix0.walkInRowOrder((RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor0, 0, 0, 0, 0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-332.1));
      double double1 = eigenDecompositionImpl0.getDeterminant();
      double[][] doubleArray1 = openMapRealMatrix0.getData();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      double double2 = eigenDecompositionImpl0.getImagEigenvalue(0);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double double3 = eigenDecompositionImpl0.getDeterminant();
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      double double4 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      double double5 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-942.0116);
      doubleArray0[1] = 2535.7;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(doubleArray0);
      RealVector realVector0 = arrayRealVector1.append(doubleArray0);
      ArrayRealVector arrayRealVector2 = arrayRealVector0.ebeDivide(arrayRealVector1);
      RealVector realVector1 = arrayRealVector1.mapCeil();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2.22486091495365E7);
      RealMatrix realMatrix1 = arrayRealVector1.outerProduct(arrayRealVector0);
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      int int0 = 200;
      try { 
        eigenDecompositionImpl0.getEigenvector(200);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 200
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.333;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1517.6366931641);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double double1 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(2147482930);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147482930
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector0, 0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector1.outerproduct(openMapRealVector2);
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.mapCoshToSelf();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1762.0);
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      double[] doubleArray0 = eigenDecompositionImpl0.getRealEigenvalues();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.1102230246251565E-14;
      doubleArray1[1] = 933.51368;
      doubleArray1[2] = 1012.1669;
      doubleArray1[3] = (-2694.766);
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, true);
      int int0 = (-6);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-2694.766));
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x4 matrix
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-127.356218217522);
      doubleArray0[2] = 0.5;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.25;
      doubleArray0[5] = 1.232595164407831E-28;
      doubleArray0[6] = 2029.38;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-881.753252481013);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, doubleArray0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, arrayRealVector0);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1343.8178546;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 3050.888272;
      doubleArray0[3] = 918.87613501;
      doubleArray0[4] = 3498.00805757;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.333;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 918.87613501;
      doubleArray1[1] = 3498.00805757;
      doubleArray1[2] = 918.87613501;
      doubleArray1[3] = 1343.8178546;
      doubleArray1[4] = 1.0E-12;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = Double.NaN;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 3498.00805757);
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 172.7);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3638.9;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarMultiply(3638.9);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 3638.9);
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-499.782054408);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 27.0;
      doubleArray0[3] = (-2143.10839);
      doubleArray0[4] = (-332.1);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector1.outerproduct(openMapRealVector0);
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapExp();
      double double0 = openMapRealMatrix0.walkInRowOrder((RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor0, 0, 0, 0, 5);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-332.1));
      double double1 = eigenDecompositionImpl0.getDeterminant();
      double[][] doubleArray1 = openMapRealMatrix0.getData();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      double double2 = eigenDecompositionImpl0.getImagEigenvalue(0);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double double3 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      double double4 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getD();
      double double5 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (-4148.4161);
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 0.5;
      doubleArray1[4] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
      RealVector realVector0 = arrayRealVector1.mapCbrt();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-548.081737);
      doubleArray0[2] = 0.5;
      doubleArray0[3] = 961.37;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, Double.POSITIVE_INFINITY);
      } catch(RuntimeException e) {
         //
         // a 4x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(5);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1);
      RealVector realVector0 = arrayRealVector1.mapPow(52.8533466097282);
      RealVector realVector1 = arrayRealVector2.mapCosh();
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct((RealVector) arrayRealVector1);
      RealVector realVector2 = arrayRealVector0.mapCeil();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      double[] doubleArray0 = eigenDecompositionImpl0.getImagEigenvalues();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(5);
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getD();
      int int0 = 1197;
      double double1 = arrayRealVector1.getL1Distance((RealVector) arrayRealVector2);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(1197);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1197
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1210.530981;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1210.530981;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1210.530981);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      int int0 = (-207);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      try { 
        eigenDecompositionImpl0.getEigenvector((-207));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -207
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector0, 0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector1.outerproduct(openMapRealVector2);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1762.0);
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2756.7856404242;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarMultiply((-1630.153588622781));
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2756.7856404242);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2032.631806619828);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3522.423);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, doubleArray0, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, (-1534.340159747987));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1139.68);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.08325;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, Double.POSITIVE_INFINITY);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3110.0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3110.0);
      doubleArray1[1] = (-3110.0);
      doubleArray1[2] = (-3110.0);
      doubleArray1[3] = (-3110.0);
      doubleArray1[4] = 614.658;
      doubleArray1[5] = (-3110.0);
      doubleArray1[6] = (-3110.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-360.41305927217));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(16, 16);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-1375.73221285035));
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1255.52488);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-1255.52488));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-1558.6610167758718));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 641.52196296;
      doubleArray0[1] = 977.3911817148;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1039.2154;
      doubleArray0[6] = (-1951.7669286);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 641.52196296;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1039.2154;
      doubleArray0[6] = (-1951.7669286);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      double double0 = eigenDecompositionImpl0.getDeterminant();
      try { 
        eigenDecompositionImpl0.getEigenvector((-2257));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2257
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-499.782054408);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 27.0;
      doubleArray0[3] = (-2143.10839);
      doubleArray0[4] = (-332.1);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector1.outerproduct(openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(openMapRealVector1);
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.mapExp();
      double double0 = openMapRealMatrix0.walkInRowOrder((RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor0, 0, 0, 0, 5);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-332.1));
      double double1 = eigenDecompositionImpl0.getDeterminant();
      double[][] doubleArray1 = openMapRealMatrix0.getData();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      double double2 = eigenDecompositionImpl0.getImagEigenvalue(0);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double double3 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      double double4 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getD();
      double double5 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 2839.7;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 100.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // a 3x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }
}
