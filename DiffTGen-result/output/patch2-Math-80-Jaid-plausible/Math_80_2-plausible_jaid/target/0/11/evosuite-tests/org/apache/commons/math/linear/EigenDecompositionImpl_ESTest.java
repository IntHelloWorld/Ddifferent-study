/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:58:11 GMT 2020
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3344.1657193006085;
      doubleArray0[1] = 1.232595164407831E-34;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.3684555315672042E-42;
      doubleArray0[4] = (-1782.191339206);
      doubleArray0[5] = (-16.93664);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1782.191339206));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 461.3272981187761;
      doubleArray0[1] = 482.5020843142194;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 461.3272981187761;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 482.5020843142194);
      int int0 = (-1818);
      try { 
        eigenDecompositionImpl0.getEigenvector((-1818));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1818
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3345.15993;
      doubleArray0[1] = 1.232595164407831E-34;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.3684555315672042E-42;
      doubleArray0[4] = (-1782.191339206);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(4, 4);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-3189.190430378518));
      double double0 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3345.15993;
      doubleArray0[1] = 1.232595164407831E-34;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.3684555315672042E-42;
      doubleArray0[4] = (-1782.191339206);
      doubleArray0[5] = (-1782.191339206);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1782.191339206));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(6);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      RealMatrix realMatrix0 = openMapRealVector1.outerProduct((RealVector) openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(0.5);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapSinhToSelf();
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.mapLog1pToSelf();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 2285.4782502789);
      OpenMapRealVector openMapRealVector4 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector2);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.createMatrix(111, 9);
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(3136);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3136
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3345.15993;
      doubleArray0[1] = 3345.15993;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.3684555315672042E-42;
      doubleArray0[4] = (-1782.191339206);
      doubleArray0[5] = (-16.93664);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1782.191339206));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector();
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapSinhToSelf();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2285.290165289107);
      RealVector realVector0 = openMapRealVector0.projection((RealVector) openMapRealVector2);
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(3136);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3136
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3345.15993;
      doubleArray0[1] = 1.232595164407831E-34;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.3684555315672042E-42;
      doubleArray0[5] = (-16.93664);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(0.5);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapSinhToSelf();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2285.4782502789);
      double double0 = openMapRealVector2.getDistance((RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.copy();
      RealVector realVector0 = openMapRealVector0.projection((RealVector) openMapRealVector2);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(3136);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3136
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(0.5);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapSinhToSelf();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2285.4782502789);
      RealVector realVector0 = openMapRealVector0.projection((RealVector) openMapRealVector2);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(3136);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3136
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1615;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1615, 1615);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, 1615);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(15, 15);
      String string0 = blockRealMatrix0.toString();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 1465.17913844725);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 52;
      doubleArray1[1] = (double) 52;
      doubleArray1[2] = 1465.17913844725;
      doubleArray1[3] = (double) 52;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 52;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1465.17913844725;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (double) 52;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 1465.17913844725;
      doubleArray6[1] = 1465.17913844725;
      doubleArray6[2] = (double) 52;
      doubleArray0[5] = doubleArray6;
      BlockRealMatrix blockRealMatrix1 = null;
      try {
        blockRealMatrix1 = new BlockRealMatrix(15, 15, doubleArray0, false);
      } catch(IllegalArgumentException e) {
         //
         // wrong array shape (block length = 4, expected 225)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2834.20592119988;
      doubleArray0[1] = (-1568.8900774507);
      doubleArray0[2] = 329.207;
      doubleArray0[3] = 1.05;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1.05);
      } catch(RuntimeException e) {
         //
         // a 4x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3345.15993;
      doubleArray0[1] = 1.232595164407831E-34;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.3684555315672042E-42;
      doubleArray0[4] = (-1782.191339206);
      doubleArray0[5] = (-16.93664);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1782.191339206));
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2949.36368);
      doubleArray0[1] = (-5185.466752);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 16.6840202662;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 3686.70533758);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1.0E-12);
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-2738.30138));
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 2.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.232595164407831E-28;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 27.0;
      doubleArray1[4] = (-81.98921);
      doubleArray1[5] = 1577.74864;
      doubleArray1[6] = 196.500519;
      doubleArray1[7] = 75.53116;
      doubleArray1[8] = 1412.2748531575;
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, false);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarMultiply(27.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 3461.2);
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x9 matrix
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2949.36368);
      doubleArray0[1] = (-5185.466752);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 16.6840202662;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 3686.70533758);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12);
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 302.003608618009;
      doubleArray0[2] = 1073.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1073.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2264.075943568405);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 585.73337;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-3740.159601));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 2.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, 2189.29);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3345.15993;
      doubleArray0[1] = 1.232595164407831E-34;
      doubleArray0[2] = 11.277729908654859;
      doubleArray0[3] = 1.3684555315672042E-42;
      doubleArray0[4] = (-1782.191339206);
      doubleArray0[5] = (-16.93664);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1782.191339206));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.25;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.563);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 9.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0E-12;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 239.22931);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 2454;
      doubleArray1[2] = 2.0;
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray1, (-1156.4232707));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(0.5);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapSinhToSelf();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2285.4782502789);
      RealVector realVector0 = openMapRealVector0.projection((RealVector) openMapRealVector2);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(3136);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3136
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }
}
