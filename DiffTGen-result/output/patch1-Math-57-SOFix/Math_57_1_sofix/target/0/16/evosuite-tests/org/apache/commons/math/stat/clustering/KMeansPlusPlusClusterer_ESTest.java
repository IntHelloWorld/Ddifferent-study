/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 08:55:09 GMT 2020
 */

package org.apache.commons.math.stat.clustering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.math.stat.clustering.Cluster;
import org.apache.commons.math.stat.clustering.EuclideanIntegerPoint;
import org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KMeansPlusPlusClusterer_ESTest extends KMeansPlusPlusClusterer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      MockRandom mockRandom0 = new MockRandom(0L);
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.ERROR;
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1781);
      intArray0[2] = 130;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint0);
      List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
      cluster0.addPoint(euclideanIntegerPoint0);
      EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray0);
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster(list0, 3877, (-1781));
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      MockRandom mockRandom0 = new MockRandom(0L);
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.ERROR;
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1781);
      intArray0[2] = 130;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint0);
      List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
      EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray0);
      EuclideanIntegerPoint euclideanIntegerPoint2 = euclideanIntegerPoint1.centroidOf(list0);
      double double0 = euclideanIntegerPoint0.distanceFrom(euclideanIntegerPoint1);
      int int0 = 0;
      List<Cluster<EuclideanIntegerPoint>> list1 = kMeansPlusPlusClusterer0.cluster(list0, 0, 0);
      String string0 = "<xG Bl<)\"3b9p";
      // Undeclared exception!
      try { 
        KMeansPlusPlusClusterer.EmptyClusterStrategy.valueOf("<xG Bl<)\"3b9p");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.EmptyClusterStrategy.<xG Bl<)\"3b9p
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
      int[] intArray0 = new int[5];
      intArray0[0] = 840;
      int int0 = 3;
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int1 = 0;
      intArray0[4] = 0;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint0);
      List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
      // Undeclared exception!
      kMeansPlusPlusClusterer0.cluster(list0, 3, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      LongStream longStream0 = mockRandom0.longs();
      double double0 = mockRandom0.nextGaussian();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint((int[]) null);
      boolean boolean0 = linkedList0.add(euclideanIntegerPoint0);
      Object object0 = linkedList0.clone();
      LongStream longStream1 = mockRandom0.longs(1499L);
      // Undeclared exception!
      kMeansPlusPlusClusterer0.cluster(linkedList0, 3, 3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.FARTHEST_POINT;
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>((Random) null, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      int int0 = 66;
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster(linkedList0, 66, 66);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = mockRandom0.nextInt();
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_POINTS_NUMBER;
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster(linkedList0, 102, 1602);
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(2);
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      org.evosuite.runtime.Random.setNextRandom(2);
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray1 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray2 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      MockRandom mockRandom0 = new MockRandom(2935890503282001226L);
      double double0 = mockRandom0.nextGaussian();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint0);
      List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
      List<Cluster<EuclideanIntegerPoint>> list1 = kMeansPlusPlusClusterer0.cluster(list0, 2, 2);
      String string0 = "";
      int int0 = 195;
      List<Cluster<EuclideanIntegerPoint>> list2 = kMeansPlusPlusClusterer0.cluster(list0, 2, 195);
      // Undeclared exception!
      try { 
        KMeansPlusPlusClusterer.EmptyClusterStrategy.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.EmptyClusterStrategy.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2492L);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)14;
      LongStream longStream0 = mockRandom0.longs(1874L);
      byteArray0[0] = (byte)14;
      IntStream intStream0 = mockRandom0.ints();
      mockRandom0.nextBytes(byteArray0);
      long long0 = mockRandom0.nextLong();
      boolean boolean0 = mockRandom0.nextBoolean();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
      int[] intArray0 = new int[0];
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      Collection<EuclideanIntegerPoint> collection0 = null;
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster((Collection<EuclideanIntegerPoint>) null, 1051, (byte)0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1696L));
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      int int0 = 219;
      int int1 = 0;
      EuclideanIntegerPoint euclideanIntegerPoint0 = null;
      boolean boolean0 = linkedList0.add((EuclideanIntegerPoint) null);
      linkedList0.addLast((EuclideanIntegerPoint) null);
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster(linkedList0, 219, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      MockRandom mockRandom0 = new MockRandom(0L);
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.ERROR;
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1781);
      intArray0[2] = 130;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint0);
      List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
      EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray0);
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster(list0, 3877, (-1781));
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_POINTS_NUMBER;
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>((EuclideanIntegerPoint) null);
      List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster(list0, 0, 3);
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = mockRandom0.nextInt();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>((EuclideanIntegerPoint) null);
      List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      cluster0.addPoint(euclideanIntegerPoint0);
      List<Cluster<EuclideanIntegerPoint>> list1 = kMeansPlusPlusClusterer0.cluster(list0, 0, 581);
      // Undeclared exception!
      try { 
        KMeansPlusPlusClusterer.EmptyClusterStrategy.valueOf("unsupported operation");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.EmptyClusterStrategy.unsupported operation
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
