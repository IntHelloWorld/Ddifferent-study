/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 08:55:04 GMT 2020
 */

package org.apache.commons.math.stat.clustering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.math.stat.clustering.Cluster;
import org.apache.commons.math.stat.clustering.EuclideanIntegerPoint;
import org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KMeansPlusPlusClusterer_ESTest extends KMeansPlusPlusClusterer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_POINTS_NUMBER;
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-565);
      intArray0[1] = (-821);
      intArray0[2] = 4;
      intArray0[3] = 2144;
      intArray0[4] = 519;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      boolean boolean0 = linkedList0.offer(euclideanIntegerPoint0);
      EuclideanIntegerPoint euclideanIntegerPoint1 = euclideanIntegerPoint0.centroidOf(linkedList0);
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint1);
      cluster0.addPoint(euclideanIntegerPoint1);
      cluster0.addPoint(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint1);
      List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster(list0, 603, (-486));
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      double double0 = mockRandom0.nextGaussian();
      LongStream longStream0 = mockRandom0.longs();
      IntStream intStream0 = mockRandom0.ints(759L);
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>((EuclideanIntegerPoint) null);
      List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
      cluster0.addPoint((EuclideanIntegerPoint) null);
      cluster0.addPoint((EuclideanIntegerPoint) null);
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster(list0, 311, 311);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>((Random) null);
      Collection<EuclideanIntegerPoint> collection0 = null;
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster((Collection<EuclideanIntegerPoint>) null, 1, 1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3884L);
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.ERROR;
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>((EuclideanIntegerPoint) null);
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      int int0 = 502;
      cluster0.addPoint((EuclideanIntegerPoint) null);
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.cluster(linkedList0, (-2091), 502);
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        KMeansPlusPlusClusterer.EmptyClusterStrategy.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      KMeansPlusPlusClusterer.EmptyClusterStrategy kMeansPlusPlusClusterer_EmptyClusterStrategy0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.ERROR;
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>((Random) null, kMeansPlusPlusClusterer_EmptyClusterStrategy0);
      String string0 = "@[m!b1J}O<-={G";
      // Undeclared exception!
      try { 
        KMeansPlusPlusClusterer.EmptyClusterStrategy.valueOf("@[m!b1J}O<-={G");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.EmptyClusterStrategy.@[m!b1J}O<-={G
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      int[] intArray0 = new int[9];
      intArray0[0] = (-515);
      intArray0[1] = (-2767);
      intArray0[2] = (-2767);
      intArray0[3] = (-2767);
      intArray0[4] = (-2767);
      intArray0[5] = (-515);
      intArray0[6] = (-515);
      intArray0[7] = (-515);
      intArray0[8] = (-2767);
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      String string0 = euclideanIntegerPoint0.toString();
      boolean boolean0 = linkedList0.add(euclideanIntegerPoint0);
      List<Cluster<EuclideanIntegerPoint>> list0 = kMeansPlusPlusClusterer0.cluster(linkedList0, (-515), (-2767));
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      double double0 = mockRandom0.nextGaussian();
      List<Cluster<EuclideanIntegerPoint>> list1 = kMeansPlusPlusClusterer0.cluster(linkedList0, (-936), 3972);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
      long long0 = mockRandom0.nextLong();
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      int[] intArray0 = new int[9];
      intArray0[0] = 114;
      intArray0[1] = 1177;
      intArray0[2] = 1322;
      intArray0[3] = 1277;
      intArray0[4] = 0;
      intArray0[5] = 796;
      intArray0[6] = 3122;
      intArray0[7] = 0;
      intArray0[8] = 37;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      // Undeclared exception!
      try { 
        euclideanIntegerPoint0.centroidOf(linkedList0);
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.math.stat.clustering.EuclideanIntegerPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray0 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      MockRandom mockRandom0 = new MockRandom();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(mockRandom0);
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      boolean boolean0 = linkedList0.add(euclideanIntegerPoint0);
      List<Cluster<EuclideanIntegerPoint>> list0 = kMeansPlusPlusClusterer0.cluster(linkedList0, 0, 0);
      boolean boolean1 = linkedList0.removeFirstOccurrence(mockRandom0);
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray1 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      List<Cluster<EuclideanIntegerPoint>> list1 = kMeansPlusPlusClusterer0.cluster(linkedList0, 0, 0);
      mockRandom0.setSeed(0);
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray2 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray3 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      KMeansPlusPlusClusterer.EmptyClusterStrategy[] kMeansPlusPlusClusterer_EmptyClusterStrategyArray4 = KMeansPlusPlusClusterer.EmptyClusterStrategy.values();
      double double0 = mockRandom0.nextGaussian();
      List<Cluster<EuclideanIntegerPoint>> list2 = kMeansPlusPlusClusterer0.cluster(linkedList0, 1, 0);
      List<Cluster<EuclideanIntegerPoint>> list3 = kMeansPlusPlusClusterer0.cluster(linkedList0, 0, 0);
      LongStream longStream0 = mockRandom0.longs();
      List<Cluster<EuclideanIntegerPoint>> list4 = kMeansPlusPlusClusterer0.cluster(linkedList0, 0, 1282);
      // Undeclared exception!
      kMeansPlusPlusClusterer0.cluster(linkedList0, 5, 0);
  }
}
