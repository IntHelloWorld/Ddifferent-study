* EvoSuite 1.0.6
* Going to generate test cases for class: org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer
* Starting client
* Connecting to master process on port 19656
* Analyzing classpath: 
  - /home/hewitt/work/DiffTGen-master/output/patch1-Math-57-SOFix/Math_57_1_sofix/target/build/classes/all0.jar
  - /home/hewitt/work/DiffTGen-master/lib/myprinter.jar
  - /home/hewitt/work/DiffTGen-master/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 115
  - Branch 64
  - Exception 0
  - MutationFactory 161
  - Output 6
  - Method 3
  - MethodNoException 3
  - CBranchFitnessFactory 64
* Using seed 1585471662273
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%][Progress:===>                          10%] [Cov:>                                  0%][Progress:===>                          10%] [Cov:>                                  1%][Progress:===>                          10%] [Cov:====>                              13%][Progress:===>                          10%] [Cov:======>                            19%][Progress:===>                          10%] [Cov:=========>                         27%][Progress:===>                          11%] [Cov:=========>                         27%][Progress:===>                          11%] [Cov:==========>                        31%][Progress:===>                          13%] [Cov:====>                              13%][Progress:===>                          13%] [Cov:========>                          24%][Progress:===>                          13%] [Cov:==========>                        31%][Progress:=====>                        18%] [Cov:>                                  1%][Progress:=====>                        18%] [Cov:====>                              13%][Progress:=====>                        18%] [Cov:========>                          24%][Progress:=====>                        18%] [Cov:==========>                        31%][Progress:======>                       23%] [Cov:>                                  0%][Progress:======>                       23%] [Cov:>                                  1%][Progress:======>                       23%] [Cov:====>                              13%][Progress:======>                       23%] [Cov:======>                            19%][Progress:======>                       23%] [Cov:========>                          23%][Progress:======>                       23%] [Cov:=========>                         27%][Progress:==========>                   36%] [Cov:>                                  0%][Progress:==========>                   36%] [Cov:====>                              12%][Progress:==========>                   36%] [Cov:====>                              13%][Progress:==========>                   36%] [Cov:=======>                           20%][Progress:==========>                   36%] [Cov:========>                          24%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:===========>                  38%] [Cov:====>                              12%][Progress:===========>                  38%] [Cov:=======>                           20%][Progress:===========>                  38%] [Cov:========>                          24%][Progress:============>                 43%] [Cov:>                                  1%][Progress:============>                 43%] [Cov:====>                              13%][Progress:============>                 43%] [Cov:========>                          24%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       33%][Progress:==============>               48%] [Cov:>                                  1%][Progress:==============>               48%] [Cov:====>                              13%][Progress:==============>               48%] [Cov:========>                          24%][Progress:==============>               48%] [Cov:==========>                        31%][Progress:===============>              53%] [Cov:>                                  1%][Progress:===============>              53%] [Cov:====>                              13%][Progress:===============>              53%] [Cov:========>                          24%][Progress:===============>              53%] [Cov:==========>                        31%][Progress:================>             55%] [Cov:>                                  1%][Progress:================>             55%] [Cov:====>                              13%][Progress:================>             55%] [Cov:========>                          24%][Progress:================>             55%] [Cov:==========>                        31%][Progress:================>             55%] [Cov:===========>                       33%][Progress:==================>           60%] [Cov:==========>                        31%][Progress:==================>           61%] [Cov:==========>                        31%][Progress:==================>           63%] [Cov:==============>                    41%][Progress:===================>          65%] [Cov:==============>                    40%][Progress:===================>          65%] [Cov:==============>                    41%][Progress:===================>          65%] [Cov:==============>                    41%][Progress:=====================>        70%] [Cov:==============>                    40%][Progress:=====================>        70%] [Cov:==============>                    41%][Progress:=====================>        71%] [Cov:==============>                    41%][Progress:=====================>        73%] [Cov:==============>                    41%][Progress:======================>       75%] [Cov:==============>                    40%][Progress:======================>       75%] [Cov:==============>                    41%][Progress:======================>       75%] [Cov:==============>                    41%][Progress:======================>       76%] [Cov:==============>                    41%][Progress:========================>     81%] [Cov:==============>                    41%][Progress:========================>     81%] [Cov:==============>                    41%][Progress:=========================>    85%] [Cov:==============>                    41%][Progress:=========================>    86%] [Cov:==============>                    41%][Progress:===========================>  90%] [Cov:==============>                    41%][Progress:===========================>  90%] [Cov:==============>                    42%][Progress:===========================>  91%] [Cov:==============>                    41%][Progress:===========================>  91%] [Cov:==============>                    42%][Progress:===========================>  91%] [Cov:==============>                    42%][Progress:===========================>  93%] [Cov:==============>                    42%][Progress:===========================>  93%] [Cov:==============>                    42%][Progress:=============================>98%] [Cov:==============>                    42%][Progress:==============================100%] [Cov:==============>                    42%][Progress:==============================100%] [Cov:==============>                    42%][Progress:==============================100%] [Cov:===============>                   45%]
* Search finished after 63s and 9 generations, 4137 statements, best individual has fitness: 374.1646000954467
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 32%
* Total number of goals: 115
* Number of covered goals: 37
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 17%
* Total number of goals: 64
* Number of covered goals: 11
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 4
* Number of covered goals: 4
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 31%
* Total number of goals: 161
* Number of covered goals: 50
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 0%
* Total number of goals: 6
* Number of covered goals: 0
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 67%
* Total number of goals: 3
* Number of covered goals: 2
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 17%
* Total number of goals: 64
* Number of covered goals: 11
* Generated 4 tests with total length 31
* Resulting test suite's coverage: 46% (average coverage for all fitness functions)
* Compiling and checking tests
* Writing JUnit test case 'KMeansPlusPlusClusterer_ESTest' to evosuite-tests
* Done!

* Computation finished
