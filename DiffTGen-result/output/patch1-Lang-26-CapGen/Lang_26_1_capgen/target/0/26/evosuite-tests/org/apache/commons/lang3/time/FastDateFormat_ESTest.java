/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:49:37 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.AttributedCharacterIterator;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.Instant;
import java.time.OffsetTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.TemporalAmount;
import java.time.zone.ZoneRules;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.stream.IntStream;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockOffsetTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = new Locale("");
      StringBuffer stringBuffer0 = new StringBuffer();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(1, (TimeZone) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 13;
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(13, (TimeZone) null, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 13
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string0 = fastDateFormat0.format((-4076L));
      Locale locale0 = Locale.JAPAN;
      Object object0 = locale0.clone();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale1 = Locale.ITALY;
      String string1 = locale0.getDisplayCountry(locale1);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      String string2 = locale0.getDisplayVariant();
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      String string3 = fastDateFormat0.format(calendar0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZoneId zoneId0 = ZoneId.ofOffset("", zoneOffset0);
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      String string4 = timeZone0.getDisplayName();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0, locale0);
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append((long) 2);
      StringBuffer stringBuffer2 = fastDateFormat1.format((Date) mockDate0, stringBuffer0);
      int int0 = fastDateFormat1.hashCode();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, locale0);
      String string0 = "hQ]?{hsq;j*^qrH;c";
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      String string1 = "cLJJAaw'";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("cLJJAaw'");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "kS,ds<", 0, 0, 0, 0, 0, 3150, 0, (-1111), 0, 0, 5);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = fastDateFormat0.format(calendar0);
      simpleTimeZone0.setDSTSavings(1);
      Object object0 = fastDateFormat0.clone();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      MockDate mockDate0 = new MockDate((-1111), 0, 5);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 3150);
      StringBuffer stringBuffer1 = mockSimpleDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      Format.Field format_Field1 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition1 = new FieldPosition(format_Field1);
      // Undeclared exception!
      try { 
        fastDateFormat0.format(object0, stringBuffer1, fieldPosition1);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.apache.commons.lang3.time.FastDateFormat
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      Long long0 = new Long(0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) long0, (StringBuffer) null, fieldPosition0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ITALY;
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, timeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", timeZone0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", timeZone0, locale1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(114, 1, 1, 43, 0, 8);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(1, 3);
      int int0 = fastDateFormat0.hashCode();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("%sZQ%R08)UO%W*", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      ParsePosition parsePosition0 = new ParsePosition(2);
      Object object0 = fastDateFormat0.parseObject((String) null, parsePosition0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = fastDateFormat0.format(calendar0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("The validated state is false", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
      Locale locale0 = Locale.CANADA;
      MockDate mockDate0 = new MockDate(0);
      MockDate mockDate1 = new MockDate(1, 4307, 982, 0, 3, 2139);
      long long0 = MockDate.UTC(1, 60, 3, (-1), 2, 982);
      boolean boolean0 = mockDate0.before(mockDate1);
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockDate0);
      int[] intArray0 = new int[7];
      intArray0[2] = 1;
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = (-1);
      intArray0[5] = 0;
      intArray0[6] = 2;
      String string0 = fastDateFormat0.parseToken("org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField", intArray0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "m178[uLjX*nG");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.toZonedDateTime();
      } catch(DateTimeException e) {
         //
         // Invalid ID for region-based ZoneId, invalid format: m178[uLjX*nG
         //
         verifyException("java.time.ZoneRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      // Undeclared exception!
      try { 
        fastDateFormat0.applyRules(mockGregorianCalendar0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 2, 0);
      mockGregorianCalendar0.set(1, 105);
      String string0 = fastDateFormat0.format((Object) mockGregorianCalendar0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", (TimeZone) null, (Locale) null);
      Locale locale1 = Locale.PRC;
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 2, locale1);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("");
      Locale locale2 = Locale.UK;
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance("", (TimeZone) null, locale2);
      FastDateFormat fastDateFormat4 = FastDateFormat.getTimeInstance(1, (Locale) null);
      FastDateFormat fastDateFormat5 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat6 = FastDateFormat.getDateInstance(2, (TimeZone) null);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(5425, 2, (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 5425
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("m.h(fJq5");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      String string0 = "";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      ParsePosition parsePosition0 = new ParsePosition((-1));
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      boolean boolean0 = timeZone0.inDaylightTime(date0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("inc@w3Yl");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.ROOT;
      String string0 = locale0.toLanguageTag();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-3097), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -3097
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 1, stringBuffer0);
      String string0 = fastDateFormat0.format((long) 1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "");
      String string1 = FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, false, 1, locale0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("zgqNV");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = (-1515);
      String string0 = "^=A";
      TimeZone timeZone0 = TimeZone.getTimeZone("^=A");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1515), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1515
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      String string0 = fastDateFormat1.toString();
      int int0 = 3657;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(3657);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 3657
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(48, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 48
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string0 = fastDateFormat0.getPattern();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Set<String> set1 = locale1.getUnicodeLocaleKeys();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set1);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      String string0 = fastDateFormat0.format(date0);
      String string1 = fastDateFormat0.format((-2774L));
      String string2 = "";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, (-1543));
      } catch(IllegalArgumentException e) {
         //
         // Illegal daylight saving value: -1543
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("w^HRl;<(");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.format(1L);
      Locale locale0 = null;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, (Locale) null);
      int int0 = 0;
      int int1 = 853;
      int int2 = 3987;
      Long long0 = new Long(63L);
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat1.formatToCharacterIterator(long0);
      int int3 = (-1);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(3987, "v]", 0, (-2), 0, (-1), 1, 2, 1, 3);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start time -1
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("<null>");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("7b)]aZm0", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate(0, (-757), 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      MockDate mockDate1 = new MockDate();
      String string1 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      stringBuffer0.trimToSize();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate1, stringBuffer0);
      fastDateFormat0.init();
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
      int int0 = (-527);
      Locale locale0 = Locale.CANADA;
      MockDate mockDate0 = new MockDate(0);
      MockDate mockDate1 = new MockDate(1, 4307, 982, 0, 3, 2139);
      long long0 = MockDate.UTC(0, 60, 3, (-1), 2, 982);
      boolean boolean0 = mockDate0.before(mockDate1);
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockDate0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-527);
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = (-1);
      intArray0[5] = 0;
      intArray0[6] = 2;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 0, locale1);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat2.formatToCharacterIterator(locale1);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.util.Locale
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("pPs}1RO", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("{xZYy)]o4~G.la.'", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("U-%j YPCe", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("X?4A@dn", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-1);
      String string0 = ")(&TsPYli*\\!n YvT";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), ")(&TsPYli*!n YvT");
      Object object0 = simpleTimeZone0.clone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("%'B", (TimeZone) simpleTimeZone0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(":", locale0);
      boolean boolean0 = fastDateFormat0.equals(":");
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(600, 1734, (-575));
      String string0 = fastDateFormat1.format((Calendar) mockGregorianCalendar0);
      MockDate mockDate0 = new MockDate(3, 4252, (-540), 26, 1734, 2);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ":");
      FieldPosition fieldPosition0 = new FieldPosition((-540));
      StringBuffer stringBuffer1 = numberFormat0.format((double) 600, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      StringBuffer stringBuffer3 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer2);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, (-1802), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -1802
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-364), "");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1007, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1007
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.US;
      Locale locale1 = locale0.stripExtensions();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        timeZone0.getOffset(0, 0, (-1), (-1), (-701), 0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = (-789);
      String string0 = "y.ZM'U8Ma";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-789), "y.ZM'U8Ma");
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.forLanguageTag("y.ZM'U8Ma");
      String[] stringArray0 = Locale.getISOCountries();
      String string1 = locale0.getDisplayName(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-789), (-789), (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -789
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      OffsetTime offsetTime0 = MockOffsetTime.now((ZoneId) zoneOffset0);
      ZoneOffset zoneOffset1 = ZoneOffset.from(offsetTime0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset1);
      Locale locale0 = Locale.ITALY;
      FastDateFormat fastDateFormat0 = new FastDateFormat("b<T4", timeZone0, locale0);
      int int0 = (-1570);
      int int1 = 90;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      String string0 = "";
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", timeZone0);
      MockDate mockDate0 = new MockDate(3, (-1570), 3, (-1570), 90);
      Instant instant0 = MockInstant.now();
      Duration duration0 = Duration.ofMinutes(0);
      Instant instant1 = MockInstant.minus(instant0, (TemporalAmount) duration0);
      Date date0 = Date.from(instant1);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) mockDate0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("No date time pattern for locale: ");
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("No date time pattern for locale: ", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 1;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer0);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("G6ZARa{.h7J~", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("dt", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("u{d}", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      boolean boolean0 = timeZone0.observesDaylightTime();
      Locale locale0 = Locale.US;
      String[] stringArray0 = Locale.getISOLanguages();
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Wk{euT&.U", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.TAIWAN;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      String string1 = locale0.getDisplayCountry(locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      String string2 = timeZone0.getDisplayName();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      String string3 = fastDateFormat0.format(calendar0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0);
      MockSimpleDateFormat mockSimpleDateFormat1 = new MockSimpleDateFormat("", locale0);
      TimeZone timeZone1 = mockSimpleDateFormat1.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(2028, timeZone1, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 2028
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", (TimeZone) null, (Locale) null);
      Locale locale1 = Locale.JAPANESE;
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 2, locale1);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(5425);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 5425
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      String string0 = locale0.getScript();
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        fastDateFormat0.applyRules(mockGregorianCalendar0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ZoneOffset zoneOffset1 = ZoneOffset.ofHoursMinutes(0, 0);
      int int0 = zoneOffset0.compareTo(zoneOffset1);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.US;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      fastDateFormat0.init();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(3, (-1));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "ZC<t,'1ss!r-1LHb";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("ZC<t,'1ss!r-1LHb");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 2201, 0, 0);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2201;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2201;
      doubleArray0[6] = (double) 0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "12:00:00 AM GMT";
      stringArray0[1] = "12:00:00 AM GMT";
      stringArray0[2] = "12:00:00 AM GMT";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int[] intArray0 = new int[8];
      intArray0[0] = (-6028);
      intArray0[1] = 2;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "\"& 0YA2tq?JD(c\"";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("\"& 0YA2tq?JD(c\"", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "Y<A~!\\'&>d7D\"h_{";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Y<A~!'&>d7D\"h_{");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(2);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      ZoneOffset zoneOffset1 = ZoneOffset.MAX;
      int int0 = zoneOffset0.compareTo(zoneOffset1);
      Locale locale0 = Locale.CHINA;
      ZoneRules zoneRules0 = zoneOffset0.getRules();
      fastDateFormat1.init();
      String string0 = locale0.getExtension('F');
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3);
      boolean boolean0 = fastDateFormat2.getTimeZoneOverridesCalendar();
      FastDateFormat fastDateFormat4 = FastDateFormat.getTimeInstance(3, timeZone0);
      String string1 = fastDateFormat4.format((long) 3);
      // Undeclared exception!
      try { 
        fastDateFormat2.parseToken((String) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2792, "");
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "`I(A3ZOa");
      Object object0 = simpleTimeZone0.clone();
      simpleTimeZone0.setStartYear(0);
      simpleTimeZone0.setRawOffset((-503));
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("r2?#gqxNEN9{\">x", (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      Locale locale0 = Locale.CHINESE;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
      Locale locale1 = Locale.CANADA;
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, locale1);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance("", locale1);
      // Undeclared exception!
      try { 
        fastDateFormat2.parseToken("", (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Locale locale0 = new Locale("Y5KXcNzW#LkV", "org.apache.commons.lang3.time.FastDateFormat$TwentyFourHourField");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.TAIWAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      TimeZone timeZone1 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      int[] intArray0 = new int[3];
      TimeZone timeZone2 = TimeZone.getDefault();
      Date date0 = null;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("rp4Eot3gC\"`ChJK");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2763), 2, 0, 0, 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer("||I7H,[c`");
      StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      FieldPosition fieldPosition0 = new FieldPosition(369);
      // Undeclared exception!
      try { 
        choiceFormat0.format((double) 1, stringBuffer1, fieldPosition0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 4594;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(4594);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 4594
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      int int1 = 0;
      int int2 = 0;
      int int3 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "FuW]HZoUU+*n", 0, 0, 0, 0, 0, 0, 0, 11);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat((String) null, simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0);
      Locale locale0 = fastDateFormat0.getLocale();
      String string0 = "Illegal pattern component: ";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Illegal pattern component: ", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(4263);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 4263
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("U<&bN-r<Aq%3E");
      MockDate mockDate0 = new MockDate(1, 1, 1, 0, 0, 1);
      boolean boolean0 = timeZone0.inDaylightTime(mockDate0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      StringWriter stringWriter0 = new StringWriter(1);
      Locale locale0 = Locale.KOREA;
      String string0 = fastDateFormat0.format(0L);
      int int0 = fastDateFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1);
      Locale locale0 = fastDateFormat0.getLocale();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = (-1098);
      int int1 = (-1056);
      String string0 = "Negative values should not be possible";
      Locale locale0 = new Locale("Negative values should not be possible");
      boolean boolean0 = locale0.hasExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1098), (-1056), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1056
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "A;<!V)$@3vE:|D858", (-1561), 0, 0, 0, 0, 0, (-700), (-898));
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = new FastDateFormat("A;<!V)$@3vE:|D858", simpleTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = null;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 2, timeZone0, (Locale) null);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      IntStream intStream0 = stringBuffer0.codePoints();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null, stringBuffer0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "1R";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("1R");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = (-2134);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-2134), 7);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 7
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("RGW;>Ox4AQ,", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      String string0 = fastDateFormat0.toString();
      boolean boolean0 = fastDateFormat0.equals(locale0);
      int int0 = fastDateFormat0.hashCode();
      int int1 = fastDateFormat0.getMaxLengthEstimate();
      String string1 = "g&`;n\\S#{'U[xA||?";
      int int2 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1218), "FastDateFormat[EEEE, MMMM d, yyyy]", 860, 0, 0, 1183, 1183, 0, 3, 2);
      // Undeclared exception!
      try { 
        simpleTimeZone0.getDisplayName(false, (-3965), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -3965
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.CHINA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      int int1 = 0;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-340), "G", 0, 0, 2, 0, (-340), 2501, 0, (-340), 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month -340
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = 370;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(370);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 370
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = (-741);
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-741), (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -741
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = (-1675);
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.KOREAN;
      Locale.setDefault(locale0);
      String string0 = locale0.getExtension('r');
      Locale locale1 = locale0.stripExtensions();
      String string1 = locale0.getDisplayName();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1675), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1675
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("\u0007'QS/", locale0);
      String string0 = fastDateFormat0.getPattern();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("\u0007'QS/");
      MockDate mockDate0 = new MockDate(0, 0, 0, 1, 0, 2226);
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.lang3.time.FastDateFormat");
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat1.format((-565L), stringBuffer1);
      StringBuffer stringBuffer3 = fastDateFormat1.format(0L, stringBuffer2);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("29LgZ#MKXe$k{_BY");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(14, (-3418));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -3418
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule";
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule", "T>dXrMyRx&");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(3325, 2, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 3325
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      int int0 = (-248);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-248), (-248), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -248
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, locale0);
      String string0 = fastDateFormat0.getPattern();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      Object object0 = fastDateFormat0.parseObject("~>EHo2)~", parsePosition0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 0, timeZone0, locale0);
      String string0 = "`FG0^qeN-";
      TimeZone timeZone1 = TimeZone.getTimeZone("`FG0^qeN-");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone1, locale0);
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat1.formatToCharacterIterator(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(Integer.MIN_VALUE, (-1), timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      int int0 = 1719;
      int int1 = (-4712);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1719, "", 1719, 1719, 1719, 1719, (-653), (-653), 899, (-4712), 899, 1719, 1719);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 1719
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("$|ZK");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, (-315), 3, (-315), (-113), 1);
      String string0 = fastDateFormat1.format((Calendar) mockGregorianCalendar0);
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-113), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -113
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "kS,ds<", 0, 0, 0, 0, 0, 3150, 0, (-1111), 0, 0, 5);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = fastDateFormat0.format(calendar0);
      simpleTimeZone0.setDSTSavings(1);
      Object object0 = fastDateFormat0.clone();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      MockDate mockDate0 = new MockDate((-1111), 0, 5);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 3150);
      StringBuffer stringBuffer1 = mockSimpleDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      // Undeclared exception!
      try { 
        decimalFormat0.format((Object) null, stringBuffer1, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1708, 1708, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1708
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(":", locale0);
      boolean boolean0 = fastDateFormat0.equals(":");
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(600, 1734, (-575));
      String string0 = fastDateFormat1.format((Calendar) mockGregorianCalendar0);
      MockDate mockDate0 = new MockDate(3, 4252, (-540), 26, 1734, 2);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ":");
      FieldPosition fieldPosition0 = new FieldPosition((-540));
      StringBuffer stringBuffer1 = numberFormat0.format((double) 600, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      StringBuffer stringBuffer3 = new StringBuffer();
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, (-1802), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -1802
         //
         verifyException("java.util.TimeZone", e);
      }
  }
}
