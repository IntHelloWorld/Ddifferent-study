/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:43:57 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.ChoiceFormat;
import java.text.DateFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.zone.ZoneRules;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 1, (TimeZone) null, locale0);
      Locale locale1 = locale0.stripExtensions();
      String string0 = fastDateFormat0.getPattern();
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", locale0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateTimeInstance(1, 0);
      FastDateFormat fastDateFormat4 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat5 = FastDateFormat.getDateInstance(3, (TimeZone) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 0);
      StringWriter stringWriter0 = new StringWriter(2);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat3.format((Calendar) mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = locale0.getDisplayCountry();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Canada");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.UK;
      Set<Character> set0 = locale1.getExtensionKeys();
      String string0 = locale1.toLanguageTag();
      String[] stringArray0 = Locale.getISOCountries();
      String string1 = locale0.getDisplayLanguage(locale1);
      String string2 = locale0.getScript();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      String string3 = fastDateFormat0.format(2071L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "", 3, 0, 3, 2, 1, 3, 3, 2);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("French", locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.UK;
      Set<Character> set0 = locale1.getExtensionKeys();
      String string0 = locale1.toLanguageTag();
      String[] stringArray0 = Locale.getISOCountries();
      String string1 = locale0.getDisplayLanguage(locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      String string2 = fastDateFormat0.format(2071L);
      String[] stringArray1 = Locale.getISOLanguages();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "", 3, 0, 3, 2, 1, 3, 3, 2);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("French", locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = linkedList0.poll();
      Collection<Locale> collection0 = null;
      Locale locale1 = Locale.lookup(linkedList0, (Collection<Locale>) null);
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) null);
      // Undeclared exception!
      try { 
        locale0.getDisplayLanguage((Locale) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.ENGLISH;
      String string0 = locale0.getDisplayLanguage(locale1);
      String string1 = locale0.getDisplayVariant(locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      String string2 = fastDateFormat0.format((-1458L));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = locale0.getDisplayCountry();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, locale0);
      String string1 = fastDateFormat0.format((long) 1);
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("00:00:00 GMT", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.UK;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Locale locale1 = Locale.TAIWAN;
      Object object0 = locale0.clone();
      String string0 = locale0.getDisplayName(locale1);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      mockSimpleDateFormat0.setTimeZone(timeZone0);
      boolean boolean0 = timeZone0.observesDaylightTime();
      ZoneId zoneId0 = timeZone0.toZoneId();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      String string1 = fastDateFormat0.format((-539L));
      boolean boolean1 = fastDateFormat0.getTimeZoneOverridesCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      StringBuffer stringBuffer0 = new StringBuffer();
      MockDate mockDate0 = new MockDate(1, (-1), 0, (-682), 0);
      boolean boolean2 = timeZone0.inDaylightTime(mockDate0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer1 = stringBuffer0.append((-3333));
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-1760));
      fieldPosition0.setEndIndex(0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale1);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(2, timeZone0);
      String string2 = fastDateFormat0.getPattern();
      String string3 = fastDateFormat2.format((Calendar) mockGregorianCalendar0);
      StringBuffer stringBuffer3 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1737;
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int int1 = 0;
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale1 = Locale.PRC;
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, timeZone0, locale1);
      int int2 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 1, 0, 0, (-59), 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}8lk*Lom*}r;%!ME{<[";
      stringArray0[1] = "";
      stringArray0[2] = "";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("<Hkgn:", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "+$JK2QnA {D;v\\-";
      String string1 = "!u=~&8,l\\xgW";
      Locale locale0 = Locale.FRENCH;
      String string2 = locale0.getDisplayLanguage();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("!u=~&8,lxgW", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "S7x;NiTQ$=+O-jR6";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("S7x;NiTQ$=+O-jR6");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "The pattern must not be null");
      Locale locale0 = new Locale("bo{67$r%)yn", "");
      FastDateFormat fastDateFormat0 = new FastDateFormat("a", simpleTimeZone0, locale0);
      String string0 = FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, false, 0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, true, 1624, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 1624
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "Yv7+hiQonR?SQ`t+";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Yv7+hiQonR?SQ`t+");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      ZoneId zoneId0 = timeZone0.toZoneId();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1, "", 0, 100, (-2908), 5, 5, 3, (-227), 0, (-1), (-1), 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week 2908
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate(0, (-1), 0);
      boolean boolean0 = timeZone0.inDaylightTime(mockDate0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      boolean boolean1 = mockDate0.before(date0);
      boolean boolean2 = timeZone0.inDaylightTime(mockDate0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ")|:F{5:-&m^.}&<v4sY", (-436), 0, 0, 0, 0, 0, (-436), 0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0);
      MockDate mockDate0 = new MockDate(1728L);
      long long0 = MockDate.UTC(1, 0, 1, 0, (-436), (-870));
      String string0 = fastDateFormat1.format((Date) mockDate0);
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1), (-1), (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "{3e&'cia76H!bX";
      String string1 = "";
      Locale locale0 = Locale.ITALY;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("{3e&'cia76H!bX", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      String string0 = "2 !";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-721), "2 !");
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-721), (TimeZone) simpleTimeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -721
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(256, timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 256
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-2206), timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2206
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale locale0 = Locale.lookup(linkedList0, list1);
      FastDateFormat fastDateFormat0 = new FastDateFormat("hu|rYa(E<n;11", timeZone0, (Locale) null);
      Locale locale1 = fastDateFormat0.getLocale();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 1;
      Locale locale0 = Locale.FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, locale0);
      String string0 = fastDateFormat0.toString();
      int int1 = fastDateFormat0.hashCode();
      String string1 = "e|I%4+'cB/oclx^gJ\"";
      ParsePosition parsePosition0 = new ParsePosition((-4438));
      Object object0 = fastDateFormat0.parseObject("e|I%4+'cB/oclx^gJ\"", parsePosition0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "e|I%4+'cB/oclx^gJ\"");
      Locale locale1 = Locale.ROOT;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(">,n29$^@ippF~", (TimeZone) simpleTimeZone0, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3600000, "yDQ},8w>`d<~9{+b4%");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, (-322), (-1414));
      Date date0 = mockGregorianCalendar0.getTime();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale locale0 = null;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("Friday, April 16, 0029", 2);
      } catch(IllegalArgumentException e) {
         //
         // weight=2.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
      StringBuffer stringBuffer0 = new StringBuffer("'SUdc3A<}[^}oQXG=$O");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) locale0, stringBuffer0, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.util.Locale
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      FieldPosition fieldPosition0 = new FieldPosition(0);
      StringBuffer stringBuffer1 = numberFormat0.format((double) 3, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((-4140L), stringBuffer1);
      StringBuffer stringBuffer3 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = locale0.getDisplayScript();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3);
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(1, (TimeZone) null);
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0);
      ParsePosition parsePosition0 = new ParsePosition(2);
      Object object0 = fastDateFormat0.parseObject((String) null, parsePosition0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      fastDateFormat0.init();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3);
      StringWriter stringWriter0 = new StringWriter(2);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        fastDateFormat0.applyRules((Calendar) null, stringBuffer0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("ZeSj&Ia%KOIHv76jRR");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("l_\"[x-SVs:@8z1u(#u:", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.TAIWAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      String string1 = "vVGvX7tY]SUi";
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      TimeZone timeZone0 = TimeZone.getTimeZone("vVGvX7tY]SUi");
      ZoneId zoneId0 = timeZone0.toZoneId();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, 3528, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 3528
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = Locale.CANADA_FRENCH;
      String string0 = locale0.getDisplayLanguage(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, true, (-1), locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      boolean boolean0 = fastDateFormat0.equals(locale0);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.CHINA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) null, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 1, (TimeZone) null, locale0);
      Locale locale1 = locale0.stripExtensions();
      String string0 = fastDateFormat0.getPattern();
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("ahh'\u65F6'mm'\u5206'ss'\u79D2'");
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: ahh'\u65F6'mm'\u5206'ss'\u79D2'
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1311, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1311
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.UK;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Locale locale1 = Locale.TAIWAN;
      Object object0 = locale0.clone();
      String string0 = locale0.getDisplayName(locale1);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      mockSimpleDateFormat0.setTimeZone(timeZone0);
      boolean boolean0 = timeZone0.observesDaylightTime();
      ZoneId zoneId0 = timeZone0.toZoneId();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      String string1 = fastDateFormat0.format((-539L));
      boolean boolean1 = fastDateFormat0.getTimeZoneOverridesCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      StringBuffer stringBuffer0 = new StringBuffer();
      MockDate mockDate0 = new MockDate(1, (-1), 0, (-682), 0);
      boolean boolean2 = timeZone0.inDaylightTime(mockDate0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer1 = stringBuffer0.append((-3304));
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-1760));
      fieldPosition0.setEndIndex(0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale1);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(2, timeZone0);
      String string2 = fastDateFormat0.getPattern();
      String string3 = fastDateFormat2.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("iD)oVMo7XN1Yw`");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(2);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) null, stringBuffer0, (FieldPosition) null);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int int0 = fastDateFormat0.hashCode();
      long long0 = (-644L);
      MockDate mockDate0 = new MockDate((-144), 0, 1, 0, 0);
      // Undeclared exception!
      try { 
        Date.from((Instant) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      fastDateFormat0.init();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral";
      Locale locale0 = Locale.GERMANY;
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      String string0 = timeZone0.getDisplayName(false, 0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      String string1 = fastDateFormat0.getPattern();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-1796);
      Locale locale0 = Locale.US;
      Locale locale1 = locale0.stripExtensions();
      Object object0 = locale0.clone();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1796), locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1796
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 1014;
      TimeZone timeZone0 = TimeZone.getTimeZone("F?F;C`af&Fst||ecTFk");
      TimeZone timeZone1 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = linkedHashSet0.add("no<");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1014, 1014, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1014
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = locale0.getDisplayCountry();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      String string1 = fastDateFormat0.format((long) 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("0 h 00 GMT", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(" /{~", locale0);
      String string0 = fastDateFormat0.format(2490L);
      String string1 = "";
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      String string2 = locale0.getDisplayVariant();
      intArray0[1] = 2;
      intArray0[2] = (-1316);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("`<Ja!Jq{2");
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Object object0 = timeZone0.clone();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("`<Ja!Jq{2", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale1);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale2 = Locale.PRC;
      String string0 = locale2.getDisplayLanguage();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale2);
      String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      TimeZone timeZone1 = fastDateFormat0.getTimeZone();
      String string2 = "";
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(3, "", 6, 6576, 163, 2, 6, (-1585), (-2042), 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week 163
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "FastDateFormat[";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("FastDateFormat[", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("kW=3-^93 S)5", locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-2987);
      intArray0[1] = 0;
      intArray0[2] = 3;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 3;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("yo~ D[[m", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale locale0 = new Locale("", "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
      fastDateFormat1.init();
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", locale0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TimeZoneNameRule", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 74;
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(74, 0, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 74
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "U";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2881, "U");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(93, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 93
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("&/vPg");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "N 9I`1>@3:KX*+]9";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("N 9I`1>@3:KX*+]9");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(12, 1, (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 12
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(3009, 2478, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2478
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = (-1611);
      String string0 = "Z,_;1v";
      TimeZone timeZone0 = TimeZone.getTimeZone("Z,_;1v");
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1611), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1611
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-3640));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = new FastDateFormat("Negative values should not be possible", timeZone0, locale0);
      Object object0 = timeZone0.clone();
      String string0 = locale0.toLanguageTag();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, locale0);
      ZoneRules zoneRules0 = zoneOffset0.getRules();
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("Negative values should not be possible", (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null);
      Locale locale0 = Locale.TAIWAN;
      String string0 = locale0.getDisplayScript();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
      int int0 = 0;
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(804, (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 804
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 3620;
      String string0 = "Gs_0$M4yun<o_S58H=";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3620, "Gs_0$M4yun<o_S58H=");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string1 = simpleTimeZone0.getDisplayName(locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Xbi^y(eAJS|TuY", (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2047), "^Y@gBwV.P");
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      Locale locale0 = Locale.FRANCE;
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      String string0 = fastDateFormat3.getPattern();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-290), 3);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -290
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1148), "");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(894, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 894
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1451, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1451
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2047), "^Y@gBwV.P");
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRANCE;
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      FastDateFormat fastDateFormat4 = FastDateFormat.getInstance();
      String string0 = fastDateFormat4.getPattern();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-290), 3);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -290
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("mAwVu\"Z5QCo0S,", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      MockDate mockDate0 = new MockDate(2, 0, (-3043), (-3043), 3);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      String string1 = fastDateFormat0.getPattern();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 230;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(230);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 230
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance();
      TimeZone timeZone0 = TimeZone.getTimeZone("P8GvIn`*pZu$8_V:7EQ");
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("qC--?[`");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(992);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 992
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-4195));
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -4195
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1);
      Locale locale0 = fastDateFormat0.getLocale();
      String string0 = fastDateFormat0.format((long) 1);
      int int0 = (-3860);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-2754), "January 1, 1970 12:00:00 AM GMT", 0, 3, 1, 0, 0, 0, (-2709), 2, 2, 81, 58);
      } catch(IllegalArgumentException e) {
         //
         // Illegal end day of week in month -2709
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = 58;
      String string0 = "B#he*N";
      // Undeclared exception!
      try { 
        ZoneOffset.of("B#he*N");
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, non numeric characters found: B#he*N
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Locale locale0 = Locale.UK;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Locale locale1 = Locale.TAIWAN;
      Locale locale2 = (Locale)locale0.clone();
      String string0 = locale0.getDisplayName(locale1);
      ZoneInfo zoneInfo0 = (ZoneInfo)mockSimpleDateFormat0.getTimeZone();
      mockSimpleDateFormat0.setTimeZone(zoneInfo0);
      boolean boolean0 = zoneInfo0.observesDaylightTime();
      ZoneId zoneId0 = zoneInfo0.toZoneId();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) zoneInfo0);
      String string1 = fastDateFormat0.format((-539L));
      boolean boolean1 = fastDateFormat0.getTimeZoneOverridesCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
      StringBuffer stringBuffer0 = new StringBuffer();
      MockDate mockDate0 = new MockDate(1, (-1), 0, (-682), 0);
      boolean boolean2 = zoneInfo0.inDaylightTime(mockDate0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
      fieldPosition0.setEndIndex(0);
      StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale1);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(2, (TimeZone) zoneInfo0);
      String string2 = fastDateFormat0.getPattern();
      String string3 = fastDateFormat2.format((Calendar) mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField", (TimeZone) zoneInfo0, locale2);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      boolean boolean0 = linkedHashSet0.addAll(list0);
      // Undeclared exception!
      try { 
        ZoneId.of("0a]u");
      } catch(DateTimeException e) {
         //
         // Invalid ID for region-based ZoneId, invalid format: 0a]u
         //
         verifyException("java.time.ZoneRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.UK;
      Set<Character> set0 = locale1.getExtensionKeys();
      String string0 = locale1.toLanguageTag();
      String[] stringArray0 = Locale.getISOCountries();
      String string1 = locale0.getDisplayLanguage(locale1);
      String string2 = locale0.getScript();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      String string3 = fastDateFormat0.format(2071L);
      String[] stringArray1 = Locale.getISOLanguages();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "", 3, 0, 3, 2, 1, 3, 3, 2);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("French", locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      int int0 = (-2136);
      int int1 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "%E1c4D*d/x");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("%E1c4D*d/x");
      } catch(IllegalArgumentException e) {
         //
         // range=%e1c4d*d/x
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      String string0 = locale0.toLanguageTag();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(3, locale0);
      TimeZone timeZone0 = TimeZone.getTimeZone("it-IT");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(2282, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 2282
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-721), "2 !");
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(3, (TimeZone) simpleTimeZone0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      String string0 = fastDateFormat0.format(1L);
      long long0 = 0L;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringBuffer stringBuffer0 = new StringBuffer("b:%P");
      StringBuffer stringBuffer1 = fastDateFormat1.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 2;
      doubleArray0[4] = (double) 3;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "0Gp|BkF(o&5M?(L";
      stringArray0[1] = "2 !";
      stringArray0[2] = "2 !";
      stringArray0[3] = "1/1/70 12:00 AM";
      stringArray0[4] = "1/1/70 12:00 AM";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      StringBuffer stringBuffer2 = new StringBuffer(0);
      FieldPosition fieldPosition0 = new FieldPosition(3071);
      StringBuffer stringBuffer3 = choiceFormat0.format((long) 2, stringBuffer2, fieldPosition0);
      // Undeclared exception!
      try { 
        choiceFormat0.format((Object) "2 !", stringBuffer3, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.NumberFormat", e);
      }
  }
}
