/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:14:10 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = complex0.ZERO.atan();
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = complex0.createComplex(1.0, 0.0);
      try { 
        complex4.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex0.INF.negate();
      Object object0 = complex3.I.readResolve();
      int int0 = complex3.NaN.hashCode();
      Complex complex5 = complex3.NaN.tan();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex5.ONE.asin();
      Complex complex8 = complex7.divide(complex0);
      Complex complex9 = complex7.NaN.tanh();
      Complex complex10 = complex3.ZERO.sqrt();
      Complex complex11 = complex5.I.exp();
      ComplexField complexField0 = complex7.INF.getField();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex4.equals(complex0);
      Complex complex12 = complex3.cos();
      Complex complex13 = complex0.tan();
      Object object1 = complex13.I.readResolve();
      Complex complex14 = complex13.negate();
      Complex complex15 = Complex.I;
      String string0 = complex0.toString();
      int int1 = 0;
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-772.8259252), 920.0);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex2.INF.multiply(complex0);
      ComplexField complexField0 = complex0.I.getField();
      List<Complex> list0 = complex0.ONE.nthRoot(2483);
      ComplexField complexField1 = complex0.getField();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex2.ZERO.sqrt();
      Complex complex7 = complex0.ONE.sqrt();
      int int0 = complex4.hashCode();
      Complex complex8 = complex0.asin();
      ComplexField complexField2 = complex8.ONE.getField();
      Complex complex9 = complex1.add(complex0);
      Complex complex10 = complex0.tanh();
      boolean boolean0 = complex1.isInfinite();
      Complex complex11 = complex10.exp();
      Complex complex12 = complex4.pow(complex7);
      try { 
        complex11.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      double double0 = (-939.420085988944);
      Complex complex2 = complex1.INF.createComplex((-939.420085988944), (-939.420085988944));
      int int0 = complex0.I.hashCode();
      Complex complex3 = complex0.I.pow(complex1);
      Complex complex4 = complex3.ONE.tan();
      int int1 = 7;
      int int2 = complex3.hashCode();
      Complex complex5 = complex1.I.multiply((double) 7);
      List<Complex> list0 = complex1.nthRoot(7);
      try { 
        complex3.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(16.234293, 508.4);
      Complex complex1 = complex0.INF.sqrt();
      List<Complex> list0 = complex0.I.nthRoot(142);
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.ONE.sin();
      double double1 = complex0.getReal();
      Object object0 = complex0.INF.readResolve();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.I.atan();
      Complex complex7 = complex0.NaN.asin();
      Complex complex8 = complex2.I.cosh();
      Complex complex9 = complex0.exp();
      Complex complex10 = complex9.divide(complex1);
      Complex complex11 = complex6.tanh();
      Complex complex12 = complex11.NaN.multiply((-326.47849281151));
      ComplexField complexField0 = complex12.INF.getField();
      Complex complex13 = complex11.ONE.sinh();
      Complex complex14 = complex13.ZERO.atan();
      Object object1 = complex1.readResolve();
      double double2 = complex2.getArgument();
      Complex complex15 = complex0.add(complex7);
      Complex complex16 = complex2.multiply((-1433.278));
      Complex complex17 = complex2.acos();
      Complex complex18 = complex15.sqrt1z();
      Complex complex19 = complex5.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex3.ONE.acos();
      Complex complex6 = complex5.INF.multiply(complex1);
      Complex complex7 = complex1.pow(complex6);
      Complex complex8 = complex5.NaN.tanh();
      int int0 = complex0.hashCode();
      Complex complex9 = complex8.INF.tan();
      Complex complex10 = complex4.NaN.multiply(Double.NEGATIVE_INFINITY);
      Complex complex11 = complex9.ZERO.acos();
      Complex complex12 = complex0.conjugate();
      double double0 = complex1.ONE.getArgument();
      Complex complex13 = complex12.ONE.atan();
      Complex complex14 = complex8.NaN.sqrt1z();
      boolean boolean0 = complex12.isNaN();
      Complex complex15 = complex3.ZERO.pow(complex4);
      Complex complex16 = complex15.I.divide(complex8);
      Complex complex17 = complex16.ZERO.sinh();
      Complex complex18 = complex8.tan();
      double double1 = complex18.getArgument();
      Complex complex19 = complex5.sqrt1z();
      Complex complex20 = complex19.ZERO.asin();
      Complex complex21 = complex5.ONE.exp();
      Complex complex22 = complex15.INF.sinh();
      Object object0 = complex18.ONE.readResolve();
      Object object1 = complex22.I.readResolve();
      double double2 = complex4.getImaginary();
      double double3 = complex3.abs();
      Complex complex23 = complex6.negate();
      Complex complex24 = complex12.tan();
      Complex complex25 = complex15.negate();
      Complex complex26 = complex18.multiply(Double.NEGATIVE_INFINITY);
      Complex complex27 = complex26.asin();
      Complex complex28 = complex7.exp();
      Complex complex29 = complex27.asin();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Object object0 = complex2.readResolve();
      Object object1 = complex2.ZERO.readResolve();
      int int0 = complex1.hashCode();
      Complex complex3 = complex0.ZERO.negate();
      Complex complex4 = complex2.I.subtract(complex1);
      Complex complex5 = complex3.I.tanh();
      Complex complex6 = complex0.ZERO.subtract(complex2);
      Complex complex7 = complex3.exp();
      String string0 = complex7.ONE.toString();
      Complex complex8 = complex7.NaN.sqrt1z();
      Object object2 = complex2.readResolve();
      Complex complex9 = complex1.asin();
      boolean boolean0 = complex2.isInfinite();
      boolean boolean1 = complex0.isNaN();
      Complex complex10 = complex3.multiply(complex1);
      boolean boolean2 = complex6.isNaN();
      Complex complex11 = complex2.cosh();
      Complex complex12 = complex11.NaN.sqrt1z();
      String string1 = complex1.I.toString();
      double double0 = complex3.getArgument();
      boolean boolean3 = complex1.isNaN();
      Complex complex13 = complex2.conjugate();
      Complex complex14 = complex6.cos();
      Complex complex15 = complex3.acos();
      int int1 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      double double0 = complex0.ONE.getArgument();
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex0.ZERO.atan();
      Complex complex7 = complex0.acos();
      String string0 = complex7.NaN.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex4.sqrt();
      boolean boolean1 = complex5.equals("");
      Complex complex9 = complex8.NaN.tan();
      Complex complex10 = complex6.I.multiply(complex7);
      Complex complex11 = complex1.ZERO.cos();
      Complex complex12 = complex8.cos();
      Complex complex13 = complex12.cosh();
      double double1 = complex1.getImaginary();
      Complex complex14 = complex4.ONE.negate();
      Complex complex15 = complex4.ONE.cos();
      Complex complex16 = complex5.ONE.sin();
      Complex complex17 = complex14.NaN.multiply(complex1);
      Complex complex18 = complex12.tan();
      Complex complex19 = complex8.sin();
      Complex complex20 = complex2.conjugate();
      Complex complex21 = complex0.multiply(Double.NaN);
      Complex complex22 = complex12.tanh();
      Complex complex23 = Complex.NaN;
      boolean boolean2 = complex14.equals(complex23);
      Complex complex24 = complex3.sinh();
      Complex complex25 = complex5.pow(complex6);
      Complex complex26 = complex4.sqrt();
      Complex complex27 = complex3.subtract(complex4);
      Complex complex28 = complex23.atan();
      Complex complex29 = complex22.sqrt();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex1.I.createComplex(1896.50972977, (-1.0));
      Complex complex5 = complex4.cos();
      String string0 = complex0.toString();
      double double0 = complex0.getImaginary();
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex1.divide(complex6);
      double double1 = complex6.I.abs();
      Complex complex8 = complex6.pow(complex7);
      Complex complex9 = complex6.ONE.cosh();
      Complex complex10 = complex7.atan();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex6.pow(complex11);
      Complex complex13 = complex11.sqrt();
      int int1 = complex7.hashCode();
      Complex complex14 = complex10.log();
      Complex complex15 = complex14.ZERO.tan();
      Complex complex16 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(595.4, 595.4);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.conjugate();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex3.INF.cosh();
      double double0 = complex4.NaN.getArgument();
      Complex complex5 = complex3.INF.cosh();
      Complex complex6 = complex5.I.divide(complex2);
      Object object0 = complex1.readResolve();
      boolean boolean1 = complex1.equals(object0);
      int int0 = complex2.hashCode();
      Complex complex7 = complex1.subtract(complex0);
      Complex complex8 = complex7.I.sqrt1z();
      String string0 = complex0.toString();
      Complex complex9 = complex7.sqrt();
      double double1 = complex1.abs();
      Complex complex10 = complex2.createComplex(1.0, 1.0);
      Complex complex11 = complex8.cosh();
      Complex complex12 = complex11.INF.multiply(complex0);
      Complex complex13 = complex11.ZERO.acos();
      Complex complex14 = complex0.multiply(complex2);
      Complex complex15 = complex7.I.sqrt1z();
      Complex complex16 = complex14.INF.tan();
      Complex complex17 = complex1.multiply(complex13);
      Complex complex18 = complex0.sqrt1z();
      double double2 = complex2.getReal();
      Complex complex19 = complex13.createComplex(1.0, 0.0);
      ComplexField complexField0 = complex18.getField();
      String string1 = complex0.toString();
      Complex complex20 = complex15.acos();
      Complex complex21 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      String string0 = complex1.toString();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.NaN.tanh();
      Complex complex5 = complex2.ONE.exp();
      double double0 = complex5.abs();
      Complex complex6 = complex1.NaN.sqrt1z();
      boolean boolean0 = complex1.equals("(NaN, NaN)");
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex2.ZERO.divide(complex0);
      Complex complex9 = complex7.ZERO.sinh();
      double double1 = complex9.I.getArgument();
      double double2 = complex5.getArgument();
      boolean boolean1 = complex5.equals("");
      Complex complex10 = complex7.subtract(complex5);
      Complex complex11 = complex10.ZERO.conjugate();
      Complex complex12 = complex11.ZERO.multiply(0.0);
      List<Complex> list0 = complex6.nthRoot(121);
      double double3 = complex1.getReal();
      Complex complex13 = complex10.divide(complex0);
      Complex complex14 = complex13.ONE.multiply(complex11);
      Complex complex15 = complex10.log();
      String string1 = complex3.toString();
      ComplexField complexField0 = complex10.getField();
      Complex complex16 = new Complex(0.0, (-0.16666666666666666));
      boolean boolean2 = complex9.equals(complex16);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.ZERO.add(complex0);
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex3.NaN.atan();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.pow(complex1);
      try { 
        complex5.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(11.0, 11.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.NaN.log();
      int int0 = complex0.NaN.hashCode();
      double double0 = complex3.getReal();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex2.conjugate();
      int int1 = complex5.ONE.hashCode();
      Complex complex6 = complex3.pow(complex5);
      Complex complex7 = complex0.INF.sqrt();
      Complex complex8 = complex6.INF.exp();
      Complex complex9 = complex1.cos();
      boolean boolean0 = complex9.isNaN();
      Complex complex10 = complex8.divide(complex1);
      Complex complex11 = complex1.ZERO.cosh();
      double double1 = complex8.getReal();
      Complex complex12 = complex3.negate();
      Complex complex13 = complex11.I.add(complex7);
      Complex complex14 = complex1.sqrt();
      Complex complex15 = complex14.INF.asin();
      boolean boolean1 = complex11.isNaN();
      double double2 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.toString();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex0.tan();
      ComplexField complexField0 = complex1.getField();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = Complex.NaN;
      boolean boolean0 = complex4.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-3442.35), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.sinh();
      double double0 = complex0.INF.getArgument();
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3247.0213981444303));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex2.NaN.asin();
      String string0 = complex2.INF.toString();
      Complex complex4 = complex0.I.cosh();
      double double0 = complex1.NaN.getArgument();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.tan();
      boolean boolean0 = complex4.isNaN();
      Complex complex7 = complex5.acos();
      Complex complex8 = complex6.multiply(Double.NaN);
      int int0 = complex8.hashCode();
      Complex complex9 = complex1.log();
      Complex complex10 = complex9.INF.negate();
      Complex complex11 = complex10.INF.pow(complex6);
      Complex complex12 = complex5.sin();
      Complex complex13 = complex8.I.asin();
      Complex complex14 = complex5.asin();
      String string1 = complex8.toString();
      Complex complex15 = complex0.log();
      Complex complex16 = complex0.cos();
      boolean boolean1 = complex9.equals(complex12);
      Complex complex17 = complex9.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1327.9);
      Complex complex1 = complex0.atan();
      double double0 = complex1.getReal();
      Complex complex2 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex3.NaN.subtract(complex2);
      double double0 = complex0.getReal();
      boolean boolean0 = complex1.isInfinite();
      Complex complex5 = complex0.ZERO.cos();
      double double1 = complex2.getArgument();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex3.asin();
      Complex complex8 = complex7.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.createComplex((-1760.382036217), (-1760.382036217));
      Object object0 = complex2.INF.readResolve();
      double double0 = complex2.ONE.getArgument();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex2.sinh();
      String string0 = complex3.INF.toString();
      Complex complex6 = complex4.pow(complex5);
      Complex complex7 = complex3.add(complex4);
      Complex complex8 = complex5.NaN.atan();
      Complex complex9 = complex6.add(complex0);
      Complex complex10 = complex9.INF.pow(complex8);
      double double1 = complex9.getArgument();
      boolean boolean0 = complex1.isInfinite();
      double double2 = complex10.getImaginary();
      Complex complex11 = complex7.acos();
      ComplexField complexField0 = complex11.I.getField();
      Complex complex12 = complex2.exp();
      List<Complex> list0 = complex9.nthRoot(254);
      Complex complex13 = complex1.INF.sinh();
      Complex complex14 = complex4.ONE.conjugate();
      int int0 = complex5.hashCode();
      Complex complex15 = complex9.subtract(complex5);
      Complex complex16 = complex15.acos();
      ComplexField complexField1 = complex16.NaN.getField();
      Complex complex17 = complex9.cosh();
      Complex complex18 = complex2.atan();
      double double3 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.createComplex((-1317.730247590017), 2372.4395125);
      String string0 = complex1.toString();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex4.ZERO.divide(complex3);
      Object object0 = complex5.NaN.readResolve();
      Complex complex6 = complex3.I.tanh();
      Complex complex7 = complex5.INF.asin();
      Complex complex8 = complex7.multiply((-1317.730247590017));
      Complex complex9 = complex1.negate();
      ComplexField complexField0 = complex1.getField();
      double double0 = complex1.getReal();
      Complex complex10 = complex9.conjugate();
      Complex complex11 = new Complex(3888.60341, 2372.4395125);
      Complex complex12 = complex4.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-64.3355198753432), 0.0);
      Complex complex1 = complex0.INF.createComplex(0.0, 0.0);
      Complex complex2 = complex0.ONE.add(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.I.add(complex1);
      Complex complex7 = complex6.I.sqrt1z();
      Complex complex8 = complex6.INF.conjugate();
      String string0 = complex5.toString();
      double double0 = complex5.I.getArgument();
      Complex complex9 = complex0.NaN.acos();
      double double1 = complex3.getArgument();
      Complex complex10 = complex3.cosh();
      double double2 = complex3.getImaginary();
      Complex complex11 = complex0.createComplex((-64.3355198753432), 0.0);
      Complex complex12 = complex0.sqrt();
      double double3 = complex12.abs();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex12.divide(complex13);
      List<Complex> list0 = complex12.nthRoot(17);
      Object object0 = new Object();
      boolean boolean1 = complex10.equals(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.INF.multiply(0.99);
      String string0 = complex2.ZERO.toString();
      Complex complex3 = complex0.INF.divide(complex2);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.INF.multiply(complex1);
      Complex complex6 = complex1.INF.pow(complex4);
      Complex complex7 = complex3.I.atan();
      Complex complex8 = complex7.ZERO.conjugate();
      Complex complex9 = complex2.NaN.sinh();
      Complex complex10 = complex9.sin();
      Complex complex11 = complex10.ZERO.pow(complex7);
      Complex complex12 = complex11.sqrt1z();
      double double1 = complex0.getReal();
      int int0 = complex1.hashCode();
      Complex complex13 = complex0.divide(complex1);
      Complex complex14 = complex13.tanh();
      Complex complex15 = complex14.NaN.exp();
      Complex complex16 = complex0.conjugate();
      Complex complex17 = complex16.ONE.asin();
      Complex complex18 = complex17.ONE.acos();
      Complex complex19 = complex18.I.pow(complex10);
      Object object0 = complex0.readResolve();
      List<Complex> list0 = complex9.nthRoot(43);
      Complex complex20 = complex1.multiply(0.99);
      Complex complex21 = complex20.NaN.acos();
      int int1 = complex15.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.INF.log();
      double double0 = complex2.abs();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex0.createComplex(1.0, 1.0);
      Complex complex6 = complex5.NaN.subtract(complex2);
      List<Complex> list0 = complex6.ONE.nthRoot(37);
      Complex complex7 = complex0.cos();
      Complex complex8 = complex2.divide(complex4);
      Complex complex9 = complex8.NaN.sinh();
      Complex complex10 = complex9.INF.pow(complex7);
      Complex complex11 = complex8.ZERO.negate();
      Complex complex12 = complex8.ZERO.sqrt1z();
      Complex complex13 = complex6.sqrt1z();
      Complex complex14 = complex6.sqrt1z();
      Complex complex15 = complex14.subtract(complex9);
      Complex complex16 = complex6.sqrt1z();
      Complex complex17 = complex13.subtract(complex14);
      Complex complex18 = complex11.atan();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex0.cosh();
      double double0 = complex6.INF.getArgument();
      Complex complex7 = complex1.ONE.exp();
      Complex complex8 = complex3.ONE.createComplex(1.570796251296997, 1.0);
      Complex complex9 = complex8.NaN.subtract(complex3);
      Complex complex10 = complex1.multiply(complex3);
      Complex complex11 = complex2.conjugate();
      Complex complex12 = complex1.INF.pow(complex5);
      Complex complex13 = complex8.ZERO.sinh();
      double double1 = complex2.getArgument();
      double double2 = complex9.getReal();
      Complex complex14 = complex1.negate();
      Object object0 = complex14.ONE.readResolve();
      String string0 = complex10.toString();
      Complex complex15 = complex3.sin();
      Complex complex16 = complex8.NaN.cos();
      Complex complex17 = complex15.sqrt();
      Complex complex18 = complex7.log();
      double double3 = complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.ZERO.sqrt();
      int int0 = complex0.NaN.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      List<Complex> list0 = complex1.INF.nthRoot(17);
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.multiply(0.0);
      boolean boolean0 = complex3.isInfinite();
      Complex complex4 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.sqrt1z();
      String string0 = complex2.ZERO.toString();
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex0.NaN.pow(complex1);
      ComplexField complexField0 = complex0.getField();
      String string1 = complex5.toString();
      Complex complex6 = complex3.tan();
      double double0 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-3028.31), 2090.6425);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex2.ONE.atan();
      double double0 = complex0.abs();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex3.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex7 = complex6.ONE.asin();
      Complex complex8 = complex0.NaN.tanh();
      Complex complex9 = complex6.asin();
      Complex complex10 = complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tan();
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.INF.subtract(complex1);
      double double1 = complex0.getImaginary();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.ONE.divide(complex1);
      Complex complex4 = complex1.I.cosh();
      Complex complex5 = complex4.acos();
      double double0 = complex3.I.abs();
      Complex complex6 = complex4.INF.tan();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex3.subtract(complex2);
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex3.subtract(complex7);
      Complex complex11 = Complex.I;
      boolean boolean0 = complex1.equals(complex11);
      boolean boolean1 = complex11.equals((Object) null);
      Complex complex12 = complex1.multiply(complex0);
      Complex complex13 = complex0.NaN.negate();
      Complex complex14 = complex12.ZERO.subtract(complex5);
      Complex complex15 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.toString();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.INF.subtract(complex1);
      double double0 = complex0.getArgument();
      String string0 = complex1.I.toString();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.cosh();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.NaN.tanh();
      double double1 = complex5.abs();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex7.ONE.divide(complex3);
      double double2 = complex4.getImaginary();
      Complex complex9 = complex3.add(complex1);
      Complex complex10 = complex9.ZERO.asin();
      double double3 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ONE.toString();
      double double0 = complex0.getReal();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.subtract(complex0);
      boolean boolean0 = complex1.isNaN();
      Complex complex3 = complex1.cosh();
      String string0 = complex3.toString();
      Object object0 = complex3.readResolve();
      double double0 = complex1.INF.abs();
      Complex complex4 = complex3.createComplex(0.0, (-2178.19179334));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Object object0 = complex0.ZERO.readResolve();
      double double1 = complex0.ZERO.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.NaN.exp();
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex3.negate();
      double double2 = complex6.abs();
      Complex complex7 = complex0.ZERO.createComplex(Double.NaN, 0.0);
      Complex complex8 = complex1.ZERO.negate();
      List<Complex> list0 = complex8.INF.nthRoot(51);
      Complex complex9 = complex3.sqrt1z();
      Complex complex10 = complex0.divide(complex1);
      boolean boolean0 = complex10.isInfinite();
      double double3 = complex3.getReal();
      String string0 = complex0.ZERO.toString();
      Complex complex11 = complex3.add(complex0);
      Complex complex12 = complex11.atan();
      double double4 = complex12.ZERO.getArgument();
      double double5 = complex1.getArgument();
      double double6 = complex8.abs();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(2392.4620997, 976.447);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.INF.tanh();
      List<Complex> list0 = complex1.NaN.nthRoot(2218);
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.NaN.cosh();
      Complex complex5 = complex3.NaN.exp();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex3.cos();
      boolean boolean0 = complex2.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-2083.177835797), (-2083.177835797));
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex2.ZERO.conjugate();
      String string0 = complex1.NaN.toString();
      Complex complex5 = complex0.multiply(complex1);
      int int0 = complex5.ONE.hashCode();
      try { 
        complex5.ZERO.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(1246.8);
      String string0 = complex0.toString();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex1.cos();
      String string1 = complex3.toString();
      Complex complex4 = complex3.ZERO.multiply(complex0);
      Complex complex5 = complex3.multiply(0.0);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex1.I.sqrt();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex3.pow(complex8);
      boolean boolean0 = complex0.equals(complex8);
      Complex complex10 = complex4.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.subtract(complex1);
      double double0 = complex0.getReal();
      Complex complex3 = complex1.NaN.subtract(complex2);
      double double1 = complex1.abs();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex2.multiply(complex1);
      ComplexField complexField0 = complex4.getField();
      Complex complex6 = Complex.I;
      Complex complex7 = complex2.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.I.sin();
      Complex complex6 = complex0.ZERO.acos();
      Complex complex7 = Complex.I;
      Complex complex8 = complex4.divide(complex7);
      boolean boolean0 = complex8.isNaN();
      Complex complex9 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.acos();
      double double1 = complex2.getReal();
      Complex complex3 = complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.equals((Object) null);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(2853.51278, 2853.51278);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.ONE.multiply((-1561.683105837195));
      double double0 = complex3.ONE.abs();
      double double1 = complex0.getImaginary();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.subtract(complex2);
      double double2 = complex2.getImaginary();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex0.createComplex((-1.0), 13.0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.NaN.exp();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex2.asin();
      List<Complex> list0 = complex0.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.ZERO.multiply((-1545.4732849425804));
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex0.conjugate();
      double double0 = complex2.abs();
      double double1 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.add(complex1);
      int int1 = complex1.NaN.hashCode();
      Complex complex4 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.sin();
      int int0 = (-1248);
      try { 
        complex1.ONE.nthRoot((-1248));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,248
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tan();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.createComplex(4.455505956692757, 4.455505956692757);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.add(complex0);
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex0.ONE.tan();
      Complex complex6 = new Complex(487.083261, (-1044.609));
      boolean boolean0 = complex3.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.NaN.tanh();
      double double0 = complex0.abs();
      Complex complex2 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.sinh();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex3 = complex1.cosh();
      double double0 = Double.NaN;
      Complex complex4 = complex3.multiply(Double.NaN);
      Complex complex5 = complex4.I.tanh();
      ComplexField complexField0 = complex4.NaN.getField();
      int int0 = (-683);
      Complex complex6 = complex4.ZERO.sqrt1z();
      try { 
        complex4.nthRoot((-683));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -683
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex0.INF.asin();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex3.I.cosh();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.NaN.subtract(complex0);
      Complex complex8 = complex0.ONE.conjugate();
      Object object0 = complex7.readResolve();
      Complex complex9 = complex0.ONE.conjugate();
      Complex complex10 = complex9.ONE.asin();
      Complex complex11 = complex6.I.subtract(complex5);
      Complex complex12 = complex5.ZERO.pow(complex10);
      Complex complex13 = complex12.ZERO.conjugate();
      try { 
        complex7.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex0.ZERO.pow(complex1);
      Complex complex4 = complex1.INF.sqrt();
      Complex complex5 = complex3.ZERO.sqrt();
      Complex complex6 = complex3.NaN.sqrt();
      Complex complex7 = complex3.ONE.sinh();
      Complex complex8 = complex1.ZERO.asin();
      Complex complex9 = complex7.divide(complex2);
      Complex complex10 = complex7.INF.cos();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      String string0 = complex0.INF.toString();
      double double0 = complex5.getArgument();
      Complex complex11 = complex1.createComplex((-3618.6475), (-3618.6475));
      Complex complex12 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.cos();
      String string0 = complex2.ONE.toString();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.ONE.pow(complex2);
      Complex complex6 = complex5.I.sinh();
      double double0 = complex3.NaN.getArgument();
      Complex complex7 = complex3.divide(complex2);
      Complex complex8 = complex7.NaN.exp();
      Object object0 = new Object();
      boolean boolean0 = complex4.equals(object0);
      Complex complex9 = complex3.sin();
      Complex complex10 = complex2.conjugate();
      Complex complex11 = complex10.ONE.negate();
      double double1 = complex9.abs();
      Complex complex12 = complex8.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply(0.0);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.tan();
      List<Complex> list0 = complex0.nthRoot(913);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex4.ONE.log();
      Complex complex7 = complex0.multiply(complex3);
      Complex complex8 = complex0.ZERO.atan();
      Complex complex9 = complex5.ONE.createComplex(913, (-2702.40312735));
      Complex complex10 = complex5.I.atan();
      Complex complex11 = complex10.ONE.cosh();
      ComplexField complexField0 = complex11.getField();
      Complex complex12 = complex1.negate();
      Complex complex13 = complex12.ZERO.conjugate();
      Complex complex14 = complex1.sin();
      Complex complex15 = complex9.pow(complex1);
      boolean boolean0 = complex9.equals(complex12);
      double double0 = complex15.abs();
      Complex complex16 = complex3.I.negate();
      Complex complex17 = complex7.tan();
      boolean boolean1 = complex3.isInfinite();
      ComplexField complexField1 = complex7.getField();
      Complex complex18 = complex4.sqrt();
      Complex complex19 = complex13.multiply(complex10);
      Complex complex20 = complex18.sinh();
      Complex complex21 = complex1.log();
      Complex complex22 = complex4.conjugate();
      Complex complex23 = complex13.cosh();
      Complex complex24 = complex23.I.sqrt();
      ComplexField complexField2 = complex4.getField();
      boolean boolean2 = complex10.equals(complex3);
      Complex complex25 = complex16.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.ZERO.pow(complex2);
      Complex complex4 = complex3.ZERO.tan();
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.pow(complex2);
      ComplexField complexField1 = complex5.getField();
      Complex complex6 = complex0.tan();
      int int1 = complex1.hashCode();
      Complex complex7 = complex2.NaN.multiply(0.0);
      Complex complex8 = complex0.pow(complex6);
      Complex complex9 = complex8.ZERO.createComplex(0.0, 0.0);
      Complex complex10 = complex8.INF.asin();
      Complex complex11 = complex0.I.negate();
      Complex complex12 = complex8.multiply(complex1);
      Complex complex13 = complex4.sqrt();
      Complex complex14 = complex7.conjugate();
      Complex complex15 = complex14.I.sqrt1z();
      Complex complex16 = Complex.NaN;
      Complex complex17 = complex12.add(complex16);
      Complex complex18 = complex1.multiply(complex12);
      String string0 = complex17.toString();
      Complex complex19 = complex9.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex1.NaN.exp();
      Complex complex5 = complex0.INF.cosh();
      Complex complex6 = complex1.multiply(0.5039018405998233);
      Complex complex7 = complex6.ZERO.multiply(complex0);
      double double0 = complex6.getReal();
      Complex complex8 = complex5.INF.negate();
      Complex complex9 = complex2.I.pow(complex8);
      double double1 = complex1.getArgument();
      Complex complex10 = complex5.multiply(complex6);
      Complex complex11 = complex10.INF.sin();
      Complex complex12 = complex0.tan();
      Complex complex13 = complex12.NaN.add(complex3);
      Complex complex14 = complex12.ONE.cosh();
      Object object0 = complex14.NaN.readResolve();
      Complex complex15 = complex11.I.multiply(Double.NaN);
      int int0 = complex2.hashCode();
      Complex complex16 = complex6.cosh();
      Complex complex17 = Complex.INF;
      Complex complex18 = complex3.pow(complex17);
      Complex complex19 = complex2.log();
      Complex complex20 = complex11.sinh();
      Complex complex21 = complex3.sqrt1z();
      Complex complex22 = complex5.atan();
      Object object1 = complex21.readResolve();
      boolean boolean0 = complex9.isInfinite();
      boolean boolean1 = complex14.equals(complex0);
      Complex complex23 = complex7.log();
      Complex complex24 = complex6.multiply(complex7);
      double double2 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.createComplex((-2105.0), (-2105.0));
      Object object0 = complex2.readResolve();
      Complex complex4 = complex3.INF.add(complex1);
      Complex complex5 = complex2.ZERO.sin();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.ONE.conjugate();
      int int0 = complex1.hashCode();
      Complex complex9 = complex2.INF.subtract(complex1);
      Complex complex10 = complex2.add(complex3);
      Complex complex11 = complex10.INF.conjugate();
      Complex complex12 = complex1.asin();
      Complex complex13 = complex3.sin();
      Complex complex14 = complex3.ZERO.multiply(0.0);
      Complex complex15 = complex10.sin();
      Complex complex16 = complex15.I.asin();
      double double1 = complex13.getArgument();
      Object object1 = complex1.readResolve();
      Complex complex17 = complex5.cos();
      Complex complex18 = complex13.pow(complex6);
      Complex complex19 = complex18.conjugate();
      Complex complex20 = complex19.INF.sqrt1z();
      Complex complex21 = complex18.INF.atan();
      Complex complex22 = complex18.NaN.add(complex11);
      Object object2 = complex22.INF.readResolve();
      Complex complex23 = complex5.add(complex1);
      Complex complex24 = complex19.negate();
      Complex complex25 = complex24.NaN.tan();
      Complex complex26 = complex24.I.multiply(complex14);
      try { 
        complex22.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex2.ZERO.cosh();
      List<Complex> list0 = complex1.INF.nthRoot(253);
      List<Complex> list1 = complex0.NaN.nthRoot(253);
      double double0 = complex0.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.I.subtract(complex2);
      Complex complex6 = complex4.NaN.multiply((-695.963));
      Complex complex7 = complex6.ONE.divide(complex2);
      Complex complex8 = complex6.ONE.sin();
      Complex complex9 = complex1.ONE.acos();
      Complex complex10 = complex2.subtract(complex1);
      ComplexField complexField1 = complex1.getField();
      Complex complex11 = complex0.conjugate();
      boolean boolean0 = complex2.equals((Object) null);
      Complex complex12 = complex5.tan();
  }
}
