/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:14:21 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt1z();
      ComplexField complexField0 = complex1.INF.getField();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex2 = new Complex((-965.9), (-965.9));
      Complex complex3 = complex2.ZERO.add(complex0);
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = complex3.ONE.multiply(complex2);
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex0.pow(complex2);
      Complex complex8 = complex7.negate();
      Object object0 = complex2.readResolve();
      int int0 = complex4.ZERO.hashCode();
      String string0 = complex8.ONE.toString();
      List<Complex> list0 = complex7.NaN.nthRoot(4058);
      double double0 = complex4.INF.getArgument();
      Complex complex9 = complex2.multiply(2327.0426275302943);
      Object object1 = complex9.readResolve();
      Complex complex10 = complex4.sinh();
      double double1 = complex8.abs();
      int int1 = complex6.hashCode();
      double double2 = complex0.getArgument();
      int int2 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex0.ZERO.atan();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.I.asin();
      Complex complex9 = complex3.ONE.tan();
      Complex complex10 = complex3.cosh();
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex10.I.sin();
      Complex complex13 = complex11.NaN.tanh();
      int int0 = complex13.NaN.hashCode();
      Object object1 = complex10.readResolve();
      Complex complex14 = complex11.NaN.log();
      Complex complex15 = complex3.sinh();
      Complex complex16 = complex12.ONE.atan();
      Complex complex17 = complex11.sin();
      double double0 = complex15.getReal();
      Complex complex18 = complex15.add(complex8);
      Complex complex19 = complex17.createComplex(Double.NaN, 1.0);
      double double1 = complex18.abs();
      boolean boolean0 = complex1.equals(complex12);
      Complex complex20 = complex18.NaN.pow(complex15);
      Complex complex21 = complex8.multiply(2.0);
      Complex complex22 = complex15.createComplex(2.0, Double.NaN);
      double double2 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex0.ONE.atan();
      Complex complex6 = complex5.I.cosh();
      Object object0 = complex5.ONE.readResolve();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.NaN.subtract(complex0);
      Complex complex9 = complex7.ZERO.tanh();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex10.ONE.exp();
      Complex complex12 = complex11.ONE.sin();
      String string0 = complex7.toString();
      double double0 = complex0.getArgument();
      Complex complex13 = complex7.sin();
      Complex complex14 = complex13.NaN.divide(complex7);
      Complex complex15 = complex13.NaN.subtract(complex11);
      Object object1 = complex7.readResolve();
      Complex complex16 = complex10.sinh();
      Complex complex17 = complex1.ONE.multiply(complex9);
      Complex complex18 = complex16.I.sin();
      Complex complex19 = complex4.ONE.asin();
      Complex complex20 = complex18.NaN.cos();
      Complex complex21 = complex18.NaN.multiply(complex14);
      ComplexField complexField0 = complex16.getField();
      double double1 = complex16.abs();
      Complex complex22 = complex2.atan();
      Complex complex23 = complex1.sqrt1z();
      Complex complex24 = complex23.asin();
      Complex complex25 = complex24.ONE.acos();
      Complex complex26 = complex4.sqrt1z();
      Complex complex27 = complex8.exp();
      boolean boolean0 = complex10.isNaN();
      Complex complex28 = complex26.exp();
      double double2 = complex20.abs();
      Complex complex29 = complex2.tanh();
      Complex complex30 = complex3.multiply(complex24);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      try { 
        complex0.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.subtract(complex0);
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex3.subtract(complex1);
      Complex complex6 = complex1.NaN.cosh();
      Complex complex7 = complex0.negate();
      String string0 = complex0.toString();
      double double0 = complex0.getReal();
      Complex complex8 = complex7.add(complex2);
      Complex complex9 = complex8.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex2.divide(complex8);
      boolean boolean0 = complex8.isNaN();
      Complex complex11 = complex0.ONE.atan();
      Complex complex12 = complex1.log();
      Complex complex13 = complex12.NaN.asin();
      double double1 = complex3.getArgument();
      Complex complex14 = complex2.tanh();
      boolean boolean1 = complex4.isInfinite();
      Complex complex15 = complex4.sinh();
      boolean boolean2 = complex7.isInfinite();
      Complex complex16 = complex2.negate();
      Complex complex17 = complex12.acos();
      double double2 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(3754.3591, 3746.440226);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.sinh();
      double double0 = complex2.ONE.abs();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex3.I.add(complex0);
      Complex complex5 = complex4.NaN.pow(complex2);
      Complex complex6 = complex5.INF.pow(complex2);
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = complex6.NaN.add(complex1);
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex9.tan();
      Complex complex11 = complex1.atan();
      Complex complex12 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.createComplex(Double.NaN, Double.NaN);
      List<Complex> list0 = complex2.I.nthRoot(10);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.I.sin();
      double double0 = complex1.INF.abs();
      try { 
        complex3.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex1.I.tan();
      Complex complex6 = complex5.I.subtract(complex2);
      Complex complex7 = complex2.ONE.createComplex(2161.190843, 13.07);
      Complex complex8 = complex0.I.pow(complex1);
      Complex complex9 = complex1.negate();
      Complex complex10 = complex9.ONE.acos();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Object object1 = complex8.readResolve();
      double double0 = complex9.NaN.abs();
      Complex complex11 = complex1.ONE.divide(complex8);
      String string0 = complex8.toString();
      Complex complex12 = complex0.atan();
      double double1 = complex12.NaN.getArgument();
      Complex complex13 = complex12.ONE.subtract(complex10);
      Complex complex14 = complex0.tanh();
      Complex complex15 = complex9.sqrt();
      Object object2 = new Object();
      boolean boolean1 = complex9.equals(object2);
      double double2 = complex10.getReal();
      Complex complex16 = complex11.ZERO.cos();
      Complex complex17 = complex1.cos();
      Complex complex18 = complex9.add(complex11);
      Complex complex19 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-657.2609), (-657.2609));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.sin();
      List<Complex> list0 = complex3.I.nthRoot(2741);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.NaN.cos();
      String string0 = complex4.ZERO.toString();
      boolean boolean0 = complex2.equals(list0);
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex0.I.subtract(complex1);
      Complex complex9 = complex1.pow(complex3);
      Complex complex10 = complex9.ZERO.sqrt1z();
      Complex complex11 = complex3.exp();
      try { 
        complex9.nthRoot((-2886));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,886
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex2.ONE.tanh();
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex3.NaN.tan();
      Complex complex8 = complex3.asin();
      Complex complex9 = complex8.tan();
      boolean boolean0 = complex4.equals(complex9);
      Complex complex10 = complex9.asin();
      Complex complex11 = complex7.multiply(0.0);
      Complex complex12 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(3434.74);
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.INF.createComplex(0.0, (-1094.7459364));
      Complex complex4 = complex1.cosh();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.getReal();
      Complex complex5 = complex4.conjugate();
      double double1 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-981.68), (-981.68));
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ONE.pow(complex0);
      Complex complex4 = complex3.INF.log();
      List<Complex> list0 = complex4.nthRoot(1471);
      Complex complex5 = complex0.INF.asin();
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex6 = complex4.ONE.sqrt();
      Complex complex7 = complex5.NaN.acos();
      Complex complex8 = complex3.I.conjugate();
      double double0 = complex5.NaN.abs();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex2.log();
      Complex complex11 = complex10.NaN.multiply((double) 1471);
      List<Complex> list1 = complex11.I.nthRoot(270);
      Complex complex12 = complex10.INF.atan();
      Complex complex13 = complex12.ONE.multiply(complex2);
      List<Complex> list2 = complex10.ZERO.nthRoot(1471);
      double double1 = complex1.abs();
      Complex complex14 = complex10.tanh();
      Complex complex15 = complex4.sqrt();
      Complex complex16 = complex14.multiply(0.5403023058681398);
      Complex complex17 = complex16.createComplex(270, (-1405.4459999));
      Complex complex18 = complex3.conjugate();
      try { 
        complex18.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-294.406191), (-1223.050584692));
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.multiply(1.0);
      Complex complex3 = complex2.ONE.asin();
      String string0 = complex2.toString();
      Complex complex4 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex2.I.sqrt();
      Complex complex6 = complex0.NaN.createComplex(97.32, Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.subtract(complex2);
      double double0 = complex7.getImaginary();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex0.NaN.tan();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex2.subtract(complex10);
      Complex complex12 = complex7.tanh();
      double double1 = complex0.getImaginary();
      Object object0 = complex0.readResolve();
      Complex complex13 = complex8.negate();
      Complex complex14 = complex13.I.log();
      Complex complex15 = complex6.asin();
      Complex complex16 = complex7.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.I.exp();
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex3.INF.pow(complex0);
      int int0 = complex6.ZERO.hashCode();
      Complex complex7 = complex6.INF.add(complex1);
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex8.INF.tan();
      Complex complex10 = complex9.ONE.tan();
      Complex complex11 = complex0.asin();
      Complex complex12 = complex0.acos();
      Complex complex13 = complex11.ZERO.cosh();
      Complex complex14 = complex8.cos();
      Complex complex15 = complex12.pow(complex11);
      Object object0 = complex15.I.readResolve();
      Complex complex16 = complex12.log();
      Complex complex17 = complex16.ONE.sqrt();
      Complex complex18 = complex15.exp();
      Complex complex19 = complex12.sqrt();
      boolean boolean0 = complex16.isInfinite();
      Complex complex20 = complex2.negate();
      double double0 = complex12.getImaginary();
      boolean boolean1 = complex20.equals(complex8);
      Object object1 = complex18.readResolve();
      boolean boolean2 = complex18.equals(object1);
      Complex complex21 = complex18.negate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = new Complex(1109.073, 4.503599627370496E15);
      Complex complex4 = complex2.I.pow(complex3);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex0.ZERO.createComplex(0.2, 654.41508);
      Complex complex7 = complex6.NaN.sqrt1z();
      Complex complex8 = complex7.NaN.tanh();
      Complex complex9 = complex6.NaN.tanh();
      double double0 = complex9.NaN.getArgument();
      Complex complex10 = complex9.log();
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex3.INF.tan();
      Complex complex13 = complex11.NaN.createComplex((-1175.99609), (-590.2));
      String string0 = complex9.toString();
      Complex complex14 = complex0.sqrt1z();
      Complex complex15 = complex1.ZERO.subtract(complex3);
      boolean boolean0 = complex4.equals(complex11);
      double double1 = complex3.getImaginary();
      Complex complex16 = complex9.multiply(4.503599627370496E15);
      Complex complex17 = complex5.sinh();
      Complex complex18 = complex1.acos();
      Complex complex19 = complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex5.acos();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex8.ZERO.multiply(3774.3078584289);
      Complex complex10 = complex4.conjugate();
      Complex complex11 = complex2.cosh();
      boolean boolean0 = complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.acos();
      double double0 = complex1.getReal();
      Complex complex3 = complex1.multiply(0.0);
      int int0 = complex1.hashCode();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex7.INF.acos();
      Complex complex9 = complex4.INF.pow(complex6);
      double double1 = complex4.abs();
      double double2 = complex4.getImaginary();
      Complex complex10 = complex1.add(complex4);
      Complex complex11 = complex1.createComplex(1.0, 1.0);
      Complex complex12 = complex10.ONE.atan();
      Complex complex13 = complex2.exp();
      boolean boolean0 = complex7.equals(complex10);
      Complex complex14 = complex2.multiply(1.0);
      Complex complex15 = complex13.I.negate();
      Complex complex16 = complex4.sqrt();
      Complex complex17 = complex8.conjugate();
      Complex complex18 = complex13.multiply(1.0);
      Complex complex19 = complex2.negate();
      Complex complex20 = complex5.conjugate();
      Complex complex21 = complex0.subtract(complex15);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex2.divide(complex4);
      int int0 = complex5.NaN.hashCode();
      Complex complex6 = complex0.INF.sqrt1z();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex0.log();
      double double0 = complex8.getReal();
      Complex complex9 = complex1.tan();
      Complex complex10 = complex9.ONE.sin();
      Complex complex11 = complex10.ZERO.negate();
      double double1 = complex11.INF.getArgument();
      Complex complex12 = complex8.cos();
      Complex complex13 = complex9.multiply(Double.NEGATIVE_INFINITY);
      Complex complex14 = complex13.ONE.tanh();
      Complex complex15 = complex14.multiply((-63.0));
      Complex complex16 = complex8.asin();
      Complex complex17 = complex16.ZERO.cosh();
      Complex complex18 = complex0.I.subtract(complex16);
      List<Complex> list0 = complex7.nthRoot(313);
      Complex complex19 = complex5.log();
      Complex complex20 = complex10.sqrt();
      Complex complex21 = complex19.tan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1132.259511667, 1132.259511667);
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex2.I.multiply(complex3);
      Complex complex6 = complex0.sin();
      int int0 = complex6.I.hashCode();
      boolean boolean0 = complex2.isInfinite();
      Object object0 = complex0.readResolve();
      boolean boolean1 = complex1.equals(object0);
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.ONE.add(complex2);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = (Complex)complex4.NaN.readResolve();
      Complex complex7 = complex4.ONE.conjugate();
      Complex complex8 = complex4.multiply((-3235.457));
      Complex complex9 = complex4.sqrt1z();
      Complex complex10 = new Complex((-3235.457), (-3235.457));
      Complex complex11 = complex1.createComplex(4227.340135960389, (-3235.457));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.multiply(735.5763757026193);
      try { 
        complex0.ONE.nthRoot((-1260));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,260
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.ZERO.multiply(complex0);
      Complex complex6 = complex2.ONE.divide(complex4);
      Complex complex7 = complex4.ZERO.acos();
      Complex complex8 = complex7.I.cos();
      Complex complex9 = complex0.subtract(complex1);
      Complex complex10 = complex9.NaN.conjugate();
      String string0 = complex10.toString();
      Object object0 = complex10.readResolve();
      Complex complex11 = complex9.add(complex1);
      String string1 = complex9.INF.toString();
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex2.I.subtract(complex12);
      Object object1 = complex11.ONE.readResolve();
      double double0 = complex11.abs();
      Complex complex14 = complex8.negate();
      double double1 = complex10.getImaginary();
      ComplexField complexField0 = complex2.getField();
      Complex complex15 = complex1.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.ONE.multiply(0.0);
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex1.INF.pow(complex0);
      Complex complex5 = complex1.I.sinh();
      Complex complex6 = Complex.INF;
      Object object0 = complex6.readResolve();
      Complex complex7 = complex4.ZERO.pow(complex6);
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex8.ZERO.multiply(complex1);
      Complex complex10 = complex0.INF.cos();
      int int0 = complex0.hashCode();
      double double0 = complex10.I.getArgument();
      Complex complex11 = complex0.acos();
      boolean boolean0 = complex1.equals(complex10);
      Complex complex12 = complex0.tan();
      Complex complex13 = complex1.sin();
      Complex complex14 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.I.divide(complex0);
      List<Complex> list0 = complex2.ZERO.nthRoot(1991);
      boolean boolean0 = complex1.equals(complex2);
      Complex complex4 = complex0.pow(complex2);
      boolean boolean1 = complex3.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex1.tanh();
      int int0 = complex4.hashCode();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex6.I.multiply(1.0);
      Complex complex8 = complex7.INF.conjugate();
      Complex complex9 = complex8.ONE.sin();
      double double0 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex1.I.acos();
      Complex complex5 = complex1.ONE.atan();
      Complex complex6 = complex4.atan();
      double double1 = complex6.NaN.getArgument();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex1.ZERO.atan();
      Complex complex10 = complex9.ZERO.tan();
      Complex complex11 = complex1.divide(complex0);
      Complex complex12 = complex1.negate();
      Complex complex13 = complex12.ZERO.sinh();
      Complex complex14 = complex12.pow(complex1);
      Complex complex15 = complex11.cos();
      Complex complex16 = complex15.atan();
      Complex complex17 = complex0.tanh();
      Complex complex18 = complex11.acos();
      int int0 = complex3.hashCode();
      Complex complex19 = complex17.cosh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-1782.0), (-188.16));
      Complex complex1 = complex0.cos();
      List<Complex> list0 = complex1.ONE.nthRoot(1030);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.ZERO.add(complex2);
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex0.INF.log();
      Complex complex9 = complex8.ONE.multiply((-188.16));
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex8.sin();
      Complex complex12 = complex0.log();
      Complex complex13 = complex12.subtract(complex3);
      Complex complex14 = complex1.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.ZERO.asin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.add(complex1);
      List<Complex> list0 = complex4.INF.nthRoot(1);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-1848.1821), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-777.0);
      Complex complex1 = new Complex((-777.0), (-1255.21162));
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex2.INF.multiply(complex1);
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex1.I.acos();
      try { 
        complex2.NaN.nthRoot((-913));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -913
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.NaN.multiply(1238.1663448728054);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.INF.cos();
      boolean boolean0 = complex3.equals("O(-0;G*FTqtq4Sp");
      Complex complex5 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex0.sqrt();
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex4.subtract(complex5);
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex0.sinh();
      List<Complex> list0 = complex7.nthRoot(155);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex2.conjugate();
      ComplexField complexField0 = complex0.getField();
      int int0 = complex0.hashCode();
      Complex complex4 = complex1.asin();
      double double0 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isInfinite();
      try { 
        complex0.ONE.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.ONE.add(complex1);
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.tanh();
      double double1 = complex3.getReal();
      Complex complex6 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.INF.subtract(complex3);
      Complex complex5 = complex3.createComplex((-0.16624879837036133), 0.0);
      Complex complex6 = complex2.negate();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex2.subtract(complex0);
      Complex complex10 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.NaN.divide(complex0);
      int int0 = complex2.ONE.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex2.log();
      Complex complex5 = complex3.I.pow(complex0);
      Complex complex6 = complex5.INF.sqrt1z();
      List<Complex> list0 = complex2.nthRoot(7);
      Complex complex7 = complex0.cos();
      boolean boolean0 = complex2.isInfinite();
      Complex complex8 = complex4.INF.acos();
      String string0 = complex3.toString();
      Complex complex9 = complex4.createComplex(7, 7);
      Complex complex10 = complex9.INF.tan();
      Complex complex11 = complex0.sinh();
      Complex complex12 = complex4.negate();
      Complex complex13 = complex10.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.createComplex(0.0, 0.0);
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex4 = complex2.ONE.subtract(complex0);
      double double0 = complex4.ONE.abs();
      Complex complex5 = complex2.createComplex(0.0, Double.POSITIVE_INFINITY);
      double double1 = complex1.getReal();
      Complex complex6 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.I.tan();
      Complex complex4 = complex2.NaN.createComplex(2.0, (-156.5842));
      Complex complex5 = complex0.ONE.multiply(complex4);
      Complex complex6 = complex0.createComplex(0.0, (-135.77184));
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex6.exp();
      Complex complex9 = complex8.ZERO.multiply((-1043.1366706515814));
      Complex complex10 = complex6.exp();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.tan();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex1.conjugate();
      try { 
        complex4.nthRoot((-796));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -796
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.asin();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.createComplex((-531.90108555), (-531.90108555));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.createComplex(0.0, 0.0);
      double double0 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-137.2), (-137.2));
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(2235.03758906991, 145.6974995);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.acos();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.INF;
      List<Complex> list0 = complex2.ZERO.nthRoot(37);
      Complex complex3 = complex0.INF.add(complex2);
      Complex complex4 = complex0.exp();
      boolean boolean0 = complex0.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      ComplexField complexField0 = complex0.getField();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.subtract(complex3);
      Object object1 = complex3.NaN.readResolve();
      Complex complex5 = complex3.ONE.conjugate();
      Complex complex6 = complex3.multiply((-3235.457));
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex1.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.I.getField();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-572.37210591488), (-572.37210591488));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.createComplex((-81.35439906659), Double.NaN);
      Complex complex4 = complex0.INF.sqrt1z();
      double double0 = complex4.INF.getArgument();
      Complex complex5 = complex0.exp();
      double double1 = complex4.getReal();
      Complex complex6 = complex0.ZERO.acos();
      String string0 = complex6.ZERO.toString();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.NaN.sqrt();
      Complex complex9 = complex0.multiply(Double.NaN);
      double double2 = complex9.NaN.getArgument();
      String string1 = complex4.toString();
      double double3 = complex9.getImaginary();
      String string2 = complex9.toString();
      Complex complex10 = complex5.add(complex6);
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex0.subtract(complex4);
      Complex complex13 = complex4.INF.acos();
      Complex complex14 = complex13.subtract(complex9);
      Complex complex15 = complex7.atan();
      Complex complex16 = complex0.asin();
      Complex complex17 = complex6.acos();
      boolean boolean0 = complex4.isNaN();
      Complex complex18 = complex17.add(complex14);
      Object object0 = complex15.readResolve();
      Complex complex19 = complex4.add(complex8);
      Complex complex20 = complex19.NaN.divide(complex6);
      double double4 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex0.ONE.atan();
      Complex complex4 = complex1.I.sin();
      Complex complex5 = complex0.ZERO.add(complex1);
      int int0 = complex5.ONE.hashCode();
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex4.NaN.negate();
      double double0 = complex0.getArgument();
      Complex complex8 = complex4.cos();
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex8.I.cosh();
      Complex complex11 = complex4.atan();
      Complex complex12 = new Complex(3544.2423277519, 1.5707963267948966);
      Complex complex13 = complex11.ONE.add(complex12);
      Complex complex14 = complex13.NaN.multiply(complex10);
      Complex complex15 = complex6.cos();
      Complex complex16 = complex2.pow(complex7);
      Complex complex17 = complex16.ONE.negate();
      Complex complex18 = complex10.multiply(complex8);
      ComplexField complexField0 = complex10.getField();
      Complex complex19 = complex15.tan();
      Complex complex20 = complex10.asin();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex1.ZERO.sin();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.ONE.tanh();
      Complex complex6 = complex3.NaN.subtract(complex4);
      Complex complex7 = complex6.NaN.sqrt();
      Complex complex8 = complex1.INF.exp();
      Complex complex9 = complex8.NaN.sqrt();
      Complex complex10 = complex9.subtract(complex4);
      Complex complex11 = complex8.ZERO.atan();
      Complex complex12 = complex0.add(complex1);
      Complex complex13 = complex1.sqrt1z();
      Complex complex14 = complex8.log();
      Complex complex15 = complex3.tan();
      Complex complex16 = complex1.asin();
      ComplexField complexField0 = complex16.ONE.getField();
      Complex complex17 = complex15.sinh();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex18 = complex4.sin();
      String string0 = complex2.toString();
      int int0 = complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.INF.conjugate();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex3.cosh();
      double double0 = complex5.ZERO.getArgument();
      Complex complex6 = complex0.multiply(0.0);
      Complex complex7 = complex3.negate();
      Complex complex8 = complex1.ZERO.asin();
      Complex complex9 = complex7.INF.createComplex((-5160.2744), 0.0);
      Complex complex10 = complex3.ONE.multiply(complex6);
      String string0 = complex10.I.toString();
      Complex complex11 = complex9.I.log();
      Complex complex12 = complex6.exp();
      Complex complex13 = complex12.I.tan();
      Complex complex14 = complex4.pow(complex1);
      Complex complex15 = complex14.NaN.asin();
      boolean boolean1 = complex0.isInfinite();
      Complex complex16 = complex8.ZERO.subtract(complex2);
      Complex complex17 = complex3.cos();
      Complex complex18 = complex8.tanh();
      Complex complex19 = complex6.exp();
      List<Complex> list0 = complex3.nthRoot(1);
      Object object1 = complex14.readResolve();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Object object0 = complex0.NaN.readResolve();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ONE.pow(complex0);
      Complex complex4 = complex1.I.multiply(complex0);
      Complex complex5 = complex2.ZERO.pow(complex1);
      Complex complex6 = complex3.ONE.multiply(complex2);
      boolean boolean0 = complex2.isNaN();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex8.I.log();
      Complex complex10 = complex8.I.atan();
      Complex complex11 = complex1.cos();
      Complex complex12 = complex2.I.multiply(0.0);
      Object object1 = complex3.readResolve();
      Complex complex13 = complex0.conjugate();
      Complex complex14 = complex6.cosh();
      Complex complex15 = complex5.tan();
      Complex complex16 = complex15.acos();
      Complex complex17 = complex16.NaN.multiply(2756.86106656479);
      Complex complex18 = complex17.ONE.log();
      double double0 = complex7.INF.getArgument();
      List<Complex> list0 = complex13.ZERO.nthRoot(2098);
      Complex complex19 = complex0.I.exp();
      Complex complex20 = complex7.pow(complex1);
      boolean boolean1 = complex13.isInfinite();
      Complex complex21 = complex14.sinh();
      Complex complex22 = complex7.subtract(complex6);
      ComplexField complexField0 = complex11.getField();
      ComplexField complexField1 = complex2.getField();
      double double1 = complex7.getReal();
      ComplexField complexField2 = complex15.getField();
      Complex complex23 = complex6.tan();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.I.subtract(complex2);
      Complex complex7 = complex2.ONE.createComplex(2161.190843, 13.07);
      Complex complex8 = complex0.I.pow(complex1);
      Complex complex9 = complex1.negate();
      Complex complex10 = complex9.ONE.acos();
      Complex complex11 = complex9.ONE.log();
      Complex complex12 = complex1.INF.sin();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex13 = (Complex)complex8.readResolve();
      double double0 = complex13.abs();
      double double1 = complex9.NaN.abs();
      Complex complex14 = complex1.ONE.divide(complex8);
      String string0 = complex8.toString();
      Complex complex15 = complex0.atan();
      double double2 = complex15.NaN.getArgument();
      Complex complex16 = complex15.ONE.subtract(complex10);
      Complex complex17 = complex0.tanh();
      Complex complex18 = complex9.sqrt();
      Object object1 = new Object();
      boolean boolean1 = complex9.equals(object1);
      double double3 = complex10.getReal();
      Complex complex19 = complex14.ZERO.cos();
      Complex complex20 = complex1.cos();
      Complex complex21 = complex9.add(complex14);
      Complex complex22 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 595.7972116217062);
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      Complex complex1 = complex0.ZERO.atan();
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex2.I.createComplex(1120.16305, 595.7972116217062);
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex0.getField();
      boolean boolean0 = complex3.isNaN();
      boolean boolean1 = complex1.isInfinite();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex3.add(complex2);
      boolean boolean2 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.NaN.cosh();
      String string1 = complex0.INF.toString();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.ZERO.asin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.ONE.cosh();
      double double1 = complex0.abs();
      Complex complex5 = complex0.I.exp();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex4.NaN.tan();
      boolean boolean1 = complex0.equals(object0);
      Complex complex7 = complex0.subtract(complex5);
      boolean boolean2 = complex5.equals("(0.0, 1.0)");
      Complex complex8 = complex1.INF.log();
      Complex complex9 = complex5.acos();
      Complex complex10 = complex9.I.sqrt1z();
      Complex complex11 = complex10.NaN.sqrt();
      Complex complex12 = complex9.INF.subtract(complex6);
      Complex complex13 = complex7.multiply(1.0);
      Complex complex14 = complex13.ONE.multiply(1.0);
      Complex complex15 = complex14.conjugate();
      double double2 = complex15.ONE.abs();
      Complex complex16 = complex13.tanh();
      double double3 = complex4.getReal();
      Complex complex17 = complex7.sin();
      Complex complex18 = complex17.asin();
      Object object1 = complex1.readResolve();
      boolean boolean3 = complex13.isInfinite();
      double double4 = complex6.getArgument();
      double double5 = complex7.abs();
      Complex complex19 = complex1.tanh();
      Complex complex20 = complex3.tanh();
  }
}
