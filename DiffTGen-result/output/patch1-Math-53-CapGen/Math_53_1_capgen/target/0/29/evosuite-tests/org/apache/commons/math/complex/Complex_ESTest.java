/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:21:08 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.NaN.createComplex((-1572.197015), Double.POSITIVE_INFINITY);
      String string0 = complex2.INF.toString();
      double double0 = complex0.getImaginary();
      Object object0 = complex2.I.readResolve();
      double double1 = complex2.getImaginary();
      Complex complex4 = complex2.NaN.cos();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex9.createComplex(0.0, (-1572.197015));
      String string1 = complex2.toString();
      boolean boolean0 = complex9.equals(complex7);
      Complex complex11 = complex6.asin();
      List<Complex> list0 = complex11.I.nthRoot(285);
      Complex complex12 = complex11.tan();
      Complex complex13 = complex2.multiply(complex3);
      Complex complex14 = complex11.acos();
      Complex complex15 = complex14.ZERO.multiply(complex8);
      Complex complex16 = complex13.sqrt1z();
      Complex complex17 = complex15.sqrt();
      Complex complex18 = complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      List<Complex> list0 = complex0.nthRoot(1);
      double double1 = complex0.abs();
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-802.703420593189), (-802.703420593189));
      Complex complex2 = complex0.INF.add(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.add(complex0);
      double double0 = complex4.INF.getArgument();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex5.multiply(0.7853981633974483);
      Complex complex7 = complex3.pow(complex4);
      Complex complex8 = complex7.ZERO.multiply(complex1);
      Complex complex9 = complex5.multiply(0.7853981633974483);
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex10.ZERO.sinh();
      Complex complex12 = complex3.exp();
      Complex complex13 = complex9.conjugate();
      Complex complex14 = complex6.acos();
      Complex complex15 = complex1.negate();
      double double1 = complex15.getReal();
      Complex complex16 = Complex.INF;
      Complex complex17 = complex5.multiply(complex16);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.multiply((-3479.576));
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ONE.negate();
      boolean boolean0 = complex2.isNaN();
      Complex complex5 = complex3.multiply(1180.5657357124);
      Complex complex6 = complex3.sinh();
      List<Complex> list0 = complex6.INF.nthRoot(1);
      Complex complex7 = complex0.ZERO.cos();
      Complex complex8 = complex3.divide(complex6);
      Complex complex9 = complex6.createComplex((-3479.576), 0.0);
      Complex complex10 = complex3.cos();
      Complex complex11 = complex10.I.asin();
      ComplexField complexField0 = complex10.I.getField();
      Complex complex12 = complex1.NaN.sinh();
      Object object0 = complex1.readResolve();
      boolean boolean1 = complex2.equals(object0);
      Complex complex13 = complex0.conjugate();
      Complex complex14 = complex5.divide(complex2);
      Complex complex15 = complex10.cos();
      Complex complex16 = complex15.ZERO.asin();
      Complex complex17 = complex13.sqrt1z();
      double double0 = complex3.getReal();
      Complex complex18 = complex4.multiply(complex0);
      boolean boolean2 = complex8.equals(list0);
      double double1 = complex1.getReal();
      Complex complex19 = complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = new Complex(8.0E298, (-372.04019));
      Complex complex5 = complex4.NaN.add(complex0);
      Complex complex6 = complex3.pow(complex4);
      Complex complex7 = complex1.ZERO.createComplex((-372.04019), 8.0E298);
      Complex complex8 = complex1.multiply(8.0E298);
      int int0 = complex1.hashCode();
      ComplexField complexField0 = complex3.getField();
      Object object0 = complex4.NaN.readResolve();
      Complex complex9 = complex6.ZERO.sqrt1z();
      Object object1 = complex9.ONE.readResolve();
      Complex complex10 = complex5.NaN.asin();
      Complex complex11 = complex8.divide(complex3);
      boolean boolean0 = complex8.isInfinite();
      Complex complex12 = complex6.cosh();
      boolean boolean1 = complex5.isNaN();
      Complex complex13 = complex12.acos();
      Complex complex14 = complex4.divide(complex0);
      int int1 = complex3.hashCode();
      int int2 = complex1.ONE.hashCode();
      Complex complex15 = complex6.log();
      boolean boolean2 = complex6.isNaN();
      Complex complex16 = complex5.ONE.tan();
      boolean boolean3 = complex8.isNaN();
      Complex complex17 = complex4.exp();
      ComplexField complexField1 = complex10.getField();
      Complex complex18 = complex4.ONE.pow(complex9);
      int int3 = complex6.hashCode();
      Complex complex19 = complex5.divide(complex7);
      Complex complex20 = complex12.tan();
      boolean boolean4 = complex10.isNaN();
      Complex complex21 = complex15.tanh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.conjugate();
      Object object0 = complex3.readResolve();
      Complex complex5 = complex3.ZERO.tanh();
      Complex complex6 = complex4.ZERO.tan();
      Complex complex7 = complex1.createComplex(2.0, 6.283185307179586);
      Complex complex8 = complex7.acos();
      ComplexField complexField0 = complex8.INF.getField();
      double double0 = complex8.abs();
      Object object1 = complex2.readResolve();
      Complex complex9 = complex4.sqrt();
      String string0 = complex8.toString();
      Complex complex10 = complex9.add(complex5);
      ComplexField complexField1 = complex7.getField();
      Complex complex11 = complex3.createComplex(6.283185307179586, 549.64999221);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-487.2491397134565));
      Complex complex1 = complex0.sqrt1z();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex0.exp();
      Object object0 = complex2.NaN.readResolve();
      Complex complex3 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      double double0 = complex0.INF.abs();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex4.INF.conjugate();
      Complex complex7 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.I.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex3.ONE.multiply(2.0);
      int int0 = complex3.NaN.hashCode();
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = complex3.ZERO.cosh();
      Complex complex7 = complex5.NaN.tan();
      Complex complex8 = complex0.INF.conjugate();
      double double0 = complex5.NaN.getArgument();
      Complex complex9 = complex0.NaN.sqrt();
      Complex complex10 = complex9.ZERO.log();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.sinh();
      Object object0 = complex1.readResolve();
      Object object1 = complex1.ZERO.readResolve();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.I.asin();
      List<Complex> list0 = complex2.I.nthRoot(151);
      Complex complex5 = complex2.INF.log();
      Object object2 = complex2.INF.readResolve();
      List<Complex> list1 = complex0.nthRoot(1586);
      Complex complex6 = complex0.asin();
      ComplexField complexField0 = complex1.getField();
      Complex complex7 = complex0.subtract(complex1);
      ComplexField complexField1 = complex7.ZERO.getField();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex5.cosh();
      Complex complex11 = complex2.exp();
      Complex complex12 = complex11.asin();
      double double0 = complex8.abs();
      Complex complex13 = complex6.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex4.tan();
      ComplexField complexField0 = complex6.getField();
      Object object0 = complex6.readResolve();
      Complex complex7 = complex5.multiply(1.0);
      Object object1 = complex7.ZERO.readResolve();
      Complex complex8 = complex5.multiply(4604.0377548);
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = complex8.NaN.add(complex0);
      double double0 = complex0.getArgument();
      Complex complex11 = complex7.add(complex6);
      boolean boolean0 = complex4.isNaN();
      int int0 = complex0.hashCode();
      Complex complex12 = complex3.negate();
      Complex complex13 = complex9.exp();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex1.INF.cos();
      Complex complex4 = complex1.multiply(4933.93);
      Complex complex5 = complex4.ZERO.createComplex(4933.93, 0.0);
      boolean boolean1 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.NaN.divide(complex1);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex3.ONE.asin();
      Complex complex6 = complex2.cos();
      double double0 = complex2.getReal();
      Complex complex7 = complex2.ONE.conjugate();
      Complex complex8 = complex2.sqrt();
      Complex complex9 = complex6.ZERO.acos();
      Complex complex10 = complex2.tanh();
      Complex complex11 = complex10.I.conjugate();
      ComplexField complexField0 = complex10.getField();
      Object object0 = complex1.readResolve();
      Complex complex12 = complex5.add(complex6);
      Complex complex13 = complex8.conjugate();
      Complex complex14 = complex3.I.acos();
      Complex complex15 = complex2.cosh();
      Complex complex16 = complex15.conjugate();
      Complex complex17 = complex16.I.multiply(1.3245471311735498E-8);
      String string0 = complex12.toString();
      Complex complex18 = complex1.pow(complex13);
      Complex complex19 = complex6.createComplex(8.251545029714408E-9, 0.0);
      Complex complex20 = complex14.log();
      Complex complex21 = complex4.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(1209.2949655951, 1681.1678);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.NaN.divide(complex0);
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(1346.2866610341, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(6.283185307179586, (-3038.5388646));
      Complex complex2 = complex0.multiply(complex1);
      double double0 = complex2.INF.abs();
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex0.ONE.multiply(1346.2866610341);
      Complex complex4 = complex3.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.atan();
      String string0 = complex5.ONE.toString();
      String string1 = complex0.INF.toString();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex4.I.divide(complex5);
      Complex complex8 = complex7.I.sinh();
      Complex complex9 = complex6.ZERO.createComplex((-3038.5388646), 0.0);
      Complex complex10 = complex3.cos();
      Object object0 = complex10.NaN.readResolve();
      Complex complex11 = complex0.NaN.sqrt1z();
      boolean boolean0 = complex4.equals("2x`");
      int int1 = complex0.hashCode();
      Complex complex12 = complex0.exp();
      Complex complex13 = complex1.sin();
      Object object1 = complex1.readResolve();
      Complex complex14 = complex0.asin();
      double double1 = complex14.INF.getArgument();
      Complex complex15 = complex14.INF.divide(complex6);
      Complex complex16 = complex12.asin();
      Complex complex17 = complex16.tanh();
      Complex complex18 = complex17.pow(complex0);
      String string2 = complex14.toString();
      double double2 = complex14.abs();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1229.723212);
      Complex complex1 = complex0.I.sqrt();
      int int0 = complex0.ZERO.hashCode();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.INF.sin();
      String string0 = complex3.toString();
      Complex complex5 = complex3.subtract(complex1);
      Complex complex6 = complex1.tan();
      double double0 = complex1.ONE.abs();
      Complex complex7 = complex3.NaN.createComplex((-1.0), 0.0);
      Complex complex8 = complex5.conjugate();
      Complex complex9 = complex8.INF.divide(complex2);
      Complex complex10 = complex1.createComplex(1229.723212, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.multiply((-753.641814066));
      Complex complex3 = complex0.createComplex(1406.58240794, 0.0);
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex0.createComplex(1406.58240794, 1406.58240794);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex2.sqrt();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-221.03427340952805), (-221.03427340952805));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex2.INF.createComplex((-221.03427340952805), (-221.03427340952805));
      Complex complex4 = complex3.INF.cosh();
      boolean boolean0 = complex0.equals(complex1);
      double double0 = complex0.getArgument();
      Complex complex5 = complex2.add(complex1);
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex1.INF.pow(complex5);
      Complex complex8 = complex7.sinh();
      double double1 = complex1.ONE.getArgument();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex1.acos();
      double double2 = complex0.getImaginary();
      Object object0 = new Object();
      boolean boolean1 = complex0.equals(object0);
      Complex complex12 = complex10.sqrt();
      Complex complex13 = complex11.acos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.multiply(1596.424937109332);
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.I.subtract(complex0);
      List<Complex> list0 = complex4.nthRoot(267);
      Complex complex5 = complex0.I.subtract(complex3);
      Complex complex6 = complex0.createComplex(0.0, (-3508.5693));
      int int0 = complex6.hashCode();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex5.pow(complex3);
      Complex complex9 = complex3.multiply(complex0);
      Complex complex10 = complex7.add(complex5);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.createComplex(350.0571, 350.0571);
      boolean boolean0 = complex1.equals(complex0);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.multiply((-662.76979371456));
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex1.ZERO.cos();
      boolean boolean1 = complex5.isInfinite();
      Complex complex7 = complex6.I.acos();
      String string0 = complex6.toString();
      Complex complex8 = complex0.createComplex((-7.44321345601866E-11), 0.0);
      Complex complex9 = complex6.ONE.negate();
      Complex complex10 = complex8.I.tanh();
      Complex complex11 = complex3.negate();
      Complex complex12 = complex6.tanh();
      double double1 = complex8.getArgument();
      Complex complex13 = complex0.sinh();
      boolean boolean2 = complex5.isNaN();
      Complex complex14 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-377.0));
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.NaN.cosh();
      double double0 = complex2.abs();
      Complex complex5 = complex3.multiply(complex0);
      try { 
        complex5.nthRoot((-1744));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,744
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex0.createComplex(984.2809524570579, 984.2809524570579);
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex5.NaN.atan();
      Complex complex9 = complex4.log();
      boolean boolean0 = complex2.isNaN();
      boolean boolean1 = complex4.isNaN();
      Complex complex10 = complex1.ZERO.pow(complex0);
      Complex complex11 = complex0.INF.asin();
      Complex complex12 = complex5.cos();
      Complex complex13 = complex12.INF.tan();
      boolean boolean2 = complex8.equals(complex7);
      Complex complex14 = complex3.sqrt1z();
      Complex complex15 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = complex0.multiply(922.90803);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex2.acos();
      Complex complex7 = complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.ZERO.sqrt();
      int int0 = complex2.ONE.hashCode();
      Complex complex4 = complex0.ZERO.multiply(Double.NaN);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex5.NaN.conjugate();
      Complex complex8 = complex0.add(complex1);
      Complex complex9 = complex8.I.subtract(complex2);
      Complex complex10 = complex8.createComplex(Double.NaN, Double.NaN);
      Complex complex11 = complex10.NaN.divide(complex3);
      Complex complex12 = complex0.tanh();
      double double0 = complex12.getArgument();
      Complex complex13 = complex10.asin();
      int int1 = (-648);
      try { 
        complex13.nthRoot((-648));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -648
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.ONE.tanh();
      String string0 = complex0.toString();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.INF.add(complex1);
      String string1 = complex4.ZERO.toString();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.NaN.log();
      Complex complex5 = complex1.ONE.add(complex0);
      int int0 = complex2.ZERO.hashCode();
      Complex complex6 = complex1.ONE.sinh();
      boolean boolean0 = complex1.equals("(0.0, 1.0)");
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex6.exp();
      Complex complex10 = complex6.sin();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex0.pow(complex11);
      Complex complex13 = complex3.createComplex(Double.NaN, (-813.02428206));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(453.809159, 453.809159);
      ComplexField complexField0 = complex0.NaN.getField();
      try { 
        complex0.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.NaN.add(complex0);
      double double0 = complex1.abs();
      boolean boolean0 = complex0.isNaN();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex0.multiply((-3694.498916022));
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.NaN.sinh();
      Complex complex7 = complex1.add(complex3);
      Complex complex8 = complex2.INF.tan();
      Complex complex9 = complex2.pow(complex1);
      Complex complex10 = complex7.NaN.sqrt();
      Complex complex11 = complex3.tanh();
      Complex complex12 = complex7.multiply((-3694.498916022));
      Complex complex13 = complex0.INF.conjugate();
      Complex complex14 = complex12.ONE.sqrt1z();
      Complex complex15 = complex3.NaN.log();
      Complex complex16 = complex15.cos();
      Complex complex17 = complex0.multiply((-3694.498916022));
      Complex complex18 = complex12.multiply(complex7);
      Complex complex19 = complex5.multiply((-4250.322232631));
      Complex complex20 = complex3.multiply(4507.2423268);
      Complex complex21 = complex6.cos();
      boolean boolean0 = complex17.equals(complex20);
      Complex complex22 = complex12.cos();
      Complex complex23 = complex3.cos();
      Complex complex24 = complex21.multiply((-4250.322232631));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex2.log();
      Complex complex8 = complex7.pow(complex6);
      Complex complex9 = complex1.cos();
      Complex complex10 = complex8.sqrt();
      Complex complex11 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.createComplex(1677.25097102, 1677.25097102);
      Complex complex5 = complex0.divide(complex3);
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = complex6.cos();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.cos();
      boolean boolean0 = complex2.isInfinite();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex2.multiply(1489.06545172);
      Complex complex7 = complex1.subtract(complex6);
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex3.ZERO.tanh();
      String string0 = complex3.ZERO.toString();
      Complex complex5 = complex0.ONE.asin();
      Complex complex6 = complex0.multiply(1289.033364);
      Complex complex7 = complex6.INF.asin();
      Complex complex8 = complex5.acos();
      Complex complex9 = complex7.acos();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-1773.773), (-1773.773));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.I;
      boolean boolean0 = complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-2362.20566393));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.04168701738764507, (-151.099794546344));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ONE.sqrt1z();
      double double0 = complex2.ONE.abs();
      Complex complex3 = complex0.sqrt();
      double double1 = complex2.NaN.getArgument();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex3.createComplex(0.0, (-151.099794546344));
      Complex complex6 = complex3.acos();
      Object object0 = complex6.readResolve();
      Complex complex7 = complex3.sinh();
      Complex complex8 = complex7.conjugate();
      Object object1 = complex2.readResolve();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex9.sinh();
      int int0 = complex7.ZERO.hashCode();
      Complex complex11 = complex4.cos();
      Complex complex12 = complex7.pow(complex8);
      Complex complex13 = complex11.sin();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      double double0 = complex2.ONE.abs();
      Complex complex3 = complex0.tanh();
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.atan();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex3.ONE.sin();
      Complex complex6 = complex0.sqrt();
      double double1 = complex6.abs();
      Complex complex7 = complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.multiply(0.0);
      Complex complex4 = complex3.ZERO.divide(complex0);
      Complex complex5 = complex2.INF.sqrt();
      Complex complex6 = complex0.NaN.negate();
      Complex complex7 = complex0.I.multiply(0.0);
      Complex complex8 = complex7.acos();
      String string0 = complex2.toString();
      Object object0 = complex0.readResolve();
      int int0 = complex6.hashCode();
      Complex complex9 = complex6.tan();
      Complex complex10 = complex6.acos();
      Complex complex11 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex0.ZERO.atan();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.cos();
      Object object0 = complex6.readResolve();
      Complex complex8 = complex6.subtract(complex0);
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.ONE.multiply(complex2);
      double double1 = complex3.getReal();
      Complex complex6 = complex4.ONE.tanh();
      double double2 = complex2.getImaginary();
      Object object0 = complex1.ONE.readResolve();
      List<Complex> list0 = complex1.nthRoot(2532);
      Complex complex7 = complex1.subtract(complex4);
      List<Complex> list1 = complex7.nthRoot(2532);
      double double3 = complex7.abs();
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(962.1772, (-662.0667824));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.multiply(962.1772);
      Complex complex4 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(1444.38468, 3.141592653589793);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = complex0.NaN.negate();
      Complex complex5 = complex0.log();
      double double0 = complex1.getImaginary();
      Complex complex6 = complex5.INF.tanh();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex4.pow(complex7);
      boolean boolean0 = complex5.isNaN();
      boolean boolean1 = complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.NaN.tan();
      double double0 = complex0.INF.abs();
      int int0 = complex0.NaN.hashCode();
      Complex complex4 = complex0.createComplex(1.0, 1.0);
      double double1 = complex4.getArgument();
      Complex complex5 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.acos();
      Object object0 = complex0.readResolve();
      int int0 = complex0.hashCode();
      String string0 = complex0.toString();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-4266.5854798498), (-4266.5854798498));
      Complex complex1 = complex0.tanh();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.createComplex((-614.8858), (-614.8858));
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(1262.66, 16.0);
      int int0 = 0;
      double double0 = complex0.INF.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex0.NaN.divide(complex1);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex5.NaN.negate();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex1.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex1.I.atan();
      double double0 = complex0.abs();
      Complex complex4 = complex3.ONE.multiply(0.0);
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = complex3.atan();
      Complex complex8 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.divide(complex2);
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = complex0.asin();
      double double0 = complex3.getImaginary();
      Complex complex4 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.NaN.log();
      int int0 = complex0.hashCode();
      Complex complex4 = complex2.NaN.tan();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.cosh();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1670.2076266009576));
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.multiply((-1670.2076266009576));
      Complex complex2 = complex0.ZERO.log();
      double double0 = complex1.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.multiply((-1670.2076266009576));
      Complex complex4 = complex0.INF.log();
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex4.INF.subtract(complex3);
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.NaN.log();
      Complex complex9 = complex1.ZERO.acos();
      List<Complex> list0 = complex3.nthRoot(3746);
      Complex complex10 = complex0.pow(complex6);
      Complex complex11 = complex1.exp();
      ComplexField complexField1 = complex0.getField();
      Complex complex12 = complex9.divide(complex0);
      Complex complex13 = complex9.tanh();
      Complex complex14 = complex13.ZERO.cosh();
      Complex complex15 = complex12.ZERO.conjugate();
      Complex complex16 = complex1.I.conjugate();
      Complex complex17 = complex13.I.sqrt();
      double double1 = complex16.NaN.getArgument();
      Complex complex18 = complex13.INF.tan();
      Complex complex19 = complex16.ZERO.multiply(complex2);
      int int0 = complex12.hashCode();
      // Undeclared exception!
      complex14.nthRoot(3746);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(1589.2);
      Complex complex2 = complex1.ZERO.add(complex0);
      int int0 = complex1.hashCode();
      boolean boolean0 = complex1.isNaN();
      Complex complex3 = complex2.asin();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex3.INF.createComplex(1589.2, 1589.2);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.I.cos();
      Complex complex7 = complex3.ZERO.exp();
      int int1 = (-2186);
      Complex complex8 = complex3.multiply(0.0);
      double double0 = complex4.abs();
      try { 
        complex5.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.createComplex(25.392556, 887.64575306628);
      String string0 = complex1.INF.toString();
      Complex complex2 = complex1.I.createComplex(0.0, 25.392556);
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex0.sinh();
      boolean boolean0 = complex2.equals(complex4);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex4.INF.createComplex(0.0, 887.64575306628);
      Complex complex7 = complex5.ONE.sinh();
      double double0 = complex5.getReal();
      Complex complex8 = complex4.cos();
      Complex complex9 = complex5.cosh();
      Complex complex10 = complex9.I.atan();
      Complex complex11 = complex9.tan();
      boolean boolean1 = complex1.isInfinite();
      double double1 = complex9.abs();
      boolean boolean2 = complex10.isInfinite();
      Object object0 = complex4.readResolve();
      Complex complex12 = complex8.tanh();
      int int0 = complex0.hashCode();
      double double2 = complex5.getReal();
      Complex complex13 = complex11.divide(complex3);
      Complex complex14 = complex13.I.sinh();
      Complex complex15 = complex5.createComplex((-2566.618), 2888.0);
      Complex complex16 = complex15.NaN.log();
      Complex complex17 = complex13.conjugate();
      Complex complex18 = complex13.sinh();
      boolean boolean3 = complex3.isNaN();
      boolean boolean4 = complex8.equals(complex10);
      Complex complex19 = complex14.sqrt();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.NaN.multiply(complex4);
      Complex complex6 = complex1.multiply(complex0);
      double double0 = complex0.abs();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.tan();
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex3.ZERO.atan();
      String string1 = complex4.NaN.toString();
      int int0 = complex4.NaN.hashCode();
      Complex complex5 = complex1.I.atan();
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex1.log();
      double double0 = complex1.abs();
      ComplexField complexField1 = complex0.getField();
      Complex complex8 = complex0.NaN.createComplex(2.0, 1619.54814855);
      Complex complex9 = complex6.sin();
      Complex complex10 = complex7.sin();
      Complex complex11 = complex9.INF.tan();
      try { 
        complex5.NaN.nthRoot((-2304));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,304
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 5.650007086920087E-9);
      Complex complex1 = new Complex(2.0, 5.650007086920087E-9);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex2.ONE.multiply(2.0);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex0.tan();
      String string0 = complex6.toString();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex6.INF.sqrt1z();
      Complex complex10 = complex5.log();
      Object object0 = new Object();
      Complex complex11 = complex6.pow(complex0);
      Complex complex12 = complex11.I.subtract(complex3);
      Complex complex13 = complex10.ZERO.exp();
      Complex complex14 = complex10.ZERO.subtract(complex8);
      Complex complex15 = complex7.INF.tanh();
      boolean boolean0 = complex5.equals(object0);
      Complex complex16 = complex8.sin();
      Complex complex17 = complex16.INF.sin();
      Complex complex18 = complex16.NaN.sin();
      Complex complex19 = complex10.sinh();
      boolean boolean1 = complex7.equals("(-2.185039863261519, 3.262539650722478E-8)");
      Complex complex20 = complex14.cos();
      Complex complex21 = complex8.cosh();
      double double0 = complex12.getImaginary();
      Complex complex22 = complex18.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = Complex.I;
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex3.ONE.sqrt1z();
      List<Complex> list0 = complex4.NaN.nthRoot(1402);
      Complex complex5 = complex4.ZERO.negate();
      ComplexField complexField1 = complex3.getField();
      ComplexField complexField2 = complex4.NaN.getField();
      Complex complex6 = complex2.multiply(complex3);
      Complex complex7 = complex6.ZERO.acos();
      int int0 = complex6.NaN.hashCode();
      double double0 = complex0.getArgument();
      Complex complex8 = complex1.NaN.sqrt();
      double double1 = complex0.getReal();
      ComplexField complexField3 = complex0.getField();
      double double2 = complex1.abs();
      double double3 = complex0.getImaginary();
      Complex complex9 = complex0.sin();
      double double4 = complex9.ONE.getArgument();
      Complex complex10 = complex1.log();
      ComplexField complexField4 = complex10.I.getField();
      Complex complex11 = complex0.negate();
      double double5 = complex1.getImaginary();
      double double6 = complex11.getReal();
      Complex complex12 = complex2.multiply(Double.NaN);
      double double7 = complex9.getImaginary();
      double double8 = complex3.getReal();
      Complex complex13 = complex7.cos();
      int int1 = complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex2.ZERO.tan();
      int int0 = complex4.ZERO.hashCode();
      Complex complex5 = complex2.tan();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex6.I.cos();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex0.ONE.sin();
      Complex complex10 = complex8.createComplex(735.9, 0.0);
      Complex complex11 = complex10.NaN.sin();
      List<Complex> list0 = complex10.INF.nthRoot(3618);
      Complex complex12 = complex0.cos();
      Complex complex13 = complex1.subtract(complex0);
      double double0 = complex13.INF.abs();
      double double1 = complex6.getImaginary();
      Complex complex14 = complex9.INF.add(complex1);
      Complex complex15 = complex2.multiply(503.519);
      Complex complex16 = complex9.negate();
      Complex complex17 = complex16.ZERO.sqrt();
      Object object0 = complex4.readResolve();
      Complex complex18 = complex5.multiply(complex9);
  }
}
