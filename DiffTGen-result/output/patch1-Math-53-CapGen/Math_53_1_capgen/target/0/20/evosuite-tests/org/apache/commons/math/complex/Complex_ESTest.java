/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:17:41 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.INF.createComplex((-1.0), 0.11111095942313305);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = new Complex((-2592.1304972), (-2592.1304972));
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex4.exp();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex8.I.acos();
      Complex complex10 = complex8.add(complex6);
      Complex complex11 = complex7.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = new Complex((-754.2445616), (-754.2445616));
      Complex complex3 = complex0.subtract(complex2);
      double double0 = complex2.ZERO.getArgument();
      ComplexField complexField0 = complex3.INF.getField();
      Complex complex4 = complex2.exp();
      ComplexField complexField1 = complex1.ONE.getField();
      int int0 = complex3.INF.hashCode();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex2.multiply((-843.0));
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex1.ZERO.asin();
      Object object0 = complex5.readResolve();
      Complex complex10 = complex1.log();
      Complex complex11 = complex2.NaN.asin();
      Complex complex12 = complex1.sqrt1z();
      Complex complex13 = complex12.NaN.atan();
      Complex complex14 = complex12.atan();
      Complex complex15 = complex9.I.sqrt();
      Complex complex16 = complex12.pow(complex2);
      Complex complex17 = complex2.log();
      String string0 = complex2.toString();
      Complex complex18 = complex3.acos();
      Complex complex19 = complex18.NaN.acos();
      Complex complex20 = complex6.tan();
      Complex complex21 = complex9.log();
      Complex complex22 = complex2.log();
      Complex complex23 = complex21.multiply((-2928.0850868432));
      Complex complex24 = complex5.tan();
      Complex complex25 = complex4.add(complex3);
      Complex complex26 = complex10.acos();
      ComplexField complexField2 = complex13.getField();
      Complex complex27 = complex9.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.INF.cos();
      Complex complex5 = complex0.atan();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex1.ONE.divide(complex6);
      Complex complex8 = complex1.ONE.cos();
      Complex complex9 = complex6.ONE.cosh();
      Complex complex10 = complex1.pow(complex0);
      Complex complex11 = complex5.createComplex(194.6616252, 194.6616252);
      Complex complex12 = complex11.INF.conjugate();
      Complex complex13 = complex0.subtract(complex1);
      Complex complex14 = complex1.log();
      Complex complex15 = complex11.pow(complex14);
      Complex complex16 = complex5.tan();
      Complex complex17 = complex6.atan();
      Complex complex18 = complex3.divide(complex0);
      Complex complex19 = complex10.asin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-2705.45129811328), 72.4613838994);
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.createComplex((-2705.45129811328), 72.4613838994);
      Complex complex2 = complex1.INF.sinh();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex0.asin();
      double double1 = complex5.ONE.abs();
      Complex complex6 = complex5.ONE.multiply(complex3);
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.INF.tanh();
      ComplexField complexField1 = complex8.I.getField();
      String string0 = complex8.INF.toString();
      Complex complex9 = complex4.INF.negate();
      Complex complex10 = complex7.add(complex0);
      Complex complex11 = complex10.INF.sin();
      boolean boolean0 = complex10.isInfinite();
      Complex complex12 = complex4.cosh();
      ComplexField complexField2 = complex12.INF.getField();
      double double2 = complex1.getReal();
      Complex complex13 = complex12.NaN.conjugate();
      Complex complex14 = complex0.asin();
      Complex complex15 = complex14.I.sqrt1z();
      Complex complex16 = complex14.INF.cos();
      boolean boolean1 = complex3.equals(complex12);
      double double3 = complex11.getImaginary();
      Complex complex17 = complex10.negate();
      List<Complex> list0 = complex12.nthRoot(352);
      Complex complex18 = complex14.pow(complex8);
      boolean boolean2 = complex18.isInfinite();
      boolean boolean3 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.acos();
      double double0 = complex0.abs();
      double double1 = complex0.getImaginary();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.multiply(Double.NaN);
      Complex complex7 = complex0.add(complex2);
      Complex complex8 = complex2.pow(complex7);
      Complex complex9 = complex3.add(complex4);
      Complex complex10 = complex2.createComplex(Double.POSITIVE_INFINITY, 0.2857142686843872);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.INF.log();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex1.ZERO.asin();
      String string0 = complex3.toString();
      Complex complex4 = complex2.sqrt();
      String string1 = complex0.toString();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.ZERO.sinh();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex1.tan();
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      complex8.ZERO.nthRoot(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-424.144));
      Complex complex2 = complex1.ZERO.createComplex((-1499.469904000772), (-424.144));
      Complex complex3 = complex0.ONE.tan();
      Complex complex4 = complex0.I.sin();
      Complex complex5 = complex4.ZERO.createComplex(3128.0, 3128.0);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.NaN.add(complex5);
      boolean boolean0 = complex0.isNaN();
      double double0 = complex3.getReal();
      Complex complex8 = complex6.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex0.NaN.acos();
      Complex complex4 = complex1.ONE.acos();
      Complex complex5 = complex0.pow(complex1);
      int int0 = complex5.hashCode();
      Complex complex6 = complex0.negate();
      String string0 = complex6.I.toString();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex0.sinh();
      double double0 = complex8.getArgument();
      ComplexField complexField1 = complex1.getField();
      Complex complex9 = complex7.sqrt1z();
      Complex complex10 = complex9.I.atan();
      Complex complex11 = complex6.negate();
      Complex complex12 = complex9.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex0.I.tan();
      Complex complex4 = complex3.NaN.conjugate();
      String string0 = complex3.ONE.toString();
      Complex complex5 = complex1.ONE.conjugate();
      String string1 = complex0.toString();
      double double0 = complex0.getImaginary();
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.ZERO.createComplex(0.3333333333333333, (-466.89061400336));
      List<Complex> list0 = complex7.INF.nthRoot(1183);
      Complex complex8 = complex6.negate();
      Complex complex9 = complex8.ZERO.tanh();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex5.sin();
      Complex complex12 = complex8.add(complex1);
      Complex complex13 = complex1.cosh();
      Complex complex14 = complex4.ZERO.exp();
      Complex complex15 = complex9.multiply(complex10);
      Complex complex16 = complex15.INF.add(complex1);
      Complex complex17 = complex4.createComplex(1180.02131383, 0.3333333333333333);
      Complex complex18 = complex17.exp();
      double double1 = complex10.abs();
      Complex complex19 = complex0.log();
      Complex complex20 = complex9.asin();
      Complex complex21 = complex17.cos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.INF.nthRoot(1853);
      try { 
        complex0.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.negate();
      double double0 = complex0.NaN.getArgument();
      Complex complex3 = complex0.NaN.add(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex1.negate();
      String string0 = complex4.INF.toString();
      Complex complex5 = complex2.ONE.tan();
      Complex complex6 = complex4.ZERO.negate();
      double double1 = complex4.getArgument();
      boolean boolean1 = complex0.isNaN();
      ComplexField complexField1 = complex4.getField();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 1478.8351527745017);
      Complex complex2 = complex0.ZERO.pow(complex1);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(1301.477, 1301.477);
      Complex complex1 = complex0.ZERO.createComplex(1301.477, 1301.477);
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex1.NaN.acos();
      Complex complex4 = complex0.ZERO.sqrt1z();
      String string0 = complex0.toString();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.NaN.sqrt1z();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex7.ZERO.exp();
      Complex complex9 = complex1.sin();
      Complex complex10 = complex4.exp();
      List<Complex> list0 = complex10.I.nthRoot(1247);
      double double0 = complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ONE.toString();
      ComplexField complexField0 = complex0.getField();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply(2.0);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.I.sin();
      Complex complex4 = complex3.ZERO.divide(complex0);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex3.multiply(2.0);
      Complex complex7 = complex1.add(complex0);
      Complex complex8 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex1.I.log();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex0.NaN.log();
      Complex complex8 = complex7.NaN.tan();
      Object object0 = complex1.I.readResolve();
      Complex complex9 = complex0.divide(complex1);
      String string0 = complex2.INF.toString();
      Complex complex10 = complex9.createComplex(3161.931, 3161.931);
      double double0 = complex0.getArgument();
      boolean boolean0 = complex9.equals(complex3);
      Complex complex11 = complex9.createComplex(0.0, (-3423.375431267));
      Complex complex12 = complex2.exp();
      try { 
        complex12.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(0.14982303977012634, 2230.8728455331266);
      Complex complex1 = complex0.ONE.log();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = complex1.subtract(complex0);
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.acos();
      Object object0 = complex0.NaN.readResolve();
      Object object1 = complex0.readResolve();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex1.conjugate();
      double double0 = complex0.getImaginary();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex6.ZERO.cosh();
      String string0 = complex0.toString();
      Complex complex11 = complex4.I.atan();
      Complex complex12 = complex9.exp();
      String string1 = complex1.toString();
      double double1 = complex4.abs();
      Complex complex13 = complex8.tanh();
      Complex complex14 = complex13.ZERO.cos();
      boolean boolean0 = complex10.isInfinite();
      Complex complex15 = complex6.pow(complex13);
      Complex complex16 = complex11.sqrt1z();
      int int1 = complex1.hashCode();
      Complex complex17 = complex15.subtract(complex3);
      Complex complex18 = complex3.negate();
      Complex complex19 = complex15.sin();
      Complex complex20 = complex19.ZERO.createComplex(0.0, 2230.8728455331266);
      Object object2 = complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 895.0;
      Complex complex0 = new Complex(1192.218526, 895.0);
      double double1 = complex0.getImaginary();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.ZERO.conjugate();
      double double2 = complex2.ONE.getArgument();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex2.I.sqrt();
      Complex complex6 = complex4.NaN.pow(complex0);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex3.NaN.divide(complex7);
      Complex complex9 = complex6.ZERO.tan();
      Complex complex10 = complex2.subtract(complex0);
      Complex complex11 = complex2.sin();
      Complex complex12 = complex9.acos();
      Complex complex13 = complex12.NaN.sin();
      Complex complex14 = complex9.sqrt1z();
      Object object0 = complex6.readResolve();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt1z();
      double double0 = complex0.ONE.abs();
      Complex complex2 = complex0.I.sqrt();
      double double1 = complex0.abs();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex5.sin();
      double double2 = complex3.getReal();
      Complex complex7 = complex4.subtract(complex3);
      Complex complex8 = complex7.atan();
      Complex complex9 = complex4.tan();
      Complex complex10 = complex9.INF.cosh();
      Complex complex11 = complex2.exp();
      Complex complex12 = complex7.acos();
      boolean boolean0 = complex2.isInfinite();
      Object object0 = complex1.readResolve();
      Object object1 = complex0.readResolve();
      Complex complex13 = complex4.atan();
      Complex complex14 = complex6.createComplex((-2786.4133806568193), (-1428.96943));
      Complex complex15 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(228.348, 228.348);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.INF.asin();
      Object object0 = complex2.NaN.readResolve();
      double double0 = complex2.I.getArgument();
      List<Complex> list0 = complex0.nthRoot(1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.createComplex(1.5707963267948966, 739.200379);
      Complex complex5 = complex0.sinh();
      String string0 = complex1.INF.toString();
      double double1 = complex5.I.abs();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex7.ONE.add(complex5);
      Complex complex9 = complex0.cos();
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex10.acos();
      Complex complex12 = complex11.I.cosh();
      Complex complex13 = complex11.INF.cos();
      Complex complex14 = complex12.I.createComplex(238.5301, 635.7);
      Complex complex15 = complex11.acos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-749.245), (-749.245));
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = Complex.ONE;
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex0.ONE.pow(complex2);
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex3.cosh();
      Object object1 = complex3.INF.readResolve();
      Complex complex7 = complex2.ONE.exp();
      Complex complex8 = complex6.ZERO.tanh();
      ComplexField complexField0 = complex3.getField();
      double double0 = complex6.getReal();
      Complex complex9 = complex0.cos();
      Complex complex10 = complex2.negate();
      Complex complex11 = complex10.asin();
      Complex complex12 = complex2.I.sqrt1z();
      Complex complex13 = complex6.sin();
      Complex complex14 = complex3.tanh();
      Complex complex15 = complex6.cos();
      Complex complex16 = complex13.exp();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(594.4599, 594.4599);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.cosh();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.ONE.divide(complex2);
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = complex1.acos();
      double double0 = complex3.ZERO.abs();
      Complex complex7 = complex6.ONE.negate();
      boolean boolean0 = complex3.isNaN();
      double double1 = complex6.ZERO.getArgument();
      Complex complex8 = complex2.createComplex(0.0, 0.0);
      boolean boolean1 = complex6.isInfinite();
      Complex complex9 = complex4.ONE.exp();
      Complex complex10 = complex1.acos();
      Complex complex11 = complex6.atan();
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex11.multiply(complex7);
      Complex complex14 = complex13.add(complex2);
      double double2 = complex11.I.abs();
      String string0 = complex11.ZERO.toString();
      int int0 = complex13.ZERO.hashCode();
      Complex complex15 = complex14.negate();
      Complex complex16 = complex13.NaN.sinh();
      double double3 = complex7.getReal();
      Complex complex17 = complex4.negate();
      try { 
        complex16.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.ONE.multiply(complex0);
      ComplexField complexField0 = complex0.ZERO.getField();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.cos();
      double double1 = complex0.getReal();
      Complex complex4 = complex0.negate();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex3.INF.divide(complex5);
      Complex complex7 = complex4.add(complex3);
      Complex complex8 = complex7.I.divide(complex2);
      Complex complex9 = complex7.ONE.add(complex2);
      Complex complex10 = complex3.negate();
      Complex complex11 = complex7.I.multiply(0.0);
      Complex complex12 = complex9.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex13 = complex2.cosh();
      String string0 = complex13.ONE.toString();
      Complex complex14 = complex7.sqrt1z();
      double double2 = complex14.ONE.abs();
      Complex complex15 = complex9.log();
      Complex complex16 = complex10.exp();
      Complex complex17 = complex5.sin();
      Complex complex18 = complex17.atan();
      double double3 = complex11.getImaginary();
      Complex complex19 = complex2.multiply(complex17);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex2.NaN.tanh();
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex5.multiply(complex2);
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex0.divide(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex10 = complex0.tanh();
      int int0 = complex6.ZERO.hashCode();
      double double0 = complex1.getReal();
      double double1 = complex0.getImaginary();
      int int1 = complex10.hashCode();
      int int2 = complex10.hashCode();
      Complex complex11 = complex1.sin();
      Complex complex12 = complex2.NaN.divide(complex10);
      Complex complex13 = complex1.ZERO.asin();
      Complex complex14 = complex1.exp();
      Complex complex15 = complex14.divide(complex10);
      ComplexField complexField0 = complex6.getField();
      String string0 = complex15.ONE.toString();
      List<Complex> list0 = complex6.nthRoot(263);
      String string1 = complex15.NaN.toString();
      Complex complex16 = complex5.add(complex15);
      Complex complex17 = complex16.ONE.cos();
      Complex complex18 = complex2.sqrt();
      Complex complex19 = complex11.atan();
      Complex complex20 = complex9.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.createComplex((-936.29324058), (-936.29324058));
      Complex complex3 = complex2.ZERO.subtract(complex1);
      int int0 = complex1.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex2.createComplex((-3404.816879357), (-936.29324058));
      Object object0 = complex2.readResolve();
      boolean boolean1 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.INF.getField();
      try { 
        complex0.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(0.16666666666666666, 593.542766541933);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex5.ZERO.pow(complex3);
      Complex complex7 = complex5.I.multiply(0.16666666666666666);
      Complex complex8 = complex7.I.multiply(593.542766541933);
      Complex complex9 = complex0.subtract(complex1);
      double double0 = complex0.INF.abs();
      Complex complex10 = complex0.conjugate();
      Object object0 = complex0.readResolve();
      double double1 = complex6.getImaginary();
      ComplexField complexField0 = complex9.getField();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.INF.createComplex((-1.0), 0.11111095942313305);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = new Complex((-2592.1304972), (-2592.1304972));
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex4.exp();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex8.add(complex6);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = new Complex((-1.0), 6.283185307179586);
      Complex complex5 = complex0.divide(complex4);
      String string0 = complex5.NaN.toString();
      Complex complex6 = complex5.ONE.cosh();
      double double1 = complex5.getImaginary();
      Complex complex7 = complex5.cos();
      Complex complex8 = complex7.subtract(complex5);
      double double2 = complex6.getArgument();
      Complex complex9 = complex3.multiply(2860.5869241196);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.cosh();
      double double0 = complex2.ONE.getArgument();
      Object object0 = complex1.INF.readResolve();
      Complex complex4 = complex3.ZERO.multiply(0.0);
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.NaN.subtract(complex0);
      Complex complex7 = complex3.I.createComplex(Double.NaN, Double.NaN);
      Complex complex8 = complex7.createComplex(Double.NaN, 0.0);
      Complex complex9 = new Complex(0.0, Double.NaN);
      Complex complex10 = complex0.ZERO.add(complex9);
      Complex complex11 = complex8.cos();
      boolean boolean0 = complex3.isNaN();
      Complex complex12 = complex3.tan();
      int int0 = complex12.I.hashCode();
      Complex complex13 = complex8.acos();
      Complex complex14 = complex13.asin();
      Complex complex15 = complex5.divide(complex14);
      Complex complex16 = complex2.sqrt1z();
      boolean boolean1 = complex12.isNaN();
      Complex complex17 = complex10.acos();
      Complex complex18 = complex16.multiply(Double.NaN);
      Complex complex19 = complex7.add(complex14);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(1.5707963267948966, 1.5707963267948966);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex1.I.atan();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.INF.exp();
      Complex complex7 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.NaN.pow(complex1);
      Complex complex4 = complex1.ZERO.atan();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex0.INF.cos();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex1.multiply(Double.NaN);
      Complex complex9 = complex8.sin();
      Complex complex10 = complex4.pow(complex0);
      double double0 = complex10.ONE.getArgument();
      ComplexField complexField0 = complex5.getField();
      boolean boolean1 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex1.ZERO.createComplex((-5111.2928), Double.NaN);
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = complex5.ZERO.tanh();
      String string0 = complex1.INF.toString();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex5.ONE.tanh();
      Complex complex9 = complex7.NaN.createComplex((-5111.2928), Double.NaN);
      Complex complex10 = complex8.NaN.multiply(Double.NaN);
      String string1 = complex7.toString();
      double double0 = complex5.getReal();
      double double1 = complex7.getImaginary();
      Object object1 = complex0.readResolve();
      Complex complex11 = complex6.sqrt1z();
      Complex complex12 = complex7.atan();
      Complex complex13 = complex2.sqrt();
      Complex complex14 = complex8.cosh();
      double double2 = complex0.getArgument();
      boolean boolean0 = complex0.equals("(Infinity, Infinity)");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-348.86), 0.14285714285714285);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.acos();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex4.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 581.106);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex2.createComplex(0.0, 0.0);
      Complex complex7 = complex6.NaN.multiply(complex0);
      ComplexField complexField0 = complex4.getField();
      Complex complex8 = complex6.ZERO.sinh();
      Complex complex9 = complex4.cos();
      Complex complex10 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex0.multiply(complex2);
      Object object0 = complex4.readResolve();
      double double0 = complex2.getReal();
      Complex complex5 = complex1.I.exp();
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.ONE.sin();
      Complex complex9 = complex1.divide(complex7);
      int int0 = complex9.hashCode();
      Complex complex10 = complex9.add(complex1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt1z();
      double double0 = complex0.getReal();
      List<Complex> list0 = complex1.ONE.nthRoot(970);
      Complex complex2 = complex1.INF.add(complex0);
      double double1 = complex0.abs();
      Complex complex3 = complex1.createComplex(0.0, 0.4342944622039795);
      double double2 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 639.4854563150208);
      try { 
        complex0.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = Complex.I;
      Object object0 = complex2.INF.readResolve();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.ONE.divide(complex1);
      Complex complex5 = complex3.ONE.negate();
      ComplexField complexField0 = complex5.NaN.getField();
      boolean boolean0 = complex1.equals(complex0);
      double double0 = complex3.getReal();
      boolean boolean1 = complex1.equals(complex2);
      Complex complex6 = complex1.ZERO.multiply(Double.NaN);
      int int0 = complex5.hashCode();
      Object object1 = complex2.ZERO.readResolve();
      Complex complex7 = complex1.pow(complex4);
      Complex complex8 = complex7.acos();
      double double1 = complex7.NaN.abs();
      Complex complex9 = complex3.divide(complex1);
      Complex complex10 = complex8.cos();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex1.INF.asin();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = Complex.I;
      Complex complex7 = complex3.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.pow(complex1);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 3501.77730724);
      Complex complex1 = complex0.asin();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex1.NaN.cosh();
      Complex complex4 = complex0.sinh();
      Object object1 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.createComplex(1134.67532382, 0.0);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply(7.549789948768648E-8);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      String string0 = complex3.INF.toString();
      String string1 = complex0.toString();
      Complex complex4 = complex1.ONE.pow(complex3);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex5.NaN.multiply(0.0);
      Complex complex8 = complex5.ZERO.createComplex(159.554596, 0.0);
      int int0 = complex5.ONE.hashCode();
      boolean boolean1 = complex0.isInfinite();
      Complex complex9 = complex2.divide(complex0);
      try { 
        complex1.nthRoot((-3337));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,337
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.INF.cosh();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = complex0.ONE.pow(complex1);
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex4.equals(object0);
      Complex complex8 = complex4.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.sin();
      int int0 = complex0.hashCode();
      Complex complex4 = complex2.cos();
      double double0 = complex2.getReal();
      Complex complex5 = complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = Complex.INF;
      Object object0 = new Object();
      boolean boolean0 = complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(948.077, 2.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.sin();
      double double0 = complex3.INF.abs();
      boolean boolean0 = complex0.isInfinite();
      double double1 = complex1.getArgument();
      Complex complex4 = complex1.add(complex2);
      boolean boolean1 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.nthRoot(230);
      Complex complex1 = Complex.I;
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex3.NaN.pow(complex4);
      Complex complex6 = complex1.subtract(complex0);
      Complex complex7 = complex3.sin();
      Complex complex8 = complex2.subtract(complex4);
      Complex complex9 = complex8.cos();
      Complex complex10 = complex3.multiply((double) 230);
      Complex complex11 = complex3.log();
      Complex complex12 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getImaginary();
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex0.NaN.divide(complex1);
      Complex complex7 = complex6.exp();
      Complex complex8 = complex4.exp();
      Complex complex9 = complex8.atan();
      Complex complex10 = complex0.pow(complex1);
      Complex complex11 = complex10.I.tanh();
      Complex complex12 = complex0.exp();
      Complex complex13 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.NaN.exp();
      Object object0 = complex3.ONE.readResolve();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex5.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.nthRoot(17);
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.multiply((double) 17);
      Complex complex3 = complex2.ONE.divide(complex0);
      double double0 = complex1.getArgument();
      String string0 = complex0.toString();
      Complex complex4 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.ZERO.log();
      ComplexField complexField0 = complex0.getField();
      int int0 = (-1);
      Complex complex3 = complex0.NaN.divide(complex1);
      try { 
        complex0.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.ZERO.cosh();
      double double1 = complex1.abs();
      List<Complex> list0 = complex2.NaN.nthRoot(1);
      Object object0 = complex1.readResolve();
      Complex complex4 = complex3.multiply(1.1752011936438014);
      boolean boolean0 = complex3.equals(complex1);
      Complex complex5 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 4.455505956692757);
      Complex complex1 = complex0.createComplex(4.455505956692757, 0.0);
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.INF.sqrt();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.multiply(825.392112);
      Complex complex4 = complex3.INF.acos();
      ComplexField complexField0 = complex4.ZERO.getField();
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex0.tan();
      double double0 = complex6.getImaginary();
      String string0 = complex1.toString();
      double double1 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.sqrt1z();
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex5.ZERO.multiply(1.5);
      Complex complex7 = complex6.NaN.pow(complex5);
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex4.isNaN();
      String string0 = complex0.toString();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.exp();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.ONE.cos();
      List<Complex> list0 = complex3.nthRoot(17);
      Complex complex5 = complex1.log();
      Complex complex6 = complex3.ZERO.log();
      Complex complex7 = complex1.pow(complex2);
      Complex complex8 = complex2.cosh();
      ComplexField complexField0 = complex3.getField();
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex9.ONE.atan();
      Complex complex11 = complex3.INF.subtract(complex6);
      Complex complex12 = complex0.negate();
      Complex complex13 = complex7.conjugate();
      Complex complex14 = complex4.atan();
      Complex complex15 = complex14.asin();
      double double0 = complex9.getImaginary();
      Complex complex16 = complex11.asin();
      Complex complex17 = complex14.log();
      Complex complex18 = complex12.sqrt();
      Complex complex19 = complex6.sinh();
      Complex complex20 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-1466.74), (-2204.79833331328));
      Complex complex1 = complex0.ZERO.acos();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex1.I.asin();
      Complex complex4 = complex1.ZERO.atan();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex1.ONE.acos();
      Complex complex7 = complex1.tan();
      double double0 = complex7.getArgument();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex8.I.asin();
      Complex complex10 = complex7.multiply(complex5);
      Complex complex11 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(1559.65382269282, 1559.65382269282);
      Complex complex1 = complex0.sqrt1z();
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex1.tan();
      double double0 = complex1.ZERO.abs();
      Complex complex3 = complex1.multiply((-1371.626));
      Complex complex4 = complex3.NaN.negate();
      double double1 = complex3.getReal();
      Complex complex5 = complex3.INF.add(complex2);
      Complex complex6 = complex1.subtract(complex2);
      Complex complex7 = complex0.createComplex((-1371.626), (-432.0));
      Complex complex8 = complex7.NaN.acos();
      Complex complex9 = complex3.ONE.conjugate();
      Complex complex10 = complex7.NaN.atan();
      Complex complex11 = complex9.I.multiply(complex3);
      Complex complex12 = complex8.ONE.createComplex(0.0, (-3618.563328509));
      Complex complex13 = complex4.sqrt();
      int int1 = complex9.INF.hashCode();
      Complex complex14 = complex13.atan();
      double double2 = complex0.abs();
      Complex complex15 = complex2.pow(complex4);
      Complex complex16 = complex15.sqrt1z();
      Complex complex17 = complex1.INF.sqrt();
      Object object0 = complex1.readResolve();
      Complex complex18 = complex1.sqrt1z();
      Complex complex19 = complex11.exp();
      Complex complex20 = complex7.multiply(complex11);
      double double3 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.cos();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex2.NaN.cos();
      Complex complex5 = complex2.sqrt();
      double double0 = complex1.NaN.getArgument();
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex6.ZERO.sqrt1z();
      Complex complex8 = complex7.ZERO.subtract(complex2);
      Complex complex9 = complex5.I.add(complex2);
      Complex complex10 = complex5.INF.asin();
      Complex complex11 = complex10.ZERO.sqrt1z();
      Object object0 = complex0.readResolve();
      Complex complex12 = complex1.sqrt();
      ComplexField complexField0 = complex12.ONE.getField();
      Complex complex13 = complex9.exp();
      Complex complex14 = complex0.log();
      Object object1 = complex1.readResolve();
      Complex complex15 = complex14.acos();
      Complex complex16 = complex15.NaN.cosh();
      Complex complex17 = complex2.tanh();
      Complex complex18 = complex17.ONE.cos();
      Complex complex19 = complex3.log();
      Complex complex20 = complex15.tanh();
      Complex complex21 = complex11.tanh();
      double double1 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(3295.664035240761, 3295.664035240761);
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex2.NaN.multiply(3295.664035240761);
      List<Complex> list0 = complex1.ONE.nthRoot(1);
      Complex complex5 = complex2.add(complex1);
      Complex complex6 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.multiply(1.0);
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex2.I.log();
      Complex complex6 = complex0.ONE.pow(complex2);
      Complex complex7 = complex6.NaN.cosh();
      Complex complex8 = complex7.NaN.conjugate();
      Complex complex9 = complex1.divide(complex0);
      Complex complex10 = complex0.divide(complex1);
      Complex complex11 = complex10.INF.cosh();
      double double0 = complex0.abs();
      Complex complex12 = complex1.acos();
      Complex complex13 = complex0.multiply(Double.NaN);
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
