/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:21:03 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(1986.9538447, 1986.9538447);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.ZERO.divide(complex0);
      List<Complex> list0 = complex0.ONE.nthRoot(957);
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex3.ZERO.exp();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex0.ZERO.asin();
      Complex complex6 = complex3.subtract(complex0);
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex4.I.pow(complex6);
      Complex complex10 = complex2.pow(complex6);
      Complex complex11 = complex7.INF.sqrt1z();
      Complex complex12 = complex5.exp();
      Complex complex13 = complex4.multiply(complex0);
      Complex complex14 = complex1.add(complex2);
      Complex complex15 = complex14.multiply(complex7);
      Complex complex16 = complex5.multiply(complex15);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.createComplex((-795.0), (-795.0));
      Complex complex4 = complex0.NaN.pow(complex1);
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex5.negate();
      Complex complex8 = complex4.ONE.sinh();
      Complex complex9 = complex4.INF.atan();
      Complex complex10 = complex1.log();
      Complex complex11 = complex0.tan();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.isNaN();
      Complex complex12 = complex11.sin();
      Complex complex13 = complex12.sin();
      Complex complex14 = complex11.tanh();
      Complex complex15 = complex13.conjugate();
      Complex complex16 = complex13.createComplex(2584.459559534324, 2584.459559534324);
      ComplexField complexField0 = complex2.getField();
      Complex complex17 = complex3.sinh();
      double double0 = complex16.getArgument();
      Complex complex18 = complex6.sinh();
      Complex complex19 = complex14.cos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-716.2535333674591), (-716.2535333674591));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex1.ZERO.sqrt();
      Complex complex4 = complex3.INF.subtract(complex0);
      Complex complex5 = complex0.atan();
      double double0 = complex0.NaN.abs();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex6.cos();
      Complex complex9 = complex1.ZERO.log();
      Complex complex10 = complex6.ONE.add(complex1);
      double double1 = complex10.I.getArgument();
      String string0 = complex6.toString();
      boolean boolean0 = complex7.isInfinite();
      boolean boolean1 = complex5.equals(complex8);
      Complex complex11 = complex8.negate();
      Complex complex12 = complex11.I.subtract(complex6);
      Complex complex13 = complex6.cosh();
      Complex complex14 = complex0.multiply(complex4);
      Complex complex15 = complex14.I.negate();
      Complex complex16 = complex11.asin();
      double double2 = complex2.getArgument();
      double double3 = complex12.abs();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.INF.sqrt1z();
      boolean boolean0 = complex1.isInfinite();
      Complex complex4 = complex1.multiply(0.0);
      Complex complex5 = complex4.ONE.createComplex((-1840.99), 3.814697265625E-6);
      Complex complex6 = complex1.createComplex(0.0, Double.NaN);
      Complex complex7 = complex4.I.createComplex(0.0, 0.0);
      Complex complex8 = complex1.sin();
      Complex complex9 = complex3.sqrt1z();
      boolean boolean1 = complex1.isNaN();
      Complex complex10 = complex9.I.cosh();
      Complex complex11 = complex0.log();
      Complex complex12 = complex7.sinh();
      Complex complex13 = complex12.conjugate();
      Complex complex14 = complex1.sin();
      try { 
        complex0.nthRoot((-1536));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,536
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.NaN.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply((-1.7168146928204135));
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex0.exp();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.log();
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex6.I.atan();
      Complex complex9 = complex7.NaN.conjugate();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex6.cosh();
      Complex complex12 = complex6.add(complex11);
      Object object1 = complex4.readResolve();
      double double0 = complex5.ZERO.abs();
      boolean boolean0 = complex4.equals(complex11);
      Complex complex13 = complex5.multiply(complex9);
      Complex complex14 = complex13.INF.pow(complex10);
      Complex complex15 = complex1.cos();
      Complex complex16 = complex3.createComplex(2414.33497098482, (-1.7168146928204135));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.INF.exp();
      try { 
        complex0.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(0.0952233225107193, 0.0952233225107193);
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.multiply(0.0952233225107193);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.multiply((-2695.90708414));
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.ONE.sqrt();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex0.ZERO.atan();
      Complex complex6 = complex5.INF.multiply(Double.NaN);
      Complex complex7 = complex3.cos();
      Complex complex8 = complex3.tan();
      Complex complex9 = complex3.sinh();
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 1893.17;
      Complex complex0 = new Complex(1893.17, (-1962.7185099));
      try { 
        complex0.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 167.5964392);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.I.log();
      double double0 = complex1.getArgument();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.log();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.I.cos();
      Complex complex8 = complex6.conjugate();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.INF.tan();
      double double0 = complex0.abs();
      Object object0 = complex1.readResolve();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.I.sqrt1z();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex1.cosh();
      double double1 = complex2.getArgument();
      Complex complex6 = complex3.add(complex5);
      Complex complex7 = complex0.subtract(complex3);
      Complex complex8 = complex7.atan();
      Complex complex9 = complex5.asin();
      boolean boolean1 = complex7.equals(complex0);
      Complex complex10 = complex6.exp();
      Complex complex11 = complex7.negate();
      Complex complex12 = complex4.add(complex5);
      Complex complex13 = complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sin();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ZERO.atan();
      boolean boolean0 = complex2.isInfinite();
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex4.ONE.cosh();
      int int1 = complex5.ZERO.hashCode();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.exp();
      Complex complex8 = complex3.subtract(complex6);
      int int2 = complex8.I.hashCode();
      double double0 = complex3.INF.getArgument();
      Complex complex9 = complex8.INF.log();
      Complex complex10 = complex2.pow(complex3);
      Object object0 = complex6.I.readResolve();
      Complex complex11 = complex10.ZERO.subtract(complex7);
      Object object1 = complex2.readResolve();
      Object object2 = complex2.readResolve();
      Complex complex12 = complex3.asin();
      Complex complex13 = complex8.atan();
      boolean boolean1 = complex2.isInfinite();
      Complex complex14 = complex11.tan();
      boolean boolean2 = complex14.equals((Object) null);
      double double1 = complex11.getReal();
      Complex complex15 = complex13.sqrt1z();
      Complex complex16 = complex8.divide(complex7);
      boolean boolean3 = complex13.isInfinite();
      double double2 = complex5.getReal();
      Complex complex17 = complex8.asin();
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex0.tan();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.NaN.toString();
      List<Complex> list0 = complex0.nthRoot(37);
      Complex complex1 = complex0.createComplex(0.2, (-6983.7897496345));
      String string1 = complex0.toString();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.NaN.subtract(complex0);
      Complex complex6 = complex3.sqrt1z();
      List<Complex> list1 = complex2.ZERO.nthRoot(37);
      String string2 = complex0.INF.toString();
      Complex complex7 = complex1.NaN.sqrt1z();
      ComplexField complexField0 = complex1.getField();
      boolean boolean0 = complex1.isInfinite();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex8.NaN.createComplex(0.2, Double.POSITIVE_INFINITY);
      double double0 = complex2.abs();
      Complex complex10 = complex8.sqrt();
      Complex complex11 = complex10.exp();
      Complex complex12 = complex7.negate();
      String string3 = complex2.ONE.toString();
      Complex complex13 = complex1.subtract(complex2);
      Object object0 = complex7.readResolve();
      Object object1 = complex9.readResolve();
      Object object2 = complex10.readResolve();
      Complex complex14 = Complex.I;
      Complex complex15 = complex0.add(complex14);
      Complex complex16 = complex12.pow(complex15);
      Complex complex17 = complex6.sinh();
      double double1 = complex13.abs();
      Complex complex18 = complex11.createComplex(Double.POSITIVE_INFINITY, 1.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(1926.96195137, 2037.2667266344);
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.tanh();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex3 = complex1.I.asin();
      double double0 = complex1.ONE.getArgument();
      Complex complex4 = complex1.tanh();
      double double1 = complex4.INF.abs();
      double double2 = complex0.getImaginary();
      double double3 = complex3.getImaginary();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex4.pow(complex1);
      Complex complex7 = complex6.ONE.asin();
      List<Complex> list0 = complex7.I.nthRoot(1293);
      Complex complex8 = complex7.negate();
      Complex complex9 = complex5.multiply(0.0);
      Complex complex10 = complex6.tanh();
      Complex complex11 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.ONE.sin();
      Complex complex13 = complex1.cos();
      double double4 = complex6.abs();
      double double5 = complex6.abs();
      Complex complex14 = complex6.negate();
      Complex complex15 = complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sinh();
      double double0 = complex1.ZERO.getArgument();
      int int0 = complex0.hashCode();
      String string0 = complex0.I.toString();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.I.multiply(0.0);
      Complex complex3 = complex2.ZERO.exp();
      double double1 = complex0.abs();
      Complex complex4 = complex0.negate();
      boolean boolean0 = complex1.isInfinite();
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = complex5.NaN.subtract(complex1);
      Complex complex7 = complex5.I.sqrt();
      Complex complex8 = complex5.INF.cosh();
      Object object1 = complex5.INF.readResolve();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex0.acos();
      Complex complex11 = complex10.ONE.createComplex(Double.NaN, Double.NaN);
      String string1 = complex10.toString();
      Complex complex12 = complex1.sin();
      double double2 = complex0.getArgument();
      Complex complex13 = complex0.asin();
      Complex complex14 = complex1.divide(complex0);
      boolean boolean1 = complex13.isNaN();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.INF.pow(complex2);
      Complex complex4 = complex3.ONE.sinh();
      double double0 = complex0.I.abs();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.ZERO.sqrt();
      double double1 = complex5.getReal();
      Complex complex7 = complex5.ZERO.tanh();
      Complex complex8 = complex7.NaN.asin();
      Object object0 = complex2.readResolve();
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex0.negate();
      boolean boolean0 = complex6.isNaN();
      Object object1 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-1528.338098481553), (-1528.338098481553));
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex0.createComplex((-1528.338098481553), 0.0);
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.atan();
      double double0 = complex1.abs();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.divide(complex1);
      double double1 = complex4.abs();
      Object object0 = complex1.ZERO.readResolve();
      double double2 = complex5.getImaginary();
      Complex complex6 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-1934.4193977), (-1934.4193977));
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      Complex complex1 = complex0.multiply((-4878.252290791));
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex1.add(complex5);
      boolean boolean0 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex2.ZERO.multiply(Double.POSITIVE_INFINITY);
      Object object0 = complex4.INF.readResolve();
      Complex complex5 = complex2.NaN.conjugate();
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex0.NaN.asin();
      Complex complex8 = complex7.log();
      Complex complex9 = complex6.I.cosh();
      Complex complex10 = complex0.ZERO.add(complex1);
      int int0 = complex0.hashCode();
      double double0 = complex10.getArgument();
      Complex complex11 = complex5.exp();
      try { 
        complex7.nthRoot((-3111));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,111
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Object object0 = complex0.NaN.readResolve();
      Complex complex2 = complex1.exp();
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex2.multiply(4093.17926556059);
      int int0 = complex0.hashCode();
      List<Complex> list0 = complex0.nthRoot(872);
      Complex complex4 = complex2.log();
      Complex complex5 = complex0.log();
      Complex complex6 = complex4.ZERO.sin();
      double double0 = complex5.getImaginary();
      Complex complex7 = complex1.subtract(complex4);
      Complex complex8 = complex2.ZERO.sqrt1z();
      Complex complex9 = complex3.I.atan();
      Complex complex10 = complex5.I.acos();
      Object object1 = complex5.readResolve();
      Complex complex11 = complex1.subtract(complex5);
      int int1 = complex11.ZERO.hashCode();
      double double1 = complex2.ZERO.abs();
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex12.multiply(complex0);
      Complex complex14 = complex2.NaN.cos();
      Complex complex15 = complex0.sqrt1z();
      Complex complex16 = complex3.multiply(complex4);
      Complex complex17 = complex16.ONE.acos();
      Complex complex18 = complex1.tan();
      Complex complex19 = complex16.multiply(complex10);
      int int2 = complex0.hashCode();
      Object object2 = complex1.readResolve();
      Complex complex20 = complex18.conjugate();
      Complex complex21 = complex10.sin();
      Complex complex22 = complex15.cosh();
      Object object3 = complex3.readResolve();
      Complex complex23 = complex9.sqrt();
      double double2 = complex23.getArgument();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex0.getReal();
      Complex complex2 = complex1.log();
      double double1 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-4128.4276), (-1.0));
      Complex complex1 = complex0.I.acos();
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex4.I.tan();
      Complex complex7 = complex2.I.sin();
      boolean boolean0 = complex2.isInfinite();
      Complex complex8 = complex2.pow(complex0);
      int int1 = (-518);
      String string0 = complex0.ZERO.toString();
      try { 
        complex8.nthRoot((-518));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -518
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.NaN.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.ZERO.multiply(complex1);
      double double0 = complex0.NaN.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.cosh();
      double double1 = complex3.getArgument();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex5.acos();
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex0.ONE.divide(complex2);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex3.ZERO.add(complex0);
      Complex complex7 = complex5.NaN.asin();
      boolean boolean0 = complex3.isNaN();
      boolean boolean1 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = new Complex((-2499.0), (-2499.0));
      Complex complex4 = complex0.I.add(complex3);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.pow(complex0);
      String string0 = complex0.ONE.toString();
      Complex complex7 = complex3.NaN.log();
      Complex complex8 = complex7.INF.log();
      Object object0 = complex0.I.readResolve();
      double double0 = complex0.getArgument();
      Complex complex9 = complex4.cosh();
      Complex complex10 = complex9.ONE.asin();
      List<Complex> list0 = complex3.nthRoot(253);
      double double1 = complex5.abs();
      double double2 = complex9.getArgument();
      Complex complex11 = complex2.add(complex9);
      String string1 = complex2.toString();
      double double3 = complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      List<Complex> list0 = complex0.nthRoot(461);
      Complex complex2 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = Complex.ONE;
      List<Complex> list0 = complex0.nthRoot(229);
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex3.INF.sin();
      double double0 = complex6.ZERO.getArgument();
      Object object0 = complex4.readResolve();
      Complex complex7 = complex0.INF.divide(complex4);
      boolean boolean0 = complex2.equals(object0);
      Complex complex8 = complex3.sqrt1z();
      List<Complex> list1 = complex2.I.nthRoot(446);
      boolean boolean1 = complex1.equals(complex2);
      Complex complex9 = complex2.pow(complex8);
      Complex complex10 = complex0.multiply((double) 229);
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex8.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-1581.011865456), (-1581.011865456));
      boolean boolean0 = complex0.isInfinite();
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.createComplex((-1581.011865456), (-1581.011865456));
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex4.INF.tanh();
      int int1 = complex1.hashCode();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex0.sin();
      String string0 = complex8.NaN.toString();
      Complex complex9 = complex8.ZERO.cos();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex0.I.sin();
      Complex complex12 = complex11.ZERO.pow(complex7);
      Complex complex13 = complex2.I.asin();
      double double0 = complex1.getArgument();
      Complex complex14 = complex1.add(complex8);
      Complex complex15 = complex9.tan();
      Complex complex16 = complex10.acos();
      ComplexField complexField0 = complex0.getField();
      Complex complex17 = complex10.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.sinh();
      List<Complex> list0 = complex0.nthRoot(1);
      Object object1 = complex0.readResolve();
      Complex complex2 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex2.INF.asin();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.multiply(41.3067209023);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-621.0617), 0.06666666666666667);
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex1.NaN.add(complex3);
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex1.NaN.divide(complex0);
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex6.INF.negate();
      double double0 = complex8.ONE.getArgument();
      boolean boolean0 = complex0.isInfinite();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex9.I.divide(complex5);
      Complex complex11 = complex0.sinh();
      boolean boolean1 = complex6.equals(complex8);
      Complex complex12 = complex3.ZERO.divide(complex0);
      Complex complex13 = complex0.ONE.exp();
      try { 
        complex6.nthRoot((-985));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -985
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.exp();
      Object object0 = complex0.I.readResolve();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.subtract(complex3);
      Object object1 = complex3.readResolve();
      Complex complex5 = complex4.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-2057.63078327), (-2057.63078327));
      Complex complex1 = complex0.INF.createComplex((-2057.63078327), (-2057.63078327));
      Complex complex2 = complex1.ONE.tan();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      String string0 = complex1.ONE.toString();
      double double0 = complex0.ZERO.abs();
      Complex complex2 = complex1.ONE.subtract(complex0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex2.I.sin();
      double double1 = complex3.ZERO.getArgument();
      Object object0 = complex1.readResolve();
      double double2 = complex0.getImaginary();
      int int0 = complex1.hashCode();
      Complex complex4 = complex3.NaN.tanh();
      String string1 = complex4.INF.toString();
      Complex complex5 = complex0.multiply(0.0);
      Complex complex6 = complex5.INF.acos();
      Object object1 = complex6.I.readResolve();
      Object object2 = complex0.readResolve();
      ComplexField complexField0 = complex2.getField();
      boolean boolean1 = complex3.isInfinite();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.negate();
      Complex complex9 = complex7.NaN.negate();
      Complex complex10 = complex0.multiply(complex7);
      ComplexField complexField1 = complex2.getField();
      Complex complex11 = complex1.sin();
      double double3 = complex11.ZERO.getArgument();
      int int1 = complex7.hashCode();
      boolean boolean2 = complex1.isNaN();
      boolean boolean3 = complex6.equals(complex4);
      Complex complex12 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply(1501.0);
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.multiply(1783.49498540727);
      Complex complex3 = complex1.ZERO.tan();
      Complex complex4 = complex3.NaN.log();
      double double0 = complex1.getImaginary();
      Complex complex5 = complex1.I.conjugate();
      Complex complex6 = new Complex(25.19, 0.0);
      Complex complex7 = complex1.pow(complex6);
      ComplexField complexField0 = complex7.NaN.getField();
      boolean boolean0 = complex2.isInfinite();
      Complex complex8 = complex6.add(complex1);
      Complex complex9 = complex5.sinh();
      boolean boolean1 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.I.conjugate();
      double double0 = complex1.abs();
      Object object0 = complex2.NaN.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex2.ZERO.sinh();
      double double1 = complex1.getImaginary();
      Complex complex5 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.cos();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.NaN.cosh();
      double double0 = complex3.getImaginary();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex5.NaN.cosh();
      Complex complex7 = complex6.ZERO.sin();
      Complex complex8 = complex7.I.sin();
      double double1 = complex5.getReal();
      Complex complex9 = complex6.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      int int0 = complex0.hashCode();
      List<Complex> list0 = complex0.nthRoot(2444);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.conjugate();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.divide(complex4);
      Complex complex6 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      List<Complex> list0 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.nthRoot(143);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.I.pow(complex1);
      Object object0 = complex4.NaN.readResolve();
      Complex complex6 = complex4.cos();
      String string0 = complex4.toString();
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex7.asin();
      Complex complex9 = complex4.atan();
      int int0 = complex0.hashCode();
      Object object1 = complex8.readResolve();
      boolean boolean0 = complex7.equals(object1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.5, 0.5);
      Complex complex1 = complex0.createComplex(0.5, 0.5);
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex2.NaN.add(complex1);
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.ONE.conjugate();
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex0.I.sinh();
      Complex complex6 = complex1.createComplex(0.0, 0.0);
      Complex complex7 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex1.ONE.conjugate();
      Complex complex5 = complex4.ONE.cosh();
      String string0 = complex0.I.toString();
      Complex complex6 = complex2.NaN.tan();
      Complex complex7 = complex1.ONE.multiply(1.0E-6);
      int int0 = complex3.ZERO.hashCode();
      int int1 = complex2.INF.hashCode();
      Complex complex8 = complex3.atan();
      Complex complex9 = complex0.multiply(complex1);
      Complex complex10 = complex9.I.divide(complex1);
      Complex complex11 = complex1.divide(complex9);
      Complex complex12 = complex11.createComplex((-3778.191), 2.0);
      double double0 = complex12.NaN.getArgument();
      Object object0 = complex10.readResolve();
      Complex complex13 = complex3.add(complex11);
      Complex complex14 = complex13.INF.tan();
      int int2 = complex3.hashCode();
      Complex complex15 = complex7.negate();
      Object object1 = complex2.readResolve();
      Complex complex16 = new Complex(0.0, 1.0E-6);
      Complex complex17 = complex7.pow(complex16);
      List<Complex> list0 = complex17.INF.nthRoot(86);
      int int3 = complex17.ONE.hashCode();
      double double1 = complex12.getReal();
      Object object2 = new Object();
      boolean boolean0 = complex8.equals(object2);
      Complex complex18 = complex10.createComplex((-3778.191), 1.0E-6);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex0.NaN.atan();
      Complex complex6 = complex4.I.tan();
      double double0 = complex0.getImaginary();
      Complex complex7 = complex3.NaN.acos();
      Complex complex8 = complex3.atan();
      int int0 = complex8.ONE.hashCode();
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex8.conjugate();
      Object object0 = complex9.readResolve();
      boolean boolean0 = complex7.equals(object0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex1.ONE.sin();
      int int0 = 0;
      Complex complex7 = complex1.sinh();
      double double0 = complex2.abs();
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.createComplex(2.718281828459045, 0.0);
      Complex complex3 = complex1.NaN.multiply(4.503599627370496E15);
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex3.ONE.cos();
      int int0 = complex2.hashCode();
      Complex complex6 = complex2.asin();
      List<Complex> list0 = complex0.NaN.nthRoot(4146);
      Complex complex7 = complex0.INF.sqrt();
      String string0 = complex1.ONE.toString();
      Complex complex8 = complex0.pow(complex1);
      Object object0 = complex0.readResolve();
      Complex complex9 = complex8.acos();
      Complex complex10 = complex8.pow(complex0);
      Complex complex11 = complex5.I.sqrt1z();
      Complex complex12 = complex2.ONE.negate();
      Complex complex13 = complex10.sinh();
      Complex complex14 = Complex.ZERO;
      Complex complex15 = complex9.NaN.multiply(complex14);
      double double0 = complex10.getReal();
      boolean boolean0 = complex1.equals(complex2);
      Complex complex16 = complex9.sin();
      double double1 = complex3.getReal();
      Complex complex17 = complex0.subtract(complex13);
      Complex complex18 = complex8.acos();
      boolean boolean1 = complex6.isInfinite();
      Complex complex19 = complex9.conjugate();
      boolean boolean2 = complex5.isNaN();
      Complex complex20 = complex3.multiply(4.503599627370496E15);
      Object object1 = complex4.readResolve();
      ComplexField complexField0 = complex3.getField();
      Complex complex21 = complex15.multiply((double) 4146);
      Complex complex22 = complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.exp();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex0.atan();
      ComplexField complexField0 = complex4.getField();
      Complex complex6 = complex4.divide(complex5);
      Complex complex7 = complex2.log();
      Complex complex8 = complex3.divide(complex7);
      Complex complex9 = complex8.acos();
      Complex complex10 = complex2.sin();
      Complex complex11 = complex10.pow(complex9);
      double double0 = complex9.INF.abs();
      int int0 = 0;
      Complex complex12 = complex7.I.acos();
      try { 
        complex11.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = null;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex2.ZERO.sin();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = complex2.ZERO.subtract(complex4);
      Complex complex8 = complex5.ZERO.tanh();
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.NaN.atan();
      List<Complex> list0 = complex9.ONE.nthRoot(1);
      boolean boolean0 = complex5.equals(complex9);
      ComplexField complexField1 = complex2.ZERO.getField();
      Complex complex11 = complex6.sqrt1z();
      int int0 = complex2.hashCode();
      Complex complex12 = complex2.add(complex0);
      Complex complex13 = complex11.cosh();
      ComplexField complexField2 = complex9.getField();
      ComplexField complexField3 = complex8.getField();
      Complex complex14 = complex13.multiply(2003.8119225);
      int int1 = complex4.hashCode();
      List<Complex> list1 = complex11.nthRoot(1);
      Complex complex15 = complex13.acos();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex2.ONE.sin();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex4.ZERO.multiply(1.0);
      Complex complex8 = complex1.NaN.subtract(complex6);
      Complex complex9 = complex8.I.log();
      Complex complex10 = complex7.ONE.createComplex((-989.3937237033452), 1.0);
      int int0 = complex2.hashCode();
      Complex complex11 = complex4.tan();
      int int1 = complex11.INF.hashCode();
      Complex complex12 = complex0.exp();
      Complex complex13 = complex3.multiply(0.0);
      double double0 = complex13.ONE.abs();
      boolean boolean0 = complex13.isInfinite();
      Complex complex14 = Complex.INF;
      Complex complex15 = complex6.divide(complex14);
  }
}
