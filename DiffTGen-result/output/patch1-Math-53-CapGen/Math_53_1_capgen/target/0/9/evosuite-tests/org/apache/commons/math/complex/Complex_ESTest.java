/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:14:13 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-2156.205654312), (-2156.205654312));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.I.multiply((-0.2499999701976776));
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex7.exp();
      Complex complex9 = complex7.ONE.sin();
      Complex complex10 = complex8.I.cosh();
      Complex complex11 = complex8.I.asin();
      Complex complex12 = complex11.I.exp();
      Complex complex13 = complex6.atan();
      Complex complex14 = complex7.sinh();
      Object object0 = complex14.INF.readResolve();
      Complex complex15 = complex6.log();
      Complex complex16 = complex7.sqrt1z();
      double double0 = complex0.abs();
      Complex complex17 = complex15.add(complex5);
      Complex complex18 = complex17.NaN.conjugate();
      Complex complex19 = complex6.exp();
      Complex complex20 = complex19.multiply((-0.2499999701976776));
      double double1 = complex4.getImaginary();
      double double2 = complex10.getArgument();
      Complex complex21 = complex17.negate();
      double double3 = complex0.getReal();
      Complex complex22 = complex16.createComplex(0.0, 199.11);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex0.conjugate();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex3.atan();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex2.log();
      Complex complex6 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(1863.24767726801, 2532.3238590179);
      Complex complex1 = complex0.ZERO.asin();
      int int0 = complex1.hashCode();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex0.exp();
      double double0 = complex5.INF.getArgument();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.I.log();
      Complex complex8 = complex0.ZERO.asin();
      List<Complex> list0 = complex7.NaN.nthRoot(2249);
      Complex complex9 = complex3.cos();
      Complex complex10 = complex9.ONE.add(complex8);
      double double1 = complex9.getArgument();
      int int1 = complex3.hashCode();
      Complex complex11 = complex2.add(complex4);
      double double2 = complex0.getArgument();
      Complex complex12 = complex5.multiply(2104.2809752845337);
      double double3 = complex9.getReal();
      Complex complex13 = complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.NaN.readResolve();
      try { 
        complex0.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.INF.readResolve();
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex1.NaN.cosh();
      ComplexField complexField0 = complex4.INF.getField();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex2.createComplex((-2682.369429440801), (-2682.369429440801));
      Complex complex7 = complex6.multiply(Double.NaN);
      Complex complex8 = complex1.log();
      Complex complex9 = complex1.exp();
      Complex complex10 = complex4.divide(complex2);
      List<Complex> list0 = complex10.NaN.nthRoot(36);
      String string0 = complex0.toString();
      Complex complex11 = complex9.acos();
      Complex complex12 = complex1.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex0.negate();
      double double0 = complex3.getArgument();
      boolean boolean0 = complex1.isInfinite();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex3.subtract(complex2);
      Object object0 = complex5.readResolve();
      Complex complex6 = complex0.tanh();
      double double1 = complex6.I.abs();
      Complex complex7 = complex2.NaN.add(complex5);
      Complex complex8 = complex6.INF.tanh();
      int int1 = complex5.hashCode();
      Complex complex9 = complex3.subtract(complex5);
      Complex complex10 = Complex.ONE;
      double double2 = complex10.ONE.getArgument();
      Complex complex11 = complex9.ZERO.divide(complex10);
      Complex complex12 = complex11.pow(complex4);
      double double3 = complex3.getImaginary();
      double double4 = complex5.NaN.getArgument();
      Complex complex13 = complex5.tanh();
      Complex complex14 = complex11.asin();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = new Complex((-1837.157444), (-1.0));
      Complex complex2 = complex0.ZERO.add(complex1);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = complex4.ZERO.acos();
      String string0 = complex5.INF.toString();
      double double1 = complex0.abs();
      Complex complex7 = complex0.ONE.createComplex((-1.7976931348623157E308), 1.0);
      boolean boolean0 = complex3.isNaN();
      ComplexField complexField0 = complex4.getField();
      Complex complex8 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(511.67187004, 511.67187004);
      Complex complex1 = complex0.I.createComplex(511.67187004, 0.0);
      int int0 = complex1.ZERO.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.ONE.acos();
      List<Complex> list0 = complex1.I.nthRoot(8);
      double double0 = complex1.abs();
      boolean boolean0 = complex0.equals(object0);
      double double1 = complex1.getImaginary();
      Complex complex3 = complex0.subtract(complex1);
      String string0 = complex1.toString();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex3.divide(complex5);
      Complex complex8 = complex4.multiply(complex6);
      Complex complex9 = complex8.INF.add(complex4);
      double double2 = complex9.ONE.getArgument();
      Complex complex10 = complex9.INF.log();
      Complex complex11 = complex6.ZERO.cos();
      Complex complex12 = complex1.INF.sin();
      Complex complex13 = complex9.multiply(complex7);
      Complex complex14 = complex4.I.cos();
      Complex complex15 = complex1.conjugate();
      Complex complex16 = complex7.atan();
      Complex complex17 = complex1.pow(complex0);
      String string1 = complex16.ONE.toString();
      double double3 = complex6.getArgument();
      Complex complex18 = complex17.sin();
      double double4 = complex9.INF.abs();
      boolean boolean1 = complex2.equals(complex14);
      Complex complex19 = complex4.sqrt();
      Complex complex20 = complex10.atan();
      int int1 = complex18.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex1.ZERO.asin();
      Complex complex5 = complex1.NaN.tan();
      Complex complex6 = complex5.NaN.divide(complex0);
      Complex complex7 = complex4.I.sqrt();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex4.NaN.sin();
      Complex complex10 = complex9.acos();
      Object object0 = complex4.I.readResolve();
      Complex complex11 = complex0.ONE.sqrt();
      Complex complex12 = complex11.INF.sqrt();
      Complex complex13 = complex12.I.tanh();
      Complex complex14 = complex5.INF.cos();
      try { 
        complex4.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-1606.9488), 0.0);
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.asin();
      Object object1 = complex1.readResolve();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex2.NaN.sin();
      Complex complex5 = complex1.tanh();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.ZERO.add(complex6);
      boolean boolean0 = complex2.isNaN();
      double double0 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex1.ZERO.sqrt();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.INF.asin();
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex1.ONE.multiply(complex7);
      Complex complex9 = complex0.INF.sinh();
      Complex complex10 = complex6.INF.multiply(0.0);
      List<Complex> list0 = complex1.INF.nthRoot(257);
      boolean boolean0 = complex0.isInfinite();
      List<Complex> list1 = complex3.nthRoot(2194);
      Complex complex11 = complex4.log();
      Complex complex12 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.INF.sin();
      List<Complex> list0 = complex0.ZERO.nthRoot(1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.cosh();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex6.INF.sqrt();
      Complex complex8 = complex1.ZERO.divide(complex5);
      Complex complex9 = complex8.I.cos();
      Complex complex10 = complex9.ZERO.log();
      Object object0 = complex0.readResolve();
      double double0 = complex0.getReal();
      boolean boolean0 = complex3.equals(complex8);
      double double1 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(2663.12439769884, 2663.12439769884);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.NaN.acos();
      List<Complex> list0 = complex0.NaN.nthRoot(188);
      Complex complex4 = complex1.sinh();
      double double0 = complex4.ONE.getArgument();
      double double1 = complex0.getReal();
      Complex complex5 = complex4.cosh();
      String string0 = complex4.toString();
      Complex complex6 = complex4.NaN.createComplex(188, 739.3557160347191);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex8.ZERO.negate();
      List<Complex> list1 = complex0.nthRoot(188);
      double double2 = complex4.getArgument();
      Complex complex10 = complex7.sin();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex1.multiply((-247.9486));
      double double0 = complex0.INF.abs();
      Complex complex4 = complex1.I.tanh();
      Complex complex5 = complex1.I.sin();
      Complex complex6 = complex4.I.multiply(Double.POSITIVE_INFINITY);
      String string0 = complex0.toString();
      int int0 = complex0.hashCode();
      Complex complex7 = complex1.pow(complex4);
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex8.sin();
      List<Complex> list1 = complex8.nthRoot(1);
      Complex complex10 = complex5.subtract(complex0);
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex5.tanh();
      Complex complex13 = complex9.log();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.INF.atan();
      Object object0 = complex1.readResolve();
      List<Complex> list0 = complex0.nthRoot(2654);
      double double0 = complex3.abs();
      Complex complex5 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.asin();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex3 = complex0.conjugate();
      double double0 = complex3.I.abs();
      double double1 = complex0.getArgument();
      double double2 = complex1.getImaginary();
      Complex complex4 = complex0.cosh();
      String string0 = complex4.toString();
      List<Complex> list0 = complex2.nthRoot(1);
      boolean boolean0 = complex1.isInfinite();
      boolean boolean1 = complex1.isNaN();
      ComplexField complexField1 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.INF.sinh();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex1.NaN.sqrt();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex5.conjugate();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex2.atan();
      Object object0 = complex4.readResolve();
      Complex complex11 = complex2.log();
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex9.add(complex12);
      Complex complex14 = complex8.sqrt();
      Complex complex15 = complex9.multiply(complex10);
      Complex complex16 = complex10.subtract(complex4);
      Complex complex17 = complex11.INF.atan();
      try { 
        complex11.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.ZERO.acos();
      double double0 = 0.0;
      Complex complex2 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex1.ZERO.tan();
      Complex complex5 = null;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply((-289.863214195));
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.INF.sqrt();
      double double0 = complex0.getReal();
      Complex complex6 = complex4.I.sinh();
      Complex complex7 = complex4.INF.conjugate();
      Complex complex8 = complex4.add(complex0);
      double double1 = complex5.getReal();
      Complex complex9 = complex1.conjugate();
      boolean boolean0 = complex6.isInfinite();
      Complex complex10 = complex6.log();
      double double2 = complex4.abs();
      Complex complex11 = complex7.createComplex((-496.0438469561706), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-301.0102779255377), (-301.0102779255377));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.cos();
      double double0 = complex1.ZERO.abs();
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex4.multiply((-1362.86826696054));
      Complex complex6 = complex3.atan();
      double double1 = complex0.abs();
      double double2 = complex2.abs();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex1.I.multiply(complex0);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = new Complex(6.283185307179586, 1574.881);
      Complex complex4 = complex3.ZERO.add(complex0);
      Complex complex5 = complex1.pow(complex3);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex7.divide(complex6);
      Complex complex9 = complex8.INF.acos();
      Complex complex10 = complex8.ONE.divide(complex7);
      Complex complex11 = complex7.atan();
      Complex complex12 = complex7.I.add(complex9);
      Complex complex13 = complex6.multiply(complex7);
      double double0 = complex13.getImaginary();
      Complex complex14 = complex9.sqrt();
      Complex complex15 = complex3.sinh();
      Complex complex16 = complex9.multiply(complex6);
      double double1 = complex14.getImaginary();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      ComplexField complexField0 = complex1.getField();
      boolean boolean0 = complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(1273.626, 1273.626);
      Complex complex1 = complex0.ZERO.log();
      double double0 = complex0.abs();
      Complex complex2 = complex0.ZERO.multiply((-4229.7));
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex0.createComplex(1273.626, 2615.3306456234695);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ZERO.add(complex0);
      Complex complex7 = complex6.ONE.cos();
      Complex complex8 = complex7.ONE.tanh();
      Complex complex9 = complex5.exp();
      Complex complex10 = complex5.INF.createComplex(1273.626, (-4229.7));
      ComplexField complexField0 = complex5.getField();
      Complex complex11 = complex1.sinh();
      Complex complex12 = complex4.atan();
      String string0 = complex11.toString();
      Complex complex13 = Complex.INF;
      Complex complex14 = complex13.tanh();
      Complex complex15 = complex12.multiply(complex13);
      Complex complex16 = complex14.sqrt();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.tan();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex3.createComplex((-574.97712239628), 742.20089);
      Complex complex5 = complex2.add(complex1);
      boolean boolean0 = complex4.isInfinite();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex6.I.subtract(complex1);
      Complex complex8 = complex6.ZERO.sinh();
      Complex complex9 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex1.cos();
      try { 
        complex0.nthRoot((-1287));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,287
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex3 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-3160.907132118), (-3160.907132118));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex5.ONE.multiply((-3160.907132118));
      Complex complex7 = complex1.cos();
      Complex complex8 = complex6.NaN.tan();
      Complex complex9 = complex5.NaN.divide(complex3);
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex6.add(complex4);
      double double0 = complex0.getArgument();
      double double1 = complex0.abs();
      Complex complex12 = complex10.cosh();
      Complex complex13 = complex6.ONE.multiply(complex0);
      Complex complex14 = complex12.log();
      Complex complex15 = complex11.pow(complex9);
      Complex complex16 = complex10.multiply(complex5);
      int int0 = complex7.hashCode();
      Complex complex17 = Complex.INF;
      boolean boolean0 = complex2.equals(complex17);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(1467.386906, 0.0);
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.ZERO;
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.NaN.pow(complex1);
      Object object1 = new Object();
      boolean boolean0 = complex0.equals(object1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.multiply(complex0);
      boolean boolean1 = complex2.equals(complex1);
      Complex complex5 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-420.2317835), (-420.2317835));
      Complex complex1 = complex0.tan();
      double double0 = complex1.abs();
      Complex complex2 = complex0.multiply(complex1);
      Object object0 = complex2.ONE.readResolve();
      double double1 = complex0.getArgument();
      Complex complex3 = complex0.multiply(2170.518411947);
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex3.asin();
      double double2 = complex1.getImaginary();
      Complex complex7 = complex1.log();
      ComplexField complexField0 = complex5.getField();
      Complex complex8 = complex6.subtract(complex1);
      Complex complex9 = complex5.sqrt();
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex7.acos();
      Complex complex12 = complex3.cos();
      double double3 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(2761.1493, 2761.1493);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ZERO.sin();
      int int0 = complex3.hashCode();
      double double0 = complex2.ONE.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.ZERO.acos();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex1.sqrt1z();
      Object object0 = complex1.readResolve();
      Complex complex7 = complex6.cos();
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex2.INF.add(complex1);
      Complex complex5 = complex4.NaN.createComplex(2707.5692, 0.0);
      Complex complex6 = complex0.acos();
      String string0 = complex6.ZERO.toString();
      double double0 = complex0.ZERO.abs();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex0.exp();
      String string1 = complex8.toString();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-131.16230267218), 0.0);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.sinh();
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-1118.8), (-3082.456025));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex0.multiply(complex1);
      ComplexField complexField0 = complex1.getField();
      List<Complex> list0 = complex0.nthRoot(2559);
      Complex complex4 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.I.multiply(2271.26);
      Complex complex7 = complex0.subtract(complex4);
      boolean boolean0 = complex7.isNaN();
      Complex complex8 = complex7.I.sin();
      Complex complex9 = complex7.log();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex10.ZERO.acos();
      double double0 = complex9.getArgument();
      Object object0 = complex1.readResolve();
      Complex complex12 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex0.sin();
      String string0 = complex0.toString();
      double double0 = complex3.abs();
      double double1 = complex0.getArgument();
      Complex complex4 = complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex1.atan();
      boolean boolean0 = complex1.isNaN();
      String string0 = complex0.ZERO.toString();
      Complex complex4 = complex2.ZERO.add(complex3);
      List<Complex> list0 = complex3.ONE.nthRoot(1);
      double double0 = complex3.getArgument();
      Complex complex5 = complex3.add(complex2);
      double double1 = complex3.getReal();
      Object object0 = complex3.readResolve();
      Complex complex6 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.log();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex0.sqrt();
      ComplexField complexField0 = complex2.getField();
      boolean boolean0 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex2.I.cos();
      Complex complex6 = complex2.ONE.cosh();
      Complex complex7 = Complex.INF;
      int int0 = complex3.I.hashCode();
      Complex complex8 = complex3.subtract(complex7);
      Complex complex9 = complex0.I.negate();
      Complex complex10 = complex2.NaN.sqrt1z();
      double double0 = complex2.ZERO.getArgument();
      Complex complex11 = complex0.NaN.multiply(489.9205553363821);
      Complex complex12 = complex0.multiply(complex3);
      Complex complex13 = complex2.tanh();
      Complex complex14 = complex13.ZERO.asin();
      Complex complex15 = complex0.negate();
      Complex complex16 = complex8.pow(complex6);
      Complex complex17 = complex6.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.log();
      List<Complex> list0 = complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.multiply((-437.4323));
      Complex complex5 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      double double0 = complex0.ZERO.abs();
      Complex complex2 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(44.0, 44.0);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.atan();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex1.cos();
      try { 
        complex0.nthRoot((-116));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -116
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.7937005259840998, 0.7937005259840998);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      int int0 = complex0.hashCode();
      int int1 = 0;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.I.subtract(complex1);
      int int0 = complex0.INF.hashCode();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.asin();
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex1.ONE.divide(complex2);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.I.multiply(0.07692307692307693);
      Complex complex7 = complex5.INF.conjugate();
      boolean boolean0 = complex1.isInfinite();
      Complex complex8 = complex4.sinh();
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1237.9870603949);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(1629.83481, (-0.0013888888689039883));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex1.I.sqrt();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex6.ONE.cos();
      Complex complex8 = complex7.INF.multiply((-0.0013888888689039883));
      int int0 = complex8.ONE.hashCode();
      String string0 = complex8.ZERO.toString();
      Complex complex9 = complex4.ONE.sqrt1z();
      String string1 = complex7.toString();
      double double0 = complex1.abs();
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex5.conjugate();
      Complex complex12 = complex1.I.tanh();
      Complex complex13 = complex10.INF.subtract(complex6);
      Complex complex14 = complex13.divide(complex5);
      Complex complex15 = complex14.ONE.sin();
      Complex complex16 = complex10.acos();
      Complex complex17 = complex16.INF.multiply((-0.0013888888689039883));
      Complex complex18 = complex0.I.sin();
      Complex complex19 = complex0.tanh();
      Complex complex20 = complex16.INF.sin();
      Complex complex21 = complex20.ONE.divide(complex1);
      Complex complex22 = complex21.I.divide(complex0);
      Object object0 = complex16.readResolve();
      boolean boolean0 = complex19.equals(object0);
      Complex complex23 = complex19.tanh();
      List<Complex> list0 = complex23.ONE.nthRoot(1474);
      Complex complex24 = complex4.tanh();
      Complex complex25 = complex19.multiply(complex5);
      Complex complex26 = complex24.negate();
      Complex complex27 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-2230.857));
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.NaN.sinh();
      Complex complex4 = complex2.ONE.pow(complex0);
      Complex complex5 = complex0.ZERO.createComplex((-2230.857), 2.0);
      Complex complex6 = complex5.INF.atan();
      String string0 = complex0.toString();
      Complex complex7 = complex0.pow(complex5);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex7.I.createComplex((-2230.857), (-1.0));
      Complex complex10 = complex5.cosh();
      double double0 = complex1.abs();
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex2.createComplex(2670.2323183587, 2670.2323183587);
      Complex complex13 = complex12.ZERO.conjugate();
      double double1 = complex12.ONE.getArgument();
      Complex complex14 = complex4.atan();
      Complex complex15 = complex14.tan();
      Complex complex16 = complex11.negate();
      double double2 = complex5.getImaginary();
      Complex complex17 = complex2.sqrt1z();
      Complex complex18 = complex0.I.createComplex(3128.6521912637636, (-2230.857));
      Complex complex19 = complex12.divide(complex4);
      Complex complex20 = complex19.ZERO.acos();
      Complex complex21 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.log();
      List<Complex> list0 = complex0.nthRoot(30);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex3.ZERO.atan();
      Object object0 = complex3.ONE.readResolve();
      Complex complex5 = complex2.cosh();
      double double0 = complex2.INF.getArgument();
      Complex complex6 = complex5.I.subtract(complex4);
      Complex complex7 = complex2.NaN.sinh();
      Complex complex8 = complex3.multiply(728.10925071);
      Complex complex9 = complex5.I.multiply(728.10925071);
      Complex complex10 = complex0.tan();
      Complex complex11 = complex10.ZERO.conjugate();
      Complex complex12 = complex10.I.acos();
      String string0 = complex2.toString();
      double double1 = complex7.getImaginary();
      Complex complex13 = complex5.ZERO.sqrt();
      Complex complex14 = complex2.divide(complex7);
      double double2 = complex14.ONE.getArgument();
      Complex complex15 = complex2.INF.pow(complex11);
      Complex complex16 = complex11.negate();
      Complex complex17 = complex15.ONE.sinh();
      Complex complex18 = complex5.log();
      Complex complex19 = complex6.negate();
      String string1 = complex19.toString();
      Complex complex20 = complex7.cosh();
      Complex complex21 = complex12.negate();
      boolean boolean0 = complex13.isInfinite();
      Complex complex22 = complex15.log();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(253.468176182, 0.0);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.NaN.multiply(0.0);
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.NaN.subtract(complex2);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex4.ONE.subtract(complex6);
      Complex complex8 = complex4.sin();
      Complex complex9 = complex2.negate();
      boolean boolean0 = complex3.isInfinite();
      Complex complex10 = complex8.acos();
      Complex complex11 = complex2.atan();
      Complex complex12 = complex9.sqrt1z();
      Complex complex13 = complex0.exp();
      Complex complex14 = complex13.I.atan();
      Complex complex15 = complex8.conjugate();
      Complex complex16 = complex14.atan();
      Complex complex17 = complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-409.2023246682), 0.0);
      double double0 = complex0.abs();
      Complex complex1 = Complex.NaN;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex2 = complex0.divide(complex1);
      Object object0 = complex2.I.readResolve();
      String string0 = complex2.toString();
      boolean boolean0 = complex2.equals(complex0);
      ComplexField complexField1 = complex1.getField();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.tanh();
      double double0 = complex0.ZERO.abs();
      int int0 = complex0.hashCode();
      ComplexField complexField0 = complex0.INF.getField();
      String string0 = complex0.toString();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex3.INF.multiply(Double.POSITIVE_INFINITY);
      ComplexField complexField1 = complex0.ONE.getField();
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex4.ONE.negate();
      Complex complex7 = complex2.pow(complex3);
      Complex complex8 = complex7.NaN.negate();
      Complex complex9 = complex8.ZERO.conjugate();
      Complex complex10 = complex2.tan();
      Complex complex11 = complex6.I.add(complex1);
      double double1 = complex2.getArgument();
      Complex complex12 = complex6.tan();
      ComplexField complexField2 = complex6.getField();
      String string1 = complex11.toString();
      Complex complex13 = complex5.sin();
      Complex complex14 = complex1.subtract(complex6);
      boolean boolean0 = complex3.equals(complex11);
      Complex complex15 = complex3.cosh();
      double double2 = complex4.getReal();
      double double3 = complex11.getReal();
      Complex complex16 = complex9.log();
      Complex complex17 = complex11.sinh();
      Complex complex18 = complex1.pow(complex5);
      Complex complex19 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.11764700710773468, (-1340.261));
      Complex complex1 = complex0.NaN.cosh();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.I.subtract(complex1);
      Complex complex4 = complex2.INF.asin();
      Object object0 = complex0.ONE.readResolve();
      String string0 = complex0.ONE.toString();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex5 = complex0.multiply((double) 1);
      double double0 = complex2.getReal();
      double double1 = complex2.abs();
      Complex complex6 = complex2.conjugate();
  }
}
