/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:17:52 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = complex0.cosh();
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex0.multiply((-967.02));
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex1.add(complex0);
      Complex complex9 = complex8.exp();
      Complex complex10 = complex9.multiply(1.0);
      boolean boolean1 = complex1.isNaN();
      Complex complex11 = complex8.I.exp();
      Complex complex12 = complex0.conjugate();
      Complex complex13 = complex10.createComplex(0.0, (-967.02));
      Complex complex14 = complex12.pow(complex7);
      Complex complex15 = complex14.exp();
      Complex complex16 = complex0.negate();
      List<Complex> list0 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(81);
      Complex complex1 = complex0.log();
      String string0 = complex1.ZERO.toString();
      List<Complex> list1 = complex1.I.nthRoot(7);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.multiply((double) 7);
      double double0 = complex5.I.abs();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = complex2.ONE.acos();
      int int0 = 6723;
      Complex complex5 = complex3.INF.log();
      List<Complex> list0 = complex2.I.nthRoot(6723);
      String string0 = complex1.ZERO.toString();
      Complex complex6 = complex0.ZERO.sqrt();
      Complex complex7 = complex6.INF.cos();
      Object object0 = complex7.ZERO.readResolve();
      String string1 = complex6.I.toString();
      Complex complex8 = complex2.ZERO.negate();
      Complex complex9 = complex8.INF.add(complex3);
      int int1 = complex0.hashCode();
      Complex complex10 = complex3.sinh();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex2.pow(complex11);
      Complex complex13 = complex6.cos();
      Complex complex14 = complex6.ZERO.sin();
      int int2 = complex13.ONE.hashCode();
      Complex complex15 = complex13.cosh();
      double double0 = complex10.abs();
      double double1 = complex0.I.abs();
      double double2 = 0.0;
      Complex complex16 = complex4.INF.sin();
      Complex complex17 = complex11.multiply(double2);
      Complex complex18 = complex17.NaN.atan();
      ComplexField complexField0 = complex5.getField();
      List<Complex> list1 = complex1.nthRoot(int0);
      Complex complex19 = complex11.exp();
      Complex complex20 = complex19.ZERO.negate();
      boolean boolean0 = complex19.equals(object0);
      Complex complex21 = complex17.asin();
      Complex complex22 = complex11.multiply(complex4);
      boolean boolean1 = complex7.isNaN();
      Complex complex23 = complex2.divide(complex13);
      Complex complex24 = complex7.sin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1.0);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.INF.conjugate();
      double double0 = complex2.NaN.abs();
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      String string0 = complex0.INF.toString();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex1.ONE.divide(complex0);
      Complex complex4 = complex1.ONE.cos();
      try { 
        complex1.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.ONE.nthRoot(1);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(772.0, 772.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex3.ONE.cosh();
      Complex complex6 = complex3.I.createComplex(772.0, 772.0);
      Complex complex7 = complex6.I.sqrt();
      Complex complex8 = complex2.I.atan();
      ComplexField complexField0 = complex8.INF.getField();
      Complex complex9 = Complex.INF;
      boolean boolean0 = complex2.equals(complex9);
      Complex complex10 = complex2.asin();
      boolean boolean1 = complex10.equals(complex3);
      Complex complex11 = complex3.INF.asin();
      try { 
        complex5.nthRoot((-878));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -878
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-2695.056895), (-2695.056895));
      String string0 = complex0.toString();
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.ZERO.createComplex((-2695.056895), 647.394597042);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex3.NaN.pow(complex2);
      Complex complex5 = complex3.ONE.negate();
      Complex complex6 = complex0.sqrt1z();
      double double0 = complex3.INF.abs();
      Complex complex7 = complex6.add(complex2);
      Complex complex8 = complex7.sin();
      double double1 = complex8.INF.getArgument();
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex9.I.sqrt1z();
      Complex complex11 = complex6.sqrt1z();
      Complex complex12 = complex11.NaN.sin();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex11.pow(complex13);
      double double2 = complex0.abs();
      double double3 = complex9.getReal();
      boolean boolean0 = complex0.isNaN();
      Complex complex15 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.log();
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = complex0.I.createComplex(991.86232698872, 991.86232698872);
      Complex complex3 = complex1.ZERO.pow(complex0);
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex4.NaN.tanh();
      String string0 = complex5.ONE.toString();
      Complex complex6 = complex1.I.pow(complex2);
      Complex complex7 = complex1.INF.negate();
      Complex complex8 = complex7.ZERO.cosh();
      double double1 = complex8.NaN.getArgument();
      Complex complex9 = complex7.ZERO.createComplex(Double.NaN, Double.NaN);
      String string1 = complex7.NaN.toString();
      int int0 = complex0.ONE.hashCode();
      Complex complex10 = complex0.cos();
      Complex complex11 = complex1.sin();
      Complex complex12 = complex10.cosh();
      Complex complex13 = complex2.ONE.multiply(complex5);
      Complex complex14 = complex12.I.negate();
      List<Complex> list0 = complex2.nthRoot(1501);
      Complex complex15 = complex0.sin();
      Complex complex16 = complex15.divide(complex0);
      double double2 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1113.4854869235733), (-32.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.ONE.createComplex(0.0, (-1113.4854869235733));
      Complex complex4 = complex3.ONE.divide(complex0);
      Complex complex5 = complex3.ONE.sin();
      Complex complex6 = complex0.cos();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(1453.4718, 1453.4718);
      Complex complex1 = complex0.ONE.sqrt1z();
      double double0 = complex1.I.abs();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex0.sqrt();
      double double1 = complex1.ONE.abs();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.divide(complex3);
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex6.NaN.cosh();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex8 = complex3.pow(complex0);
      Complex complex9 = complex0.cos();
      Complex complex10 = complex2.cos();
      Complex complex11 = complex10.INF.sqrt();
      Complex complex12 = complex10.INF.multiply(2.404307984052299E-9);
      String string0 = complex6.I.toString();
      Complex complex13 = complex10.cosh();
      double double2 = complex1.getReal();
      Complex complex14 = complex3.conjugate();
      Complex complex15 = complex0.divide(complex10);
      Complex complex16 = complex2.cosh();
      Complex complex17 = complex11.cos();
      Complex complex18 = complex10.cosh();
      Complex complex19 = complex18.add(complex10);
      Complex complex20 = complex3.negate();
      ComplexField complexField0 = complex12.getField();
      Complex complex21 = complex16.conjugate();
      Complex complex22 = complex7.pow(complex21);
      Complex complex23 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = complex0.ZERO.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex1.ZERO.subtract(complex5);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex0.INF.log();
      Complex complex9 = complex2.log();
      int int0 = complex9.NaN.hashCode();
      Complex complex10 = complex4.multiply(complex9);
      Complex complex11 = Complex.I;
      Complex complex12 = complex10.I.add(complex11);
      Complex complex13 = complex1.I.exp();
      double double0 = complex7.getArgument();
      Complex complex14 = complex6.atan();
      Complex complex15 = complex6.NaN.cos();
      Complex complex16 = complex14.INF.pow(complex9);
      Complex complex17 = complex14.tan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.createComplex(944.4328824766, 944.4328824766);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = new Complex(944.4328824766, 944.4328824766);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex2.INF.cos();
      Complex complex6 = complex2.NaN.multiply(complex2);
      Complex complex7 = complex2.INF.asin();
      Complex complex8 = complex0.ZERO.pow(complex4);
      Complex complex9 = complex0.multiply(944.4328824766);
      boolean boolean0 = complex3.isNaN();
      Complex complex10 = complex1.add(complex2);
      ComplexField complexField0 = complex10.I.getField();
      Complex complex11 = complex10.ZERO.negate();
      double double0 = complex3.abs();
      Complex complex12 = complex1.sinh();
      Complex complex13 = complex0.tan();
      Complex complex14 = complex4.conjugate();
      Complex complex15 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-1.0006726489093924), (-1.0006726489093924));
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.atan();
      double double0 = complex0.abs();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.createComplex(0.0, 0.0);
      int int0 = complex1.hashCode();
      Complex complex6 = complex0.createComplex((-725.5138355518), (-1012.29194506196));
      Complex complex7 = complex6.ZERO.divide(complex1);
      ComplexField complexField0 = complex6.getField();
      Complex complex8 = complex1.I.cosh();
      Complex complex9 = complex3.pow(complex6);
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField1 = complex7.getField();
      Complex complex10 = complex0.acos();
      Complex complex11 = complex7.sinh();
      double double1 = complex9.getImaginary();
      Complex complex12 = complex5.log();
      Complex complex13 = complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.ONE.atan();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.abs();
      double double1 = complex0.getReal();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.multiply(337.5172616852);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex1.ZERO.multiply(complex0);
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex2.ZERO.subtract(complex0);
      Complex complex7 = complex2.cos();
      Complex complex8 = complex7.NaN.exp();
      Complex complex9 = complex8.ONE.log();
      Object object0 = complex8.ZERO.readResolve();
      Complex complex10 = complex8.ZERO.tanh();
      Complex complex11 = complex2.INF.sqrt1z();
      Complex complex12 = complex10.NaN.multiply(complex1);
      double double0 = complex3.getImaginary();
      Complex complex13 = complex7.acos();
      ComplexField complexField0 = complex3.getField();
      boolean boolean1 = complex5.isNaN();
      Complex complex14 = complex7.negate();
      Complex complex15 = complex7.sqrt();
      Object object1 = complex7.ONE.readResolve();
      Complex complex16 = complex7.INF.tanh();
      Complex complex17 = new Complex((-3140.121), -0.0);
      Complex complex18 = complex7.subtract(complex17);
      Complex complex19 = complex18.ZERO.divide(complex10);
      boolean boolean2 = complex6.isInfinite();
      double double1 = complex3.getReal();
      Complex complex20 = complex16.tan();
      Complex complex21 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.multiply(Double.POSITIVE_INFINITY);
      String string0 = complex1.ONE.toString();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.ONE.multiply(2210.9337);
      Object object0 = complex1.readResolve();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex7.ZERO.createComplex((-392.251066517806), 570.0);
      Complex complex9 = complex2.multiply(complex1);
      Complex complex10 = complex0.exp();
      double double0 = complex1.getArgument();
      Complex complex11 = complex0.log();
      Complex complex12 = complex11.sqrt();
      Complex complex13 = complex11.sin();
      Complex complex14 = complex13.INF.negate();
      Complex complex15 = complex14.I.add(complex7);
      boolean boolean0 = complex2.equals(complex5);
      Complex complex16 = complex6.divide(complex5);
      Complex complex17 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex1.INF.subtract(complex2);
      Complex complex5 = complex2.I.negate();
      Complex complex6 = complex5.ONE.atan();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex1.INF.cos();
      Complex complex9 = complex7.multiply(complex1);
      int int0 = complex5.NaN.hashCode();
      Complex complex10 = complex9.ZERO.conjugate();
      ComplexField complexField0 = complex1.getField();
      Complex complex11 = complex5.sin();
      Complex complex12 = complex6.INF.divide(complex0);
      Complex complex13 = complex12.INF.exp();
      Complex complex14 = complex7.ZERO.conjugate();
      Complex complex15 = complex2.I.cosh();
      Complex complex16 = complex1.divide(complex9);
      Complex complex17 = complex16.ZERO.divide(complex11);
      Complex complex18 = complex2.subtract(complex6);
      Complex complex19 = complex18.sinh();
      String string0 = complex18.I.toString();
      Object object0 = complex9.readResolve();
      Complex complex20 = complex11.sin();
      double double0 = complex20.NaN.abs();
      Complex complex21 = complex20.I.conjugate();
      double double1 = complex20.getArgument();
      Complex complex22 = complex1.divide(complex3);
      Complex complex23 = complex3.sinh();
      Complex complex24 = complex15.add(complex2);
      Complex complex25 = complex3.sin();
      double double2 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.createComplex(1.0, 1853.7010879);
      Complex complex2 = complex0.I.tan();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.NaN.pow(complex2);
      Complex complex5 = complex3.I.asin();
      int int0 = complex4.ZERO.hashCode();
      Complex complex6 = complex2.pow(complex3);
      Complex complex7 = complex0.subtract(complex1);
      Complex complex8 = complex7.I.negate();
      Complex complex9 = complex3.multiply(complex2);
      Complex complex10 = complex2.asin();
      Complex complex11 = complex10.cos();
      Complex complex12 = complex10.exp();
      Complex complex13 = complex6.ZERO.exp();
      Complex complex14 = complex11.sqrt();
      boolean boolean0 = complex2.isNaN();
      Complex complex15 = complex0.sqrt();
      boolean boolean1 = complex2.isNaN();
      Complex complex16 = complex15.NaN.tan();
      Complex complex17 = complex1.cos();
      Complex complex18 = complex3.divide(complex6);
      Complex complex19 = complex15.conjugate();
      Complex complex20 = complex8.multiply(complex11);
      Complex complex21 = complex2.negate();
      Complex complex22 = complex1.conjugate();
      Complex complex23 = complex8.divide(complex0);
      double double0 = complex1.getImaginary();
      Complex complex24 = complex4.sin();
      double double1 = complex9.abs();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex2.NaN.multiply(0.0);
      int int0 = complex0.INF.hashCode();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.ONE.sqrt();
      Object object0 = complex6.ZERO.readResolve();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex7.tanh();
      Complex complex10 = complex2.atan();
      Complex complex11 = complex9.ZERO.atan();
      Complex complex12 = complex11.I.sqrt();
      Complex complex13 = Complex.I;
      Complex complex14 = complex1.INF.pow(complex13);
      Complex complex15 = complex7.NaN.sin();
      Complex complex16 = complex10.ZERO.sqrt();
      double double0 = complex9.abs();
      Complex complex17 = complex16.tan();
      boolean boolean1 = complex4.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.nthRoot(1);
      String string0 = complex0.toString();
      List<Complex> list1 = complex0.nthRoot(1);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.ONE.multiply(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.ZERO.conjugate();
      Complex complex4 = complex2.tan();
      ComplexField complexField0 = complex4.ONE.getField();
      boolean boolean1 = complex0.isNaN();
      Complex complex5 = complex2.cosh();
      ComplexField complexField1 = complex5.ONE.getField();
      Complex complex6 = complex2.multiply((double) 1);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.ZERO.multiply(complex6);
      Complex complex9 = complex7.ZERO.negate();
      Complex complex10 = complex7.subtract(complex5);
      Complex complex11 = complex0.sin();
      Complex complex12 = complex11.exp();
      Complex complex13 = complex1.subtract(complex0);
      Object object0 = complex11.readResolve();
      Complex complex14 = new Complex(0.0, 1.1430250008909141E-8);
      Complex complex15 = complex14.INF.atan();
      boolean boolean2 = complex11.equals(complex14);
      Complex complex16 = complex5.exp();
      List<Complex> list2 = complex1.INF.nthRoot(974);
      int int0 = complex0.hashCode();
      Complex complex17 = complex16.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex0.getReal();
      Object object1 = complex0.readResolve();
      boolean boolean1 = complex0.equals(object1);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.sqrt();
      try { 
        complex1.nthRoot((-219));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -219
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ONE.abs();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = new Complex(1486.6593250292026, 1486.6593250292026);
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex1.I.subtract(complex0);
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.ZERO.cosh();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex2.tanh();
      double double1 = complex8.abs();
      Complex complex9 = complex3.sqrt1z();
      Complex complex10 = complex3.createComplex(1.0, 0.0);
      Complex complex11 = complex2.tan();
      double double2 = complex3.abs();
      Complex complex12 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.ONE.multiply(complex1);
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.I.multiply(complex4);
      Complex complex6 = complex4.cosh();
      double double0 = complex5.INF.getArgument();
      Complex complex7 = complex0.acos();
      double double1 = complex4.getImaginary();
      List<Complex> list0 = complex1.nthRoot(16);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ONE.createComplex(2.0, 3636.77159929);
      int int0 = complex0.hashCode();
      Complex complex5 = complex1.acos();
      double double0 = complex2.getArgument();
      Object object0 = complex1.INF.readResolve();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex6.I.divide(complex3);
      Complex complex8 = complex2.negate();
      Complex complex9 = complex8.ZERO.sqrt();
      Complex complex10 = complex9.ONE.pow(complex4);
      Complex complex11 = complex8.ONE.sinh();
      Complex complex12 = complex11.ONE.subtract(complex0);
      Complex complex13 = complex4.exp();
      Complex complex14 = complex4.cos();
      double double1 = complex2.getArgument();
      Complex complex15 = complex12.acos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.ONE.multiply((-1369.3081));
      Complex complex4 = complex0.sqrt1z();
      double double1 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.INF.multiply(0.0);
      ComplexField complexField0 = complex4.getField();
      Complex complex6 = complex2.multiply(complex3);
      Complex complex7 = complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.multiply((-3052.8836903667457));
      Complex complex2 = complex1.I.multiply((-3052.8836903667457));
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.createComplex(0.0, 0.0);
      Complex complex5 = complex0.cos();
      boolean boolean0 = complex3.isInfinite();
      Complex complex6 = complex4.sqrt();
      Object object0 = complex6.readResolve();
      String string0 = complex5.toString();
      ComplexField complexField1 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-3918.12235426476), (-3918.12235426476));
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex0.createComplex(1.8014398509481984E16, (-3918.12235426476));
      Complex complex5 = complex0.sin();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex4.divide(complex0);
      boolean boolean0 = complex1.isNaN();
      ComplexField complexField0 = complex4.getField();
      Complex complex9 = complex7.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.createComplex(0.0, 292.5988588);
      Complex complex5 = complex2.log();
      Complex complex6 = complex3.I.exp();
      double double1 = complex6.ZERO.getArgument();
      Complex complex7 = complex4.negate();
      List<Complex> list0 = complex7.nthRoot(343);
      Complex complex8 = complex2.acos();
      Complex complex9 = complex7.sin();
      double double2 = complex9.NaN.abs();
      Complex complex10 = complex3.cosh();
      int int0 = complex10.hashCode();
      Complex complex11 = complex5.sqrt();
      Complex complex12 = complex4.subtract(complex3);
      Complex complex13 = complex4.tanh();
      Complex complex14 = complex1.sinh();
      Complex complex15 = complex9.sin();
      Complex complex16 = complex6.add(complex3);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-2390.89517447), (-2390.89517447));
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex0.ONE.acos();
      Complex complex5 = complex3.ONE.sin();
      int int0 = complex1.hashCode();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.subtract(complex1);
      Object object0 = complex7.ONE.readResolve();
      Complex complex8 = complex6.acos();
      Complex complex9 = complex8.negate();
      boolean boolean0 = complex3.isNaN();
      Complex complex10 = complex9.sin();
      Complex complex11 = complex10.INF.sinh();
      List<Complex> list0 = complex2.nthRoot(95);
      Complex complex12 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      double double0 = complex2.ZERO.abs();
      ComplexField complexField0 = complex1.getField();
      List<Complex> list0 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex2.INF.sqrt1z();
      Complex complex5 = complex4.I.subtract(complex2);
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex6 = complex3.NaN.exp();
      Complex complex7 = new Complex(0.0, Double.NaN);
      Complex complex8 = complex6.NaN.multiply(complex7);
      Complex complex9 = complex8.NaN.tan();
      Complex complex10 = complex0.INF.multiply(0.0);
      double double0 = complex1.NaN.abs();
      Complex complex11 = complex2.I.conjugate();
      ComplexField complexField1 = complex0.INF.getField();
      int int0 = complex0.NaN.hashCode();
      Complex complex12 = complex0.exp();
      Complex complex13 = complex12.negate();
      Complex complex14 = complex12.conjugate();
      Complex complex15 = complex1.exp();
      Object object0 = complex15.I.readResolve();
      Complex complex16 = complex15.acos();
      ComplexField complexField2 = complex15.getField();
      Complex complex17 = complex0.atan();
      Complex complex18 = complex9.tanh();
      Complex complex19 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.asin();
      double double0 = complex0.I.abs();
      Complex complex3 = complex0.log();
      try { 
        complex0.I.nthRoot((-460));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -460
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      boolean boolean0 = complex1.isInfinite();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex0.NaN.cosh();
      int int0 = complex3.hashCode();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex4.I.exp();
      int int1 = complex4.hashCode();
      Complex complex6 = complex0.createComplex(9.0, 9.0);
      Complex complex7 = complex6.exp();
      Complex complex8 = complex1.divide(complex6);
      Complex complex9 = complex0.subtract(complex7);
      Complex complex10 = complex9.I.sqrt();
      try { 
        complex6.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Object object0 = complex0.I.readResolve();
      Complex complex2 = complex0.ONE.multiply(complex1);
      int int0 = complex0.hashCode();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ZERO.abs();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.INF.asin();
      ComplexField complexField1 = complex1.ONE.getField();
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex3.NaN.divide(complex2);
      Complex complex5 = complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.INF.divide(complex2);
      Complex complex5 = complex0.ZERO.negate();
      Complex complex6 = complex1.INF.tan();
      Complex complex7 = complex2.NaN.exp();
      Complex complex8 = complex0.ONE.sqrt();
      double double0 = complex0.getReal();
      double double1 = complex2.NaN.getArgument();
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex9.INF.sin();
      Complex complex11 = complex9.ZERO.multiply(0.0);
      Complex complex12 = complex0.asin();
      Complex complex13 = complex12.INF.log();
      Complex complex14 = complex7.tanh();
      Complex complex15 = complex12.negate();
      Complex complex16 = complex15.createComplex((-1730.0), (-2989.13386670929));
      List<Complex> list0 = complex14.NaN.nthRoot(2916);
      Complex complex17 = complex11.cos();
      Complex complex18 = complex14.sinh();
      Complex complex19 = complex0.sqrt();
      ComplexField complexField0 = complex5.getField();
      Complex complex20 = complex0.sqrt1z();
      int int0 = complex20.hashCode();
      Complex complex21 = complex16.multiply((-1121.687683));
      Complex complex22 = complex3.subtract(complex4);
      Complex complex23 = complex17.createComplex((-3858.625710634917), (-2989.13386670929));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Object object0 = complex0.INF.readResolve();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.ONE.subtract(complex0);
      Complex complex5 = complex3.ZERO.divide(complex1);
      int int0 = complex0.I.hashCode();
      double double0 = complex4.ZERO.getArgument();
      Complex complex6 = complex0.multiply(0.0);
      Object object1 = complex1.I.readResolve();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex7 = complex1.pow(complex2);
      Complex complex8 = complex7.ZERO.exp();
      double double1 = complex0.abs();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex4.sqrt();
      Complex complex11 = complex4.sqrt1z();
      Complex complex12 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.INF.subtract(complex2);
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex2.ZERO.multiply(complex0);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex3.add(complex2);
      Complex complex8 = complex1.sqrt();
      int int0 = complex2.INF.hashCode();
      boolean boolean0 = complex5.isInfinite();
      Complex complex9 = complex7.sin();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex1.multiply(complex7);
      Complex complex12 = complex11.add(complex8);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex3.INF.tanh();
      Complex complex6 = complex3.pow(complex0);
      Complex complex7 = complex0.exp();
      Complex complex8 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.I.asin();
      double double0 = complex0.abs();
      Complex complex4 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.divide(complex1);
      ComplexField complexField0 = complex2.getField();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.ZERO.conjugate();
      Complex complex4 = complex0.createComplex((-2216.1417), 0.0);
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex1.multiply(4399.847676646673);
      boolean boolean0 = complex7.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.createComplex(0.0, 2046.34);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 9.313225746154785E-10);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.I.pow(complex3);
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex4.ONE.tan();
      Complex complex7 = complex4.INF.atan();
      Complex complex8 = complex7.multiply(complex3);
      double double0 = complex3.getReal();
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      double double0 = complex1.abs();
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex0.asin();
      boolean boolean0 = complex0.isNaN();
      double double1 = complex2.INF.getArgument();
      boolean boolean1 = complex0.isInfinite();
      Object object0 = complex1.readResolve();
      boolean boolean2 = complex0.equals(object0);
      Complex complex6 = complex4.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex0.log();
      List<Complex> list0 = complex4.I.nthRoot(1851);
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1400.0), (-1400.0));
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.INF.tan();
      Complex complex5 = complex3.I.add(complex2);
      String string0 = complex5.NaN.toString();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.multiply(0.0);
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex1.negate();
      ComplexField complexField0 = complex5.ZERO.getField();
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex2.pow(complex3);
      Complex complex8 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.tanh();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.negate();
      String string0 = complex3.toString();
      Complex complex6 = complex4.multiply((-791.047365));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.multiply(1641.710287453562);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getArgument();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.I.pow(complex1);
      Complex complex4 = complex3.ZERO.pow(complex0);
      ComplexField complexField0 = complex0.ONE.getField();
      double double0 = complex0.getArgument();
      double double1 = complex0.abs();
      Complex complex5 = complex4.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = complex6.ZERO.sinh();
      Complex complex8 = complex2.asin();
      ComplexField complexField1 = complex6.getField();
      Complex complex9 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.I.createComplex(0.0, (-0.25));
      Complex complex4 = complex2.createComplex(0.0, 0.0);
      Complex complex5 = complex2.NaN.conjugate();
      ComplexField complexField0 = complex5.ZERO.getField();
      Complex complex6 = complex1.add(complex0);
      Complex complex7 = complex0.atan();
      try { 
        complex3.nthRoot((-3216));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,216
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex1.multiply(1469.635289789411);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(520.9736156714, 0.07842259109020233);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.cosh();
      double double0 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tanh();
      String string0 = complex1.INF.toString();
      int int0 = complex0.ONE.hashCode();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(1306.044452889, 1306.044452889);
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.INF.divide(complex0);
      Complex complex4 = complex0.log();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      String string0 = complex1.ZERO.toString();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.atan();
      boolean boolean0 = complex2.isNaN();
      Complex complex3 = complex2.pow(complex0);
      double double0 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-749.234), 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex1.NaN.divide(complex2);
      Complex complex4 = complex1.ZERO.sin();
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(2557.31295937, 2557.31295937);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.atan();
      Object object0 = complex1.I.readResolve();
      Complex complex5 = complex0.tan();
      Object object1 = complex5.readResolve();
      Complex complex6 = complex5.pow(complex4);
      List<Complex> list0 = complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.INF.divide(complex0);
      Complex complex4 = complex0.log();
      Complex complex5 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ONE.multiply(0.0);
      Complex complex3 = complex2.ONE.conjugate();
      double double0 = complex1.NaN.abs();
      Complex complex4 = complex1.NaN.createComplex(0.0, (-4649.9566661595645));
      Complex complex5 = complex4.ONE.pow(complex3);
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex4.ZERO.acos();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex2.add(complex1);
      double double1 = complex2.getImaginary();
      String string0 = complex6.toString();
      List<Complex> list0 = complex8.nthRoot(1646);
      Complex complex9 = complex2.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.multiply(complex1);
      boolean boolean0 = complex0.isNaN();
      int int0 = complex0.hashCode();
      int int1 = complex0.hashCode();
      Object object0 = new Object();
      boolean boolean1 = complex0.equals(object0);
      Complex complex3 = complex0.ONE.createComplex(0.04168701738764507, (-3015.4758807797343));
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.ZERO.multiply(complex0);
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex7 = complex6.NaN.add(complex5);
      Complex complex8 = complex0.INF.pow(complex6);
      Complex complex9 = complex5.NaN.tanh();
      Complex complex10 = complex9.I.cosh();
      boolean boolean2 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.nthRoot(1);
      String string0 = complex0.toString();
      List<Complex> list1 = complex0.nthRoot(1);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.ONE.multiply(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.ZERO.conjugate();
      Complex complex4 = complex2.tan();
      ComplexField complexField0 = complex4.ONE.getField();
      boolean boolean1 = complex0.isNaN();
      Complex complex5 = complex2.cosh();
      ComplexField complexField1 = complex5.ONE.getField();
      Complex complex6 = complex2.multiply((double) 1);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.ZERO.multiply(complex6);
      Complex complex9 = complex7.ZERO.negate();
      Complex complex10 = complex7.subtract(complex5);
      Complex complex11 = complex0.sin();
      Complex complex12 = complex11.exp();
      Complex complex13 = complex1.subtract(complex0);
      Complex complex14 = complex2.NaN.cos();
      Object object0 = complex11.readResolve();
      Complex complex15 = new Complex(0.0, 1.1430250008909141E-8);
      Complex complex16 = complex15.ONE.sqrt1z();
      Complex complex17 = complex15.INF.atan();
      boolean boolean2 = complex11.equals(complex15);
      Complex complex18 = complex5.exp();
      List<Complex> list2 = complex1.INF.nthRoot(974);
      int int0 = complex0.hashCode();
      Complex complex19 = complex18.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.NaN.atan();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.INF.multiply((-259.176756162207));
      boolean boolean1 = complex3.isNaN();
      double double0 = complex1.abs();
      Complex complex5 = complex3.log();
      Complex complex6 = complex4.NaN.asin();
      Complex complex7 = complex0.add(complex4);
      String string0 = complex7.NaN.toString();
      Complex complex8 = complex4.exp();
      Complex complex9 = complex8.multiply(1.1752011936438014);
      Complex complex10 = complex9.NaN.sinh();
      Object object0 = complex8.I.readResolve();
      double double1 = complex8.getReal();
      Object object1 = complex8.readResolve();
      Complex complex11 = complex6.sqrt();
      Complex complex12 = complex11.I.cos();
      Complex complex13 = complex12.I.atan();
      Complex complex14 = complex8.createComplex(Double.NaN, 1.1752011936438014);
      Object object2 = complex14.ONE.readResolve();
      Complex complex15 = complex1.sin();
      String string1 = complex15.ONE.toString();
      Complex complex16 = complex6.divide(complex4);
      Complex complex17 = complex7.exp();
      Complex complex18 = complex10.multiply(complex8);
      Complex complex19 = complex5.cosh();
      Complex complex20 = complex0.exp();
      List<Complex> list0 = complex20.ZERO.nthRoot(1);
      boolean boolean2 = complex0.isNaN();
      Complex complex21 = complex17.atan();
      Complex complex22 = complex17.sqrt();
      Complex complex23 = complex17.log();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.atan();
      double double0 = complex1.ONE.abs();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex6.I.multiply((-3885.329));
      String string0 = complex6.toString();
      Complex complex8 = complex2.negate();
      int int0 = complex8.I.hashCode();
      Complex complex9 = complex0.tan();
      double double1 = complex2.getImaginary();
      List<Complex> list0 = complex3.nthRoot(1);
      double double2 = complex0.getArgument();
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex10.pow(complex2);
      Complex complex12 = complex0.divide(complex10);
      Complex complex13 = complex5.exp();
      boolean boolean0 = complex13.isNaN();
      Complex complex14 = complex1.asin();
      double double3 = complex14.getArgument();
      Complex complex15 = complex2.add(complex5);
      double double4 = complex15.getReal();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.acos();
      int int0 = complex0.I.hashCode();
      double double0 = complex0.getReal();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.INF.tanh();
      double double1 = complex3.I.abs();
      double double2 = complex3.getReal();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = complex6.ZERO.add(complex5);
      Complex complex8 = complex5.NaN.subtract(complex7);
      Complex complex9 = complex2.sin();
      Complex complex10 = complex1.multiply(0.0);
      Complex complex11 = complex7.NaN.divide(complex9);
      ComplexField complexField0 = complex9.getField();
      int int1 = complex7.hashCode();
      double double3 = complex8.getReal();
      Complex complex12 = complex3.divide(complex2);
      Complex complex13 = complex6.tanh();
      Complex complex14 = complex1.subtract(complex11);
      Complex complex15 = complex7.cosh();
      Complex complex16 = complex14.add(complex7);
  }
}
