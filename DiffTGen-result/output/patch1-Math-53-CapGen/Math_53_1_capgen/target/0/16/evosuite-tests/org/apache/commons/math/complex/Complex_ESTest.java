/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:17:37 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.tanh();
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex4.ZERO.multiply(Double.NaN);
      Complex complex7 = complex3.I.tan();
      Complex complex8 = complex1.tan();
      String string0 = complex8.toString();
      Complex complex9 = complex0.cos();
      ComplexField complexField0 = complex9.ZERO.getField();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex2.pow(complex10);
      Complex complex12 = complex11.log();
      Complex complex13 = complex8.I.conjugate();
      Complex complex14 = complex12.multiply(Double.NaN);
      Complex complex15 = complex8.negate();
      double double1 = complex8.abs();
      Complex complex16 = complex14.NaN.sqrt();
      ComplexField complexField1 = complex2.getField();
      Complex complex17 = complex8.asin();
      Complex complex18 = complex11.ONE.sqrt1z();
      double double2 = complex8.getReal();
      boolean boolean0 = complex14.isInfinite();
      Complex complex19 = complex15.sinh();
      Complex complex20 = complex18.negate();
      Complex complex21 = complex2.atan();
      ComplexField complexField2 = complex21.getField();
      Complex complex22 = complex5.add(complex4);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.sqrt();
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex2.ONE.asin();
      Complex complex6 = complex5.INF.exp();
      double double1 = complex6.ONE.abs();
      ComplexField complexField0 = complex6.I.getField();
      List<Complex> list0 = complex0.NaN.nthRoot(108);
      double double2 = complex2.ONE.abs();
      int int1 = complex0.INF.hashCode();
      Complex complex7 = complex2.ZERO.divide(complex0);
      Complex complex8 = complex3.createComplex(0.7853981633974483, 0.0);
      Complex complex9 = complex8.NaN.subtract(complex4);
      Complex complex10 = complex2.createComplex(0.7853981633974483, 2.0);
      Complex complex11 = complex10.INF.cosh();
      Complex complex12 = complex10.ZERO.tanh();
      double double3 = complex4.getImaginary();
      List<Complex> list1 = complex7.nthRoot(108);
      String string0 = complex8.I.toString();
      Complex complex13 = complex4.createComplex(1654.446334183, (-717.6));
      boolean boolean0 = complex3.equals(complex7);
      Complex complex14 = complex0.sqrt();
      Complex complex15 = complex0.sqrt();
      Complex complex16 = complex3.cosh();
      try { 
        complex7.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(802.94939, 802.94939);
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex0.ONE.acos();
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.NaN.conjugate();
      Complex complex4 = complex2.NaN.log();
      Complex complex5 = complex1.ONE.subtract(complex2);
      Complex complex6 = complex3.INF.subtract(complex0);
      Complex complex7 = complex3.I.multiply(0.0);
      try { 
        complex5.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-306.9392656));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.negate();
      double double0 = complex0.getArgument();
      Complex complex3 = complex1.I.tan();
      double double1 = complex1.abs();
      double double2 = complex0.abs();
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex0.INF.add(complex3);
      double double0 = complex0.NaN.abs();
      Complex complex6 = complex4.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.I.tanh();
      Complex complex8 = complex0.conjugate();
      try { 
        complex3.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.multiply(0.0);
      Complex complex3 = complex1.NaN.exp();
      String string1 = complex0.toString();
      Complex complex4 = complex0.ZERO.sqrt1z();
      double double0 = complex0.abs();
      Complex complex5 = complex0.createComplex((-1731.989771356), (-1692.69282));
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex6.INF.log();
      Complex complex9 = complex5.sqrt1z();
      Complex complex10 = complex5.createComplex(0.0, 0.0);
      Complex complex11 = complex6.multiply(0.0);
      Complex complex12 = complex6.cosh();
      Complex complex13 = complex7.conjugate();
      Complex complex14 = new Complex(0.0, 0.0);
      Complex complex15 = complex13.ONE.add(complex14);
      Complex complex16 = complex5.pow(complex4);
      boolean boolean0 = complex16.isNaN();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2408.7593385526047);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.tan();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex1.NaN.cos();
      Complex complex6 = complex1.I.createComplex(0.0, 1024.0);
      Complex complex7 = new Complex(1024.0, (-2513.6061));
      Complex complex8 = complex1.subtract(complex7);
      Object object0 = complex7.ONE.readResolve();
      Complex complex9 = complex8.add(complex4);
      Object object1 = complex9.I.readResolve();
      Complex complex10 = complex6.add(complex0);
      Complex complex11 = complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply(2225.923126675);
      Complex complex2 = complex1.INF.divide(complex0);
      Object object0 = complex2.ONE.readResolve();
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.NaN.conjugate();
      Complex complex4 = complex3.I.divide(complex2);
      Object object1 = complex0.ONE.readResolve();
      Complex complex5 = complex1.ZERO.multiply(2225.923126675);
      Complex complex6 = complex5.I.exp();
      String string0 = complex2.toString();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex7.ZERO.subtract(complex0);
      Complex complex9 = complex8.I.add(complex0);
      Complex complex10 = complex0.multiply(1.0);
      Complex complex11 = complex1.divide(complex0);
      Object object2 = complex7.readResolve();
      boolean boolean0 = complex10.isNaN();
      Complex complex12 = complex1.sinh();
      Complex complex13 = complex7.sqrt1z();
      Complex complex14 = complex2.tan();
      Complex complex15 = complex14.INF.asin();
      Complex complex16 = complex6.log();
      boolean boolean1 = complex5.isNaN();
      Complex complex17 = complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.createComplex(2372.0, 2372.0);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.INF.sqrt1z();
      double double0 = complex3.abs();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex5.I.conjugate();
      Complex complex8 = complex5.I.multiply(2372.0);
      String string0 = complex8.I.toString();
      boolean boolean0 = complex4.equals("");
      Complex complex9 = complex4.atan();
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex4.INF.acos();
      Complex complex12 = complex11.I.cosh();
      Complex complex13 = complex3.I.tanh();
      Object object0 = complex10.readResolve();
      double double1 = complex3.getReal();
      boolean boolean1 = complex10.isInfinite();
      String string1 = complex9.ZERO.toString();
      Complex complex14 = complex0.add(complex9);
      Object object1 = complex9.readResolve();
      Object object2 = complex9.readResolve();
      Complex complex15 = complex2.exp();
      Complex complex16 = complex3.conjugate();
      Complex complex17 = complex5.ZERO.asin();
      Complex complex18 = complex0.pow(complex10);
      Complex complex19 = complex8.log();
      Complex complex20 = complex1.cos();
      Complex complex21 = complex1.multiply(complex16);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cos();
      double double0 = complex1.ZERO.abs();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex2.I.divide(complex1);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex4.NaN.cos();
      double double1 = complex5.getArgument();
      Complex complex7 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex1.I.sqrt1z();
      Complex complex5 = complex0.sqrt();
      double double0 = complex1.getArgument();
      ComplexField complexField0 = complex0.getField();
      double double1 = complex3.abs();
      Complex complex6 = complex1.sinh();
      boolean boolean0 = complex3.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.NaN.createComplex(Double.POSITIVE_INFINITY, (-4668.259));
      Complex complex5 = complex3.INF.sin();
      Complex complex6 = complex3.negate();
      double double0 = complex6.ONE.getArgument();
      Complex complex7 = complex1.log();
      Complex complex8 = complex7.NaN.atan();
      Complex complex9 = complex7.INF.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex10 = complex7.I.cosh();
      int int0 = complex10.ONE.hashCode();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex0.divide(complex11);
      Object object0 = complex0.readResolve();
      double double1 = complex1.getArgument();
      Complex complex13 = complex3.exp();
      Complex complex14 = complex2.multiply(complex0);
      Complex complex15 = complex14.log();
      Complex complex16 = complex11.subtract(complex10);
      Complex complex17 = complex4.sinh();
      Complex complex18 = complex8.tan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(1205.569, 1205.569);
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.I.add(complex2);
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.ZERO.subtract(complex5);
      Complex complex7 = complex0.ZERO.sqrt1z();
      boolean boolean0 = complex1.isNaN();
      Complex complex8 = complex3.negate();
      Complex complex9 = complex6.multiply(323.448);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.I.multiply((-3641.245363248));
      Complex complex5 = complex3.NaN.negate();
      double double1 = complex3.getReal();
      int int0 = complex5.hashCode();
      double double2 = complex1.abs();
      Complex complex6 = complex2.multiply(0.0);
      Complex complex7 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.NaN.createComplex(Double.POSITIVE_INFINITY, (-4668.259));
      Complex complex5 = complex3.INF.sin();
      Complex complex6 = complex3.negate();
      double double0 = complex6.ONE.getArgument();
      Complex complex7 = complex1.log();
      Complex complex8 = complex7.NaN.atan();
      Complex complex9 = complex7.I.cosh();
      int int0 = complex9.ONE.hashCode();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex0.divide(complex10);
      Object object0 = complex0.readResolve();
      double double1 = complex1.getArgument();
      Complex complex12 = complex2.multiply(complex0);
      Complex complex13 = complex12.log();
      Complex complex14 = complex10.subtract(complex9);
      Complex complex15 = complex4.sinh();
      Complex complex16 = complex8.tan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.negate();
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex3.exp();
      Complex complex8 = complex7.INF.asin();
      Complex complex9 = complex2.sin();
      double double1 = complex9.NaN.abs();
      Complex complex10 = complex9.subtract(complex3);
      double double2 = complex5.getReal();
      Complex complex11 = complex0.conjugate();
      double double3 = complex1.getReal();
      Object object0 = complex10.readResolve();
      Complex complex12 = complex8.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 1414.1788928167;
      Complex complex0 = new Complex(1414.1788928167, 1183.071215646);
      Complex complex1 = complex0.ZERO.tan();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(1928.3653572, 1928.3653572);
      Complex complex1 = complex0.INF.exp();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex0.cosh();
      double double0 = complex3.getArgument();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.ONE.cos();
      double double1 = complex4.INF.getArgument();
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = complex6.INF.subtract(complex3);
      Complex complex8 = complex6.sin();
      Complex complex9 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex0.I.conjugate();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.ZERO.sin();
      Complex complex9 = complex1.tan();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.INF.multiply(0.0);
      Complex complex3 = complex1.ONE.createComplex(0.0, 0.0);
      double double0 = complex3.I.abs();
      double double1 = complex3.NaN.getArgument();
      Object object0 = complex0.readResolve();
      List<Complex> list0 = complex0.nthRoot(650);
      Complex complex4 = complex2.acos();
      Complex complex5 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.multiply(2035.288146448416);
      try { 
        complex0.ZERO.nthRoot((-4349));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,349
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-57.4538768), (-57.4538768));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex2.tan();
      double double0 = complex0.NaN.abs();
      Complex complex4 = complex1.ONE.sin();
      Complex complex5 = complex1.add(complex0);
      ComplexField complexField0 = complex2.getField();
      Complex complex6 = complex0.I.pow(complex3);
      ComplexField complexField1 = complex5.INF.getField();
      Complex complex7 = complex5.ZERO.multiply(complex1);
      Complex complex8 = complex0.pow(complex1);
      Complex complex9 = complex0.multiply((-57.4538768));
      int int0 = complex9.ZERO.hashCode();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex6.pow(complex10);
      boolean boolean0 = complex2.isInfinite();
      Complex complex12 = complex1.conjugate();
      Complex complex13 = complex3.asin();
      Complex complex14 = complex9.ONE.pow(complex11);
      Complex complex15 = complex6.atan();
      Complex complex16 = complex1.divide(complex11);
      Complex complex17 = complex9.divide(complex12);
      Complex complex18 = complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.ZERO.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex2.INF.cos();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex7.ONE.sinh();
      boolean boolean1 = complex5.isNaN();
      Complex complex9 = complex1.INF.sqrt1z();
      String string0 = complex5.toString();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex2.NaN.exp();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.ONE.sqrt1z();
      Complex complex5 = complex0.cosh();
      boolean boolean0 = complex3.isInfinite();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex0.subtract(complex1);
      Complex complex9 = complex3.NaN.tan();
      Complex complex10 = complex3.atan();
      Complex complex11 = complex0.ZERO.sqrt();
      Complex complex12 = complex3.tanh();
      Complex complex13 = complex12.I.sqrt();
      ComplexField complexField1 = complex5.getField();
      Complex complex14 = complex5.sqrt();
      Complex complex15 = complex1.cos();
      Complex complex16 = complex15.cos();
      double double0 = complex15.getReal();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex1.I.log();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex2.I.sqrt1z();
      double double0 = complex2.getImaginary();
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex8.INF.sinh();
      Complex complex10 = complex9.INF.cos();
      Complex complex11 = complex10.INF.cosh();
      double double1 = complex8.getImaginary();
      Complex complex12 = complex0.negate();
      double double2 = complex3.getReal();
      Complex complex13 = complex12.sqrt1z();
      Complex complex14 = complex13.sqrt1z();
      boolean boolean0 = complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(864.61513976289, 864.61513976289);
      Complex complex1 = Complex.INF;
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.NaN.add(complex0);
      int int1 = complex5.ZERO.hashCode();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.ONE.sinh();
      Complex complex8 = complex1.ZERO.sqrt();
      Complex complex9 = complex6.NaN.createComplex(864.61513976289, Double.NaN);
      Complex complex10 = complex6.INF.sqrt1z();
      Complex complex11 = new Complex(864.61513976289, Double.NaN);
      Complex complex12 = complex11.NaN.cosh();
      Complex complex13 = complex0.divide(complex11);
      Object object0 = complex4.readResolve();
      Complex complex14 = complex12.sqrt();
      Complex complex15 = complex4.asin();
      Complex complex16 = complex0.NaN.acos();
      ComplexField complexField0 = complex12.getField();
      double double0 = complex6.getArgument();
      Complex complex17 = complex0.sqrt();
      Complex complex18 = complex17.multiply(3.682875950122342E-4);
      Object object1 = complex18.readResolve();
      boolean boolean0 = complex9.equals(object1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply(1169.0606065);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.INF.acos();
      Complex complex4 = complex3.I.sqrt();
      double double0 = complex0.I.getArgument();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex2.I.sin();
      Object object0 = complex0.INF.readResolve();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex3.I.add(complex4);
      Complex complex9 = complex3.ONE.atan();
      String string0 = complex4.toString();
      Complex complex10 = complex1.subtract(complex2);
      Complex complex11 = complex7.multiply(0.0);
      Complex complex12 = complex2.subtract(complex4);
      Complex complex13 = complex12.INF.cosh();
      Complex complex14 = complex12.cos();
      Complex complex15 = complex14.INF.createComplex(1.5707963267948966, 0.0);
      Complex complex16 = complex8.exp();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex0.INF.sin();
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex3.ZERO.asin();
      double double0 = complex0.getArgument();
      Complex complex6 = complex1.tanh();
      double double1 = complex6.getReal();
      Complex complex7 = complex0.INF.acos();
      Complex complex8 = complex7.NaN.cos();
      Complex complex9 = complex8.NaN.acos();
      Complex complex10 = complex2.multiply(2873.97800837);
      Complex complex11 = complex10.atan();
      Complex complex12 = complex2.negate();
      int int0 = complex0.hashCode();
      Complex complex13 = complex0.negate();
      Object object0 = complex7.readResolve();
      boolean boolean0 = complex11.equals(object0);
      Complex complex14 = complex6.multiply(complex0);
      Complex complex15 = complex10.sin();
      Complex complex16 = complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex((-5497.61495854), (-382.5738235091));
      String string0 = complex1.ZERO.toString();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex0.multiply(complex3);
      double double0 = complex6.INF.abs();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.NaN.cosh();
      Object object0 = complex0.NaN.readResolve();
      Object object1 = complex0.readResolve();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.add(complex4);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(1964.188, 173.275);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.createComplex(173.275, 0.0);
      Complex complex3 = complex0.sqrt();
      double double0 = complex0.abs();
      Complex complex4 = complex3.ONE.pow(complex0);
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex4.I.negate();
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex8.sqrt1z();
      boolean boolean0 = complex8.isNaN();
      Complex complex10 = complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.multiply(2843.6005828);
      Complex complex3 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.16666666666745392, 0.16666666666745392);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      int int0 = complex0.hashCode();
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex3.I.cosh();
      double double0 = complex0.abs();
      Complex complex7 = complex0.add(complex3);
      Complex complex8 = complex7.ONE.multiply(0.2357022603966292);
      Complex complex9 = complex5.multiply(complex3);
      ComplexField complexField0 = complex9.NaN.getField();
      Complex complex10 = complex3.asin();
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex5.sqrt1z();
      boolean boolean0 = complex2.isNaN();
      double double1 = complex8.abs();
      Complex complex13 = complex10.exp();
      double double2 = complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      double double0 = complex0.getImaginary();
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.INF.subtract(complex3);
      ComplexField complexField0 = complex0.getField();
      double double1 = complex2.getArgument();
      Complex complex5 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.I.sqrt();
      double double0 = complex1.ONE.getArgument();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex3.INF.divide(complex0);
      double double1 = complex0.getArgument();
      Complex complex6 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1861.7930931633864), 0.0);
      Complex complex2 = complex1.ONE.sin();
      List<Complex> list0 = complex2.INF.nthRoot(1);
      Complex complex3 = complex2.ZERO.createComplex(821.2666836, 0.0);
      Complex complex4 = complex1.I.tan();
      Complex complex5 = complex2.I.sin();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex4.negate();
      boolean boolean0 = complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ZERO.multiply((-1304.60050578373));
      Complex complex3 = complex2.NaN.createComplex((-1304.60050578373), 2923.760286);
      Complex complex4 = complex3.I.exp();
      String string0 = complex4.ONE.toString();
      Complex complex5 = complex1.ZERO.negate();
      List<Complex> list0 = complex1.nthRoot(364);
      Complex complex6 = complex2.acos();
      Complex complex7 = complex2.I.pow(complex6);
      Complex complex8 = complex7.INF.negate();
      ComplexField complexField0 = complex8.ONE.getField();
      Complex complex9 = complex6.createComplex((-2679.4782), 2376.0);
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex2.cosh();
      Complex complex12 = complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      double double0 = complex1.INF.abs();
      Complex complex2 = complex0.multiply(Double.NaN);
      boolean boolean0 = complex2.isInfinite();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = complex0.sin();
      boolean boolean1 = complex3.isInfinite();
      int int0 = complex1.hashCode();
      double double0 = complex0.getImaginary();
      int int1 = complex1.hashCode();
      Complex complex4 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-132.727840467864), (-132.727840467864));
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.ZERO.cosh();
      int int0 = complex0.hashCode();
      Complex complex3 = complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sinh();
      double double0 = complex1.ONE.getArgument();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.I.tanh();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex2.negate();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex3.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-2502.3030004), (-2502.3030004));
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex0.createComplex((-1105.70982282516), 1.3245471311735498E-8);
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = complex5.negate();
      Complex complex8 = complex1.I.tanh();
      Complex complex9 = complex8.I.cos();
      String string0 = complex0.NaN.toString();
      Complex complex10 = complex7.INF.cos();
      Complex complex11 = complex10.ZERO.multiply(complex2);
      Complex complex12 = complex7.NaN.exp();
      Complex complex13 = complex2.I.multiply((-206.353));
      List<Complex> list0 = complex5.nthRoot(1);
      Complex complex14 = complex7.tan();
      Complex complex15 = complex7.exp();
      Complex complex16 = complex14.multiply(0.08371849358081818);
      Complex complex17 = complex1.multiply(complex7);
      Complex complex18 = complex11.atan();
      Complex complex19 = complex17.acos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.ZERO.exp();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex5.NaN.cosh();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex0.sqrt1z();
      double double0 = complex7.INF.getArgument();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex8.ONE.sqrt1z();
      Complex complex10 = complex7.asin();
      double double1 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex1.acos();
      int int0 = complex1.ZERO.hashCode();
      double double0 = complex1.abs();
      Complex complex4 = complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      String string0 = complex1.INF.toString();
      Complex complex2 = complex0.multiply(complex1);
      double double0 = complex2.INF.abs();
      String string1 = complex1.toString();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.createComplex(3468.041316297035, 3468.041316297035);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ZERO.sinh();
      double double0 = complex2.getArgument();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex1.I.asin();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex6.ONE.add(complex7);
      Complex complex9 = complex6.multiply(complex2);
      Complex complex10 = complex2.asin();
      Complex complex11 = complex6.add(complex3);
      Complex complex12 = complex10.log();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      double double0 = complex1.INF.getArgument();
      List<Complex> list0 = complex0.nthRoot(123);
      Complex complex2 = complex1.cos();
      List<Complex> list1 = complex2.ZERO.nthRoot(123);
      Complex complex3 = new Complex(123, (-253.94453170062));
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = complex3.atan();
      Complex complex6 = complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex0.cosh();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex3.INF.createComplex((-1397.5287475567), (-1397.5287475567));
      Object object0 = complex3.readResolve();
      Object object1 = new Object();
      boolean boolean0 = complex3.equals(object1);
      Complex complex5 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1006.487310957, 2326.46919749815);
      Complex complex2 = complex0.INF.subtract(complex1);
      boolean boolean0 = complex0.equals("");
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.createComplex((-728.2971979660651), (-728.2971979660651));
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex0.INF.multiply(complex2);
      Complex complex5 = complex1.NaN.sinh();
      Complex complex6 = complex5.I.cos();
      List<Complex> list0 = complex0.nthRoot(200);
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(833.59167368631, 833.59167368631);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.INF.sqrt1z();
      try { 
        complex0.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex3.I.negate();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.I.tanh();
      List<Complex> list0 = complex0.I.nthRoot(2);
      double double0 = complex0.getReal();
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.INF.multiply(complex0);
      Complex complex4 = complex3.multiply((-928.36195250817));
      int int0 = complex4.INF.hashCode();
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = complex3.ZERO.exp();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.createComplex(0.003, 0.0);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.multiply(Double.POSITIVE_INFINITY);
      double double0 = complex0.abs();
      Complex complex3 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.negate();
      boolean boolean0 = complex0.equals(complex1);
      Object object0 = complex1.readResolve();
      Complex complex3 = complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.NaN.cos();
      double double1 = complex2.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex0.NaN.divide(complex3);
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex3.I.log();
      Complex complex6 = complex5.ZERO.divide(complex4);
      int int0 = complex0.INF.hashCode();
      Complex complex7 = complex3.NaN.divide(complex0);
      Complex complex8 = complex0.atan();
      Complex complex9 = complex5.tan();
      Complex complex10 = complex9.INF.sinh();
      Complex complex11 = complex10.NaN.conjugate();
      Complex complex12 = complex11.createComplex(0.0, Double.NaN);
      Complex complex13 = complex3.tan();
      Complex complex14 = complex3.sin();
      double double2 = complex1.abs();
      Complex complex15 = complex1.ONE.acos();
      try { 
        complex2.nthRoot((-2519));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,519
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.I.nthRoot(218);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex1.ONE.divide(complex0);
      Complex complex4 = complex3.NaN.multiply(0.875);
      Complex complex5 = complex0.acos();
      int int0 = complex0.NaN.hashCode();
      double double0 = complex1.getArgument();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex3.NaN.cos();
      Complex complex9 = complex6.NaN.cosh();
      Complex complex10 = complex9.INF.acos();
      double double1 = complex9.abs();
      Complex complex11 = complex6.NaN.sinh();
      boolean boolean0 = complex1.equals(complex0);
      String string0 = complex0.toString();
      List<Complex> list1 = complex3.INF.nthRoot(218);
      Complex complex12 = complex1.sinh();
      int int1 = complex5.hashCode();
      boolean boolean1 = complex6.isInfinite();
      Complex complex13 = complex0.acos();
      Complex complex14 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex0.INF.subtract(complex1);
      Complex complex8 = complex0.subtract(complex1);
      Complex complex9 = complex8.asin();
      Complex complex10 = complex9.INF.pow(complex1);
      Complex complex11 = complex8.I.atan();
      Complex complex12 = complex11.ONE.pow(complex8);
      String string0 = complex2.ZERO.toString();
      Complex complex13 = complex10.sin();
      try { 
        complex1.NaN.nthRoot((-8));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -8
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.negate();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex1.ONE.negate();
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex2.ONE.tan();
      Complex complex6 = complex1.NaN.cosh();
      int int0 = complex6.INF.hashCode();
      Complex complex7 = complex5.ZERO.add(complex6);
      double double0 = complex7.ZERO.getArgument();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex2.INF.tanh();
      Complex complex10 = complex8.sin();
      Complex complex11 = complex10.ZERO.exp();
      String string0 = complex5.ZERO.toString();
      Complex complex12 = complex10.ZERO.conjugate();
      Complex complex13 = complex1.divide(complex0);
      Complex complex14 = complex12.ZERO.log();
      double double1 = complex10.NaN.getArgument();
      ComplexField complexField1 = complex8.getField();
      Complex complex15 = complex0.asin();
      Object object0 = complex10.readResolve();
      Complex complex16 = complex5.acos();
      double double2 = complex2.abs();
      Complex complex17 = complex2.cos();
      int int1 = complex5.hashCode();
      String string1 = complex15.toString();
      Complex complex18 = complex8.cos();
      ComplexField complexField2 = complex1.ONE.getField();
      ComplexField complexField3 = complex8.getField();
      Complex complex19 = complex1.pow(complex4);
      Complex complex20 = complex15.negate();
      Complex complex21 = complex7.sqrt1z();
      boolean boolean0 = complex7.isNaN();
      Complex complex22 = complex7.negate();
      List<Complex> list0 = complex14.nthRoot(1522);
      Complex complex23 = Complex.INF;
      Complex complex24 = complex13.pow(complex23);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.NaN.multiply(1.2675934823758863E-8);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex4.ZERO.conjugate();
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex0.ONE.multiply(2924.6744573);
      Complex complex9 = complex8.INF.asin();
      Complex complex10 = complex0.ZERO.asin();
      Complex complex11 = complex9.INF.tan();
      Complex complex12 = complex9.ONE.createComplex(279.077004, (-1.0));
      Complex complex13 = complex3.cosh();
      Complex complex14 = complex13.ZERO.exp();
      Complex complex15 = complex4.tan();
      Complex complex16 = Complex.ZERO;
      Complex complex17 = complex15.subtract(complex16);
      Complex complex18 = complex8.createComplex(2924.6744573, 1.2675934823758863E-8);
      boolean boolean0 = complex9.equals(complex5);
      Complex complex19 = complex8.log();
      Complex complex20 = complex4.sin();
      Complex complex21 = complex13.conjugate();
      Complex complex22 = complex21.ZERO.cosh();
      Complex complex23 = complex22.NaN.sin();
      Complex complex24 = complex5.tan();
      Complex complex25 = complex4.createComplex(1.2675934823758863E-8, (-1.0));
      Complex complex26 = complex0.sqrt1z();
      double double0 = complex26.ONE.abs();
      Complex complex27 = complex9.tan();
      boolean boolean1 = complex0.isInfinite();
      Complex complex28 = complex21.tanh();
      double double1 = complex17.abs();
      Complex complex29 = complex2.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.log();
      String string0 = complex0.I.toString();
      Complex complex3 = complex0.ONE.exp();
      Complex complex4 = complex0.ZERO.sqrt1z();
      Complex complex5 = complex4.NaN.sqrt1z();
      Object object0 = complex4.NaN.readResolve();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = complex4.ZERO.subtract(complex6);
      Complex complex9 = complex0.ZERO.cos();
      Complex complex10 = complex2.asin();
      Complex complex11 = complex5.conjugate();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex11.ZERO.asin();
      Complex complex14 = complex13.ZERO.cos();
      Complex complex15 = complex13.INF.subtract(complex11);
      Complex complex16 = complex15.NaN.multiply(complex11);
      Complex complex17 = complex12.ZERO.divide(complex5);
      Complex complex18 = complex0.ONE.add(complex12);
      Complex complex19 = complex10.divide(complex12);
      Object object1 = complex11.readResolve();
      Complex complex20 = complex3.sinh();
      Complex complex21 = complex0.log();
      Complex complex22 = complex21.ZERO.sin();
      Complex complex23 = Complex.INF;
      Complex complex24 = complex21.I.divide(complex23);
      Complex complex25 = complex20.acos();
      Complex complex26 = complex21.sinh();
      double double0 = complex3.getArgument();
      Complex complex27 = complex0.log();
      double double1 = complex10.getArgument();
      boolean boolean0 = complex3.isInfinite();
      Complex complex28 = complex10.sqrt();
      double double2 = complex26.getReal();
      Complex complex29 = complex26.cosh();
      Complex complex30 = complex24.multiply(3101.4218656);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(36.63282003227569);
      Complex complex2 = complex1.negate();
      double double0 = complex2.ZERO.abs();
      double double1 = complex0.abs();
      Complex complex3 = complex1.NaN.pow(complex0);
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.NaN.acos();
      double double2 = complex3.abs();
      Complex complex7 = complex0.cos();
      double double3 = complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.createComplex((-3332.599377085473), 0.0);
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.I.cos();
      double double0 = complex3.INF.getArgument();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex3.conjugate();
      Object object0 = complex5.ZERO.readResolve();
      Complex complex6 = complex1.ONE.sqrt();
      Complex complex7 = complex6.createComplex(0.0, 0.0);
      Complex complex8 = complex7.ONE.sin();
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex9.ZERO.acos();
      Complex complex11 = complex5.INF.pow(complex3);
      Complex complex12 = complex11.ONE.cosh();
      String string0 = complex1.INF.toString();
      Complex complex13 = complex3.add(complex1);
      int int0 = complex5.hashCode();
      boolean boolean0 = complex3.isInfinite();
      int int1 = complex5.hashCode();
      Complex complex14 = complex2.atan();
      Complex complex15 = complex14.atan();
      Complex complex16 = complex12.tanh();
      double double1 = complex6.getReal();
      Complex complex17 = complex1.divide(complex15);
      Complex complex18 = complex17.sinh();
      try { 
        complex6.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.NaN.multiply((-3822.06457401));
      List<Complex> list0 = complex2.I.nthRoot(1);
      Complex complex5 = complex4.ZERO.sinh();
      Complex complex6 = complex1.INF.asin();
      Complex complex7 = complex6.ZERO.cosh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex3.ZERO.cosh();
      int int0 = complex1.hashCode();
      Complex complex9 = complex4.NaN.divide(complex1);
      Complex complex10 = complex6.pow(complex3);
      Complex complex11 = complex0.pow(complex6);
      Complex complex12 = complex7.divide(complex2);
      Complex complex13 = complex4.pow(complex2);
      Object object0 = complex13.I.readResolve();
      double double0 = complex13.ONE.getArgument();
      Complex complex14 = complex11.acos();
      double double1 = complex0.getArgument();
      Complex complex15 = complex14.cos();
      List<Complex> list1 = complex6.nthRoot(1);
      Complex complex16 = complex13.subtract(complex14);
      Complex complex17 = complex7.subtract(complex3);
      Complex complex18 = complex15.cos();
      Object object1 = complex13.readResolve();
      Complex complex19 = complex4.cosh();
      Complex complex20 = complex19.NaN.sinh();
      Object object2 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex4.cos();
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex7 = complex3.ONE.atan();
      Complex complex8 = complex7.I.cos();
      Complex complex9 = complex8.INF.cos();
      Complex complex10 = complex3.NaN.sin();
      try { 
        complex10.NaN.nthRoot((-678));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -678
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
