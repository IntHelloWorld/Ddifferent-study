/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:21:04 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      Complex complex1 = complex0.sqrt();
      List<Complex> list0 = complex1.INF.nthRoot(576);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.NaN.pow(complex2);
      int int0 = complex3.hashCode();
      Complex complex4 = new Complex(3859.122847147305, 3859.122847147305);
      Complex complex5 = complex0.I.pow(complex4);
      Object object0 = complex4.NaN.readResolve();
      String string1 = complex5.ONE.toString();
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex6.INF.multiply(complex0);
      Complex complex8 = complex7.ZERO.multiply(complex2);
      double double0 = complex0.abs();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex9.log();
      Complex complex11 = complex9.ONE.acos();
      Complex complex12 = complex10.cos();
      Complex complex13 = complex12.I.negate();
      Complex complex14 = complex12.ONE.multiply(3859.122847147305);
      Complex complex15 = complex10.negate();
      Complex complex16 = complex0.log();
      Complex complex17 = complex16.sinh();
      Complex complex18 = complex16.sin();
      List<Complex> list1 = complex11.nthRoot(576);
      Complex complex19 = complex16.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex2.NaN.createComplex(0.0, Double.POSITIVE_INFINITY);
      String string0 = complex0.toString();
      Complex complex4 = complex1.atan();
      double double0 = complex4.ZERO.getArgument();
      Object object1 = complex1.readResolve();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex5.ONE.multiply(Double.POSITIVE_INFINITY);
      double double1 = complex1.getArgument();
      Complex complex7 = complex4.conjugate();
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex7.NaN.tanh();
      Complex complex9 = complex2.divide(complex7);
      double double2 = complex7.getReal();
      Complex complex10 = complex0.tan();
      Complex complex11 = complex7.acos();
      Complex complex12 = complex11.I.conjugate();
      Complex complex13 = complex0.tanh();
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex1.pow(complex14);
      Complex complex16 = complex14.ONE.multiply(0.0);
      List<Complex> list0 = complex7.nthRoot(1012);
      Complex complex17 = complex7.multiply(complex14);
      String string1 = complex17.toString();
      String string2 = complex9.toString();
      double double3 = complex0.getArgument();
      Complex complex18 = complex14.atan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.conjugate();
      double double0 = complex0.getArgument();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.ONE.tan();
      int int0 = complex3.ZERO.hashCode();
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex5.NaN.atan();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex4.ZERO.exp();
      Complex complex9 = complex3.NaN.negate();
      Complex complex10 = complex9.ONE.tan();
      Complex complex11 = complex2.tan();
      Complex complex12 = complex11.INF.atan();
      Complex complex13 = complex2.cosh();
      Complex complex14 = complex12.I.sqrt1z();
      int int1 = complex14.ONE.hashCode();
      Complex complex15 = complex12.ZERO.createComplex(0.19999999999923582, (-7800.082941649));
      Complex complex16 = complex15.INF.negate();
      boolean boolean0 = complex4.isInfinite();
      Complex complex17 = complex3.NaN.tanh();
      Complex complex18 = complex17.ONE.sqrt();
      Complex complex19 = complex1.pow(complex11);
      Complex complex20 = complex4.cos();
      Complex complex21 = complex20.sqrt();
      int int2 = complex11.hashCode();
      Complex complex22 = complex21.cos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.conjugate();
      String string0 = complex2.NaN.toString();
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex0.I.add(complex1);
      Object object0 = complex1.ONE.readResolve();
      double double1 = complex0.abs();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.cosh();
      double double2 = complex1.ZERO.getArgument();
      double double3 = complex5.INF.getArgument();
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex5.asin();
      boolean boolean0 = complex1.equals("(NaN, NaN)");
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex8.divide(complex5);
      Complex complex10 = complex9.ZERO.sin();
      Complex complex11 = complex9.INF.exp();
      double double4 = complex4.INF.abs();
      Complex complex12 = complex1.atan();
      Complex complex13 = complex12.I.tan();
      Complex complex14 = Complex.I;
      Complex complex15 = complex4.divide(complex14);
      Complex complex16 = complex2.NaN.exp();
      try { 
        complex12.nthRoot((-1871));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,871
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.ZERO.cos();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex2.ONE.exp();
      int int0 = complex3.INF.hashCode();
      Complex complex5 = complex2.sin();
      double double0 = complex5.NaN.getArgument();
      Complex complex6 = complex5.ZERO.sinh();
      int int1 = complex3.hashCode();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex0.divide(complex3);
      Complex complex9 = Complex.I;
      Complex complex10 = complex8.ONE.pow(complex9);
      Complex complex11 = complex7.createComplex(Double.NaN, 0.0);
      Complex complex12 = complex11.ONE.exp();
      Complex complex13 = complex11.asin();
      String string0 = complex0.toString();
      Complex complex14 = complex7.conjugate();
      Complex complex15 = complex14.ZERO.tanh();
      Complex complex16 = complex14.NaN.cos();
      Complex complex17 = Complex.INF;
      Complex complex18 = complex15.ONE.add(complex17);
      Complex complex19 = complex0.cosh();
      Complex complex20 = complex3.tanh();
      boolean boolean0 = complex5.isNaN();
      Complex complex21 = complex20.pow(complex7);
      Complex complex22 = complex21.NaN.tanh();
      Object object1 = complex20.readResolve();
      Complex complex23 = complex10.pow(complex19);
      Complex complex24 = complex8.subtract(complex18);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(2481.0, 2481.0);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex2.ONE.cos();
      Object object0 = complex3.INF.readResolve();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex2.pow(complex0);
      Complex complex7 = complex5.ONE.cosh();
      String string0 = complex5.INF.toString();
      Complex complex8 = complex4.NaN.acos();
      Complex complex9 = complex5.sqrt1z();
      Complex complex10 = complex5.INF.tan();
      Complex complex11 = complex2.atan();
      Complex complex12 = complex11.I.subtract(complex4);
      Complex complex13 = complex5.log();
      Complex complex14 = complex13.ONE.multiply(complex0);
      Complex complex15 = complex0.sinh();
      Complex complex16 = Complex.ONE;
      Complex complex17 = complex13.I.pow(complex16);
      double double0 = complex13.getArgument();
      Complex complex18 = complex4.pow(complex14);
      boolean boolean0 = complex5.isNaN();
      boolean boolean1 = complex14.isNaN();
      Complex complex19 = complex8.sin();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.NaN.sin();
      Complex complex4 = complex1.ZERO.atan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex6.ONE.multiply(complex2);
      Object object0 = complex3.readResolve();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex0.sinh();
      Object object1 = complex8.readResolve();
      boolean boolean1 = complex5.equals(object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 110.4562316664);
      Complex complex1 = complex0.NaN.createComplex(110.4562316664, 0.0);
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex3.ZERO.log();
      Complex complex6 = complex5.sqrt();
      double double0 = complex1.I.getArgument();
      Complex complex7 = complex0.ZERO.sqrt1z();
      int int0 = complex7.I.hashCode();
      Object object0 = complex1.ZERO.readResolve();
      String string0 = complex0.toString();
      double double1 = complex0.ZERO.abs();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex8.ONE.divide(complex0);
      List<Complex> list0 = complex8.ZERO.nthRoot(149);
      Complex complex10 = complex9.ZERO.sinh();
      Complex complex11 = complex10.I.sinh();
      int int1 = complex5.I.hashCode();
      Complex complex12 = complex8.exp();
      Complex complex13 = complex12.sqrt();
      double double2 = complex13.ONE.abs();
      boolean boolean0 = complex3.isInfinite();
      Complex complex14 = complex10.sin();
      double double3 = complex5.getArgument();
      Complex complex15 = complex13.multiply((-227.0));
      int int2 = complex9.hashCode();
      Complex complex16 = complex0.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.multiply(complex0);
      try { 
        complex2.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex1.ZERO.cosh();
      Complex complex4 = complex1.createComplex((-1.0), (-784.0397353562));
      Object object0 = complex1.readResolve();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex4.pow(complex1);
      double double0 = complex1.INF.getArgument();
      Complex complex7 = complex0.subtract(complex6);
      Complex complex8 = complex7.ZERO.sqrt1z();
      Complex complex9 = complex6.I.atan();
      List<Complex> list0 = complex9.I.nthRoot(1);
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex7.ONE.sqrt1z();
      Complex complex12 = complex7.I.add(complex6);
      Complex complex13 = complex4.NaN.sinh();
      Complex complex14 = complex3.conjugate();
      Complex complex15 = complex4.multiply((-784.0397353562));
      Complex complex16 = complex7.exp();
      Complex complex17 = complex1.divide(complex3);
      boolean boolean0 = complex6.isInfinite();
      String string0 = complex5.toString();
      String string1 = complex16.toString();
      double double1 = complex3.getReal();
      Complex complex18 = Complex.I;
      Complex complex19 = complex17.add(complex18);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.NaN.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex1.ZERO.sqrt();
      Complex complex4 = complex0.cos();
      int int0 = complex2.ONE.hashCode();
      Complex complex5 = complex0.NaN.divide(complex1);
      Complex complex6 = complex0.I.cos();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex4.subtract(complex2);
      Complex complex8 = complex7.atan();
      Complex complex9 = complex8.INF.tan();
      Complex complex10 = complex7.exp();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 3768.25);
      double double0 = complex0.ZERO.abs();
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.sqrt1z();
      double double1 = complex1.INF.abs();
      Complex complex2 = complex0.I.createComplex((-1.0), 0.125);
      Complex complex3 = complex0.I.negate();
      Complex complex4 = complex1.ZERO.add(complex0);
      Object object0 = complex4.ONE.readResolve();
      Complex complex5 = complex1.divide(complex0);
      boolean boolean0 = complex1.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.sin();
      double double0 = complex0.getReal();
      double double1 = complex0.getReal();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex0.multiply((double) 369);
      List<Complex> list0 = complex7.ONE.nthRoot(1450);
      List<Complex> list1 = complex6.ZERO.nthRoot(369);
      Complex complex8 = complex0.pow(complex3);
      Complex complex9 = complex8.negate();
      Complex complex10 = complex3.createComplex(Double.POSITIVE_INFINITY, Double.NaN);
      Complex complex11 = complex10.I.atan();
      Complex complex12 = complex11.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex13 = complex11.I.negate();
      Complex complex14 = complex8.negate();
      Complex complex15 = complex9.negate();
      Complex complex16 = complex8.tan();
      Complex complex17 = complex16.ZERO.sin();
      Object object0 = complex16.ONE.readResolve();
      Complex complex18 = complex15.negate();
      Complex complex19 = complex3.ONE.asin();
      Complex complex20 = complex9.sqrt();
      Complex complex21 = complex9.pow(complex4);
      Complex complex22 = complex8.tanh();
      Complex complex23 = complex22.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.ZERO.multiply((-165.94543406227));
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex5.ONE.sqrt();
      int int0 = complex6.hashCode();
      String string0 = complex2.toString();
      Complex complex7 = complex6.NaN.negate();
      double double0 = complex2.getArgument();
      Complex complex8 = complex5.INF.tan();
      Complex complex9 = complex8.INF.sqrt();
      boolean boolean0 = complex6.isNaN();
      Complex complex10 = complex5.subtract(complex4);
      Complex complex11 = complex10.NaN.log();
      int int1 = complex11.I.hashCode();
      Complex complex12 = complex11.tan();
      Complex complex13 = complex9.I.asin();
      double double1 = complex12.ZERO.getArgument();
      Complex complex14 = complex5.cos();
      String string1 = complex10.toString();
      Complex complex15 = complex9.sin();
      Complex complex16 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt1z();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.I.createComplex(3191.311738619145, 3191.311738619145);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.pow(complex0);
      double double0 = complex4.I.getArgument();
      Complex complex6 = complex4.exp();
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.multiply((-3816.7950370855606));
      Complex complex3 = complex2.add(complex0);
      ComplexField complexField0 = complex3.ONE.getField();
      ComplexField complexField1 = complex2.getField();
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex2.log();
      Complex complex6 = complex1.ONE.divide(complex3);
      Complex complex7 = complex1.createComplex((-3816.7950370855606), 0.0);
      int int0 = complex0.ZERO.hashCode();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex9.I.multiply(complex8);
      Complex complex11 = complex2.ONE.createComplex((-3816.7950370855606), 5069.01);
      String string0 = complex9.toString();
      ComplexField complexField2 = complex2.getField();
      Complex complex12 = complex7.ONE.log();
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex8.multiply(complex13);
      Complex complex15 = complex13.cos();
      Complex complex16 = complex15.pow(complex7);
      Complex complex17 = complex15.atan();
      Complex complex18 = complex9.multiply((-3270.482174677924));
      Complex complex19 = complex15.asin();
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-855.0), 2.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.cos();
      double double0 = complex1.abs();
      boolean boolean0 = complex1.isInfinite();
      int int0 = complex0.I.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex3.tan();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-529.156411331), (-529.156411331));
      Complex complex1 = complex0.I.multiply((-529.156411331));
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex3.INF.divide(complex1);
      double double0 = complex0.ONE.abs();
      Complex complex5 = complex0.atan();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex3.ZERO.createComplex(876.9, 3164.02299);
      int int0 = complex3.ZERO.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex8.INF.exp();
      Complex complex10 = complex9.ZERO.cosh();
      Complex complex11 = complex7.add(complex1);
      Complex complex12 = complex0.cos();
      Complex complex13 = complex8.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex2.ONE.sin();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex6 = complex2.sin();
      Complex complex7 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Object object0 = complex0.I.readResolve();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex0.ZERO.divide(complex1);
      Complex complex4 = complex3.NaN.createComplex(6.283185307179586, 6.283185307179586);
      String string0 = complex1.ZERO.toString();
      double double0 = complex1.getImaginary();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.ONE.tanh();
      boolean boolean0 = complex5.isInfinite();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.INF.asin();
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.multiply(complex2);
      Complex complex8 = complex1.INF.divide(complex6);
      Complex complex9 = complex2.createComplex(0.07490822288864472, 0.07490822288864472);
      double double0 = complex0.getImaginary();
      Complex complex10 = complex0.subtract(complex9);
      Object object0 = complex0.readResolve();
      Object object1 = complex10.readResolve();
      String string0 = complex10.toString();
      Complex complex11 = complex8.acos();
      double double1 = complex6.getReal();
      Complex complex12 = new Complex(0.07490822288864472, Double.NaN);
      Complex complex13 = complex11.add(complex12);
      Complex complex14 = complex3.negate();
      Complex complex15 = complex3.subtract(complex14);
      boolean boolean0 = complex2.isNaN();
      Complex complex16 = complex2.sinh();
      Complex complex17 = complex14.sqrt();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex0.createComplex(Double.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-3222.639055839), (-3222.639055839));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.createComplex(1.125, 3095.4034491);
      double double0 = complex1.ONE.abs();
      Complex complex3 = complex1.INF.add(complex0);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.ONE.pow(complex4);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.NaN.conjugate();
      Complex complex8 = complex1.createComplex((-536.6362430673662), (-536.6362430673662));
      String string0 = complex0.I.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex0.createComplex((-3222.639055839), (-3222.639055839));
      Object object0 = complex1.ZERO.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Complex complex10 = complex0.sinh();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.NaN.sinh();
      List<Complex> list0 = complex3.I.nthRoot(7);
      Complex complex4 = complex2.I.pow(complex1);
      String string0 = complex4.ZERO.toString();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.NaN.pow(complex2);
      Complex complex7 = complex5.cos();
      Complex complex8 = complex7.ZERO.add(complex5);
      Complex complex9 = complex8.NaN.sinh();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex10.negate();
      Complex complex12 = complex0.exp();
      Complex complex13 = complex4.negate();
      Complex complex14 = complex13.conjugate();
      Complex complex15 = complex10.tan();
      Complex complex16 = complex8.I.negate();
      Complex complex17 = complex8.add(complex11);
      ComplexField complexField0 = complex7.getField();
      Complex complex18 = complex2.sqrt();
      Complex complex19 = complex11.exp();
      Complex complex20 = complex5.multiply(complex9);
      Complex complex21 = complex13.add(complex14);
      double double1 = complex9.abs();
      boolean boolean0 = complex9.isNaN();
      Complex complex22 = complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.ONE.pow(complex1);
      double double1 = complex0.NaN.getArgument();
      Complex complex4 = complex1.INF.negate();
      double double2 = complex4.abs();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex3.ZERO.divide(complex1);
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex1.ONE.cosh();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getImaginary();
      try { 
        complex1.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(367.7903, (-4683.3475));
      Complex complex1 = complex0.ZERO.acos();
      List<Complex> list0 = complex1.INF.nthRoot(25);
      Complex complex2 = complex1.I.negate();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex1.I.cos();
      Complex complex5 = complex0.ONE.atan();
      Complex complex6 = complex0.ONE.multiply(complex1);
      Object object1 = complex6.NaN.readResolve();
      List<Complex> list1 = complex3.ONE.nthRoot(1133);
      Complex complex7 = complex3.multiply(complex2);
      Complex complex8 = complex7.INF.createComplex(1525.267799, 3460.567811092907);
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex7.ZERO.pow(complex8);
      Complex complex11 = complex10.tan();
      Complex complex12 = complex9.INF.tan();
      double double0 = complex8.getArgument();
      boolean boolean0 = complex3.isInfinite();
      Complex complex13 = complex9.add(complex8);
      Complex complex14 = complex1.asin();
      int int0 = complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-2591.037281), 1661.21349);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.I.tan();
      ComplexField complexField0 = complex4.getField();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex0.divide(complex2);
      Object object0 = complex6.readResolve();
      Complex complex8 = complex1.INF.atan();
      int int0 = complex2.hashCode();
      Complex complex9 = complex0.cos();
      Complex complex10 = complex0.subtract(complex7);
      boolean boolean0 = complex0.equals(complex3);
      Object object1 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex1.ZERO.multiply(complex0);
      double double0 = complex1.getReal();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.ZERO.sqrt();
      double double1 = complex4.getReal();
      Complex complex6 = complex5.multiply(2929.919);
      Complex complex7 = complex4.pow(complex6);
      Complex complex8 = complex7.ONE.cosh();
      Object object0 = complex4.readResolve();
      Complex complex9 = complex5.pow(complex1);
      Complex complex10 = complex6.createComplex((-1696.5206634), 0.0);
      Object object1 = complex6.readResolve();
      double double2 = complex0.getReal();
      Complex complex11 = complex7.cosh();
      Complex complex12 = complex7.add(complex3);
      double double3 = complex9.getArgument();
      double double4 = complex1.getImaginary();
      Complex complex13 = complex1.subtract(complex8);
      Complex complex14 = complex11.sin();
      double double5 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-2121.615), (-2121.615));
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.I.tan();
      Complex complex8 = complex5.negate();
      double double0 = complex5.NaN.abs();
      boolean boolean0 = complex1.isInfinite();
      ComplexField complexField0 = complex2.ZERO.getField();
      double double1 = complex1.getArgument();
      Complex complex9 = complex0.sin();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex10 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-562.8288187));
      Complex complex2 = complex1.INF.exp();
      String string0 = complex0.toString();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex0.sinh();
      double double0 = complex2.getImaginary();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.createComplex((-562.8288187), (-562.8288187));
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex1 = complex0.createComplex(0.0, 1.5830993332061267E-10);
      boolean boolean1 = complex0.isNaN();
      Complex complex2 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex0.I.atan();
      Complex complex4 = complex0.NaN.asin();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.NaN.cosh();
      double double0 = complex4.getImaginary();
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex5.multiply(complex7);
      Complex complex9 = complex5.subtract(complex1);
      ComplexField complexField0 = complex6.getField();
      double double1 = complex5.getImaginary();
      Complex complex10 = complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.NaN.readResolve();
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex2.ONE.divide(complex1);
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex4.INF.cos();
      Complex complex7 = complex0.subtract(complex1);
      Complex complex8 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-1692.979));
      Complex complex1 = complex0.ONE.atan();
      double double0 = complex1.I.getArgument();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex5.pow(complex3);
      double double1 = complex4.ZERO.getArgument();
      String string0 = complex4.toString();
      double double2 = complex0.abs();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex4.multiply(808.0695793903623);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.I.add(complex0);
      Object object0 = complex0.ZERO.readResolve();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.NaN.sqrt();
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex3.I.pow(complex2);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex6.NaN.asin();
      Complex complex9 = complex8.ZERO.tan();
      Complex complex10 = complex0.subtract(complex3);
      Complex complex11 = complex10.I.conjugate();
      boolean boolean0 = complex3.isInfinite();
      Complex complex12 = complex6.atan();
      Complex complex13 = complex12.tan();
      Complex complex14 = complex13.I.asin();
      double double0 = complex6.getArgument();
      boolean boolean1 = complex3.isNaN();
      double double1 = complex9.getImaginary();
      Complex complex15 = complex3.sin();
      Complex complex16 = complex1.asin();
      Complex complex17 = complex0.sinh();
      Complex complex18 = complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex0.ZERO.conjugate();
      Complex complex5 = complex1.ZERO.sin();
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex1.ONE.multiply((-543.9834));
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex0.cos();
      double double0 = complex8.abs();
      Complex complex10 = complex7.cos();
      Complex complex11 = complex10.tanh();
      double double1 = complex9.getArgument();
      Complex complex12 = complex9.exp();
      Object object0 = complex12.readResolve();
      Complex complex13 = complex7.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.INF.multiply(0.0);
      Complex complex4 = complex3.ONE.cos();
      double double1 = complex0.getArgument();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex4.exp();
      Complex complex7 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(1233.1, 1233.1);
      Complex complex1 = complex0.multiply(1233.1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex4.asin();
      Complex complex9 = complex8.log();
      Complex complex10 = complex8.add(complex6);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.I.sqrt1z();
      List<Complex> list0 = complex2.ZERO.nthRoot(78);
      String string1 = complex2.ZERO.toString();
      Complex complex4 = complex1.I.subtract(complex2);
      Complex complex5 = complex0.ONE.multiply(complex1);
      int int0 = complex5.hashCode();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex1.createComplex((-1158.880414474), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex1.I.tan();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex1.NaN.asin();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex0.ONE.multiply(Double.NaN);
      Complex complex8 = complex7.ZERO.subtract(complex1);
      Complex complex9 = complex7.multiply(complex0);
      Complex complex10 = complex0.negate();
      Complex complex11 = complex10.NaN.tan();
      double double0 = complex0.abs();
      Complex complex12 = complex9.log();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.ZERO.cos();
      List<Complex> list0 = complex0.nthRoot(226);
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cosh();
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex0.NaN.conjugate();
      Complex complex4 = complex3.I.acos();
      String string0 = complex4.NaN.toString();
      double double1 = complex0.getImaginary();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex7.ZERO.divide(complex8);
      boolean boolean0 = complex5.isInfinite();
      Complex complex10 = complex1.multiply(complex3);
      Complex complex11 = complex6.NaN.cos();
      Complex complex12 = complex11.atan();
      Complex complex13 = complex6.cosh();
      double double2 = complex13.getReal();
      Complex complex14 = complex4.exp();
      Complex complex15 = complex1.sqrt();
      Complex complex16 = complex11.sqrt1z();
      Complex complex17 = complex13.sin();
      Complex complex18 = complex13.negate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.I.multiply(complex3);
      int int0 = complex1.hashCode();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex4.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex0.INF.createComplex(1.0, 0.0);
      double double0 = complex0.getImaginary();
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex5.ONE.tan();
      Complex complex7 = complex2.subtract(complex5);
      Complex complex8 = complex7.NaN.cos();
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex4.log();
      Complex complex11 = complex4.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.INF.createComplex(3023.888114089011, 3023.888114089011);
      double double0 = complex2.NaN.abs();
      Complex complex3 = complex1.ZERO.divide(complex2);
      Complex complex4 = complex2.ONE.subtract(complex0);
      String string0 = complex0.toString();
      double double1 = complex0.abs();
      double double2 = complex1.getImaginary();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex4.add(complex5);
      double double3 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex0.ZERO.log();
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex2.acos();
      Complex complex6 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.073741824E9);
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.ONE.log();
      Complex complex5 = complex0.sin();
      int int0 = complex5.hashCode();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.add(complex5);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-3216.3374617370564), 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.ONE.multiply(0.0);
      Complex complex4 = complex2.ZERO.cosh();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex4.subtract(complex5);
      Complex complex7 = complex3.I.acos();
      Complex complex8 = complex1.ONE.sinh();
      Complex complex9 = complex0.ONE.createComplex(4038.0, 0.0);
      ComplexField complexField0 = complex9.I.getField();
      double double0 = complex3.getImaginary();
      Complex complex10 = complex3.sqrt1z();
      try { 
        complex4.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.4456468917292502E-16, (-94.54));
      Object object0 = complex1.INF.readResolve();
      String string0 = complex1.toString();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex5.divide(complex6);
      Complex complex8 = complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex1.sin();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.ZERO.multiply(complex2);
      String string0 = complex4.INF.toString();
      Object object0 = complex5.I.readResolve();
      Complex complex6 = complex3.log();
      Complex complex7 = complex6.ONE.pow(complex5);
      Object object1 = complex6.ZERO.readResolve();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex8.I.conjugate();
      boolean boolean0 = complex8.isInfinite();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex3.subtract(complex10);
      Object object2 = complex1.readResolve();
      Complex complex12 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      boolean boolean0 = complex0.isNaN();
      double double1 = complex0.getReal();
      Complex complex1 = Complex.ZERO;
      int int0 = complex1.hashCode();
      ComplexField complexField0 = complex1.ZERO.getField();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex3.asin();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.ONE.createComplex(1.0, 1.0);
      Complex complex9 = complex0.add(complex6);
      Complex complex10 = complex6.INF.sqrt1z();
      Object object1 = complex9.readResolve();
      int int1 = complex10.ZERO.hashCode();
      boolean boolean1 = complex0.equals(object1);
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex11.cos();
      Complex complex13 = complex11.I.add(complex10);
      double double2 = complex2.getImaginary();
      Complex complex14 = complex0.ONE.divide(complex9);
      Complex complex15 = complex11.tan();
      Complex complex16 = complex3.sin();
      Complex complex17 = complex2.sin();
      double double3 = complex11.getImaginary();
      Complex complex18 = complex1.cosh();
      boolean boolean2 = complex10.equals("{+=9Kr=E~G");
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.ZERO.pow(complex1);
      int int0 = complex0.NaN.hashCode();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = complex3.ONE.conjugate();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex2.NaN.multiply(complex0);
      Complex complex5 = complex1.negate();
      double double0 = complex0.I.abs();
      double double1 = complex1.getReal();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex6.exp();
      List<Complex> list0 = complex5.nthRoot(1);
      try { 
        complex7.INF.nthRoot((-2651));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,651
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.ZERO.createComplex(0.0, 0.0);
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex0.INF.tan();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex1.I.sqrt1z();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex0.ONE.asin();
      Complex complex10 = complex0.subtract(complex8);
      Complex complex11 = complex10.exp();
      Complex complex12 = complex0.negate();
      List<Complex> list0 = complex12.INF.nthRoot(110);
      Complex complex13 = complex1.createComplex(0.0, 0.0);
      Complex complex14 = complex13.NaN.exp();
      Complex complex15 = complex10.INF.cos();
      Complex complex16 = complex6.multiply(complex3);
      Complex complex17 = complex16.cosh();
      double double0 = complex16.I.getArgument();
      Complex complex18 = complex0.negate();
      Complex complex19 = complex17.sqrt();
      Complex complex20 = complex6.cos();
      Complex complex21 = complex10.tanh();
      Complex complex22 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-1571.287991279), (-1571.287991279));
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex0.I.negate();
      ComplexField complexField0 = complex2.getField();
      double double0 = complex0.I.getArgument();
      String string0 = complex0.ZERO.toString();
      double double1 = complex1.ZERO.abs();
      Complex complex3 = complex1.INF.sqrt1z();
      List<Complex> list0 = complex0.NaN.nthRoot(954);
      ComplexField complexField1 = complex0.getField();
      int int0 = complex0.hashCode();
      List<Complex> list1 = complex1.I.nthRoot(954);
      double double2 = complex1.ZERO.abs();
      List<Complex> list2 = complex0.nthRoot(954);
      int int1 = complex0.hashCode();
      ComplexField complexField2 = complex0.getField();
      Object object0 = complex1.readResolve();
      Object object1 = complex0.readResolve();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex4.add(complex3);
      Complex complex7 = complex1.sqrt();
      ComplexField complexField3 = complex0.getField();
      Complex complex8 = complex5.add(complex0);
      boolean boolean0 = complex5.isNaN();
      Complex complex9 = complex7.acos();
      ComplexField complexField4 = complex0.getField();
      ComplexField complexField5 = complex3.INF.getField();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex9.sin();
      Complex complex12 = complex8.atan();
      Complex complex13 = complex2.createComplex((-267.90476), 0.0);
      boolean boolean1 = complex1.isNaN();
      Complex complex14 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.ONE.sqrt();
      double double0 = complex1.getArgument();
      Complex complex5 = complex0.tanh();
      String string0 = complex5.ONE.toString();
      String string1 = complex1.ZERO.toString();
      Complex complex6 = complex2.cosh();
      String string2 = complex6.ONE.toString();
      Complex complex7 = complex6.ONE.log();
      double double1 = complex7.INF.getArgument();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex9.ZERO.sqrt();
      Complex complex11 = complex9.ONE.cos();
      Object object0 = complex1.readResolve();
      Complex complex12 = complex2.tan();
      Complex complex13 = complex12.ONE.acos();
      int int0 = complex12.ZERO.hashCode();
      Complex complex14 = complex9.pow(complex12);
      List<Complex> list0 = complex14.I.nthRoot(1226);
      Complex complex15 = complex14.NaN.tanh();
      boolean boolean0 = complex4.equals(complex3);
      double double2 = complex9.getArgument();
      int int1 = complex3.hashCode();
      Complex complex16 = complex11.subtract(complex5);
      boolean boolean1 = complex3.isNaN();
      Complex complex17 = complex11.cos();
      Complex complex18 = complex0.sqrt();
      Complex complex19 = complex18.cos();
      boolean boolean2 = complex10.isInfinite();
      Complex complex20 = complex14.multiply(1.5707963267948966);
      Complex complex21 = complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = complex2.NaN.tan();
      Complex complex5 = complex0.add(complex1);
      double double0 = complex5.INF.getArgument();
      Complex complex6 = complex2.ZERO.acos();
      Complex complex7 = complex6.sqrt1z();
      String string0 = complex0.I.toString();
      Complex complex8 = complex4.I.multiply(complex6);
      double double1 = complex1.INF.getArgument();
      Complex complex9 = complex0.log();
      List<Complex> list0 = complex9.INF.nthRoot(1504);
      Complex complex10 = complex6.ONE.divide(complex8);
      Complex complex11 = complex5.divide(complex9);
      Complex complex12 = complex2.tanh();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex4.isNaN();
      Complex complex13 = complex2.cos();
      Complex complex14 = complex13.NaN.sinh();
      Complex complex15 = complex13.INF.conjugate();
      double double2 = complex13.abs();
      Object object1 = complex6.readResolve();
      Complex complex16 = complex0.conjugate();
      Complex complex17 = complex7.tan();
      Complex complex18 = complex12.subtract(complex11);
      Complex complex19 = complex8.multiply(complex16);
  }
}
