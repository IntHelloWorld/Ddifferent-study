/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:17:38 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.exp();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex5.NaN.acos();
      Complex complex7 = complex0.subtract(complex4);
      Complex complex8 = complex5.INF.negate();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex2.subtract(complex3);
      double double0 = complex4.getImaginary();
      Complex complex11 = complex1.add(complex3);
      Complex complex12 = complex5.divide(complex7);
      boolean boolean0 = complex11.equals(complex5);
      Complex complex13 = complex10.tan();
      Complex complex14 = complex13.pow(complex4);
      Complex complex15 = complex14.cos();
      Complex complex16 = complex12.cos();
      Complex complex17 = new Complex(2.0, 0.0);
      Complex complex18 = complex13.ZERO.multiply(complex17);
      double double1 = complex4.abs();
      Complex complex19 = complex13.multiply(5.283185307179586);
      Complex complex20 = complex8.conjugate();
      Complex complex21 = complex1.sqrt();
      Complex complex22 = complex5.atan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.NaN;
      String string0 = complex4.NaN.toString();
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.ONE.tanh();
      double double0 = complex0.abs();
      List<Complex> list0 = complex4.nthRoot(439);
      double double1 = complex5.getReal();
      Complex complex8 = complex4.sin();
      Complex complex9 = complex7.sqrt1z();
      ComplexField complexField0 = complex9.ZERO.getField();
      Complex complex10 = complex9.INF.pow(complex4);
      Complex complex11 = complex9.createComplex(0.0, 439);
      double double2 = complex11.abs();
      Complex complex12 = complex2.pow(complex0);
      Complex complex13 = complex5.atan();
      Complex complex14 = complex13.NaN.add(complex3);
      Complex complex15 = new Complex((-1.0), Double.NaN);
      Complex complex16 = complex14.divide(complex15);
      double double3 = complex12.getImaginary();
      boolean boolean0 = complex3.equals("cwfE9]!G(ooF");
      Complex complex17 = complex8.sinh();
      boolean boolean1 = complex5.isNaN();
      Complex complex18 = complex3.sqrt1z();
      double double4 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(663.0233316, 663.0233316);
      String string0 = complex0.INF.toString();
      double double0 = complex0.getArgument();
      String string1 = complex0.toString();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.NaN.sinh();
      List<Complex> list0 = complex1.NaN.nthRoot(2747);
      Complex complex3 = complex0.cosh();
      double double1 = complex0.getImaginary();
      Complex complex4 = complex1.INF.subtract(complex0);
      double double2 = complex0.ZERO.getArgument();
      Complex complex5 = complex3.NaN.sqrt1z();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex6 = complex0.ONE.createComplex(1831.588977435, 0.7853981633974483);
      ComplexField complexField0 = complex6.INF.getField();
      double double3 = complex6.INF.abs();
      Complex complex7 = complex0.ZERO.pow(complex3);
      Object object1 = complex1.readResolve();
      Complex complex8 = complex1.divide(complex0);
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = complex8.ZERO.tan();
      Complex complex11 = complex10.ZERO.multiply(Double.POSITIVE_INFINITY);
      double double4 = complex11.ONE.getArgument();
      String string2 = complex11.toString();
      Object object2 = complex11.ONE.readResolve();
      Complex complex12 = complex0.asin();
      Complex complex13 = complex10.cosh();
      Complex complex14 = complex12.asin();
      Complex complex15 = complex2.sqrt();
      Complex complex16 = complex3.cosh();
      Complex complex17 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.createComplex((-1436.7696834646547), (-1436.7696834646547));
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex5.NaN.pow(complex2);
      Complex complex7 = complex5.acos();
      Complex complex8 = complex0.acos();
      double double0 = complex4.ONE.getArgument();
      Complex complex9 = complex2.ZERO.conjugate();
      Complex complex10 = complex9.I.sqrt();
      Complex complex11 = complex0.I.conjugate();
      int int0 = complex1.NaN.hashCode();
      Complex complex12 = complex0.conjugate();
      Complex complex13 = complex9.NaN.acos();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex14 = complex12.ZERO.createComplex((-1436.7696834646547), (-243.072346121418));
      Complex complex15 = complex1.cosh();
      Complex complex16 = complex2.sqrt1z();
      Complex complex17 = complex16.I.asin();
      Complex complex18 = complex2.NaN.tan();
      Complex complex19 = complex16.multiply(complex0);
      boolean boolean0 = complex10.isNaN();
      List<Complex> list0 = complex1.nthRoot(491);
      Complex complex20 = complex2.I.multiply(complex13);
      Complex complex21 = complex1.cosh();
      Complex complex22 = complex19.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-2621.8718910658786), (-2621.8718910658786));
      Complex complex1 = complex0.NaN.sqrt1z();
      List<Complex> list0 = complex0.ZERO.nthRoot(3619);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ZERO.divide(complex0);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex4 = complex2.INF.sqrt();
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex2.ZERO.log();
      Complex complex8 = complex2.INF.cosh();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex9.I.atan();
      Complex complex11 = complex10.I.multiply(complex9);
      String string0 = complex9.ONE.toString();
      Complex complex12 = complex2.tan();
      double double0 = complex12.ZERO.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex13 = complex12.NaN.acos();
      List<Complex> list1 = complex11.NaN.nthRoot(3619);
      Complex complex14 = complex0.atan();
      Complex complex15 = complex14.ZERO.sqrt();
      Complex complex16 = complex9.divide(complex12);
      Complex complex17 = complex2.INF.multiply((-752.491));
      String string1 = complex11.toString();
      Complex complex18 = complex13.multiply(6.283185307179586);
      Complex complex19 = complex4.sqrt1z();
      Object object1 = complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sinh();
      int int0 = complex2.ZERO.hashCode();
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex1.sin();
      String string0 = complex4.toString();
      Complex complex5 = complex4.negate();
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex1.NaN.sqrt();
      double double0 = complex0.getArgument();
      String string0 = complex3.INF.toString();
      Complex complex5 = new Complex(4.0, 4.0);
      Complex complex6 = complex0.divide(complex5);
      boolean boolean0 = complex5.isNaN();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex7.INF.sin();
      Complex complex10 = complex8.multiply(complex6);
      Complex complex11 = complex7.tanh();
      boolean boolean1 = complex2.equals(complex1);
      Complex complex12 = complex6.add(complex0);
      Complex complex13 = complex6.sqrt();
      Complex complex14 = complex9.log();
      Complex complex15 = complex3.tan();
      Complex complex16 = complex5.multiply(4.0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.acos();
      double double0 = complex0.getArgument();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex0.pow(complex2);
      double double1 = complex5.I.abs();
      Complex complex6 = complex5.ZERO.sin();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex1.pow(complex7);
      Complex complex9 = complex0.I.negate();
      Complex complex10 = complex2.conjugate();
      Complex complex11 = complex10.INF.log();
      Complex complex12 = complex10.NaN.pow(complex4);
      Complex complex13 = complex7.ZERO.log();
      Complex complex14 = complex10.ZERO.cosh();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex15 = complex0.atan();
      Complex complex16 = complex15.ZERO.pow(complex8);
      Complex complex17 = complex2.pow(complex5);
      Complex complex18 = complex17.ONE.createComplex(8.0E298, 8.0E298);
      Complex complex19 = complex17.I.add(complex3);
      double double2 = complex4.abs();
      Complex complex20 = complex5.divide(complex2);
      Complex complex21 = complex20.ZERO.tan();
      ComplexField complexField0 = complex9.getField();
      boolean boolean1 = complex1.isInfinite();
      double double3 = complex6.getArgument();
      Complex complex22 = complex5.asin();
      boolean boolean2 = complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.multiply(8.0);
      Complex complex4 = complex2.INF.cosh();
      Complex complex5 = complex0.INF.sqrt();
      Complex complex6 = complex2.ONE.negate();
      Complex complex7 = complex0.ZERO.exp();
      Complex complex8 = complex7.ONE.asin();
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.I.sqrt();
      Complex complex11 = complex7.NaN.multiply(complex9);
      Complex complex12 = complex1.NaN.sin();
      double double1 = complex12.I.abs();
      Complex complex13 = complex12.add(complex9);
      Complex complex14 = complex12.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double2 = complex0.getArgument();
      Complex complex15 = complex2.log();
      Complex complex16 = complex6.asin();
      Complex complex17 = complex8.atan();
      Complex complex18 = complex15.add(complex8);
      Complex complex19 = complex11.multiply(complex10);
      Complex complex20 = new Complex(6.283185307179586, (-413.3169556311769));
      Complex complex21 = complex6.pow(complex20);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Object object0 = complex1.INF.readResolve();
      Complex complex3 = complex1.INF.tan();
      Complex complex4 = complex0.asin();
      ComplexField complexField0 = complex4.I.getField();
      Complex complex5 = complex0.multiply(complex4);
      boolean boolean0 = complex4.equals(complex0);
      Complex complex6 = complex1.INF.subtract(complex4);
      Complex complex7 = complex4.subtract(complex5);
      Complex complex8 = complex7.I.divide(complex4);
      Complex complex9 = complex2.log();
      double double0 = complex4.getArgument();
      Complex complex10 = complex4.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.createComplex(0.0, 0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ONE.add(complex0);
      double double0 = complex3.I.abs();
      Complex complex4 = complex2.NaN.subtract(complex0);
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex2.NaN.sqrt();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex2.pow(complex0);
      Complex complex9 = complex8.ZERO.cosh();
      try { 
        complex9.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.NaN.sqrt();
      Complex complex5 = complex1.ZERO.add(complex3);
      Complex complex6 = complex5.NaN.sin();
      Object object0 = complex5.NaN.readResolve();
      Complex complex7 = complex2.ZERO.cos();
      Complex complex8 = complex1.INF.createComplex(1446.7830473922, 1417.23550129);
      Complex complex9 = complex2.INF.atan();
      Complex complex10 = complex2.NaN.sqrt1z();
      Complex complex11 = complex10.ONE.sinh();
      double double0 = complex0.getReal();
      Complex complex12 = complex1.ONE.tan();
      double double1 = complex2.getReal();
      Complex complex13 = complex1.add(complex9);
      Complex complex14 = complex7.sin();
      boolean boolean0 = complex2.isInfinite();
      Complex complex15 = complex2.asin();
      Complex complex16 = complex6.tanh();
      Complex complex17 = complex8.sinh();
      Complex complex18 = complex8.cos();
      boolean boolean1 = complex2.isInfinite();
      Complex complex19 = complex2.divide(complex11);
      Complex complex20 = complex10.cos();
      Complex complex21 = complex13.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tanh();
      List<Complex> list0 = complex0.INF.nthRoot(1);
      Complex complex2 = complex0.negate();
      List<Complex> list1 = complex0.nthRoot(1);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex3.INF.conjugate();
      Complex complex8 = complex7.I.exp();
      Complex complex9 = complex0.subtract(complex2);
      Complex complex10 = complex4.acos();
      Complex complex11 = complex4.log();
      Complex complex12 = complex10.I.pow(complex3);
      Complex complex13 = complex3.I.subtract(complex4);
      Complex complex14 = complex13.asin();
      double double0 = complex0.abs();
      Object object0 = complex1.readResolve();
      double double1 = complex5.getReal();
      Complex complex15 = complex3.NaN.sinh();
      Complex complex16 = complex0.sqrt();
      Complex complex17 = complex2.pow(complex4);
      List<Complex> list2 = complex2.nthRoot(1);
      Complex complex18 = complex9.cosh();
      Complex complex19 = complex1.acos();
      Complex complex20 = complex9.sin();
      boolean boolean0 = complex10.isNaN();
      Complex complex21 = complex1.cosh();
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.atan();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = new Complex(0.087, 0.087);
      Complex complex3 = complex1.ONE.pow(complex2);
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex4.ONE.multiply(complex1);
      Complex complex6 = complex2.ONE.log();
      double double0 = complex3.ZERO.getArgument();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex0.NaN.sqrt();
      Complex complex9 = complex7.sinh();
      Complex complex10 = complex0.createComplex((-2850.1244243238), (-2850.1244243238));
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex2.I.multiply(complex11);
      List<Complex> list0 = complex0.I.nthRoot(1);
      Complex complex13 = complex10.exp();
      int int0 = complex13.hashCode();
      double double1 = complex7.abs();
      Complex complex14 = complex10.asin();
      String string0 = complex0.toString();
      List<Complex> list1 = complex0.nthRoot(290);
      Complex complex15 = complex10.exp();
      Complex complex16 = complex15.I.sqrt1z();
      int int1 = complex8.hashCode();
      Complex complex17 = complex15.atan();
      int int2 = complex3.hashCode();
      Object object0 = complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(0.2, 0.2);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex0.createComplex((-1.0), 0.2);
      Complex complex4 = complex3.multiply((-3436.12));
      Complex complex5 = complex4.ONE.tan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex0.divide(complex3);
      Complex complex8 = complex7.NaN.atan();
      ComplexField complexField0 = complex7.ZERO.getField();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex9.atan();
      double double1 = complex9.I.getArgument();
      double double2 = complex5.getArgument();
      Complex complex11 = complex4.log();
      Complex complex12 = complex3.createComplex((-694.69803), 1.25);
      ComplexField complexField1 = complex9.getField();
      Complex complex13 = complex3.multiply(8.0);
      Complex complex14 = complex7.createComplex(0.0, 0.2);
      Complex complex15 = complex12.cos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.INF.atan();
      List<Complex> list0 = complex1.nthRoot(1);
      Object object0 = complex1.readResolve();
      Object object1 = complex0.ZERO.readResolve();
      Complex complex3 = complex2.sqrt();
      double double0 = complex0.getReal();
      double double1 = complex1.getImaginary();
      Complex complex4 = complex0.ONE.divide(complex1);
      Object object2 = complex4.INF.readResolve();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex1.multiply(1.0);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.sin();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex7.atan();
      Object object3 = complex0.readResolve();
      Complex complex11 = complex5.divide(complex9);
      double double2 = complex1.getArgument();
      Complex complex12 = complex6.atan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.ONE.createComplex(530.46819547744, 530.46819547744);
      Complex complex2 = complex1.sinh();
      double double0 = complex2.I.getArgument();
      Complex complex3 = complex2.atan();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.multiply(complex4);
      double double1 = complex0.getReal();
      double double2 = complex4.getImaginary();
      Complex complex6 = complex1.tanh();
      ComplexField complexField1 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 1804.6818568643985;
      Complex complex0 = new Complex(1804.6818568643985, 1804.6818568643985);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.ONE.add(complex1);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex2.NaN.pow(complex0);
      Complex complex6 = complex4.ZERO.acos();
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = complex7.INF.multiply(complex0);
      int int0 = complex6.hashCode();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex4.tan();
      Complex complex11 = complex1.add(complex9);
      Complex complex12 = complex11.INF.exp();
      Complex complex13 = complex4.sqrt();
      Object object0 = complex9.INF.readResolve();
      int int1 = complex0.hashCode();
      Complex complex14 = null;
      try { 
        complex9.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.INF.subtract(complex0);
      Object object0 = complex2.INF.readResolve();
      Complex complex3 = complex1.I.cos();
      double double0 = complex2.ONE.getArgument();
      Complex complex4 = complex2.ONE.negate();
      ComplexField complexField0 = complex0.getField();
      double double1 = complex0.getArgument();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex3.asin();
      double double2 = complex5.getImaginary();
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-252.09857799251), (-252.09857799251));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex0.NaN.exp();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex2.log();
      Complex complex7 = complex0.INF.add(complex5);
      List<Complex> list0 = complex6.nthRoot(1);
      int int0 = complex0.hashCode();
      Complex complex8 = complex7.cos();
      Complex complex9 = complex3.NaN.sqrt();
      Complex complex10 = complex0.subtract(complex5);
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex1.createComplex((-3881.7), (-3881.7));
      Complex complex5 = complex4.tanh();
      double double0 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-791.01690897851), 0.75);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.cosh();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex0.NaN.tan();
      Complex complex8 = complex1.ONE.cosh();
      Complex complex9 = complex4.tan();
      Complex complex10 = complex6.ZERO.multiply(1127.9);
      Complex complex11 = complex10.NaN.exp();
      Complex complex12 = complex10.NaN.tanh();
      Complex complex13 = complex2.ZERO.asin();
      Complex complex14 = complex6.INF.atan();
      List<Complex> list0 = complex6.ONE.nthRoot(19);
      double double0 = complex5.getImaginary();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex15 = complex10.tan();
      Complex complex16 = complex15.I.sqrt();
      Complex complex17 = complex1.add(complex2);
      double double1 = complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      String string0 = complex0.toString();
      double double0 = complex0.getReal();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex0.I.acos();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex0.subtract(complex1);
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex0.NaN.atan();
      double double0 = complex0.abs();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex2.ZERO.add(complex0);
      Complex complex7 = complex6.I.cos();
      Complex complex8 = complex3.divide(complex0);
      Complex complex9 = complex3.exp();
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex10.ZERO.sinh();
      int int0 = complex11.ONE.hashCode();
      try { 
        complex2.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-4662.0), 1276.13474796451);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.INF.sin();
      Complex complex4 = complex0.conjugate();
      try { 
        complex3.nthRoot((-2024));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,024
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.I.multiply((-843.269460223));
      Complex complex4 = complex0.I.sinh();
      Complex complex5 = complex2.INF.exp();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex3.ONE.sinh();
      Complex complex7 = complex6.atan();
      try { 
        complex2.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(507.654383011, (-566.576301761));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.INF.pow(complex4);
      Complex complex7 = complex5.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.ONE.createComplex((-1457.27092691), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex0.INF.log();
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex0.cos();
      boolean boolean0 = complex4.isInfinite();
      double double0 = complex4.getImaginary();
      Complex complex7 = complex2.multiply(0.7853981633974483);
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex0.cos();
      Complex complex10 = complex2.add(complex5);
      Complex complex11 = complex10.atan();
      Object object0 = complex4.readResolve();
      double double1 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(3202.512083754, (-2.6033824355191673E-8));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex0.createComplex(0.0952233225107193, 0.0952233225107193);
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex4.asin();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex6.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.I.sinh();
      int int0 = complex4.ZERO.hashCode();
      Object object0 = complex4.INF.readResolve();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex5 = complex3.cos();
      int int1 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply(0.0);
      double double0 = complex0.ONE.abs();
      Complex complex2 = complex0.atan();
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex2.NaN.exp();
      Complex complex5 = complex4.ZERO.multiply(complex1);
      Complex complex6 = complex4.NaN.cos();
      Complex complex7 = complex4.INF.tanh();
      Complex complex8 = complex2.INF.negate();
      Complex complex9 = complex8.I.sin();
      Complex complex10 = complex8.I.tan();
      Complex complex11 = complex4.I.createComplex((-695.061998477546), (-695.061998477546));
      double double0 = complex11.getArgument();
      Complex complex12 = complex0.exp();
      ComplexField complexField0 = complex4.getField();
      boolean boolean0 = complex1.isInfinite();
      Complex complex13 = complex5.acos();
      boolean boolean1 = complex13.isInfinite();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.pow(complex1);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(253.780113748, (-4694.376968217));
      double double0 = complex0.ONE.getArgument();
      double double1 = complex0.INF.abs();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.NaN.pow(complex2);
      List<Complex> list0 = complex1.INF.nthRoot(1);
      Complex complex4 = complex0.add(complex1);
      double double2 = complex4.INF.abs();
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex3.ZERO.cos();
      Object object0 = complex7.NaN.readResolve();
      Complex complex8 = complex5.NaN.pow(complex3);
      double double3 = complex4.getReal();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex4.pow(complex0);
      Complex complex11 = complex6.multiply(complex3);
      double double4 = complex5.abs();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.ONE.add(complex0);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex2.NaN.sqrt();
      String string0 = complex4.I.toString();
      Complex complex5 = complex1.ONE.sin();
      Complex complex6 = null;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex1.ONE.sin();
      Complex complex6 = complex2.sinh();
      double double0 = complex6.getImaginary();
      String string0 = complex1.toString();
      boolean boolean0 = complex5.isInfinite();
      Object object0 = complex3.readResolve();
      Complex complex7 = complex6.tan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.ONE.cosh();
      Object object0 = complex2.INF.readResolve();
      Complex complex3 = complex0.sqrt1z();
      double double0 = complex2.ONE.getArgument();
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex3.I.atan();
      Complex complex6 = complex2.createComplex(0.0, 0.0);
      boolean boolean0 = complex3.isInfinite();
      boolean boolean1 = complex2.isNaN();
      Complex complex7 = complex0.log();
      int int0 = complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.multiply(Double.NaN);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.I.conjugate();
      String string0 = complex1.toString();
      Complex complex6 = complex4.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = complex1.I.acos();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.I.tan();
      Complex complex7 = complex5.ZERO.cosh();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.I.pow(complex3);
      Complex complex10 = complex0.ONE.asin();
      Complex complex11 = complex5.sinh();
      Complex complex12 = complex5.ONE.add(complex10);
      Complex complex13 = complex11.INF.cosh();
      Complex complex14 = complex11.multiply(0.0);
      ComplexField complexField0 = complex2.getField();
      double double0 = complex3.getImaginary();
      Complex complex15 = complex1.I.sin();
      Complex complex16 = complex15.tanh();
      Complex complex17 = complex4.add(complex5);
      Complex complex18 = complex17.exp();
      Complex complex19 = complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex3.ZERO.createComplex(0.0, 0.0);
      Complex complex5 = complex0.ONE.add(complex1);
      double double0 = complex0.abs();
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.negate();
      double double0 = complex0.I.getArgument();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.INF.multiply(complex2);
      Complex complex4 = complex0.cosh();
      String string0 = complex4.I.toString();
      boolean boolean0 = complex4.isInfinite();
      Complex complex5 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.multiply(Double.NaN);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.conjugate();
      String string0 = complex0.toString();
      Complex complex5 = complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex4.ZERO.tan();
      Object object0 = complex3.readResolve();
      Complex complex6 = complex2.exp();
      double double0 = complex2.abs();
      Complex complex7 = complex2.multiply((-1658.9818));
      Complex complex8 = complex7.NaN.sinh();
      double double1 = complex1.abs();
      double double2 = complex3.getReal();
      Complex complex9 = complex2.multiply(complex6);
      Complex complex10 = complex4.createComplex(Double.NaN, 1.0);
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.I.multiply((-1.0E-6));
      double double0 = complex0.abs();
      Complex complex2 = complex0.createComplex(7.0, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply((-1994.355619408));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.NaN;
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex0.ZERO.multiply(complex2);
      Complex complex4 = complex3.I.tanh();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex2.pow(complex0);
      int int0 = complex0.hashCode();
      Complex complex7 = complex2.asin();
      double double0 = complex4.getReal();
      double double1 = complex4.getArgument();
      Complex complex8 = complex7.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ONE.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex0.multiply(complex1);
      int int0 = complex1.hashCode();
      Complex complex4 = complex1.add(complex0);
      Object object0 = complex3.readResolve();
      Complex complex5 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.divide(complex1);
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex0.negate();
      double double0 = complex3.abs();
      Complex complex4 = complex1.negate();
      int int0 = complex4.hashCode();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex2.subtract(complex5);
      Object object0 = complex5.readResolve();
      boolean boolean0 = complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.tan();
      Object object0 = complex0.ONE.readResolve();
      double double0 = complex0.getArgument();
      Object object1 = complex0.readResolve();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.multiply(2158.784409233);
      Complex complex2 = complex1.pow(complex0);
      String string0 = complex0.INF.toString();
      Complex complex3 = complex1.log();
      Complex complex4 = complex1.ZERO.tan();
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex3.INF.atan();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex7 = complex0.exp();
      ComplexField complexField1 = complex1.ONE.getField();
      Complex complex8 = complex7.ONE.add(complex6);
      Complex complex9 = complex2.exp();
      Complex complex10 = complex2.INF.log();
      ComplexField complexField2 = complex9.INF.getField();
      Complex complex11 = complex2.ONE.add(complex6);
      Complex complex12 = complex11.INF.add(complex6);
      Complex complex13 = complex0.NaN.cosh();
      Complex complex14 = complex7.INF.tan();
      int int0 = complex2.hashCode();
      Object object1 = complex8.INF.readResolve();
      Complex complex15 = complex0.subtract(complex2);
      Complex complex16 = complex1.subtract(complex15);
      Complex complex17 = complex8.I.subtract(complex6);
      Complex complex18 = complex8.createComplex(2158.784409233, (-1.0));
      Complex complex19 = complex18.NaN.divide(complex7);
      Complex complex20 = complex18.I.atan();
      Complex complex21 = complex18.NaN.asin();
      Complex complex22 = complex7.log();
      double double0 = complex15.getImaginary();
      Complex complex23 = complex15.tan();
      Complex complex24 = complex23.tanh();
      Complex complex25 = complex2.pow(complex17);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-7.800414592973399E-9), (-7.800414592973399E-9));
      Complex complex1 = complex0.ZERO.asin();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.I.pow(complex0);
      Complex complex4 = complex2.ONE.negate();
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex2.ONE.acos();
      Complex complex7 = complex2.multiply(complex1);
      String string0 = complex2.toString();
      Complex complex8 = complex1.multiply(complex0);
      String string1 = complex8.ZERO.toString();
      Complex complex9 = complex8.atan();
      ComplexField complexField0 = complex1.getField();
      Complex complex10 = complex0.createComplex((-7.800414592973399E-9), (-7.800414592973399E-9));
      double double1 = complex4.getReal();
      boolean boolean0 = complex7.isInfinite();
      Object object0 = complex10.readResolve();
      Complex complex11 = complex10.cos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.multiply(187.012491);
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex1.NaN.multiply(0.0);
      Complex complex3 = complex0.INF.acos();
      Complex complex4 = complex1.I.sqrt();
      double double0 = complex4.NaN.abs();
      Complex complex5 = complex0.ZERO.divide(complex2);
      Complex complex6 = complex1.atan();
      Complex complex7 = complex0.cos();
      int int1 = complex7.hashCode();
      Complex complex8 = complex3.add(complex7);
      Complex complex9 = complex1.log();
      Complex complex10 = complex9.tan();
      boolean boolean0 = complex6.equals(complex9);
      ComplexField complexField1 = complex2.getField();
      Complex complex11 = complex10.tanh();
      List<Complex> list0 = complex10.nthRoot(145);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.conjugate();
      boolean boolean0 = complex2.isInfinite();
      Complex complex3 = complex1.ZERO.multiply(Double.NaN);
      Complex complex4 = complex0.ZERO.exp();
      List<Complex> list0 = complex4.ZERO.nthRoot(135);
      List<Complex> list1 = complex2.nthRoot(135);
      Complex complex5 = complex2.conjugate();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex2.multiply((double) 135);
      Complex complex8 = complex2.INF.conjugate();
      Complex complex9 = complex8.NaN.sqrt1z();
      Complex complex10 = complex7.ZERO.acos();
      Complex complex11 = complex7.INF.createComplex(1.0, 0.0);
      double double1 = complex11.INF.getArgument();
      Complex complex12 = complex2.negate();
      Complex complex13 = complex12.ONE.log();
      Complex complex14 = complex12.subtract(complex5);
      Complex complex15 = complex14.INF.sinh();
      Complex complex16 = complex1.log();
      String string0 = complex3.toString();
      Complex complex17 = Complex.ZERO;
      Complex complex18 = complex10.divide(complex17);
      Complex complex19 = complex18.exp();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.I.divide(complex2);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex3.ONE.conjugate();
      Complex complex6 = complex0.NaN.divide(complex4);
      Complex complex7 = complex3.acos();
      Complex complex8 = complex7.ZERO.sinh();
      Complex complex9 = complex1.ZERO.sin();
      boolean boolean0 = complex0.equals(complex4);
      Complex complex10 = complex3.tan();
      Complex complex11 = complex1.subtract(complex3);
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex11.NaN.exp();
      Complex complex14 = complex1.sqrt1z();
      Complex complex15 = complex2.sqrt();
      Complex complex16 = complex4.sinh();
      int int0 = complex15.hashCode();
      Complex complex17 = complex4.cos();
      Complex complex18 = complex17.ONE.negate();
      Complex complex19 = complex17.NaN.exp();
      ComplexField complexField0 = complex19.ZERO.getField();
      Complex complex20 = complex1.atan();
      Complex complex21 = complex14.sinh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex2.ZERO.pow(complex0);
      double double0 = complex0.getArgument();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.log();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex6.multiply((-1.0));
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.ONE.sinh();
      Object object0 = complex2.NaN.readResolve();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex0.ONE.pow(complex3);
      Complex complex6 = complex5.ONE.add(complex4);
      Complex complex7 = complex0.sinh();
      double double0 = complex0.getArgument();
      Complex complex8 = complex7.subtract(complex0);
      double double1 = complex7.abs();
      boolean boolean0 = complex3.equals(object0);
      Complex complex9 = complex8.sqrt();
      boolean boolean1 = complex6.isInfinite();
      Complex complex10 = complex3.log();
  }
}
