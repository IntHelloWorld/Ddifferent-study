/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:14:11 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-2856.23), (-2856.23));
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.exp();
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex1.I.negate();
      double double0 = complex0.abs();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.NaN.add(complex2);
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex2.subtract(complex4);
      Complex complex7 = complex2.NaN.tanh();
      Complex complex8 = complex2.conjugate();
      String string0 = complex8.ZERO.toString();
      double double1 = complex2.abs();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex4.NaN.sin();
      ComplexField complexField1 = complex5.getField();
      ComplexField complexField2 = complex8.NaN.getField();
      String string1 = complex5.toString();
      Complex complex11 = complex8.tan();
      Complex complex12 = complex4.sqrt();
      try { 
        complex0.ONE.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.INF.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-2843.00543), (-2843.00543));
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex4.NaN.divide(complex3);
      String string0 = complex1.ONE.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex1.I.createComplex((-2843.00543), (-1.0));
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex3.ZERO.sin();
      List<Complex> list0 = complex0.ZERO.nthRoot(162);
      Object object0 = complex1.readResolve();
      Complex complex8 = complex5.ZERO.cosh();
      Complex complex9 = complex1.negate();
      Complex complex10 = complex3.I.asin();
      Complex complex11 = complex9.ONE.divide(complex6);
      Complex complex12 = complex6.ZERO.asin();
      Complex complex13 = complex9.tan();
      Complex complex14 = complex13.createComplex((-1.0), 0.0);
      int int0 = complex0.hashCode();
      Complex complex15 = complex6.sinh();
      ComplexField complexField1 = complex15.INF.getField();
      Complex complex16 = complex5.log();
      Complex complex17 = complex16.ZERO.pow(complex6);
      Complex complex18 = complex17.ONE.tanh();
      Complex complex19 = complex1.createComplex(162, (-1.0));
      boolean boolean1 = complex4.equals(complex15);
      double double0 = complex11.getImaginary();
      List<Complex> list1 = complex15.nthRoot(162);
      Complex complex20 = complex10.exp();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-591.49));
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.ONE.sqrt();
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.multiply(complex2);
      Complex complex8 = complex1.createComplex((-2435.801661451977), (-591.49));
      Complex complex9 = complex1.multiply(complex7);
      ComplexField complexField0 = complex6.I.getField();
      Complex complex10 = complex9.NaN.conjugate();
      String string0 = complex9.toString();
      ComplexField complexField1 = complex8.getField();
      Complex complex11 = complex8.divide(complex2);
      Complex complex12 = complex2.tan();
      Complex complex13 = complex3.pow(complex0);
      Complex complex14 = complex3.sinh();
      Complex complex15 = complex12.sin();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(1.2246467991473532E-16, 1.2246467991473532E-16);
      Complex complex1 = complex0.negate();
      Complex complex2 = new Complex(1.2246467991473532E-16, 1.2246467991473532E-16);
      ComplexField complexField0 = complex2.ZERO.getField();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex0.NaN.createComplex(Double.POSITIVE_INFINITY, 1.2246467991473532E-16);
      Complex complex4 = complex1.NaN.negate();
      Complex complex5 = complex0.ZERO.sqrt1z();
      Complex complex6 = complex0.ONE.add(complex2);
      Complex complex7 = complex6.negate();
      Complex complex8 = complex5.NaN.asin();
      Object object0 = complex1.readResolve();
      Complex complex9 = complex0.multiply(1.2246467991473532E-16);
      Complex complex10 = complex9.ZERO.sin();
      Complex complex11 = complex10.INF.log();
      double double0 = complex9.getArgument();
      Complex complex12 = complex1.createComplex(0.7853981633974483, 4673.4);
      Complex complex13 = complex12.NaN.pow(complex8);
      boolean boolean1 = complex5.isInfinite();
      String string0 = complex2.toString();
      boolean boolean2 = complex6.equals(complex0);
      Complex complex14 = complex5.cos();
      String string1 = complex6.toString();
      Complex complex15 = complex3.atan();
      Complex complex16 = complex6.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.I.exp();
      Complex complex4 = complex3.ONE.createComplex(0.0, 0.0);
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex1.asin();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.acos();
      List<Complex> list0 = complex3.NaN.nthRoot(265);
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex0.ZERO.sin();
      Complex complex6 = complex0.createComplex(551.9, 551.9);
      Complex complex7 = complex6.acos();
      Complex complex8 = complex7.I.sin();
      List<Complex> list1 = complex6.INF.nthRoot(4795);
      Object object0 = complex5.NaN.readResolve();
      Complex complex9 = complex5.sin();
      Complex complex10 = complex9.I.exp();
      Complex complex11 = complex7.negate();
      Complex complex12 = complex0.atan();
      double double0 = complex7.getImaginary();
      int int0 = complex2.hashCode();
      double double1 = complex9.getArgument();
      boolean boolean0 = complex9.equals(complex1);
      Complex complex13 = complex0.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.subtract(complex1);
      String string0 = complex0.INF.toString();
      Complex complex4 = complex2.conjugate();
      double double0 = complex0.getReal();
      double double1 = complex2.abs();
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex3.I.createComplex((-1131.539717541766), 0.0);
      List<Complex> list0 = complex3.nthRoot(17);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex2.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.INF.nthRoot(1);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.ZERO.sinh();
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex0.ZERO.multiply(Double.NaN);
      Complex complex7 = complex5.ZERO.exp();
      Complex complex8 = complex7.INF.atan();
      int int0 = complex8.NaN.hashCode();
      Complex complex9 = complex8.INF.sin();
      Complex complex10 = complex5.I.log();
      Complex complex11 = complex7.ONE.asin();
      double double0 = complex5.getArgument();
      double double1 = complex7.getArgument();
      Complex complex12 = complex0.pow(complex1);
      Complex complex13 = complex12.INF.sin();
      double double2 = complex4.getReal();
      Complex complex14 = complex4.acos();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex13.equals(object0);
      Complex complex15 = complex0.createComplex(2574.15276, 0.0);
      Complex complex16 = complex11.asin();
      boolean boolean1 = complex8.isInfinite();
      Complex complex17 = complex15.subtract(complex7);
      Complex complex18 = complex2.atan();
      Complex complex19 = complex9.tan();
      Complex complex20 = complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.INF.subtract(complex1);
      double double0 = complex0.getImaginary();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = complex2.multiply(complex3);
      Complex complex7 = complex6.ONE.log();
      Complex complex8 = complex3.log();
      String string0 = complex8.toString();
      Complex complex9 = complex2.ONE.acos();
      Complex complex10 = complex9.ONE.sinh();
      Complex complex11 = complex8.log();
      Complex complex12 = complex11.sqrt();
      Complex complex13 = complex12.sinh();
      Complex complex14 = complex6.acos();
      try { 
        complex10.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.createComplex(0.3333333134651184, 0.3333333134651184);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.INF.sqrt1z();
      Complex complex7 = complex5.log();
      Complex complex8 = complex7.tan();
      int int0 = complex1.hashCode();
      Complex complex9 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.5);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.multiply(1.5);
      Complex complex3 = complex2.NaN.add(complex1);
      Complex complex4 = new Complex(0.1666666505023083, 5380.31292857);
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = complex5.NaN.subtract(complex2);
      double double0 = complex4.I.getArgument();
      Complex complex7 = complex2.NaN.add(complex4);
      Complex complex8 = complex7.multiply(0.1666666505023083);
      Complex complex9 = complex8.NaN.sin();
      Complex complex10 = complex7.INF.conjugate();
      Complex complex11 = complex2.divide(complex1);
      double double1 = complex2.getImaginary();
      Complex complex12 = complex11.atan();
      Complex complex13 = complex0.tan();
      Complex complex14 = complex7.exp();
      Complex complex15 = complex14.I.createComplex(2.25, 0.1666666505023083);
      Complex complex16 = complex2.sinh();
      Complex complex17 = complex13.negate();
      Complex complex18 = complex6.atan();
      Complex complex19 = complex7.cosh();
      String string0 = complex2.toString();
      Complex complex20 = complex4.cosh();
      Complex complex21 = complex6.add(complex17);
      Complex complex22 = complex21.sqrt1z();
      Complex complex23 = complex0.divide(complex4);
      List<Complex> list0 = complex13.nthRoot(222);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-736.176777059663), 0.0);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.createComplex((-1643.323969913153), 57.2957763671875);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = complex4.ZERO.divide(complex0);
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(3546.0, 3546.0);
      Complex complex1 = complex0.NaN.conjugate();
      double double0 = complex0.I.abs();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.I.pow(complex2);
      Complex complex5 = complex3.ONE.tan();
      Complex complex6 = complex0.multiply(complex2);
      Complex complex7 = complex6.NaN.sqrt();
      String string0 = complex4.toString();
      double double1 = complex0.getImaginary();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex3.atan();
      ComplexField complexField0 = complex3.getField();
      Complex complex10 = complex3.add(complex2);
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(0.0);
      boolean boolean0 = complex1.isInfinite();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex0.ZERO.tanh();
      boolean boolean1 = complex1.equals(complexField0);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.sqrt();
      int int0 = complex0.hashCode();
      Complex complex5 = complex4.NaN.cosh();
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex6 = complex4.negate();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1878.6901));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.ONE.log();
      Complex complex7 = complex5.NaN.acos();
      String string0 = complex6.ZERO.toString();
      int int0 = complex4.NaN.hashCode();
      Complex complex8 = complex2.ZERO.divide(complex5);
      Complex complex9 = complex8.I.createComplex(0.0, (-0.16624882440418567));
      try { 
        complex3.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.NaN.sinh();
      double double0 = complex0.NaN.abs();
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex0.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex6 = complex5.NaN.exp();
      Complex complex7 = complex6.ONE.asin();
      Object object0 = complex7.ONE.readResolve();
      Complex complex8 = complex5.divide(complex0);
      Complex complex9 = complex5.atan();
      Complex complex10 = complex9.negate();
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex2.getField();
      Complex complex11 = complex8.divide(complex2);
      int int0 = complex8.hashCode();
      double double1 = complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ZERO.atan();
      int int0 = complex2.INF.hashCode();
      Complex complex3 = complex0.NaN.cosh();
      Complex complex4 = complex0.INF.negate();
      Complex complex5 = complex4.I.pow(complex0);
      Complex complex6 = complex1.ZERO.acos();
      int int1 = complex3.INF.hashCode();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex4.INF.exp();
      Complex complex9 = complex8.ONE.asin();
      Complex complex10 = complex7.subtract(complex3);
      Complex complex11 = complex10.ONE.tanh();
      ComplexField complexField1 = complex11.I.getField();
      Complex complex12 = complex0.tanh();
      Complex complex13 = complex3.cosh();
      Complex complex14 = complex13.INF.cosh();
      Complex complex15 = complex13.ONE.tanh();
      Complex complex16 = complex15.ONE.conjugate();
      Complex complex17 = complex7.ONE.divide(complex12);
      Complex complex18 = complex5.sinh();
      ComplexField complexField2 = complex7.getField();
      Complex complex19 = complex4.acos();
      Complex complex20 = complex1.pow(complex13);
      Complex complex21 = complex0.sqrt1z();
      Complex complex22 = complex18.cos();
      Complex complex23 = complex21.sinh();
      Complex complex24 = complex1.multiply(complex0);
      Complex complex25 = complex14.tanh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.subtract(complex1);
      int int0 = complex3.NaN.hashCode();
      Complex complex4 = complex0.INF.sqrt1z();
      Complex complex5 = complex4.ZERO.asin();
      int int1 = complex5.hashCode();
      String string0 = complex1.toString();
      Complex complex6 = complex0.ONE.sinh();
      Complex complex7 = complex2.I.sqrt();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex1.ZERO.createComplex(1.0, 0.3333333333332802);
      ComplexField complexField0 = complex9.getField();
      Complex complex11 = complex8.subtract(complex9);
      Complex complex12 = complex11.conjugate();
      int int2 = complex4.ONE.hashCode();
      Complex complex13 = complex0.ONE.negate();
      String string1 = complex9.toString();
      Complex complex14 = complex9.sqrt();
      Complex complex15 = complex2.divide(complex14);
      Complex complex16 = complex15.NaN.cosh();
      Complex complex17 = complex3.subtract(complex5);
      Complex complex18 = complex13.divide(complex14);
      int int3 = complex18.hashCode();
      double double0 = complex11.getReal();
      Complex complex19 = complex1.divide(complex2);
      Complex complex20 = complex18.acos();
      Complex complex21 = complex20.log();
      Complex complex22 = complex16.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 158.50079840252);
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex0.multiply(2149.353388788281);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex3.multiply(2149.353388788281);
      Complex complex6 = complex5.multiply(complex3);
      Complex complex7 = complex1.I.tanh();
      int int0 = complex7.NaN.hashCode();
      Complex complex8 = complex4.log();
      Complex complex9 = complex3.atan();
      Complex complex10 = complex8.multiply(complex3);
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(658.18889, 658.18889);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.ONE.log();
      ComplexField complexField1 = complex2.INF.getField();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex0.I.multiply(658.18889);
      Complex complex6 = complex0.INF.subtract(complex3);
      int int0 = complex0.I.hashCode();
      boolean boolean0 = complex0.equals(complexField0);
      String string0 = complex3.NaN.toString();
      boolean boolean1 = complex0.isInfinite();
      Complex complex7 = complex6.divide(complex4);
      Complex complex8 = complex7.ZERO.sinh();
      Complex complex9 = complex4.I.atan();
      try { 
        complex6.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sin();
      Object object0 = complex0.ZERO.readResolve();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.INF.sqrt();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.NaN.divide(complex4);
      Complex complex6 = complex3.sqrt1z();
      boolean boolean1 = complex0.isInfinite();
      Complex complex7 = complex1.ZERO.pow(complex0);
      Complex complex8 = complex1.asin();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.createComplex(1328.616693524, 1328.616693524);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.NaN.add(complex1);
      Complex complex4 = complex2.ONE.subtract(complex0);
      Complex complex5 = complex2.I.createComplex(0.0, 0.0);
      Complex complex6 = complex0.negate();
      Complex complex7 = complex5.ZERO.conjugate();
      double double0 = complex5.getImaginary();
      Complex complex8 = complex5.add(complex6);
      Complex complex9 = complex6.add(complex1);
      Complex complex10 = complex1.asin();
      Complex complex11 = complex7.divide(complex0);
      Complex complex12 = complex7.divide(complex10);
      Complex complex13 = complex1.tan();
      Complex complex14 = complex13.I.tan();
      Complex complex15 = complex9.cosh();
      Complex complex16 = complex0.asin();
      double double1 = complex13.getReal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex3.ONE.divide(complex2);
      Complex complex6 = complex2.I.createComplex(0.0, 0.0);
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex3.multiply(complex1);
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex5.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ZERO.cos();
      int int0 = complex1.ZERO.hashCode();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex0.INF.cos();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = complex1.createComplex(0.0, 715.9629186397766);
      Complex complex10 = complex9.ZERO.exp();
      Complex complex11 = complex0.asin();
      double double1 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex4.INF.subtract(complex2);
      Complex complex6 = complex3.I.conjugate();
      double double0 = complex0.getArgument();
      Complex complex7 = complex1.NaN.negate();
      Complex complex8 = complex0.multiply(complex2);
      List<Complex> list0 = complex2.nthRoot(7);
      Complex complex9 = complex1.I.add(complex5);
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex2.cos();
      Complex complex12 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.add(complex1);
      double double0 = complex0.NaN.getArgument();
      double double1 = complex0.getArgument();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex2.INF.acos();
      Complex complex6 = complex0.INF.negate();
      Complex complex7 = complex1.log();
      double double2 = complex1.abs();
      Complex complex8 = complex0.add(complex2);
      Complex complex9 = complex8.asin();
      double double3 = complex3.abs();
      Complex complex10 = complex0.createComplex(0.0, 0.19999954120254515);
      double double4 = complex0.getArgument();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex11 = complex6.log();
      boolean boolean1 = complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.INF.divide(complex2);
      try { 
        complex2.INF.nthRoot((-559));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -559
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.ZERO.readResolve();
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex2.I.atan();
      Complex complex5 = complex2.NaN.conjugate();
      Complex complex6 = complex1.ONE.exp();
      Complex complex7 = complex3.INF.negate();
      Complex complex8 = complex0.subtract(complex2);
      Complex complex9 = complex8.I.tan();
      Complex complex10 = complex7.sqrt1z();
      Complex complex11 = complex3.INF.log();
      Complex complex12 = complex1.conjugate();
      double double0 = complex3.getImaginary();
      boolean boolean0 = complex10.isNaN();
      Complex complex13 = complex4.pow(complex7);
      double double1 = complex7.getReal();
      Complex complex14 = complex9.cos();
      boolean boolean1 = complex6.isNaN();
      Complex complex15 = complex13.createComplex(1.5707963267948966, (-2710.92788027));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-1430.0), (-1430.0));
      Complex complex1 = complex0.INF.multiply((-2212.65520648724));
      double double0 = complex0.ONE.abs();
      double double1 = complex0.getArgument();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex2.ZERO.sqrt();
      Complex complex5 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-2616.233911815589), (-2616.233911815589));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.add(complex0);
      double double0 = complex2.abs();
      double double1 = complex1.getImaginary();
      Complex complex3 = complex2.tan();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(3669.749149028674);
      Complex complex2 = complex0.ONE.multiply((-1553.435720898161));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.subtract(complex3);
      boolean boolean0 = complex3.isInfinite();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(1334.907, 1334.907);
      String string0 = complex0.I.toString();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.I.sqrt1z();
      Object object0 = complex0.readResolve();
      double double0 = complex0.getReal();
      String string1 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.NaN.subtract(complex0);
      String string0 = complex2.toString();
      Complex complex4 = complex0.asin();
      double double0 = complex4.ZERO.getArgument();
      Complex complex5 = complex4.atan();
      double double1 = complex2.getArgument();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex1.NaN.createComplex(0.0, 0.0);
      String string0 = complex1.I.toString();
      Complex complex4 = complex0.NaN.cos();
      List<Complex> list0 = complex0.nthRoot(300);
      boolean boolean0 = complex3.isInfinite();
      double double0 = complex1.abs();
      Complex complex5 = complex1.divide(complex3);
      Complex complex6 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(325.08659, 325.08659);
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.ONE.conjugate();
      double double1 = complex1.INF.getArgument();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.multiply(complex0);
      double double2 = complex2.abs();
      Complex complex4 = complex2.I.createComplex(2.0, 1.5251486608602287E141);
      Complex complex5 = complex0.log();
      boolean boolean0 = complex0.isInfinite();
      double double3 = complex2.ONE.abs();
      Complex complex6 = complex0.NaN.divide(complex3);
      Complex complex7 = complex4.I.sqrt();
      Complex complex8 = complex2.NaN.conjugate();
      Complex complex9 = complex2.exp();
      Complex complex10 = complex3.conjugate();
      Complex complex11 = complex10.ONE.acos();
      Object object0 = complex11.NaN.readResolve();
      Complex complex12 = complex5.conjugate();
      double double4 = complex4.abs();
      Complex complex13 = complex8.acos();
      Complex complex14 = complex12.divide(complex0);
      Complex complex15 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.NaN.log();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex5.getImaginary();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex4.sinh();
      boolean boolean1 = complex9.equals("h@yV nhXc7<U");
      int int0 = complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-2.6033824355191673E-8), (-2.6033824355191673E-8));
      Complex complex1 = new Complex(0.0, (-2.6033824355191673E-8));
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex3.ONE.tanh();
      String string0 = complex0.toString();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex4.ZERO.sqrt();
      Complex complex8 = complex4.ZERO.negate();
      Complex complex9 = complex2.cosh();
      Complex complex10 = complex0.negate();
      Complex complex11 = complex4.asin();
      boolean boolean0 = complex7.isInfinite();
      Complex complex12 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.atan();
      Object object0 = complex3.readResolve();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex2.ONE.subtract(complex4);
      double double0 = complex2.ZERO.abs();
      Complex complex6 = complex2.add(complex0);
      int int0 = complex6.hashCode();
      Complex complex7 = complex6.sin();
      double double1 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      String string0 = complex0.ONE.toString();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex0.ZERO.subtract(complex1);
      double double0 = complex0.getImaginary();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.multiply(complex3);
      double double0 = complex4.abs();
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex2.multiply((-1962.9));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.tan();
      String string0 = complex2.toString();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = complex2.sin();
      Complex complex7 = new Complex((-1.0), (-1.0));
      Complex complex8 = complex1.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-363.35187), (-363.35187));
      Complex complex1 = complex0.sqrt();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex4.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-363.35187), (-363.35187));
      Complex complex1 = new Complex((-363.35187), (-363.35187));
      Object object0 = complex1.readResolve();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex4.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex1.ONE.log();
      Complex complex5 = complex0.INF.exp();
      Complex complex6 = complex5.ONE.add(complex1);
      String string0 = complex6.I.toString();
      Complex complex7 = complex5.I.asin();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex3.NaN.subtract(complex7);
      Complex complex10 = complex6.createComplex((-424.0), 0.0);
      double double0 = complex10.ONE.abs();
      try { 
        complex5.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(1714.246042043814, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.createComplex(1714.246042043814, 1714.246042043814);
      Complex complex4 = complex3.ONE.exp();
      int int0 = (-612);
      try { 
        complex2.INF.nthRoot((-612));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -612
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      boolean boolean0 = complex1.isNaN();
      Complex complex2 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.INF.sqrt1z();
      int int0 = complex2.INF.hashCode();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex1.divide(complex5);
      Complex complex7 = complex6.INF.asin();
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex2.INF.createComplex(0.0, 3314.87081617862);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.add(complex0);
      double double0 = complex0.getImaginary();
      Complex complex4 = complex3.ONE.add(complex2);
      Complex complex5 = complex1.pow(complex3);
      Complex complex6 = complex5.cos();
      Object object0 = complex2.readResolve();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex2.asin();
      List<Complex> list0 = complex3.nthRoot(325);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.ONE.multiply(complex1);
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex5 = complex1.asin();
      double double0 = complex5.I.abs();
      Object object0 = complex5.ZERO.readResolve();
      Complex complex6 = complex4.ONE.log();
      Complex complex7 = complex6.INF.conjugate();
      Complex complex8 = complex7.I.subtract(complex2);
      Complex complex9 = complex0.atan();
      ComplexField complexField1 = complex9.INF.getField();
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex2.tan();
      Complex complex12 = complex0.divide(complex10);
      Complex complex13 = complex3.sqrt1z();
      double double1 = complex1.getReal();
      Complex complex14 = complex11.exp();
      int int0 = complex9.ZERO.hashCode();
      Complex complex15 = complex14.NaN.exp();
      Complex complex16 = complex2.cos();
      double double2 = complex12.getImaginary();
      double double3 = complex2.I.getArgument();
      String string0 = complex2.toString();
      double double4 = complex4.getArgument();
      int int1 = complex10.hashCode();
      Object object1 = new Object();
      boolean boolean1 = complex9.equals(object1);
      Complex complex17 = complex2.createComplex(Double.NaN, Double.NaN);
      boolean boolean2 = complex9.equals(complex10);
      Complex complex18 = complex14.acos();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.2222222089767456, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.ONE.sqrt();
      try { 
        complex0.ONE.nthRoot((-854));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -854
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex1.I.pow(complex0);
      int int1 = complex1.NaN.hashCode();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex0.log();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex4.negate();
      Complex complex10 = complex9.I.cosh();
      Object object1 = complex5.ONE.readResolve();
      Complex complex11 = complex5.INF.divide(complex0);
      Complex complex12 = complex4.cos();
      Complex complex13 = complex1.add(complex5);
      Complex complex14 = complex12.INF.multiply(complex8);
      Complex complex15 = complex0.INF.sin();
      Complex complex16 = complex15.INF.pow(complex12);
      Complex complex17 = complex0.asin();
      boolean boolean0 = complex5.isNaN();
      Complex complex18 = complex4.sqrt1z();
      Complex complex19 = complex2.asin();
      double double0 = complex17.getArgument();
      double double1 = complex8.getReal();
      Complex complex20 = Complex.ZERO;
      Complex complex21 = complex13.I.add(complex20);
      Complex complex22 = complex10.sinh();
      ComplexField complexField0 = complex13.getField();
      int int2 = (-1451);
      try { 
        complex7.nthRoot((-1451));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,451
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tanh();
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.ONE.multiply(0.0);
      String string1 = complex1.NaN.toString();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex1.I.conjugate();
      double double0 = complex5.INF.getArgument();
      Complex complex7 = complex4.ZERO.subtract(complex1);
      Complex complex8 = complex4.NaN.log();
      double double1 = complex4.abs();
      Complex complex9 = complex7.INF.conjugate();
      double double2 = complex8.abs();
      Complex complex10 = complex7.INF.acos();
      Complex complex11 = complex5.multiply(complex2);
      Complex complex12 = complex4.exp();
      int int0 = complex2.hashCode();
      Complex complex13 = complex0.ZERO.multiply(0.7853981633974483);
      Complex complex14 = complex12.ZERO.cos();
      Complex complex15 = complex0.ZERO.sqrt();
      Complex complex16 = complex0.atan();
      int int1 = complex16.ONE.hashCode();
      Complex complex17 = complex16.ZERO.pow(complex7);
      boolean boolean0 = complex5.equals(complex0);
      Complex complex18 = complex0.cosh();
      Complex complex19 = complex11.cosh();
      Complex complex20 = Complex.NaN;
      Complex complex21 = complex7.subtract(complex20);
      Complex complex22 = complex7.divide(complex21);
      Complex complex23 = complex9.tan();
      boolean boolean1 = complex18.isNaN();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.cosh();
      double double0 = complex1.abs();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.multiply(Double.NaN);
      Complex complex5 = complex3.ZERO.add(complex0);
      Complex complex6 = complex0.multiply(complex4);
      Complex complex7 = complex4.asin();
      Complex complex8 = complex3.sqrt();
      boolean boolean0 = complex0.equals(complex6);
      Complex complex9 = complex7.ONE.cos();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex10 = complex1.ONE.negate();
      Complex complex11 = complex0.atan();
      double double1 = complex11.NaN.getArgument();
      boolean boolean1 = complex7.equals(complex5);
      double double2 = complex8.getReal();
      Complex complex12 = complex6.exp();
      Complex complex13 = complex0.tan();
      Complex complex14 = complex12.negate();
      Complex complex15 = complex2.createComplex(Double.NaN, Double.NaN);
      Complex complex16 = complex3.log();
      ComplexField complexField1 = complex13.getField();
      Complex complex17 = complex5.multiply(complex2);
      Complex complex18 = complex15.createComplex(0.0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      List<Complex> list0 = complex1.I.nthRoot(3572);
      Complex complex2 = complex1.ONE.pow(complex0);
      String string0 = complex2.ZERO.toString();
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Complex complex4 = complex3.ZERO.cos();
      double double0 = complex0.getReal();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.ZERO.subtract(complex4);
      Complex complex7 = complex0.INF.negate();
      double double1 = complex2.getReal();
      Complex complex8 = complex5.ONE.acos();
      Complex complex9 = complex6.ONE.subtract(complex0);
      Complex complex10 = complex5.createComplex(0.0, 0.0);
      Complex complex11 = complex10.ZERO.atan();
      Complex complex12 = complex11.I.createComplex(Double.NaN, 0.0);
      Complex complex13 = complex10.ONE.multiply(complex6);
      double double2 = complex6.getArgument();
      int int0 = 0;
      double double3 = complex6.INF.abs();
      try { 
        complex8.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.ZERO.createComplex((-1372.46796), (-1372.46796));
      int int0 = complex0.INF.hashCode();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex3.ZERO.sqrt();
      Complex complex6 = complex1.ZERO.tan();
      Complex complex7 = complex5.ONE.sin();
      Complex complex8 = complex7.cos();
      Complex complex9 = complex7.INF.acos();
      Complex complex10 = complex5.ZERO.sqrt1z();
      Complex complex11 = complex3.ZERO.multiply((-1081.7280400763623));
      Complex complex12 = complex0.cos();
      Complex complex13 = complex12.ONE.divide(complex5);
      Complex complex14 = complex12.tanh();
      Complex complex15 = complex11.multiply(complex3);
      String string0 = complex15.INF.toString();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex16 = complex15.NaN.tanh();
      Complex complex17 = complex15.cos();
      Complex complex18 = complex17.NaN.sinh();
      Complex complex19 = complex2.cos();
      Complex complex20 = complex11.tan();
      Complex complex21 = complex2.asin();
      Complex complex22 = complex21.ZERO.multiply(complex4);
      Complex complex23 = complex0.conjugate();
      String string1 = complex11.toString();
      Complex complex24 = complex0.atan();
      boolean boolean0 = complex7.equals((Object) null);
      double double0 = complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(10.0, 0.0);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.NaN.cos();
      int int0 = complex4.NaN.hashCode();
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex4.NaN.add(complex0);
      String string0 = complex2.toString();
      Complex complex7 = complex0.ONE.conjugate();
      double double0 = complex3.getArgument();
      String string1 = complex0.ONE.toString();
      boolean boolean0 = complex2.isInfinite();
      ComplexField complexField0 = complex6.getField();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex2.NaN.add(complex1);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex1.NaN.sin();
      Object object1 = complex0.readResolve();
      Complex complex6 = complex4.NaN.cosh();
      Complex complex7 = complex4.I.createComplex(1.0, 1.0);
      Complex complex8 = complex1.add(complex4);
      Complex complex9 = complex8.I.subtract(complex0);
      Complex complex10 = complex8.INF.pow(complex2);
      ComplexField complexField0 = complex1.I.getField();
      double double0 = complex4.getArgument();
      Complex complex11 = complex4.multiply(962.983);
      Complex complex12 = complex5.exp();
      boolean boolean0 = complex4.equals(object1);
      Complex complex13 = complex0.exp();
      Complex complex14 = complex0.sin();
      Complex complex15 = complex14.ONE.cos();
      Complex complex16 = complex4.cosh();
      Complex complex17 = complex16.INF.tan();
      Complex complex18 = complex16.ONE.pow(complex13);
      boolean boolean1 = complex9.isInfinite();
      Complex complex19 = complex12.asin();
      double double1 = complex18.abs();
      Complex complex20 = complex13.conjugate();
  }
}
