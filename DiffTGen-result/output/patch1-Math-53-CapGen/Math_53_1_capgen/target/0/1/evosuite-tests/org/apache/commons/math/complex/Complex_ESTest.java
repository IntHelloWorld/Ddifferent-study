/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:10:45 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-1606.7364070526503), (-1606.7364070526503));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ONE.conjugate();
      boolean boolean0 = complex1.equals((Object) null);
      Complex complex5 = complex0.exp();
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.INF.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex0.I.multiply(complex2);
      Complex complex5 = complex4.NaN.tan();
      int int0 = complex5.I.hashCode();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex0.NaN.add(complex1);
      double double0 = complex7.I.abs();
      double double1 = complex7.INF.abs();
      double double2 = complex7.ZERO.abs();
      double double3 = complex0.getArgument();
      Complex complex8 = complex3.I.multiply(complex0);
      Complex complex9 = complex2.INF.negate();
      int int1 = complex0.hashCode();
      Complex complex10 = complex3.I.exp();
      Complex complex11 = complex0.sqrt();
      Complex complex12 = complex11.tan();
      Complex complex13 = complex3.negate();
      String string0 = complex10.INF.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex14 = complex7.add(complex0);
      Complex complex15 = complex10.acos();
      Complex complex16 = complex3.pow(complex13);
      Complex complex17 = complex7.cos();
      Complex complex18 = Complex.ZERO;
      Complex complex19 = complex11.multiply(complex18);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.multiply((-316.21));
      Complex complex4 = complex1.sinh();
      double double0 = complex2.getReal();
      Complex complex5 = complex3.I.pow(complex4);
      boolean boolean0 = complex1.equals(complex0);
      Complex complex6 = complex3.subtract(complex4);
      ComplexField complexField1 = complex4.getField();
      Complex complex7 = complex5.multiply(complex2);
      Complex complex8 = complex4.negate();
      Complex complex9 = complex0.createComplex(Double.NaN, 0.0);
      Complex complex10 = complex1.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.ZERO.multiply(1077.8);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.NaN.divide(complex0);
      Object object0 = complex2.ZERO.readResolve();
      Object object1 = complex2.I.readResolve();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.INF.createComplex(0.08713622391223907, 0.08713622391223907);
      double double1 = complex1.getArgument();
      ComplexField complexField1 = complex0.getField();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex4.createComplex((-610.099918627), (-610.099918627));
      Complex complex8 = complex7.pow(complex1);
      Complex complex9 = complex6.pow(complex7);
      Complex complex10 = complex9.multiply(0.08713622391223907);
      boolean boolean0 = complex6.isNaN();
      Complex complex11 = complex6.acos();
      Complex complex12 = complex4.cosh();
      double double2 = complex4.getImaginary();
      Complex complex13 = complex8.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(1.0, 0.0);
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.sin();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex2.ONE.multiply(complex5);
      double double0 = complex6.abs();
      Complex complex8 = complex0.subtract(complex6);
      Complex complex9 = complex8.divide(complex6);
      boolean boolean0 = complex6.isNaN();
      Complex complex10 = complex4.multiply(complex8);
      Complex complex11 = complex0.tanh();
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex12 = complex6.multiply(0.0);
      Complex complex13 = complex0.exp();
      Complex complex14 = complex12.ZERO.sin();
      Complex complex15 = complex5.conjugate();
      Complex complex16 = complex9.subtract(complex8);
      boolean boolean1 = complex12.isNaN();
      Complex complex17 = complex12.sin();
      Complex complex18 = complex11.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.041666666666666664, 0.041666666666666664);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.ONE.sin();
      String string0 = complex0.NaN.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.I.sin();
      Complex complex5 = complex4.log();
      Complex complex6 = complex0.cos();
      double double0 = complex0.abs();
      Complex complex7 = complex0.INF.divide(complex3);
      Complex complex8 = complex6.atan();
      Complex complex9 = complex8.I.multiply(complex4);
      ComplexField complexField0 = complex8.I.getField();
      Complex complex10 = complex4.tanh();
      Object object0 = complex9.readResolve();
      boolean boolean1 = complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.NaN.createComplex((-1684.688218), (-1684.688218));
      Complex complex4 = complex0.add(complex1);
      double double0 = complex0.getImaginary();
      Complex complex5 = complex2.subtract(complex0);
      Complex complex6 = complex5.atan();
      String string0 = complex2.toString();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex6.sqrt();
      Complex complex9 = complex4.atan();
      Complex complex10 = complex7.exp();
      Complex complex11 = complex5.conjugate();
      List<Complex> list0 = complex2.nthRoot(221);
      int int0 = complex5.hashCode();
      double double1 = complex6.abs();
      Complex complex12 = new Complex(Double.NaN, 221);
      Complex complex13 = complex9.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.createComplex(20.0, 20.0);
      Complex complex3 = complex0.subtract(complex1);
      double double0 = complex2.abs();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex3.ZERO.multiply(28.284271247461902);
      double double1 = complex3.getReal();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex0.ONE.asin();
      List<Complex> list0 = complex7.I.nthRoot(1159);
      double double2 = complex1.getArgument();
      double double3 = complex3.ZERO.abs();
      boolean boolean0 = complex3.equals(complex1);
      double double4 = complex3.getArgument();
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex9.NaN.exp();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex2.ZERO.add(complex11);
      Complex complex13 = complex10.acos();
      Complex complex14 = complex2.multiply(complex7);
      double double5 = complex6.getArgument();
      Complex complex15 = complex5.atan();
      Complex complex16 = complex6.cos();
      Complex complex17 = complex16.I.conjugate();
      Complex complex18 = complex3.tan();
      double double6 = complex16.getReal();
      boolean boolean1 = complex3.equals(complex10);
      Complex complex19 = complex0.multiply(complex17);
      Complex complex20 = complex2.createComplex(1304.92266522685, (-1.0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sqrt();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.log();
      String string0 = complex1.toString();
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex0.subtract(complex2);
      Complex complex7 = complex2.INF.negate();
      Complex complex8 = complex1.ONE.sin();
      Complex complex9 = complex7.NaN.asin();
      Complex complex10 = complex9.ZERO.atan();
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex11.ZERO.tan();
      double double0 = complex6.getArgument();
      String string1 = complex0.ONE.toString();
      ComplexField complexField0 = complex6.getField();
      Complex complex13 = complex2.subtract(complex7);
      Complex complex14 = complex1.add(complex3);
      Complex complex15 = complex2.NaN.pow(complex6);
      Complex complex16 = complex5.sin();
      ComplexField complexField1 = complex6.getField();
      int int0 = complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      double double0 = complex0.abs();
      double double1 = complex0.getImaginary();
      Complex complex2 = complex0.atan();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex3.createComplex(1.0, (-0.1666666567325592));
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex5.INF.multiply(complex6);
      Complex complex8 = complex7.ZERO.divide(complex1);
      boolean boolean0 = complex4.isInfinite();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex7.INF.log();
      String string0 = complex9.toString();
      String string1 = complex0.toString();
      Complex complex11 = complex2.subtract(complex4);
      Complex complex12 = complex9.multiply(complex1);
      Complex complex13 = complex3.multiply(complex6);
      Complex complex14 = complex4.acos();
      boolean boolean1 = complex6.isNaN();
      double double2 = complex2.getReal();
      Complex complex15 = complex13.sinh();
      Complex complex16 = complex5.sqrt();
      Complex complex17 = complex8.sin();
      Complex complex18 = complex5.conjugate();
      Complex complex19 = complex14.sqrt1z();
      Complex complex20 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1262.5), 0.0);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex3.ONE.exp();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex2.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.INF.sqrt1z();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex0.INF.sqrt();
      Complex complex7 = complex4.INF.cosh();
      Complex complex8 = complex4.acos();
      List<Complex> list0 = complex8.ZERO.nthRoot(1570);
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = complex3.divide(complex4);
      double double0 = complex0.INF.abs();
      Complex complex11 = complex1.INF.sinh();
      Complex complex12 = complex0.tan();
      Complex complex13 = complex12.sinh();
      Complex complex14 = complex13.INF.add(complex8);
      Complex complex15 = complex13.cos();
      Complex complex16 = complex15.ONE.createComplex(1570, Double.POSITIVE_INFINITY);
      Complex complex17 = complex15.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex18 = complex14.cos();
      int int0 = complex18.ONE.hashCode();
      Complex complex19 = complex1.sqrt1z();
      Complex complex20 = complex7.log();
      Complex complex21 = complex7.sin();
      Complex complex22 = complex15.multiply(0.0);
      Complex complex23 = complex15.multiply((-1451.965357007));
      Complex complex24 = complex2.pow(complex18);
      Complex complex25 = complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex4.NaN.sqrt();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex6 = complex3.INF.createComplex(0.0, 0.19999999999923582);
      Object object0 = complex3.ZERO.readResolve();
      Complex complex7 = complex3.ONE.multiply(complex1);
      Complex complex8 = complex3.INF.conjugate();
      Complex complex9 = complex1.sqrt1z();
      boolean boolean0 = complex2.equals(object0);
      int int0 = complex8.NaN.hashCode();
      Complex complex10 = complex0.multiply(complex1);
      double double0 = complex8.getArgument();
      ComplexField complexField1 = complex9.getField();
      Complex complex11 = complex0.createComplex((-0.7853981633974483), 0.0);
      Complex complex12 = complex0.multiply(complex10);
      Complex complex13 = complex12.atan();
      double double1 = complex11.getReal();
      Complex complex14 = complex13.divide(complex10);
      Complex complex15 = complex8.sqrt1z();
      Complex complex16 = new Complex(0.0, 0.0);
      boolean boolean1 = complex9.equals(complex16);
      Complex complex17 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.ZERO.add(complex1);
      Complex complex5 = complex1.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.I.sqrt1z();
      ComplexField complexField0 = complex5.ONE.getField();
      Complex complex7 = complex3.ONE.cosh();
      Object object0 = complex1.readResolve();
      Complex complex8 = complex0.multiply(complex1);
      Complex complex9 = complex8.INF.negate();
      Complex complex10 = complex9.multiply(complex5);
      Complex complex11 = complex1.pow(complex5);
      Complex complex12 = complex11.NaN.sinh();
      int int0 = complex6.INF.hashCode();
      Object object1 = complex11.readResolve();
      Complex complex13 = complex6.sqrt();
      Complex complex14 = complex13.I.exp();
      Complex complex15 = complex5.sqrt();
      List<Complex> list0 = complex4.nthRoot(2584);
      Complex complex16 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.INF.atan();
      double double0 = complex1.INF.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex1.asin();
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex((-2902.35969), (-2902.35969));
      Complex complex3 = complex0.NaN.multiply(complex2);
      Object object0 = complex3.I.readResolve();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex0.ONE.sinh();
      String string0 = complex5.INF.toString();
      Complex complex6 = complex4.ZERO.divide(complex0);
      Complex complex7 = complex0.multiply(1347.531);
      double double0 = complex7.abs();
      boolean boolean0 = complex4.isInfinite();
      Complex complex8 = complex3.cos();
      double double1 = complex0.NaN.abs();
      Complex complex9 = complex8.NaN.acos();
      Complex complex10 = complex9.I.tanh();
      Complex complex11 = complex9.NaN.asin();
      Complex complex12 = complex0.sqrt();
      Complex complex13 = complex12.INF.log();
      Complex complex14 = complex2.cosh();
      Complex complex15 = complex14.ONE.sinh();
      Complex complex16 = complex4.negate();
      Complex complex17 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.0);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex0.ZERO.add(complex2);
      Complex complex5 = complex4.multiply(complex2);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex0.cos();
      double double0 = complex7.getArgument();
      Complex complex8 = complex6.acos();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getReal();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex1.I.asin();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.I.add(complex1);
      Complex complex7 = complex6.INF.log();
      Complex complex8 = complex7.sinh();
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.ONE.tanh();
      Complex complex11 = complex9.I.atan();
      Complex complex12 = complex7.pow(complex9);
      Complex complex13 = complex5.sqrt();
      Complex complex14 = complex13.ZERO.conjugate();
      Complex complex15 = complex5.NaN.tanh();
      Complex complex16 = complex6.ONE.negate();
      Complex complex17 = complex2.exp();
      Complex complex18 = complex14.INF.multiply(Double.NaN);
      Object object0 = complex14.NaN.readResolve();
      double double1 = complex13.getReal();
      Object object1 = complex14.I.readResolve();
      try { 
        complex2.ZERO.nthRoot((-1298));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,298
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.log();
      double double0 = complex3.NaN.abs();
      Complex complex4 = complex3.multiply(Double.NaN);
      Complex complex5 = complex2.I.createComplex(0.0, 0.0);
      boolean boolean0 = complex3.equals("s^DJHn^qc\"EqIWFN ");
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex1.multiply(complex0);
      List<Complex> list0 = complex7.nthRoot(1);
      Complex complex8 = complex6.INF.cosh();
      Complex complex9 = complex1.createComplex(0.0, 0.008333333333329196);
      Complex complex10 = complex9.NaN.sinh();
      Complex complex11 = complex6.conjugate();
      Complex complex12 = complex3.acos();
      Complex complex13 = complex0.atan();
      Complex complex14 = complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(3468.79132492231, 3468.79132492231);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex1.ONE.acos();
      Complex complex5 = complex3.ZERO.negate();
      List<Complex> list0 = complex0.ZERO.nthRoot(216);
      int int0 = complex0.hashCode();
      double double0 = complex0.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex0.multiply(complex6);
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(0.7937005259840998, 0.7937005259840998);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.sinh();
      String string0 = complex1.NaN.toString();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex0.INF.sqrt1z();
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex0.acos();
      double double0 = complex0.abs();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex1.tan();
      double double1 = complex6.abs();
      Complex complex9 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.acos();
      double double0 = complex1.ZERO.abs();
      Complex complex3 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-335.0098), (-335.0098));
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(1234.08100856, 1234.08100856);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.conjugate();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex4.ZERO.pow(complex3);
      Complex complex6 = complex3.ZERO.divide(complex0);
      List<Complex> list0 = complex6.I.nthRoot(395);
      Complex complex7 = complex4.I.multiply(0.0);
      Complex complex8 = complex3.I.sin();
      double double0 = complex8.I.getArgument();
      Complex complex9 = complex0.subtract(complex2);
      Complex complex10 = complex2.ZERO.divide(complex0);
      Complex complex11 = complex9.ONE.cosh();
      Complex complex12 = complex2.ONE.multiply(531.74);
      Complex complex13 = complex12.INF.multiply(complex2);
      double double1 = complex9.abs();
      double double2 = complex0.getImaginary();
      Complex complex14 = complex2.cos();
      Complex complex15 = complex14.cosh();
      Complex complex16 = complex15.add(complex9);
      Complex complex17 = complex3.sinh();
      Complex complex18 = complex14.createComplex(1234.08100856, Double.NaN);
      Complex complex19 = complex16.INF.pow(complex17);
      int int0 = complex3.hashCode();
      Complex complex20 = complex10.sinh();
      Complex complex21 = complex4.sqrt();
      Complex complex22 = complex16.atan();
      Complex complex23 = complex13.sinh();
      String string0 = complex7.toString();
      Complex complex24 = complex16.conjugate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.I.log();
      double double0 = complex0.ZERO.abs();
      Complex complex3 = complex2.I.multiply(894.7882);
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex3.INF.createComplex(0.0, 6937.582577773408);
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.multiply((-1236.0));
      Complex complex7 = complex6.I.multiply(complex2);
      double double1 = complex0.ZERO.getArgument();
      Complex complex8 = complex6.ZERO.multiply(complex2);
      Complex complex9 = complex8.ZERO.sinh();
      Complex complex10 = complex6.createComplex((-1236.0), 0.4084761543836649);
      Complex complex11 = complex2.createComplex((-1236.0), (-1236.0));
      Complex complex12 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.createComplex((-343.6), (-343.6));
      List<Complex> list0 = complex0.nthRoot(1213);
      List<Complex> list1 = complex1.nthRoot(1213);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.NaN.sin();
      String string0 = complex4.ONE.toString();
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = complex2.log();
      Complex complex7 = complex2.INF.createComplex(1213, 1326.42026956345);
      Complex complex8 = complex2.exp();
      Complex complex9 = complex8.INF.cos();
      double double0 = complex6.getArgument();
      Complex complex10 = complex6.negate();
      Complex complex11 = complex7.tanh();
      Complex complex12 = complex5.sin();
      Complex complex13 = complex6.atan();
      Complex complex14 = complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(2783.412203180136, 2228.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.exp();
      double double0 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.INF.hashCode();
      Complex complex1 = Complex.I;
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex1.log();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex6.ZERO.multiply(complex1);
      Complex complex8 = complex0.pow(complex5);
      Complex complex9 = complex8.tan();
      Complex complex10 = complex9.divide(complex0);
      Complex complex11 = complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      ComplexField complexField0 = complex0.getField();
      String string0 = complex0.I.toString();
      double double0 = complex0.abs();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex3.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex6 = complex4.sin();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex0.asin();
      double double1 = complex4.getReal();
      boolean boolean0 = complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 8.0E298;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.INF.createComplex(8.0E298, 3717.5143716086);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex6.I.multiply(complex5);
      double double1 = complex0.getReal();
      Complex complex8 = new Complex(0.0, 0.0);
      Complex complex9 = complex0.divide(complex8);
      Complex complex10 = complex9.cos();
      int int0 = 0;
      Complex complex11 = complex0.ZERO.acos();
      try { 
        complex9.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex1.getArgument();
      boolean boolean1 = complex1.equals(complex0);
      Complex complex2 = complex0.sin();
      String string0 = complex2.NaN.toString();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex3 = complex1.ZERO.createComplex(294.85369, 0.0);
      Complex complex4 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.conjugate();
      boolean boolean2 = complex1.isNaN();
      ComplexField complexField1 = complex5.getField();
      Object object0 = complex1.readResolve();
      boolean boolean3 = complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.NaN.log();
      List<Complex> list0 = complex0.NaN.nthRoot(835);
      Complex complex3 = complex0.add(complex1);
      double double0 = complex0.NaN.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.INF.multiply(complex2);
      Complex complex5 = complex4.ONE.sin();
      boolean boolean0 = complex2.isInfinite();
      Complex complex6 = complex1.pow(complex2);
      Complex complex7 = complex6.NaN.sinh();
      Complex complex8 = complex7.ZERO.tan();
      Complex complex9 = complex0.pow(complex6);
      Complex complex10 = complex9.INF.tan();
      Complex complex11 = complex9.ZERO.conjugate();
      Complex complex12 = complex1.sqrt1z();
      Object object0 = complex12.ONE.readResolve();
      Complex complex13 = complex12.divide(complex0);
      Complex complex14 = complex1.atan();
      Complex complex15 = complex13.conjugate();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1385.8), (-1385.8));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.I.subtract(complex1);
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-326.93842), (-326.93842));
      double double0 = complex1.abs();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.ONE.multiply((-326.93842));
      Complex complex5 = complex4.ONE.multiply(0.11113807559013367);
      Complex complex6 = complex5.ONE.asin();
      Complex complex7 = complex6.INF.sqrt1z();
      Complex complex8 = complex0.ZERO.exp();
      Complex complex9 = complex4.log();
      Complex complex10 = complex4.NaN.asin();
      Complex complex11 = complex9.INF.tan();
      Complex complex12 = complex9.ONE.add(complex3);
      Complex complex13 = complex0.conjugate();
      Complex complex14 = complex0.tanh();
      Complex complex15 = complex11.multiply(0.11113807559013367);
      Complex complex16 = complex15.log();
      Complex complex17 = complex16.add(complex12);
      double double1 = complex10.getArgument();
      Complex complex18 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.INF.log();
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex0.ONE.add(complex3);
      double double1 = complex0.getImaginary();
      Complex complex5 = complex3.acos();
      double double2 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.sinh();
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = complex2.subtract(complex3);
      Complex complex6 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1.9841269659586505E-4), (-1.9841269659586505E-4));
      Complex complex2 = complex1.ONE.sqrt();
      int int0 = complex0.I.hashCode();
      Complex complex3 = complex0.ONE.pow(complex1);
      int int1 = complex3.NaN.hashCode();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex0.add(complex4);
      double double0 = complex4.abs();
      boolean boolean0 = complex1.isNaN();
      boolean boolean1 = complex4.isInfinite();
      Complex complex7 = complex3.acos();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = Complex.I;
      Complex complex10 = complex6.subtract(complex9);
      Complex complex11 = complex5.asin();
      Complex complex12 = complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.I.createComplex(1602.0, 1318.4);
      Object object0 = complex2.NaN.readResolve();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = new Complex(2593.7416, 2593.7416);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.NaN.multiply(complex1);
      boolean boolean0 = complex0.equals("");
      Complex complex4 = complex0.sin();
      String string0 = complex0.toString();
      double double0 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-2078.7), (-2078.7));
      Complex complex1 = complex0.createComplex(0.0, (-2078.7));
      double double0 = complex1.abs();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.ZERO.tan();
      double double1 = complex4.getArgument();
      double double2 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-647.0), (-647.0));
      Complex complex2 = complex0.multiply(complex1);
      Object object0 = complex2.readResolve();
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex1.NaN.pow(complex4);
      Complex complex7 = complex3.tan();
      String string0 = complex3.I.toString();
      boolean boolean0 = complex1.equals(complex3);
      double double0 = complex0.getArgument();
      Object object1 = complex1.readResolve();
      int int0 = complex3.hashCode();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex2.ONE.multiply((-896.9129439871));
      Complex complex4 = complex0.createComplex(2.0, 2468.16201712);
      boolean boolean0 = complex0.equals(complex4);
      Complex complex5 = complex4.add(complex0);
      String string0 = complex5.toString();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.multiply(2468.16201712);
      Object object1 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sin();
      double double0 = complex0.INF.getArgument();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.INF.sin();
      Complex complex4 = new Complex(0.7853981633974483, 0.7853981633974483);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex0.pow(complex4);
      Complex complex7 = complex2.add(complex1);
      Complex complex8 = complex7.acos();
      double double1 = complex2.getArgument();
      ComplexField complexField0 = complex5.getField();
      Complex complex9 = complex2.sin();
      boolean boolean0 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.ZERO.sqrt();
      int int0 = complex0.I.hashCode();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex0.NaN.tanh();
      Object object0 = complex0.readResolve();
      int int1 = complex3.hashCode();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.NaN.cosh();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex0.conjugate();
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.asin();
      String string0 = complex0.INF.toString();
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex0.cos();
      Object object0 = complex4.readResolve();
      Object object1 = complex4.readResolve();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex8 = complex6.add(complex7);
      boolean boolean0 = complex0.isNaN();
      Complex complex9 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      String string0 = complex1.ONE.toString();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.I.createComplex(Double.NaN, Double.NaN);
      Complex complex4 = complex1.ONE.negate();
      Complex complex5 = complex0.I.multiply(Double.NaN);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex1.pow(complex7);
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex6.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tan();
      int int0 = complex1.ZERO.hashCode();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex1.sinh();
      String string0 = complex5.toString();
      Complex complex6 = complex2.tanh();
      double double1 = complex5.getArgument();
      double double2 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex2.acos();
      Complex complex6 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(2911.518567140427, 2911.518567140427);
      Complex complex1 = complex0.NaN.tan();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.tan();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.INF.createComplex((-2689.93), (-2689.93));
      Complex complex4 = complex1.INF.tanh();
      Complex complex5 = complex0.cos();
      double double0 = complex0.getArgument();
      Complex complex6 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.asin();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex1.NaN.log();
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.ZERO.createComplex(2120.100629844, 2120.100629844);
      Complex complex3 = complex1.INF.multiply(complex0);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.INF.exp();
      Complex complex6 = complex3.multiply(complex1);
      Complex complex7 = complex3.add(complex0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex1.conjugate();
      double double0 = complex2.getArgument();
      Complex complex5 = complex3.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.6299605249474366, 0.6299605249474366);
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.I.multiply((-225.619134611));
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex4.NaN.sinh();
      boolean boolean0 = complex0.isInfinite();
      try { 
        complex4.nthRoot((-1759));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,759
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex2.INF.conjugate();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex4 = complex0.I.pow(complex1);
      Complex complex5 = complex4.INF.subtract(complex2);
      double double0 = complex4.NaN.getArgument();
      double double1 = complex0.getImaginary();
      Complex complex6 = complex0.acos();
      Object object0 = complex6.ONE.readResolve();
      Complex complex7 = complex0.multiply(complex2);
      Complex complex8 = complex7.INF.sqrt1z();
      Complex complex9 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex1.I.conjugate();
      Complex complex5 = complex0.createComplex((-1698.37), (-1698.37));
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex6 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      double double0 = complex1.ZERO.getArgument();
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-2110.0064549837), 3053.3);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.ONE.tanh();
      Complex complex4 = complex1.divide(complex0);
      double double0 = complex1.getReal();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex3.createComplex((-345.934097275), (-2997.0));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      String string0 = complex1.NaN.toString();
      double double0 = complex0.abs();
      Complex complex3 = complex1.I.asin();
      Complex complex4 = null;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex2.cosh();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply(0.0);
      List<Complex> list0 = complex1.I.nthRoot(179);
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex0.ZERO.cos();
      Complex complex4 = complex3.ONE.pow(complex0);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.ZERO.pow(complex0);
      Complex complex4 = complex0.cosh();
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(1798.06079296, 1798.06079296);
      Complex complex1 = complex0.multiply(1097.0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.ONE.negate();
      int int1 = (-3150);
      Complex complex4 = complex0.NaN.sqrt1z();
      Complex complex5 = complex4.sqrt();
      try { 
        complex1.NaN.nthRoot((-3150));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,150
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(924.82443764043, 181.4061515);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex2.NaN.pow(complex1);
      Complex complex8 = complex7.NaN.exp();
      boolean boolean0 = complex2.isInfinite();
      double double0 = complex5.I.getArgument();
      Complex complex9 = complex2.pow(complex1);
      Complex complex10 = complex1.add(complex5);
      Complex complex11 = complex10.tan();
      Complex complex12 = complex2.exp();
      Complex complex13 = complex6.divide(complex4);
      try { 
        complex13.ONE.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex1.INF.pow(complex2);
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex1.INF.cos();
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex6 = complex2.I.sqrt1z();
      Complex complex7 = complex1.ZERO.sin();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex0.add(complex1);
      Complex complex10 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.ONE.sinh();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex4 = complex1.I.sqrt1z();
      Complex complex5 = complex1.ZERO.sin();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.cosh();
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      Object object0 = complex0.ONE.readResolve();
      Complex complex2 = complex0.exp();
      double double0 = complex1.abs();
      Complex complex3 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.NaN.multiply(0.0);
      Complex complex3 = complex1.ONE.sqrt1z();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex7.multiply(3561.48);
      double double0 = complex8.getReal();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex2.cosh();
      Complex complex11 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.NaN.sinh();
      int int0 = complex0.hashCode();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.sqrt1z();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ZERO.getArgument();
      int int0 = complex0.I.hashCode();
      double double1 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.NaN.cos();
      double double2 = complex1.ZERO.abs();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex2.conjugate();
      Object object0 = complex5.readResolve();
      double double3 = complex5.getArgument();
      double double4 = complex0.getArgument();
      Complex complex8 = complex0.INF.tanh();
      Complex complex9 = complex5.subtract(complex3);
      List<Complex> list0 = complex9.nthRoot(1141);
      Complex complex10 = complex3.subtract(complex6);
      Complex complex11 = complex3.atan();
      Complex complex12 = complex11.negate();
      Complex complex13 = complex4.acos();
      double double5 = complex10.abs();
      Complex complex14 = complex10.log();
      Complex complex15 = complex5.ONE.sqrt();
      List<Complex> list1 = complex10.nthRoot(Integer.MAX_VALUE);
      Complex complex16 = complex13.asin();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex3.atan();
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.I.tanh();
      Complex complex7 = complex0.createComplex((-1019.1853998), (-1019.1853998));
      Complex complex8 = complex7.INF.cos();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex6.ONE.multiply(complex9);
      Complex complex11 = complex7.negate();
      Complex complex12 = complex11.pow(complex8);
      Complex complex13 = complex6.cos();
      Complex complex14 = complex12.tan();
      Complex complex15 = complex14.NaN.log();
      Complex complex16 = complex9.multiply((-1019.1853998));
      Complex complex17 = complex13.atan();
      Complex complex18 = complex6.pow(complex11);
      Complex complex19 = complex16.sinh();
      Complex complex20 = complex19.sin();
      int int1 = complex20.NaN.hashCode();
      Complex complex21 = complex1.asin();
      Complex complex22 = complex17.sin();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.ONE.nthRoot(266);
      Object object0 = complex0.readResolve();
      Complex complex1 = ((Complex) object0).I.conjugate();
      Complex complex2 = complex1.NaN.cosh();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0, 0.0);
      double double0 = complex0.ZERO.abs();
      Complex complex2 = complex1.ONE.multiply((-1946.6791));
      Complex complex3 = complex1.INF.atan();
      int int0 = (-38);
      try { 
        complex3.I.nthRoot((-38));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -38
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.atan();
      List<Complex> list0 = complex0.NaN.nthRoot(75);
      Complex complex2 = complex0.I.multiply(8.8883961918288);
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex0.I.conjugate();
      double double0 = complex0.abs();
      Complex complex5 = complex3.ZERO.atan();
      Complex complex6 = complex5.pow(complex2);
      Complex complex7 = complex0.cosh();
      double double1 = complex2.abs();
      String string0 = complex3.toString();
      Complex complex8 = complex7.divide(complex2);
      Complex complex9 = complex8.ONE.multiply(0.0952233225107193);
      Complex complex10 = complex8.ZERO.acos();
      Complex complex11 = complex0.I.log();
      Complex complex12 = complex10.NaN.atan();
      Object object0 = complex12.readResolve();
      Complex complex13 = complex1.sqrt();
      Complex complex14 = complex13.sqrt1z();
      Complex complex15 = complex1.add(complex9);
      Complex complex16 = complex8.I.atan();
      Complex complex17 = complex13.subtract(complex15);
      Complex complex18 = complex17.INF.sqrt();
      Complex complex19 = Complex.ONE;
      Complex complex20 = complex2.log();
      Complex complex21 = complex7.sqrt1z();
      Complex complex22 = complex20.sinh();
      Complex complex23 = complex22.ZERO.multiply(complex3);
      Complex complex24 = complex22.tan();
      Complex complex25 = complex14.multiply(complex13);
      Complex complex26 = complex1.negate();
      Complex complex27 = complex23.multiply(complex15);
      Complex complex28 = complex19.negate();
  }
}
