/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 02:10:45 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex2.NaN.log();
      Complex complex6 = complex4.ONE.tan();
      double double0 = complex2.getReal();
      Complex complex7 = complex1.multiply(Double.NaN);
      Complex complex8 = complex2.multiply(Double.NaN);
      Complex complex9 = complex4.cos();
      Complex complex10 = complex1.sin();
      Complex complex11 = complex10.asin();
      Complex complex12 = complex10.ZERO.sqrt1z();
      Complex complex13 = complex1.I.multiply(complex4);
      Complex complex14 = complex12.NaN.negate();
      Complex complex15 = complex3.sinh();
      double double1 = complex15.getImaginary();
      Object object0 = complex1.readResolve();
      Complex complex16 = complex11.cos();
      Complex complex17 = complex4.subtract(complex1);
      double double2 = complex8.getReal();
      String string0 = complex11.toString();
      double double3 = complex11.abs();
      Complex complex18 = complex6.cos();
      Object object1 = complex18.INF.readResolve();
      Complex complex19 = complex2.createComplex(Double.NaN, (-1.0));
      boolean boolean0 = complex13.isNaN();
      double double4 = complex7.getArgument();
      Complex complex20 = complex13.exp();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(2758.509, 2758.509);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.ZERO.createComplex(2758.509, 0.0);
      Complex complex2 = complex0.createComplex(1.0, 2758.509);
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex0.INF.cosh();
      Complex complex6 = complex1.INF.cos();
      double double0 = complex4.getReal();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex5.exp();
      Complex complex10 = complex9.ZERO.negate();
      Complex complex11 = complex0.ONE.add(complex8);
      String string0 = complex3.toString();
      Complex complex12 = complex6.cosh();
      String string1 = complex1.toString();
      double double1 = complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.718281828459045);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.NaN.exp();
      List<Complex> list0 = complex2.ONE.nthRoot(341);
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex7.tan();
      int int0 = complex2.I.hashCode();
      boolean boolean0 = complex4.isInfinite();
      Object object0 = complex5.readResolve();
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex0.sin();
      Complex complex11 = complex7.acos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = complex0.atan();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.I.divide(complex3);
      Complex complex5 = complex2.I.tan();
      List<Complex> list0 = complex1.nthRoot(1951);
      Complex complex6 = complex2.negate();
      Complex complex7 = complex2.ZERO.add(complex1);
      Complex complex8 = complex2.divide(complex1);
      boolean boolean0 = complex2.isInfinite();
      Complex complex9 = complex1.tan();
      Object object1 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex2.sqrt1z();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex3.ONE.subtract(complex2);
      String string0 = complex0.toString();
      double double0 = complex0.abs();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex0.cos();
      ComplexField complexField1 = complex6.getField();
      double double1 = complex0.getReal();
      boolean boolean0 = complex0.isNaN();
      double double2 = complex4.abs();
      boolean boolean1 = complex6.isNaN();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.ONE.conjugate();
      double double0 = complex0.getArgument();
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex2.ZERO.createComplex(0.0, Double.POSITIVE_INFINITY);
      double double1 = complex0.getArgument();
      Complex complex6 = complex3.I.tan();
      Complex complex7 = complex4.divide(complex1);
      Complex complex8 = complex7.pow(complex3);
      Complex complex9 = complex2.sin();
      Complex complex10 = complex0.conjugate();
      boolean boolean0 = complex7.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-499.0512079734834));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex4.ZERO.sin();
      List<Complex> list0 = complex4.ONE.nthRoot(23);
      double double0 = complex0.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex3.NaN.exp();
      int int0 = complex6.INF.hashCode();
      Complex complex7 = complex3.sqrt1z();
      double double1 = complex3.getImaginary();
      Complex complex8 = complex1.createComplex(Double.POSITIVE_INFINITY, 0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-1039.2993107894304), (-1039.2993107894304));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.I.log();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex1.exp();
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex5.tanh();
      double double0 = complex3.abs();
      double double1 = complex5.getReal();
      Complex complex7 = complex3.tanh();
      String string0 = complex7.I.toString();
      Complex complex8 = complex3.log();
      Complex complex9 = complex3.createComplex(Double.NEGATIVE_INFINITY, 6.283185307179586);
      Complex complex10 = complex9.sin();
      Complex complex11 = complex9.I.negate();
      Complex complex12 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.log();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex2.I.multiply(complex1);
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex1.add(complex0);
      Object object1 = complex5.ONE.readResolve();
      Complex complex6 = complex5.ZERO.multiply(0.0);
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = complex6.I.tan();
      Complex complex9 = complex6.ZERO.divide(complex0);
      Complex complex10 = complex1.negate();
      Complex complex11 = complex5.ZERO.atan();
      Complex complex12 = complex11.ONE.exp();
      Complex complex13 = complex0.cosh();
      Complex complex14 = complex13.multiply(0.0);
      Complex complex15 = complex14.ONE.sin();
      Complex complex16 = complex1.multiply(0.0);
      Complex complex17 = complex4.cosh();
      Complex complex18 = complex1.sqrt1z();
      Complex complex19 = complex2.conjugate();
      Complex complex20 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex3.ZERO.asin();
      double double0 = complex3.I.abs();
      Complex complex5 = complex3.INF.tanh();
      Complex complex6 = complex2.ZERO.cosh();
      String string0 = complex3.toString();
      Complex complex7 = complex2.ZERO.sinh();
      Complex complex8 = complex2.divide(complex0);
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex9.NaN.sqrt1z();
      int int0 = complex10.I.hashCode();
      Complex complex11 = complex0.sinh();
      ComplexField complexField0 = complex11.getField();
      double double1 = complex0.abs();
      Complex complex12 = complex9.cos();
      Complex complex13 = complex0.cosh();
      ComplexField complexField1 = complex1.getField();
      int int1 = complex0.I.hashCode();
      Complex complex14 = complex11.sqrt1z();
      int int2 = complex1.hashCode();
      boolean boolean0 = complex9.isInfinite();
      Complex complex15 = complex13.conjugate();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.createComplex(2.85040095144011776E17, (-4376.0));
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.NaN.pow(complex0);
      Complex complex6 = complex1.log();
      int int1 = complex4.hashCode();
      Complex complex7 = complex1.divide(complex4);
      Complex complex8 = complex7.I.createComplex(2.85040095144011776E17, 759.8417045543849);
      Complex complex9 = complex8.NaN.cosh();
      Complex complex10 = complex7.INF.createComplex((-4376.0), (-4376.0));
      Complex complex11 = complex1.sqrt();
      int int2 = complex4.hashCode();
      Complex complex12 = complex1.multiply(3294.046741743);
      Complex complex13 = complex7.ZERO.subtract(complex4);
      Complex complex14 = complex13.multiply(complex5);
      List<Complex> list0 = complex10.nthRoot(1);
      Complex complex15 = complex13.tanh();
      boolean boolean0 = complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(380.1896596597211, 380.1896596597211);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply((-361.5));
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex2.exp();
      Complex complex6 = complex1.NaN.createComplex(0.0, (-988.8739981801336));
      Complex complex7 = complex5.NaN.conjugate();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex7.cos();
      Complex complex10 = complex3.multiply(complex6);
      Complex complex11 = complex7.tanh();
      Complex complex12 = complex0.sin();
      int int0 = complex1.hashCode();
      boolean boolean0 = complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.multiply(Double.NaN);
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex3 = complex2.negate();
      List<Complex> list1 = complex3.ONE.nthRoot(1);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex0.ZERO.cosh();
      ComplexField complexField1 = complex1.getField();
      List<Complex> list2 = complex2.nthRoot(1);
      Complex complex6 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, 3.814697265625E-6);
      Complex complex2 = complex0.pow(complex1);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.INF.cosh();
      double double0 = complex3.INF.getArgument();
      Complex complex4 = complex0.sinh();
      double double1 = complex4.abs();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.ZERO.exp();
      int int0 = complex5.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex3.acos();
      boolean boolean1 = complex3.isInfinite();
      Complex complex9 = complex3.negate();
      ComplexField complexField0 = complex9.getField();
      Complex complex10 = complex2.conjugate();
      Complex complex11 = complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.ZERO.getField();
      double double0 = complex0.getArgument();
      Complex complex1 = new Complex(Double.NaN, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      ComplexField complexField1 = complex2.NaN.getField();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.multiply(2813.972666525652);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.acos();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.asin();
      int int1 = complex2.INF.hashCode();
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.sqrt1z();
      List<Complex> list0 = complex3.I.nthRoot(7);
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex1.cos();
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex2.sinh();
      boolean boolean1 = complex6.equals(complex1);
      Object object1 = complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(3.814697265625E-6, 4059.1334762409);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.createComplex((-2238.06539329), (-409.1469716));
      Complex complex4 = complex2.NaN.multiply(4059.1334762409);
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex4.I.pow(complex0);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex3.NaN.asin();
      Complex complex9 = complex1.subtract(complex7);
      int int0 = complex2.I.hashCode();
      Complex complex10 = complex9.ZERO.add(complex0);
      double double0 = complex10.ONE.abs();
      ComplexField complexField0 = complex0.I.getField();
      try { 
        complex1.nthRoot((-2341));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,341
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.negate();
      Complex complex6 = complex4.ONE.negate();
      Complex complex7 = complex6.ZERO.sqrt();
      Complex complex8 = complex6.ZERO.log();
      Complex complex9 = complex6.cos();
      Complex complex10 = complex9.NaN.sinh();
      Complex complex11 = complex0.INF.multiply(complex4);
      ComplexField complexField0 = complex0.getField();
      Complex complex12 = complex0.sqrt();
      Object object0 = complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.ZERO.cos();
      try { 
        complex2.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(997.6360150053268, (-590.8761331));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex2.multiply(Double.NaN);
      Complex complex6 = complex4.INF.pow(complex3);
      double double0 = complex4.getImaginary();
      Object object0 = complex2.NaN.readResolve();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex3.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.multiply(Double.NaN);
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex3 = complex2.negate();
      List<Complex> list1 = complex3.ONE.nthRoot(1);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex0.ZERO.cosh();
      List<Complex> list2 = complex2.nthRoot(1);
      Complex complex6 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-1336.92508726), (-1336.92508726));
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex1.NaN.createComplex((-1351.66208), 4.503599627370496E15);
      List<Complex> list0 = complex1.ONE.nthRoot(1);
      Complex complex5 = complex1.INF.atan();
      Complex complex6 = complex5.ZERO.log();
      Object object0 = complex0.NaN.readResolve();
      Complex complex7 = complex0.NaN.sqrt();
      boolean boolean0 = complex0.isNaN();
      Object object1 = complex0.readResolve();
      Complex complex8 = complex0.asin();
      int int0 = complex8.hashCode();
      double double0 = complex1.abs();
      Complex complex9 = complex7.log();
      int int1 = complex0.hashCode();
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex9.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.createComplex((-0.33333333333333287), (-0.33333333333333287));
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = new Complex((-0.33333333333333287), (-0.33333333333333287));
      Complex complex5 = complex2.ZERO.subtract(complex4);
      Complex complex6 = complex0.ONE.log();
      Complex complex7 = complex6.NaN.conjugate();
      Object object0 = complex1.INF.readResolve();
      Complex complex8 = complex1.sqrt1z();
      double double0 = complex8.getArgument();
      Complex complex9 = complex4.NaN.add(complex0);
      double double1 = complex0.getArgument();
      Complex complex10 = complex2.pow(complex1);
      Complex complex11 = complex0.sinh();
      Complex complex12 = complex11.INF.divide(complex0);
      Complex complex13 = complex8.ONE.sqrt1z();
      Complex complex14 = complex8.pow(complex10);
      Complex complex15 = complex14.ONE.log();
      Complex complex16 = complex14.ONE.sinh();
      Complex complex17 = complex6.atan();
      Complex complex18 = complex10.acos();
      Complex complex19 = Complex.ONE;
      Complex complex20 = complex18.add(complex19);
      double double2 = complex6.getArgument();
      Complex complex21 = complex7.divide(complex3);
      Complex complex22 = complex19.cosh();
      int int0 = complex6.hashCode();
      double double3 = complex3.abs();
      Complex complex23 = complex4.conjugate();
      boolean boolean1 = complex10.isInfinite();
      Complex complex24 = complex2.pow(complex21);
      Complex complex25 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.INF.divide(complex2);
      Complex complex4 = complex0.multiply(complex2);
      double double0 = complex4.INF.getArgument();
      Complex complex5 = complex0.I.subtract(complex2);
      Complex complex6 = complex0.multiply(0.0);
      Complex complex7 = complex5.asin();
      Complex complex8 = complex7.NaN.sin();
      Complex complex9 = complex5.I.multiply(complex6);
      Complex complex10 = complex2.asin();
      Complex complex11 = complex6.ONE.negate();
      Complex complex12 = new Complex(0.0, (-1213.903677429739));
      Complex complex13 = complex12.I.add(complex11);
      Complex complex14 = complex11.ONE.multiply(complex3);
      Complex complex15 = complex6.multiply(complex12);
      Complex complex16 = complex5.multiply((-1213.903677429739));
      Complex complex17 = complex2.negate();
      Complex complex18 = complex13.conjugate();
      Complex complex19 = complex16.sqrt();
      String string0 = complex19.toString();
      Complex complex20 = complex11.cos();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(28.2623834, (-2794.993417593));
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.I.acos();
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.INF.divide(complex3);
      Complex complex5 = complex3.INF.tanh();
      double double1 = complex0.abs();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex0.cos();
      Object object0 = complex4.readResolve();
      String string0 = complex3.toString();
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex9.conjugate();
      int int1 = complex10.I.hashCode();
      Complex complex11 = complex7.acos();
      Complex complex12 = complex8.sqrt();
      Complex complex13 = complex12.ZERO.asin();
      Complex complex14 = complex11.pow(complex9);
      Complex complex15 = complex1.add(complex4);
      Complex complex16 = complex14.INF.cos();
      List<Complex> list0 = complex11.NaN.nthRoot(1955);
      Complex complex17 = complex4.add(complex11);
      Complex complex18 = complex14.sqrt1z();
      Complex complex19 = complex14.acos();
      Complex complex20 = complex2.cos();
      Complex complex21 = complex9.multiply(1.0);
      Complex complex22 = Complex.INF;
      Complex complex23 = complex11.multiply(complex22);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex1.ONE.asin();
      int int1 = complex3.ZERO.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex2.INF.sqrt1z();
      Complex complex5 = complex4.I.divide(complex0);
      double double0 = complex0.abs();
      Complex complex6 = complex0.conjugate();
      double double1 = complex2.getArgument();
      double double2 = complex4.getReal();
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.INF.pow(complex1);
      Complex complex4 = complex0.ONE.tanh();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex6.ZERO.atan();
      Complex complex9 = complex6.INF.subtract(complex5);
      Complex complex10 = complex6.I.negate();
      double double0 = complex5.getArgument();
      Complex complex11 = complex0.negate();
      double double1 = complex11.I.getArgument();
      Complex complex12 = complex11.add(complex9);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.I.sinh();
      int int0 = complex3.I.hashCode();
      Complex complex4 = complex2.ZERO.sinh();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.INF.divide(complex2);
      Complex complex7 = complex0.ONE.createComplex(747.1477, (-3033.121575296));
      Complex complex8 = complex1.cos();
      Complex complex9 = complex7.sinh();
      Complex complex10 = complex9.ZERO.multiply(0.0);
      Complex complex11 = complex5.INF.multiply(5101.0);
      boolean boolean0 = complex8.isNaN();
      double double0 = complex7.abs();
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = complex5.pow(complex1);
      Complex complex14 = complex12.NaN.conjugate();
      Complex complex15 = complex13.ZERO.multiply(378.4290600397);
      Complex complex16 = complex15.ONE.cosh();
      int int1 = complex7.hashCode();
      Complex complex17 = complex12.INF.divide(complex7);
      Complex complex18 = complex2.conjugate();
      ComplexField complexField0 = complex12.getField();
      Object object0 = complex17.readResolve();
      Complex complex19 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      double double0 = complex0.getReal();
      Complex complex2 = complex1.cosh();
      boolean boolean0 = complex0.equals("NzT_8|`d\"+zlV=#~D1");
      double double1 = complex1.getReal();
      Object object0 = complex2.readResolve();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      double double0 = complex0.NaN.abs();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.NaN.createComplex(318.73845, 7147.2112568674675);
      List<Complex> list0 = complex2.ONE.nthRoot(1230);
      Object object0 = complex1.readResolve();
      Complex complex6 = complex2.log();
      Complex complex7 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(1697.5894664513341, 1697.5894664513341);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex1.NaN.sin();
      double double0 = complex1.abs();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex6.I.cos();
      Object object0 = complex6.readResolve();
      Complex complex8 = complex4.negate();
      List<Complex> list1 = complex1.I.nthRoot(1510);
      Complex complex9 = complex6.I.exp();
      Complex complex10 = complex9.sin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex11 = complex4.add(complex6);
      Complex complex12 = complex3.subtract(complex10);
      Complex complex13 = complex8.cosh();
      Complex complex14 = complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-0.7853981633974483), (-0.7853981633974483));
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.ZERO.divide(complex0);
      Complex complex6 = complex4.INF.sinh();
      String string1 = complex3.toString();
      Complex complex7 = complex4.sin();
      String string2 = complex3.toString();
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(complex0);
      Complex complex2 = complex0.createComplex(1265.903211513688, 1265.903211513688);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-437.05130135), (-437.05130135));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.cosh();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.I.readResolve();
      double double0 = complex0.getReal();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex1.INF.acos();
      double double1 = complex0.getImaginary();
      double double2 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.NaN.log();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex3.createComplex(0.0, 0.0);
      Complex complex6 = complex3.subtract(complex4);
      Complex complex7 = complex0.add(complex6);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-1032.8906), (-1032.8906));
      Complex complex1 = complex0.ONE.cosh();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex4.exp();
      try { 
        complex4.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = (-2219.94);
      double double1 = (-3024.1048226);
      Complex complex1 = complex0.NaN.createComplex((-2219.94), (-3024.1048226));
      double double2 = complex1.NaN.getArgument();
      double double3 = complex0.abs();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.add(complex2);
      try { 
        complex3.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex3.INF.cosh();
      Complex complex6 = null;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex1.ONE.multiply(complex0);
      int int0 = complex1.ZERO.hashCode();
      Complex complex4 = complex0.ZERO.acos();
      int int1 = complex0.hashCode();
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex4.divide(complex5);
      Complex complex7 = complex6.I.pow(complex4);
      Complex complex8 = complex3.subtract(complex0);
      int int2 = complex8.INF.hashCode();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex7.sin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex2.ONE.multiply(0.14982303977012634);
      String string0 = complex2.ZERO.toString();
      String string1 = complex1.toString();
      double double0 = complex0.INF.abs();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.INF.atan();
      ComplexField complexField0 = complex4.ONE.getField();
      Object object0 = complex4.readResolve();
      Complex complex6 = complex4.asin();
      Complex complex7 = complex6.ZERO.sin();
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex8.I.acos();
      Complex complex10 = complex5.tanh();
      Complex complex11 = complex8.INF.divide(complex9);
      Complex complex12 = complex1.multiply(complex4);
      Complex complex13 = complex12.divide(complex1);
      Complex complex14 = complex0.INF.divide(complex3);
      Complex complex15 = complex4.log();
      Complex complex16 = complex13.acos();
      double double1 = complex9.getImaginary();
      double double2 = complex6.getImaginary();
      double double3 = complex13.ONE.getArgument();
      try { 
        complex6.nthRoot((-13));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -13
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex0.asin();
      List<Complex> list0 = complex6.NaN.nthRoot(9);
      Complex complex7 = complex6.ONE.atan();
      List<Complex> list1 = complex2.nthRoot(158);
      Complex complex8 = complex3.exp();
      Complex complex9 = complex8.ONE.exp();
      Complex complex10 = complex0.tanh();
      String string0 = complex3.toString();
      boolean boolean0 = complex3.isInfinite();
      Object object0 = complex7.ZERO.readResolve();
      Complex complex11 = complex2.sqrt1z();
      Complex complex12 = complex7.atan();
      Complex complex13 = complex3.log();
      Complex complex14 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      double double0 = complex1.ONE.getArgument();
      Complex complex4 = complex0.ONE.pow(complex1);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex5.ZERO.subtract(complex0);
      Complex complex7 = complex4.ONE.acos();
      Complex complex8 = complex7.I.sqrt1z();
      int int0 = complex8.NaN.hashCode();
      Complex complex9 = complex7.INF.cos();
      Complex complex10 = complex0.negate();
      Complex complex11 = complex10.I.sin();
      Complex complex12 = complex7.ZERO.pow(complex4);
      Complex complex13 = complex12.INF.cos();
      Object object0 = complex10.NaN.readResolve();
      Complex complex14 = complex8.exp();
      double double1 = complex9.getArgument();
      Complex complex15 = complex0.subtract(complex10);
      int int1 = complex4.hashCode();
      boolean boolean0 = complex10.isNaN();
      Complex complex16 = complex12.ZERO.conjugate();
      Complex complex17 = complex16.NaN.negate();
      Complex complex18 = complex4.conjugate();
      ComplexField complexField0 = complex0.getField();
      int int2 = complex0.hashCode();
      double double2 = complex14.getArgument();
      Complex complex19 = complex1.subtract(complex3);
      boolean boolean1 = complex12.isInfinite();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      double double0 = complex0.abs();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex2.NaN.add(complex0);
      double double1 = complex4.ONE.getArgument();
      Complex complex6 = complex0.INF.createComplex(0.0, 2806.0);
      Complex complex7 = complex6.subtract(complex1);
      Complex complex8 = complex6.add(complex3);
      Complex complex9 = complex4.INF.atan();
      Complex complex10 = complex7.tan();
      double double2 = complex1.abs();
      String string0 = complex2.toString();
      double double3 = complex7.ONE.getArgument();
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex7.createComplex(Double.POSITIVE_INFINITY, 2806.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.cos();
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex0.NaN.sqrt();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.NaN.atan();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex2.ONE.tanh();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex2.sin();
      int int0 = complex1.hashCode();
      Complex complex11 = complex3.tanh();
      Complex complex12 = complex8.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      List<Complex> list0 = complex1.ONE.nthRoot(1569);
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex1.ZERO.multiply(2802.6021895);
      Complex complex5 = complex2.asin();
      int int0 = complex0.hashCode();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.ONE.pow(complex2);
      Complex complex8 = complex0.NaN.sin();
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex9 = complex3.ZERO.asin();
      Object object1 = new Object();
      boolean boolean0 = complex2.equals(object1);
      String string0 = complex1.ONE.toString();
      boolean boolean1 = complex1.equals(complex3);
      double double0 = complex2.getArgument();
      Complex complex10 = complex5.multiply(complex1);
      double double1 = complex10.NaN.getArgument();
      Complex complex11 = complex10.acos();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(57.2957763671875, 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.I.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex2.INF.conjugate();
      Complex complex5 = complex2.log();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = new Complex(0.0, 0.0);
      Complex complex8 = complex3.multiply(complex7);
      Complex complex9 = complex8.sinh();
      String string0 = complex3.toString();
      Complex complex10 = new Complex(0.0, 57.2957763671875);
      Complex complex11 = complex2.I.divide(complex4);
      Complex complex12 = complex10.NaN.sqrt();
      Complex complex13 = complex2.subtract(complex10);
      Complex complex14 = complex4.tanh();
      Complex complex15 = complex1.INF.tanh();
      Complex complex16 = complex14.INF.cosh();
      Complex complex17 = complex14.ZERO.cos();
      List<Complex> list0 = complex14.ONE.nthRoot(1242);
      Complex complex18 = complex15.I.log();
      Complex complex19 = complex14.add(complex4);
      Complex complex20 = complex14.tanh();
      Complex complex21 = complex20.I.acos();
      Complex complex22 = complex15.conjugate();
      Complex complex23 = complex22.ONE.add(complex5);
      ComplexField complexField1 = complex20.getField();
      boolean boolean0 = complex15.isNaN();
      Complex complex24 = complex2.sin();
      ComplexField complexField2 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.ZERO.multiply(complex1);
      Complex complex4 = complex1.NaN.multiply(complex0);
      Complex complex5 = complex0.INF.divide(complex2);
      Complex complex6 = complex4.NaN.sqrt1z();
      Complex complex7 = complex3.ZERO.tan();
      Complex complex8 = complex5.I.exp();
      Complex complex9 = complex8.ZERO.acos();
      Complex complex10 = complex9.divide(complex4);
      Complex complex11 = complex10.I.multiply(0.0);
      Complex complex12 = complex3.ZERO.divide(complex4);
      Complex complex13 = complex5.ZERO.sqrt1z();
      Complex complex14 = complex0.atan();
      Complex complex15 = complex14.ONE.asin();
      Complex complex16 = complex14.acos();
      double double0 = complex1.getReal();
      Complex complex17 = complex5.cosh();
      Complex complex18 = complex13.sin();
      int int0 = complex17.ONE.hashCode();
      double double1 = complex2.getImaginary();
      Complex complex19 = complex3.pow(complex2);
      Complex complex20 = complex0.exp();
      Complex complex21 = complex12.pow(complex5);
      String string0 = complex21.NaN.toString();
      Complex complex22 = complex14.negate();
      Complex complex23 = complex22.NaN.tan();
      Complex complex24 = complex20.tan();
      Complex complex25 = complex8.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(2635.74, 2635.74);
      Complex complex1 = complex0.cosh();
      double double0 = complex1.ZERO.getArgument();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex5.NaN.sqrt();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex1.ZERO.subtract(complex7);
      Complex complex9 = complex8.NaN.log();
      Complex complex10 = complex0.I.add(complex7);
      Complex complex11 = complex7.ZERO.atan();
      String string0 = complex1.toString();
      Complex complex12 = complex7.conjugate();
      Complex complex13 = complex11.cos();
      boolean boolean0 = complex5.isNaN();
      Complex complex14 = complex13.atan();
      Complex complex15 = complex13.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.exp();
      double double0 = complex2.I.getArgument();
      int int0 = complex3.I.hashCode();
      Complex complex4 = complex0.ONE.sinh();
      Complex complex5 = complex1.NaN.conjugate();
      String string0 = complex1.toString();
      Complex complex6 = complex3.ZERO.atan();
      Complex complex7 = complex2.INF.acos();
      Complex complex8 = complex7.I.asin();
      Complex complex9 = complex7.sqrt1z();
      Complex complex10 = complex4.NaN.multiply(1.5707963267948966);
      Complex complex11 = complex2.add(complex3);
      Complex complex12 = complex11.ZERO.acos();
      Complex complex13 = complex0.divide(complex2);
      Complex complex14 = complex0.cos();
      Complex complex15 = complex14.I.divide(complex4);
      Complex complex16 = complex13.asin();
      Complex complex17 = complex1.sinh();
      double double1 = complex16.abs();
      Complex complex18 = complex4.acos();
      double double2 = complex4.abs();
      Complex complex19 = complex5.divide(complex17);
      double double3 = complex17.getReal();
      Complex complex20 = complex12.tan();
      Object object0 = complex2.readResolve();
      Complex complex21 = complex13.tan();
      Complex complex22 = complex20.log();
      Object object1 = complex5.readResolve();
      String string1 = complex13.toString();
      boolean boolean0 = complex15.isNaN();
      try { 
        complex12.nthRoot((-1413));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,413
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.ONE.multiply((-454.4));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.ZERO.pow(complex2);
      int int0 = complex1.INF.hashCode();
      List<Complex> list0 = complex0.nthRoot(1);
      int int1 = complex2.hashCode();
      Complex complex4 = complex0.negate();
      boolean boolean0 = complex1.equals(complex4);
      Object object0 = complex4.readResolve();
      Complex complex5 = complex0.cos();
  }
}
