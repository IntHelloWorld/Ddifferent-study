/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 01:00:31 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(1203.149878429, 1203.149878429);
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex0.getArgument();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.I.pow(complex0);
      List<Complex> list0 = complex3.ZERO.nthRoot(258);
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex2.NaN.tan();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex3.add(complex4);
      String string0 = complex8.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1866.29130568));
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex2.I.negate();
      Complex complex6 = complex0.ONE.cosh();
      double double0 = complex2.ONE.abs();
      Complex complex7 = complex5.ZERO.multiply(458.201634471);
      Complex complex8 = complex0.ONE.atan();
      Complex complex9 = new Complex(1.0, Double.POSITIVE_INFINITY);
      Complex complex10 = complex8.I.add(complex9);
      Complex complex11 = complex0.acos();
      Complex complex12 = complex11.asin();
      double double1 = complex2.ZERO.abs();
      Complex complex13 = complex5.conjugate();
      String string0 = complex13.ZERO.toString();
      Complex complex14 = complex11.ZERO.exp();
      Complex complex15 = complex1.createComplex((-1866.29130568), 1.0);
      Complex complex16 = Complex.NaN;
      List<Complex> list0 = complex16.I.nthRoot(50);
      boolean boolean0 = complex11.equals(complex16);
      double double2 = complex13.getImaginary();
      Complex complex17 = complex0.conjugate();
      Complex complex18 = complex11.sin();
      Complex complex19 = complex0.INF.multiply((-3708.716511));
      Complex complex20 = complex18.cos();
      Complex complex21 = complex1.exp();
      Complex complex22 = complex5.tan();
      Complex complex23 = complex6.cos();
      Complex complex24 = complex2.negate();
      Complex complex25 = complex23.exp();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.hashCode();
      double double0 = complex0.ZERO.abs();
      double double1 = complex0.abs();
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.conjugate();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex3 = complex1.INF.cosh();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex5.ZERO.sinh();
      Complex complex7 = complex3.INF.subtract(complex0);
      Complex complex8 = complex0.log();
      boolean boolean0 = complex0.equals(complex8);
      Complex complex9 = complex1.multiply(375.54);
      Complex complex10 = complex8.createComplex((-0.2499999701976776), 375.54);
      Complex complex11 = complex3.cos();
      List<Complex> list0 = complex10.nthRoot(1);
      boolean boolean1 = complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.tanh();
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.NaN, 0.0875862700108075);
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(2513.97103288, 2513.97103288);
      Complex complex1 = Complex.I;
      double double0 = complex1.ONE.getArgument();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.createComplex(0.0, 0.0);
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.INF.cosh();
      Object object0 = complex3.readResolve();
      try { 
        complex4.NaN.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.ONE.subtract(complex0);
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex4.ONE.asin();
      int int0 = complex4.hashCode();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.ONE.sinh();
      Complex complex9 = complex4.sin();
      Complex complex10 = complex0.multiply(3516.599255398994);
      Complex complex11 = complex2.cosh();
      Complex complex12 = complex7.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex13 = complex1.add(complex11);
      Complex complex14 = complex11.pow(complex12);
      Complex complex15 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-0.5), 539.56313);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.add(complex3);
      Complex complex5 = complex4.ONE.subtract(complex3);
      Complex complex6 = complex2.divide(complex0);
      Complex complex7 = complex4.log();
      boolean boolean0 = complex4.isNaN();
      Complex complex8 = complex6.cosh();
      int int0 = complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.ONE.createComplex(0.0, 0.0);
      double double0 = complex2.I.abs();
      try { 
        complex0.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      double double1 = complex0.getImaginary();
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.createComplex((-145.73503594383), (-145.73503594383));
      Complex complex2 = complex1.ZERO.acos();
      double double0 = complex1.ZERO.abs();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.cosh();
      Complex complex5 = new Complex(0.0, 1.0);
      Complex complex6 = complex1.add(complex5);
      Complex complex7 = complex5.I.log();
      Complex complex8 = complex6.I.negate();
      Complex complex9 = complex6.I.sqrt1z();
      Complex complex10 = complex6.ONE.conjugate();
      Complex complex11 = complex5.sqrt();
      Complex complex12 = complex0.pow(complex2);
      Complex complex13 = complex11.exp();
      Complex complex14 = complex0.INF.exp();
      Complex complex15 = complex2.asin();
      Complex complex16 = complex1.tan();
      Complex complex17 = complex15.tanh();
      double double1 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.NaN.createComplex((-758.0), 0.0);
      int int0 = complex2.NaN.hashCode();
      Complex complex3 = complex2.NaN.atan();
      String string0 = complex2.NaN.toString();
      Complex complex4 = complex2.NaN.tanh();
      Complex complex5 = complex4.I.add(complex2);
      Object object0 = complex5.readResolve();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(16.0, 0.0);
      Complex complex1 = complex0.I.conjugate();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.ONE.cos();
      Complex complex5 = complex3.I.exp();
      Object object0 = complex3.I.readResolve();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex0.NaN.log();
      Complex complex9 = complex2.exp();
      Complex complex10 = complex9.I.multiply(complex6);
      Complex complex11 = complex5.sqrt();
      Object object1 = complex0.ONE.readResolve();
      Complex complex12 = complex11.ZERO.acos();
      Complex complex13 = complex7.divide(complex5);
      String string0 = complex3.ZERO.toString();
      double double1 = complex11.getArgument();
      Complex complex14 = complex0.sqrt();
      Complex complex15 = complex14.I.sinh();
      Complex complex16 = complex0.acos();
      ComplexField complexField0 = complex12.getField();
      Complex complex17 = complex1.multiply(303.8659052284);
      Complex complex18 = complex1.sqrt();
      Complex complex19 = complex0.sin();
      Complex complex20 = complex11.sqrt();
      double double2 = complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-2487.43), 5388.92313447);
      Complex complex1 = complex0.exp();
      double double0 = complex1.NaN.abs();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = complex2.INF.sqrt1z();
      Complex complex5 = complex3.ONE.multiply((-1551.26398469));
      Complex complex6 = complex0.INF.sqrt();
      Complex complex7 = complex1.tanh();
      double double1 = complex1.getArgument();
      Complex complex8 = complex0.sqrt();
      Object object0 = complex0.readResolve();
      Complex complex9 = complex8.cos();
      Complex complex10 = complex0.negate();
      Complex complex11 = complex9.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = new Complex(0.0, 0.0);
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex5.sqrt1z();
      ComplexField complexField0 = complex5.getField();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(0.19999999999923582, 0.19999999999923582);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex0.multiply(complex2);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.ONE.divide(complex2);
      double double0 = complex1.I.abs();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.NaN.asin();
      double double1 = complex1.I.abs();
      Complex complex6 = complex1.atan();
      try { 
        complex0.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.multiply(complex1);
      String string0 = complex0.I.toString();
      Complex complex3 = complex0.I.sqrt1z();
      double double0 = complex0.getReal();
      Complex complex4 = complex2.I.sinh();
      Complex complex5 = complex2.divide(complex0);
      Complex complex6 = complex5.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.add(complex1);
      double double1 = complex7.NaN.abs();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex8.multiply(Double.POSITIVE_INFINITY);
      Object object0 = complex9.INF.readResolve();
      boolean boolean0 = complex5.isNaN();
      Complex complex10 = complex1.pow(complex7);
      Complex complex11 = complex10.INF.pow(complex1);
      int int0 = complex3.hashCode();
      Complex complex12 = complex9.cosh();
      Complex complex13 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      double double0 = complex0.ONE.abs();
      Complex complex1 = Complex.INF;
      int int1 = complex0.I.hashCode();
      boolean boolean0 = complex0.equals(complex1);
      boolean boolean1 = complex1.equals(complex0);
      try { 
        complex0.nthRoot((-336));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -336
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.NaN.divide(complex0);
      double double0 = complex2.getArgument();
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.conjugate();
      Object object0 = complex5.ONE.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex4.atan();
      int int0 = complex0.hashCode();
      try { 
        complex4.INF.nthRoot((-3593));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,593
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-625.7), 6.283185307179586);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.multiply((-1342.27));
      Complex complex4 = complex1.ONE.asin();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex3.INF.cos();
      Complex complex7 = complex6.ONE.asin();
      Complex complex8 = complex2.tanh();
      double double0 = complex8.NaN.abs();
      Complex complex9 = complex8.ZERO.log();
      double double1 = complex0.I.getArgument();
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex6.negate();
      int int0 = complex9.hashCode();
      Complex complex12 = complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-0.5), 539.56313);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.ONE.subtract(complex3);
      Complex complex5 = complex2.divide(complex0);
      Complex complex6 = complex0.log();
      boolean boolean0 = complex1.isNaN();
      Complex complex7 = complex5.cosh();
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-102.7471727947818), (-102.7471727947818));
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex3.INF.multiply(complex1);
      Complex complex6 = complex0.I.add(complex1);
      double double1 = complex3.getReal();
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex3.acos();
      Complex complex10 = complex8.I.sinh();
      Complex complex11 = complex9.cosh();
      String string0 = complex8.toString();
      Complex complex12 = complex1.createComplex(1.0, (-574.04241997889));
      List<Complex> list0 = complex12.I.nthRoot(187);
      String string1 = complex4.toString();
      int int0 = complex0.hashCode();
      Complex complex13 = complex12.log();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(889.139, (-3154.6244646));
      Complex complex1 = complex0.ONE.negate();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ONE.conjugate();
      double double0 = complex1.getReal();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex2.ONE.multiply(889.139);
      int int0 = complex0.hashCode();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex4.subtract(complex3);
      Complex complex8 = complex5.createComplex(1822.395459, 889.139);
      double double1 = complex7.I.abs();
      Complex complex9 = complex1.acos();
      ComplexField complexField0 = complex0.getField();
      double double2 = complex2.getArgument();
      Complex complex10 = complex5.cosh();
      int int1 = complex6.hashCode();
      boolean boolean1 = complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.multiply((-77.2888507));
      double double0 = complex0.abs();
      double double1 = complex0.getReal();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex1.sin();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.sin();
      List<Complex> list0 = complex1.nthRoot(2030);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      List<Complex> list0 = complex1.ONE.nthRoot(37);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.INF.acos();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex4 = complex1.log();
      Complex complex5 = complex0.ZERO.subtract(complex1);
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex4.NaN.log();
      String string0 = complex5.I.toString();
      Object object0 = complex0.NaN.readResolve();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex9.log();
      int int0 = complex5.hashCode();
      Complex complex11 = complex4.multiply((-4709.64));
      String string1 = complex4.toString();
      ComplexField complexField1 = complex0.getField();
      Complex complex12 = new Complex((-4709.64), (-4709.64));
      boolean boolean0 = complex9.equals(complex12);
      Complex complex13 = complex4.pow(complex12);
      boolean boolean1 = complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply((-1908.55625498547));
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(2981.483489696256, 2981.483489696256);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.createComplex(2981.483489696256, 2981.483489696256);
      Complex complex3 = complex1.NaN.pow(complex0);
      int int0 = complex1.hashCode();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ONE.sinh();
      String string0 = complex2.toString();
      Complex complex6 = complex1.multiply(complex0);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex1.atan();
      ComplexField complexField0 = complex4.getField();
      Complex complex9 = complex2.atan();
      Complex complex10 = complex7.createComplex((-0.25), (-3264.34189699));
      Complex complex11 = complex4.add(complex9);
      Complex complex12 = complex9.asin();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1160.1982737670307), (-1160.1982737670307));
      Complex complex1 = complex0.conjugate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.I.exp();
      double double0 = complex1.getArgument();
      double double1 = complex0.getImaginary();
      Complex complex3 = complex0.createComplex(0.0, 2.356194490192345);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.INF.subtract(complex4);
      Complex complex6 = complex5.NaN.pow(complex1);
      String string0 = complex6.ZERO.toString();
      Complex complex7 = complex3.ZERO.pow(complex1);
      Complex complex8 = complex7.ONE.sqrt1z();
      Complex complex9 = complex0.NaN.sqrt1z();
      Complex complex10 = complex8.ZERO.subtract(complex5);
      Complex complex11 = complex1.cos();
      Complex complex12 = complex11.I.tanh();
      ComplexField complexField0 = complex3.getField();
      boolean boolean1 = complex11.isInfinite();
      Complex complex13 = complex3.createComplex((-1160.1982737670307), (-1160.1982737670307));
      Complex complex14 = complex4.tan();
      Complex complex15 = complex14.NaN.subtract(complex3);
      Complex complex16 = complex14.ZERO.acos();
      Complex complex17 = complex11.cos();
      boolean boolean2 = complex12.isInfinite();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.ONE.createComplex(0.0, (-2134.0315016776285));
      double double0 = complex1.ZERO.getArgument();
      Complex complex3 = complex0.negate();
      double double1 = complex0.getArgument();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex0.ZERO.log();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      double double2 = complex3.getImaginary();
      Object object1 = complex3.readResolve();
      double double3 = complex0.getImaginary();
      double double4 = complex2.getArgument();
      Complex complex6 = complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.atan();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.ONE.log();
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex1.atan();
      Complex complex6 = complex0.createComplex(2792.94028438, 1947.1406917972618);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(2652.46);
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.ZERO.multiply((-896.3078));
      Object object0 = complex0.readResolve();
      Complex complex4 = complex2.INF.tanh();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.createComplex((-0.6341501348200762), (-3836.033780698));
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex2.I.sqrt();
      List<Complex> list0 = complex0.nthRoot(111);
      int int0 = complex0.hashCode();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.add(complex4);
      double double0 = complex3.getReal();
      Complex complex6 = complex2.divide(complex3);
      Complex complex7 = complex1.pow(complex4);
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex2.acos();
      int int1 = complex9.NaN.hashCode();
      Complex complex10 = complex8.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.cos();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.cosh();
      int int0 = complex1.hashCode();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.NaN.pow(complex1);
      Complex complex6 = complex4.INF.tan();
      try { 
        complex6.ONE.nthRoot((-837));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -837
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.createComplex((-799.8811104139429), (-799.8811104139429));
      Complex complex5 = complex2.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.atan();
      double double0 = complex0.I.abs();
      Complex complex3 = complex0.sin();
      double double1 = complex3.abs();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.ZERO.multiply(Double.NaN);
      Complex complex6 = complex4.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      ComplexField complexField0 = complex0.NaN.getField();
      ComplexField complexField1 = complex0.getField();
      Complex complex3 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.sqrt1z();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex3.ZERO.tan();
      Complex complex6 = complex3.createComplex((-961.4045627), (-961.4045627));
      Complex complex7 = Complex.INF;
      Complex complex8 = complex5.pow(complex7);
      Complex complex9 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-68.34), (-68.34));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex0.NaN.tan();
      ComplexField complexField0 = complex0.ONE.getField();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.ONE.sin();
      double double0 = complex0.getImaginary();
      double double1 = complex2.getArgument();
      Complex complex6 = complex0.add(complex3);
      Complex complex7 = complex3.add(complex1);
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex5.atan();
      Complex complex10 = complex9.pow(complex2);
      Complex complex11 = complex6.tanh();
      Complex complex12 = complex9.log();
      Complex complex13 = complex6.createComplex(Double.NaN, 2367.67291646415);
      String string0 = complex11.toString();
      Complex complex14 = complex9.tanh();
      Complex complex15 = complex12.atan();
      int int0 = complex14.hashCode();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.NaN.asin();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex1.ZERO.createComplex(672.9, 672.9);
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.NaN.multiply(complex2);
      double double0 = complex1.getReal();
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Object object0 = new Object();
      Complex complex2 = complex1.INF.cos();
      String string0 = complex0.NaN.toString();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.ZERO.createComplex(0.0, Double.NaN);
      int int0 = complex0.hashCode();
      double double0 = complex0.getReal();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex3.ONE.conjugate();
      int int1 = complex5.NaN.hashCode();
      Complex complex6 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1.0));
      Complex complex2 = complex0.createComplex(0.0, (-477.0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.multiply(complex1);
      String string0 = complex1.ONE.toString();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex0.ONE.add(complex1);
      double double0 = complex0.INF.abs();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.ONE.sqrt();
      boolean boolean0 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.toString();
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.acos();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(1868.92000441, 1868.92000441);
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.ZERO.multiply(15.0);
      int int0 = complex3.hashCode();
      String string0 = complex2.I.toString();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.NaN.exp();
      int int0 = complex1.I.hashCode();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-2334.852), 10.0);
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(1825.4272883569074, 1825.4272883569074);
      Complex complex1 = new Complex(1825.4272883569074, (-0.25));
      double double0 = complex0.INF.getArgument();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.asin();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = Complex.I;
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.INF.asin();
      String string0 = complex2.toString();
      Complex complex5 = complex4.subtract(complex2);
      Complex complex6 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.multiply(Double.NaN);
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.asin();
      double double0 = complex3.ONE.abs();
      Complex complex5 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-670.2322), (-609.377));
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.ZERO.negate();
      int int0 = complex1.hashCode();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex3.NaN.asin();
      Complex complex6 = complex3.NaN.add(complex2);
      boolean boolean0 = complex0.equals(complex2);
      double double0 = complex2.getReal();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex7.I.multiply(complex1);
      Complex complex9 = complex7.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.multiply(6.283185307179586);
      Complex complex11 = complex7.ONE.conjugate();
      Complex complex12 = complex0.log();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex2.NaN.multiply(complex1);
      boolean boolean0 = complex0.isInfinite();
      String string0 = complex0.toString();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex6.NaN.cos();
      Complex complex9 = complex8.NaN.multiply(complex3);
      Complex complex10 = complex5.log();
      Complex complex11 = complex10.INF.conjugate();
      Complex complex12 = complex5.exp();
      Complex complex13 = complex10.sqrt1z();
      Complex complex14 = complex1.cosh();
      Complex complex15 = complex10.cosh();
      Complex complex16 = complex9.sin();
      Complex complex17 = complex15.add(complex14);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.sin();
      double double1 = complex1.abs();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.NaN.exp();
      double double2 = complex3.getArgument();
      Complex complex4 = new Complex((-1574.680059), Double.NaN);
      Complex complex5 = complex2.NaN.multiply(complex4);
      Complex complex6 = complex2.acos();
      Complex complex7 = complex6.ONE.multiply(0.0);
      List<Complex> list0 = complex7.nthRoot(3293);
      Complex complex8 = complex6.INF.conjugate();
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex0.divide(complex8);
      Complex complex11 = complex0.cos();
      Complex complex12 = complex7.sqrt();
      Complex complex13 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt();
      double double0 = complex0.getImaginary();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.asin();
      double double1 = complex2.getReal();
      Complex complex3 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex1.INF.divide(complex0);
      Complex complex5 = complex1.NaN.cosh();
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex6.sqrt1z();
      double double0 = complex7.INF.getArgument();
      double double1 = complex6.ONE.getArgument();
      Complex complex8 = complex6.log();
      Complex complex9 = complex8.ZERO.multiply(0.0);
      Complex complex10 = complex8.INF.acos();
      Complex complex11 = complex10.ZERO.divide(complex5);
      Complex complex12 = complex9.ONE.multiply(complex1);
      Complex complex13 = complex12.ZERO.cosh();
      Complex complex14 = complex6.sinh();
      Complex complex15 = complex7.atan();
      Complex complex16 = complex1.divide(complex0);
      Object object0 = complex0.readResolve();
      double double2 = complex6.getReal();
      Complex complex17 = complex2.tan();
      Complex complex18 = complex5.multiply(complex2);
      Complex complex19 = complex18.I.cos();
      Complex complex20 = complex2.divide(complex7);
      boolean boolean0 = complex12.isNaN();
      Complex complex21 = complex7.add(complex0);
      String string0 = complex10.toString();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(1014.008613416, 0.0);
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.exp();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.ONE.acos();
      double double0 = complex0.ONE.getArgument();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.ZERO.multiply(1014.008613416);
      String string0 = complex6.toString();
      ComplexField complexField1 = complex6.INF.getField();
      Object object0 = complex5.INF.readResolve();
      double double1 = complex0.getReal();
      Complex complex7 = complex5.sin();
      Complex complex8 = complex7.NaN.multiply(complex5);
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex7.NaN.acos();
      Complex complex11 = complex10.INF.pow(complex6);
      Complex complex12 = complex11.multiply(1014.008613416);
      Complex complex13 = complex5.asin();
      Complex complex14 = complex0.conjugate();
      Complex complex15 = complex14.ONE.add(complex5);
      Complex complex16 = complex11.INF.conjugate();
      Complex complex17 = complex14.ZERO.sin();
      Complex complex18 = complex1.pow(complex7);
      ComplexField complexField2 = complex14.getField();
      Complex complex19 = new Complex(1014.008613416, (-340.086955613));
      Complex complex20 = complex19.I.sqrt1z();
      Complex complex21 = complex2.divide(complex19);
      boolean boolean0 = complex12.isInfinite();
      double double2 = complex12.getArgument();
      int int0 = complex13.hashCode();
      int int1 = complex6.hashCode();
      ComplexField complexField3 = complex21.getField();
      List<Complex> list0 = complex8.nthRoot(968);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.NaN.tan();
      List<Complex> list0 = complex1.INF.nthRoot(1);
      double double0 = complex1.ONE.abs();
      double double1 = complex2.getArgument();
      double double2 = complex0.getImaginary();
      Complex complex4 = complex2.ONE.tan();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex5.ZERO.log();
      List<Complex> list1 = complex1.nthRoot(17);
      boolean boolean0 = complex1.isNaN();
      String string0 = complex2.toString();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex0.divide(complex4);
      Complex complex9 = complex8.negate();
      Object object0 = complex4.readResolve();
      Object object1 = new Object();
      boolean boolean1 = complex9.equals(object1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.INF.multiply(617.59440914);
      int int0 = complex3.hashCode();
      Complex complex4 = complex0.ZERO.add(complex1);
      List<Complex> list0 = complex0.ONE.nthRoot(392);
      Complex complex5 = complex2.tan();
      double double0 = complex0.INF.abs();
      double double1 = complex0.getArgument();
      Complex complex6 = complex0.ONE.sinh();
      int int1 = complex5.hashCode();
      int int2 = complex6.ONE.hashCode();
      Complex complex7 = complex0.NaN.atan();
      Complex complex8 = complex5.negate();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex9.ZERO.sinh();
      Complex complex11 = complex4.tanh();
      String string0 = complex7.toString();
      ComplexField complexField0 = complex0.getField();
  }
}
