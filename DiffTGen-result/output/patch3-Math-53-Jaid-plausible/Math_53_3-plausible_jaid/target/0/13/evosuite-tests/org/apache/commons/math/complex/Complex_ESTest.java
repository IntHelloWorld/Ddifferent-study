/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 00:53:40 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      List<Complex> list0 = complex1.ONE.nthRoot(2102);
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex0.I.subtract(complex1);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.INF.getField();
      double double0 = complex0.ONE.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex3.NaN.createComplex(2459.3, 0.0);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex0.ONE.add(complex5);
      Complex complex7 = complex5.multiply(complex1);
      Complex complex8 = complex7.NaN.conjugate();
      double double1 = complex2.getArgument();
      Complex complex9 = complex3.I.divide(complex2);
      Complex complex10 = complex1.atan();
      Complex complex11 = complex10.ZERO.multiply(complex0);
      Complex complex12 = complex11.INF.tanh();
      Complex complex13 = complex4.cosh();
      double double2 = complex13.NaN.getArgument();
      Complex complex14 = complex10.sin();
      String string0 = complex3.toString();
      double double3 = complex9.getArgument();
      Complex complex15 = complex1.atan();
      Complex complex16 = complex12.exp();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex3.NaN.sqrt();
      String string0 = complex2.ONE.toString();
      Complex complex5 = complex1.cos();
      String string1 = complex2.I.toString();
      Complex complex6 = complex2.exp();
      ComplexField complexField0 = complex1.getField();
      boolean boolean0 = complex2.isInfinite();
      int int0 = complex1.hashCode();
      Complex complex7 = complex2.conjugate();
      double double0 = complex3.abs();
      double double1 = complex1.getReal();
      ComplexField complexField1 = complex5.getField();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex1.subtract(complex0);
      Complex complex10 = complex1.subtract(complex8);
      Complex complex11 = complex0.atan();
      double double2 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.createComplex((-1179.0), 6.283185307179586);
      List<Complex> list0 = complex0.I.nthRoot(1);
      List<Complex> list1 = complex1.nthRoot(3156);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex0.NaN.pow(complex2);
      Complex complex6 = complex2.ONE.multiply(2797.81323784);
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex7.exp();
      Complex complex9 = complex1.atan();
      Complex complex10 = complex9.NaN.cosh();
      Complex complex11 = complex9.sin();
      Complex complex12 = complex3.cosh();
      Complex complex13 = complex7.negate();
      Complex complex14 = complex1.ONE.tanh();
      String string0 = complex13.NaN.toString();
      Complex complex15 = complex7.INF.pow(complex8);
      Complex complex16 = complex12.tanh();
      int int0 = complex13.NaN.hashCode();
      Complex complex17 = complex9.INF.multiply((double) 1);
      double double0 = complex6.getArgument();
      double double1 = complex9.getReal();
      String string1 = complex0.toString();
      boolean boolean0 = complex12.equals(complex9);
      Complex complex18 = complex3.sinh();
      ComplexField complexField0 = complex2.getField();
      Complex complex19 = complex15.acos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1970.0), (-1296.1864));
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.multiply((-1970.0));
      Complex complex2 = complex1.NaN.sin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(1.0, (-3043.8));
      List<Complex> list0 = complex0.ZERO.nthRoot(2122);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.ONE.tan();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.sin();
      double double0 = complex2.abs();
      List<Complex> list1 = complex2.nthRoot(2122);
      Object object0 = complex2.readResolve();
      Complex complex4 = complex3.cosh();
      List<Complex> list2 = complex2.NaN.nthRoot(2122);
      int int0 = complex4.ZERO.hashCode();
      ComplexField complexField0 = complex3.ZERO.getField();
      double double1 = complex0.abs();
      Complex complex5 = complex0.sqrt1z();
      ComplexField complexField1 = complex5.ZERO.getField();
      Complex complex6 = complex3.I.asin();
      Complex complex7 = complex0.divide(complex2);
      boolean boolean1 = complex4.isNaN();
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex8.asin();
      boolean boolean2 = complex4.equals("INVALID_BINARY_DIGIT");
      Complex complex10 = complex7.NaN.asin();
      Complex complex11 = complex6.tanh();
      Complex complex12 = complex7.tanh();
      Complex complex13 = complex1.exp();
      try { 
        complex1.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 892.7254);
      Complex complex1 = complex0.log();
      String string0 = complex1.ZERO.toString();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.sqrt();
      double double0 = complex0.getReal();
      Complex complex4 = complex3.createComplex(892.7254, 892.7254);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = complex3.createComplex(1596.41656064, 0.0);
      Complex complex8 = complex2.NaN.negate();
      Complex complex9 = complex7.INF.sqrt1z();
      Complex complex10 = complex7.asin();
      boolean boolean0 = complex10.isInfinite();
      boolean boolean1 = complex9.equals(complex3);
      Complex complex11 = complex2.tanh();
      Object object0 = complex11.readResolve();
      Complex complex12 = complex9.cos();
      double double1 = complex10.getArgument();
      List<Complex> list0 = complex5.nthRoot(849);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.ZERO.add(complex0);
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ONE.acos();
      int int0 = complex0.ONE.hashCode();
      Complex complex5 = complex0.sinh();
      double double1 = complex0.INF.abs();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.log();
      Complex complex7 = complex5.log();
      Complex complex8 = complex7.multiply(Double.POSITIVE_INFINITY);
      double double2 = complex8.getImaginary();
      Complex complex9 = complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sinh();
      Object object0 = complex2.NaN.readResolve();
      Complex complex3 = complex1.exp();
      int int0 = complex0.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.ONE.negate();
      List<Complex> list0 = complex1.nthRoot(1459);
      Complex complex7 = complex3.ONE.sqrt1z();
      Complex complex8 = complex0.ONE.asin();
      Complex complex9 = complex3.log();
      Complex complex10 = complex9.INF.exp();
      Complex complex11 = complex0.ZERO.sinh();
      Complex complex12 = complex9.ZERO.sqrt();
      Complex complex13 = complex0.NaN.exp();
      Complex complex14 = complex13.ONE.tanh();
      Complex complex15 = complex14.I.negate();
      Complex complex16 = complex12.ONE.add(complex10);
      Complex complex17 = complex6.tan();
      boolean boolean0 = complex1.isNaN();
      boolean boolean1 = complex12.isNaN();
      boolean boolean2 = complex12.isInfinite();
      Complex complex18 = complex11.negate();
      Complex complex19 = complex18.NaN.multiply(complex8);
      Complex complex20 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ZERO.cosh();
      int int0 = complex2.hashCode();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex2.cosh();
      int int1 = complex5.hashCode();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.sqrt();
      double double0 = complex7.INF.getArgument();
      try { 
        complex2.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex0.ZERO.atan();
      Complex complex7 = complex0.tanh();
      double double0 = complex7.getArgument();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex8.NaN.tanh();
      Complex complex10 = complex6.asin();
      Complex complex11 = complex2.subtract(complex0);
      Complex complex12 = complex9.sqrt();
      Complex complex13 = complex12.INF.pow(complex5);
      Complex complex14 = complex13.multiply(complex6);
      Complex complex15 = complex11.asin();
      ComplexField complexField0 = complex15.getField();
      Complex complex16 = complex15.sqrt();
      Complex complex17 = complex2.multiply(complex4);
      Complex complex18 = complex15.cosh();
      Complex complex19 = complex13.sin();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(-0.0, -0.0);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.ONE.createComplex(4217.67056, 1136.2533);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.I.multiply(complex1);
      int int0 = complex0.hashCode();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex0.ONE.acos();
      String string0 = complex2.INF.toString();
      boolean boolean0 = complex1.equals(complex5);
      Complex complex7 = complex4.asin();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex8.INF.conjugate();
      Complex complex10 = complex8.ONE.cos();
      Complex complex11 = complex7.sin();
      boolean boolean1 = complex0.equals(complex5);
      boolean boolean2 = complex0.isInfinite();
      double double0 = complex7.getArgument();
      Complex complex12 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.2250738585072014E-308);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.log();
      Complex complex5 = complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.tan();
      String string0 = complex3.I.toString();
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex2.asin();
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = complex2.I.add(complex4);
      String string1 = complex0.INF.toString();
      Complex complex8 = complex4.log();
      Object object0 = complex6.ZERO.readResolve();
      Complex complex9 = complex1.tan();
      double double0 = complex6.getReal();
      Complex complex10 = complex3.multiply(complex8);
      boolean boolean0 = complex1.equals(complex10);
      boolean boolean1 = complex0.isInfinite();
      try { 
        complex5.nthRoot((-922));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -922
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.INF.subtract(complex2);
      ComplexField complexField0 = complex3.I.getField();
      Complex complex4 = complex3.ONE.negate();
      double double0 = complex2.ONE.getArgument();
      List<Complex> list0 = complex1.ZERO.nthRoot(528);
      String string1 = complex0.toString();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.acos();
      double double1 = complex3.getArgument();
      String string2 = complex2.toString();
      double double2 = complex4.I.getArgument();
      Complex complex7 = complex4.add(complex2);
      Complex complex8 = complex7.ONE.divide(complex1);
      Complex complex9 = complex1.tan();
      Complex complex10 = complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ZERO.abs();
      int int0 = complex0.ZERO.hashCode();
      List<Complex> list0 = complex0.I.nthRoot(7);
      double double1 = complex0.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.ZERO.exp();
      double double2 = complex2.NaN.getArgument();
      String string0 = complex2.toString();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.ONE.tanh();
      Object object0 = complex0.readResolve();
      double double3 = complex0.abs();
      Complex complex6 = complex3.ONE.tan();
      Complex complex7 = complex0.asin();
      Object object1 = complex3.readResolve();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex8.INF.sin();
      Complex complex10 = complex3.NaN.tanh();
      Complex complex11 = complex5.multiply(1.5707963267948966);
      double double4 = complex5.getArgument();
      double double5 = complex5.getImaginary();
      Complex complex12 = complex4.sinh();
      Complex complex13 = complex12.NaN.add(complex7);
      Complex complex14 = complex11.multiply(complex8);
      Complex complex15 = complex1.tan();
      Complex complex16 = complex5.negate();
      Complex complex17 = complex4.sin();
      Complex complex18 = complex5.add(complex6);
      double double6 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(1769.0, 12.0);
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.ZERO.divide(complex4);
      Complex complex6 = complex5.asin();
      Object object0 = complex6.NaN.readResolve();
      Complex complex7 = complex3.I.createComplex((-845.993894404363), 1769.0);
      Complex complex8 = complex7.INF.exp();
      String string1 = complex8.NaN.toString();
      double double0 = complex0.NaN.abs();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex1.asin();
      double double1 = complex10.getArgument();
      Complex complex11 = complex1.multiply(1769.0);
      Complex complex12 = complex11.I.cos();
      Complex complex13 = complex2.conjugate();
      Complex complex14 = complex9.negate();
      int int0 = complex10.hashCode();
      String string2 = complex9.toString();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = Double.NaN;
      Complex complex1 = complex0.createComplex(Double.NaN, (-2154.2));
      Complex complex2 = complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex3 = null;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.ONE.asin();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex4 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex6 = complex4.ZERO.multiply(complex0);
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex3.tan();
      Complex complex9 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.I.add(complex2);
      Complex complex6 = complex4.ZERO.createComplex((-1.0), (-1.0));
      Complex complex7 = complex0.sin();
      String string0 = complex7.NaN.toString();
      Complex complex8 = complex7.ZERO.multiply(3433.0);
      Complex complex9 = complex7.acos();
      Complex complex10 = complex9.ZERO.divide(complex8);
      Complex complex11 = complex0.asin();
      Complex complex12 = complex11.ONE.cos();
      Complex complex13 = complex1.multiply(complex2);
      List<Complex> list0 = complex11.nthRoot(418);
      Complex complex14 = complex1.acos();
      Complex complex15 = complex11.log();
      String string1 = complex3.toString();
      Complex complex16 = complex12.cos();
      Complex complex17 = complex16.multiply(complex11);
      int int0 = complex14.hashCode();
      Complex complex18 = complex0.negate();
      Complex complex19 = complex18.NaN.sqrt1z();
      Complex complex20 = complex18.asin();
      Complex complex21 = complex20.multiply(complex11);
      double double0 = complex18.getImaginary();
      Complex complex22 = complex15.cosh();
      Complex complex23 = complex0.sin();
      Complex complex24 = Complex.I;
      Complex complex25 = complex17.multiply(complex24);
      double double1 = complex1.getReal();
      Complex complex26 = complex9.multiply((double) 418);
      boolean boolean0 = complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex1.ZERO.sqrt1z();
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex1.log();
      Complex complex6 = complex0.createComplex(1.0, (-131.217235014));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(1350.7765639829, 1350.7765639829);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.ZERO.add(complex2);
      Complex complex5 = complex2.INF.sin();
      Complex complex6 = complex1.ONE.tan();
      Object object0 = complex0.readResolve();
      boolean boolean1 = complex0.equals(object0);
      Object object1 = complex2.readResolve();
      Complex complex7 = complex1.exp();
      boolean boolean2 = complex7.equals(complex6);
      Object object2 = complex1.readResolve();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex8.I.conjugate();
      ComplexField complexField0 = complex8.getField();
      Complex complex10 = complex8.cosh();
      Complex complex11 = complex7.ONE.sqrt1z();
      Complex complex12 = complex7.asin();
      Complex complex13 = complex12.ZERO.multiply(0.0);
      boolean boolean3 = complex2.isNaN();
      Complex complex14 = complex2.pow(complex0);
      Complex complex15 = complex8.asin();
      double double0 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.INF.multiply(complex2);
      List<Complex> list0 = complex2.nthRoot(7);
      List<Complex> list1 = complex0.I.nthRoot(7);
      double double0 = complex2.abs();
      double double1 = complex2.getReal();
      double double2 = complex2.abs();
      Complex complex5 = complex0.log();
      double double3 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.subtract(complex1);
      String string0 = complex0.toString();
      Complex complex3 = complex0.asin();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex1.cosh();
      boolean boolean0 = complex5.isNaN();
      Object object1 = complex2.readResolve();
      Complex complex6 = complex3.negate();
      Complex complex7 = Complex.INF;
      boolean boolean1 = complex2.equals(complex7);
      ComplexField complexField0 = complex5.getField();
      Complex complex8 = complex7.ONE.cos();
      Complex complex9 = complex2.tanh();
      Complex complex10 = complex6.subtract(complex7);
      Complex complex11 = complex10.log();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ZERO.pow(complex0);
      Complex complex4 = complex1.ZERO.atan();
      Complex complex5 = complex1.ZERO.tan();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex1.multiply(0.1111111111111111);
      Complex complex7 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      double double0 = complex0.INF.getArgument();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.multiply(0.7853981633974483);
      Complex complex3 = complex2.NaN.createComplex(0.003, Double.NaN);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex5.I.atan();
      Complex complex7 = complex2.cosh();
      double double1 = complex7.ONE.abs();
      String string0 = complex7.ONE.toString();
      String string1 = complex0.toString();
      double double2 = complex7.getArgument();
      double double3 = complex2.abs();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex8.multiply(0.036);
      Complex complex10 = complex4.pow(complex7);
      Complex complex11 = complex8.tanh();
      boolean boolean0 = complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(1798.0355250974, 1798.0355250974);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex1.ONE.negate();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex6.negate();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex5.log();
      Complex complex10 = complex5.multiply(complex7);
      Complex complex11 = complex0.pow(complex10);
      Complex complex12 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex2.NaN.divide(complex0);
      double double0 = complex1.ONE.abs();
      try { 
        complex0.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.ZERO.negate();
      Complex complex4 = complex1.I.subtract(complex0);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex0.subtract(complex5);
      Complex complex8 = complex5.cos();
      Complex complex9 = complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ZERO.add(complex1);
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex2.I.negate();
      Complex complex7 = complex6.NaN.sqrt();
      Complex complex8 = complex7.ONE.cosh();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex9.createComplex(1097.0241809, 3589.728);
      int int0 = 14;
      List<Complex> list0 = complex9.I.nthRoot(14);
      Complex complex11 = complex3.sqrt();
      double double0 = complex0.getImaginary();
      try { 
        complex3.nthRoot((-3322));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,322
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      double double0 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex2.INF.sin();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex4 = complex0.tan();
      Complex complex5 = Complex.NaN;
      boolean boolean0 = complex4.equals(complex5);
      Complex complex6 = complex5.add(complex0);
      Complex complex7 = complex5.sin();
      Complex complex8 = complex4.subtract(complex7);
      Complex complex9 = complex7.acos();
      double double0 = complex9.ZERO.getArgument();
      Complex complex10 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.NaN.divide(complex2);
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex3.NaN.abs();
      Complex complex4 = complex2.sinh();
      boolean boolean1 = complex2.equals(complex3);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex2.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(1847.359104165, 1847.359104165);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex2.add(complex0);
      Complex complex6 = complex2.divide(complex3);
      Complex complex7 = complex6.NaN.sqrt();
      Complex complex8 = complex4.sin();
      Complex complex9 = complex5.acos();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.createComplex(0.0, 0.0);
      Complex complex3 = complex0.subtract(complex1);
      List<Complex> list0 = complex1.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      List<Complex> list0 = complex1.NaN.nthRoot(1);
      Complex complex2 = complex0.multiply(0.14982303977012634);
      boolean boolean0 = complex0.isInfinite();
      Object object0 = complex0.I.readResolve();
      double double0 = complex2.getImaginary();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.tan();
      String string0 = complex3.INF.toString();
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-677.5), (-677.5));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex1.ONE.acos();
      Complex complex5 = complex0.sqrt1z();
      int int0 = complex0.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-4.503599627370496E15), (-4.503599627370496E15));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex0.ZERO.tanh();
      Complex complex9 = complex5.multiply((-10.48));
      Complex complex10 = complex2.acos();
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(0.4342944622039795, 0.4342944622039795);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      double double0 = complex1.ONE.getArgument();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.ZERO.acos();
      int int0 = complex2.I.hashCode();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex0.conjugate();
      double double0 = complex3.NaN.getArgument();
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex3.ONE.atan();
      String string0 = complex6.INF.toString();
      Complex complex7 = complex0.pow(complex3);
      Complex complex8 = complex3.exp();
      Complex complex9 = complex0.multiply(complex8);
      boolean boolean0 = complex6.equals(complex8);
      Complex complex10 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.NaN.acos();
      Complex complex4 = complex1.I.log();
      Complex complex5 = complex2.ONE.sinh();
      Complex complex6 = complex0.ZERO.atan();
      Complex complex7 = complex0.cosh();
      double double1 = complex2.abs();
      Complex complex8 = complex2.subtract(complex1);
      int int0 = complex1.hashCode();
      Complex complex9 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.divide(complex1);
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.sin();
      String string0 = complex3.INF.toString();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex4.pow(complex2);
      Complex complex9 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.ONE.createComplex((-1602.827375225923), (-1602.827375225923));
      double double0 = complex0.abs();
      Complex complex3 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex0.ONE.add(complex1);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex0.log();
      Complex complex8 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.I.sqrt();
      int int0 = complex0.hashCode();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.conjugate();
      ComplexField complexField0 = complex0.NaN.getField();
      double double0 = complex0.abs();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.multiply(1.986821492305628E-8);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex0.ONE.createComplex(1.986821492305628E-8, 0.0);
      double double1 = complex3.getReal();
      Complex complex6 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex2.I.multiply(0.0);
      List<Complex> list0 = complex2.nthRoot(4435);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.ONE.log();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.NaN.tan();
      boolean boolean0 = complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex2.ZERO.multiply(444.79901620304);
      Complex complex5 = complex2.INF.add(complex0);
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.ZERO.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.I.tanh();
      ComplexField complexField0 = complex0.INF.getField();
      int int1 = complex0.hashCode();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ZERO.subtract(complex0);
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex0.ZERO.sinh();
      double double0 = complex0.getReal();
      int int2 = complex0.hashCode();
      Complex complex7 = complex0.log();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex9.exp();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.atan();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.multiply(complex2);
      double double0 = complex5.getArgument();
      boolean boolean1 = complex0.isInfinite();
      Complex complex6 = complex4.I.acos();
      Complex complex7 = complex3.acos();
      Complex complex8 = complex3.exp();
      Complex complex9 = complex3.I.multiply(Double.NaN);
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex2.atan();
      Object object0 = complex11.ONE.readResolve();
      Complex complex12 = complex11.divide(complex0);
      Complex complex13 = complex8.NaN.sin();
      Complex complex14 = complex13.ONE.log();
      double double1 = complex13.ZERO.getArgument();
      Complex complex15 = complex11.INF.subtract(complex5);
      Complex complex16 = complex11.acos();
      int int0 = complex16.INF.hashCode();
      Complex complex17 = complex1.subtract(complex7);
      double double2 = complex8.getReal();
      Complex complex18 = complex1.add(complex8);
      boolean boolean2 = complex4.isInfinite();
      Complex complex19 = complex0.tan();
      List<Complex> list0 = complex19.I.nthRoot(68);
      Complex complex20 = complex4.conjugate();
      int int1 = complex5.INF.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex21 = complex3.pow(complex10);
      Complex complex22 = complex21.ONE.pow(complex9);
      double double3 = complex8.abs();
      Complex complex23 = complex8.divide(complex19);
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.conjugate();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.INF.divide(complex1);
      String string0 = complex0.toString();
      double double1 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.3999999761581421, 0.3999999761581421);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.createComplex((-341.686631), 0.0);
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.ONE.cos();
      List<Complex> list0 = complex6.ZERO.nthRoot(1220);
      Object object0 = complex0.readResolve();
      Complex complex7 = complex5.multiply(0.0);
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex8.ONE.negate();
      Complex complex10 = complex8.pow(complex1);
      Complex complex11 = complex5.pow(complex7);
      Complex complex12 = complex6.cos();
      Complex complex13 = complex6.asin();
      Complex complex14 = complex13.ONE.createComplex(1220, 0.0);
      double double0 = complex13.ZERO.abs();
      Complex complex15 = complex3.asin();
      Complex complex16 = complex13.exp();
      boolean boolean0 = complex6.equals(complex12);
      Complex complex17 = complex12.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(1.0E-6, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.ONE.negate();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex0.I.pow(complex3);
      Complex complex5 = complex1.asin();
      ComplexField complexField1 = complex4.ZERO.getField();
      Complex complex6 = complex4.NaN.divide(complex3);
      Complex complex7 = complex2.NaN.exp();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex0.sinh();
      double double0 = complex0.getReal();
      double double1 = 0.0;
      Complex complex10 = complex9.createComplex(1.0E-6, 0.0);
      boolean boolean0 = complex9.isInfinite();
      try { 
        complex10.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.multiply((-0.5));
      Complex complex3 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.I.createComplex(5919.65709952954, 5919.65709952954);
      Complex complex3 = complex0.NaN.acos();
      String string0 = complex0.toString();
      Complex complex4 = complex0.INF.divide(complex3);
      Complex complex5 = complex4.ZERO.multiply(complex0);
      int int0 = complex1.INF.hashCode();
      Object object1 = complex5.ONE.readResolve();
      Complex complex6 = complex0.ONE.tan();
      Complex complex7 = complex3.ONE.sinh();
      int int1 = complex3.INF.hashCode();
      Complex complex8 = complex6.ZERO.multiply((-1122.6895877905));
      Complex complex9 = complex5.NaN.multiply(complex3);
      Complex complex10 = complex5.I.negate();
      Object object2 = new Object();
      boolean boolean0 = complex0.equals(object2);
      Complex complex11 = complex0.atan();
      Complex complex12 = complex1.cos();
      Complex complex13 = complex12.I.pow(complex3);
      boolean boolean1 = complex12.isNaN();
      int int2 = complex6.hashCode();
      Complex complex14 = complex12.subtract(complex5);
      String string1 = complex8.toString();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.I.createComplex(1867.737117399513, 0.0);
      Complex complex4 = complex2.I.multiply(3750.655536912);
      Complex complex5 = complex2.cos();
      double double0 = complex0.getImaginary();
      double double1 = complex1.getImaginary();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex6.INF.atan();
      double double2 = complex1.abs();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex8.I.asin();
      double double3 = complex8.ONE.getArgument();
      ComplexField complexField0 = complex8.ZERO.getField();
      boolean boolean0 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.ONE.multiply((-2243.0));
      Complex complex5 = complex2.acos();
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex3.INF.multiply(0.0);
      Complex complex8 = complex3.multiply(complex6);
      List<Complex> list0 = complex2.ZERO.nthRoot(37);
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex8.multiply(complex1);
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = complex11.sinh();
      double double0 = complex3.getArgument();
      int int0 = complex4.hashCode();
      Complex complex14 = complex8.ONE.subtract(complex0);
      List<Complex> list1 = complex14.ONE.nthRoot(504);
      Complex complex15 = complex3.sqrt();
      double double1 = complex10.abs();
      boolean boolean0 = complex11.isNaN();
      Complex complex16 = complex0.subtract(complex11);
      Complex complex17 = complex12.multiply(complex13);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      int int0 = (-2607);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex3.ZERO.log();
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex3.log();
      Complex complex8 = complex7.ZERO.atan();
      Complex complex9 = complex1.I.add(complex2);
      Complex complex10 = complex9.INF.pow(complex5);
      Complex complex11 = complex10.ZERO.log();
      try { 
        complex1.ONE.nthRoot((-2607));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,607
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
