/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 01:00:35 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 0.0;
      Complex complex1 = new Complex(0.0, 0.0);
      double double1 = complex1.I.getArgument();
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex2.NaN.divide(complex0);
      String string0 = complex4.ONE.toString();
      Complex complex5 = complex0.atan();
      Object object1 = complex1.ONE.readResolve();
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = complex5.I.divide(complex4);
      double double2 = complex6.INF.getArgument();
      Complex complex8 = complex5.tan();
      Complex complex9 = complex8.ONE.cosh();
      double double3 = complex9.ZERO.getArgument();
      Complex complex10 = complex8.ZERO.tanh();
      List<Complex> list0 = complex2.nthRoot(5060);
      Complex complex11 = complex0.cos();
      // Undeclared exception!
      complex11.nthRoot(5060);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex1.ZERO.sqrt1z();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = new Complex(1830.8597, (-3661.51783));
      Complex complex6 = complex0.multiply(complex5);
      String string0 = complex6.NaN.toString();
      double double0 = complex6.abs();
      Complex complex7 = complex6.NaN.divide(complex0);
      Complex complex8 = complex5.createComplex((-2830.0), Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex5.INF.cosh();
      List<Complex> list0 = complex8.NaN.nthRoot(247);
      Complex complex11 = complex8.sqrt1z();
      double double1 = complex11.I.getArgument();
      boolean boolean0 = complex7.isNaN();
      double double2 = complex0.getReal();
      Complex complex12 = complex2.log();
      Complex complex13 = complex1.cosh();
      List<Complex> list1 = complex2.nthRoot(466);
      Complex complex14 = complex1.multiply((-2830.0));
      double double3 = complex2.getImaginary();
      Complex complex15 = Complex.INF;
      Complex complex16 = complex15.INF.cos();
      Complex complex17 = complex5.divide(complex15);
      int int0 = complex1.hashCode();
      Complex complex18 = complex11.cos();
      Complex complex19 = complex5.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = new Complex(2207.26531, (-2246.17423940999));
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.INF.multiply(complex1);
      Complex complex4 = complex1.ZERO.cosh();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex0.NaN.cosh();
      List<Complex> list0 = complex5.I.nthRoot(1);
      Complex complex8 = complex5.NaN.add(complex1);
      Complex complex9 = complex8.asin();
      Complex complex10 = complex9.ZERO.multiply(3.9736429850260626E-8);
      Complex complex11 = complex1.sin();
      List<Complex> list1 = complex11.ZERO.nthRoot(1);
      double double0 = complex11.getArgument();
      List<Complex> list2 = complex11.nthRoot(128);
      double double1 = complex5.NaN.abs();
      double double2 = complex1.getImaginary();
      Complex complex12 = complex5.cosh();
      Complex complex13 = complex12.ONE.sqrt();
      Complex complex14 = complex6.sinh();
      Complex complex15 = complex14.INF.sqrt();
      Complex complex16 = complex1.sinh();
      Complex complex17 = complex16.I.tan();
      Complex complex18 = complex0.I.sqrt();
      Complex complex19 = complex4.log();
      Complex complex20 = complex8.atan();
      Complex complex21 = complex7.atan();
      Complex complex22 = complex15.cosh();
      Complex complex23 = complex19.subtract(complex20);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex0.ZERO.negate();
      Complex complex4 = complex3.ONE.conjugate();
      int int0 = complex3.ZERO.hashCode();
      Complex complex5 = complex4.ONE.multiply(complex0);
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex6.ZERO.asin();
      Complex complex8 = complex1.I.sinh();
      Complex complex9 = complex8.ZERO.cosh();
      String string0 = complex6.NaN.toString();
      Complex complex10 = new Complex((-790.0), (-790.0));
      Complex complex11 = complex10.INF.tan();
      Complex complex12 = complex7.NaN.divide(complex2);
      Complex complex13 = complex4.ZERO.add(complex10);
      Complex complex14 = complex6.NaN.sin();
      Complex complex15 = complex0.sin();
      int int1 = complex4.hashCode();
      Object object0 = complex15.readResolve();
      boolean boolean0 = complex15.isInfinite();
      Complex complex16 = complex5.cos();
      int int2 = complex15.hashCode();
      Complex complex17 = complex9.createComplex((-790.0), (-790.0));
      Complex complex18 = complex11.tan();
      Complex complex19 = complex7.negate();
      Complex complex20 = complex12.divide(complex14);
      boolean boolean1 = complex2.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex1.ONE.asin();
      Complex complex4 = complex3.INF.negate();
      double double0 = complex0.abs();
      int int0 = complex0.ZERO.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.NaN.createComplex((-821.0539067559187), Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.atan();
      int int1 = complex0.hashCode();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex9 = complex6.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(2596.29368, (-0.7853981633974483));
      Complex complex1 = new Complex(4374.338101933, Double.NaN);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.conjugate();
      double double0 = complex2.abs();
      Complex complex4 = complex2.I.tanh();
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex7.INF.cosh();
      Complex complex9 = complex7.I.conjugate();
      Complex complex10 = complex9.INF.pow(complex6);
      Complex complex11 = complex9.sinh();
      Complex complex12 = complex11.ZERO.tan();
      int int0 = complex9.hashCode();
      Complex complex13 = complex0.sin();
      Complex complex14 = Complex.INF;
      Complex complex15 = complex14.asin();
      Complex complex16 = complex1.pow(complex14);
      double double1 = complex6.getArgument();
      Complex complex17 = complex16.cos();
      Complex complex18 = complex9.acos();
      Object object0 = complex10.readResolve();
      Complex complex19 = complex12.atan();
      Complex complex20 = complex14.atan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex0.I.sqrt();
      Complex complex4 = complex2.NaN.createComplex((-1948.3709089047202), 0.0);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex1.I.multiply(complex0);
      Complex complex7 = complex6.multiply(complex0);
      double double0 = complex0.getArgument();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex6.cosh();
      double double1 = complex5.getReal();
      double double2 = complex0.getArgument();
      List<Complex> list0 = complex9.nthRoot(2017);
      Object object0 = complex9.readResolve();
      String string0 = complex2.toString();
      double double3 = complex9.getArgument();
      Complex complex10 = complex9.pow(complex7);
      Complex complex11 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      List<Complex> list0 = complex1.I.nthRoot(10);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex1.ONE.negate();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex2.ONE.sinh();
      List<Complex> list1 = complex3.ONE.nthRoot(10);
      Complex complex7 = complex3.NaN.pow(complex1);
      Complex complex8 = complex2.acos();
      Complex complex9 = complex8.createComplex(0.0, 10);
      boolean boolean0 = complex0.equals(complex2);
      Complex complex10 = complex7.multiply(0.0);
      Complex complex11 = complex3.add(complex6);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex3 = complex0.asin();
      int int0 = complex3.ZERO.hashCode();
      String string0 = complex3.NaN.toString();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex0.negate();
      double double0 = complex2.getArgument();
      Complex complex6 = complex5.createComplex((-0.7853981633974483), (-0.7853981633974483));
      Complex complex7 = complex2.exp();
      Complex complex8 = complex1.I.acos();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      double double0 = complex1.INF.getArgument();
      Complex complex2 = complex1.NaN.multiply(1403.4);
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = complex0.multiply((-1256.43358));
      Complex complex5 = complex4.ZERO.log();
      double double1 = complex5.abs();
      Complex complex6 = complex5.multiply(0.6666666269302368);
      Complex complex7 = complex3.ZERO.cos();
      Complex complex8 = complex7.INF.pow(complex4);
      Complex complex9 = complex2.NaN.createComplex(1403.4, 1403.4);
      Complex complex10 = complex4.tan();
      Complex complex11 = complex5.subtract(complex10);
      Complex complex12 = complex3.I.sinh();
      String string0 = complex11.I.toString();
      Complex complex13 = complex11.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex14 = complex13.INF.atan();
      Complex complex15 = complex14.ONE.divide(complex2);
      Complex complex16 = complex5.asin();
      String string1 = complex3.toString();
      Complex complex17 = complex10.log();
      List<Complex> list0 = complex17.nthRoot(390);
      ComplexField complexField0 = complex0.getField();
      Complex complex18 = complex0.subtract(complex17);
      double double2 = complex18.getImaginary();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 175.26);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ONE.multiply(0.0);
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex3.INF.conjugate();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex5.ZERO.sin();
      Complex complex7 = complex0.sinh();
      double double0 = complex1.getImaginary();
      double double1 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sin();
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.createComplex(3741.39283, 3741.39283);
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex2.createComplex(3741.39283, 0.0);
      Complex complex7 = complex6.INF.cosh();
      Complex complex8 = complex3.tanh();
      double double0 = complex4.getImaginary();
      double double1 = complex0.getReal();
      Complex complex9 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-3427.483), (-837.11864331473));
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(2178.325275828, 2178.325275828);
      Complex complex1 = complex0.ONE.exp();
      try { 
        complex1.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.NaN.readResolve();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.asin();
      Object object1 = complex1.ONE.readResolve();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex1.NaN.sin();
      Complex complex5 = complex1.ONE.sinh();
      Complex complex6 = complex4.NaN.add(complex1);
      Complex complex7 = complex6.ZERO.multiply((-517.697395765));
      Complex complex8 = complex3.I.asin();
      Complex complex9 = complex1.NaN.acos();
      Complex complex10 = complex2.cosh();
      Complex complex11 = complex8.negate();
      Complex complex12 = complex3.atan();
      Complex complex13 = complex0.subtract(complex3);
      Complex complex14 = complex13.ONE.sin();
      ComplexField complexField0 = complex4.getField();
      Object object2 = complex3.readResolve();
      int int1 = complex13.hashCode();
      Complex complex15 = complex13.acos();
      ComplexField complexField1 = complex4.getField();
      Complex complex16 = complex3.divide(complex8);
      Complex complex17 = complex12.divide(complex3);
      Complex complex18 = complex8.asin();
      Object object3 = complex2.readResolve();
      Complex complex19 = complex3.sqrt1z();
      Complex complex20 = complex19.exp();
      Complex complex21 = Complex.ONE;
      Complex complex22 = complex13.subtract(complex21);
      Complex complex23 = complex12.tan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex0.INF.subtract(complex1);
      Complex complex4 = complex0.NaN.acos();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex2.ZERO.createComplex(0.0, 0.0);
      Complex complex7 = complex0.ZERO.subtract(complex2);
      Complex complex8 = complex6.I.sqrt1z();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex9.ZERO.divide(complex3);
      Complex complex11 = complex10.ZERO.multiply(complex9);
      Complex complex12 = complex4.I.negate();
      Complex complex13 = complex12.NaN.sin();
      Complex complex14 = complex4.ONE.conjugate();
      Complex complex15 = complex4.asin();
      Complex complex16 = complex3.add(complex0);
      Complex complex17 = complex3.ZERO.createComplex(418.069762, 1370.448204438);
      int int0 = complex15.ZERO.hashCode();
      double double0 = complex2.getImaginary();
      Complex complex18 = complex14.I.atan();
      Complex complex19 = complex16.asin();
      Complex complex20 = complex19.ONE.add(complex15);
      Complex complex21 = complex9.sin();
      Complex complex22 = complex21.subtract(complex0);
      Complex complex23 = complex4.acos();
      Complex complex24 = complex14.sqrt();
      Object object0 = new Object();
      boolean boolean0 = complex22.equals(object0);
      Complex complex25 = complex15.atan();
      Complex complex26 = complex12.atan();
      try { 
        complex26.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.conjugate();
      double double0 = complex6.ONE.abs();
      Complex complex7 = complex3.I.divide(complex1);
      double double1 = complex5.ZERO.getArgument();
      double double2 = complex0.getImaginary();
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex8.ONE.sinh();
      Complex complex10 = complex3.NaN.pow(complex0);
      Complex complex11 = complex3.createComplex(1.0, 0.0);
      Object object0 = complex5.readResolve();
      Complex complex12 = complex3.tanh();
      Complex complex13 = complex12.ONE.cos();
      Complex complex14 = complex8.log();
      Complex complex15 = complex8.multiply(1.0);
      Complex complex16 = complex5.atan();
      Complex complex17 = complex3.acos();
      Complex complex18 = complex17.asin();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-1024.344), (-1024.344));
      Complex complex1 = complex0.NaN.tan();
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.ONE.subtract(complex0);
      Complex complex4 = complex1.ZERO.pow(complex0);
      Complex complex5 = complex0.NaN.multiply(complex4);
      List<Complex> list0 = complex4.nthRoot(37);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex1.divide(complex6);
      Complex complex8 = complex7.INF.multiply(complex0);
      double double1 = complex7.NaN.abs();
      Complex complex9 = complex1.INF.add(complex3);
      Complex complex10 = complex1.subtract(complex6);
      Complex complex11 = complex4.NaN.atan();
      Complex complex12 = complex10.I.cosh();
      Complex complex13 = complex3.acos();
      double double2 = complex0.getReal();
      double double3 = complex1.ONE.abs();
      Complex complex14 = complex13.divide(complex10);
      Complex complex15 = complex14.ONE.pow(complex1);
      Complex complex16 = complex15.INF.add(complex0);
      boolean boolean0 = complex1.isNaN();
      List<Complex> list1 = complex3.nthRoot(37);
      Complex complex17 = complex4.exp();
      Complex complex18 = complex15.sin();
      boolean boolean1 = complex4.isInfinite();
      Complex complex19 = complex6.cos();
      Complex complex20 = complex16.asin();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(1386.41775285, 1.25);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.cosh();
      double double0 = complex2.I.getArgument();
      double double1 = complex2.ONE.getArgument();
      Complex complex3 = complex1.ONE.sin();
      double double2 = 740.127597636;
      Complex complex4 = complex1.ZERO.createComplex(740.127597636, 1386.41775285);
      Complex complex5 = complex2.negate();
      Complex complex6 = complex5.I.sinh();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.NaN.conjugate();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex0.sin();
      try { 
        complex10.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.conjugate();
      double double0 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.ONE.multiply((-522.615173226));
      Object object0 = complex4.I.readResolve();
      Complex complex5 = complex3.log();
      Complex complex6 = null;
      try { 
        complex5.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.ZERO.multiply(complex2);
      Complex complex4 = complex3.INF.subtract(complex1);
      Complex complex5 = complex0.I.tan();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.I.cosh();
      Complex complex8 = complex0.ZERO.conjugate();
      Complex complex9 = complex1.log();
      Complex complex10 = complex1.tan();
      Complex complex11 = complex10.ZERO.sinh();
      Complex complex12 = complex6.tanh();
      Complex complex13 = complex12.ONE.multiply((-2354.4815296345));
      Complex complex14 = complex10.INF.atan();
      Complex complex15 = complex2.divide(complex9);
      double double0 = complex10.NaN.abs();
      Complex complex16 = complex15.sqrt();
      Complex complex17 = complex1.acos();
      Complex complex18 = complex4.tanh();
      double double1 = complex18.ONE.abs();
      Complex complex19 = complex18.log();
      Complex complex20 = complex19.createComplex(1.0, 1.0);
      Complex complex21 = complex9.tan();
      Complex complex22 = complex20.ZERO.divide(complex17);
      Complex complex23 = complex16.ONE.cosh();
      Complex complex24 = complex22.NaN.sinh();
      boolean boolean0 = complex10.isNaN();
      Complex complex25 = complex15.pow(complex9);
      Complex complex26 = complex25.ZERO.sin();
      Complex complex27 = complex16.cosh();
      double double2 = complex1.getReal();
      Complex complex28 = complex6.sin();
      Complex complex29 = complex9.sqrt1z();
      boolean boolean1 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex1.INF.sin();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex4 = complex1.NaN.exp();
      Complex complex5 = complex1.INF.asin();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex4.sinh();
      int int0 = complex1.hashCode();
      Complex complex8 = complex7.NaN.atan();
      Complex complex9 = complex8.NaN.sinh();
      Complex complex10 = complex4.cosh();
      Object object0 = complex4.I.readResolve();
      List<Complex> list0 = complex10.ZERO.nthRoot(1);
      String string0 = complex10.ONE.toString();
      Complex complex11 = complex4.subtract(complex3);
      Complex complex12 = complex2.exp();
      Complex complex13 = complex6.tan();
      Complex complex14 = complex7.multiply(complex6);
      Complex complex15 = complex13.divide(complex4);
      Complex complex16 = complex15.NaN.tanh();
      Complex complex17 = complex15.multiply(complex12);
      Complex complex18 = complex7.cosh();
      Complex complex19 = complex1.createComplex(0.0, (-1.0));
      Complex complex20 = complex13.multiply(complex2);
      Complex complex21 = new Complex(0.0, 1);
      Complex complex22 = complex7.divide(complex21);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.conjugate();
      String string0 = complex1.toString();
      Complex complex6 = complex3.multiply(Double.NaN);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex1.sin();
      boolean boolean0 = complex6.isNaN();
      Complex complex9 = complex3.exp();
      Complex complex10 = complex7.cosh();
      Complex complex11 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.INF.tanh();
      Complex complex4 = complex3.INF.createComplex((-299.753), 1467.84211044764);
      boolean boolean0 = complex0.equals(complex1);
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = new Complex(0.0, (-1455.5239954426775));
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.ZERO.sinh();
      Complex complex6 = complex0.divide(complex3);
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex2.tanh();
      double double0 = complex8.getArgument();
      double double1 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      int int0 = 1;
      List<Complex> list0 = complex0.ZERO.nthRoot(1);
      double double0 = complex1.NaN.getArgument();
      String string0 = complex0.NaN.toString();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex2.INF.subtract(complex3);
      Complex complex6 = complex5.NaN.pow(complex4);
      Complex complex7 = Complex.ZERO;
      boolean boolean0 = complex1.equals(complex7);
      Complex complex8 = complex0.ONE.tanh();
      ComplexField complexField0 = complex1.ONE.getField();
      String string1 = complex2.toString();
      try { 
        complex1.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex0.I.cosh();
      List<Complex> list0 = complex0.nthRoot(1);
      int int0 = complex3.hashCode();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex7 = complex5.ONE.tan();
      Object object0 = complex0.NaN.readResolve();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex5.I.conjugate();
      Complex complex10 = complex1.exp();
      Complex complex11 = complex10.I.conjugate();
      Complex complex12 = complex11.NaN.asin();
      Complex complex13 = complex5.multiply((double) 1);
      Complex complex14 = Complex.ONE;
      Complex complex15 = complex0.pow(complex14);
      Complex complex16 = complex1.multiply((double) 1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex2.ONE.atan();
      String string0 = complex1.INF.toString();
      Complex complex4 = complex1.I.sqrt1z();
      Complex complex5 = complex0.I.exp();
      double double0 = complex0.NaN.getArgument();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.sqrt1z();
      String string1 = complex7.toString();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.ZERO.createComplex(Double.POSITIVE_INFINITY, 587.52520658773);
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      int int0 = complex2.ZERO.hashCode();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex4.cos();
      double double1 = complex5.ONE.abs();
      Object object1 = complex4.readResolve();
      Object object2 = complex2.readResolve();
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex6.add(complex3);
      Complex complex9 = complex8.ONE.conjugate();
      Complex complex10 = complex9.INF.log();
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex2.asin();
      Complex complex13 = complex6.I.cos();
      Complex complex14 = complex3.sqrt1z();
      Complex complex15 = complex12.cosh();
      Complex complex16 = complex3.sinh();
      Complex complex17 = complex16.INF.negate();
      Complex complex18 = complex17.asin();
      Complex complex19 = complex8.asin();
      Complex complex20 = complex10.negate();
      Complex complex21 = complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(1321.83, 1321.83);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex0.I.createComplex(1321.83, 1321.83);
      Complex complex5 = complex1.I.cos();
      double double0 = complex5.ZERO.abs();
      Complex complex6 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.I.tanh();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.cosh();
      double double1 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.add(complex2);
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.I.atan();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex1.acos();
      double double0 = complex3.INF.abs();
      Complex complex4 = complex0.sinh();
      double double1 = complex1.ZERO.getArgument();
      Complex complex5 = complex1.atan();
      ComplexField complexField1 = complex4.getField();
      double double2 = complex3.getImaginary();
      Complex complex6 = complex4.add(complex0);
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.I.subtract(complex1);
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex5.divide(complex4);
      Complex complex7 = complex0.INF.subtract(complex3);
      Complex complex8 = complex7.I.cosh();
      Complex complex9 = complex0.I.createComplex(517.99441, 517.99441);
      Complex complex10 = complex9.ZERO.tan();
      Complex complex11 = complex0.sinh();
      Complex complex12 = complex0.pow(complex8);
      Complex complex13 = complex4.sin();
      double double0 = complex9.getReal();
      Complex complex14 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ONE.abs();
      Complex complex1 = new Complex((-952.00046372), 3753.6742);
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.ZERO.asin();
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex0.multiply(complex1);
      Object object0 = complex4.ONE.readResolve();
      Object object1 = complex1.ZERO.readResolve();
      Complex complex5 = complex2.multiply(complex0);
      String string0 = complex5.NaN.toString();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.ZERO.cos();
      Complex complex8 = complex1.asin();
      Complex complex9 = complex8.ZERO.acos();
      boolean boolean0 = complex8.isInfinite();
      Object object2 = complex1.readResolve();
      Complex complex10 = complex4.multiply(0.0);
      Complex complex11 = complex8.tan();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getArgument();
      Complex complex1 = new Complex(588.558050898, 888.236053);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex0.I.cos();
      Complex complex5 = complex3.NaN.pow(complex1);
      Complex complex6 = complex3.ZERO.atan();
      double double1 = complex0.abs();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex2.multiply(complex7);
      Complex complex11 = complex0.atan();
      Complex complex12 = complex2.log();
      boolean boolean0 = complex10.isInfinite();
      Complex complex13 = complex12.createComplex(588.558050898, 3584.0);
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.125, 1816.1301297);
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex0.ONE.pow(complex2);
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex5.I.pow(complex4);
      String string0 = complex5.I.toString();
      Complex complex8 = complex3.pow(complex5);
      double double0 = complex0.abs();
      Complex complex9 = complex2.cos();
      try { 
        complex6.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      String string0 = complex1.ZERO.toString();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex1.NaN.tan();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex4.INF.cosh();
      Complex complex7 = complex2.divide(complex5);
      int int0 = complex1.hashCode();
      Complex complex8 = complex1.multiply(complex4);
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex7.NaN.add(complex3);
      Complex complex11 = complex10.cosh();
      Complex complex12 = complex5.divide(complex2);
      String string1 = complex4.toString();
      Complex complex13 = complex0.ONE.add(complex4);
      try { 
        complex7.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2002.7528257689717, 2002.7528257689717);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.createComplex(Double.NaN, (-14.949375095269685));
      Complex complex4 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 935.6472129903218);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.ZERO.tanh();
      ComplexField complexField0 = complex0.ONE.getField();
      ComplexField complexField1 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      int int0 = complex2.INF.hashCode();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.INF.acos();
      int int1 = complex3.ONE.hashCode();
      Complex complex5 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex0.ZERO.sinh();
      Complex complex5 = complex4.ZERO.asin();
      String string0 = complex0.INF.toString();
      Complex complex6 = complex4.ZERO.log();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.isNaN();
      Complex complex7 = complex5.divide(complex1);
      Complex complex8 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.INF.subtract(complex2);
      Complex complex4 = complex3.negate();
      String string0 = complex2.toString();
      Complex complex5 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-331.60452016964), (-331.60452016964));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex2.ZERO.exp();
      Complex complex5 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.INF.exp();
      Complex complex5 = complex0.NaN.sinh();
      Complex complex6 = complex3.NaN.sin();
      double double0 = complex0.getReal();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex8.negate();
      Complex complex10 = complex5.pow(complex8);
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.sqrt1z();
      Object object1 = complex1.readResolve();
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.ZERO.multiply(1.0);
      Complex complex3 = complex0.ONE.asin();
      List<Complex> list0 = complex1.NaN.nthRoot(29);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.NaN.atan();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.tan();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex6.I.multiply(complex8);
      Complex complex10 = complex4.sqrt();
      boolean boolean0 = complex7.isNaN();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex11 = complex1.multiply(Double.NaN);
      boolean boolean1 = complex11.equals(complex0);
      Complex complex12 = complex6.sinh();
      double double0 = complex11.abs();
      Complex complex13 = complex8.exp();
      Complex complex14 = complex13.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.I.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = new Complex(0.0, 1.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.divide(complex1);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.ZERO;
      boolean boolean1 = complex1.equals(complex2);
      Complex complex3 = Complex.ONE;
      boolean boolean2 = complex2.equals(complex3);
      Complex complex4 = complex2.add(complex1);
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex3.log();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex5.multiply(complex0);
      Complex complex9 = complex3.add(complex5);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.NaN.abs();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      List<Complex> list0 = complex0.nthRoot(2148);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.INF.sin();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-1116.6376268), (-1116.6376268));
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2002.7528257689717, 2002.7528257689717);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.createComplex(Double.NaN, 0.0);
      Complex complex4 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.exp();
      String string0 = complex0.toString();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ZERO.pow(complex2);
      Complex complex5 = complex1.multiply(complex3);
      Complex complex6 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.INF.createComplex(0.0, (-1792.88));
      Complex complex5 = complex1.ZERO.divide(complex0);
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex6 = complex0.multiply(complex2);
      Complex complex7 = complex2.ONE.pow(complex1);
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex4.subtract(complex0);
      String string0 = complex9.toString();
      Complex complex10 = complex9.ZERO.sqrt1z();
      double double0 = complex2.I.getArgument();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.ONE.readResolve();
      Object object1 = complex0.INF.readResolve();
      String string0 = complex0.ZERO.toString();
      Object object2 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object2);
      Object object3 = complex0.readResolve();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(1157.805524484356, 2382.03);
      double double0 = complex0.getReal();
      Complex complex2 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.multiply(0.0);
      String string0 = complex2.toString();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.ZERO.multiply(complex2);
      Complex complex4 = complex0.atan();
      double double0 = complex2.getArgument();
      double double1 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.multiply(2.0);
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex3 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.INF.createComplex(6.283185307179586, 6.283185307179586);
      boolean boolean0 = complex0.equals("");
      ComplexField complexField0 = complex0.getField();
      boolean boolean1 = complex0.equals(complex1);
      Complex complex3 = complex1.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex4 = complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.I.tanh();
      try { 
        complex0.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.multiply((-269.0));
      List<Complex> list0 = complex1.nthRoot(1380);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.I.cos();
      double double0 = complex0.getReal();
      Complex complex4 = complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.atan();
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex0.ZERO.pow(complex1);
      Complex complex4 = complex0.INF.pow(complex3);
      Complex complex5 = complex1.ZERO.add(complex3);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.INF.atan();
      Complex complex8 = complex3.cosh();
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex8.ZERO.sin();
      Complex complex10 = complex9.INF.multiply((-1.0));
      double double0 = complex10.INF.getArgument();
      Complex complex11 = complex10.divide(complex6);
      Complex complex12 = complex0.tanh();
      Complex complex13 = complex12.ZERO.cosh();
      Complex complex14 = complex2.pow(complex10);
      Complex complex15 = complex6.ONE.sin();
      String string0 = complex8.toString();
      ComplexField complexField1 = complex0.getField();
      String string1 = complex3.toString();
      Complex complex16 = complex3.multiply(1.9699272335463627E-8);
      Complex complex17 = complex7.acos();
      boolean boolean0 = complex4.equals(complex2);
      Complex complex18 = complex9.I.pow(complex3);
      Complex complex19 = complex0.ONE.exp();
      Complex complex20 = complex11.sqrt();
      double double1 = complex20.I.getArgument();
      Complex complex21 = complex16.multiply(Double.POSITIVE_INFINITY);
      Complex complex22 = complex19.conjugate();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.INF.conjugate();
      double double0 = complex1.abs();
      Complex complex4 = complex1.INF.log();
      Complex complex5 = complex2.sqrt1z();
      ComplexField complexField0 = complex5.ONE.getField();
      Complex complex6 = complex5.INF.tan();
      String string0 = complex6.toString();
      boolean boolean0 = complex5.isNaN();
      int int0 = complex1.hashCode();
      Complex complex7 = complex2.acos();
      String string1 = complex2.toString();
      Complex complex8 = complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tanh();
      List<Complex> list0 = complex0.ONE.nthRoot(288);
      Complex complex2 = complex0.INF.log();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex1.NaN.divide(complex3);
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex2.INF.exp();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex1.sqrt1z();
      double double0 = complex8.abs();
      Complex complex9 = complex8.sqrt();
      Object object0 = complex2.INF.readResolve();
      Complex complex10 = complex9.asin();
      List<Complex> list1 = complex1.ONE.nthRoot(288);
      Complex complex11 = complex0.createComplex(Double.NaN, Double.NaN);
      double double1 = complex7.getReal();
      boolean boolean0 = complex3.isInfinite();
      Complex complex12 = complex6.acos();
      int int0 = complex7.hashCode();
      Complex complex13 = complex9.atan();
      Complex complex14 = complex13.I.atan();
      ComplexField complexField0 = complex13.getField();
      double double2 = complex8.getImaginary();
      Complex complex15 = complex1.createComplex(288, 1.5707963267948966);
      double double3 = complex10.getArgument();
      Complex complex16 = complex13.atan();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(27.7, 195.0);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex1.cos();
      Complex complex5 = complex0.NaN.tan();
      Complex complex6 = complex4.ONE.negate();
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = complex1.INF.negate();
      double double0 = complex4.abs();
      Complex complex9 = complex1.multiply(27.7);
      Complex complex10 = complex9.atan();
      Complex complex11 = complex5.sqrt();
      Complex complex12 = complex11.ZERO.sinh();
      Object object0 = complex10.readResolve();
      Complex complex13 = complex12.ONE.tan();
      boolean boolean0 = complex3.equals(complex11);
      Complex complex14 = complex2.sqrt1z();
      Object object1 = complex5.readResolve();
      Complex complex15 = complex1.exp();
      Complex complex16 = complex3.acos();
      Complex complex17 = complex16.ONE.cosh();
      boolean boolean1 = complex2.equals(complex12);
      Complex complex18 = complex1.sinh();
      Complex complex19 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex1.NaN.sin();
      Complex complex4 = complex1.I.sinh();
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex0.INF.cos();
      Complex complex7 = complex6.NaN.multiply(complex0);
      Complex complex8 = complex6.createComplex(0.0, 3404.023975039373);
      Complex complex9 = complex0.I.log();
      Complex complex10 = complex0.ONE.acos();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex1.isInfinite();
      Complex complex11 = complex8.sqrt();
      Complex complex12 = complex5.sqrt1z();
      Complex complex13 = complex6.cosh();
      List<Complex> list0 = complex10.nthRoot(1430);
      Complex complex14 = complex3.cosh();
      int int1 = complex3.hashCode();
      Complex complex15 = complex13.negate();
      Complex complex16 = complex15.INF.asin();
      Complex complex17 = complex5.acos();
      Complex complex18 = complex13.sqrt();
      Complex complex19 = complex2.tanh();
      Complex complex20 = complex4.multiply(complex6);
      Complex complex21 = complex0.cosh();
      ComplexField complexField0 = complex8.getField();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.negate();
      Object object0 = complex1.readResolve();
      int int1 = complex2.hashCode();
      Complex complex3 = complex2.ONE.multiply((-3033.62942641239));
      Complex complex4 = complex2.ZERO.sin();
      Complex complex5 = complex2.multiply(0.0);
      Complex complex6 = complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex1.ONE.tanh();
      double double0 = complex3.I.getArgument();
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex0.cosh();
      int int0 = complex0.hashCode();
      Complex complex6 = complex1.NaN.conjugate();
      Complex complex7 = complex6.ONE.multiply(complex3);
      Complex complex8 = complex7.INF.multiply(1219.84251);
      Complex complex9 = complex8.ONE.atan();
      double double1 = complex5.abs();
      Complex complex10 = complex2.sin();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.acos();
      int int0 = complex0.hashCode();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex2.multiply(complex3);
      Complex complex6 = complex3.I.cosh();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex0.isNaN();
      double double0 = complex4.getArgument();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex4.NaN.atan();
      Complex complex9 = complex7.I.sqrt1z();
      try { 
        complex7.NaN.nthRoot((-635));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -635
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
