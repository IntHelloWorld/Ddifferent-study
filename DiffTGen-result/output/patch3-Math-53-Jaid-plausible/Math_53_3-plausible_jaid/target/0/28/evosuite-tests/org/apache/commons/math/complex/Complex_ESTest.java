/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 01:00:34 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      double double0 = complex1.ONE.abs();
      List<Complex> list0 = complex1.I.nthRoot(37);
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex1.atan();
      int int0 = complex3.ZERO.hashCode();
      Complex complex5 = complex2.log();
      Object object0 = complex5.INF.readResolve();
      List<Complex> list1 = complex0.nthRoot(37);
      Object object1 = complex0.readResolve();
      Complex complex6 = complex0.exp();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex7 = complex1.ZERO.createComplex(1.0, 949.02264452226);
      Complex complex8 = complex6.NaN.sqrt1z();
      Complex complex9 = complex1.negate();
      Complex complex10 = complex9.I.tan();
      ComplexField complexField1 = complex6.getField();
      boolean boolean0 = complex1.isInfinite();
      Complex complex11 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex2.negate();
      double double0 = complex4.ONE.getArgument();
      Complex complex5 = complex0.createComplex(2887.28381775864, (-120.82183980844));
      Complex complex6 = complex5.INF.acos();
      Complex complex7 = complex5.ONE.cos();
      Complex complex8 = complex5.subtract(complex1);
      Complex complex9 = complex8.I.createComplex(2887.28381775864, (-120.82183980844));
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex10.INF.tan();
      Complex complex12 = complex5.pow(complex9);
      Complex complex13 = complex0.I.sqrt();
      try { 
        complex7.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.log();
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex2.I.createComplex(808.5243380284, (-54.1677854315));
      Complex complex4 = complex1.ONE.cos();
      Complex complex5 = complex1.ONE.multiply((-171.744));
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.sqrt();
      double double0 = complex5.getReal();
      Complex complex8 = complex3.ZERO.cosh();
      int int1 = complex4.I.hashCode();
      double double1 = complex3.abs();
      Complex complex9 = complex6.createComplex(2.0, (-1026.167578086));
      Complex complex10 = complex9.ONE.sqrt1z();
      Complex complex11 = complex9.NaN.tan();
      Complex complex12 = complex11.I.pow(complex7);
      Complex complex13 = complex6.acos();
      List<Complex> list0 = complex4.nthRoot(3507);
      Complex complex14 = complex6.sqrt1z();
      // Undeclared exception!
      complex0.ONE.nthRoot(3507);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(1334.0);
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex4.ONE.negate();
      Complex complex7 = complex0.I.sin();
      Complex complex8 = complex7.ZERO.exp();
      Complex complex9 = complex0.ONE.exp();
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex2.tan();
      Complex complex12 = complex0.NaN.pow(complex10);
      Complex complex13 = complex3.createComplex(1119.9989360262, 1334.0);
      Complex complex14 = complex13.sin();
      Complex complex15 = complex14.sinh();
      Complex complex16 = complex15.sqrt1z();
      Complex complex17 = complex15.negate();
      Complex complex18 = complex2.divide(complex0);
      Complex complex19 = complex18.ZERO.multiply(complex1);
      Complex complex20 = complex0.NaN.sqrt();
      ComplexField complexField0 = complex14.getField();
      double double0 = complex18.getArgument();
      boolean boolean0 = complex13.isNaN();
      Complex complex21 = complex0.cos();
      Complex complex22 = complex3.sqrt1z();
      Complex complex23 = complex13.tanh();
      int int0 = complex12.hashCode();
      double double1 = complex9.abs();
      double double2 = complex5.getImaginary();
      Complex complex24 = complex1.tan();
      Complex complex25 = complex24.sqrt();
      Complex complex26 = complex23.createComplex((-1277.189171973666), 2540.9006489919066);
      Complex complex27 = complex18.subtract(complex17);
      double double3 = complex15.abs();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(122.5, 122.5);
      Complex complex1 = complex0.ONE.multiply(2.0);
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.INF.acos();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.ZERO.abs();
      boolean boolean1 = complex0.equals("(0.0, 0.0)");
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex3.ONE.asin();
      Complex complex6 = complex5.multiply(complex1);
      Complex complex7 = complex2.ZERO.pow(complex1);
      Complex complex8 = complex2.ONE.negate();
      boolean boolean2 = complex3.equals(complex1);
      Complex complex9 = complex8.INF.exp();
      Complex complex10 = complex8.ZERO.acos();
      Complex complex11 = complex8.negate();
      Complex complex12 = complex2.conjugate();
      double double1 = complex8.getReal();
      Complex complex13 = complex12.tanh();
      double double2 = complex10.getImaginary();
      Complex complex14 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex((-1700.1566), (-1700.1566));
      double double0 = complex0.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cos();
      ComplexField complexField0 = complex0.getField();
      String string0 = complex0.ONE.toString();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex4.ONE.subtract(complex2);
      double double0 = complex6.INF.getArgument();
      Complex complex7 = complex6.add(complex5);
      Complex complex8 = complex7.INF.sinh();
      Complex complex9 = complex1.INF.conjugate();
      Complex complex10 = complex2.add(complex1);
      Complex complex11 = complex3.INF.sqrt();
      double double1 = complex11.INF.getArgument();
      Complex complex12 = complex11.INF.tanh();
      Complex complex13 = complex10.I.asin();
      Complex complex14 = complex13.ONE.divide(complex1);
      Complex complex15 = complex10.cos();
      Complex complex16 = complex10.ONE.multiply((-1.7168146928204135));
      String string1 = complex16.ONE.toString();
      Complex complex17 = complex10.conjugate();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex18 = complex3.multiply(complex15);
      Complex complex19 = complex2.asin();
      Complex complex20 = complex4.acos();
      ComplexField complexField1 = complex3.getField();
      ComplexField complexField2 = complex15.getField();
      Complex complex21 = complex9.multiply(complex15);
      Complex complex22 = complex19.sin();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.INF.negate();
      int int0 = complex1.hashCode();
      Complex complex4 = complex2.log();
      try { 
        complex4.NaN.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex6.ZERO.sinh();
      Complex complex8 = complex7.I.multiply(complex4);
      Complex complex9 = complex5.divide(complex4);
      double double0 = complex6.ZERO.getArgument();
      Complex complex10 = complex9.exp();
      Object object0 = complex5.readResolve();
      String string0 = complex0.ZERO.toString();
      Complex complex11 = complex6.sqrt1z();
      Complex complex12 = complex3.log();
      Complex complex13 = complex0.negate();
      Complex complex14 = complex12.conjugate();
      boolean boolean0 = complex12.isNaN();
      Complex complex15 = complex7.acos();
      List<Complex> list0 = complex15.nthRoot(1912);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      double double0 = complex0.ZERO.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.I.add(complex1);
      Complex complex4 = complex3.ONE.sinh();
      ComplexField complexField1 = complex3.I.getField();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex4.I.exp();
      Complex complex7 = complex5.INF.add(complex2);
      Complex complex8 = complex5.ONE.cosh();
      int int0 = complex6.hashCode();
      Complex complex9 = complex8.ZERO.subtract(complex3);
      Complex complex10 = complex1.multiply(complex5);
      Complex complex11 = complex4.asin();
      Complex complex12 = complex11.ONE.sin();
      Complex complex13 = complex3.NaN.subtract(complex5);
      Complex complex14 = complex6.conjugate();
      boolean boolean1 = complex7.equals(complex10);
      Complex complex15 = complex7.cos();
      Complex complex16 = complex10.cos();
      double double1 = complex3.getImaginary();
      Complex complex17 = complex3.multiply(complex5);
      int int1 = complex13.ONE.hashCode();
      double double2 = complex8.getImaginary();
      Complex complex18 = complex14.multiply(complex16);
      boolean boolean2 = complex13.equals(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.I.multiply(6.283185307179586);
      Complex complex3 = complex1.I.createComplex((-1931.91613872), (-0.5));
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex4.divide(complex0);
      Complex complex7 = new Complex(920.0, 1545.497176858256);
      Complex complex8 = complex7.exp();
      try { 
        complex7.NaN.nthRoot((-1675));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,675
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = new Complex((-32.0), 0.0);
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.divide(complex3);
      Complex complex6 = complex3.divide(complex4);
      ComplexField complexField0 = complex6.ZERO.getField();
      Complex complex7 = complex0.conjugate();
      boolean boolean0 = complex3.equals(complex7);
      Complex complex8 = complex5.tanh();
      boolean boolean1 = complex0.isInfinite();
      Complex complex9 = complex6.tan();
      Complex complex10 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-7.44321345601866E-11), 0.6299605249474366);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.I.sqrt();
      Complex complex4 = complex2.INF.log();
      int int0 = complex4.NaN.hashCode();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex2.ONE.log();
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex1.ZERO.divide(complex0);
      Complex complex9 = complex8.ONE.subtract(complex4);
      Complex complex10 = complex8.pow(complex1);
      Complex complex11 = complex0.multiply(complex1);
      Complex complex12 = complex0.ONE.conjugate();
      Complex complex13 = complex0.log();
      Complex complex14 = complex13.NaN.conjugate();
      Complex complex15 = complex11.sinh();
      ComplexField complexField0 = complex1.getField();
      Complex complex16 = complex11.I.negate();
      Complex complex17 = complex0.NaN.acos();
      Complex complex18 = complex2.negate();
      Complex complex19 = complex0.tanh();
      Object object0 = complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 212.5082941588;
      Complex complex1 = complex0.NaN.multiply(212.5082941588);
      int int0 = 1;
      List<Complex> list0 = complex0.I.nthRoot(1);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-298.30283324), (-298.30283324));
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex0.divide(complex1);
      ComplexField complexField0 = complex2.ONE.getField();
      double double0 = complex4.NaN.abs();
      Complex complex5 = complex1.ONE.negate();
      Complex complex6 = complex1.NaN.multiply(complex5);
      Object object0 = complex6.I.readResolve();
      Complex complex7 = complex6.I.tanh();
      Complex complex8 = complex5.NaN.negate();
      Complex complex9 = complex2.sin();
      Complex complex10 = complex9.ONE.conjugate();
      Complex complex11 = complex10.NaN.exp();
      String string0 = complex9.INF.toString();
      Complex complex12 = complex9.log();
      Complex complex13 = complex9.sqrt();
      Complex complex14 = complex9.atan();
      double double1 = complex5.getReal();
      double double2 = complex13.getArgument();
      List<Complex> list0 = complex13.nthRoot(17);
      Complex complex15 = complex10.acos();
      Complex complex16 = complex10.pow(complex7);
      boolean boolean0 = complex7.isNaN();
      boolean boolean1 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.NaN.multiply(complex0);
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex1.multiply(0.0);
      boolean boolean0 = complex2.equals(complex1);
      Complex complex6 = complex5.conjugate();
      double double0 = complex6.I.abs();
      Complex complex7 = complex3.acos();
      boolean boolean1 = complex5.equals(complex4);
      Complex complex8 = complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.atan();
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex1.I.tan();
      Complex complex4 = complex0.createComplex(0.0, 674.681917164);
      Complex complex5 = complex0.divide(complex4);
      ComplexField complexField0 = complex5.I.getField();
      Complex complex6 = complex5.I.divide(complex4);
      Complex complex7 = complex4.exp();
      Complex complex8 = complex7.I.tan();
      int int1 = complex0.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex9 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(1040.3518756, 1040.3518756);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.NaN.asin();
      double double0 = complex2.I.abs();
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex3.ONE.subtract(complex1);
      Complex complex5 = complex0.tan();
      Object object0 = complex5.ZERO.readResolve();
      Complex complex6 = complex1.tanh();
      int int0 = complex1.hashCode();
      double double1 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.createComplex((-1.0), (-1.0));
      Complex complex3 = complex1.createComplex((-1.0), (-1.0));
      Complex complex4 = complex1.divide(complex3);
      double double0 = complex3.abs();
      double double1 = complex2.abs();
      double double2 = complex3.abs();
      Complex complex5 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex4.NaN.sqrt1z();
      Complex complex6 = complex5.NaN.add(complex1);
      Object object0 = complex0.readResolve();
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex1.ZERO.acos();
      Complex complex9 = complex7.sin();
      Complex complex10 = complex2.acos();
      Complex complex11 = complex10.subtract(complex3);
      Complex complex12 = complex2.pow(complex4);
      Complex complex13 = complex12.atan();
      Complex complex14 = complex10.subtract(complex2);
      double double0 = complex14.ONE.abs();
      Complex complex15 = complex0.INF.pow(complex13);
      Complex complex16 = complex8.log();
      double double1 = complex9.getImaginary();
      Complex complex17 = complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex1.NaN.sqrt1z();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex2.NaN.divide(complex0);
      int int0 = complex3.NaN.hashCode();
      Complex complex6 = complex1.ZERO.exp();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex7.I.multiply(complex6);
      Complex complex9 = complex0.subtract(complex6);
      Object object0 = complex1.readResolve();
      Complex complex10 = complex6.sinh();
      double double1 = complex9.I.abs();
      boolean boolean0 = complex4.isInfinite();
      Complex complex11 = complex9.exp();
      Complex complex12 = complex1.ONE.add(complex3);
      List<Complex> list0 = complex9.nthRoot(1);
      Complex complex13 = complex3.createComplex(1, Double.POSITIVE_INFINITY);
      Complex complex14 = new Complex(2.0, Double.POSITIVE_INFINITY);
      Complex complex15 = complex12.add(complex14);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.createComplex((-310.326116243759), Double.NaN);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ONE.multiply(complex0);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex5.add(complex1);
      Object object0 = complex2.readResolve();
      boolean boolean1 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      String string0 = complex1.ONE.toString();
      Complex complex2 = complex0.I.multiply(1084.2746812372034);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.INF.sinh();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex0.I.add(complex6);
      double double0 = complex5.I.abs();
      Complex complex8 = complex4.negate();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex9.INF.acos();
      Complex complex11 = complex0.tanh();
      Complex complex12 = complex11.sqrt1z();
      Complex complex13 = complex3.tanh();
      double double1 = complex12.abs();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Object object0 = complex1.ZERO.readResolve();
      double double0 = complex0.NaN.abs();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex1.createComplex((-1669.344), (-106.96328760338203));
      double double1 = complex3.I.abs();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.cos();
      String string0 = complex4.toString();
      Complex complex6 = complex1.conjugate();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex0.ONE.tanh();
      Complex complex9 = complex7.INF.sin();
      Complex complex10 = complex1.divide(complex2);
      double double2 = complex0.getImaginary();
      double double3 = complex6.getArgument();
      Complex complex11 = complex1.negate();
      Complex complex12 = complex11.ZERO.sqrt();
      Object object1 = complex12.NaN.readResolve();
      boolean boolean1 = complex3.isNaN();
      double double4 = complex6.getImaginary();
      Complex complex13 = complex3.tan();
      Complex complex14 = complex13.I.tanh();
      try { 
        complex9.nthRoot((-424));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -424
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex1.ZERO.sqrt();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.INF.tan();
      int int0 = complex3.hashCode();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex1.ZERO.sinh();
      Complex complex8 = complex6.multiply((-791.280441819057));
      int int1 = complex8.I.hashCode();
      double double0 = complex1.getImaginary();
      Complex complex9 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex0.log();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex5.negate();
      Complex complex8 = complex0.subtract(complex5);
      double double0 = complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-1976.129995146252), (-1976.129995146252));
      Complex complex1 = complex0.negate();
      Object object0 = complex1.INF.readResolve();
      Object object1 = complex1.readResolve();
      double double0 = complex0.getReal();
      double double1 = complex1.getArgument();
      Complex complex2 = null;
      try { 
        complex1.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 13.07;
      Complex complex0 = new Complex(13.07, 0.0);
      Complex complex1 = null;
      try { 
        complex0.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex3.ZERO.subtract(complex1);
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex1.ZERO.sqrt1z();
      Complex complex7 = complex1.ZERO.multiply(complex6);
      Complex complex8 = complex2.NaN.atan();
      Complex complex9 = complex8.I.sinh();
      Complex complex10 = complex6.NaN.multiply(complex9);
      Complex complex11 = complex3.NaN.createComplex(420.337589, 420.337589);
      Complex complex12 = complex11.I.add(complex3);
      double double0 = complex1.getArgument();
      double double1 = complex0.getArgument();
      Complex complex13 = complex1.conjugate();
      Complex complex14 = complex1.tan();
      Complex complex15 = complex0.cosh();
      Complex complex16 = complex15.ONE.subtract(complex7);
      Complex complex17 = complex15.ZERO.cosh();
      Complex complex18 = complex17.ONE.multiply(0.0);
      Complex complex19 = complex2.log();
      Complex complex20 = complex0.sin();
      Complex complex21 = complex1.tanh();
      Complex complex22 = complex21.INF.multiply(complex19);
      Complex complex23 = complex12.atan();
      Complex complex24 = complex23.divide(complex11);
      double double2 = complex19.getImaginary();
      Object object0 = complex19.readResolve();
      Complex complex25 = complex4.sqrt1z();
      Complex complex26 = complex24.sin();
      Complex complex27 = new Complex(Double.NaN, 0.0);
      Complex complex28 = complex5.divide(complex27);
      Complex complex29 = complex8.sqrt1z();
      Complex complex30 = complex12.multiply((-950.11082418137));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-4236.7313), (-4236.7313));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.createComplex((-1213.0), (-4236.7313));
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.ONE.multiply((-4236.7313));
      Complex complex5 = complex2.cosh();
      int int0 = complex5.hashCode();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex3.cosh();
      double double0 = complex2.INF.getArgument();
      Complex complex8 = complex6.acos();
      Object object0 = complex8.NaN.readResolve();
      Complex complex9 = complex3.ZERO.add(complex2);
      List<Complex> list0 = complex2.nthRoot(37);
      boolean boolean0 = complex6.isNaN();
      Complex complex10 = complex0.createComplex((-1213.0), (-1213.0));
      Complex complex11 = complex7.asin();
      Complex complex12 = complex10.log();
      Complex complex13 = complex6.conjugate();
      boolean boolean1 = complex7.equals(complex8);
      Complex complex14 = complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.subtract(complex2);
      Complex complex6 = complex2.sin();
      Complex complex7 = complex4.INF.exp();
      Complex complex8 = complex5.ONE.divide(complex3);
      Complex complex9 = complex5.INF.cosh();
      Complex complex10 = complex2.divide(complex0);
      double double0 = complex5.INF.abs();
      Complex complex11 = complex3.I.negate();
      Complex complex12 = complex8.cos();
      Complex complex13 = complex8.pow(complex0);
      String string0 = complex0.toString();
      boolean boolean0 = complex8.isInfinite();
      Complex complex14 = complex3.cosh();
      Complex complex15 = complex1.asin();
      Complex complex16 = complex15.cosh();
      Complex complex17 = complex10.sinh();
      int int0 = complex17.ZERO.hashCode();
      Complex complex18 = complex13.add(complex3);
      Complex complex19 = complex18.ONE.add(complex13);
      Complex complex20 = complex9.multiply(complex17);
      Complex complex21 = complex0.atan();
      Complex complex22 = complex4.sinh();
      Complex complex23 = complex6.divide(complex14);
      Complex complex24 = complex13.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.negate();
      double double0 = complex1.ONE.getArgument();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex1.isInfinite();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.I.divide(complex0);
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex5.I.multiply((-1889.6466647932));
      Complex complex7 = complex1.NaN.negate();
      double double1 = complex5.I.abs();
      Object object1 = complex1.readResolve();
      Complex complex8 = complex3.log();
      Complex complex9 = complex8.exp();
      double double2 = complex9.I.abs();
      double double3 = complex0.getArgument();
      Complex complex10 = complex6.ONE.cosh();
      Object object2 = complex10.readResolve();
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex2.INF.asin();
      Complex complex13 = complex12.ZERO.log();
      Complex complex14 = complex6.pow(complex5);
      Complex complex15 = complex7.NaN.sin();
      boolean boolean2 = complex2.isNaN();
      Complex complex16 = complex8.acos();
      Complex complex17 = complex8.subtract(complex3);
      Complex complex18 = complex6.conjugate();
      Complex complex19 = complex8.asin();
      Complex complex20 = complex7.conjugate();
      Complex complex21 = complex3.subtract(complex20);
      int int0 = complex21.ZERO.hashCode();
      Complex complex22 = complex19.cosh();
      Complex complex23 = complex14.sinh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.ZERO.negate();
      Complex complex4 = complex3.ONE.asin();
      String string0 = complex0.toString();
      boolean boolean0 = complex3.isNaN();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.I.sqrt();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex1.ONE.asin();
      Complex complex10 = complex1.pow(complex2);
      Complex complex11 = complex8.add(complex2);
      Complex complex12 = complex8.acos();
      Complex complex13 = complex3.createComplex(2.0, 2.0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply((-2935.28799));
      Complex complex3 = complex1.ONE.subtract(complex0);
      Complex complex4 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.INF.createComplex((-312.9841265505804), (-312.9841265505804));
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex1.INF.createComplex(Double.NaN, (-312.9841265505804));
      Complex complex4 = complex2.ONE.sinh();
      double double0 = complex0.getReal();
      int int0 = complex1.hashCode();
      Complex complex5 = complex1.tan();
      double double1 = complex2.getReal();
      Complex complex6 = complex2.pow(complex0);
      boolean boolean0 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex1.ZERO.createComplex(Double.NaN, Double.NaN);
      Complex complex4 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(2.0, (-1728.5386003));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex0.subtract(complex1);
      double double0 = complex0.getReal();
      Complex complex4 = complex3.ONE.multiply(complex0);
      String string0 = complex3.toString();
      double double1 = complex3.getReal();
      boolean boolean0 = complex2.isInfinite();
      Complex complex5 = complex3.divide(complex0);
      Object object0 = complex2.I.readResolve();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex2.add(complex7);
      Complex complex9 = complex5.divide(complex6);
      Complex complex10 = complex8.asin();
      Complex complex11 = complex10.I.acos();
      Complex complex12 = complex7.INF.conjugate();
      Complex complex13 = complex5.tan();
      Complex complex14 = complex10.multiply(0.0);
      boolean boolean1 = complex1.equals("S6+\"I%`v^qBcK");
      try { 
        complex1.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.asin();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex5 = complex1.createComplex(1, 1);
      Complex complex6 = complex5.I.subtract(complex1);
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex7.sqrt1z();
      String string0 = complex8.toString();
      Complex complex9 = complex3.cos();
      Complex complex10 = complex9.exp();
      Complex complex11 = complex5.divide(complex2);
      Complex complex12 = complex2.exp();
      double double0 = complex12.getImaginary();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.ZERO.nthRoot(333);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      boolean boolean0 = complex2.isInfinite();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex1.log();
      ComplexField complexField0 = complex3.getField();
      double double0 = complex3.getImaginary();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex5.pow(complex2);
      double double1 = complex0.abs();
      Complex complex7 = complex4.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-86.41), (-86.41));
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.acos();
      double double0 = complex0.abs();
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.I.atan();
      Complex complex4 = complex0.ONE.multiply(0.333333333333333);
      String string0 = complex0.NaN.toString();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex4.exp();
      Complex complex7 = complex5.pow(complex4);
      ComplexField complexField1 = complex6.getField();
      Complex complex8 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.I.add(complex0);
      Object object0 = complex2.readResolve();
      Complex complex4 = complex0.I.sqrt();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex3.divide(complex2);
      Complex complex7 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-120.82183980844), (-120.82183980844));
      Complex complex1 = complex0.ONE.asin();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.asin();
      double double0 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.createComplex(249.51508455, 0.0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-659.529078412), (-659.529078412));
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.ZERO.cos();
      int int0 = complex3.ONE.hashCode();
      double double0 = complex2.getReal();
      Complex complex5 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.INF.add(complex0);
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex4.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.ONE.atan();
      String string0 = complex4.I.toString();
      Complex complex5 = complex0.NaN.add(complex1);
      Complex complex6 = complex5.ONE.exp();
      Complex complex7 = Complex.ONE;
      double double0 = complex7.I.getArgument();
      Complex complex8 = complex6.NaN.subtract(complex7);
      double double1 = complex0.INF.abs();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex0.I.log();
      Complex complex11 = complex9.tan();
      Complex complex12 = complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex2.ZERO.asin();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1769.944);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.NaN.multiply(1769.944);
      try { 
        complex0.NaN.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.createComplex((-1427.2242), 20.0);
      Complex complex3 = complex2.INF.divide(complex0);
      String string0 = complex0.ONE.toString();
      Complex complex4 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.multiply(complex2);
      Object object0 = complex5.NaN.readResolve();
      Complex complex6 = complex4.INF.sin();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex3.NaN.asin();
      Complex complex9 = complex8.NaN.sqrt();
      Complex complex10 = complex1.ZERO.multiply(complex7);
      String string0 = complex7.ZERO.toString();
      boolean boolean0 = complex7.isInfinite();
      Object object1 = complex3.readResolve();
      double double0 = complex2.getArgument();
      Complex complex11 = complex1.acos();
      Complex complex12 = complex0.acos();
      ComplexField complexField0 = complex6.getField();
      Complex complex13 = complex12.ZERO.negate();
      Complex complex14 = complex13.INF.multiply(complex3);
      ComplexField complexField1 = complex12.I.getField();
      String string1 = complex8.toString();
      boolean boolean1 = complex8.equals("(NaN, NaN)");
      Complex complex15 = complex8.exp();
      Complex complex16 = complex15.NaN.subtract(complex5);
      Complex complex17 = complex12.multiply(Double.NaN);
      Complex complex18 = complex9.asin();
      Complex complex19 = complex5.asin();
      Complex complex20 = complex16.multiply((-1326.3174215953193));
      Complex complex21 = complex6.multiply(Double.NaN);
      boolean boolean2 = complex11.isNaN();
      Complex complex22 = complex20.tan();
      Complex complex23 = complex13.acos();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex2.INF.asin();
      int int0 = complex3.ZERO.hashCode();
      Complex complex4 = complex0.NaN.asin();
      Complex complex5 = complex4.INF.subtract(complex1);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex5.add(complex4);
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex1.cos();
      Complex complex11 = complex1.createComplex(0.0, 0.0);
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex0.negate();
      Complex complex14 = complex1.tan();
      Complex complex15 = complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex2.I.createComplex(0.0, 0.0);
      Complex complex4 = complex1.INF.cosh();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex0.NaN.multiply(complex2);
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex0.ONE.divide(complex7);
      Complex complex9 = complex7.NaN.log();
      try { 
        complex4.nthRoot((-2603));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,603
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.NaN.createComplex(0.0, 1.7029898543501842E-8);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex0.ONE.pow(complex1);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex0.add(complex7);
      Complex complex9 = complex1.I.acos();
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex10.ONE.sinh();
      Complex complex12 = complex6.sqrt();
      Complex complex13 = complex10.pow(complex7);
      Complex complex14 = complex13.ZERO.acos();
      Complex complex15 = complex10.tanh();
      double double0 = complex8.getReal();
      double double1 = complex6.getReal();
      Complex complex16 = complex10.negate();
      Complex complex17 = complex16.tan();
      Complex complex18 = complex11.sqrt1z();
      double double2 = complex8.getImaginary();
      boolean boolean0 = complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-1830.873452712), (-2934.43321));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.ZERO.tan();
      List<Complex> list0 = complex0.nthRoot(10);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex2.I.tan();
      Complex complex6 = complex5.INF.atan();
      int int0 = complex3.hashCode();
      Complex complex7 = complex2.I.conjugate();
      String string0 = complex2.toString();
      double double0 = complex7.INF.abs();
      Complex complex8 = complex3.I.sinh();
      Complex complex9 = complex0.INF.subtract(complex8);
      int int1 = complex1.I.hashCode();
      int int2 = complex8.ZERO.hashCode();
      double double1 = complex3.getArgument();
      Complex complex10 = complex2.I.asin();
      Complex complex11 = complex0.I.divide(complex8);
      Complex complex12 = complex11.I.tanh();
      Complex complex13 = complex0.sqrt1z();
      double double2 = complex8.abs();
      Complex complex14 = complex13.acos();
      boolean boolean0 = complex13.isInfinite();
      boolean boolean1 = complex0.equals(complex14);
      double double3 = complex2.abs();
      Complex complex15 = complex2.tan();
      Complex complex16 = complex14.I.exp();
      Complex complex17 = complex2.conjugate();
      boolean boolean2 = complex17.equals(complex7);
      Complex complex18 = complex3.conjugate();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex19 = complex4.sinh();
      Complex complex20 = complex14.subtract(complex19);
      Complex complex21 = complex8.cos();
      Complex complex22 = complex17.cosh();
      int int3 = complex7.hashCode();
      boolean boolean3 = complex20.isInfinite();
      Complex complex23 = complex21.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.ONE.add(complex3);
      Complex complex5 = complex0.log();
      double double0 = complex0.getImaginary();
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = complex5.NaN.sqrt();
      Complex complex9 = complex0.pow(complex5);
      Complex complex10 = complex9.ONE.negate();
      boolean boolean0 = complex4.isInfinite();
      Complex complex11 = complex4.sqrt1z();
      Complex complex12 = complex4.ONE.multiply(0.0);
      Complex complex13 = complex4.exp();
      String string0 = complex13.INF.toString();
      Complex complex14 = complex10.createComplex(0.0, 0.0);
      boolean boolean1 = complex1.isNaN();
      String string1 = complex7.INF.toString();
      List<Complex> list0 = complex10.ZERO.nthRoot(1);
      double double1 = complex0.getReal();
      double double2 = complex14.abs();
      boolean boolean2 = complex2.equals(complex13);
      Complex complex15 = complex12.cosh();
      Complex complex16 = complex15.ZERO.acos();
      Complex complex17 = complex15.INF.pow(complex3);
      Complex complex18 = complex2.add(complex3);
      Complex complex19 = complex0.exp();
      try { 
        complex6.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
