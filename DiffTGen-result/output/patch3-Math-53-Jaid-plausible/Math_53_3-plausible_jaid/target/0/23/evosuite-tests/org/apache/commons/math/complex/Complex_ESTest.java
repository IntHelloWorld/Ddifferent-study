/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 00:57:08 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-3774.491), 2003.0);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.I.tan();
      Complex complex5 = complex4.INF.acos();
      String string0 = complex2.toString();
      double double0 = complex0.getReal();
      Complex complex6 = complex1.pow(complex0);
      Complex complex7 = complex6.NaN.multiply(complex5);
      Complex complex8 = complex6.ZERO.acos();
      String string1 = complex8.toString();
      double double1 = complex8.I.getArgument();
      Complex complex9 = complex6.I.tan();
      Complex complex10 = complex9.INF.negate();
      Complex complex11 = complex1.sqrt();
      double double2 = complex1.getArgument();
      String string2 = complex1.toString();
      Complex complex12 = complex3.sin();
      int int0 = complex5.NaN.hashCode();
      Complex complex13 = complex12.pow(complex1);
      List<Complex> list0 = complex0.nthRoot(274);
      Complex complex14 = complex12.sinh();
      Complex complex15 = complex3.add(complex5);
      Complex complex16 = complex2.INF.multiply((-3774.491));
      Complex complex17 = complex0.negate();
      List<Complex> list1 = complex14.NaN.nthRoot(274);
      List<Complex> list2 = complex14.nthRoot(242);
      Complex complex18 = complex13.negate();
      Complex complex19 = complex15.exp();
      double double3 = complex3.getImaginary();
      Complex complex20 = complex11.sin();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      String string0 = complex1.INF.toString();
      Complex complex2 = complex0.ZERO.acos();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.I.pow(complex2);
      Complex complex4 = complex1.cosh();
      double double0 = complex0.getArgument();
      Complex complex5 = complex0.ONE.multiply(complex2);
      Complex complex6 = complex5.NaN.multiply(0.0);
      try { 
        complex0.nthRoot((-9));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -9
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(3333.874560867079, 3333.874560867079);
      Complex complex1 = complex0.createComplex(3333.874560867079, (-2511.432502117));
      double double0 = complex0.INF.getArgument();
      double double1 = complex0.ONE.abs();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex1.ONE.createComplex((-2511.432502117), (-1600.75627));
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex3.INF.pow(complex2);
      Complex complex9 = complex8.NaN.add(complex5);
      Complex complex10 = complex8.INF.cos();
      double double2 = complex5.getArgument();
      Complex complex11 = complex4.NaN.acos();
      Complex complex12 = complex3.ZERO.asin();
      double double3 = complex2.getImaginary();
      Complex complex13 = complex12.I.sin();
      List<Complex> list0 = complex3.nthRoot(546);
      boolean boolean0 = complex3.isInfinite();
      Complex complex14 = complex4.tan();
      Complex complex15 = complex4.sinh();
      Complex complex16 = complex15.I.negate();
      ComplexField complexField0 = complex4.getField();
      Complex complex17 = complex12.acos();
      Complex complex18 = complex0.tanh();
      Complex complex19 = complex13.sinh();
      Complex complex20 = complex5.sqrt1z();
      double double4 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.INF.conjugate();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.INF.multiply(2883.1701);
      Complex complex4 = complex0.INF.cos();
      double double0 = complex0.getArgument();
      int int0 = complex0.hashCode();
      Complex complex5 = complex4.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ONE.getArgument();
      int int0 = complex0.NaN.hashCode();
      String string0 = complex0.toString();
      Complex complex1 = complex0.negate();
      int int1 = 3200;
      try { 
        complex1.NaN.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.multiply(7.0);
      Complex complex3 = complex2.ZERO.cosh();
      List<Complex> list0 = complex2.NaN.nthRoot(1);
      Complex complex4 = complex2.INF.asin();
      int int0 = complex2.I.hashCode();
      double double0 = complex0.INF.abs();
      try { 
        complex0.INF.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex1.INF.multiply(complex0);
      double double0 = complex0.NaN.getArgument();
      Complex complex3 = complex1.ZERO.createComplex((-1579.10126854), (-1579.10126854));
      Complex complex4 = complex0.add(complex1);
      Object object1 = complex4.I.readResolve();
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex3.cos();
      double double1 = complex4.getImaginary();
      Complex complex7 = complex1.NaN.sinh();
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex8.ZERO.conjugate();
      Complex complex10 = complex9.I.sqrt();
      Complex complex11 = complex8.ONE.multiply(complex7);
      Complex complex12 = complex6.acos();
      try { 
        complex5.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex1.exp();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex7.ONE.sin();
      double double0 = complex3.getArgument();
      Object object0 = complex2.readResolve();
      Complex complex9 = complex2.asin();
      Complex complex10 = complex9.pow(complex6);
      Complex complex11 = complex0.tan();
      Complex complex12 = complex6.atan();
      Complex complex13 = complex10.tan();
      Complex complex14 = complex7.multiply(complex0);
      Complex complex15 = complex2.tan();
      Complex complex16 = complex5.cos();
      Complex complex17 = complex12.multiply(complex16);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(2.718281828459045, 2.718281828459045);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex2.I.exp();
      Complex complex5 = complex1.ZERO.atan();
      Complex complex6 = complex1.I.conjugate();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex2.NaN.tan();
      Complex complex9 = complex7.ZERO.multiply(2.718281828459045);
      Complex complex10 = complex9.ZERO.cosh();
      Complex complex11 = complex7.tan();
      Complex complex12 = complex7.log();
      Complex complex13 = complex2.sqrt();
      Object object0 = complex2.readResolve();
      Complex complex14 = complex3.sin();
      Complex complex15 = complex14.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.sinh();
      boolean boolean0 = complex3.isInfinite();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex2.atan();
      Complex complex6 = Complex.I;
      Complex complex7 = complex0.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 801.86140912);
      Complex complex1 = complex0.INF.cosh();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex2.ONE.cosh();
      String string0 = complex1.ONE.toString();
      double double0 = complex0.INF.abs();
      ComplexField complexField1 = complex0.getField();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex4.log();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex4.negate();
      Complex complex8 = complex4.INF.tan();
      int int0 = complex5.hashCode();
      Complex complex9 = complex5.exp();
      Complex complex10 = complex6.tanh();
      ComplexField complexField2 = complex6.getField();
      Complex complex11 = complex1.atan();
      Complex complex12 = complex1.sin();
      Complex complex13 = complex7.sin();
      Complex complex14 = complex13.ZERO.cos();
      double double1 = complex13.I.abs();
      Complex complex15 = complex7.pow(complex11);
      Complex complex16 = complex9.sqrt1z();
      Object object0 = new Object();
      boolean boolean0 = complex9.equals(object0);
      Object object1 = complex9.readResolve();
      int int1 = complex1.hashCode();
      Complex complex17 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-28.45), (-28.45));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex2 = complex0.ONE.add(complex1);
      int int0 = complex2.INF.hashCode();
      Complex complex3 = complex0.createComplex(Double.POSITIVE_INFINITY, 1192.6799561226544);
      String string0 = complex0.toString();
      double double1 = complex0.abs();
      Complex complex4 = complex3.I.pow(complex0);
      try { 
        complex3.nthRoot((-3037));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,037
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex1.NaN.subtract(complex0);
      ComplexField complexField0 = complex0.NaN.getField();
      double double0 = complex0.getArgument();
      double double1 = complex0.ZERO.abs();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.ONE.multiply(complex1);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.sqrt();
      int int0 = complex6.hashCode();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex8.I.cosh();
      Complex complex10 = complex3.tan();
      Complex complex11 = Complex.ONE;
      ComplexField complexField1 = complex11.INF.getField();
      Complex complex12 = complex9.I.divide(complex11);
      Complex complex13 = complex10.NaN.conjugate();
      Complex complex14 = complex2.atan();
      Complex complex15 = complex14.ZERO.tanh();
      Complex complex16 = complex1.atan();
      Complex complex17 = complex9.sin();
      Complex complex18 = complex16.createComplex(2.404307984052299E-9, 0.0036);
      Complex complex19 = complex10.sqrt1z();
      Complex complex20 = complex19.createComplex((-2257.54216087506), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(1708.317773743233, 1.0);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.ZERO.add(complex2);
      Complex complex4 = complex1.cos();
      double double0 = complex0.ONE.abs();
      ComplexField complexField0 = complex0.getField();
      String string0 = complex0.toString();
      Complex complex5 = complex0.exp();
      List<Complex> list0 = complex5.ONE.nthRoot(1250);
      Complex complex6 = complex5.ONE.asin();
      ComplexField complexField1 = complex4.NaN.getField();
      ComplexField complexField2 = complex0.getField();
      Complex complex7 = complex2.multiply(complex4);
      Complex complex8 = complex0.negate();
      Complex complex9 = complex8.sin();
      Complex complex10 = complex7.sinh();
      Complex complex11 = complex8.tanh();
      Complex complex12 = complex7.multiply(0.0);
      boolean boolean0 = complex2.isInfinite();
      Complex complex13 = complex4.sqrt();
      Complex complex14 = complex13.NaN.createComplex(1708.317773743233, 1708.317773743233);
      boolean boolean1 = complex12.isInfinite();
      Complex complex15 = complex14.exp();
      int int0 = complex15.I.hashCode();
      Complex complex16 = complex3.tan();
      int int1 = complex7.hashCode();
      Complex complex17 = complex16.add(complex4);
      Complex complex18 = complex9.log();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      double double0 = 0.0;
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex0.INF.asin();
      Complex complex5 = complex4.I.divide(complex0);
      Complex complex6 = complex5.INF.multiply(complex1);
      Complex complex7 = complex6.INF.log();
      double double1 = complex2.NaN.getArgument();
      Complex complex8 = complex2.NaN.cosh();
      Complex complex9 = complex8.I.asin();
      try { 
        complex2.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      double double1 = complex0.getReal();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isInfinite();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-430.53846), (-430.53846));
      Complex complex1 = complex0.ONE.negate();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.INF;
      double double0 = complex3.I.getArgument();
      Complex complex4 = complex0.NaN.divide(complex3);
      Complex complex5 = complex0.I.divide(complex1);
      double double1 = complex2.getArgument();
      Complex complex6 = complex2.createComplex(0.0, 0.0);
      Complex complex7 = complex2.NaN.createComplex((-1506.0865190608615), 1429.1);
      Complex complex8 = complex6.ONE.conjugate();
      double double2 = complex6.INF.getArgument();
      Complex complex9 = complex6.INF.tanh();
      List<Complex> list0 = complex6.INF.nthRoot(1);
      Complex complex10 = complex1.log();
      Complex complex11 = complex10.createComplex((-0.7853968146951346), 0.7853981633974483);
      double double3 = complex0.getArgument();
      Complex complex12 = complex1.tanh();
      Complex complex13 = complex12.ZERO.log();
      Complex complex14 = complex13.I.cos();
      Complex complex15 = complex12.ZERO.log();
      Complex complex16 = complex0.cosh();
      int int0 = complex16.hashCode();
      Complex complex17 = complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-5208.96242931733));
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.ZERO.tan();
      double double0 = complex3.getArgument();
      Complex complex5 = complex1.ZERO.multiply(complex0);
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex1.log();
      double double1 = complex7.abs();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex1.negate();
      Object object0 = complex9.I.readResolve();
      double double2 = complex8.getArgument();
      Complex complex10 = complex6.sqrt1z();
      double double3 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.ZERO.nthRoot(17);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex1.I.asin();
      Complex complex6 = complex3.sinh();
      ComplexField complexField0 = complex6.ONE.getField();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex4.INF.subtract(complex6);
      Complex complex9 = complex1.cos();
      Complex complex10 = complex3.acos();
      double double0 = complex3.getReal();
      double double1 = complex4.getImaginary();
      int int0 = complex0.hashCode();
      Complex complex11 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-1089.54397), (-1089.54397));
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.negate();
      try { 
        complex2.ONE.nthRoot((-1238));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,238
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex3.INF.add(complex0);
      String string0 = complex1.toString();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex2.acos();
      Complex complex9 = complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2361.010934149965);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.subtract(complex0);
      double double0 = complex2.ONE.getArgument();
      Complex complex3 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex0.log();
      double double0 = complex3.getReal();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex4 = complex0.ZERO.cos();
      double double1 = complex3.abs();
      Object object0 = complex3.readResolve();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex6.INF.conjugate();
      Complex complex8 = complex1.acos();
      String string0 = complex8.NaN.toString();
      Complex complex9 = complex2.acos();
      double double2 = complex5.getArgument();
      List<Complex> list0 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = new Complex(0.0, 0.0);
      Complex complex4 = complex1.INF.multiply(complex3);
      Complex complex5 = complex4.INF.createComplex(0.0, 0.0);
      double double1 = complex5.INF.abs();
      Complex complex6 = complex0.INF.tanh();
      Complex complex7 = complex6.NaN.exp();
      Complex complex8 = complex6.NaN.sinh();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex9.NaN.tan();
      double double2 = complex1.getImaginary();
      boolean boolean0 = complex8.equals(complex10);
      boolean boolean1 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-172.293136));
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex1.ONE.cosh();
      Complex complex5 = complex4.ONE.add(complex0);
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = complex6.multiply(complex2);
      Complex complex8 = complex1.I.log();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex9.atan();
      Complex complex11 = complex9.atan();
      Complex complex12 = complex9.acos();
      Complex complex13 = complex0.INF.conjugate();
      Complex complex14 = complex1.asin();
      Complex complex15 = complex6.log();
      Complex complex16 = complex12.createComplex((-172.293136), 0.0);
      Complex complex17 = complex0.negate();
      Complex complex18 = Complex.NaN;
      Complex complex19 = complex18.NaN.exp();
      Complex complex20 = complex1.multiply(complex18);
      Complex complex21 = complex0.sqrt1z();
      String string0 = complex15.toString();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(1103.2901);
      Complex complex2 = complex1.divide(complex0);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(1.2958646899018938E-9, (-3990.40977));
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.NaN.sin();
      ComplexField complexField0 = complex0.ZERO.getField();
      List<Complex> list0 = complex3.NaN.nthRoot(284);
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex0.ZERO.createComplex((-3990.40977), 1.2958646899018938E-9);
      String string0 = complex4.INF.toString();
      Complex complex7 = complex5.ONE.sqrt();
      double double0 = complex7.I.abs();
      Complex complex8 = complex7.I.sqrt();
      Complex complex9 = complex7.ONE.sinh();
      Complex complex10 = complex8.ONE.sqrt1z();
      Complex complex11 = complex7.ONE.log();
      Complex complex12 = complex11.NaN.add(complex0);
      List<Complex> list1 = complex0.nthRoot(17);
      Complex complex13 = complex0.negate();
      ComplexField complexField1 = complex13.NaN.getField();
      boolean boolean0 = complex4.isInfinite();
      Complex complex14 = complex11.asin();
      Complex complex15 = complex14.sqrt1z();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-234.1));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.conjugate();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex4.NaN.multiply(complex0);
      int int0 = complex3.hashCode();
      Complex complex6 = complex3.tan();
      boolean boolean0 = complex6.equals(complex1);
      Complex complex7 = complex3.sqrt1z();
      String string0 = complex7.toString();
      Complex complex8 = complex3.ONE.pow(complex7);
      Complex complex9 = complex4.subtract(complex1);
      Complex complex10 = complex9.multiply(complex7);
      Complex complex11 = complex1.ONE.pow(complex6);
      ComplexField complexField0 = complex11.I.getField();
      Complex complex12 = complex3.tanh();
      Complex complex13 = complex4.sin();
      Complex complex14 = complex6.log();
      double double1 = complex0.getArgument();
      ComplexField complexField1 = complex4.getField();
      boolean boolean1 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = complex3.NaN.createComplex((-2683.0), (-2683.0));
      Complex complex5 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sinh();
      Object object0 = complex1.ZERO.readResolve();
      List<Complex> list0 = complex0.nthRoot(37);
      Complex complex2 = complex0.createComplex(37, 37);
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.ONE.cos();
      boolean boolean0 = complex2.equals(complex4);
      Complex complex6 = complex1.sin();
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex5.ZERO.pow(complex1);
      Complex complex10 = complex8.ZERO.cos();
      Complex complex11 = complex2.exp();
      List<Complex> list1 = complex11.ZERO.nthRoot(37);
      double double0 = complex6.getReal();
      Complex complex12 = complex5.conjugate();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex0.subtract(complex13);
      ComplexField complexField0 = complex0.getField();
      Complex complex15 = complex8.add(complex2);
      Complex complex16 = complex10.add(complex6);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      String string0 = complex0.I.toString();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex3.asin();
      Complex complex6 = complex2.multiply(complex1);
      double double0 = complex3.getArgument();
      boolean boolean0 = complex5.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.createComplex((-2739.6306), (-2739.6306));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.NaN.pow(complex1);
      double double0 = complex1.ONE.abs();
      String string0 = complex1.ONE.toString();
      String string1 = complex0.toString();
      try { 
        complex2.nthRoot((-2497));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,497
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.cos();
      String string0 = complex3.toString();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.ZERO.add(complex5);
      Complex complex7 = complex3.divide(complex2);
      Complex complex8 = complex3.createComplex(0.0, 0.0);
      Complex complex9 = complex7.INF.log();
      double double0 = complex9.ZERO.abs();
      Object object0 = complex9.INF.readResolve();
      double double1 = complex2.getArgument();
      Complex complex10 = complex3.sqrt();
      double double2 = complex7.getArgument();
      Complex complex11 = complex2.cos();
      int int0 = complex11.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex12 = complex11.sqrt1z();
      Complex complex13 = complex12.subtract(complex7);
      Complex complex14 = complex13.NaN.subtract(complex12);
      double double3 = complex8.getReal();
      Complex complex15 = complex9.sqrt();
      Complex complex16 = complex3.createComplex(0.0, 977.7077524467547);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex(0.0, 0.0);
      Complex complex2 = complex0.ONE.tanh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.sqrt1z();
      boolean boolean1 = complex2.isNaN();
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.NaN.add(complex1);
      Complex complex4 = complex3.I.log();
      double double0 = complex1.getImaginary();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.I.multiply(1.1752011936438014);
      Complex complex7 = complex0.atan();
      double double1 = complex7.ZERO.abs();
      double double2 = complex4.getReal();
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex1.negate();
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1.7168146928204135), (-195.63));
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = (Complex)complex0.INF.readResolve();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex3.log();
      Complex complex6 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.NaN.tan();
      int int0 = complex0.ONE.hashCode();
      Complex complex3 = complex0.negate();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.createComplex(0.0, 0.0);
      ComplexField complexField0 = complex1.I.getField();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.INF.pow(complex3);
      Complex complex6 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.tanh();
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex1.ZERO.createComplex(1.5707963267948966, Double.NaN);
      Complex complex5 = complex3.ONE.cosh();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex6.pow(complex0);
      Complex complex8 = complex2.subtract(complex0);
      Complex complex9 = complex1.asin();
      double double1 = complex9.getArgument();
      String string0 = complex9.toString();
      Complex complex10 = complex0.tanh();
      double double2 = complex3.getArgument();
      int int0 = complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.I.subtract(complex1);
      Complex complex5 = complex4.I.cos();
      double double0 = complex0.abs();
      Complex complex6 = complex0.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.abs();
      Complex complex1 = Complex.INF;
      String string0 = complex1.I.toString();
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getReal();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.multiply(Double.NaN);
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex1.tan();
      Complex complex11 = complex1.divide(complex3);
      Complex complex12 = complex5.acos();
      double double1 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply(1453.809959857796);
      String string0 = complex1.toString();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex3.ZERO.subtract(complex2);
      Complex complex6 = complex5.NaN.atan();
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex7 = complex6.NaN.createComplex(2913.2394624, 1453.809959857796);
      Complex complex8 = complex0.add(complex3);
      Complex complex9 = complex8.ONE.conjugate();
      Complex complex10 = complex1.atan();
      Complex complex11 = complex1.cos();
      boolean boolean0 = complex10.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(0.0);
      String string0 = complex1.toString();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ZERO.tanh();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex0.divide(complex3);
      Complex complex7 = complex6.asin();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      String string0 = complex1.INF.toString();
      List<Complex> list0 = complex0.nthRoot(15);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.pow(complex1);
      Object object0 = complex2.I.readResolve();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(0.0, 2.0);
      double double0 = complex0.I.getArgument();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.asin();
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      double double0 = complex1.ZERO.getArgument();
      Complex complex2 = complex0.pow(complex1);
      Object object0 = complex0.ONE.readResolve();
      Complex complex3 = complex2.createComplex(1716.25321, 0.41421356237309515);
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex4.multiply((-1267.8347726));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.sinh();
      double double0 = complex2.getReal();
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(472.028989, 472.028989);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.atan();
      Object object0 = new Object();
      boolean boolean0 = complex2.equals(object0);
      Complex complex3 = complex2.asin();
      Object object1 = complex2.readResolve();
      Complex complex4 = complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-5273.4149823849475), (-1191.334271));
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.log();
      String string0 = complex1.toString();
      Complex complex4 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.ONE.multiply((-1.0));
      Complex complex3 = complex2.NaN.divide(complex0);
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex1.I.exp();
      List<Complex> list0 = complex1.I.nthRoot(68);
      int int0 = complex0.hashCode();
      Complex complex6 = complex1.sin();
      double double1 = complex4.getArgument();
      Complex complex7 = complex4.multiply(Double.POSITIVE_INFINITY);
      double double2 = complex2.INF.getArgument();
      try { 
        complex0.nthRoot((-575));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -575
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      double double0 = complex0.getReal();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.atan();
      Object object0 = complex2.readResolve();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.I.divide(complex0);
      Complex complex6 = complex1.multiply((-884.43867016));
      Complex complex7 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex2.cos();
      String string0 = complex4.I.toString();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.INF.tan();
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex1.I.multiply(complex3);
      try { 
        complex0.nthRoot((-822));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -822
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cosh();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.ONE.sin();
      double double0 = complex3.I.getArgument();
      Complex complex4 = complex2.ONE.tan();
      Object object0 = complex1.readResolve();
      Complex complex5 = complex1.I.exp();
      Complex complex6 = complex5.INF.conjugate();
      double double1 = complex2.I.getArgument();
      Object object1 = complex2.readResolve();
      Complex complex7 = complex0.ZERO.sqrt1z();
      Complex complex8 = new Complex((-138.0), 379.916089057);
      boolean boolean0 = complex0.equals(complex8);
      Complex complex9 = complex1.add(complex8);
      Complex complex10 = complex9.ONE.asin();
      double double2 = complex0.ONE.getArgument();
      Complex complex11 = complex9.INF.multiply(0.0);
      Complex complex12 = complex11.ZERO.divide(complex0);
      double double3 = complex9.NaN.getArgument();
      try { 
        complex12.NaN.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.I.createComplex((-2385.017882263683), 0.0);
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.sqrt();
      double double0 = complex5.ZERO.abs();
      double double1 = complex5.INF.abs();
      Complex complex6 = complex0.atan();
      double double2 = complex6.abs();
      Complex complex7 = complex5.I.sinh();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex8 = complex3.multiply(complex1);
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex1.tan();
      Complex complex11 = complex10.multiply((double) 1);
      Complex complex12 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex7.ZERO.cos();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex1.I.subtract(complex9);
      double double0 = complex10.I.getArgument();
      Complex complex11 = complex10.ONE.asin();
      Complex complex12 = complex10.divide(complex4);
      Complex complex13 = complex12.I.sin();
      Complex complex14 = complex2.cos();
      Complex complex15 = complex2.conjugate();
      double double1 = complex1.getImaginary();
      double double2 = complex2.NaN.getArgument();
      double double3 = complex15.abs();
      Complex complex16 = complex15.conjugate();
      Complex complex17 = complex16.cos();
      Complex complex18 = complex17.NaN.add(complex9);
      Complex complex19 = complex3.acos();
      boolean boolean0 = complex15.equals("a%Jl/*");
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex2.INF.sinh();
      Complex complex5 = complex0.ZERO.pow(complex2);
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex6.ZERO.multiply((-53.03989704588752));
      Complex complex8 = complex6.ONE.tanh();
      ComplexField complexField0 = complex2.getField();
      Complex complex9 = complex0.asin();
      boolean boolean0 = complex9.isInfinite();
      boolean boolean1 = complex3.isNaN();
      Complex complex10 = complex5.sqrt1z();
      String string0 = complex1.I.toString();
      int int0 = complex3.hashCode();
      Complex complex11 = complex9.log();
      Complex complex12 = complex3.multiply(complex11);
      Complex complex13 = complex0.add(complex12);
      double double0 = complex13.INF.getArgument();
      Complex complex14 = complex13.subtract(complex2);
      Complex complex15 = complex14.ZERO.acos();
      double double1 = complex1.getImaginary();
      Complex complex16 = complex4.sin();
      Complex complex17 = complex9.asin();
      Complex complex18 = complex16.sqrt();
      boolean boolean2 = complex4.isNaN();
      Complex complex19 = complex18.sqrt();
      Complex complex20 = complex16.cos();
      Complex complex21 = complex13.sqrt();
      List<Complex> list0 = complex6.nthRoot(1929);
      int int1 = complex21.hashCode();
      try { 
        complex13.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex0.pow(complex1);
      boolean boolean0 = complex4.isInfinite();
      Complex complex5 = complex1.INF.pow(complex2);
      double double0 = complex4.abs();
      Complex complex6 = complex0.multiply(complex1);
      double double1 = complex4.getReal();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex2.ONE.atan();
      Complex complex9 = complex2.ONE.multiply(complex5);
      Complex complex10 = complex6.negate();
      Complex complex11 = complex10.I.multiply(0.0);
      Complex complex12 = complex7.cos();
      double double2 = complex3.getImaginary();
      Complex complex13 = complex4.sqrt1z();
      String string0 = complex10.toString();
      Complex complex14 = complex0.subtract(complex13);
      boolean boolean1 = complex13.equals("YnI\"R/D 2nn5");
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ONE;
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.pow(complex1);
      double double0 = complex2.I.getArgument();
      Complex complex4 = complex1.NaN.divide(complex0);
      int int1 = complex1.NaN.hashCode();
      List<Complex> list0 = complex1.nthRoot(2881);
      Object object0 = complex0.readResolve();
      // Undeclared exception!
      complex0.nthRoot(2881);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex2.ONE.pow(complex1);
      Complex complex4 = complex3.NaN.pow(complex1);
      Complex complex5 = complex0.NaN.pow(complex2);
      Complex complex6 = complex5.INF.tanh();
      Complex complex7 = complex3.I.acos();
      Complex complex8 = complex7.NaN.acos();
      Complex complex9 = complex8.NaN.subtract(complex5);
      ComplexField complexField0 = complex7.ZERO.getField();
      Complex complex10 = complex0.NaN.sin();
      Complex complex11 = complex0.exp();
      Complex complex12 = complex11.NaN.cos();
      Complex complex13 = complex11.NaN.pow(complex1);
      Complex complex14 = complex0.acos();
      String string0 = complex1.toString();
      Complex complex15 = complex1.pow(complex10);
      Object object0 = complex3.readResolve();
      double double0 = complex12.getImaginary();
      Complex complex16 = complex12.log();
      boolean boolean0 = complex6.isInfinite();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
