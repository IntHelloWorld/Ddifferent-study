/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 01:01:12 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-766.1141526082248), (-1133.733054));
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex2.ZERO.add(complex0);
      Complex complex4 = complex2.acos();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex0.I.negate();
      Complex complex8 = complex0.ONE.asin();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex1.multiply(complex9);
      Complex complex11 = complex6.NaN.asin();
      Complex complex12 = complex11.INF.add(complex3);
      Complex complex13 = complex1.NaN.asin();
      Complex complex14 = complex13.ONE.atan();
      Complex complex15 = complex14.cosh();
      Complex complex16 = complex1.log();
      Complex complex17 = complex16.pow(complex3);
      Complex complex18 = complex1.cos();
      double double0 = complex9.getReal();
      double double1 = complex1.abs();
      Object object0 = complex0.readResolve();
      double double2 = complex3.getArgument();
      boolean boolean0 = complex8.isNaN();
      Complex complex19 = complex9.subtract(complex16);
      Complex complex20 = complex9.pow(complex13);
      Complex complex21 = complex17.atan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.negate();
      List<Complex> list0 = complex0.NaN.nthRoot(37);
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.ZERO.acos();
      Complex complex6 = complex3.tan();
      double double0 = complex6.INF.abs();
      Complex complex7 = complex4.ZERO.negate();
      Complex complex8 = complex7.ONE.tan();
      Complex complex9 = complex3.createComplex((-191.76016), (-191.76016));
      Complex complex10 = complex4.atan();
      int int0 = complex8.INF.hashCode();
      int int1 = complex6.I.hashCode();
      Complex complex11 = complex3.conjugate();
      Complex complex12 = complex11.I.sinh();
      int int2 = complex7.I.hashCode();
      Object object0 = complex1.readResolve();
      Complex complex13 = complex1.ZERO.cosh();
      double double1 = complex8.getArgument();
      Complex complex14 = complex1.NaN.divide(complex12);
      boolean boolean0 = complex0.isInfinite();
      Complex complex15 = complex9.exp();
      Complex complex16 = complex4.INF.exp();
      Complex complex17 = complex1.sin();
      Complex complex18 = complex6.sin();
      Complex complex19 = complex8.asin();
      Complex complex20 = complex1.I.cosh();
      ComplexField complexField0 = complex14.getField();
      Complex complex21 = complex2.add(complex9);
      Complex complex22 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-1236.8965369515622), 363.38552);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex5.ZERO.tanh();
      ComplexField complexField0 = complex4.getField();
      Object object0 = complex2.readResolve();
      Complex complex7 = complex0.ONE.exp();
      Complex complex8 = complex7.ONE.subtract(complex2);
      Complex complex9 = complex2.NaN.conjugate();
      Complex complex10 = complex1.cosh();
      Complex complex11 = complex0.sqrt();
      Complex complex12 = complex2.sin();
      Complex complex13 = complex12.ONE.asin();
      Complex complex14 = complex13.pow(complex5);
      Complex complex15 = complex12.I.cosh();
      boolean boolean0 = complex2.isInfinite();
      Complex complex16 = complex9.sqrt1z();
      double double0 = complex12.getImaginary();
      Complex complex17 = complex11.multiply((-1773.0));
      Complex complex18 = complex17.exp();
      Complex complex19 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-2002.8584427564451), (-42.7));
      Complex complex1 = complex0.ZERO.createComplex((-2002.8584427564451), (-42.7));
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.ZERO.acos();
      Complex complex4 = complex0.cosh();
      double double0 = complex4.ZERO.getArgument();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex0.createComplex((-2002.8584427564451), (-2002.8584427564451));
      Complex complex7 = complex3.I.cosh();
      Complex complex8 = complex7.asin();
      double double1 = complex1.getImaginary();
      double double2 = complex3.abs();
      ComplexField complexField0 = complex2.getField();
      boolean boolean0 = complex6.isInfinite();
      Complex complex9 = complex0.createComplex(0.0, (-3.940510424527919E-20));
      double double3 = complex9.I.abs();
      Complex complex10 = complex4.asin();
      Complex complex11 = complex7.log();
      Complex complex12 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(1449.95050206095, 1449.95050206095);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.INF.sqrt1z();
      double double0 = complex3.abs();
      ComplexField complexField0 = complex3.INF.getField();
      List<Complex> list0 = complex1.NaN.nthRoot(1);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex1.ONE.add(complex4);
      Complex complex8 = complex7.NaN.tanh();
      Complex complex9 = complex8.I.tan();
      try { 
        complex0.nthRoot((-2592));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,592
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.conjugate();
      List<Complex> list0 = complex2.ONE.nthRoot(1824);
      Complex complex3 = complex0.NaN.add(complex1);
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex0.ONE.tan();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex7.I.log();
      Complex complex9 = complex6.INF.asin();
      Complex complex10 = complex9.I.sqrt();
      List<Complex> list1 = complex10.nthRoot(1824);
      Complex complex11 = complex6.NaN.log();
      int int0 = complex11.NaN.hashCode();
      Complex complex12 = complex9.ONE.cosh();
      Complex complex13 = complex1.ONE.cos();
      Complex complex14 = complex0.cosh();
      Complex complex15 = complex14.I.multiply(complex1);
      Complex complex16 = complex9.NaN.sqrt();
      Object object0 = complex14.readResolve();
      boolean boolean0 = complex10.isNaN();
      double double0 = complex11.abs();
      boolean boolean1 = complex11.isNaN();
      boolean boolean2 = complex12.equals("|V% O=q7$/6r)cn%");
      Complex complex17 = complex11.cos();
      Complex complex18 = complex17.I.cos();
      // Undeclared exception!
      complex18.I.nthRoot(1824);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.multiply(2.0);
      int int0 = complex1.hashCode();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.I.tanh();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex5 = complex0.NaN.cos();
      ComplexField complexField1 = complex5.INF.getField();
      Complex complex6 = complex5.ZERO.multiply(2.0);
      Complex complex7 = complex1.cos();
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex8.ZERO.tanh();
      Complex complex10 = complex7.multiply(complex0);
      Complex complex11 = complex10.cosh();
      Complex complex12 = complex3.subtract(complex1);
      double double0 = complex3.abs();
      Object object0 = complex3.readResolve();
      Complex complex13 = complex9.log();
      Complex complex14 = complex10.ZERO.multiply(complex4);
      Complex complex15 = complex10.acos();
      double double1 = complex15.getReal();
      double double2 = complex0.getImaginary();
      Complex complex16 = complex9.cosh();
      Complex complex17 = complex14.cosh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex2.INF.pow(complex0);
      Complex complex7 = complex6.ONE.sinh();
      Complex complex8 = complex6.ONE.acos();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex2.I.conjugate();
      try { 
        complex9.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.createComplex(2504.71, 2504.71);
      Complex complex2 = complex0.tanh();
      double double0 = complex0.NaN.abs();
      double double1 = complex0.I.getArgument();
      Complex complex3 = complex0.createComplex((-2404.359), 1211.865263);
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.ONE.asin();
      ComplexField complexField0 = complex5.INF.getField();
      int int0 = complex5.I.hashCode();
      Complex complex6 = complex0.NaN.sqrt();
      ComplexField complexField1 = complex1.getField();
      int int1 = complex3.hashCode();
      Complex complex7 = complex5.divide(complex3);
      Complex complex8 = complex4.I.tan();
      Complex complex9 = complex8.ONE.tanh();
      Complex complex10 = complex9.ZERO.log();
      Complex complex11 = complex1.tan();
      boolean boolean0 = complex4.isNaN();
      double double2 = complex4.abs();
      Complex complex12 = complex1.conjugate();
      Complex complex13 = complex2.cos();
      List<Complex> list1 = complex5.nthRoot(95);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-3442.501), 836.479580419586);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.createComplex(626.568411, (-1256.124945466303));
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex3.INF.subtract(complex1);
      double double0 = complex0.ONE.getArgument();
      Complex complex6 = complex0.ZERO.conjugate();
      Complex complex7 = complex0.multiply(0.0);
      Complex complex8 = complex7.NaN.multiply((-3442.501));
      Object object0 = complex7.readResolve();
      int int0 = complex0.hashCode();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex0.pow(complex9);
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex7.log();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.createComplex((-0.010714690733195933), 0.0);
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.ONE.tanh();
      Complex complex4 = complex0.NaN.createComplex((-0.010714690733195933), (-356.546150115));
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex4.INF.acos();
      Complex complex7 = Complex.NaN;
      double double0 = complex0.INF.getArgument();
      Complex complex8 = complex0.ZERO.multiply(complex7);
      Complex complex9 = complex0.atan();
      double double1 = complex7.abs();
      Object object0 = complex7.readResolve();
      Complex complex10 = complex8.add(complex7);
      Complex complex11 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex3.ZERO.log();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex7.ONE.multiply(complex0);
      Complex complex9 = complex3.negate();
      double double0 = complex0.abs();
      Complex complex10 = complex1.multiply(complex6);
      Complex complex11 = complex4.atan();
      Complex complex12 = complex6.negate();
      Complex complex13 = complex6.cosh();
      Complex complex14 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.cosh();
      double double0 = complex1.ONE.getArgument();
      Complex complex3 = complex1.INF.sin();
      Complex complex4 = complex1.NaN.negate();
      Complex complex5 = complex3.ONE.tanh();
      boolean boolean0 = complex0.equals((Object) null);
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex6.exp();
      Complex complex8 = complex1.sin();
      boolean boolean1 = complex6.isInfinite();
      List<Complex> list0 = complex1.nthRoot(128);
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex9.pow(complex1);
      Complex complex11 = complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = Double.NaN;
      Complex complex0 = new Complex(582.6714462753522, Double.NaN);
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.I.acos();
      Object object1 = complex1.INF.readResolve();
      Complex complex2 = complex0.multiply(Double.NaN);
      List<Complex> list0 = complex0.ONE.nthRoot(1);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex0.INF.add(complex2);
      Complex complex5 = complex1.NaN.multiply(582.6714462753522);
      Complex complex6 = complex4.INF.atan();
      Object object2 = complex6.ZERO.readResolve();
      Complex complex7 = complex3.INF.log();
      List<Complex> list1 = complex2.NaN.nthRoot(1);
      Complex complex8 = complex3.NaN.cos();
      Complex complex9 = complex3.sin();
      String string0 = complex3.toString();
      Complex complex10 = complex2.log();
      double double1 = complex1.abs();
      Complex complex11 = complex4.sinh();
      Complex complex12 = complex11.ZERO.exp();
      Complex complex13 = complex8.I.sqrt();
      try { 
        complex8.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-996.8568));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.pow(complex0);
      double double0 = complex0.NaN.abs();
      Object object0 = complex0.NaN.readResolve();
      double double1 = complex0.getImaginary();
      Complex complex3 = complex0.I.log();
      Complex complex4 = complex1.I.divide(complex3);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.pow(complex5);
      List<Complex> list0 = complex6.INF.nthRoot(24);
      Complex complex7 = complex6.multiply((-119.59986851846));
      Complex complex8 = complex7.ONE.cos();
      double double2 = complex8.ZERO.abs();
      Complex complex9 = complex7.INF.sqrt();
      Complex complex10 = complex1.INF.pow(complex7);
      Complex complex11 = complex7.asin();
      Complex complex12 = complex5.tanh();
      List<Complex> list1 = complex2.nthRoot(24);
      Complex complex13 = complex9.atan();
      Complex complex14 = complex13.INF.divide(complex4);
      double double3 = complex8.getArgument();
      Complex complex15 = complex10.sinh();
      Complex complex16 = complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(1240.3983317591, 1240.3983317591);
      Complex complex1 = complex0.log();
      int int0 = complex1.ZERO.hashCode();
      double double0 = complex1.I.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.ZERO.multiply(2599.6098);
      Complex complex5 = complex2.multiply(2599.6098);
      Complex complex6 = complex1.I.tanh();
      Complex complex7 = complex1.ZERO.sqrt1z();
      Complex complex8 = complex0.ONE.asin();
      Complex complex9 = complex2.negate();
      Complex complex10 = complex6.log();
      Complex complex11 = complex6.ONE.negate();
      double double1 = complex5.abs();
      Complex complex12 = complex6.multiply(complex0);
      Complex complex13 = complex12.I.acos();
      Complex complex14 = complex9.sinh();
      Complex complex15 = complex14.INF.exp();
      Complex complex16 = complex11.tan();
      Complex complex17 = complex10.multiply((-4914.6556644));
      boolean boolean1 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ZERO.abs();
      ComplexField complexField0 = complex0.NaN.getField();
      double double1 = complex0.getReal();
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = new Complex(0.0, 3483.518479694);
      Complex complex6 = complex5.ZERO.sin();
      Complex complex7 = complex1.divide(complex5);
      Complex complex8 = complex7.ZERO.subtract(complex3);
      Complex complex9 = complex7.INF.asin();
      Complex complex10 = complex0.I.multiply(complex9);
      double double2 = complex0.getImaginary();
      double double3 = complex9.ONE.getArgument();
      int int0 = complex5.INF.hashCode();
      Complex complex11 = complex0.sqrt1z();
      double double4 = complex11.getImaginary();
      Complex complex12 = complex9.acos();
      Complex complex13 = complex12.NaN.sinh();
      Object object0 = complex1.INF.readResolve();
      ComplexField complexField1 = complex0.getField();
      double double5 = complex0.ONE.abs();
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex14.ZERO.conjugate();
      Complex complex16 = complex6.multiply(complex14);
      Complex complex17 = complex3.sqrt1z();
      Complex complex18 = complex7.createComplex(1.0, 1.0);
      List<Complex> list0 = complex7.nthRoot(17);
      Complex complex19 = complex1.sqrt();
      Complex complex20 = complex17.createComplex(0.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.atan();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.I.multiply(complex0);
      try { 
        complex2.I.nthRoot((-4540));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,540
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2813.72892286));
      Complex complex1 = complex0.ONE.createComplex(0.0, (-463.9990281));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.ZERO.subtract(complex2);
      double double0 = complex0.I.getArgument();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex0.ONE.pow(complex4);
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex6.isInfinite();
      Complex complex7 = complex6.subtract(complex4);
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.sinh();
      int int0 = complex3.hashCode();
      Complex complex10 = complex7.asin();
      double double1 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex1.ONE.tanh();
      Complex complex4 = complex3.INF.tan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.divide(complex0);
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex6.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-338.0), 604.3);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(1209.51545835, 0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex1.cosh();
      int int0 = complex3.INF.hashCode();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.ONE.divide(complex3);
      Complex complex7 = complex2.NaN.sin();
      Complex complex8 = complex5.ZERO.multiply(complex0);
      int int1 = complex8.INF.hashCode();
      String string0 = complex7.NaN.toString();
      Complex complex9 = complex5.cosh();
      String string1 = complex9.I.toString();
      Complex complex10 = complex2.acos();
      Complex complex11 = complex10.ZERO.createComplex(0.0, 1209.51545835);
      Complex complex12 = complex10.multiply(1209.51545835);
      Complex complex13 = complex3.negate();
      boolean boolean0 = complex2.isInfinite();
      double double0 = complex5.getImaginary();
      Complex complex14 = complex13.tanh();
      Complex complex15 = complex9.multiply(0.0);
      Complex complex16 = complex15.NaN.multiply(0.0);
      ComplexField complexField0 = complex7.getField();
      Complex complex17 = complex10.ZERO.sin();
      Complex complex18 = complex15.cosh();
      Complex complex19 = complex18.ZERO.multiply(0.0);
      Complex complex20 = complex12.tan();
      Complex complex21 = complex20.ONE.sinh();
      Object object0 = complex9.readResolve();
      Complex complex22 = complex16.sinh();
      double double1 = complex9.getArgument();
      double double2 = complex19.abs();
      Complex complex23 = complex10.multiply((-5705.2));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2932.01809));
      Complex complex1 = complex0.I.cos();
      double double0 = complex1.NaN.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ONE.createComplex(0.0, 1241.0);
      Complex complex4 = complex2.negate();
      Complex complex5 = complex2.log();
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex6.ZERO.log();
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply((-5313.877727768744));
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex1.ONE.cosh();
      Complex complex5 = complex0.createComplex(0.0, 2120.0);
      double double0 = complex1.ONE.getArgument();
      Complex complex6 = complex0.subtract(complex1);
      ComplexField complexField1 = complex6.getField();
      Complex complex7 = complex0.sqrt1z();
      double double1 = complex2.getArgument();
      Complex complex8 = complex5.NaN.createComplex((-3.141592653589793), 0.0);
      Complex complex9 = complex7.pow(complex5);
      Complex complex10 = complex5.negate();
      double double2 = complex2.getImaginary();
      Complex complex11 = complex9.multiply(922.6285880628344);
      Complex complex12 = complex1.asin();
      Complex complex13 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.INF.exp();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex6.ONE.createComplex(1.5707963267948966, 1.5707963267948966);
      Complex complex8 = complex1.conjugate();
      try { 
        complex4.nthRoot((-3846));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,846
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.exp();
      double double0 = complex1.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.sqrt();
      String string0 = complex2.NaN.toString();
      double double1 = complex2.ZERO.abs();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.ZERO.cos();
      Object object1 = complex6.ZERO.readResolve();
      Complex complex7 = complex4.subtract(complex1);
      Complex complex8 = complex2.INF.createComplex(0.0, 0.0);
      Complex complex9 = complex5.cos();
      Complex complex10 = complex4.sin();
      boolean boolean0 = complex3.isInfinite();
      Complex complex11 = complex0.createComplex(Double.NaN, 2093.61822);
      boolean boolean1 = complex3.isInfinite();
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex2.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex1.I.add(complex0);
      Complex complex4 = complex2.ZERO.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex5 = complex4.ZERO.tan();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex1.conjugate();
      boolean boolean0 = complex5.isInfinite();
      boolean boolean1 = complex2.isNaN();
      ComplexField complexField0 = complex2.getField();
      Complex complex7 = complex4.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.NaN.subtract(complex1);
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex3.INF.conjugate();
      Complex complex6 = complex0.createComplex(0.0, 3229.109186);
      double double0 = complex6.getReal();
      Complex complex7 = complex1.cos();
      double double1 = complex4.getArgument();
      Complex complex8 = complex7.asin();
      Complex complex9 = complex3.multiply(0.0);
      boolean boolean0 = complex6.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex2.ZERO.acos();
      String string0 = complex2.toString();
      try { 
        complex2.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-1.9841269659586505E-4), (-1.9841269659586505E-4));
      Complex complex1 = Complex.NaN;
      String string0 = complex0.NaN.toString();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex0.pow(complex1);
      List<Complex> list0 = complex4.INF.nthRoot(221);
      String string1 = complex4.toString();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex1.cos();
      boolean boolean0 = complex1.isNaN();
      boolean boolean1 = complex5.equals((Object) null);
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.ONE.conjugate();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.NaN.multiply((-1729.3228288406));
      Complex complex4 = complex3.ZERO.log();
      double double0 = complex0.abs();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex5 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      int int0 = complex0.ZERO.hashCode();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex1.atan();
      String string0 = complex1.NaN.toString();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex1.ZERO.asin();
      Complex complex7 = complex5.subtract(complex0);
      Complex complex8 = complex7.ZERO.exp();
      Complex complex9 = complex1.atan();
      Complex complex10 = complex9.createComplex(258.4272747618891, 0.0);
      Object object0 = complex7.NaN.readResolve();
      double double0 = complex1.abs();
      Complex complex11 = complex0.negate();
      Complex complex12 = complex11.INF.asin();
      int int1 = complex1.hashCode();
      Complex complex13 = complex11.sqrt();
      double double1 = complex0.getImaginary();
      Complex complex14 = complex0.atan();
      Complex complex15 = complex14.tanh();
      String string1 = complex2.toString();
      Complex complex16 = complex6.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(20.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex2.INF.tanh();
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex4 = complex1.NaN.cosh();
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = complex0.INF.sin();
      Complex complex8 = complex7.INF.sin();
      Complex complex9 = complex4.ZERO.sinh();
      Complex complex10 = Complex.INF;
      Object object0 = complex2.ZERO.readResolve();
      Complex complex11 = complex0.ZERO.subtract(complex10);
      int int0 = complex0.hashCode();
      Complex complex12 = complex0.INF.multiply(complex3);
      boolean boolean0 = complex0.equals((Object) null);
      List<Complex> list0 = complex5.nthRoot(1184);
      Complex complex13 = complex1.conjugate();
      Complex complex14 = complex0.tanh();
      Complex complex15 = complex14.acos();
      Complex complex16 = complex0.tan();
      List<Complex> list1 = complex6.nthRoot(1184);
      Complex complex17 = complex14.sqrt1z();
      Complex complex18 = complex14.exp();
      Complex complex19 = complex15.atan();
      Complex complex20 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1601.2492944), (-6.032174644509064E-23));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.sinh();
      ComplexField complexField0 = complex2.ZERO.getField();
      int int0 = complex3.I.hashCode();
      Complex complex4 = complex1.ZERO.divide(complex3);
      Complex complex5 = complex1.ZERO.createComplex((-6.032174644509064E-23), (-6.032174644509064E-23));
      Complex complex6 = complex5.NaN.sinh();
      double double0 = complex4.ONE.abs();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex7.NaN.tan();
      ComplexField complexField1 = complex8.NaN.getField();
      Complex complex9 = complex1.pow(complex0);
      double double1 = complex2.abs();
      Complex complex10 = complex9.cos();
      Complex complex11 = complex9.divide(complex0);
      Complex complex12 = complex11.ONE.log();
      int int1 = complex11.NaN.hashCode();
      Complex complex13 = complex2.tan();
      Complex complex14 = complex9.INF.acos();
      double double2 = complex9.getArgument();
      boolean boolean0 = complex10.isInfinite();
      Complex complex15 = complex2.multiply((-1601.2492944));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.INF.sinh();
      double double1 = complex0.NaN.abs();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex3.ONE.asin();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex6.log();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex8 = complex3.sin();
      Complex complex9 = complex6.atan();
      Complex complex10 = complex9.pow(complex7);
      Complex complex11 = complex9.I.add(complex6);
      double double2 = complex3.abs();
      Complex complex12 = complex4.atan();
      Complex complex13 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-1749.4709380554), (-1749.4709380554));
      double double0 = complex0.getReal();
      Complex complex1 = complex0.I.sin();
      double double1 = complex0.getImaginary();
      Complex complex2 = complex0.conjugate();
      String string0 = complex2.ONE.toString();
      List<Complex> list0 = complex0.nthRoot(2629);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex1.log();
      Complex complex6 = complex4.createComplex((-3.141592653589793), (-1536.300242575));
      Complex complex7 = complex1.atan();
      Complex complex8 = new Complex((-1749.4709380554), 1539.8);
      Complex complex9 = complex7.I.add(complex8);
      Complex complex10 = complex2.tanh();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.ONE.createComplex(1379.6298728311, 2629);
      String string1 = complex11.ZERO.toString();
      boolean boolean0 = complex10.equals(complex11);
      boolean boolean1 = complex4.isNaN();
      boolean boolean2 = complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.INF.divide(complex3);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex4.ZERO.subtract(complex0);
      Complex complex7 = complex5.INF.log();
      Complex complex8 = complex7.I.sin();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex4.isInfinite();
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(234);
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.getReal();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.multiply(complex1);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.tan();
      String string0 = complex0.I.toString();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex5.ZERO.acos();
      Complex complex7 = complex4.log();
      Complex complex8 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(4021.908, (-1869.307103));
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.multiply(complex1);
      Object object0 = complex2.ONE.readResolve();
      String string0 = complex3.NaN.toString();
      Complex complex4 = complex2.multiply(complex1);
      double double0 = complex3.getReal();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex1.multiply(complex0);
      String string1 = complex5.ONE.toString();
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex7 = complex6.divide(complex5);
      Complex complex8 = complex2.ONE.add(complex5);
      double double1 = complex5.getArgument();
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex7.INF.sqrt();
      Complex complex11 = complex9.INF.cosh();
      double double2 = complex11.I.abs();
      Complex complex12 = complex9.sin();
      Complex complex13 = complex12.ONE.sin();
      Complex complex14 = complex1.multiply(0.3333333134651184);
      Complex complex15 = complex2.cos();
      Complex complex16 = complex15.I.sinh();
      double double3 = complex7.getReal();
      Complex complex17 = complex14.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex2.I.multiply(complex1);
      Complex complex4 = complex0.ZERO.sin();
      Complex complex5 = complex1.NaN.createComplex(3886.109520127506, (-3800.18));
      Object object0 = complex1.I.readResolve();
      Complex complex6 = complex0.createComplex(2.0, 558.946);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      double double0 = complex0.getReal();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.createComplex(0.0, (-3220.590209255));
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex2.ONE.add(complex0);
      double double1 = complex0.INF.getArgument();
      Complex complex4 = complex0.createComplex((-1265.77904), 4045.01800908);
      Complex complex5 = complex4.multiply((-1265.77904));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sin();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex1.INF.acos();
      int int0 = complex4.I.hashCode();
      Complex complex5 = complex4.NaN.subtract(complex2);
      Complex complex6 = complex0.ZERO.asin();
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex7.ONE.tan();
      Complex complex9 = complex7.divide(complex0);
      Complex complex10 = complex0.multiply(complex1);
      Complex complex11 = complex0.acos();
      double double0 = complex11.ONE.abs();
      Complex complex12 = complex0.divide(complex11);
      Complex complex13 = complex1.NaN.conjugate();
      String string0 = complex4.toString();
      ComplexField complexField0 = complex2.getField();
      Complex complex14 = complex1.sinh();
      Complex complex15 = complex14.ZERO.multiply(1.0);
      int int1 = complex13.I.hashCode();
      boolean boolean0 = complex2.isNaN();
      Complex complex16 = complex9.cosh();
      Complex complex17 = complex9.asin();
      double double1 = complex13.getArgument();
      Complex complex18 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.conjugate();
      double double0 = complex0.getReal();
      Complex complex2 = complex1.INF.cos();
      int int0 = complex0.hashCode();
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.ONE.multiply((-3510.6921742946));
      Complex complex6 = complex1.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.conjugate();
      List<Complex> list0 = complex2.ONE.nthRoot(1824);
      Complex complex3 = complex0.NaN.add(complex1);
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex0.ONE.tan();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex7.I.log();
      Complex complex9 = complex6.INF.asin();
      Complex complex10 = complex9.I.sqrt();
      List<Complex> list1 = complex10.nthRoot(1824);
      Complex complex11 = complex6.NaN.log();
      int int0 = complex11.NaN.hashCode();
      Complex complex12 = complex9.ONE.cosh();
      Complex complex13 = complex1.ONE.cos();
      Complex complex14 = complex3.I.multiply(complex1);
      Complex complex15 = complex9.NaN.sqrt();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex10.isNaN();
      double double0 = complex11.abs();
      boolean boolean1 = complex11.isNaN();
      boolean boolean2 = complex12.equals("|V% O=q7$/6r)cn%");
      Complex complex16 = complex11.cos();
      Complex complex17 = complex16.I.cos();
      // Undeclared exception!
      complex17.I.nthRoot(1824);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.INF.multiply(complex0);
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex5.ONE.sinh();
      Complex complex7 = complex4.ZERO.multiply(6.283185307179586);
      Complex complex8 = complex0.INF.divide(complex5);
      Complex complex9 = complex3.ONE.pow(complex0);
      double double0 = complex9.NaN.getArgument();
      boolean boolean0 = complex3.equals(complex0);
      int int0 = complex7.ZERO.hashCode();
      Complex complex10 = complex0.pow(complex2);
      String string0 = complex1.ONE.toString();
      int int1 = complex10.ZERO.hashCode();
      double double1 = complex0.getArgument();
      Complex complex11 = complex9.ZERO.asin();
      Complex complex12 = complex9.multiply(0.0);
      Complex complex13 = complex3.asin();
      Complex complex14 = complex10.atan();
      Complex complex15 = complex14.ONE.tanh();
      Complex complex16 = complex15.I.add(complex1);
      Complex complex17 = complex4.negate();
      Complex complex18 = complex0.cos();
      double double2 = complex7.abs();
      Complex complex19 = complex18.asin();
      Complex complex20 = complex2.sqrt();
      int int2 = complex3.hashCode();
      double double3 = complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ONE.divide(complex0);
      Complex complex5 = complex3.NaN.cos();
      Complex complex6 = complex3.subtract(complex1);
      Complex complex7 = complex3.I.acos();
      Complex complex8 = complex5.negate();
      Complex complex9 = complex8.INF.sqrt();
      Complex complex10 = complex8.ONE.conjugate();
      Complex complex11 = complex5.divide(complex8);
      Complex complex12 = complex2.INF.exp();
      Complex complex13 = complex11.I.sqrt();
      Complex complex14 = complex2.subtract(complex3);
      Complex complex15 = complex3.ONE.add(complex8);
      Complex complex16 = new Complex((-1054.546605418471), (-266.0));
      Complex complex17 = complex5.pow(complex16);
      Complex complex18 = complex16.ONE.acos();
      ComplexField complexField0 = complex14.getField();
      double double0 = complex2.getArgument();
      ComplexField complexField1 = complex17.getField();
      Complex complex19 = complex5.tanh();
      Complex complex20 = complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex1.ZERO.log();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex0.I.sqrt();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex0.I.subtract(complex6);
      try { 
        complex8.ONE.nthRoot((-916));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -916
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.ONE.pow(complex1);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex3.negate();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex4.divide(complex6);
      Complex complex8 = complex3.asin();
      Complex complex9 = complex6.INF.exp();
      Complex complex10 = complex8.NaN.acos();
      String string0 = complex10.INF.toString();
      Complex complex11 = complex8.I.cos();
      Complex complex12 = complex4.pow(complex1);
      Complex complex13 = complex12.NaN.sinh();
      Complex complex14 = complex12.ZERO.conjugate();
      Complex complex15 = complex3.multiply(1775.755331859);
      Object object0 = complex15.NaN.readResolve();
      Complex complex16 = complex15.I.sqrt();
      Complex complex17 = complex7.exp();
      Complex complex18 = complex17.ZERO.sqrt1z();
      int int0 = complex0.hashCode();
      Object object1 = complex13.readResolve();
      Complex complex19 = complex2.tan();
      Complex complex20 = complex12.asin();
      Complex complex21 = complex0.ONE.sinh();
      Complex complex22 = complex6.multiply(1775.755331859);
      Complex complex23 = complex8.subtract(complex11);
      List<Complex> list0 = complex0.nthRoot(5);
      double double0 = complex13.abs();
      Complex complex24 = complex14.sinh();
      Complex complex25 = complex9.divide(complex22);
      Complex complex26 = complex16.atan();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.ZERO.multiply(complex3);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex0.I.sqrt();
      Complex complex8 = complex4.sinh();
      Complex complex9 = complex7.ONE.multiply(0.0);
      int int0 = complex9.ZERO.hashCode();
      Complex complex10 = complex9.INF.sin();
      Complex complex11 = complex10.NaN.atan();
      double double0 = complex7.ZERO.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex12 = complex7.sqrt();
      Complex complex13 = complex12.acos();
      double double1 = complex2.getReal();
      Complex complex14 = complex5.sqrt();
      double double2 = complex4.getImaginary();
      String string0 = complex5.ZERO.toString();
      Complex complex15 = complex6.multiply(complex0);
      Complex complex16 = complex14.sqrt1z();
      Complex complex17 = complex5.negate();
      Complex complex18 = complex7.sqrt();
      Complex complex19 = Complex.ZERO;
      Complex complex20 = complex13.multiply(complex19);
  }
}
