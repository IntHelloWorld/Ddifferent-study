/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 00:57:03 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.add(complex2);
      ComplexField complexField0 = complex3.ZERO.getField();
      double double0 = complex1.NaN.getArgument();
      Complex complex4 = complex1.NaN.sqrt1z();
      String string0 = complex0.toString();
      Complex complex5 = new Complex(1340.318, Double.NaN);
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = complex5.I.atan();
      Complex complex8 = complex7.INF.createComplex(Double.NaN, 1340.318);
      Complex complex9 = complex1.ONE.multiply(1363.41032431);
      List<Complex> list0 = complex8.nthRoot(125);
      Complex complex10 = complex0.acos();
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex11.ONE.cos();
      Complex complex13 = complex10.log();
      String string1 = complex0.ONE.toString();
      double double1 = complex0.getImaginary();
      Complex complex14 = complex13.conjugate();
      Complex complex15 = complex2.asin();
      double double2 = complex5.NaN.abs();
      Complex complex16 = complex5.ONE.cos();
      Complex complex17 = complex0.divide(complex7);
      boolean boolean0 = complex14.isInfinite();
      Complex complex18 = complex5.acos();
      double double3 = complex7.getArgument();
      String string2 = complex0.toString();
      Complex complex19 = complex0.cos();
      Complex complex20 = complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 424.541135686514);
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.add(complex1);
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.ZERO.tan();
      Complex complex5 = complex0.divide(complex3);
      Complex complex6 = complex5.I.cos();
      Complex complex7 = complex0.ZERO.exp();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex8.I.sqrt1z();
      List<Complex> list0 = complex5.nthRoot(3347);
      double double1 = complex0.getReal();
      Complex complex10 = complex5.createComplex(424.541135686514, Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.cosh();
      int int0 = complex3.hashCode();
      List<Complex> list1 = complex5.nthRoot(3347);
      Complex complex12 = complex1.sin();
      double double2 = complex0.getImaginary();
      boolean boolean0 = complex4.equals(complex5);
      Complex complex13 = complex2.createComplex(0.11764700710773468, 0.0);
      Complex complex14 = complex10.multiply(2917.718171366811);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(424.541135686514, Double.POSITIVE_INFINITY);
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.add(complex1);
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex3 = Complex.I;
      List<Complex> list0 = complex3.INF.nthRoot(37);
      Complex complex4 = complex0.ZERO.tan();
      Complex complex5 = complex0.divide(complex3);
      Complex complex6 = complex5.I.cos();
      Complex complex7 = complex0.ZERO.exp();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex8.I.sqrt1z();
      Complex complex10 = complex5.add(complex1);
      List<Complex> list1 = complex5.nthRoot(3347);
      Complex complex11 = complex10.log();
      double double1 = complex0.getReal();
      Complex complex12 = complex5.createComplex(424.541135686514, Double.POSITIVE_INFINITY);
      Complex complex13 = complex12.cosh();
      int int0 = complex3.hashCode();
      List<Complex> list2 = complex5.nthRoot(3347);
      Complex complex14 = complex1.sin();
      double double2 = complex0.getImaginary();
      boolean boolean0 = complex11.equals(complex5);
      Complex complex15 = complex2.createComplex(0.8813735870195429, 1.5707963267948966);
      Complex complex16 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(34.4846905440838, 3514.57388370747);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.exp();
      double double0 = complex1.I.abs();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex3.INF.exp();
      Complex complex6 = complex4.ONE.add(complex2);
      Complex complex7 = complex2.ZERO.sqrt1z();
      Complex complex8 = complex7.I.cosh();
      Complex complex9 = complex7.ONE.createComplex(1203.9, 45.08005);
      Complex complex10 = complex9.I.createComplex(45.08005, 45.08005);
      Complex complex11 = complex1.sqrt();
      Complex complex12 = complex11.I.multiply(1180.01827);
      Complex complex13 = complex0.I.exp();
      Object object0 = complex2.readResolve();
      Complex complex14 = complex4.ONE.asin();
      Complex complex15 = complex14.ONE.acos();
      Complex complex16 = complex14.I.exp();
      Complex complex17 = complex4.negate();
      Complex complex18 = complex6.subtract(complex17);
      Complex complex19 = complex8.pow(complex1);
      Complex complex20 = complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.I.multiply(complex1);
      double double0 = complex2.INF.abs();
      Complex complex4 = complex1.ONE.pow(complex0);
      Complex complex5 = complex0.ONE.exp();
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.ZERO.multiply(Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex0.nthRoot(2146747885);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getImaginary();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex3.ZERO.pow(complex4);
      Complex complex7 = complex3.cos();
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex1.cosh();
      Complex complex10 = complex8.asin();
      Object object0 = complex1.readResolve();
      try { 
        complex9.I.nthRoot((-920));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -920
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.conjugate();
      String string0 = complex2.ZERO.toString();
      Complex complex3 = complex2.I.multiply(0.0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.multiply(complex1);
      Complex complex8 = complex5.divide(complex1);
      Complex complex9 = complex2.multiply(0.0);
      Complex complex10 = complex8.I.tanh();
      double double0 = complex9.abs();
      Complex complex11 = complex4.acos();
      Complex complex12 = complex11.ONE.multiply(Double.NaN);
      Complex complex13 = complex9.I.exp();
      Complex complex14 = complex4.conjugate();
      Complex complex15 = complex7.acos();
      Complex complex16 = complex15.ZERO.sinh();
      Complex complex17 = complex8.exp();
      Complex complex18 = complex11.sqrt1z();
      Complex complex19 = complex18.ONE.conjugate();
      boolean boolean0 = complex0.equals(complex9);
      Complex complex20 = complex5.multiply(1337.8983017111314);
      Complex complex21 = complex20.tan();
      Complex complex22 = complex21.NaN.negate();
      Complex complex23 = complex22.NaN.negate();
      Complex complex24 = complex5.atan();
      Complex complex25 = complex1.acos();
      Complex complex26 = complex5.log();
      boolean boolean1 = complex17.isInfinite();
      boolean boolean2 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.cosh();
      Object object0 = complex1.I.readResolve();
      List<Complex> list0 = complex1.nthRoot(1773);
      String string0 = complex0.I.toString();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.I.multiply(Double.NaN);
      Object object1 = complex3.I.readResolve();
      Complex complex5 = complex3.createComplex(Double.NaN, Double.NaN);
      Complex complex6 = complex0.divide(complex3);
      Complex complex7 = complex6.INF.exp();
      Complex complex8 = complex3.INF.exp();
      int int0 = complex8.NaN.hashCode();
      List<Complex> list1 = complex6.ZERO.nthRoot(883);
      Complex complex9 = complex5.cosh();
      double double1 = complex6.abs();
      Complex complex10 = complex9.I.multiply(Double.NaN);
      Complex complex11 = complex9.ONE.add(complex1);
      Complex complex12 = complex5.sqrt();
      ComplexField complexField0 = complex9.getField();
      Complex complex13 = complex5.add(complex12);
      Complex complex14 = complex13.sin();
      double double2 = complex13.abs();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.ONE.acos();
      ComplexField complexField1 = complex1.ZERO.getField();
      Complex complex2 = complex0.asin();
      ComplexField complexField2 = complex2.getField();
      Complex complex3 = complex1.ZERO.sqrt1z();
      Object object0 = complex3.INF.readResolve();
      double double0 = complex0.getArgument();
      String string0 = complex1.toString();
      Complex complex4 = complex2.I.createComplex((-1440.0), 0.0);
      Complex complex5 = complex4.exp();
      Complex complex6 = complex4.INF.asin();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex7.ONE.cosh();
      ComplexField complexField3 = complex7.ZERO.getField();
      double double1 = complex0.getArgument();
      Complex complex9 = complex1.multiply(complex2);
      Complex complex10 = complex9.ZERO.atan();
      Object object1 = complex3.readResolve();
      Complex complex11 = complex3.negate();
      Complex complex12 = complex11.subtract(complex0);
      Complex complex13 = complex12.NaN.log();
      Complex complex14 = complex13.ZERO.asin();
      double double2 = complex12.getArgument();
      Complex complex15 = complex12.ZERO.divide(complex8);
      boolean boolean0 = complex3.isNaN();
      Complex complex16 = complex12.tanh();
      double double3 = complex1.abs();
      int int0 = complex11.hashCode();
      int int1 = complex0.hashCode();
      Complex complex17 = complex16.negate();
      boolean boolean1 = complex8.isNaN();
      boolean boolean2 = complex9.isNaN();
      double double4 = complex15.abs();
      Complex complex18 = complex13.tan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ZERO.add(complex0);
      Complex complex5 = complex4.ONE.tanh();
      try { 
        complex5.I.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex3.I.cos();
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex3.ZERO.pow(complex0);
      Complex complex8 = complex2.ONE.acos();
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex2.add(complex1);
      Complex complex11 = complex10.ONE.tanh();
      List<Complex> list0 = complex11.NaN.nthRoot(1);
      Complex complex12 = complex2.pow(complex4);
      Complex complex13 = complex3.NaN.cos();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex9.I.getArgument();
      boolean boolean1 = complex10.equals(complex3);
      Complex complex14 = complex12.INF.multiply((double) 1);
      Object object0 = complex12.I.readResolve();
      Complex complex15 = complex2.exp();
      boolean boolean2 = complex2.isNaN();
      Complex complex16 = complex10.ZERO.sin();
      Complex complex17 = complex16.ZERO.add(complex12);
      Complex complex18 = complex8.sqrt1z();
      Complex complex19 = complex8.log();
      Complex complex20 = complex13.INF.atan();
      Complex complex21 = complex19.ZERO.cos();
      String string0 = complex3.toString();
      Complex complex22 = complex11.tanh();
      Complex complex23 = complex22.ONE.createComplex(0.6931470632553101, 1);
      Complex complex24 = complex13.tanh();
      Complex complex25 = complex19.sqrt();
      Complex complex26 = complex18.pow(complex25);
      Complex complex27 = complex7.cosh();
      Object object1 = complex9.readResolve();
      Complex complex28 = complex16.sinh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-2450.452400320925), (-2450.452400320925));
      Complex complex1 = complex0.cosh();
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex1.INF.multiply(complex2);
      Complex complex5 = complex2.NaN.asin();
      Complex complex6 = complex0.NaN.pow(complex4);
      List<Complex> list0 = complex0.nthRoot(158);
      double double1 = complex0.getReal();
      Complex complex7 = complex6.createComplex(0.0, 0.0);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex1.acos();
      double double2 = complex9.I.getArgument();
      double double3 = complex9.getReal();
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply((-654.24825));
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex0.INF.exp();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex1 = complex0.createComplex(2.0, 2.0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ONE.multiply(complex1);
      ComplexField complexField0 = complex2.getField();
      ComplexField complexField1 = complex3.ZERO.getField();
      Complex complex5 = complex0.cosh();
      int int0 = complex0.hashCode();
      boolean boolean1 = complex2.isInfinite();
      Complex complex6 = complex5.asin();
      ComplexField complexField2 = complex4.getField();
      Complex complex7 = complex3.add(complex1);
      Object object0 = complex7.readResolve();
      Complex complex8 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      Complex complex1 = new Complex((-471.55881), (-471.55881));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex3.I.tanh();
      Object object1 = complex0.readResolve();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex1.I.subtract(complex5);
      double double0 = complex2.abs();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex7.ZERO.sin();
      Complex complex9 = complex7.log();
      Complex complex10 = complex7.conjugate();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex11 = complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tanh();
      int int0 = complex0.hashCode();
      String string0 = complex1.ONE.toString();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.ZERO.multiply(complex1);
      int int1 = complex2.ZERO.hashCode();
      double double0 = complex2.NaN.abs();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.NaN.divide(complex0);
      Complex complex6 = complex4.exp();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.ZERO.sqrt1z();
      boolean boolean0 = complex0.equals(complex7);
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex5.multiply(Double.NaN);
      Complex complex10 = complex0.atan();
      Complex complex11 = complex10.INF.asin();
      Complex complex12 = complex0.multiply(Double.NaN);
      Complex complex13 = complex4.sqrt1z();
      Complex complex14 = complex13.ZERO.atan();
      Complex complex15 = complex7.sqrt();
      Complex complex16 = complex11.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex2.multiply(0.0);
      Object object0 = complex0.readResolve();
      String string0 = complex3.ZERO.toString();
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex complex5 = complex0.asin();
      int int0 = complex5.ONE.hashCode();
      double double0 = complex1.getReal();
      Complex complex6 = complex3.ZERO.sqrt();
      Complex complex7 = complex5.cos();
      Complex complex8 = complex7.ONE.asin();
      Complex complex9 = complex5.acos();
      Complex complex10 = complex0.subtract(complex3);
      Complex complex11 = complex9.log();
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex12.multiply(-0.0);
      Complex complex14 = complex7.sin();
      Complex complex15 = complex14.INF.createComplex((-0.2499999701976776), -0.0);
      int int1 = complex10.hashCode();
      Complex complex16 = complex1.NaN.divide(complex10);
      Complex complex17 = complex16.cosh();
      Complex complex18 = complex5.ZERO.subtract(complex9);
      Complex complex19 = complex18.NaN.exp();
      double double1 = complex1.abs();
      Complex complex20 = complex8.conjugate();
      Complex complex21 = complex3.cosh();
      Complex complex22 = complex21.I.conjugate();
      double double2 = complex3.getArgument();
      Complex complex23 = complex9.multiply(complex1);
      Complex complex24 = complex14.multiply(complex15);
      Complex complex25 = complex24.INF.add(complex6);
      Complex complex26 = complex1.tan();
      double double3 = complex11.getArgument();
      Complex complex27 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.INF.createComplex(2.0, 0.0);
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex1.ZERO.exp();
      double double1 = complex3.ZERO.getArgument();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.I.divide(complex2);
      Complex complex6 = complex4.I.multiply(6.283185307179586);
      double double2 = complex6.ZERO.abs();
      Complex complex7 = complex5.INF.divide(complex3);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex8 = complex4.exp();
      Complex complex9 = complex1.negate();
      double double3 = complex4.getImaginary();
      Complex complex10 = complex9.subtract(complex0);
      Complex complex11 = complex2.createComplex(2.0, 1.5707963267948966);
      Complex complex12 = complex9.log();
      Complex complex13 = complex1.negate();
      Complex complex14 = new Complex(2.0, 1.5707963267948966);
      Complex complex15 = complex13.multiply(complex14);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex0.INF.subtract(complex1);
      Complex complex5 = complex0.I.sqrt1z();
      Complex complex6 = complex5.ZERO.log();
      double double0 = complex2.abs();
      Complex complex7 = complex6.createComplex(0.0, 0.0);
      Complex complex8 = complex6.I.createComplex((-556.911755043), 318.0);
      Complex complex9 = complex8.INF.sin();
      Complex complex10 = complex1.ONE.divide(complex7);
      Complex complex11 = complex0.tan();
      Complex complex12 = complex0.ONE.subtract(complex2);
      Complex complex13 = complex11.I.asin();
      Complex complex14 = complex0.ZERO.tanh();
      Complex complex15 = complex0.tan();
      double double1 = complex11.I.getArgument();
      ComplexField complexField0 = complex15.I.getField();
      Complex complex16 = complex15.log();
      Complex complex17 = complex5.exp();
      Complex complex18 = complex0.ZERO.asin();
      Complex complex19 = complex7.divide(complex16);
      Complex complex20 = complex11.add(complex7);
      Complex complex21 = complex8.atan();
      Complex complex22 = complex17.atan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.NaN.acos();
      double double0 = complex2.NaN.getArgument();
      double double1 = complex1.ONE.abs();
      Complex complex3 = complex0.sqrt();
      List<Complex> list0 = complex3.INF.nthRoot(801);
      Complex complex4 = complex0.log();
      double double2 = complex0.abs();
      Complex complex5 = complex3.INF.atan();
      Complex complex6 = complex4.I.sinh();
      Complex complex7 = complex0.NaN.sin();
      Complex complex8 = complex7.ZERO.sqrt1z();
      Complex complex9 = complex4.negate();
      Complex complex10 = complex9.NaN.sin();
      double double3 = complex10.ONE.abs();
      double double4 = complex4.getImaginary();
      Complex complex11 = complex1.I.tan();
      Complex complex12 = complex11.NaN.sinh();
      String string0 = complex7.ONE.toString();
      Complex complex13 = complex8.ONE.add(complex2);
      Complex complex14 = complex13.INF.divide(complex9);
      Complex complex15 = complex3.atan();
      double double5 = complex1.abs();
      Complex complex16 = complex8.exp();
      Complex complex17 = complex15.multiply(0.0);
      String string1 = complex3.toString();
      Complex complex18 = complex4.acos();
      Complex complex19 = complex18.INF.exp();
      boolean boolean0 = complex6.isNaN();
      Complex complex20 = complex18.subtract(complex16);
      Complex complex21 = complex4.cos();
      String string2 = complex11.toString();
      Complex complex22 = complex21.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(2165.527, 2165.527);
      Complex complex1 = new Complex(2165.527, (-1120.7048));
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.I.cosh();
      Complex complex5 = complex4.INF.atan();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex1.divide(complex3);
      Complex complex8 = complex5.ZERO.sqrt1z();
      Complex complex9 = complex0.I.subtract(complex5);
      Complex complex10 = complex9.NaN.subtract(complex0);
      double double0 = complex7.INF.getArgument();
      Object object0 = complex0.readResolve();
      String string0 = complex1.toString();
      double double1 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 424.541135686514);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.NaN.add(complex0);
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex0.divide(complex0);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = complex3.add(complex0);
      List<Complex> list0 = complex3.nthRoot(3347);
      double double1 = complex0.getReal();
      Complex complex8 = complex3.createComplex(424.541135686514, Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.cosh();
      int int0 = complex0.hashCode();
      List<Complex> list1 = complex3.nthRoot(3347);
      Complex complex10 = complex0.sin();
      Complex complex11 = complex3.INF.acos();
      double double2 = complex0.getImaginary();
      boolean boolean0 = complex4.equals(complex3);
      Complex complex12 = complex1.createComplex(0.11764700710773468, 0.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.07842259109020233, (-1.0));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.I.sqrt1z();
      Complex complex6 = complex5.I.divide(complex2);
      String string0 = complex0.toString();
      Complex complex7 = complex3.INF.sqrt();
      Complex complex8 = complex4.I.acos();
      double double0 = complex8.INF.getArgument();
      Complex complex9 = complex0.multiply(complex4);
      Complex complex10 = complex3.NaN.sinh();
      Complex complex11 = complex4.multiply(complex9);
      String string1 = complex2.toString();
      double double1 = complex4.getReal();
      String string2 = complex3.toString();
      Complex complex12 = complex6.sqrt();
      Complex complex13 = complex12.asin();
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex2.readResolve();
      Complex complex14 = complex1.pow(complex5);
      Object object1 = complex8.NaN.readResolve();
      Complex complex15 = complex14.subtract(complex11);
      Complex complex16 = complex2.divide(complex8);
      Complex complex17 = complex10.log();
      Complex complex18 = complex5.tan();
      Complex complex19 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(2868.036572226586, 2868.036572226586);
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-3472.542), 869.070469);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.conjugate();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex0.INF.subtract(complex4);
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex6.NaN.createComplex(869.070469, 2690.2498586282);
      boolean boolean0 = complex4.isNaN();
      Object object0 = complex0.readResolve();
      double double1 = complex6.getImaginary();
      List<Complex> list0 = complex3.nthRoot(150);
      Complex complex8 = complex5.conjugate();
      List<Complex> list1 = complex8.ONE.nthRoot(150);
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.I.multiply(2.0);
      Complex complex3 = complex1.ONE.pow(complex0);
      List<Complex> list0 = complex0.I.nthRoot(37);
      double double0 = complex0.getArgument();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex0.subtract(complex4);
      Complex complex7 = complex6.NaN.log();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex8.sin();
      double double1 = complex0.abs();
      Complex complex11 = complex9.exp();
      double double2 = complex3.abs();
      List<Complex> list1 = complex9.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = null;
      try { 
        complex0.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.ONE.sin();
      Object object0 = complex4.I.readResolve();
      double double0 = complex4.INF.getArgument();
      Complex complex6 = complex0.I.asin();
      Complex complex7 = complex0.add(complex4);
      Complex complex8 = complex7.sqrt1z();
      double double1 = complex2.getArgument();
      Complex complex9 = complex4.ONE.atan();
      Complex complex10 = complex2.tan();
      Complex complex11 = complex5.NaN.conjugate();
      double double2 = complex3.abs();
      Complex complex12 = complex5.createComplex(0.0, 0.0);
      Complex complex13 = complex5.atan();
      String string0 = complex0.toString();
      String string1 = complex10.toString();
      Complex complex14 = complex9.add(complex6);
      boolean boolean0 = complex10.isNaN();
      Complex complex15 = complex14.sqrt1z();
      Complex complex16 = complex4.cosh();
      Complex complex17 = complex3.negate();
      Complex complex18 = complex10.asin();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-2166.0));
      double double0 = complex0.getArgument();
      int int0 = (-1861);
      try { 
        complex0.ZERO.nthRoot((-1861));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,861
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ONE.cosh();
      int int0 = complex1.I.hashCode();
      Complex complex5 = complex3.ONE.tanh();
      Complex complex6 = complex0.conjugate();
      double double0 = complex0.getArgument();
      Complex complex7 = complex2.NaN.sqrt1z();
      Object object0 = complex2.readResolve();
      double double1 = complex0.getImaginary();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex9.ONE.negate();
      Complex complex11 = complex10.ZERO.sqrt();
      Complex complex12 = complex9.NaN.tan();
      Complex complex13 = complex0.multiply(complex2);
      Complex complex14 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex14);
      Complex complex15 = complex0.tanh();
      boolean boolean1 = complex9.isNaN();
      Complex complex16 = new Complex((-776.114902458), 299.0);
      Complex complex17 = complex10.multiply(complex16);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.equals("");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.I.conjugate();
      int int0 = complex1.I.hashCode();
      Complex complex3 = complex1.INF.pow(complex2);
      Complex complex4 = complex2.atan();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex0.isNaN();
      boolean boolean2 = complex0.isNaN();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex2.acos();
      ComplexField complexField1 = complex5.I.getField();
      Complex complex6 = complex1.sin();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex0.subtract(complex7);
      boolean boolean3 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.cos();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.I.pow(complex3);
      List<Complex> list0 = complex1.INF.nthRoot(17);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex3.createComplex(0.3333333333332802, 1161.9475632749043);
      Complex complex8 = complex6.NaN.log();
      Complex complex9 = complex8.NaN.subtract(complex2);
      Complex complex10 = complex4.INF.sinh();
      Complex complex11 = complex2.pow(complex1);
      Complex complex12 = complex11.INF.multiply(complex7);
      Complex complex13 = complex12.NaN.createComplex(1161.9475632749043, 3254.753);
      Complex complex14 = complex11.ZERO.exp();
      Complex complex15 = complex6.NaN.exp();
      Complex complex16 = complex14.I.exp();
      Complex complex17 = complex3.subtract(complex2);
      double double0 = complex4.getImaginary();
      double double1 = complex5.getReal();
      Complex complex18 = complex6.cos();
      Complex complex19 = complex5.tanh();
      Complex complex20 = complex18.atan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex1.NaN.log();
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex0.NaN.divide(complex1);
      Complex complex5 = complex0.ZERO.sinh();
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex5.NaN.acos();
      Complex complex8 = new Complex(132.96188762979, 3294198.0);
      Complex complex9 = complex8.INF.subtract(complex1);
      Complex complex10 = complex7.INF.divide(complex8);
      Complex complex11 = complex7.NaN.sinh();
      Complex complex12 = complex11.I.divide(complex7);
      double double0 = complex12.INF.getArgument();
      Complex complex13 = complex7.I.atan();
      Complex complex14 = complex11.I.pow(complex5);
      double double1 = complex0.getReal();
      Complex complex15 = complex4.multiply(complex1);
      Complex complex16 = complex0.cosh();
      Complex complex17 = complex10.multiply(complex12);
      Complex complex18 = complex2.multiply((-1258.47));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex0.createComplex((-856.0445514119698), 127.0176419865);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex1.sqrt();
      double double0 = complex0.getArgument();
      Complex complex7 = complex4.exp();
      double double1 = complex1.abs();
      Complex complex8 = complex7.ZERO.sinh();
      boolean boolean0 = complex1.isNaN();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex6.multiply(complex7);
      Complex complex11 = complex6.pow(complex5);
      Complex complex12 = complex7.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.ONE.cosh();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex1.multiply((-1595.9727156412));
      ComplexField complexField1 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-3584.0), 572.99);
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.asin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex1.sinh();
      int int0 = complex7.I.hashCode();
      Complex complex8 = complex7.ONE.createComplex(0.0, 0.0);
      Complex complex9 = complex8.ZERO.cosh();
      Object object0 = complex2.readResolve();
      Complex complex10 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.createComplex(0.0, 0.0);
      Complex complex2 = complex1.I.subtract(complex0);
      int int0 = complex1.ONE.hashCode();
      Complex complex3 = complex0.log();
      ComplexField complexField0 = complex0.I.getField();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex4 = complex3.ZERO.createComplex((-1531.785146), (-1531.785146));
      Complex complex5 = complex1.INF.atan();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex4.pow(complex6);
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-373.51345), (-373.51345));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.I.sinh();
      Complex complex7 = complex3.pow(complex1);
      int int0 = complex3.hashCode();
      Complex complex8 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.tan();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex4.isNaN();
      Complex complex5 = complex3.exp();
      double double0 = complex5.getImaginary();
      double double1 = complex2.getImaginary();
      boolean boolean1 = complex0.isInfinite();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex4.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.NaN.cosh();
      Object object0 = complex1.INF.readResolve();
      double double1 = complex1.ZERO.getArgument();
      Object object1 = complex1.ONE.readResolve();
      try { 
        complex0.nthRoot((-5));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex2.INF.pow(complex1);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex5.negate();
      double double0 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.INF.multiply(complex3);
      Complex complex5 = complex4.ONE.subtract(complex2);
      Complex complex6 = complex0.createComplex((-1433.45), (-3.940510424527919E-20));
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex2.exp();
      Complex complex8 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.ZERO.add(complex2);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.INF.multiply(complex3);
      Complex complex5 = complex0.createComplex((-1433.45), (-3.940510424527919E-20));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex0.NaN.sqrt();
      Complex complex5 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.createComplex(0.0, 506.983);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(1385.627165, 0.0);
      Complex complex1 = complex0.tanh();
      ComplexField complexField0 = complex0.INF.getField();
      int int0 = 0;
      try { 
        complex0.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.nthRoot((-24));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -24
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-446.798333969213), (-446.798333969213));
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ONE.tan();
      double double0 = complex0.INF.getArgument();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex3.negate();
      double double1 = complex3.getImaginary();
      Complex complex7 = complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex2.ONE.conjugate();
      double double0 = complex0.getArgument();
      Complex complex4 = complex1.add(complex0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex2.add(complex0);
      Complex complex7 = complex4.divide(complex5);
      Complex complex8 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-0.12502530217170715), (-0.12502530217170715));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.ZERO.readResolve();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = new Complex(0.0, (-1469.901597));
      Complex complex3 = complex0.divide(complex2);
      int int0 = complex3.hashCode();
      Complex complex4 = new Complex((-1469.901597), 0.0);
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1.9868161777724352E-8);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.INF.cos();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(0.087);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.875, 0.875);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.multiply(0.875);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.NaN.acos();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.NaN.cos();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex4.multiply(148.24674);
      Complex complex7 = complex6.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.exp();
      Object object0 = complex4.INF.readResolve();
      Complex complex5 = complex4.INF.multiply(complex3);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex3.ZERO.cos();
      Complex complex8 = complex7.I.exp();
      Complex complex9 = complex8.ZERO.exp();
      Complex complex10 = complex9.ZERO.add(complex4);
      Complex complex11 = complex6.ZERO.log();
      Complex complex12 = complex6.ONE.atan();
      String string0 = complex12.ONE.toString();
      double double0 = complex12.NaN.abs();
      double double1 = complex1.getArgument();
      Complex complex13 = complex5.cosh();
      boolean boolean0 = complex6.equals(complex1);
      Complex complex14 = complex13.negate();
      Complex complex15 = complex14.NaN.log();
      Complex complex16 = complex3.sqrt1z();
      Complex complex17 = complex13.NaN.sinh();
      Complex complex18 = complex3.log();
      Object object1 = complex5.readResolve();
      boolean boolean1 = complex3.equals(object1);
      try { 
        complex6.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 424.541135686514);
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.add(complex1);
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.ZERO.tan();
      Complex complex5 = complex0.divide(complex3);
      Complex complex6 = complex5.I.cos();
      Complex complex7 = complex0.ZERO.exp();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex8.I.sqrt1z();
      Complex complex10 = complex5.add(complex1);
      List<Complex> list0 = complex5.nthRoot(3347);
      Complex complex11 = complex10.log();
      double double1 = complex0.getReal();
      Complex complex12 = complex5.createComplex(424.541135686514, Double.POSITIVE_INFINITY);
      Complex complex13 = complex12.cosh();
      int int0 = complex3.hashCode();
      List<Complex> list1 = complex5.nthRoot(3347);
      Complex complex14 = complex1.sin();
      double double2 = complex0.getImaginary();
      boolean boolean0 = complex11.equals(complex5);
      Complex complex15 = complex2.createComplex(0.11764700710773468, 0.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.add(complex0);
      ComplexField complexField0 = complex1.I.getField();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.I.multiply(complex2);
      Complex complex6 = complex5.ONE.sqrt1z();
      List<Complex> list0 = complex3.ONE.nthRoot(1);
      Complex complex7 = complex1.INF.add(complex3);
      Complex complex8 = complex7.subtract(complex0);
      Complex complex9 = complex0.sin();
      int int0 = complex9.hashCode();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex10.acos();
      Complex complex12 = complex0.ZERO.subtract(complex1);
      Complex complex13 = complex2.multiply((-632.9781330554));
      Complex complex14 = complex2.atan();
      Complex complex15 = complex14.sin();
      Complex complex16 = complex1.asin();
      Complex complex17 = complex16.I.sinh();
      double double0 = complex1.abs();
      double double1 = complex9.getImaginary();
      Complex complex18 = complex7.atan();
      Complex complex19 = complex18.sin();
      Complex complex20 = complex18.sin();
      Complex complex21 = complex10.multiply((-1.0));
      int int1 = complex19.hashCode();
      Complex complex22 = complex7.acos();
      Complex complex23 = complex3.add(complex12);
      boolean boolean0 = complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(8.0E298, 6.283185307179586);
      Complex complex1 = complex0.INF.createComplex(0.0, 1484.535);
      Complex complex2 = complex1.negate();
      String string0 = complex0.ZERO.toString();
      double double0 = complex0.getImaginary();
      String string1 = complex0.toString();
      double double1 = complex0.abs();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.negate();
      boolean boolean0 = complex0.isNaN();
      int int0 = complex3.hashCode();
      Complex complex5 = new Complex(0.0, 1484.535);
      boolean boolean1 = complex2.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.tan();
      double double0 = complex1.NaN.abs();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex4.INF.add(complex3);
      Complex complex7 = complex4.pow(complex3);
      double double0 = complex3.getArgument();
      String string0 = complex7.toString();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex9.NaN.asin();
      String string1 = complex6.toString();
      double double1 = complex6.getReal();
      double double2 = complex3.abs();
      boolean boolean0 = complex4.isInfinite();
      double double3 = complex0.getArgument();
      ComplexField complexField0 = complex5.getField();
      double double4 = complex4.getArgument();
      Complex complex11 = complex1.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-2188.832891997887), 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.I.atan();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex2.NaN.multiply((-2188.832891997887));
      double double0 = complex4.ZERO.getArgument();
      Complex complex6 = complex3.ZERO.exp();
      Complex complex7 = complex3.ZERO.log();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex8.add(complex2);
      Complex complex10 = complex8.ONE.divide(complex1);
      Complex complex11 = complex3.divide(complex8);
      Complex complex12 = complex11.ZERO.tan();
      Complex complex13 = complex11.ONE.pow(complex1);
      Complex complex14 = complex11.multiply(complex9);
      boolean boolean0 = complex9.isNaN();
      Complex complex15 = complex3.asin();
      Complex complex16 = Complex.ZERO;
      Complex complex17 = complex16.ZERO.tan();
      boolean boolean1 = complex7.equals(complex16);
      Complex complex18 = complex0.NaN.cosh();
      Complex complex19 = complex3.subtract(complex14);
      Complex complex20 = complex9.subtract(complex8);
      boolean boolean2 = complex8.equals(complex0);
      Complex complex21 = complex14.multiply((-2188.832891997887));
      Complex complex22 = complex7.sqrt1z();
      Complex complex23 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.ZERO.add(complex0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex0.NaN.tan();
      Complex complex6 = complex0.multiply(0.0);
      try { 
        complex0.nthRoot((-3272));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,272
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = complex3.ZERO.createComplex(828.13158, 828.13158);
      Complex complex5 = new Complex(828.13158, 239.5);
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex5.ONE.sqrt1z();
      Complex complex8 = complex0.INF.multiply((-2.43743107950503));
      Complex complex9 = complex6.createComplex(0.0, 0.0);
      int int0 = complex0.hashCode();
      double double0 = complex5.abs();
      Complex complex10 = complex6.NaN.atan();
      Complex complex11 = complex6.createComplex(0.0, 0.0);
      Complex complex12 = complex3.INF.add(complex9);
      Complex complex13 = complex8.sinh();
      Complex complex14 = complex1.INF.cosh();
      double double1 = complex13.INF.getArgument();
      Complex complex15 = complex8.INF.pow(complex0);
      int int1 = complex1.hashCode();
      Complex complex16 = complex3.INF.sin();
      Complex complex17 = complex16.NaN.cos();
      double double2 = complex8.getImaginary();
      boolean boolean0 = complex4.isInfinite();
      boolean boolean1 = complex5.isInfinite();
      Complex complex18 = complex13.exp();
      List<Complex> list0 = complex18.INF.nthRoot(241);
      Complex complex19 = complex0.tanh();
      String string0 = complex5.toString();
      double double3 = complex12.getReal();
      ComplexField complexField0 = complex3.getField();
      Complex complex20 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.add(complex2);
      ComplexField complexField0 = complex3.ZERO.getField();
      double double0 = complex1.NaN.getArgument();
      Complex complex4 = complex1.NaN.sqrt1z();
      String string0 = complex0.toString();
      Complex complex5 = complex0.createComplex(1340.318, 1340.318);
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = complex5.I.atan();
      Complex complex8 = complex7.INF.createComplex(Double.NaN, 1340.318);
      Complex complex9 = complex1.ONE.multiply(1363.41032431);
      List<Complex> list0 = complex8.nthRoot(125);
      Complex complex10 = complex0.acos();
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex11.ONE.cos();
      Complex complex13 = complex10.log();
      String string1 = complex0.ONE.toString();
      double double1 = complex0.getImaginary();
      Complex complex14 = complex13.conjugate();
      Complex complex15 = complex2.asin();
      double double2 = complex5.NaN.abs();
      Complex complex16 = complex5.ONE.cos();
      Complex complex17 = complex0.divide(complex7);
      boolean boolean0 = complex14.isInfinite();
      Complex complex18 = complex5.acos();
      double double3 = complex7.getArgument();
      String string2 = complex0.toString();
      Complex complex19 = complex0.cos();
      Complex complex20 = complex0.divide(complex3);
  }
}
