/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 00:50:10 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-829.957495377), 0.99);
      Complex complex1 = complex0.INF.atan();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.subtract(complex0);
      double double0 = complex2.abs();
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex3.ONE.exp();
      double double1 = complex2.NaN.abs();
      Complex complex5 = complex1.NaN.negate();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.INF.createComplex((-3356.226017773), 0.0);
      Object object0 = complex7.NaN.readResolve();
      Complex complex8 = complex1.divide(complex6);
      Complex complex9 = complex2.atan();
      Complex complex10 = complex7.ZERO.exp();
      Complex complex11 = complex8.cos();
      Complex complex12 = complex6.tan();
      Complex complex13 = complex9.add(complex7);
      Complex complex14 = complex13.NaN.cos();
      Complex complex15 = complex13.NaN.asin();
      Complex complex16 = complex15.INF.subtract(complex5);
      Complex complex17 = complex12.atan();
      Complex complex18 = complex0.exp();
      Complex complex19 = complex8.negate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt();
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex2.INF.log();
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex4 = complex3.NaN.cosh();
      double double1 = complex0.getImaginary();
      ComplexField complexField1 = complex3.getField();
      Complex complex5 = complex0.sin();
      double double2 = complex0.getReal();
      Complex complex6 = complex0.multiply((-3156.996145931686));
      ComplexField complexField2 = complex6.INF.getField();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex1.tan();
      Complex complex10 = complex6.cosh();
      int int0 = complex9.hashCode();
      Complex complex11 = complex3.log();
      Complex complex12 = complex0.sin();
      Complex complex13 = complex5.sqrt1z();
      Complex complex14 = complex7.multiply((-1031.5650335574387));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.ONE.subtract(complex2);
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex2.ZERO.sqrt();
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex5.I.sqrt();
      double double0 = complex0.getArgument();
      Complex complex7 = complex2.cos();
      boolean boolean0 = complex2.isInfinite();
      Complex complex8 = complex3.sinh();
      double double1 = complex8.NaN.getArgument();
      Complex complex9 = complex3.INF.add(complex8);
      Complex complex10 = complex8.ONE.tan();
      Complex complex11 = complex3.exp();
      Complex complex12 = complex8.asin();
      Complex complex13 = complex12.NaN.tan();
      int int0 = complex10.hashCode();
      Complex complex14 = complex10.pow(complex3);
      boolean boolean1 = complex11.isInfinite();
      double double2 = complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.NaN.log();
      Complex complex5 = complex3.INF.sinh();
      Complex complex6 = complex3.INF.cosh();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex7 = complex0.divide(complex3);
      Complex complex8 = complex7.INF.subtract(complex3);
      int int0 = complex8.I.hashCode();
      Complex complex9 = complex7.ZERO.exp();
      String string0 = complex7.toString();
      Complex complex10 = complex7.INF.atan();
      Complex complex11 = complex1.NaN.tan();
      ComplexField complexField0 = complex11.NaN.getField();
      Complex complex12 = complex2.INF.sinh();
      int int1 = complex0.I.hashCode();
      double double0 = complex0.abs();
      double double1 = complex1.abs();
      double double2 = complex0.INF.abs();
      Complex complex13 = complex1.cos();
      Complex complex14 = complex4.createComplex(1.0, 0.0);
      Complex complex15 = complex2.negate();
      Complex complex16 = complex15.NaN.negate();
      Complex complex17 = complex11.exp();
      Complex complex18 = complex5.cos();
      ComplexField complexField1 = complex8.getField();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1008.7878386281667), (-1008.7878386281667));
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.I.exp();
      boolean boolean1 = complex0.isNaN();
      Object object0 = complex0.readResolve();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.ONE.multiply(complex0);
      double double0 = complex2.ZERO.getArgument();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex2.I.cos();
      double double1 = complex0.getImaginary();
      Complex complex5 = complex3.pow(complex0);
      Complex complex6 = complex0.divide(complex1);
      String string0 = complex1.toString();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex8.ZERO.sin();
      Complex complex11 = complex7.ZERO.subtract(complex6);
      Complex complex12 = complex7.asin();
      Complex complex13 = complex12.acos();
      int int1 = complex8.ONE.hashCode();
      double double2 = complex13.ONE.abs();
      Complex complex14 = complex12.tanh();
      Complex complex15 = complex14.ZERO.subtract(complex10);
      double double3 = complex3.getReal();
      double double4 = complex1.I.abs();
      Complex complex16 = complex6.sinh();
      double double5 = complex16.NaN.abs();
      double double6 = complex16.getReal();
      Complex complex17 = complex2.sqrt1z();
      double double7 = complex10.abs();
      Complex complex18 = complex2.conjugate();
      try { 
        complex17.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.I.conjugate();
      Object object0 = complex0.NaN.readResolve();
      String string0 = complex2.ONE.toString();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex4.exp();
      Complex complex7 = complex2.NaN.sinh();
      Complex complex8 = complex3.I.conjugate();
      Complex complex9 = complex7.ONE.sqrt();
      String string1 = complex2.ZERO.toString();
      Complex complex10 = complex7.NaN.sinh();
      Complex complex11 = complex2.NaN.conjugate();
      Complex complex12 = complex0.multiply(complex3);
      double double0 = complex2.abs();
      Complex complex13 = complex4.INF.acos();
      Complex complex14 = complex12.multiply(2.0);
      double double1 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex0.ONE.multiply(complex1);
      String string0 = complex0.toString();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.subtract(complex4);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex0.ONE.sin();
      String string1 = complex4.INF.toString();
      Complex complex8 = complex6.I.atan();
      Complex complex9 = complex1.createComplex(0.0, (-2332.59));
      Complex complex10 = complex9.ZERO.sin();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex3.isInfinite();
      Complex complex11 = complex4.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.ZERO.multiply(complex2);
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex5.ONE.sqrt();
      int int0 = complex0.hashCode();
      double double0 = complex5.abs();
      double double1 = complex6.abs();
      ComplexField complexField0 = complex5.getField();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex7 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 239.693);
      Complex complex1 = complex0.createComplex(239.693, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.sinh();
      double double0 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.INF.tanh();
      Object object0 = complex1.ZERO.readResolve();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.abs();
      Complex complex3 = complex0.createComplex((-1.0), (-1.0));
      Complex complex4 = complex1.ONE.add(complex0);
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex5.add(complex0);
      double double1 = complex2.getReal();
      Complex complex8 = complex2.sinh();
      double double2 = complex0.ZERO.getArgument();
      Complex complex9 = complex5.NaN.sinh();
      Complex complex10 = complex8.ZERO.add(complex5);
      Complex complex11 = complex1.NaN.createComplex((-1.0), 1.2599210498948732);
      Complex complex12 = complex5.log();
      Complex complex13 = complex5.tan();
      Complex complex14 = complex13.NaN.sqrt1z();
      Complex complex15 = complex3.INF.atan();
      Complex complex16 = complex14.acos();
      double double3 = complex16.getArgument();
      Complex complex17 = complex16.sinh();
      Complex complex18 = complex6.sqrt();
      int int0 = complex18.INF.hashCode();
      Complex complex19 = complex18.NaN.sqrt();
      Complex complex20 = complex19.INF.cos();
      Complex complex21 = complex20.I.cos();
      Complex complex22 = complex10.sqrt1z();
      Complex complex23 = complex22.sqrt();
      Complex complex24 = complex23.I.pow(complex15);
      Complex complex25 = complex6.conjugate();
      Complex complex26 = complex17.add(complex13);
      Complex complex27 = complex10.acos();
      Complex complex28 = complex10.negate();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.asin();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex3 = complex0.multiply(complex1);
      boolean boolean0 = complex2.equals(complex0);
      Complex complex4 = complex0.createComplex(0.0, 0.0952233225107193);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-3.940510424527919E-20), (-3.940510424527919E-20));
      Complex complex1 = complex0.createComplex(105.810964, (-0.16624879837036133));
      Complex complex2 = complex0.I.multiply(105.810964);
      boolean boolean0 = complex1.isNaN();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex0.INF.pow(complex2);
      double double0 = complex0.getImaginary();
      Complex complex7 = complex3.ONE.atan();
      Complex complex8 = complex3.multiply(complex1);
      Complex complex9 = complex8.ZERO.pow(complex2);
      String string0 = complex9.ZERO.toString();
      Complex complex10 = complex0.multiply(complex3);
      double double1 = complex6.getReal();
      Object object0 = complex0.readResolve();
      Complex complex11 = new Complex((-2065.1469308), Double.NaN);
      Complex complex12 = complex7.add(complex11);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(2376.54823, 1.0);
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.I.negate();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.cosh();
      List<Complex> list0 = complex0.nthRoot(60);
      Object object1 = complex0.readResolve();
      Complex complex3 = complex0.createComplex(1.0, 1980.0);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex3.add(complex2);
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex4.INF.multiply(1363.44018568644);
      Complex complex10 = complex1.sin();
      Complex complex11 = complex7.createComplex(Double.NaN, 1980.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 3130.979624413);
      Complex complex1 = complex0.ZERO.conjugate();
      List<Complex> list0 = complex1.NaN.nthRoot(864);
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = complex2.sin();
      String string0 = complex0.toString();
      double double0 = complex3.INF.getArgument();
      Complex complex4 = complex2.ZERO.asin();
      double double1 = complex0.getImaginary();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.INF.divide(complex3);
      double double2 = complex2.ONE.getArgument();
      int int0 = complex0.ZERO.hashCode();
      Complex complex7 = complex5.NaN.sin();
      Complex complex8 = complex0.subtract(complex5);
      boolean boolean0 = complex5.isInfinite();
      Complex complex9 = complex8.subtract(complex5);
      Complex complex10 = complex9.ONE.tan();
      Complex complex11 = complex6.exp();
      Complex complex12 = complex5.multiply(complex0);
      Complex complex13 = complex11.conjugate();
      Complex complex14 = complex13.ZERO.tan();
      Complex complex15 = complex8.conjugate();
      ComplexField complexField0 = complex0.getField();
      Complex complex16 = complex11.multiply(complex6);
      double double3 = complex16.ONE.abs();
      Object object1 = complex10.readResolve();
      boolean boolean1 = complex9.isInfinite();
      try { 
        complex13.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply((-52.061));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.ONE.subtract(complex1);
      int int0 = complex1.NaN.hashCode();
      double double0 = complex1.getArgument();
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex4.INF.subtract(complex0);
      ComplexField complexField0 = complex2.NaN.getField();
      int int1 = complex2.hashCode();
      Complex complex6 = complex0.createComplex((-1251.0), (-1251.0));
      Complex complex7 = complex6.NaN.cosh();
      double double1 = complex1.getArgument();
      int int2 = complex6.hashCode();
      Complex complex8 = complex0.divide(complex3);
      Complex complex9 = complex8.NaN.exp();
      Complex complex10 = complex1.atan();
      Complex complex11 = complex10.I.tanh();
      Complex complex12 = complex4.subtract(complex2);
      Complex complex13 = complex3.negate();
      ComplexField complexField1 = complex4.getField();
      Complex complex14 = complex2.subtract(complex1);
      Complex complex15 = complex14.NaN.createComplex(1.5707963267948966, 1.5707963267948966);
      Complex complex16 = complex5.log();
      double double2 = complex16.abs();
      Complex complex17 = complex10.add(complex11);
      Complex complex18 = complex13.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-1929.3), 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex4.I.asin();
      double double0 = complex3.abs();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex7 = complex0.ONE.multiply(Double.NaN);
      Complex complex8 = complex7.ONE.sqrt();
      String string0 = complex1.toString();
      Complex complex9 = complex0.conjugate();
      boolean boolean0 = complex0.equals(complex9);
      Complex complex10 = complex1.multiply(0.0);
      int int0 = complex1.hashCode();
      Complex complex11 = complex6.multiply(complex7);
      ComplexField complexField1 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.multiply((-2473.7));
      Complex complex3 = complex2.log();
      Complex complex4 = complex1.ONE.asin();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex2.NaN.tan();
      Complex complex7 = complex1.ZERO.asin();
      Object object0 = complex1.readResolve();
      Object object1 = complex1.INF.readResolve();
      boolean boolean0 = complex5.equals(object0);
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex2.exp();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex9.log();
      try { 
        complex11.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.equals(complex0);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-0.2499999701976776), 0.0);
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex3.I.tanh();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.subtract(complex0);
      String string0 = complex7.NaN.toString();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex8.NaN.asin();
      double double0 = complex7.getArgument();
      double double1 = complex8.getArgument();
      Complex complex10 = complex1.pow(complex6);
      Complex complex11 = complex10.cosh();
      Complex complex12 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 3880.351269627;
      Complex complex1 = complex0.ONE.multiply(3880.351269627);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = null;
      Complex complex5 = complex2.negate();
      try { 
        complex2.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex2.ZERO.multiply(complex1);
      int int0 = complex0.hashCode();
      Complex complex4 = null;
      try { 
        complex0.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(840.0564724855, 1.8014398509481984E16);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = null;
      try { 
        complex1.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex2.ONE.log();
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.INF.acos();
      Complex complex5 = complex2.ONE.divide(complex1);
      String string0 = complex0.toString();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex6 = complex2.INF.sqrt();
      Object object0 = complex1.NaN.readResolve();
      double double0 = complex3.getArgument();
      boolean boolean1 = complex3.isInfinite();
      double double1 = complex4.getArgument();
      Complex complex7 = complex1.add(complex5);
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(2630.7);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.NaN.multiply(2630.7);
      Complex complex4 = complex0.sin();
      boolean boolean0 = complex4.isNaN();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.divide(complex4);
      double double0 = complex5.getImaginary();
      Complex complex7 = complex6.negate();
      Object object0 = complex7.readResolve();
      Complex complex8 = complex4.divide(complex2);
      double double1 = complex6.getArgument();
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex2.subtract(complex0);
      double double0 = complex4.ZERO.abs();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex4.createComplex(2585.880378070797, 0.0);
      Complex complex8 = complex0.sqrt1z();
      ComplexField complexField0 = complex4.getField();
      Complex complex9 = complex0.log();
      Complex complex10 = complex9.asin();
      Complex complex11 = complex10.I.sin();
      Complex complex12 = complex5.conjugate();
      Complex complex13 = complex5.sqrt();
      Complex complex14 = complex11.negate();
      Complex complex15 = complex14.exp();
      double double1 = complex2.getReal();
      Complex complex16 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex2.sinh();
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.ONE.multiply(complex2);
      Complex complex6 = complex5.ONE.divide(complex2);
      ComplexField complexField0 = complex0.ZERO.getField();
      double double0 = complex4.ONE.getArgument();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex3.NaN.conjugate();
      Complex complex9 = complex7.log();
      Complex complex10 = complex3.conjugate();
      Complex complex11 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1701.99955));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.ZERO.pow(complex1);
      Complex complex4 = complex0.INF.sqrt();
      Complex complex5 = complex4.ZERO.subtract(complex1);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex0.sqrt();
      double double0 = complex5.abs();
      Complex complex8 = new Complex(0.0, 0.0);
      Complex complex9 = complex3.NaN.pow(complex8);
      try { 
        complex3.nthRoot((-2330));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,330
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-2539.0));
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.INF.log();
      double double0 = complex1.I.abs();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.I.add(complex0);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.I.asin();
      ComplexField complexField0 = complex2.getField();
      Complex complex8 = complex6.sinh();
      double double1 = complex2.getImaginary();
      Complex complex9 = complex3.ZERO.log();
      double double2 = complex1.abs();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex1.createComplex(0.0, 0.0);
      Object object1 = complex0.readResolve();
      Complex complex12 = complex8.atan();
      boolean boolean1 = complex8.isNaN();
      Complex complex13 = complex1.divide(complex3);
      boolean boolean2 = complex2.equals(complex5);
      int int0 = complex13.hashCode();
      Complex complex14 = complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.ONE.createComplex((-1966.93), (-1027.965338864168));
      Object object0 = complex0.readResolve();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.NaN.sqrt1z();
      Complex complex6 = complex5.INF.tanh();
      Complex complex7 = complex0.ZERO.multiply(complex2);
      Complex complex8 = complex7.NaN.pow(complex3);
      Complex complex9 = complex8.pow(complex0);
      Complex complex10 = complex3.ONE.cosh();
      Complex complex11 = complex9.NaN.add(complex6);
      Complex complex12 = complex8.ZERO.conjugate();
      double double0 = complex12.getArgument();
      Complex complex13 = complex3.ZERO.negate();
      boolean boolean0 = complex1.equals(complex4);
      Object object0 = new Object();
      boolean boolean1 = complex0.equals(object0);
      Complex complex14 = complex1.negate();
      Complex complex15 = complex2.sqrt1z();
      Complex complex16 = complex15.NaN.sqrt();
      Complex complex17 = complex3.tanh();
      String string0 = complex17.toString();
      Complex complex18 = complex1.INF.cos();
      Complex complex19 = complex15.ZERO.multiply((-1051.4774));
      Complex complex20 = complex19.I.sqrt();
      Complex complex21 = complex2.negate();
      Complex complex22 = complex21.NaN.acos();
      String string1 = complex22.ONE.toString();
      Complex complex23 = complex16.add(complex1);
      boolean boolean2 = complex1.isNaN();
      Complex complex24 = complex2.sin();
      Object object1 = complex17.readResolve();
      double double1 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-1528.713288728116));
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.pow(complex0);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.tanh();
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex2.INF.add(complex1);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex3.NaN.add(complex2);
      Complex complex5 = complex0.ZERO.pow(complex1);
      Complex complex6 = complex5.ZERO.sqrt1z();
      ComplexField complexField0 = complex0.ONE.getField();
      double double0 = complex0.getArgument();
      Complex complex7 = new Complex(0.0, 0.0);
      Complex complex8 = complex6.INF.multiply(complex7);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.INF.multiply(complex2);
      Complex complex4 = complex0.createComplex((-1607.4076654544726), 986.99218684017);
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex4.createComplex((-2296.796518), 986.99218684017);
      Complex complex7 = complex5.sinh();
      try { 
        complex2.nthRoot((-1258));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,258
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-0.7853981633974483));
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.add(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.ZERO.cos();
      Complex complex4 = complex0.ONE.tanh();
      int int0 = complex0.ONE.hashCode();
      String string0 = complex4.I.toString();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex6.atan();
      double double0 = complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.ONE.createComplex(0.0, 1394.067137447612);
      Complex complex3 = complex0.multiply(0.0);
      try { 
        complex3.nthRoot((-817));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -817
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.19999999999923582);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex0.NaN.subtract(complex1);
      Complex complex4 = complex1.ZERO.acos();
      int int0 = complex0.hashCode();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-2284.3074763061), (-2284.3074763061));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.multiply((-708.2));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = complex0.I.subtract(complex1);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex0.I.conjugate();
      double double0 = complex0.getReal();
      ComplexField complexField0 = complex0.getField();
      double double1 = complex4.getImaginary();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex1.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.0, 2.0);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.add(complex0);
      List<Complex> list0 = complex1.I.nthRoot(212);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.pow(complex4);
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.I.cos();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.I.divide(complex2);
      Complex complex8 = complex6.ZERO.multiply(2046.47793758456);
      int int0 = complex6.ZERO.hashCode();
      double double0 = complex6.getImaginary();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex9.ZERO.add(complex4);
      Complex complex11 = complex2.add(complex9);
      Complex complex12 = complex11.NaN.add(complex7);
      double double1 = complex8.getArgument();
      ComplexField complexField0 = complex3.getField();
      Complex complex13 = complex9.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ZERO.multiply(0.0);
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex0.NaN.subtract(complex4);
      Complex complex6 = complex0.multiply(complex4);
      Complex complex7 = complex6.cos();
      Complex complex8 = complex6.acos();
      double double0 = complex8.getImaginary();
      double double1 = complex7.getArgument();
      double double2 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.multiply(9.220590270857665E-9);
      Complex complex2 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.INF.multiply((-2304.577));
      double double0 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1272.4852));
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex0.isNaN();
      Complex complex1 = complex0.ZERO.tan();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-1018.244), (-1018.244));
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = new Complex(27, Double.POSITIVE_INFINITY);
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex2.ONE.divide(complex3);
      Complex complex5 = complex4.ZERO.multiply(complex0);
      List<Complex> list0 = complex1.nthRoot(27);
      Complex complex6 = complex0.sinh();
      double double0 = complex6.ZERO.abs();
      Complex complex7 = complex6.ONE.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double1 = complex2.getArgument();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex1.log();
      Complex complex10 = complex2.I.exp();
      double double2 = complex10.INF.getArgument();
      try { 
        complex2.nthRoot((-1434));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,434
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = new Complex(4660.6610107919, 4660.6610107919);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex4.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(956.57546650779, 956.57546650779);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.INF.divide(complex1);
      Complex complex5 = complex3.pow(complex4);
      String string0 = complex3.ZERO.toString();
      Complex complex6 = complex3.ONE.pow(complex4);
      Complex complex7 = complex0.exp();
      double double0 = complex7.abs();
      Complex complex8 = complex3.ONE.pow(complex2);
      Complex complex9 = complex7.cos();
      Complex complex10 = complex9.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.ONE.atan();
      Complex complex12 = complex11.ONE.acos();
      double double1 = complex7.getReal();
      Complex complex13 = complex9.multiply(Double.POSITIVE_INFINITY);
      Complex complex14 = complex0.subtract(complex7);
      Complex complex15 = complex11.INF.subtract(complex12);
      Complex complex16 = complex15.I.divide(complex10);
      boolean boolean0 = complex3.isNaN();
      Complex complex17 = complex4.acos();
      double double2 = complex10.ONE.abs();
      double double3 = complex12.INF.abs();
      Complex complex18 = complex12.INF.sqrt();
      double double4 = complex10.NaN.getArgument();
      Complex complex19 = complex1.sin();
      boolean boolean1 = complex12.isNaN();
      Complex complex20 = complex14.tan();
      Complex complex21 = complex1.cosh();
      Complex complex22 = complex7.multiply(complex14);
      int int0 = complex22.hashCode();
      Complex complex23 = new Complex(2.0, 0.0);
      Complex complex24 = complex20.subtract(complex23);
      Complex complex25 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex0.tan();
      double double0 = complex4.NaN.abs();
      Complex complex5 = complex4.INF.subtract(complex0);
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex5.I.add(complex1);
      Complex complex8 = complex5.cos();
      Complex complex9 = complex5.ZERO.subtract(complex7);
      ComplexField complexField0 = complex4.I.getField();
      Complex complex10 = complex0.ONE.pow(complex4);
      List<Complex> list0 = complex0.nthRoot(4568);
      Complex complex11 = complex4.tan();
      Complex complex12 = complex11.sqrt1z();
      boolean boolean0 = complex4.isInfinite();
      Complex complex13 = complex4.pow(complex5);
      Complex complex14 = complex13.NaN.conjugate();
      Complex complex15 = complex10.asin();
      Complex complex16 = complex15.I.log();
      ComplexField complexField1 = complex4.getField();
      Complex complex17 = complex15.NaN.multiply(0.0);
      Complex complex18 = complex6.atan();
      Object object0 = complex18.ZERO.readResolve();
      String string0 = complex18.I.toString();
      Complex complex19 = complex8.multiply(2881.0);
      Complex complex20 = complex4.divide(complex12);
      String string1 = complex10.toString();
      boolean boolean1 = complex16.isNaN();
      Complex complex21 = complex9.acos();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.multiply(1.0);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.sin();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex4.NaN.cosh();
      Complex complex10 = complex8.atan();
      boolean boolean0 = complex4.equals(complex1);
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex11.createComplex(0.0, 0.0);
      Complex complex13 = complex5.cosh();
      Complex complex14 = complex13.sqrt();
      Complex complex15 = complex10.atan();
      Complex complex16 = complex5.acos();
      Complex complex17 = complex14.conjugate();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex0.pow(complex1);
      int int0 = complex1.NaN.hashCode();
      Complex complex7 = complex1.subtract(complex6);
      Complex complex8 = complex7.ZERO.log();
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex9.I.asin();
      int int1 = complex10.INF.hashCode();
      Complex complex11 = complex10.ONE.tanh();
      Complex complex12 = complex9.divide(complex3);
      Complex complex13 = complex0.tanh();
      Complex complex14 = complex0.INF.add(complex7);
      int int2 = complex14.hashCode();
      Complex complex15 = complex14.NaN.sqrt1z();
      Complex complex16 = complex12.ONE.atan();
      String string0 = complex12.INF.toString();
      int int3 = complex7.INF.hashCode();
      Complex complex17 = complex4.sqrt1z();
      double double0 = complex10.abs();
      Complex complex18 = complex8.createComplex(0.0, 0.8813735870195428);
      Complex complex19 = complex5.acos();
      Complex complex20 = complex17.I.asin();
      boolean boolean0 = complex17.isInfinite();
      Object object0 = complex17.readResolve();
      Complex complex21 = complex8.subtract(complex7);
      Complex complex22 = complex19.tanh();
      Complex complex23 = complex1.INF.sin();
      Complex complex24 = complex5.sinh();
      Complex complex25 = complex12.log();
      Complex complex26 = complex0.log();
      Object object1 = complex9.readResolve();
      Complex complex27 = complex19.add(complex9);
      ComplexField complexField0 = complex9.getField();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.cos();
      Complex complex5 = complex2.I.multiply(complex3);
      boolean boolean0 = complex0.equals(complex3);
      Complex complex6 = complex3.I.sqrt1z();
      Complex complex7 = complex3.conjugate();
      ComplexField complexField0 = complex2.getField();
      Complex complex8 = complex1.pow(complex7);
      double double0 = complex8.abs();
      Complex complex9 = complex8.pow(complex1);
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex1.negate();
      String string0 = complex11.INF.toString();
      double double1 = complex4.abs();
      Complex complex12 = complex1.sinh();
      Complex complex13 = complex0.tanh();
      Complex complex14 = complex12.createComplex(0.0, 16.0);
      Complex complex15 = complex12.ZERO.sqrt();
      ComplexField complexField1 = complex4.getField();
      Complex complex16 = complex5.conjugate();
      Complex complex17 = complex16.INF.sqrt1z();
      Complex complex18 = complex9.conjugate();
      Object object0 = new Object();
      boolean boolean1 = complex10.equals(object0);
      double double2 = complex0.abs();
      Complex complex19 = complex1.tanh();
      Complex complex20 = complex17.NaN.negate();
      Object object1 = complex16.readResolve();
      int int0 = complex14.hashCode();
      double double3 = complex17.getReal();
      Complex complex21 = complex9.divide(complex0);
      Complex complex22 = complex16.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      List<Complex> list0 = complex1.NaN.nthRoot(1213);
      Complex complex2 = complex0.negate();
      String string0 = complex2.INF.toString();
      Complex complex3 = complex0.NaN.tan();
      Complex complex4 = complex0.I.sinh();
      double double0 = complex4.I.abs();
      String string1 = complex4.NaN.toString();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex3.NaN.add(complex5);
      Complex complex7 = complex5.ONE.divide(complex3);
      try { 
        complex3.I.nthRoot((-2525));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,525
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.multiply(1575.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex1.ONE.negate();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.I.multiply(0.0);
      Complex complex6 = complex3.NaN.multiply(complex5);
      int int0 = complex4.hashCode();
      boolean boolean0 = complex5.equals(complex4);
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex4.conjugate();
      String string0 = complex8.ZERO.toString();
      Complex complex9 = complex1.createComplex(1509.67264505, 358.219);
      Complex complex10 = complex4.tanh();
  }
}
