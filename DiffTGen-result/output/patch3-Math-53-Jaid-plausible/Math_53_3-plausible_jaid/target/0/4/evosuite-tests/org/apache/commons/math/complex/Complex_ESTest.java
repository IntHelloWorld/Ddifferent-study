/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 00:49:52 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.sqrt();
      double double0 = complex2.I.abs();
      Complex complex5 = complex3.NaN.cos();
      List<Complex> list0 = complex3.I.nthRoot(2334);
      Complex complex6 = complex2.ZERO.multiply((-1463.144));
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex0.pow(complex2);
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex9.createComplex((-1463.144), 2334);
      ComplexField complexField0 = complex8.INF.getField();
      Complex complex11 = complex9.sin();
      ComplexField complexField1 = complex8.getField();
      Complex complex12 = complex9.acos();
      Complex complex13 = complex6.atan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.ONE.subtract(complex0);
      Object object0 = complex2.readResolve();
      Object object1 = complex3.I.readResolve();
      Object object2 = complex4.INF.readResolve();
      Complex complex5 = complex3.atan();
      double double0 = complex2.getReal();
      Complex complex6 = complex0.log();
      int int0 = complex6.ONE.hashCode();
      double double1 = complex6.ZERO.abs();
      double double2 = complex2.abs();
      boolean boolean0 = complex2.isInfinite();
      boolean boolean1 = complex1.equals(complex2);
      Complex complex7 = complex5.sin();
      List<Complex> list0 = complex4.nthRoot(37);
      boolean boolean2 = complex3.isInfinite();
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex1.ONE.log();
      ComplexField complexField0 = complex8.I.getField();
      Complex complex10 = complex3.tan();
      double double3 = complex5.getArgument();
      Complex complex11 = complex3.NaN.multiply(1.8011719796199461);
      Complex complex12 = complex5.sinh();
      Complex complex13 = complex12.ZERO.sqrt1z();
      Complex complex14 = complex10.NaN.acos();
      Complex complex15 = complex10.conjugate();
      Complex complex16 = complex1.multiply(complex0);
      Complex complex17 = complex15.sinh();
      boolean boolean3 = complex16.isNaN();
      Complex complex18 = complex11.tan();
      Complex complex19 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(4247.12, 4247.12);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex2.ZERO.multiply(236.3102);
      Complex complex4 = complex1.ONE.sqrt1z();
      Complex complex5 = complex1.negate();
      double double0 = complex4.abs();
      Complex complex6 = complex4.log();
      Complex complex7 = complex5.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(4.9E-324, 1144.080109);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = new Complex(1796.348572, (-728.0));
      Complex complex3 = complex0.I.divide(complex2);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex2.ZERO.asin();
      Complex complex8 = complex6.multiply(0.0);
      Complex complex9 = complex8.add(complex4);
      Complex complex10 = complex4.ONE.pow(complex6);
      Complex complex11 = complex0.negate();
      double double0 = complex9.getArgument();
      Complex complex12 = complex6.conjugate();
      Complex complex13 = complex11.ZERO.tanh();
      ComplexField complexField0 = complex4.ZERO.getField();
      boolean boolean0 = complex3.isInfinite();
      boolean boolean1 = complex6.isNaN();
      Complex complex14 = complex11.divide(complex0);
      Complex complex15 = complex5.sinh();
      Complex complex16 = complex0.I.createComplex(1.5707963267948966, 1796.348572);
      Complex complex17 = complex15.ONE.divide(complex2);
      boolean boolean2 = complex8.isNaN();
      Complex complex18 = complex12.sqrt();
      Complex complex19 = complex3.asin();
      Complex complex20 = complex12.acos();
      Complex complex21 = complex8.cosh();
      Object object0 = complex3.readResolve();
      Complex complex22 = complex8.cosh();
      Complex complex23 = complex22.asin();
      Complex complex24 = complex19.pow(complex0);
      Complex complex25 = complex14.sqrt();
      Complex complex26 = complex2.acos();
      Complex complex27 = complex22.divide(complex23);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      int int0 = complex0.INF.hashCode();
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.NaN.log();
      String string0 = complex0.toString();
      Complex complex4 = complex2.INF.log();
      int int1 = complex2.I.hashCode();
      Complex complex5 = complex0.multiply(complex2);
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.INF.createComplex(Double.NaN, Double.NaN);
      int int2 = complex6.ZERO.hashCode();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex0.log();
      double double1 = complex1.abs();
      Complex complex11 = complex7.negate();
      double double2 = complex11.INF.abs();
      Complex complex12 = complex2.I.sin();
      try { 
        complex5.nthRoot((-811));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -811
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(1157.736798668155, 1625.56690601);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex1.multiply(1376.090472340584);
      double double0 = complex3.INF.abs();
      Complex complex4 = complex2.ZERO.sinh();
      Complex complex5 = complex1.ZERO.divide(complex4);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.I.sqrt();
      Complex complex8 = complex4.NaN.createComplex(840.15025999, 1157.736798668155);
      Object object0 = complex7.readResolve();
      boolean boolean0 = complex2.isInfinite();
      Complex complex9 = complex4.sinh();
      String string0 = complex9.NaN.toString();
      Complex complex10 = complex1.I.sqrt1z();
      Complex complex11 = complex9.log();
      Complex complex12 = complex3.exp();
      Complex complex13 = complex12.INF.acos();
      Complex complex14 = complex9.conjugate();
      List<Complex> list0 = complex10.nthRoot(87);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex0.ZERO.sqrt1z();
      Complex complex5 = complex4.ONE.multiply(complex0);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex5.ONE.cosh();
      Complex complex8 = complex1.I.acos();
      double double0 = complex5.ONE.abs();
      Complex complex9 = complex4.ZERO.createComplex(0.0, 0.0);
      double double1 = complex0.abs();
      Complex complex10 = complex8.sin();
      Complex complex11 = complex5.conjugate();
      Complex complex12 = complex0.I.cosh();
      int int0 = complex1.ONE.hashCode();
      Complex complex13 = complex11.negate();
      Complex complex14 = complex1.I.exp();
      Object object0 = complex0.readResolve();
      Complex complex15 = complex12.INF.cos();
      List<Complex> list0 = complex8.nthRoot(1111);
      Complex complex16 = complex1.pow(complex0);
      Complex complex17 = Complex.ONE;
      Complex complex18 = complex5.pow(complex17);
      Complex complex19 = complex12.atan();
      Complex complex20 = new Complex(0.0, (-493.2948896418777));
      boolean boolean1 = complex10.equals(complex20);
      double double2 = complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 2143.0;
      Complex complex1 = complex0.createComplex(2143.0, 923.410232102);
      List<Complex> list0 = complex0.I.nthRoot(229);
      Complex complex2 = null;
      try { 
        complex1.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(3358.12);
      Complex complex2 = complex0.INF.tanh();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.INF.sinh();
      double double0 = complex0.getReal();
      Complex complex6 = complex1.subtract(complex2);
      Complex complex7 = complex0.ZERO.log();
      Complex complex8 = complex6.ZERO.createComplex(0.0, 5.3687);
      Complex complex9 = complex6.I.sinh();
      Complex complex10 = complex9.ONE.multiply(complex3);
      String string0 = complex1.toString();
      Complex complex11 = complex6.acos();
      double double1 = complex1.getImaginary();
      Complex complex12 = complex4.INF.negate();
      Complex complex13 = complex1.exp();
      Complex complex14 = complex8.atan();
      double double2 = complex9.I.abs();
      Complex complex15 = complex14.cosh();
      Complex complex16 = complex1.add(complex7);
      Complex complex17 = complex2.multiply(complex14);
      double double3 = complex9.getImaginary();
      Complex complex18 = complex8.pow(complex7);
      boolean boolean0 = complex4.equals((Object) null);
      Complex complex19 = complex17.sqrt();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-354.69445), 0.0);
      Complex complex1 = complex0.ZERO.multiply((-354.69445));
      Complex complex2 = complex0.conjugate();
      double double0 = complex2.getReal();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex0.I.acos();
      List<Complex> list0 = complex6.NaN.nthRoot(547);
      Complex complex7 = complex0.NaN.tanh();
      Complex complex8 = complex7.I.divide(complex1);
      Complex complex9 = complex2.createComplex(2194.4763, (-526.78965161605));
      Complex complex10 = complex9.NaN.asin();
      Complex complex11 = complex10.log();
      Complex complex12 = complex2.conjugate();
      Complex complex13 = complex0.sqrt();
      Complex complex14 = complex0.INF.tanh();
      Complex complex15 = complex12.acos();
      Complex complex16 = complex2.multiply(0.0);
      Complex complex17 = complex15.pow(complex0);
      Complex complex18 = complex12.multiply(0.0);
      Complex complex19 = complex18.ONE.asin();
      Complex complex20 = complex13.divide(complex17);
      boolean boolean0 = complex16.equals("lower bound ({0}) must be strictly less than upper bound ({1})");
      String string0 = complex0.toString();
      double double1 = complex6.getImaginary();
      Complex complex21 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-1551.1839), (-1551.1839));
      double double0 = complex0.getReal();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.tanh();
      double double1 = complex4.getReal();
      String string0 = complex4.INF.toString();
      String string1 = complex0.toString();
      Complex complex5 = complex0.log();
      Object object0 = complex4.NaN.readResolve();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.pow(complex4);
      Complex complex8 = complex7.INF.multiply(Double.NaN);
      double double2 = complex6.getImaginary();
      double double3 = complex2.getReal();
      Complex complex9 = complex7.tan();
      Complex complex10 = complex2.multiply(7.633778464964088);
      String string2 = complex10.toString();
      Complex complex11 = complex6.sqrt1z();
      boolean boolean0 = complex1.isNaN();
      Complex complex12 = complex10.asin();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(965.0265824559292, 1537.6462823538);
      Complex complex1 = complex0.NaN.atan();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.conjugate();
      boolean boolean0 = complex2.equals(complex3);
      Complex complex4 = new Complex(0.0, (-1168.116326881));
      boolean boolean1 = complex1.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.I.tan();
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex1.ZERO.cos();
      Complex complex6 = complex3.ONE.add(complex1);
      Complex complex7 = complex6.NaN.multiply((-198.197976));
      Complex complex8 = complex0.I.acos();
      Complex complex9 = complex0.sqrt();
      double double0 = complex9.I.abs();
      int int0 = complex0.hashCode();
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex8.subtract(complex3);
      Complex complex12 = complex11.createComplex((-198.197976), Double.POSITIVE_INFINITY);
      Complex complex13 = complex11.exp();
      boolean boolean0 = complex10.isInfinite();
      boolean boolean1 = complex8.equals(complex9);
      int int1 = 0;
      try { 
        complex13.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sinh();
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex1.INF.createComplex((-1219.55), (-1219.55));
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex1.I.multiply(6.283185307179586);
      Complex complex6 = complex3.ONE.sin();
      Complex complex7 = complex4.multiply((-1219.55));
      Complex complex8 = complex3.subtract(complex1);
      Complex complex9 = complex8.NaN.subtract(complex5);
      Complex complex10 = complex8.INF.log();
      Complex complex11 = complex2.cosh();
      Complex complex12 = complex6.tan();
      Complex complex13 = complex12.add(complex6);
      String string0 = complex6.toString();
      Complex complex14 = complex1.exp();
      Complex complex15 = complex3.multiply((-1219.55));
      Complex complex16 = complex9.subtract(complex3);
      Complex complex17 = complex0.NaN.createComplex(1.2958646899018938E-9, 0.0);
      List<Complex> list0 = complex16.nthRoot(3929);
      Complex complex18 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex0.ZERO.tan();
      Complex complex4 = complex0.NaN.sqrt();
      Complex complex5 = complex4.INF.subtract(complex1);
      Complex complex6 = complex3.I.add(complex0);
      double double0 = complex0.getReal();
      double double1 = complex2.getReal();
      Complex complex7 = complex3.INF.subtract(complex1);
      Complex complex8 = complex2.asin();
      Complex complex9 = complex6.I.multiply(complex8);
      double double2 = complex6.INF.abs();
      Complex complex10 = complex1.negate();
      Complex complex11 = complex10.I.acos();
      Complex complex12 = complex10.ZERO.sqrt();
      Complex complex13 = complex1.sqrt1z();
      Complex complex14 = complex6.asin();
      Complex complex15 = complex14.atan();
      Complex complex16 = complex11.ZERO.cos();
      Complex complex17 = complex2.NaN.divide(complex3);
      Complex complex18 = complex17.ZERO.pow(complex1);
      Complex complex19 = complex6.cos();
      Complex complex20 = complex19.INF.tan();
      Complex complex21 = complex9.ZERO.acos();
      Complex complex22 = Complex.NaN;
      Complex complex23 = complex21.NaN.divide(complex22);
      String string0 = complex9.toString();
      double double3 = complex11.getArgument();
      boolean boolean0 = complex19.isNaN();
      Complex complex24 = complex19.divide(complex9);
      try { 
        complex11.nthRoot((-807));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -807
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-0.16624879837036133));
      Complex complex1 = new Complex((-260.0), 824.89763);
      Complex complex2 = complex0.add(complex1);
      double double0 = complex0.abs();
      Complex complex3 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(597.843391, Double.NaN);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.multiply((-434.16));
      Complex complex3 = complex2.ONE.add(complex1);
      double double0 = complex1.getArgument();
      boolean boolean0 = complex1.isNaN();
      String string0 = complex0.NaN.toString();
      double double1 = complex0.abs();
      boolean boolean1 = complex1.isInfinite();
      Complex complex4 = complex1.tan();
      boolean boolean2 = complex4.equals((Object) null);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.INF.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex0.ONE.createComplex(Double.NaN, 17);
      List<Complex> list0 = complex0.NaN.nthRoot(17);
      Complex complex4 = complex1.tanh();
      String string0 = complex4.NaN.toString();
      Complex complex5 = complex4.ONE.multiply((-1093.12624));
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = complex6.I.createComplex((-1093.12624), Double.NaN);
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex4.exp();
      double double0 = complex3.getImaginary();
      Complex complex10 = complex0.acos();
      Complex complex11 = complex3.cos();
      Complex complex12 = complex4.createComplex(0.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(2906.5646445643, 2906.5646445643);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex4.I.tanh();
      double double0 = complex5.INF.getArgument();
      Complex complex6 = complex0.divide(complex1);
      try { 
        complex6.NaN.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sin();
      double double0 = complex0.getArgument();
      Object object0 = complex1.readResolve();
      double double1 = complex0.ONE.abs();
      Complex complex2 = complex0.INF.multiply(complex1);
      Object object1 = complex0.readResolve();
      double double2 = complex1.getImaginary();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.subtract(complex0);
      int int0 = complex0.hashCode();
      Complex complex5 = complex3.cos();
      Object object2 = complex0.readResolve();
      boolean boolean0 = complex4.equals(object2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex2.log();
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex5.ZERO.exp();
      Complex complex9 = complex4.createComplex((-2097.0), 2556.0);
      int int1 = complex9.hashCode();
      Complex complex10 = complex9.cos();
      Complex complex11 = complex7.sinh();
      Complex complex12 = complex11.ZERO.cos();
      double double0 = complex11.ONE.getArgument();
      Complex complex13 = complex11.INF.add(complex6);
      double double1 = complex0.getReal();
      Complex complex14 = complex11.tan();
      double double2 = complex9.abs();
      Complex complex15 = complex7.acos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.multiply(complex1);
      double double0 = complex0.getReal();
      Complex complex3 = complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.ONE.multiply(851.75253);
      double double0 = complex2.ZERO.getArgument();
      Object object0 = complex1.NaN.readResolve();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex0.I.multiply((-1621.864843021236));
      Complex complex7 = complex0.multiply(411.49);
      Complex complex8 = complex7.acos();
      double double1 = complex8.ZERO.abs();
      Complex complex9 = complex1.pow(complex0);
      Complex complex10 = complex9.tan();
      Complex complex11 = complex8.NaN.exp();
      Complex complex12 = complex6.tanh();
      Complex complex13 = complex8.cosh();
      Complex complex14 = complex2.multiply(complex1);
      Complex complex15 = complex5.sinh();
      ComplexField complexField0 = complex9.getField();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-652.686), (-652.686));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.NaN.exp();
      Complex complex5 = complex1.subtract(complex3);
      Complex complex6 = complex1.subtract(complex0);
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex7.NaN.sqrt();
      Complex complex10 = complex9.ZERO.add(complex2);
      Complex complex11 = complex7.asin();
      Complex complex12 = complex7.exp();
      Complex complex13 = complex2.divide(complex3);
      Complex complex14 = complex7.createComplex((-1721.5), (-652.686));
      Complex complex15 = complex3.cos();
      boolean boolean0 = complex10.isNaN();
      Complex complex16 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-1794.7501), 2415.722418292888);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.log();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex6.NaN.sqrt();
      Complex complex9 = complex8.NaN.negate();
      Object object0 = complex4.readResolve();
      Complex complex10 = Complex.ZERO;
      boolean boolean0 = complex6.equals(complex10);
      Complex complex11 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex3.I.divide(complex1);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex5 = complex0.sinh();
      boolean boolean1 = complex5.isNaN();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex6.INF.subtract(complex1);
      double double0 = complex6.ZERO.getArgument();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex1.cosh();
      Complex complex10 = complex9.NaN.sin();
      Complex complex11 = complex9.add(complex8);
      Complex complex12 = complex6.sinh();
      Object object0 = complex11.readResolve();
      boolean boolean2 = complex2.isNaN();
      double double1 = complex3.getReal();
      int int0 = complex6.hashCode();
      Complex complex13 = complex6.createComplex(Double.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(981.5, 981.5);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex2.INF.multiply(2.0);
      Complex complex6 = complex2.I.subtract(complex3);
      boolean boolean0 = complex3.isNaN();
      boolean boolean1 = complex2.isNaN();
      Complex complex7 = complex2.atan();
      double double0 = complex2.abs();
      Object object0 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.16666666666666666);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-0.010714690733195933), (-0.010714690733195933));
      Complex complex2 = complex1.I.asin();
      double double0 = complex2.ONE.abs();
      Complex complex3 = complex1.ZERO.atan();
      Complex complex4 = complex0.INF.multiply(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex1.ONE.log();
      Complex complex6 = complex1.ONE.sin();
      Complex complex7 = complex4.createComplex((-0.010714690733195933), 1.0);
      Complex complex8 = complex4.log();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex9.ONE.tan();
      boolean boolean1 = complex7.equals("");
      Complex complex11 = complex8.cos();
      Complex complex12 = complex11.sinh();
      Complex complex13 = complex2.multiply(2.384185791015625E-7);
      Complex complex14 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.multiply(417.2184429);
      ComplexField complexField0 = complex2.I.getField();
      boolean boolean0 = complex1.isNaN();
      double double0 = complex2.INF.abs();
      String string0 = complex0.toString();
      Complex complex3 = complex1.exp();
      ComplexField complexField1 = complex3.getField();
      Complex complex4 = complex3.sin();
      List<Complex> list0 = complex4.NaN.nthRoot(86);
      Complex complex5 = complex4.NaN.subtract(complex1);
      Complex complex6 = complex2.add(complex3);
      Complex complex7 = complex3.sqrt();
      double double1 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1055.6375138005), 0.0);
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.cosh();
      double double0 = complex1.abs();
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex3.ZERO.conjugate();
      Complex complex7 = complex4.createComplex((-1766.7), 0.0);
      double double1 = complex4.getImaginary();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex8.ZERO.sinh();
      Complex complex10 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.log();
      double double0 = complex2.getReal();
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex1.ZERO.sqrt();
      double double1 = complex0.getArgument();
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex4.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(0.0);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex1.ZERO.log();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.I.exp();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex3.cosh();
      boolean boolean0 = complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-7140.44939731651), 778.38803958);
      Complex complex1 = new Complex(0.19999998807907104, (-7140.44939731651));
      List<Complex> list0 = complex1.NaN.nthRoot(132);
      Complex complex2 = complex0.ZERO.pow(complex1);
      Object object0 = complex2.ONE.readResolve();
      Complex complex3 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-0.49999999999999994), (-0.49999999999999994));
      List<Complex> list0 = complex0.nthRoot(2010);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.I.multiply(complex2);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex1.sinh();
      try { 
        complex3.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.INF.hashCode();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.negate();
      double double0 = complex0.abs();
      double double1 = complex2.ONE.getArgument();
      Complex complex3 = complex2.multiply(257.96);
      Complex complex4 = complex0.NaN.multiply(complex1);
      Complex complex5 = complex0.I.add(complex4);
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex1.ONE.cosh();
      Complex complex8 = complex7.INF.pow(complex0);
      Complex complex9 = complex1.NaN.atan();
      Complex complex10 = complex9.NaN.sinh();
      double double2 = 2446.201230165;
      Complex complex11 = complex4.createComplex(2446.201230165, (-1050.571403902051));
      Complex complex12 = complex11.ONE.atan();
      Complex complex13 = complex0.I.tanh();
      Complex complex14 = complex12.NaN.sqrt();
      Complex complex15 = complex14.ZERO.multiply(complex11);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.ZERO.sqrt();
      Complex complex4 = complex0.cos();
      Complex complex5 = Complex.I;
      Complex complex6 = complex3.multiply(complex5);
      Complex complex7 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sinh();
      double double0 = complex1.ZERO.abs();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex3.NaN.sqrt();
      int int0 = complex2.NaN.hashCode();
      double double1 = complex0.getImaginary();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(1912.1329953, 1912.1329953);
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(3761.1456091608, 1142.0);
      Complex complex1 = new Complex(3761.1456091608, 3761.1456091608);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.createComplex(1142.0, 3761.1456091608);
      List<Complex> list0 = complex2.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.INF.subtract(complex1);
      Complex complex4 = complex0.createComplex(0.0, (-147.1046));
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      double double0 = complex0.getImaginary();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ZERO.conjugate();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex0.sqrt();
      boolean boolean0 = complex1.equals(complex2);
      Complex complex4 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.subtract(complex0);
      try { 
        complex2.NaN.nthRoot((-852));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -852
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-2089.299018212), 0.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex2.cos();
      int int0 = complex0.NaN.hashCode();
      ComplexField complexField0 = complex3.INF.getField();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex2.multiply(0.08713622391223907);
      Complex complex5 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.I.log();
      Complex complex4 = complex2.divide(complex1);
      double double0 = complex0.getArgument();
      double double1 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt1z();
      Object object0 = complex0.NaN.readResolve();
      Complex complex2 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.createComplex(Double.NaN, (-750.10917));
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex2.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 1.0);
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(669.6288988158, 669.6288988158);
      Complex complex1 = complex0.multiply(669.6288988158);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.divide(complex0);
      try { 
        complex0.nthRoot((-1383));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,383
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.tan();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex3.INF.cosh();
      double double0 = complex3.ONE.getArgument();
      double double1 = complex2.getImaginary();
      Complex complex5 = complex1.divide(complex2);
      String string0 = complex0.ONE.toString();
      Complex complex6 = complex5.I.multiply(Double.NaN);
      ComplexField complexField1 = complex5.getField();
      Complex complex7 = complex6.ZERO.createComplex((-473.6367005720012), Double.NaN);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = complex8.INF.tan();
      Complex complex11 = complex9.ZERO.tanh();
      Complex complex12 = complex9.INF.multiply(Double.NaN);
      double double2 = complex8.getImaginary();
      double double3 = complex9.abs();
      Complex complex13 = complex10.tan();
      Complex complex14 = complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3353.26));
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.ONE.pow(complex2);
      Complex complex5 = complex3.acos();
      Complex complex6 = complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.tan();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(1.986821492305628E-8, 1.986821492305628E-8);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.NaN.sinh();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(1872.07254, 1872.07254);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ONE.divide(complex1);
      int int0 = complex1.hashCode();
      List<Complex> list0 = complex0.nthRoot(195);
      Complex complex4 = complex2.sqrt1z();
      double double0 = complex3.ONE.getArgument();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex1.add(complex3);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.exp();
      double double0 = complex1.I.abs();
      Complex complex2 = new Complex((-2432.04908124206), 0.0);
      Complex complex3 = complex0.ZERO.subtract(complex2);
      List<Complex> list0 = complex3.ZERO.nthRoot(1443);
      int int0 = complex3.NaN.hashCode();
      Complex complex4 = complex0.cosh();
      double double1 = complex4.getArgument();
      Complex complex5 = complex0.ZERO.tanh();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex6.ONE.divide(complex2);
      Complex complex8 = complex4.sqrt();
      Object object0 = complex8.I.readResolve();
      Complex complex9 = complex3.cos();
      Complex complex10 = complex4.INF.tanh();
      Complex complex11 = complex9.log();
      Complex complex12 = complex11.NaN.pow(complex4);
      double double2 = complex12.NaN.abs();
      double double3 = complex2.abs();
      Complex complex13 = complex2.conjugate();
      Complex complex14 = complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.cos();
      List<Complex> list0 = complex1.NaN.nthRoot(1546);
      Complex complex3 = complex1.INF.add(complex0);
      String string0 = complex0.ONE.toString();
      Complex complex4 = complex0.ZERO.add(complex1);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.I.atan();
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex0.ZERO.conjugate();
      Complex complex9 = complex7.ONE.cos();
      Complex complex10 = complex5.atan();
      Complex complex11 = complex10.divide(complex6);
      Complex complex12 = complex5.atan();
      Complex complex13 = complex4.pow(complex10);
      double double0 = complex4.getArgument();
      double double1 = complex9.abs();
      Complex complex14 = complex11.cosh();
      Complex complex15 = Complex.I;
      Complex complex16 = complex2.add(complex15);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(2757.4648, 2757.4648);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.I.sin();
      double double0 = complex2.ONE.abs();
      Complex complex4 = complex1.ONE.divide(complex2);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.hashCode();
      String string0 = complex0.INF.toString();
      List<Complex> list0 = complex0.nthRoot(4035);
      double double0 = complex0.getImaginary();
      double double1 = complex0.abs();
      Complex complex1 = new Complex((-2186.0008), 1185.89745697);
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.add(complex1);
      boolean boolean0 = complex3.isNaN();
      Complex complex4 = complex3.createComplex(4035, 3114.158027507);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex2.cos();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex0.divide(complex1);
      double double0 = complex4.getReal();
      double double1 = complex2.abs();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.NaN.multiply(Double.NaN);
      Complex complex7 = complex5.subtract(complex2);
      Complex complex8 = new Complex(1191.7882684, 0.0);
      int int0 = complex8.I.hashCode();
      Complex complex9 = complex8.conjugate();
      boolean boolean1 = complex4.equals(complex8);
      Complex complex10 = complex8.tan();
      Complex complex11 = complex4.conjugate();
      List<Complex> list0 = complex7.nthRoot(326);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(2.0);
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.ONE.createComplex(Double.POSITIVE_INFINITY, 1900.3750899351742);
      Complex complex3 = complex2.NaN.sqrt1z();
      String string0 = complex2.ONE.toString();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, 1900.3750899351742);
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex0.subtract(complex4);
      Complex complex8 = complex0.ZERO.negate();
      double double0 = complex4.getArgument();
      Complex complex9 = complex7.subtract(complex4);
      Complex complex10 = complex9.ZERO.cos();
      Complex complex11 = complex10.NaN.sin();
      Complex complex12 = complex1.sqrt();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex2.equals(object0);
      Complex complex13 = complex0.pow(complex10);
      Complex complex14 = complex11.sqrt();
      Complex complex15 = complex3.I.cosh();
      double double1 = complex15.INF.abs();
      double double2 = complex9.getImaginary();
      Complex complex16 = complex7.multiply(complex0);
      int int0 = complex3.hashCode();
      String string1 = complex16.toString();
      Complex complex17 = complex11.cosh();
      Complex complex18 = complex16.log();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.ONE.multiply((-1103.4837738305594));
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex3.NaN.acos();
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-2512.1385662886732), 1643.70059882613);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ONE.acos();
      double double0 = complex3.INF.getArgument();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.ZERO.subtract(complex2);
      String string0 = complex4.toString();
      boolean boolean0 = complex1.isNaN();
      Complex complex6 = complex2.ZERO.conjugate();
      Complex complex7 = complex1.subtract(complex5);
      Complex complex8 = complex7.log();
      Complex complex9 = complex0.multiply(complex3);
      Complex complex10 = complex9.I.sqrt();
      Complex complex11 = complex3.multiply(complex8);
      Complex complex12 = complex8.cos();
      Complex complex13 = complex11.acos();
      Complex complex14 = complex8.sinh();
      Complex complex15 = complex8.log();
      Complex complex16 = complex0.I.multiply(2.0);
      Complex complex17 = complex15.pow(complex10);
      String string1 = complex15.toString();
      Complex complex18 = complex3.cos();
      Complex complex19 = complex10.subtract(complex4);
      ComplexField complexField0 = complex7.getField();
      Object object0 = complex19.readResolve();
      boolean boolean1 = complex0.equals(complex14);
      Complex complex20 = complex3.cos();
      Object object1 = complex20.readResolve();
  }
}
