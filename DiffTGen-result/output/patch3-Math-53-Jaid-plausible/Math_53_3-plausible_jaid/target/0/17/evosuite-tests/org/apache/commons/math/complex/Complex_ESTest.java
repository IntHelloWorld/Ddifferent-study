/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 00:57:09 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = complex2.getArgument();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex3 = complex2.cos();
      double double1 = complex1.NaN.getArgument();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex2.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.ONE.atan();
      double double2 = complex6.INF.getArgument();
      Complex complex7 = complex1.sin();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex1.sinh();
      Complex complex12 = complex11.ZERO.tan();
      Complex complex13 = complex8.ZERO.pow(complex6);
      Complex complex14 = complex9.add(complex10);
      Complex complex15 = complex9.atan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.NaN.subtract(complex1);
      Complex complex4 = complex0.INF.conjugate();
      String string0 = complex0.ONE.toString();
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.INF.subtract(complex4);
      Complex complex8 = complex0.acos();
      Complex complex9 = complex0.log();
      String string1 = complex9.I.toString();
      int int0 = complex9.NaN.hashCode();
      Complex complex10 = complex9.I.conjugate();
      Complex complex11 = complex9.sqrt();
      double double0 = complex9.INF.abs();
      Complex complex12 = complex11.I.acos();
      Complex complex13 = complex6.multiply(0.0952233225107193);
      boolean boolean0 = complex7.isNaN();
      Complex complex14 = complex4.add(complex7);
      Complex complex15 = complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.I.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.INF.add(complex4);
      double double0 = complex6.INF.abs();
      Complex complex7 = complex4.negate();
      Complex complex8 = complex5.sinh();
      double double1 = complex5.I.abs();
      Complex complex9 = complex8.ONE.createComplex(0.0, (-1743.0147796));
      Complex complex10 = complex8.INF.divide(complex7);
      Complex complex11 = complex7.atan();
      Complex complex12 = complex11.ONE.asin();
      Complex complex13 = complex7.sqrt();
      boolean boolean0 = complex5.isNaN();
      Complex complex14 = complex7.divide(complex0);
      double double2 = complex7.getReal();
      try { 
        complex4.nthRoot((-133));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -133
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      double double0 = complex0.ZERO.abs();
      Complex complex2 = complex1.add(complex0);
      double double1 = complex1.NaN.getArgument();
      Complex complex3 = complex1.ZERO.createComplex((-1793.931), 2.0);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex2.ONE.atan();
      Complex complex6 = complex3.ZERO.tanh();
      Complex complex7 = complex2.NaN.createComplex(9.219544613762692E-9, (-812.29987877654));
      Complex complex8 = complex5.divide(complex1);
      String string0 = complex0.toString();
      Complex complex9 = complex3.NaN.add(complex0);
      Complex complex10 = complex3.pow(complex1);
      Complex complex11 = complex7.sqrt1z();
      Complex complex12 = complex10.I.sinh();
      Complex complex13 = complex2.exp();
      Complex complex14 = complex7.sqrt();
      Complex complex15 = complex10.sin();
      Complex complex16 = complex5.asin();
      Complex complex17 = complex5.tanh();
      Complex complex18 = complex17.ZERO.sqrt1z();
      double double2 = complex2.abs();
      String string1 = complex16.toString();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.ONE.cos();
      double double0 = complex2.ONE.abs();
      Complex complex5 = complex2.NaN.subtract(complex1);
      Complex complex6 = complex3.INF.cos();
      Complex complex7 = complex6.INF.log();
      Complex complex8 = complex2.cos();
      double double1 = complex8.abs();
      Complex complex9 = complex3.log();
      Object object1 = complex9.ZERO.readResolve();
      int int0 = complex9.hashCode();
      Complex complex10 = complex9.cos();
      Complex complex11 = complex10.sqrt();
      Complex complex12 = complex11.INF.sinh();
      Complex complex13 = complex0.tanh();
      Complex complex14 = complex13.ONE.multiply(1.0);
      double double2 = complex13.abs();
      Complex complex15 = complex13.INF.log();
      Complex complex16 = complex13.createComplex((-4050.91169785976), 0.0);
      Complex complex17 = complex14.cos();
      Complex complex18 = complex17.NaN.pow(complex3);
      double double3 = complex15.getReal();
      Complex complex19 = complex5.divide(complex1);
      ComplexField complexField1 = complex15.getField();
      double double4 = complex14.getReal();
      double double5 = complex12.getArgument();
      double double6 = complex13.abs();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-256.404), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.INF.atan();
      String string0 = complex1.ONE.toString();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.log();
      Object object0 = complex5.readResolve();
      Complex complex6 = complex5.log();
      Object object1 = complex6.ZERO.readResolve();
      Complex complex7 = complex4.exp();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.conjugate();
      boolean boolean0 = complex6.isNaN();
      Complex complex7 = complex4.pow(complex1);
      String string0 = complex1.toString();
      Complex complex8 = complex6.cosh();
      Complex complex9 = Complex.NaN;
      int int0 = complex8.ZERO.hashCode();
      Complex complex10 = complex9.ZERO.tan();
      Complex complex11 = complex1.NaN.conjugate();
      Object object0 = complex10.ZERO.readResolve();
      Complex complex12 = complex9.subtract(complex3);
      boolean boolean1 = complex8.equals(complex9);
      boolean boolean2 = complex1.equals(complex4);
      Complex complex13 = complex12.divide(complex3);
      Complex complex14 = complex12.ZERO.multiply(complex0);
      double double0 = complex14.ZERO.getArgument();
      Complex complex15 = complex1.ONE.negate();
      Complex complex16 = complex7.NaN.sqrt();
      Complex complex17 = complex7.multiply(0.0);
      Complex complex18 = complex13.sqrt1z();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex19 = complex11.sqrt1z();
      Complex complex20 = complex2.createComplex(0.0, (-3474.52663));
      Complex complex21 = complex7.subtract(complex6);
      Complex complex22 = complex14.sinh();
      Complex complex23 = complex9.cos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-4426.39142874673), (-4426.39142874673));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.multiply(1.0);
      Complex complex3 = Complex.INF;
      int int0 = complex3.ONE.hashCode();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex0.INF.add(complex3);
      Object object0 = complex6.ZERO.readResolve();
      int int1 = complex6.NaN.hashCode();
      Complex complex7 = complex0.sin();
      double double0 = complex7.INF.abs();
      boolean boolean0 = complex3.isNaN();
      Complex complex8 = complex6.tan();
      Complex complex9 = complex7.sin();
      boolean boolean1 = complex8.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex3.multiply(4492.365315644135);
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex2.INF.conjugate();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.I.pow(complex0);
      String string0 = complex0.toString();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex0.acos();
      Object object0 = complex0.readResolve();
      Complex complex11 = complex0.ONE.tan();
      Complex complex12 = complex11.I.tan();
      Complex complex13 = complex11.I.sin();
      boolean boolean0 = complex9.equals(object0);
      Complex complex14 = Complex.INF;
      Complex complex15 = complex9.multiply(complex14);
      String string1 = complex9.toString();
      Complex complex16 = complex2.asin();
      Complex complex17 = complex15.multiply(177.10398);
      boolean boolean1 = complex12.isNaN();
      ComplexField complexField0 = complex6.getField();
      double double0 = complex2.getReal();
      Complex complex18 = complex4.sin();
      Complex complex19 = complex8.multiply(2.0);
      Complex complex20 = complex19.tan();
      Complex complex21 = complex19.sqrt();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.ZERO.readResolve();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.equals(object0);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(1015.963778699601, 758.341252);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.createComplex(1535.99, 1015.963778699601);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.I.add(complex1);
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex4.I.log();
      String string0 = complex3.INF.toString();
      double double0 = complex0.getArgument();
      Complex complex7 = complex1.createComplex((-14.0), 1644.13);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = complex0.ZERO.conjugate();
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex4.NaN.cos();
      Object object0 = complex4.I.readResolve();
      Complex complex7 = complex1.INF.sqrt();
      Complex complex8 = complex0.NaN.divide(complex4);
      String string0 = complex8.NaN.toString();
      // Undeclared exception!
      complex0.nthRoot(5558);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(0.0, (-0.3058015757857271));
      Complex complex3 = complex0.add(complex2);
      boolean boolean0 = complex1.isInfinite();
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex0.ONE.cos();
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex5.sin();
      Object object0 = complex5.INF.readResolve();
      Complex complex7 = complex0.ZERO.sqrt();
      Complex complex8 = complex0.multiply((-298.052));
      String string0 = complex0.ZERO.toString();
      Complex complex9 = complex8.exp();
      double double0 = complex9.INF.getArgument();
      double double1 = complex9.getArgument();
      Complex complex10 = complex0.sinh();
      String string1 = complex10.INF.toString();
      boolean boolean0 = complex8.isNaN();
      Complex complex11 = complex8.NaN.acos();
      Complex complex12 = complex11.ONE.negate();
      Complex complex13 = complex12.ZERO.createComplex(0.7853981633974483, 1.625);
      Complex complex14 = complex7.NaN.asin();
      Object object1 = complex14.readResolve();
      Complex complex15 = complex7.sin();
      String string2 = complex4.toString();
      double double2 = complex15.abs();
      Complex complex16 = complex8.subtract(complex10);
      String string3 = complex15.toString();
      double double3 = complex8.getImaginary();
      Complex complex17 = Complex.ZERO;
      Complex complex18 = complex16.multiply(complex17);
      boolean boolean1 = complex15.isNaN();
      double double4 = complex15.getReal();
      Complex complex19 = complex7.sin();
      Complex complex20 = complex11.tan();
      double double5 = complex17.abs();
      Complex complex21 = complex18.conjugate();
      Complex complex22 = complex12.tan();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.tanh();
      double double0 = complex0.INF.abs();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex2.ZERO.add(complex0);
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex6.atan();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex8.ZERO.sin();
      List<Complex> list0 = complex0.nthRoot(153);
      Complex complex10 = complex0.createComplex(0.0, 153);
      Complex complex11 = complex10.cosh();
      Complex complex12 = complex11.I.divide(complex4);
      double double1 = complex5.abs();
      double double2 = complex4.getImaginary();
      Complex complex13 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(6003.0311, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.pow(complex0);
      Object object0 = complex2.readResolve();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.ZERO.negate();
      Complex complex5 = complex1.ZERO.acos();
      String string0 = complex0.toString();
      Complex complex6 = complex3.subtract(complex1);
      Complex complex7 = complex4.ONE.pow(complex6);
      Complex complex8 = complex0.acos();
      Complex complex9 = complex8.sin();
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex8.tan();
      double double0 = complex9.getReal();
      double double1 = complex6.getImaginary();
      double double2 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      List<Complex> list0 = complex0.nthRoot(167);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.multiply(complex0);
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex1.equals(object1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.exp();
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.tanh();
      double double0 = complex3.ZERO.abs();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex2.I.multiply(complex0);
      Complex complex7 = complex4.NaN.createComplex(1070.7867791108, (-2566.0));
      Complex complex8 = complex7.ONE.asin();
      Complex complex9 = complex8.I.log();
      boolean boolean0 = complex2.equals(complex4);
      double double1 = complex0.getArgument();
      String string0 = complex4.toString();
      Complex complex10 = complex6.INF.negate();
      Complex complex11 = complex0.pow(complex2);
      Complex complex12 = complex11.I.multiply(complex0);
      Complex complex13 = complex2.conjugate();
      Complex complex14 = complex6.tan();
      Complex complex15 = complex7.sin();
      Complex complex16 = complex15.NaN.cosh();
      Complex complex17 = complex16.ZERO.add(complex2);
      Complex complex18 = complex13.asin();
      boolean boolean1 = complex1.isInfinite();
      double double2 = complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      int int0 = complex0.ZERO.hashCode();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.INF.divide(complex0);
      Object object0 = complex1.I.readResolve();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.cos();
      Object object1 = complex1.readResolve();
      ComplexField complexField0 = complex4.getField();
      Complex complex6 = complex1.atan();
      Complex complex7 = new Complex((-1781.5), (-1781.5));
      Complex complex8 = complex7.NaN.asin();
      Complex complex9 = complex8.I.createComplex(0.0, 0.6366197723675814);
      Complex complex10 = complex7.I.log();
      Complex complex11 = complex6.add(complex7);
      Complex complex12 = complex6.exp();
      String string1 = complex5.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex0.ZERO.conjugate();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex1.ONE.exp();
      Complex complex6 = complex5.NaN.cosh();
      Complex complex7 = complex1.createComplex((-1156.5744207), (-1.0));
      Complex complex8 = complex5.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(3133.2, 3133.2);
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.I.subtract(complex2);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.divide(complex3);
      Complex complex6 = complex2.subtract(complex3);
      Complex complex7 = complex2.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(4530.67952020384, Double.NaN);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex1.log();
      Complex complex5 = complex0.NaN.log();
      boolean boolean0 = complex4.isNaN();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.I.acos();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex8.sin();
      Complex complex10 = complex6.tan();
      Complex complex11 = complex2.multiply(complex9);
      double double0 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-2147.545337), (-2147.545337));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.tanh();
      Object object0 = complex0.NaN.readResolve();
      Complex complex2 = complex0.ONE.sqrt1z();
      double double0 = complex0.getReal();
      Complex complex3 = complex2.INF.multiply(Double.NaN);
      Complex complex4 = complex2.multiply(0.0);
      Complex complex5 = complex3.NaN.conjugate();
      String string0 = complex3.toString();
      List<Complex> list0 = complex3.I.nthRoot(237);
      List<Complex> list1 = complex4.ONE.nthRoot(237);
      Object object1 = complex2.readResolve();
      Complex complex6 = complex3.ONE.sinh();
      Complex complex7 = complex6.ONE.cosh();
      Complex complex8 = complex3.multiply(0.0);
      Complex complex9 = complex8.ZERO.sinh();
      Complex complex10 = complex4.atan();
      int int0 = complex0.hashCode();
      Complex complex11 = complex7.negate();
      double double1 = complex11.NaN.getArgument();
      Complex complex12 = complex11.INF.conjugate();
      Complex complex13 = complex12.I.sqrt();
      Complex complex14 = complex7.negate();
      boolean boolean0 = complex9.isNaN();
      Complex complex15 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = new Complex((-1.0), (-1.0));
      Complex complex4 = complex1.INF.divide(complex3);
      Complex complex5 = complex0.NaN.acos();
      int int0 = complex5.I.hashCode();
      Complex complex6 = complex1.I.sqrt1z();
      Complex complex7 = complex0.createComplex(0.0, 0.0);
      double double0 = complex0.getImaginary();
      double double1 = complex0.getImaginary();
      Complex complex8 = complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(1890.86, 1890.86);
      Complex complex1 = complex0.sinh();
      int int0 = complex1.I.hashCode();
      double double0 = complex1.getArgument();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex0.multiply(41.75);
      Complex complex3 = complex2.ZERO.subtract(complex0);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex0.createComplex((-0.7853981633974483), 0.0);
      Complex complex6 = complex2.cosh();
      boolean boolean0 = complex3.isNaN();
      Complex complex7 = complex1.log();
      Complex complex8 = complex1.multiply(complex2);
      double double1 = complex5.abs();
      Complex complex9 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex2.INF.multiply(complex1);
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex5.ONE.exp();
      Complex complex7 = complex6.ONE.negate();
      double double0 = complex0.getImaginary();
      Complex complex8 = complex1.multiply(complex4);
      double double1 = complex2.abs();
      Complex complex9 = complex4.tanh();
      Complex complex10 = complex2.I.sinh();
      Complex complex11 = complex2.I.sin();
      double double2 = complex10.ZERO.getArgument();
      Complex complex12 = new Complex(0.0, 2.0);
      Complex complex13 = complex9.NaN.add(complex12);
      Complex complex14 = complex8.acos();
      Complex complex15 = complex1.multiply(0.0);
      Complex complex16 = complex15.multiply(complex12);
      Complex complex17 = complex16.INF.cosh();
      Complex complex18 = complex12.exp();
      Complex complex19 = complex15.multiply(0.0);
      Complex complex20 = complex5.multiply(complex17);
      Complex complex21 = complex16.multiply(1410.231);
      try { 
        complex21.INF.nthRoot((-580));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -580
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.atan();
      double double0 = complex1.ZERO.abs();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex1.INF.sinh();
      int int0 = complex1.ONE.hashCode();
      double double1 = complex0.getArgument();
      Complex complex4 = complex3.NaN.acos();
      try { 
        complex0.nthRoot((-1453));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,453
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.createComplex((-1627.0), (-1627.0));
      Complex complex4 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      double double0 = complex0.getReal();
      double double1 = complex0.getReal();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.INF.exp();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex6.ZERO.subtract(complex5);
      double double2 = complex6.ONE.abs();
      double double3 = complex6.NaN.getArgument();
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex5.equals(object0);
      Complex complex8 = complex2.multiply(0.0);
      double double4 = complex0.getReal();
      Complex complex9 = complex1.atan();
      Complex complex10 = complex9.ONE.pow(complex3);
      try { 
        complex8.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex4.I.sqrt1z();
      double double0 = complex4.ONE.abs();
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.INF.cos();
      Complex complex8 = complex6.createComplex((-100.73496992710724), 2372.40255854);
      int int0 = complex8.ONE.hashCode();
      Complex complex9 = complex8.divide(complex3);
      double double1 = complex9.INF.getArgument();
      Complex complex10 = complex9.negate();
      Complex complex11 = complex9.cosh();
      boolean boolean1 = complex6.equals(complex3);
      Complex complex12 = complex9.multiply((-100.73496992710724));
      Complex complex13 = complex12.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.multiply(complex1);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      boolean boolean1 = complex0.equals((Object) null);
      boolean boolean2 = complex1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-990.6136254980131), (-2139.0));
      Complex complex1 = complex0.NaN.acos();
      Object object0 = complex1.readResolve();
      Complex complex2 = ((Complex) object0).I.sin();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.ZERO.negate();
      Complex complex5 = complex0.conjugate();
      int int0 = complex0.hashCode();
      String string0 = complex0.ONE.toString();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.NaN.cosh();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex0.exp();
      Complex complex10 = complex5.add(complex6);
      Complex complex11 = complex1.multiply((-2139.0));
      Complex complex12 = complex6.log();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex0.ZERO.acos();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex2.cosh();
      boolean boolean0 = complex6.isNaN();
      try { 
        complex6.nthRoot((-1981));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,981
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-117.201919155), 0.0);
      String string0 = complex0.NaN.toString();
      try { 
        complex0.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.I.getField();
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.ZERO.sqrt();
      ComplexField complexField1 = complex0.getField();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.ZERO.pow(complex3);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex6.cos();
      double double1 = complex7.ZERO.getArgument();
      Complex complex8 = complex5.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.ZERO.tan();
      int int0 = complex2.I.hashCode();
      double double0 = complex0.abs();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.atan();
      double double1 = complex0.getReal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.INF.sin();
      double double2 = complex0.ONE.getArgument();
      Complex complex4 = complex2.ONE.asin();
      Object object0 = complex2.I.readResolve();
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex5.pow(complex0);
      Complex complex7 = complex6.INF.add(complex5);
      Complex complex8 = complex5.sin();
      Complex complex9 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      Complex complex1 = new Complex(1.0, 1.0);
      Complex complex2 = complex1.ZERO.cosh();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.multiply((-517.992317799));
      String string0 = complex0.toString();
      Complex complex5 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-315.23548073), (-315.23548073));
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.INF.divide(complex0);
      Complex complex5 = complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.conjugate();
      double double0 = complex1.ZERO.getArgument();
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex2.multiply(complex6);
      double double1 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.asin();
      boolean boolean0 = complex3.equals(complex0);
      boolean boolean1 = complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.INF.add(complex1);
      double double0 = complex0.abs();
      Complex complex4 = complex0.createComplex(1925.312460033543, Double.NaN);
      Complex complex5 = complex0.createComplex(Double.NaN, 1280.057);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.cosh();
      String string0 = complex1.NaN.toString();
      Complex complex3 = complex0.NaN.conjugate();
      double double0 = complex0.getReal();
      Complex complex4 = complex3.createComplex(0.0, (-3014.2099683706456));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply((-534.6722793688));
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(2332.5502805567, 2332.5502805567);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply(2332.5502805567);
      Complex complex3 = complex0.ONE.cos();
      Complex complex4 = complex0.NaN.sqrt1z();
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.toString();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex1.divide(complex0);
      boolean boolean0 = complex0.equals("(1.0, 0.0)");
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      try { 
        complex0.nthRoot((-2775));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,775
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.INF.divide(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.negate();
      boolean boolean1 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.ONE.log();
      double double0 = complex1.NaN.abs();
      double double1 = complex0.getImaginary();
      Complex complex2 = new Complex(2.85040095144011776E17, 2.85040095144011776E17);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex4.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.conjugate();
      String string0 = complex1.INF.toString();
      Complex complex3 = complex1.atan();
      double double0 = complex3.abs();
      boolean boolean0 = complex0.isNaN();
      double double1 = complex0.getReal();
      Complex complex4 = complex0.add(complex3);
      double double2 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex2.log();
      Complex complex7 = complex3.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.tan();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.createComplex(0.0, 3880.7);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      try { 
        complex0.ONE.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Object object0 = complex0.ONE.readResolve();
      Complex complex3 = complex0.I.createComplex(2.0, (-2952.08241204));
      Complex complex4 = complex3.NaN.subtract(complex0);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.ZERO.add(complex5);
      Complex complex7 = complex3.ONE.conjugate();
      double double0 = complex0.getReal();
      ComplexField complexField0 = complex3.getField();
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex9.exp();
      Complex complex12 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-3227.46), (-3227.46));
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex0.isNaN();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-1160.95336752302), (-1160.95336752302));
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.exp();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      double double1 = 1530.3529;
      Complex complex4 = complex2.createComplex(1530.3529, (-1160.95336752302));
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.subtract(complex4);
      Complex complex7 = complex2.ONE.exp();
      Complex complex8 = complex7.I.multiply(complex0);
      Complex complex9 = complex5.INF.tan();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex10 = complex2.ONE.multiply((-1160.95336752302));
      int int0 = (-2487);
      try { 
        complex5.nthRoot((-2487));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,487
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-990.6136254980131), (-2139.0));
      Complex complex1 = complex0.NaN.acos();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.ZERO.negate();
      Complex complex4 = complex0.conjugate();
      int int0 = complex0.hashCode();
      String string0 = complex0.ONE.toString();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.NaN.cosh();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex0.ONE.subtract(complex1);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex0.sinh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex2.subtract(complex6);
      Complex complex8 = complex5.negate();
      Complex complex9 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.NaN.nthRoot(274);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex2.conjugate();
      double double0 = complex4.getImaginary();
      Complex complex5 = complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.I.sqrt1z();
      double double0 = complex0.getReal();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.divide(complex0);
      String string0 = complex0.ONE.toString();
      String string1 = complex1.ONE.toString();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex1.INF.abs();
      String string2 = complex0.toString();
      Complex complex3 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.ZERO.add(complex0);
      String string0 = complex2.ONE.toString();
      double double0 = complex1.ONE.abs();
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.ZERO.multiply(complex5);
      Complex complex7 = complex4.NaN.conjugate();
      Object object0 = complex4.ZERO.readResolve();
      double double1 = complex0.getImaginary();
      String string1 = complex4.toString();
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex0.conjugate();
      ComplexField complexField0 = complex3.getField();
      int int0 = complex0.hashCode();
      Complex complex10 = complex4.negate();
      ComplexField complexField1 = complex10.ZERO.getField();
      Complex complex11 = complex10.I.cos();
      double double2 = complex0.getReal();
      boolean boolean0 = complex6.isInfinite();
      Complex complex12 = complex4.pow(complex2);
      double double3 = complex4.abs();
      Complex complex13 = complex5.acos();
      Complex complex14 = complex3.divide(complex13);
      Complex complex15 = complex0.ONE.add(complex2);
      Complex complex16 = complex15.I.createComplex(2.0, 0.0);
      Complex complex17 = complex2.multiply(0.008336750013465571);
      Complex complex18 = complex10.INF.conjugate();
      ComplexField complexField2 = complex14.getField();
      Complex complex19 = complex8.add(complex10);
      Complex complex20 = complex2.negate();
      boolean boolean1 = complex16.isInfinite();
      Complex complex21 = complex12.sinh();
      int int1 = complex17.hashCode();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1021.1);
      Complex complex1 = complex0.multiply(1021.1);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex6.INF.multiply(complex5);
      boolean boolean0 = complex1.isNaN();
      ComplexField complexField0 = complex2.getField();
      Complex complex8 = complex5.subtract(complex1);
      Complex complex9 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      int int0 = 37;
      List<Complex> list0 = complex0.I.nthRoot(37);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex3.NaN.sqrt();
      int int1 = 0;
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-1670.238), (-1670.238));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex3.ONE.multiply(complex0);
      int int0 = complex1.NaN.hashCode();
      Complex complex5 = complex2.ONE.sin();
      Complex complex6 = complex0.ONE.cosh();
      Complex complex7 = complex5.NaN.acos();
      int int1 = complex7.I.hashCode();
      Complex complex8 = complex7.pow(complex5);
      String string0 = complex2.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex2.tanh();
      Complex complex10 = complex7.log();
      Object object0 = complex5.NaN.readResolve();
      Object object1 = complex9.I.readResolve();
      Complex complex11 = complex10.ZERO.add(complex8);
      String string1 = complex4.toString();
      Complex complex12 = complex0.subtract(complex9);
      Complex complex13 = complex12.divide(complex3);
      Complex complex14 = complex12.cos();
      Complex complex15 = complex3.log();
      Complex complex16 = complex15.I.log();
      Complex complex17 = complex8.tan();
      Complex complex18 = complex2.pow(complex15);
      Complex complex19 = complex16.cosh();
      Complex complex20 = complex2.pow(complex11);
      Complex complex21 = complex3.log();
      Complex complex22 = complex8.multiply(2294.7917249411);
      Complex complex23 = complex0.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ZERO.subtract(complex0);
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.tan();
      double double0 = complex2.ONE.getArgument();
      Complex complex3 = complex0.I.tan();
      List<Complex> list0 = complex1.NaN.nthRoot(46);
      Complex complex4 = new Complex((-22.80673136), Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.ONE.subtract(complex4);
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.INF.sqrt();
      Complex complex7 = complex0.multiply(0.0);
      Complex complex8 = complex3.add(complex2);
      boolean boolean0 = complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.I.divide(complex1);
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex3.INF.pow(complex2);
      Complex complex7 = complex0.pow(complex3);
      Complex complex8 = complex2.ZERO.asin();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex2.sin();
      Complex complex11 = complex10.I.multiply(complex1);
      Complex complex12 = complex10.I.cosh();
      Complex complex13 = complex10.ZERO.multiply(complex6);
      Complex complex14 = complex3.subtract(complex9);
      Complex complex15 = complex10.ZERO.multiply(0.0);
      Complex complex16 = complex15.multiply(0.0);
      Complex complex17 = complex1.acos();
      boolean boolean0 = complex7.isInfinite();
      Object object0 = complex9.readResolve();
      Complex complex18 = complex9.cos();
      Complex complex19 = complex18.asin();
      Complex complex20 = complex2.sin();
      Complex complex21 = complex14.cos();
      ComplexField complexField0 = complex21.ONE.getField();
      double double0 = complex14.getImaginary();
      boolean boolean1 = complex17.isInfinite();
      Complex complex22 = Complex.INF;
      boolean boolean2 = complex18.equals(complex22);
      Complex complex23 = complex22.sin();
      Complex complex24 = complex7.negate();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(962.0347535, 0.0);
      Complex complex1 = complex0.NaN.sqrt();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex1.I.createComplex(2.479773539153719E-5, (-8.0E298));
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.INF.atan();
      Complex complex6 = complex2.ZERO.createComplex(0.0, (-8.0E298));
      Complex complex7 = complex4.asin();
      int int0 = complex2.hashCode();
      Complex complex8 = complex5.I.sqrt();
      Complex complex9 = complex1.ONE.divide(complex6);
      double double0 = complex9.getArgument();
      List<Complex> list0 = complex4.ZERO.nthRoot(1043);
      Complex complex10 = complex5.subtract(complex7);
      Complex complex11 = complex5.tanh();
      double double1 = complex11.INF.getArgument();
      Complex complex12 = complex11.ONE.sqrt();
      Complex complex13 = complex11.ONE.subtract(complex2);
      Complex complex14 = complex13.I.sqrt();
      Complex complex15 = complex12.ZERO.pow(complex5);
      Complex complex16 = complex11.ONE.conjugate();
      Complex complex17 = complex0.negate();
      Complex complex18 = complex17.I.tan();
      Complex complex19 = complex2.conjugate();
      Complex complex20 = complex19.ZERO.conjugate();
      List<Complex> list1 = complex2.nthRoot(17);
      String string0 = complex8.toString();
      Complex complex21 = complex16.pow(complex3);
  }
}
