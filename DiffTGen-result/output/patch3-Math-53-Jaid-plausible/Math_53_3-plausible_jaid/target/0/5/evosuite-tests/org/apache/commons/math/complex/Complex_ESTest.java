/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 00:49:46 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex3.NaN.exp();
      Complex complex6 = complex3.divide(complex0);
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.NaN.sinh();
      Complex complex9 = complex3.log();
      Complex complex10 = complex9.INF.log();
      Complex complex11 = complex1.atan();
      ComplexField complexField0 = complex4.getField();
      Complex complex12 = complex3.cos();
      Complex complex13 = complex12.sqrt1z();
      Complex complex14 = complex2.exp();
      double double0 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(747.20048, Double.NaN);
      Complex complex1 = null;
      try { 
        complex0.INF.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.NaN.conjugate();
      ComplexField complexField0 = complex3.INF.getField();
      ComplexField complexField1 = complex0.getField();
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = complex3.add(complex0);
      int int0 = complex5.NaN.hashCode();
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex8.I.cosh();
      Complex complex10 = complex9.INF.tan();
      Complex complex11 = complex8.ZERO.acos();
      Complex complex12 = complex0.conjugate();
      Complex complex13 = complex7.ONE.negate();
      Complex complex14 = complex1.NaN.atan();
      Complex complex15 = complex2.createComplex(0.0, 0.0);
      Complex complex16 = complex2.sinh();
      Complex complex17 = complex7.add(complex8);
      double double0 = complex6.getArgument();
      Complex complex18 = complex1.sqrt1z();
      Complex complex19 = complex13.tanh();
      Complex complex20 = complex8.asin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.asin();
      ComplexField complexField0 = complex0.I.getField();
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex1.I.acos();
      Complex complex5 = complex0.ZERO.acos();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.I.subtract(complex6);
      Object object0 = complex0.readResolve();
      Complex complex8 = complex0.tanh();
      double double1 = complex1.ONE.abs();
      Complex complex9 = complex8.INF.subtract(complex0);
      Complex complex10 = complex0.NaN.sqrt1z();
      Complex complex11 = complex10.ZERO.sqrt1z();
      Complex complex12 = complex10.INF.pow(complex3);
      Complex complex13 = complex10.INF.cos();
      boolean boolean0 = complex0.equals(complex1);
      String string0 = complex8.toString();
      Object object1 = complex0.readResolve();
      String string1 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.I.nthRoot(746);
      Object object0 = complex0.readResolve();
      double double0 = complex0.abs();
      Complex complex1 = new Complex(0.0, Double.NaN);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.ONE.conjugate();
      double double1 = complex3.getArgument();
      Complex complex5 = complex1.multiply(complex3);
      Complex complex6 = complex5.log();
      double double2 = complex6.NaN.abs();
      double double3 = complex2.getReal();
      ComplexField complexField0 = complex6.getField();
      boolean boolean0 = complex5.equals(complex4);
      Complex complex7 = complex1.asin();
      double double4 = complex7.abs();
      Complex complex8 = complex7.I.sinh();
      int int0 = complex1.ZERO.hashCode();
      Complex complex9 = complex3.atan();
      Object object0 = complex4.readResolve();
      boolean boolean1 = complex7.equals(object0);
      Complex complex10 = complex7.cos();
      Complex complex11 = complex0.createComplex(0.0, (-1122.2954775428325));
      Complex complex12 = complex11.INF.log();
      double double5 = complex7.getImaginary();
      Complex complex13 = complex9.tanh();
      Complex complex14 = complex2.sin();
      Complex complex15 = complex14.sqrt1z();
      Complex complex16 = complex1.sqrt1z();
      String string0 = complex0.toString();
      Complex complex17 = complex14.negate();
      Complex complex18 = new Complex(Double.NaN, 0.7949577687638784);
      Object object1 = complex18.readResolve();
      boolean boolean2 = complex2.equals(object1);
      double double6 = complex13.abs();
      boolean boolean3 = complex18.isNaN();
      Complex complex19 = complex17.tan();
      Complex complex20 = complex11.sin();
      Complex complex21 = complex13.acos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 724.0219);
      Complex complex1 = complex0.createComplex(0.0, 2278.814330831129);
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.INF.multiply(complex1);
      int int0 = complex3.ONE.hashCode();
      List<Complex> list0 = complex2.INF.nthRoot(3104);
      Complex complex4 = new Complex(802.78856, 11.0);
      Complex complex5 = complex0.INF.multiply(complex4);
      Complex complex6 = complex4.ZERO.sqrt();
      Complex complex7 = complex2.ONE.tanh();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex5.createComplex(802.78856, 0.0);
      Complex complex10 = complex2.tanh();
      Complex complex11 = complex10.ZERO.pow(complex0);
      Complex complex12 = complex0.subtract(complex9);
      String string0 = complex12.toString();
      Complex complex13 = complex5.atan();
      Object object0 = complex5.readResolve();
      double double0 = complex8.getArgument();
      try { 
        complex12.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex1.cos();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.createComplex(0.0, 2050.3471);
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.I.add(complex3);
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex4.I.multiply(complex3);
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex2.exp();
      ComplexField complexField1 = complex7.I.getField();
      List<Complex> list0 = complex7.nthRoot(54);
      List<Complex> list1 = complex6.nthRoot(281);
      Complex complex8 = complex3.add(complex6);
      Complex complex9 = complex8.atan();
      double double0 = complex1.ZERO.getArgument();
      int int0 = complex1.hashCode();
      Complex complex10 = complex0.multiply(complex1);
      Complex complex11 = complex9.cosh();
      Complex complex12 = complex11.INF.createComplex(373.245597957729, 0.0);
      Complex complex13 = new Complex(0.0, 0.0);
      boolean boolean1 = complex9.equals(complex13);
      Complex complex14 = complex1.multiply(complex10);
      double double1 = complex13.getReal();
      double double2 = complex11.abs();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(1551.478);
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex0.NaN.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex5 = complex0.ONE.add(complex3);
      Object object1 = new Object();
      boolean boolean0 = complex0.equals(object1);
      double double0 = (-297.888733);
      Complex complex6 = complex0.createComplex(6.283185307179586, (-297.888733));
      Complex complex7 = complex0.sqrt1z();
      Object object2 = complex2.readResolve();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex6.ZERO.conjugate();
      double double1 = complex9.NaN.getArgument();
      Complex complex10 = complex8.ONE.atan();
      Complex complex11 = complex0.INF.multiply(complex4);
      Complex complex12 = complex2.divide(complex6);
      Complex complex13 = complex3.multiply(6.283185307179586);
      double double2 = complex5.getArgument();
      try { 
        complex10.nthRoot((-198));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -198
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-132.866772710965), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cos();
      Complex complex2 = new Complex(1458.0103984594527, 1458.0103984594527);
      Complex complex3 = complex0.ONE.subtract(complex2);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = complex7.NaN.sinh();
      Complex complex9 = complex6.multiply((-2701.84));
      Complex complex10 = complex9.multiply((-2701.84));
      Complex complex11 = complex4.sqrt();
      Complex complex12 = complex6.INF.createComplex((-1.0), 0.0);
      Complex complex13 = complex0.multiply(1256.8);
      Complex complex14 = complex0.pow(complex5);
      Complex complex15 = complex3.negate();
      double double0 = complex15.ZERO.abs();
      Complex complex16 = complex6.multiply((-132.866772710965));
      Complex complex17 = complex14.tanh();
      Complex complex18 = complex6.cos();
      Complex complex19 = complex18.exp();
      String string0 = complex2.toString();
      Complex complex20 = complex12.sin();
      Complex complex21 = complex6.conjugate();
      double double1 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.cosh();
      double double0 = complex0.getReal();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex3.NaN.cosh();
      Complex complex6 = complex3.NaN.tan();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex2.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt1z();
      String string0 = complex0.I.toString();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, (-3724.252));
      Complex complex3 = complex0.ZERO.divide(complex2);
      Complex complex4 = complex1.I.createComplex(2.0, 1694.6844126535);
      double double0 = complex0.getImaginary();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex0.INF.asin();
      Complex complex7 = complex0.subtract(complex1);
      Complex complex8 = complex3.sinh();
      Complex complex9 = complex1.sin();
      boolean boolean0 = complex2.isNaN();
      Complex complex10 = complex2.exp();
      Complex complex11 = complex0.cos();
      Complex complex12 = complex3.sinh();
      Complex complex13 = complex12.ONE.tan();
      Complex complex14 = complex11.cosh();
      Complex complex15 = complex14.INF.multiply((-3724.252));
      ComplexField complexField0 = complex10.getField();
      boolean boolean1 = complex6.isInfinite();
      Complex complex16 = complex13.multiply(complex15);
      Complex complex17 = complex10.createComplex(1.2393345855018391E-8, 0.0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(0.125, (-1.0));
      Complex complex1 = complex0.atan();
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = complex5.ONE.acos();
      Complex complex8 = complex4.INF.multiply(0.125);
      Complex complex9 = complex0.tan();
      Complex complex10 = complex9.INF.sqrt1z();
      double double0 = complex0.getArgument();
      Complex complex11 = complex0.cos();
      Complex complex12 = complex11.log();
      Complex complex13 = complex12.negate();
      Complex complex14 = complex9.sqrt();
      Complex complex15 = complex9.sin();
      Complex complex16 = complex8.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.createComplex(2016.2887826, (-1278.766754004442));
      Complex complex2 = complex1.ZERO.sqrt();
      int int0 = complex1.ZERO.hashCode();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex2.NaN.cos();
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = complex6.atan();
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex6.exp();
      Complex complex9 = complex8.createComplex((-726.46708917), 3100.1214051889);
      Complex complex10 = complex9.atan();
      String string0 = complex6.toString();
      Complex complex11 = complex7.negate();
      Complex complex12 = complex11.multiply(2016.2887826);
      Complex complex13 = complex8.add(complex9);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(57.2957763671875, 57.2957763671875);
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = Complex.ONE;
      String string0 = complex0.ONE.toString();
      Complex complex3 = complex2.createComplex(1696.39782, 0.0);
      Complex complex4 = complex1.ONE.pow(complex0);
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex3.INF.sqrt();
      Complex complex7 = complex3.subtract(complex0);
      Complex complex8 = complex1.asin();
      Complex complex9 = complex8.I.divide(complex5);
      Complex complex10 = complex8.multiply(0.0);
      Complex complex11 = complex0.subtract(complex2);
      Complex complex12 = complex3.ZERO.log();
      Complex complex13 = complex12.ONE.createComplex((-2393.0), (-1244.8171201789212));
      Complex complex14 = complex11.ONE.sin();
      Complex complex15 = complex1.sqrt1z();
      String string1 = complex15.I.toString();
      double double0 = complex0.getArgument();
      Complex complex16 = complex7.tan();
      double double1 = complex15.abs();
      Complex complex17 = complex2.NaN.sqrt1z();
      Complex complex18 = complex7.asin();
      Object object0 = complex16.readResolve();
      List<Complex> list0 = complex18.ONE.nthRoot(2845);
      double double2 = complex16.getReal();
      boolean boolean0 = complex18.isNaN();
      double double3 = complex15.getArgument();
      Complex complex19 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1;
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ZERO.log();
      double double0 = complex1.getReal();
      Complex complex3 = complex2.INF.conjugate();
      try { 
        complex1.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex3.ZERO.log();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.log();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.ZERO.tan();
      Complex complex9 = complex5.ZERO.conjugate();
      String string0 = complex9.NaN.toString();
      double double0 = complex7.getReal();
      double double1 = complex5.getArgument();
      Complex complex10 = complex6.sqrt();
      Complex complex11 = complex6.conjugate();
      Complex complex12 = complex11.I.sin();
      Complex complex13 = complex10.INF.createComplex(3.141592653589793, 3.141592653589793);
      Complex complex14 = complex5.add(complex1);
      Complex complex15 = complex10.negate();
      Complex complex16 = complex15.cosh();
      Complex complex17 = complex16.I.conjugate();
      Complex complex18 = complex14.createComplex(0.6299605249474366, (-387.34458544822));
      Complex complex19 = complex13.INF.sin();
      Complex complex20 = complex18.pow(complex1);
      Complex complex21 = complex1.INF.asin();
      Complex complex22 = complex11.negate();
      Complex complex23 = complex22.acos();
      Complex complex24 = complex10.log();
      String string1 = complex24.NaN.toString();
      Complex complex25 = complex18.atan();
      Complex complex26 = complex13.exp();
      double double2 = complex6.getArgument();
      double double3 = complex18.abs();
      Complex complex27 = complex15.cosh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.5000000000042687, 0.5000000000042687);
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex6.add(complex1);
      boolean boolean0 = complex1.isInfinite();
      Complex complex8 = complex1.multiply(0.5000000000042687);
      int int0 = 1;
      try { 
        complex2.INF.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-349.9854473906409), 908.46442278);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      int int0 = complex2.hashCode();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex0.add(complex3);
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = complex0.conjugate();
      String string0 = complex8.INF.toString();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex9 = complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.createComplex((-1839.33047374646), (-1839.33047374646));
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex0.sin();
      Object object1 = complex2.readResolve();
      boolean boolean0 = complex1.isNaN();
      Complex complex3 = complex0.NaN.conjugate();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = complex2.INF.sqrt1z();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex7.pow(complex1);
      Complex complex9 = complex5.multiply(complex0);
      double double0 = complex2.getReal();
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex7.cos();
      Complex complex12 = complex7.cos();
      Complex complex13 = complex11.sinh();
      boolean boolean1 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex3 = complex2.ONE.sqrt();
      Object object0 = complex3.ONE.readResolve();
      Complex complex4 = complex2.I.createComplex(0.0, 0.0);
      double double0 = complex4.abs();
      List<Complex> list0 = complex0.ZERO.nthRoot(37);
      double double1 = complex0.abs();
      Complex complex5 = complex1.ZERO.pow(complex0);
      Complex complex6 = complex0.subtract(complex1);
      boolean boolean0 = complex6.equals(complex2);
      Complex complex7 = complex0.log();
      Complex complex8 = complex6.asin();
      Complex complex9 = complex2.createComplex(1.0, 0.0);
      ComplexField complexField0 = complex5.getField();
      Complex complex10 = complex7.exp();
      Complex complex11 = complex7.sinh();
      Complex complex12 = complex5.divide(complex10);
      ComplexField complexField1 = complex11.getField();
      Complex complex13 = complex0.createComplex(566.46269877, Double.POSITIVE_INFINITY);
      double double2 = complex13.getReal();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.acos();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex3 = complex0.NaN.multiply(0.0);
      Object object1 = complex1.NaN.readResolve();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.multiply(complex5);
      Complex complex7 = complex5.pow(complex0);
      Complex complex8 = complex7.divide(complex5);
      int int0 = complex2.hashCode();
      Complex complex9 = Complex.NaN;
      boolean boolean0 = complex3.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.I.multiply((-3332.94));
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex3.NaN.add(complex1);
      double double0 = complex0.abs();
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex2.createComplex((-1527.93197227), 1.1730463525082348E-7);
      Complex complex8 = complex7.pow(complex4);
      double double1 = complex2.getReal();
      Complex complex9 = Complex.NaN;
      List<Complex> list0 = complex9.INF.nthRoot(1);
      Complex complex10 = complex5.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.createComplex((-3911.5634713), (-3911.5634713));
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex0.multiply(complex2);
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.acos();
      Object object0 = complex1.I.readResolve();
      ComplexField complexField0 = complex1.ONE.getField();
      Object object1 = complex1.ZERO.readResolve();
      Complex complex3 = complex1.NaN.acos();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex3.tanh();
      String string0 = complex3.toString();
      Complex complex6 = complex0.log();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex7.multiply(3718.11);
      Complex complex9 = complex3.multiply(complex0);
      Complex complex10 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tan();
      String string0 = complex0.toString();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex0.conjugate();
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      List<Complex> list0 = complex0.NaN.nthRoot(17);
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.sinh();
      int int1 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.multiply((-2187.3723665186717));
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex1.NaN.pow(complex0);
      Complex complex6 = complex0.ONE.cos();
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex5.NaN.cos();
      Complex complex8 = complex5.NaN.tan();
      Complex complex9 = complex8.ONE.pow(complex6);
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex10.multiply(1503.086);
      double double0 = complex11.ONE.getArgument();
      int int0 = complex11.ONE.hashCode();
      Complex complex12 = complex11.I.cosh();
      Complex complex13 = complex5.sinh();
      Complex complex14 = complex2.tan();
      Complex complex15 = complex14.INF.acos();
      double double1 = complex15.abs();
      Complex complex16 = complex10.log();
      double double2 = complex16.ZERO.getArgument();
      double double3 = complex12.getArgument();
      double double4 = complex2.getArgument();
      Complex complex17 = complex14.subtract(complex13);
      Complex complex18 = complex17.INF.sqrt1z();
      Complex complex19 = complex9.multiply(74.0821684769577);
      double double5 = complex17.getImaginary();
      Complex complex20 = complex6.add(complex11);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.multiply(12.0);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.ZERO.log();
      Complex complex5 = complex1.divide(complex4);
      boolean boolean0 = complex3.isInfinite();
      String string0 = complex2.ONE.toString();
      Complex complex6 = complex1.createComplex(12.0, (-3199.71044269586));
      Complex complex7 = complex6.sin();
      String string1 = complex6.INF.toString();
      Complex complex8 = complex6.I.sqrt();
      Complex complex9 = complex2.cos();
      Complex complex10 = complex5.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 1730.1736965955208);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.ONE.sin();
      int int0 = complex0.hashCode();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex0.asin();
      int int1 = complex0.hashCode();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex5.add(complex6);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 0.0;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex2.ONE.multiply((-1.0));
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.ONE.sin();
      try { 
        complex2.ZERO.nthRoot((-1416));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,416
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.I.subtract(complex2);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex1.pow(complex2);
      double double0 = complex1.getArgument();
      Complex complex6 = complex5.ONE.multiply(complex3);
      Complex complex7 = complex6.ZERO.tan();
      Complex complex8 = complex5.INF.subtract(complex0);
      double double1 = complex5.getImaginary();
      Complex complex9 = complex5.multiply(Double.NaN);
      Complex complex10 = complex9.INF.divide(complex8);
      Complex complex11 = complex8.subtract(complex9);
      Complex complex12 = complex6.multiply(0.0);
      Complex complex13 = complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = new Object();
      Complex complex1 = complex0.NaN.conjugate();
      int int0 = complex1.ZERO.hashCode();
      List<Complex> list0 = complex1.I.nthRoot(101);
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex0.getArgument();
      int int1 = complex0.hashCode();
      int int2 = complex1.hashCode();
      int int3 = complex0.hashCode();
      double double1 = complex0.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(7.549789948768648E-8, 7.549789948768648E-8);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.acos();
      double double0 = complex1.getArgument();
      Complex complex5 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(1882.0, (-1104.80746969));
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.cosh();
      double double0 = complex3.abs();
      double double1 = complex0.getImaginary();
      double double2 = complex1.NaN.getArgument();
      Complex complex4 = complex0.acos();
      int int0 = complex2.INF.hashCode();
      double double3 = complex3.abs();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex4.cosh();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.add(complex7);
      Complex complex9 = complex6.INF.sqrt();
      Complex complex10 = complex6.NaN.exp();
      Complex complex11 = complex2.exp();
      Complex complex12 = complex0.acos();
      ComplexField complexField0 = complex4.getField();
      Complex complex13 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex14 = complex6.createComplex((-881.722254), 0.0);
      boolean boolean0 = complex4.isInfinite();
      Complex complex15 = complex4.cosh();
      Complex complex16 = complex15.createComplex(Double.POSITIVE_INFINITY, (-881.722254));
      ComplexField complexField1 = complex16.NaN.getField();
      Complex complex17 = complex0.add(complex6);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex1.NaN.atan();
      double double0 = complex0.abs();
      Object object0 = complex0.ZERO.readResolve();
      Object object1 = complex2.NaN.readResolve();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex4.tan();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex1.multiply(complex3);
      Object object2 = complex2.readResolve();
      double double1 = complex7.getImaginary();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex((-2917.092268769557), (-3184.62));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.asin();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex1.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.INF.tanh();
      String string0 = complex0.ONE.toString();
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      Object object0 = complex3.INF.readResolve();
      Complex complex5 = complex4.ZERO.createComplex(Double.NaN, 0.0);
      Complex complex6 = complex4.multiply(0.0);
      double double0 = complex6.getReal();
      double double1 = complex3.ONE.getArgument();
      Complex complex7 = complex3.createComplex(0.0, (-191.599855293174));
      double double2 = complex3.abs();
      Complex complex8 = complex3.ONE.createComplex(0.0, 0.0);
      Complex complex9 = complex8.ONE.divide(complex0);
      Complex complex10 = complex5.divide(complex4);
      boolean boolean0 = complex6.isNaN();
      Complex complex11 = complex4.subtract(complex0);
      Complex complex12 = complex11.ZERO.cos();
      Complex complex13 = complex7.exp();
      Complex complex14 = complex13.negate();
      Complex complex15 = complex13.asin();
      Complex complex16 = complex2.add(complex5);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      double double0 = complex0.abs();
      Complex complex2 = complex0.createComplex(1.0, 1.0);
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex0.createComplex(1.0, 2482.127041);
      double double1 = complex4.ZERO.abs();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.atan();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.INF.sqrt1z();
      double double1 = complex0.abs();
      double double2 = complex0.getImaginary();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.I.cosh();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(6891.7059, 0.0);
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = new Complex(0.0, 0.0);
      Complex complex5 = complex4.INF.multiply(0.0);
      Complex complex6 = complex5.NaN.createComplex(0.0, 0.0);
      Complex complex7 = complex5.NaN.cosh();
      Object object0 = complex7.I.readResolve();
      Complex complex8 = complex4.NaN.multiply(complex1);
      Complex complex9 = complex1.pow(complex4);
      Object object1 = complex9.ONE.readResolve();
      Complex complex10 = complex9.createComplex((-1160.290668767), 0.0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.INF.createComplex(0.0, 3904.226513085);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.ONE.tan();
      List<Complex> list0 = complex0.nthRoot(133);
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.I.subtract(complex2);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex1.pow(complex2);
      double double0 = complex1.getArgument();
      Complex complex6 = complex5.ONE.multiply(complex3);
      Complex complex7 = complex6.ZERO.tan();
      double double1 = complex5.getImaginary();
      Complex complex8 = complex5.multiply(Double.NaN);
      Complex complex9 = complex8.INF.divide(complex2);
      Complex complex10 = complex5.subtract(complex8);
      Complex complex11 = complex6.multiply(0.0);
      Complex complex12 = complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.NaN.exp();
      String string0 = complex2.toString();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ONE.add(complex2);
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = complex0.INF.sin();
      Complex complex7 = complex0.log();
      Complex complex8 = complex2.multiply(complex1);
      Complex complex9 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(Double.NaN);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.ZERO.tan();
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex1.I.pow(complex3);
      try { 
        complex0.nthRoot((-2434));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,434
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.NaN.getArgument();
      double double1 = complex0.getReal();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.equals(object0);
      Complex complex3 = complex1.ZERO.multiply(complex0);
      Complex complex4 = complex3.I.cos();
      String string0 = complex2.ZERO.toString();
      double double2 = complex1.getReal();
      int int0 = complex2.hashCode();
      Complex complex5 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex6 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tan();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex3.ONE.sinh();
      Complex complex6 = complex5.I.conjugate();
      Object object1 = complex5.I.readResolve();
      Complex complex7 = complex4.atan();
      double double0 = complex3.getArgument();
      Complex complex8 = complex3.negate();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.ONE.pow(complex1);
      Complex complex4 = complex3.ONE.divide(complex1);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(757.00349);
      Complex complex2 = complex0.tan();
      double double0 = complex0.getReal();
      Complex complex3 = complex2.exp();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.ONE.negate();
      double double0 = complex0.abs();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.tanh();
      boolean boolean0 = complex0.isInfinite();
      Object object0 = complex2.readResolve();
      Complex complex4 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.ZERO.pow(complex1);
      Complex complex5 = complex2.ONE.negate();
      Complex complex6 = complex5.INF.asin();
      double double0 = complex0.I.getArgument();
      int int0 = complex0.hashCode();
      Complex complex7 = complex1.ONE.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex1.cos();
      Complex complex11 = complex10.ONE.tanh();
      Complex complex12 = complex10.negate();
      Complex complex13 = complex12.asin();
      Complex complex14 = complex6.ONE.negate();
      Complex complex15 = complex13.ONE.conjugate();
      Complex complex16 = complex13.ONE.log();
      Complex complex17 = complex16.ONE.sqrt1z();
      Complex complex18 = complex10.conjugate();
      Complex complex19 = complex18.createComplex((-893.94159486775), (-187.74));
      Complex complex20 = complex6.sqrt();
      Complex complex21 = complex20.sin();
      Complex complex22 = complex15.acos();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(1174.8, 1174.8);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.ZERO.log();
      double double0 = complex2.getArgument();
      boolean boolean0 = complex0.isInfinite();
      double double1 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex1.INF.exp();
      Complex complex5 = complex0.log();
      Complex complex6 = complex0.I.negate();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.NaN.asin();
      Complex complex9 = complex5.ZERO.sqrt1z();
      Complex complex10 = complex9.NaN.acos();
      Complex complex11 = complex5.cosh();
      Complex complex12 = complex5.cosh();
      double double1 = complex0.ZERO.abs();
      Complex complex13 = complex11.add(complex12);
      double double2 = complex4.getArgument();
      double double3 = complex13.getArgument();
      Complex complex14 = complex3.pow(complex11);
      Complex complex15 = complex3.conjugate();
      Complex complex16 = complex13.tanh();
      Complex complex17 = complex16.NaN.negate();
      Complex complex18 = complex0.divide(complex11);
      Complex complex19 = complex18.NaN.sin();
      Complex complex20 = complex18.subtract(complex12);
      Object object0 = complex12.readResolve();
      Complex complex21 = complex12.divide(complex14);
      String string0 = complex13.toString();
      Complex complex22 = complex3.tan();
      List<Complex> list0 = complex7.nthRoot(246);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.subtract(complex1);
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex2.NaN.add(complex1);
      Complex complex4 = complex3.INF.add(complex2);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex5 = complex0.I.multiply((-544.4092702));
      Complex complex6 = complex1.INF.tan();
      Complex complex7 = complex5.INF.multiply(3899.4);
      Complex complex8 = complex5.NaN.subtract(complex0);
      double double1 = complex8.NaN.abs();
      double double2 = complex0.ONE.getArgument();
      Complex complex9 = complex4.ONE.sin();
      double double3 = complex0.I.getArgument();
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex10.ONE.sqrt1z();
      ComplexField complexField1 = complex10.getField();
      Complex complex12 = complex0.cos();
      double double4 = complex0.getImaginary();
      Complex complex13 = complex0.createComplex(1021.1393045, 1021.1393045);
      double double5 = complex13.ZERO.abs();
      ComplexField complexField2 = complex13.getField();
      Complex complex14 = complex1.cos();
      double double6 = complex2.getImaginary();
      Complex complex15 = complex1.atan();
      int int0 = complex0.hashCode();
      Complex complex16 = complex14.asin();
      Complex complex17 = complex16.pow(complex4);
      boolean boolean0 = complex12.isInfinite();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.tan();
      boolean boolean0 = complex3.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(936.55021, 936.55021);
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex3.I.tanh();
      double double0 = complex3.I.abs();
      double double1 = complex3.getReal();
      int int1 = complex1.hashCode();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.ONE.atan();
      Complex complex7 = complex1.NaN.sinh();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex4.add(complex8);
      Complex complex10 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(2.0);
      Complex complex2 = complex1.INF.createComplex(2.0, 2.0);
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex2.NaN.log();
      Complex complex7 = complex6.I.tanh();
      Complex complex8 = complex2.INF.multiply(2.0);
      Complex complex9 = complex2.I.tanh();
      Complex complex10 = complex6.INF.conjugate();
      Complex complex11 = complex0.cos();
      Complex complex12 = complex11.INF.tan();
      Complex complex13 = complex2.sqrt1z();
      String string0 = complex2.toString();
      Complex complex14 = complex2.tanh();
      Complex complex15 = complex1.asin();
      Complex complex16 = complex15.INF.createComplex(1925.76, 1925.76);
      Complex complex17 = complex4.negate();
      Complex complex18 = complex1.ONE.cos();
      double double0 = complex9.getImaginary();
      Complex complex19 = complex3.asin();
      Complex complex20 = complex19.ONE.asin();
      boolean boolean0 = complex16.isNaN();
      List<Complex> list0 = complex5.nthRoot(1);
      Complex complex21 = complex14.multiply(complex19);
      Complex complex22 = new Complex(1.557407724654902, 0.0);
      boolean boolean1 = complex7.equals(complex22);
      Complex complex23 = complex3.log();
      Complex complex24 = complex6.sqrt1z();
      Complex complex25 = complex24.divide(complex16);
  }
}
