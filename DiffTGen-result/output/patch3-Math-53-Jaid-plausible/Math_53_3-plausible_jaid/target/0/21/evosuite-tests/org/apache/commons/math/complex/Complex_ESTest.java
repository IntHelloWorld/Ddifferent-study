/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 00:57:08 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(711.44955321926, 711.44955321926);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.I.multiply(2.404307984052299E-9);
      Complex complex3 = complex0.sinh();
      String string0 = complex3.toString();
      Complex complex4 = complex3.divide(complex1);
      boolean boolean0 = complex4.isNaN();
      boolean boolean1 = complex4.isInfinite();
      Complex complex5 = complex3.multiply(complex4);
      Complex complex6 = complex1.log();
      Complex complex7 = complex4.cos();
      ComplexField complexField0 = complex7.NaN.getField();
      Complex complex8 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex1.ONE.sinh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex1.ZERO.sin();
      Complex complex5 = complex3.INF.multiply((-1.0));
      Complex complex6 = complex3.subtract(complex1);
      Object object0 = complex3.readResolve();
      double double0 = complex1.abs();
      double double1 = complex0.abs();
      double double2 = complex5.ZERO.abs();
      double double3 = complex0.getArgument();
      boolean boolean1 = complex0.equals(complex3);
      int int1 = complex0.hashCode();
      Complex complex7 = complex3.NaN.exp();
      Complex complex8 = complex7.I.conjugate();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex0.NaN.asin();
      double double4 = complex6.abs();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.ZERO.cos();
      Complex complex13 = complex12.NaN.divide(complex3);
      Complex complex14 = complex5.subtract(complex11);
      Complex complex15 = complex1.conjugate();
      String string0 = complex11.toString();
      Complex complex16 = complex15.log();
      Complex complex17 = complex9.conjugate();
      Complex complex18 = complex12.multiply(complex11);
      double double5 = complex3.getArgument();
      double double6 = complex12.getImaginary();
      Complex complex19 = complex16.log();
      double double7 = complex1.getReal();
      ComplexField complexField0 = complex18.getField();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(148.473974);
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex3.INF.conjugate();
      double double0 = complex4.INF.abs();
      Complex complex6 = complex4.ZERO.exp();
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = complex6.ZERO.sqrt();
      int int0 = complex0.INF.hashCode();
      boolean boolean0 = complex0.equals(complex3);
      double double1 = complex3.NaN.getArgument();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex10.sqrt1z();
      String string0 = complex3.toString();
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = complex12.INF.tanh();
      Complex complex14 = complex13.ZERO.conjugate();
      boolean boolean1 = complex9.isNaN();
      Complex complex15 = complex12.conjugate();
      Complex complex16 = complex5.negate();
      double double2 = complex9.getArgument();
      Complex complex17 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0, Double.NaN);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.I.sin();
      Complex complex4 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(2988.293, 2988.293);
      Complex complex1 = complex0.ONE.sqrt();
      List<Complex> list0 = complex1.ONE.nthRoot(142);
      ComplexField complexField0 = complex0.getField();
      String string0 = complex0.toString();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.cosh();
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex4.INF.cosh();
      Object object1 = complex3.ZERO.readResolve();
      Complex complex6 = complex3.I.multiply(complex2);
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex6.NaN.createComplex(2988.293, 2988.293);
      double double1 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex0.NaN.pow(complex3);
      Complex complex5 = complex0.ONE.subtract(complex1);
      Complex complex6 = complex3.I.createComplex(1480.4, (-286.7));
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex5.ZERO.subtract(complex8);
      Complex complex10 = complex5.exp();
      int int0 = 219;
      List<Complex> list0 = complex5.INF.nthRoot(219);
      Complex complex11 = complex8.add(complex0);
      Complex complex12 = complex11.pow(complex8);
      double double0 = complex1.getReal();
      Complex complex13 = complex5.tanh();
      Complex complex14 = complex4.negate();
      Object object0 = complex1.I.readResolve();
      Complex complex15 = complex14.ZERO.asin();
      double double1 = complex9.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex16 = complex2.sqrt();
      try { 
        complex13.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.conjugate();
      int int0 = complex2.INF.hashCode();
      Complex complex3 = complex1.ZERO.multiply(complex0);
      Complex complex4 = complex0.I.tan();
      double double0 = complex4.ZERO.getArgument();
      Complex complex5 = complex1.INF.atan();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex6 = complex1.ONE.conjugate();
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex1.sqrt1z();
      double double1 = complex10.INF.abs();
      Complex complex11 = complex10.tan();
      Complex complex12 = complex0.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex13 = complex4.I.tanh();
      Complex complex14 = complex10.I.add(complex0);
      Complex complex15 = complex3.subtract(complex10);
      Complex complex16 = complex1.subtract(complex0);
      Complex complex17 = complex3.multiply(0.0);
      Complex complex18 = complex11.conjugate();
      Complex complex19 = complex10.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = (-926.5240424582586);
      Complex complex1 = new Complex((-926.5240424582586), (-926.5240424582586));
      Complex complex2 = complex0.I.multiply(complex1);
      String string0 = complex0.ONE.toString();
      // Undeclared exception!
      complex2.nthRoot(5833);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex1.INF.tanh();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex7.NaN.conjugate();
      Complex complex9 = complex7.ONE.sinh();
      Complex complex10 = complex0.NaN.sqrt1z();
      Complex complex11 = complex10.I.createComplex(0.0, 0.0);
      double double0 = complex10.INF.abs();
      int int0 = complex9.ZERO.hashCode();
      Complex complex12 = complex1.exp();
      boolean boolean0 = complex4.isInfinite();
      double double1 = complex1.getArgument();
      Complex complex13 = complex4.sqrt();
      Complex complex14 = complex5.cos();
      Complex complex15 = complex9.createComplex(-0.0, 0.0);
      Complex complex16 = complex10.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex17 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex2.NaN.tanh();
      Complex complex6 = complex3.sqrt1z();
      double double0 = complex2.getArgument();
      double double1 = complex0.getReal();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex7.multiply(0.0);
      ComplexField complexField0 = complex4.getField();
      Complex complex9 = complex1.sqrt();
      double double2 = complex9.getArgument();
      Complex complex10 = complex3.createComplex(-0.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = new Complex((-1378.990187346), 1551.33348922);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = complex5.INF.asin();
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex4.INF.tan();
      Complex complex10 = complex0.INF.pow(complex4);
      Complex complex11 = complex0.asin();
      Complex complex12 = complex5.INF.asin();
      int int0 = complex12.INF.hashCode();
      Complex complex13 = complex0.acos();
      Complex complex14 = complex0.I.pow(complex10);
      Complex complex15 = complex11.createComplex(1551.33348922, 1.0);
      Complex complex16 = complex15.add(complex0);
      Complex complex17 = complex11.sqrt1z();
      Complex complex18 = complex17.pow(complex10);
      Complex complex19 = complex2.asin();
      boolean boolean0 = complex13.isInfinite();
      double double0 = complex5.getImaginary();
      Complex complex20 = complex1.sqrt();
      Complex complex21 = complex0.asin();
      Complex complex22 = complex10.sinh();
      Complex complex23 = complex2.divide(complex10);
      Complex complex24 = complex22.INF.divide(complex17);
      Complex complex25 = complex14.createComplex((-1378.990187346), 0.0);
      Complex complex26 = complex18.asin();
      Complex complex27 = complex22.sinh();
      Complex complex28 = complex5.negate();
      Complex complex29 = complex27.acos();
      Complex complex30 = complex6.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.I.pow(complex3);
      double double0 = complex1.getImaginary();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cos();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-917.30495), 1880.020696536239);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.ONE.cos();
      Complex complex3 = null;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex2.I.atan();
      Complex complex5 = complex1.I.asin();
      List<Complex> list0 = complex5.NaN.nthRoot(2618);
      String string0 = complex0.toString();
      double double0 = complex3.getReal();
      Complex complex6 = complex1.INF.add(complex5);
      Complex complex7 = complex0.I.log();
      Complex complex8 = complex5.atan();
      Complex complex9 = complex1.exp();
      String string1 = complex9.I.toString();
      Complex complex10 = complex6.negate();
      Complex complex11 = complex4.log();
      Complex complex12 = complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-598.41), (-143.90035));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex2.ONE.multiply(complex0);
      Complex complex5 = complex4.NaN.subtract(complex2);
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex6 = complex0.multiply((-598.41));
      int int0 = complex6.INF.hashCode();
      Object object0 = complex1.readResolve();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex8.NaN.multiply((-2621.7265632));
      Complex complex10 = complex2.multiply((-2422.9515));
      Complex complex11 = complex0.subtract(complex8);
      Complex complex12 = complex11.INF.tanh();
      String string0 = complex11.I.toString();
      ComplexField complexField1 = complex10.getField();
      Complex complex13 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      ComplexField complexField0 = complex2.I.getField();
      String string0 = complex2.INF.toString();
      Complex complex3 = complex0.ZERO.negate();
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex3.NaN.createComplex(468.90905283472324, 468.90905283472324);
      Complex complex6 = complex5.INF.add(complex3);
      double double0 = complex0.NaN.getArgument();
      Complex complex7 = complex1.I.add(complex3);
      Complex complex8 = complex0.ONE.sqrt1z();
      Complex complex9 = complex8.I.sqrt();
      Complex complex10 = complex0.ZERO.multiply(complex7);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex11 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.asin();
      try { 
        complex0.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      Complex complex1 = new Complex(Double.NaN, 0.0);
      Complex complex2 = complex0.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.ONE.createComplex(Double.POSITIVE_INFINITY, (-80.397814));
      Complex complex5 = complex3.NaN.acos();
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex6 = complex3.I.cos();
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex8.I.negate();
      Complex complex10 = complex7.negate();
      Complex complex11 = complex3.createComplex(0.0, 6.283185307179586);
      Complex complex12 = complex10.negate();
      Complex complex13 = complex8.sqrt1z();
      Complex complex14 = complex3.tanh();
      Complex complex15 = complex14.INF.sqrt1z();
      double double0 = complex8.getImaginary();
      double double1 = complex2.abs();
      Complex complex16 = complex8.asin();
      Complex complex17 = Complex.I;
      Complex complex18 = complex1.pow(complex17);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.tanh();
      double double0 = complex2.I.getArgument();
      double double1 = complex1.getReal();
      String string0 = complex0.toString();
      Complex complex3 = complex0.createComplex(Double.POSITIVE_INFINITY, 1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(854.403, (-134.42183));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.tan();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.INF.conjugate();
      Complex complex5 = complex1.INF.log();
      Complex complex6 = complex0.NaN.add(complex3);
      int int0 = complex6.ZERO.hashCode();
      ComplexField complexField1 = complex2.getField();
      Complex complex7 = complex1.log();
      String string0 = complex0.toString();
      boolean boolean0 = complex2.isInfinite();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex8.I.multiply(complex3);
      Complex complex10 = complex8.tanh();
      Complex complex11 = complex9.I.sinh();
      Complex complex12 = complex6.INF.pow(complex5);
      Complex complex13 = complex11.sqrt();
      Complex complex14 = complex0.INF.negate();
      Complex complex15 = complex14.sqrt1z();
      Complex complex16 = complex14.I.negate();
      Complex complex17 = complex16.NaN.tan();
      double double0 = complex2.getReal();
      Complex complex18 = complex3.sinh();
      double double1 = complex18.I.getArgument();
      Object object0 = complex6.readResolve();
      double double2 = complex3.getArgument();
      double double3 = complex18.abs();
      double double4 = complex6.abs();
      int int1 = complex0.hashCode();
      boolean boolean1 = complex3.isInfinite();
      Complex complex19 = complex12.divide(complex4);
      boolean boolean2 = complex7.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.NaN.sinh();
      Object object0 = complex2.readResolve();
      String string0 = complex2.toString();
      double double0 = complex0.getArgument();
      double double1 = complex2.abs();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-2898.9108), (-2898.9108));
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.INF.multiply(0.0);
      double double0 = complex0.getReal();
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(2123.67805, 2123.67805);
      Complex complex1 = complex0.ONE.negate();
      double double0 = complex1.I.getArgument();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.tanh();
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-4.9E-324), (-4.9E-324));
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(5.0, 5.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      List<Complex> list0 = complex2.I.nthRoot(1388);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex0.atan();
      double double0 = complex1.abs();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.NaN.createComplex((-914.7731699), (-1492.8964));
      Complex complex3 = complex0.atan();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.subtract(complex2);
      double double0 = complex4.ZERO.getArgument();
      Complex complex5 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = complex1.ONE.log();
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex1.I.sqrt1z();
      Complex complex7 = complex0.subtract(complex1);
      Complex complex8 = complex0.ONE.atan();
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.multiply((-1070.21465202093));
      Complex complex2 = complex0.createComplex((-1070.21465202093), (-1070.21465202093));
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.I.cos();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex2.NaN.multiply(1.0);
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex5.multiply(complex0);
      Complex complex11 = complex10.I.sinh();
      double double0 = complex0.getArgument();
      Complex complex12 = complex7.createComplex((-643.0538204913), 0.0);
      double double1 = complex12.getReal();
      double double2 = complex3.abs();
      Object object0 = complex0.readResolve();
      ComplexField complexField0 = complex10.getField();
      Complex complex13 = complex11.add(complex12);
      Complex complex14 = complex13.INF.atan();
      Complex complex15 = complex14.INF.multiply(complex3);
      Complex complex16 = complex11.multiply(complex7);
      Complex complex17 = complex2.tan();
      Complex complex18 = complex13.tan();
      double double3 = complex1.getReal();
      boolean boolean0 = complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.NaN.tanh();
      double double0 = complex2.abs();
      Complex complex4 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.asin();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = new Complex(0.0952233225107193, 0.0952233225107193);
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex0.NaN.multiply(Double.POSITIVE_INFINITY);
      int int0 = complex4.ZERO.hashCode();
      Complex complex6 = complex4.ONE.multiply(complex2);
      Complex complex7 = complex6.I.createComplex(2174.55256, 0.11111095942313305);
      double double0 = complex4.getReal();
      Complex complex8 = complex4.add(complex1);
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-1522.0165782), (-1991.544));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = new Complex(2.0, 2.0);
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex3.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex1.createComplex((-748.153), 0.0);
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex1.tan();
      double double0 = complex5.getReal();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.I.log();
      boolean boolean0 = complex2.isNaN();
      Complex complex5 = complex2.asin();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex2.I.multiply((-640.7341065801962));
      try { 
        complex0.NaN.nthRoot((-833));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -833
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.I.asin();
      int int0 = complex1.ZERO.hashCode();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex0.subtract(complex4);
      ComplexField complexField0 = complex4.getField();
      double double0 = complex6.getImaginary();
      Complex complex7 = complex5.ZERO.cos();
      Object object0 = complex0.readResolve();
      String string0 = complex5.toString();
      Complex complex8 = complex5.multiply(Double.NaN);
      Complex complex9 = complex5.asin();
      Object object1 = complex9.readResolve();
      boolean boolean0 = complex6.equals(object1);
      double double1 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex1.tanh();
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      Complex complex1 = Complex.NaN;
      double double1 = complex1.INF.abs();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.sin();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex0.INF.createComplex((-1364.58639221441), 0.0);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex4.multiply(complex1);
      Complex complex8 = complex7.ZERO.acos();
      Complex complex9 = complex0.ONE.acos();
      Complex complex10 = complex0.subtract(complex1);
      double double0 = complex10.getArgument();
      double double1 = complex0.getArgument();
      Complex complex11 = complex4.sinh();
      Complex complex12 = complex11.ZERO.subtract(complex2);
      double double2 = complex0.getReal();
      Complex complex13 = complex0.multiply(2.0);
      Complex complex14 = complex11.tanh();
      Complex complex15 = complex4.createComplex((-261.8021255205), 2.0);
      double double3 = complex11.getArgument();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.INF.createComplex(0.0, 0.25);
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex2.multiply(complex1);
      Complex complex7 = complex6.log();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = new Complex((-1034.4496), 0.0);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex4.subtract(complex3);
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex6.ONE.pow(complex4);
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex8.ZERO.divide(complex4);
      Complex complex10 = complex4.sinh();
      double double0 = complex10.I.getArgument();
      Complex complex11 = complex10.pow(complex3);
      Complex complex12 = complex0.negate();
      int int0 = complex5.ONE.hashCode();
      boolean boolean0 = complex6.equals((Object) null);
      Complex complex13 = complex4.log();
      Object object0 = complex13.INF.readResolve();
      boolean boolean1 = complex5.isInfinite();
      Complex complex14 = complex10.atan();
      String string0 = complex4.toString();
      boolean boolean2 = complex5.isNaN();
      Complex complex15 = complex4.log();
      Complex complex16 = complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex0.I.multiply((-212.051));
      try { 
        complex2.INF.nthRoot((-659));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -659
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.ZERO.tanh();
      Complex complex5 = complex1.INF.pow(complex0);
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.I.cosh();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex8.NaN.pow(complex9);
      int int0 = complex1.ZERO.hashCode();
      Complex complex11 = complex8.NaN.multiply(1321.35417);
      Complex complex12 = complex7.divide(complex3);
      Complex complex13 = complex12.ZERO.divide(complex4);
      Complex complex14 = complex4.exp();
      Complex complex15 = complex0.add(complex13);
      Complex complex16 = complex12.sinh();
      ComplexField complexField0 = complex13.getField();
      Complex complex17 = complex14.multiply(1321.35417);
      Complex complex18 = complex14.cosh();
      Complex complex19 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.I.sin();
      double double1 = complex1.ONE.getArgument();
      List<Complex> list0 = complex0.nthRoot(175);
      double double2 = complex2.getImaginary();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex3.cos();
      List<Complex> list1 = complex5.INF.nthRoot(175);
      Complex complex6 = complex5.pow(complex3);
      Complex complex7 = complex3.sin();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex2.multiply((-835.132963));
      Complex complex10 = complex0.log();
      Complex complex11 = complex4.divide(complex8);
      double double3 = complex10.abs();
      Complex complex12 = complex1.acos();
      double double4 = complex1.abs();
      List<Complex> list2 = complex8.nthRoot(175);
      Complex complex13 = complex9.negate();
      boolean boolean0 = complex4.isNaN();
      List<Complex> list3 = complex4.nthRoot(272);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.NaN.add(complex1);
      Complex complex4 = complex1.ONE.tanh();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex0.createComplex((-1311.10215171095), 1464.638657318209);
      Complex complex7 = complex0.I.exp();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.INF.divide(complex0);
      Complex complex10 = complex9.ONE.tan();
      Complex complex11 = complex0.NaN.log();
      Object object0 = complex8.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex12 = complex0.log();
      Complex complex13 = complex12.ZERO.subtract(complex0);
      Complex complex14 = complex0.acos();
      Complex complex15 = complex8.sqrt1z();
      Complex complex16 = complex15.divide(complex11);
      boolean boolean1 = complex6.isInfinite();
      Complex complex17 = complex16.subtract(complex7);
      Complex complex18 = complex9.negate();
      double double0 = complex17.getImaginary();
      Complex complex19 = complex8.createComplex(1464.638657318209, (-0.3058015757857271));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex0.multiply(4278.622980863);
      int int0 = complex0.hashCode();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex3.NaN.negate();
      Complex complex7 = complex1.I.add(complex2);
      Complex complex8 = complex7.ONE.exp();
      Complex complex9 = complex8.acos();
      double double1 = complex7.I.abs();
      int int1 = complex7.INF.hashCode();
      Object object0 = complex3.readResolve();
      ComplexField complexField0 = complex1.getField();
      boolean boolean0 = complex5.isInfinite();
      Complex complex10 = complex5.I.asin();
      String string0 = complex1.ONE.toString();
      try { 
        complex5.nthRoot((-395));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -395
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.log();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.I.asin();
      String string1 = complex6.ONE.toString();
      double double0 = complex6.ZERO.abs();
      Complex complex8 = complex7.INF.divide(complex0);
      Complex complex9 = complex2.createComplex(126.70840077, (-1.0));
      Complex complex10 = complex9.pow(complex5);
      Complex complex11 = complex8.ZERO.exp();
      Complex complex12 = complex11.ONE.sqrt();
      String string2 = complex10.toString();
      Complex complex13 = complex7.sin();
      Complex complex14 = Complex.I;
      Complex complex15 = complex2.add(complex14);
      Complex complex16 = Complex.I;
      boolean boolean0 = complex6.equals(complex16);
      Complex complex17 = complex15.NaN.divide(complex9);
      Complex complex18 = complex9.tan();
      Complex complex19 = complex18.tanh();
      double double1 = complex14.getArgument();
      double double2 = complex15.getReal();
      boolean boolean1 = complex15.isNaN();
      Complex complex20 = complex17.negate();
      Complex complex21 = complex9.negate();
      Complex complex22 = complex8.negate();
      double double3 = complex22.getReal();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tan();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.INF.add(complex1);
      double double0 = complex0.getImaginary();
      int int0 = complex4.hashCode();
      Complex complex5 = complex3.ONE.subtract(complex4);
      Complex complex6 = complex0.INF.createComplex(1.0, (-5591.069465103));
      Complex complex7 = complex1.negate();
      Complex complex8 = complex7.ONE.cosh();
      Complex complex9 = complex8.NaN.cosh();
      Complex complex10 = complex7.ZERO.cosh();
      double double1 = complex0.getReal();
      Complex complex11 = complex3.add(complex0);
      Complex complex12 = complex0.multiply(complex4);
      Complex complex13 = complex1.pow(complex9);
      Complex complex14 = complex12.I.conjugate();
      List<Complex> list0 = complex7.nthRoot(459);
      Complex complex15 = complex9.ONE.exp();
      Complex complex16 = complex13.I.sqrt1z();
      Complex complex17 = complex12.divide(complex0);
      double double2 = complex13.getReal();
      boolean boolean1 = complex1.isInfinite();
      double double3 = complex3.getArgument();
      Complex complex18 = complex6.divide(complex0);
      Complex complex19 = complex18.ZERO.cos();
      Complex complex20 = complex8.subtract(complex17);
      Complex complex21 = complex4.cos();
      Complex complex22 = complex9.atan();
      Complex complex23 = complex8.divide(complex4);
      Object object1 = complex22.readResolve();
      boolean boolean2 = complex3.isInfinite();
      Complex complex24 = complex14.exp();
      try { 
        complex8.nthRoot((-1088));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,088
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(1.9868161777724352E-8, 1.9868161777724352E-8);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.ZERO.createComplex(0.0, 1.9868161777724352E-8);
      Complex complex3 = complex0.conjugate();
      int int0 = complex2.ONE.hashCode();
      Complex complex4 = complex3.I.asin();
      String string0 = complex3.ONE.toString();
      Complex complex5 = complex4.NaN.negate();
      double double0 = complex5.INF.getArgument();
      Complex complex6 = complex3.createComplex(1.9868161777724352E-8, 2220.11385881);
      Complex complex7 = complex3.ZERO.sin();
      Complex complex8 = complex7.ONE.tanh();
      boolean boolean0 = complex1.equals(complex3);
      Complex complex9 = complex3.sin();
      Complex complex10 = complex9.tan();
      Complex complex11 = complex2.divide(complex0);
      Complex complex12 = complex8.cosh();
      Complex complex13 = complex12.I.acos();
      Complex complex14 = complex0.conjugate();
      Complex complex15 = complex6.log();
      Complex complex16 = complex0.subtract(complex8);
      Object object0 = complex12.NaN.readResolve();
      Complex complex17 = complex9.ZERO.tanh();
      List<Complex> list0 = complex6.nthRoot(1426);
      Complex complex18 = complex9.cosh();
      Complex complex19 = complex18.ZERO.acos();
      Complex complex20 = complex19.ONE.tanh();
      int int1 = complex18.ONE.hashCode();
      boolean boolean1 = complex15.equals(complex12);
      Complex complex21 = complex8.exp();
      double double1 = complex17.abs();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex3.ZERO.add(complex2);
      Complex complex5 = complex1.ZERO.atan();
      Complex complex6 = complex1.INF.negate();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex6.conjugate();
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.tan();
      List<Complex> list0 = complex0.NaN.nthRoot(750);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex2.sinh();
      String string0 = complex3.INF.toString();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex6.ZERO.asin();
      double double0 = complex5.abs();
      Complex complex8 = complex3.createComplex(750, Double.NaN);
      Complex complex9 = complex3.INF.atan();
      Complex complex10 = complex9.NaN.conjugate();
      Complex complex11 = complex9.add(complex8);
      ComplexField complexField0 = complex3.getField();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex8.ONE.acos();
      Complex complex14 = complex8.divide(complex12);
      Complex complex15 = complex14.negate();
      int int0 = complex6.hashCode();
      int int1 = complex6.hashCode();
      Complex complex16 = complex9.exp();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex2.ZERO.tan();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex0.acos();
      Object object0 = complex5.I.readResolve();
      Complex complex7 = complex6.NaN.acos();
      Complex complex8 = complex5.pow(complex1);
      List<Complex> list0 = complex7.nthRoot(37);
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex1.asin();
      Complex complex11 = complex10.ONE.cos();
      Complex complex12 = complex11.INF.add(complex1);
      Complex complex13 = complex8.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.I.toString();
      ComplexField complexField0 = complex0.NaN.getField();
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.asin();
      double double1 = complex1.NaN.getArgument();
      Complex complex2 = complex1.sinh();
      double double2 = complex2.ONE.abs();
      boolean boolean0 = complex1.isNaN();
      String string1 = complex0.toString();
      double double3 = complex1.I.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.atan();
      double double4 = complex2.abs();
      Complex complex5 = ((Complex) object0).ZERO.divide(complex2);
      Complex complex6 = complex4.ONE.cosh();
      Complex complex7 = complex5.sin();
      String string2 = complex2.toString();
      Complex complex8 = complex4.pow(complex3);
      Complex complex9 = complex8.ONE.pow(complex1);
      boolean boolean1 = complex8.isInfinite();
      Complex complex10 = complex1.acos();
      double double5 = complex4.NaN.getArgument();
      Complex complex11 = complex8.log();
      Complex complex12 = complex0.cosh();
      boolean boolean2 = complex4.isInfinite();
      Object object1 = complex11.readResolve();
      Complex complex13 = complex6.createComplex(0.0, 1742.5941180121895);
      Complex complex14 = complex5.negate();
      Complex complex15 = Complex.I;
      boolean boolean3 = complex0.equals(complex15);
      boolean boolean4 = complex10.isInfinite();
      Object object2 = complex15.readResolve();
      Complex complex16 = complex11.add(complex6);
      Complex complex17 = complex16.sqrt();
  }
}
