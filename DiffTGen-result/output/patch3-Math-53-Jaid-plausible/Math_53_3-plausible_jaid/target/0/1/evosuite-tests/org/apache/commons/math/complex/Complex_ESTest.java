/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 00:49:53 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-1563.3680375988495));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(4538.2, 2935.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.createComplex(4538.2, (-2378.430518));
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex0.NaN.sqrt();
      Complex complex6 = complex5.INF.divide(complex4);
      double double0 = complex4.getArgument();
      Complex complex7 = complex4.ZERO.sin();
      Complex complex8 = complex0.ZERO.negate();
      Complex complex9 = complex8.ZERO.divide(complex2);
      Complex complex10 = complex7.pow(complex3);
      Complex complex11 = complex10.INF.divide(complex1);
      Complex complex12 = complex11.NaN.conjugate();
      double double1 = complex10.INF.abs();
      int int0 = complex0.hashCode();
      Complex complex13 = complex3.sqrt1z();
      Complex complex14 = complex13.INF.atan();
      Complex complex15 = complex7.sqrt1z();
      double double2 = complex15.INF.abs();
      Complex complex16 = complex7.cos();
      Complex complex17 = complex16.ONE.asin();
      Complex complex18 = complex1.exp();
      Complex complex19 = complex1.sqrt1z();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.INF.tanh();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex5.I.tan();
      Complex complex7 = complex3.NaN.pow(complex4);
      Complex complex8 = complex7.I.tan();
      double double1 = complex1.getArgument();
      Complex complex9 = complex2.I.multiply(complex3);
      Complex complex10 = complex5.log();
      Complex complex11 = complex10.INF.cos();
      double double2 = complex11.ONE.getArgument();
      Complex complex12 = complex1.pow(complex2);
      Complex complex13 = complex12.I.cosh();
      ComplexField complexField1 = complex9.getField();
      Complex complex14 = complex2.divide(complex5);
      Complex complex15 = complex11.ZERO.acos();
      double double3 = complex11.INF.abs();
      try { 
        complex9.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.ONE.negate();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex0.NaN.sinh();
      Complex complex6 = complex4.createComplex(1204.984071645, 1204.984071645);
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex6.I.atan();
      String string0 = complex8.INF.toString();
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = complex3.asin();
      Complex complex11 = complex10.negate();
      Complex complex12 = complex11.pow(complex0);
      Complex complex13 = complex0.multiply(complex3);
      Complex complex14 = complex6.atan();
      Complex complex15 = complex14.asin();
      ComplexField complexField0 = complex4.getField();
      List<Complex> list0 = complex6.nthRoot(1125);
      Complex complex16 = complex15.cosh();
      Complex complex17 = complex1.cosh();
      Complex complex18 = complex7.pow(complex6);
      Complex complex19 = complex13.pow(complex4);
      Complex complex20 = complex9.tan();
      Complex complex21 = complex14.sqrt();
      Complex complex22 = complex2.tan();
      Complex complex23 = complex4.atan();
      Complex complex24 = complex21.tanh();
      Complex complex25 = complex20.tan();
      Complex complex26 = complex12.tanh();
      Complex complex27 = complex1.cosh();
      Complex complex28 = complex27.NaN.atan();
      Complex complex29 = complex14.sqrt();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.NaN.pow(complex0);
      double double0 = complex0.ZERO.getArgument();
      Complex complex3 = complex2.createComplex(6.283185307179586, 789.591622815526);
      Complex complex4 = complex2.ONE.cos();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.I.createComplex(0.0, 6.283185307179586);
      Complex complex7 = complex4.ZERO.pow(complex5);
      Complex complex8 = complex7.INF.pow(complex4);
      Complex complex9 = complex8.ZERO.asin();
      Complex complex10 = complex0.NaN.cos();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex11 = complex0.negate();
      Complex complex12 = complex11.pow(complex0);
      Complex complex13 = complex1.subtract(complex11);
      Complex complex14 = complex13.INF.subtract(complex2);
      int int0 = complex13.hashCode();
      Complex complex15 = complex2.multiply(789.591622815526);
      Complex complex16 = complex13.cos();
      Complex complex17 = Complex.ONE;
      Complex complex18 = complex16.subtract(complex17);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(197.66345, 929.34);
      Complex complex1 = new Complex(929.34, 929.34);
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.INF.createComplex(0.4342944622039795, 0.0);
      Complex complex4 = complex0.NaN.add(complex1);
      Complex complex5 = complex0.cosh();
      double double0 = complex1.INF.getArgument();
      Complex complex6 = complex0.I.tan();
      Complex complex7 = complex0.INF.tanh();
      Complex complex8 = complex7.ZERO.tan();
      Complex complex9 = complex6.INF.multiply(complex4);
      Complex complex10 = complex6.tan();
      Complex complex11 = complex10.NaN.tan();
      Complex complex12 = complex2.sin();
      Complex complex13 = complex12.cosh();
      Complex complex14 = complex12.sin();
      Complex complex15 = complex14.add(complex2);
      Complex complex16 = complex14.add(complex3);
      Complex complex17 = complex13.divide(complex5);
      Complex complex18 = complex1.INF.atan();
      double double1 = complex18.NaN.abs();
      Complex complex19 = complex13.sqrt();
      Complex complex20 = complex5.pow(complex13);
      Complex complex21 = complex2.INF.negate();
      double double2 = complex20.ONE.abs();
      Complex complex22 = complex0.multiply((-267.0128));
      double double3 = complex2.getArgument();
      Complex complex23 = complex0.cos();
      List<Complex> list0 = complex14.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.NaN.tan();
      Complex complex4 = complex0.ZERO.tan();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = complex5.INF.sqrt();
      Complex complex8 = complex0.asin();
      double double0 = complex0.getImaginary();
      Complex complex9 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(4970.9, Double.NaN);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.sin();
      double double0 = complex2.NaN.abs();
      Complex complex4 = complex3.I.createComplex(Double.NaN, (-300.391164431521));
      Complex complex5 = complex2.I.asin();
      Complex complex6 = complex5.ONE.atan();
      Complex complex7 = complex0.I.subtract(complex1);
      Complex complex8 = complex7.I.tanh();
      Complex complex9 = complex8.multiply(1612.4815292095643);
      Complex complex10 = complex9.INF.subtract(complex4);
      Complex complex11 = complex7.I.atan();
      Complex complex12 = complex11.cos();
      Complex complex13 = complex7.I.sqrt1z();
      Complex complex14 = complex0.log();
      Complex complex15 = complex14.conjugate();
      boolean boolean0 = complex1.isNaN();
      Complex complex16 = complex6.ONE.cosh();
      Complex complex17 = complex2.INF.tan();
      Complex complex18 = complex6.exp();
      Complex complex19 = complex1.I.acos();
      Complex complex20 = complex3.tan();
      Complex complex21 = complex2.asin();
      Complex complex22 = complex6.negate();
      Complex complex23 = complex1.NaN.asin();
      Complex complex24 = complex9.multiply(complex13);
      ComplexField complexField0 = complex10.getField();
      Object object0 = complex20.readResolve();
      boolean boolean1 = complex10.equals(object0);
      Complex complex25 = complex7.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = complex1.pow(complex3);
      Complex complex7 = complex2.I.negate();
      double double0 = complex0.getReal();
      Complex complex8 = complex0.cos();
      String string0 = complex0.toString();
      Complex complex9 = complex0.multiply(complex1);
      Complex complex10 = complex8.negate();
      Complex complex11 = complex10.atan();
      double double1 = complex11.NaN.abs();
      Complex complex12 = complex11.subtract(complex0);
      Complex complex13 = complex11.tan();
      Complex complex14 = complex10.INF.subtract(complex4);
      Complex complex15 = complex11.createComplex(1.2675934823758863E-8, 0.0);
      double double2 = complex0.getArgument();
      double double3 = complex7.abs();
      double double4 = complex8.getImaginary();
      Object object0 = complex1.readResolve();
      Complex complex16 = complex7.sqrt();
      Complex complex17 = complex16.tan();
      double double5 = complex16.getArgument();
      ComplexField complexField0 = complex1.getField();
      int int0 = complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(215);
      Complex complex1 = complex0.createComplex((-1510.11), (-1057.4949231836));
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.cosh();
      int int0 = complex1.hashCode();
      List<Complex> list1 = complex0.nthRoot(215);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex1.ONE.divide(complex0);
      Complex complex6 = complex4.NaN.atan();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex4.cos();
      Complex complex9 = complex4.pow(complex0);
      Complex complex10 = complex8.pow(complex9);
      Complex complex11 = complex2.negate();
      Object object0 = complex6.readResolve();
      List<Complex> list2 = complex0.nthRoot(1);
      double double0 = complex6.getImaginary();
      Complex complex12 = complex9.sqrt1z();
      Complex complex13 = complex0.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex1.ZERO.sinh();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = complex4.ZERO.sqrt();
      Complex complex7 = complex6.cos();
      ComplexField complexField1 = complex7.ZERO.getField();
      double double0 = complex4.INF.abs();
      List<Complex> list0 = complex0.nthRoot(170);
      String string0 = complex0.toString();
      Complex complex8 = complex2.ZERO.log();
      Complex complex9 = complex0.log();
      double double1 = complex9.INF.abs();
      Complex complex10 = complex0.acos();
      Complex complex11 = complex2.negate();
      Complex complex12 = complex2.tanh();
      double double2 = complex3.getImaginary();
      Complex complex13 = complex8.sqrt();
      double double3 = complex0.getReal();
      Complex complex14 = complex4.acos();
      Complex complex15 = complex1.sqrt1z();
      List<Complex> list1 = complex11.nthRoot(1038);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-655.542));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.tanh();
      int int0 = complex0.hashCode();
      List<Complex> list0 = complex3.ONE.nthRoot(183);
      Complex complex4 = complex3.createComplex(1269.9535463939828, (-561.27));
      Complex complex5 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.NaN.acos();
      String string0 = complex0.toString();
      Complex complex3 = complex0.createComplex((-1149.099), (-1.0));
      Complex complex4 = complex2.NaN.sin();
      Complex complex5 = complex2.multiply(519.00500359);
      Complex complex6 = complex2.divide(complex5);
      Complex complex7 = complex2.createComplex((-2889.5019387), (-2889.5019387));
      Complex complex8 = complex0.createComplex((-2889.5019387), (-2889.5019387));
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex9.ZERO.exp();
      Complex complex11 = complex10.INF.atan();
      Complex complex12 = complex10.multiply(0.0);
      Complex complex13 = complex9.NaN.cosh();
      Complex complex14 = complex2.sin();
      Complex complex15 = complex7.pow(complex3);
      Complex complex16 = complex10.cosh();
      double double0 = complex0.getImaginary();
      Complex complex17 = complex10.acos();
      boolean boolean0 = complex9.isInfinite();
      double double1 = complex5.getArgument();
      Object object0 = complex4.readResolve();
      Complex complex18 = complex4.log();
      Object object1 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-3308.173281355142), 384.2006804972);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex1.I.asin();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.INF.multiply(complex0);
      Complex complex6 = complex5.NaN.divide(complex4);
      Complex complex7 = complex5.INF.atan();
      int int0 = complex0.I.hashCode();
      ComplexField complexField0 = complex7.getField();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex1.I.sqrt();
      Complex complex10 = complex9.NaN.sqrt();
      Complex complex11 = complex8.NaN.cosh();
      Complex complex12 = complex4.conjugate();
      double double0 = complex7.getImaginary();
      Complex complex13 = complex7.divide(complex1);
      Complex complex14 = complex1.sqrt();
      Complex complex15 = complex0.atan();
      Complex complex16 = complex9.exp();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex2.NaN.createComplex(669.605, 6.283185307179586);
      Complex complex4 = complex0.INF.multiply(complex1);
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex1.ZERO.exp();
      Complex complex6 = complex0.negate();
      String string0 = complex6.toString();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex1.log();
      double double1 = complex4.getReal();
      Complex complex9 = complex7.ONE.sinh();
      Complex complex10 = complex1.INF.exp();
      Object object0 = complex8.readResolve();
      Complex complex11 = complex2.createComplex(6.283185307179586, 669.605);
      Complex complex12 = complex11.INF.log();
      boolean boolean1 = complex7.equals(object0);
      Complex complex13 = complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex14 = complex13.sqrt();
      Complex complex15 = complex1.conjugate();
      Complex complex16 = complex15.divide(complex8);
      Complex complex17 = complex16.negate();
      Complex complex18 = complex7.negate();
      Complex complex19 = complex18.I.negate();
      Complex complex20 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.multiply(468.6377307773);
      Object object0 = complex0.ZERO.readResolve();
      Object object1 = complex0.ONE.readResolve();
      Complex complex3 = complex1.createComplex((-0.5), (-0.5));
      Complex complex4 = complex2.log();
      double double0 = complex0.getReal();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.log();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex0.ZERO.multiply(Double.NaN);
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.multiply((-1442.59888711));
      Complex complex2 = complex1.INF.subtract(complex0);
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex2.INF.multiply(373.40931);
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = null;
      try { 
        complex0.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.divide(complex1);
      ComplexField complexField0 = complex0.NaN.getField();
      double double0 = complex0.getArgument();
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply(0.7853981633974483);
      Complex complex2 = complex1.ZERO.add(complex0);
      double double0 = complex0.I.abs();
      Complex complex3 = complex0.tanh();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.I.negate();
      int int0 = complex3.I.hashCode();
      Complex complex7 = complex2.ZERO.multiply(complex0);
      Complex complex8 = complex4.INF.conjugate();
      Complex complex9 = complex8.pow(complex3);
      Complex complex10 = complex0.divide(complex1);
      Complex complex11 = complex4.log();
      Complex complex12 = complex11.ZERO.acos();
      Complex complex13 = complex10.tanh();
      Complex complex14 = complex13.I.divide(complex1);
      Complex complex15 = complex11.sin();
      Complex complex16 = complex2.ZERO.log();
      Complex complex17 = complex13.cos();
      ComplexField complexField1 = complex0.getField();
      Complex complex18 = complex2.tanh();
      Complex complex19 = complex17.sin();
      double double1 = complex19.NaN.getArgument();
      String string0 = complex12.toString();
      Complex complex20 = complex13.sin();
      Complex complex21 = complex20.multiply(1848.52);
      Complex complex22 = complex0.tanh();
      Complex complex23 = complex4.cosh();
      String string1 = complex19.INF.toString();
      boolean boolean0 = complex0.equals(complex20);
      Object object0 = complex10.readResolve();
      Complex complex24 = complex19.cosh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-1.0E-6), (-1.0E-6));
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.ZERO.pow(complex3);
      Complex complex5 = complex3.NaN.sin();
      Complex complex6 = complex4.ZERO.createComplex(3486.267, 3486.267);
      Complex complex7 = complex6.ZERO.acos();
      double double0 = complex0.I.getArgument();
      double double1 = complex0.getImaginary();
      Complex complex8 = complex6.INF.cosh();
      double double2 = complex0.getReal();
      String string0 = complex4.I.toString();
      Complex complex9 = complex0.tanh();
      ComplexField complexField0 = complex9.getField();
      double double3 = complex6.abs();
      Complex complex10 = complex0.createComplex(0.0, 0.0);
      Complex complex11 = complex10.add(complex7);
      Complex complex12 = complex6.atan();
      Complex complex13 = complex9.sqrt();
      int int1 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex3.cosh();
      String string0 = complex1.INF.toString();
      Complex complex5 = complex1.NaN.add(complex0);
      Complex complex6 = complex5.I.cosh();
      Complex complex7 = complex5.INF.asin();
      String string1 = complex7.toString();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex8 = complex0.log();
      Complex complex9 = complex5.sqrt1z();
      Complex complex10 = complex2.pow(complex5);
      ComplexField complexField0 = complex10.getField();
      boolean boolean1 = complex1.isNaN();
      double double0 = complex6.getReal();
      boolean boolean2 = complex3.equals(complexField0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.ONE.sqrt();
      Object object1 = complex2.ONE.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex3.NaN.sqrt();
      Complex complex6 = complex1.negate();
      double double0 = complex4.getImaginary();
      Complex complex7 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.ONE.cos();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex1.ZERO.pow(complex0);
      String string0 = complex0.toString();
      Complex complex6 = complex0.INF.exp();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex6.ONE.subtract(complex5);
      Complex complex9 = complex5.ONE.tan();
      Complex complex10 = complex1.atan();
      Complex complex11 = complex7.atan();
      Object object0 = complex11.I.readResolve();
      Complex complex12 = complex10.ZERO.pow(complex5);
      Complex complex13 = complex12.I.acos();
      Complex complex14 = complex2.cosh();
      Complex complex15 = complex10.tan();
      Complex complex16 = complex15.I.exp();
      Complex complex17 = complex12.asin();
      Complex complex18 = complex0.asin();
      Complex complex19 = complex18.ZERO.tanh();
      Complex complex20 = complex19.I.sqrt();
      Complex complex21 = complex14.asin();
      Complex complex22 = complex18.pow(complex6);
      boolean boolean0 = complex19.isNaN();
      ComplexField complexField0 = complex9.getField();
      Complex complex23 = complex14.divide(complex1);
      Complex complex24 = complex7.negate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex1.INF.createComplex(6.283185307179586, Double.NaN);
      Complex complex6 = complex2.pow(complex1);
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex6.pow(complex1);
      Object object0 = complex6.readResolve();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex7.sin();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex3.add(complex6);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.negate();
      int int0 = complex0.ONE.hashCode();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ZERO.conjugate();
      int int1 = complex4.I.hashCode();
      Complex complex5 = complex2.INF.negate();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = complex7.NaN.subtract(complex6);
      double double1 = complex8.abs();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex2.pow(complex9);
      Complex complex11 = complex10.I.acos();
      double double2 = complex9.ONE.abs();
      Complex complex12 = complex3.I.acos();
      Complex complex13 = complex3.exp();
      Complex complex14 = complex13.NaN.sqrt1z();
      Complex complex15 = complex6.asin();
      String string0 = complex10.toString();
      Complex complex16 = complex2.sin();
      double double3 = complex16.NaN.getArgument();
      Complex complex17 = complex2.log();
      Complex complex18 = complex17.I.tan();
      String string1 = complex17.toString();
      double double4 = complex0.getReal();
      boolean boolean0 = complex1.isInfinite();
      String string2 = complex7.toString();
      Complex complex19 = complex0.acos();
      Object object0 = new Object();
      boolean boolean1 = complex16.equals(object0);
      Complex complex20 = complex9.add(complex5);
      Object object1 = complex16.readResolve();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = 4275.3;
      Complex complex0 = new Complex(2576.0, 4275.3);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex4.NaN.tanh();
      List<Complex> list0 = complex0.nthRoot(490);
      Complex complex7 = complex1.multiply(2576.0);
      Complex complex8 = complex7.multiply(2576.0);
      String string0 = complex1.I.toString();
      Complex complex9 = complex0.divide(complex3);
      Complex complex10 = complex9.INF.acos();
      String string1 = complex2.toString();
      Complex complex11 = complex1.INF.sqrt1z();
      int int0 = complex3.hashCode();
      Complex complex12 = complex1.add(complex4);
      Complex complex13 = complex7.acos();
      Complex complex14 = complex1.ZERO.tanh();
      Complex complex15 = complex13.NaN.acos();
      try { 
        complex15.ONE.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.multiply(complex0);
      List<Complex> list0 = complex4.nthRoot(252);
      Complex complex5 = complex1.INF.cosh();
      Complex complex6 = complex3.divide(complex2);
      Complex complex7 = complex6.cos();
      Complex complex8 = complex7.I.sqrt1z();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-2.957007209750105E-8), 0.19999954104423523);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(5.694209728, 5.694209728);
      List<Complex> list0 = complex0.nthRoot(826);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.NaN.nthRoot(7);
      double double0 = complex0.abs();
      double double1 = complex0.NaN.getArgument();
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex1.INF.log();
      Complex complex5 = complex2.ONE.cos();
      Complex complex6 = complex3.I.sqrt1z();
      Complex complex7 = complex3.I.multiply((-392.58206));
      Complex complex8 = complex7.ONE.acos();
      double double2 = complex0.getArgument();
      Complex complex9 = complex1.add(complex7);
      ComplexField complexField0 = complex0.getField();
      Complex complex10 = complex6.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.sqrt();
      List<Complex> list0 = complex2.ZERO.nthRoot(2160);
      Complex complex3 = complex1.I.multiply((double) 2160);
      Complex complex4 = complex2.sin();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex5 = complex1.divide(complex0);
      ComplexField complexField1 = complex5.NaN.getField();
      ComplexField complexField2 = complex0.getField();
      Complex complex6 = complex1.I.tan();
      Complex complex7 = complex0.negate();
      Object object0 = complex2.readResolve();
      Complex complex8 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      double double0 = complex0.ZERO.abs();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.I.log();
      int int0 = complex5.I.hashCode();
      boolean boolean0 = complex3.isNaN();
      Complex complex6 = complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.pow(complex0);
      Object object0 = complex1.readResolve();
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex4.exp();
      Complex complex6 = complex4.I.atan();
      Object object1 = complex6.readResolve();
      Complex complex7 = complex1.ZERO.add(complex2);
      Complex complex8 = complex4.ONE.asin();
      boolean boolean0 = complex3.isNaN();
      Complex complex9 = complex5.multiply((-1810.67767100321));
      Complex complex10 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex2.I.exp();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex3.NaN.log();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex4.INF.divide(complex1);
      Complex complex6 = complex0.multiply(0.0);
      Complex complex7 = complex6.ONE.atan();
      int int0 = complex0.hashCode();
      Complex complex8 = complex2.sinh();
      double double1 = complex4.getReal();
      double double2 = complex6.getReal();
      Complex complex9 = complex2.exp();
      Complex complex10 = complex8.asin();
      Complex complex11 = complex10.cos();
      Complex complex12 = complex10.sqrt();
      Object object1 = complex12.readResolve();
      double double3 = complex12.ZERO.getArgument();
      ComplexField complexField0 = complex2.getField();
      Object object2 = complex12.readResolve();
      Complex complex13 = complex5.conjugate();
      Complex complex14 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.subtract(complex1);
      int int0 = complex0.ZERO.hashCode();
      Complex complex3 = complex0.multiply((-8.6985642422));
      Complex complex4 = complex0.pow(complex2);
      double double0 = complex2.getReal();
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex3.multiply(complex4);
      Complex complex7 = complex2.subtract(complex4);
      Complex complex8 = complex6.log();
      double double1 = complex8.ONE.getArgument();
      Complex complex9 = complex0.INF.subtract(complex4);
      Complex complex10 = complex3.conjugate();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex10.ZERO.divide(complex11);
      int int1 = complex10.hashCode();
      Complex complex13 = complex10.pow(complex4);
      Complex complex14 = complex3.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-1415.93), 0.6666666269302368);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.add(complex1);
      double double0 = complex0.getReal();
      Complex complex3 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex1.INF.exp();
      ComplexField complexField0 = complex2.NaN.getField();
      List<Complex> list0 = complex2.INF.nthRoot(1599);
      double double0 = complex0.abs();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.INF.conjugate();
      double double1 = complex2.getArgument();
      Complex complex7 = complex0.negate();
      double double2 = complex7.getArgument();
      Complex complex8 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex3.I.multiply((-1642.39278));
      int int0 = (-867);
      Complex complex6 = complex0.INF.divide(complex5);
      Complex complex7 = complex6.I.sqrt();
      Object object0 = complex5.ZERO.readResolve();
      try { 
        complex3.nthRoot((-867));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -867
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(106.060967853, 106.060967853);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex2.INF.log();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex6 = complex5.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.createComplex(2219.044729852, 2219.044729852);
      Complex complex4 = complex0.INF.subtract(complex3);
      Complex complex5 = complex3.ONE.sin();
      Complex complex6 = complex0.NaN.divide(complex3);
      Complex complex7 = complex0.subtract(complex1);
      double double0 = complex5.getReal();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex0.pow(complex1);
      Complex complex10 = complex3.exp();
      double double1 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1115.0218), 6.283185307179586);
      Complex complex2 = complex0.NaN.multiply(complex1);
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = complex0.I.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex1.ONE.divide(complex0);
      String string0 = complex0.ONE.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.INF.createComplex(0.0, 1342.7232171334651);
      String string0 = complex0.ZERO.toString();
      Complex complex3 = complex2.ONE.divide(complex1);
      Complex complex4 = complex0.ONE.acos();
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex2.I.cos();
      Complex complex9 = complex8.NaN.atan();
      Object object0 = complex0.readResolve();
      Complex complex10 = complex2.divide(complex0);
      boolean boolean0 = complex0.isNaN();
      int int0 = complex2.hashCode();
      Complex complex11 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.createComplex(1446.46, (-3666.69271939));
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.conjugate();
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex0.log();
      Complex complex6 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.multiply(0.0);
      double double0 = complex2.getArgument();
      double double1 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      List<Complex> list0 = complex0.ZERO.nthRoot(154);
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = Complex.NaN;
      boolean boolean0 = complex2.equals(complex3);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.log();
      double double0 = complex4.getArgument();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.acos();
      String string0 = complex1.I.toString();
      Complex complex3 = complex1.I.asin();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex3.ONE.add(complex2);
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex2.acos();
      Complex complex8 = complex1.NaN.negate();
      Object object0 = complex8.I.readResolve();
      Object object1 = complex6.I.readResolve();
      Complex complex9 = complex6.cos();
      double double0 = complex1.getImaginary();
      Complex complex10 = complex0.INF.add(complex4);
      List<Complex> list0 = complex1.nthRoot(88);
      Complex complex11 = complex0.add(complex7);
      Complex complex12 = complex1.tan();
      double double1 = complex6.abs();
      Complex complex13 = complex2.conjugate();
      Complex complex14 = complex13.createComplex(88, 88);
      try { 
        complex1.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex6.NaN.atan();
      boolean boolean0 = complex5.isInfinite();
      try { 
        complex2.nthRoot((-313));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -313
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1144.035784922558), 2869.36801915);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-707.1708434029206), 1.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.multiply(370.896175);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex0.ONE.negate();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex2.INF.conjugate();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex7.ZERO.sinh();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex9.cosh();
      double double0 = complex9.getArgument();
      Complex complex11 = complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(1.9699272335463627E-8, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.ONE.subtract(complex2);
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex2.ONE.tanh();
      Complex complex7 = complex2.subtract(complex0);
      boolean boolean0 = complex4.isInfinite();
      boolean boolean1 = complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      double double0 = complex1.ONE.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.INF.nthRoot(17);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.sin();
      double double0 = complex3.abs();
      double double1 = complex3.getReal();
      double double2 = complex1.getArgument();
      Complex complex4 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex4.conjugate();
      String string0 = complex4.I.toString();
      Complex complex8 = complex0.sqrt1z();
      ComplexField complexField1 = complex8.I.getField();
      Complex complex9 = complex7.tanh();
      Complex complex10 = complex2.cos();
      ComplexField complexField2 = complex1.getField();
      Complex complex11 = complex10.tanh();
      boolean boolean0 = complex11.equals("(0.0, 1.0)");
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.add(complex1);
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.ZERO.cosh();
      List<Complex> list0 = complex2.nthRoot(1394);
      double double1 = complex0.getImaginary();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = complex4.sin();
      double double2 = complex4.getImaginary();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex2.ONE.sqrt1z();
      Complex complex9 = complex8.INF.sqrt1z();
      Complex complex10 = complex8.ZERO.tanh();
      Complex complex11 = complex0.sin();
      Complex complex12 = complex4.subtract(complex0);
      List<Complex> list1 = complex11.nthRoot(7);
      Complex complex13 = complex1.multiply((double) 7);
      String string0 = complex11.toString();
      Complex complex14 = complex7.acos();
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(1504.354670461341, 1504.354670461341);
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex1.ONE.cosh();
      Complex complex7 = complex1.I.asin();
      Complex complex8 = complex3.cos();
      List<Complex> list0 = complex0.nthRoot(3759);
      Complex complex9 = complex6.ZERO.add(complex3);
      double double0 = complex9.ONE.abs();
      Complex complex10 = complex6.ZERO.sqrt1z();
      double double1 = complex1.getReal();
      Complex complex11 = complex6.cosh();
      Complex complex12 = complex11.ONE.multiply(complex2);
      boolean boolean0 = complex1.isInfinite();
      Complex complex13 = complex4.sinh();
      boolean boolean1 = complex6.equals(list0);
      Complex complex14 = complex4.negate();
      Complex complex15 = complex10.acos();
      Object object0 = complex6.readResolve();
      Object object1 = complex4.readResolve();
      boolean boolean2 = complex13.equals(object1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-303.194837826072), Double.NEGATIVE_INFINITY);
      double double0 = complex0.I.getArgument();
      String string0 = complex0.ONE.toString();
      Complex complex1 = Complex.ZERO;
      List<Complex> list0 = complex1.nthRoot(7);
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = Complex.ZERO;
      List<Complex> list1 = complex3.nthRoot(7);
      Complex complex4 = complex2.ZERO.divide(complex3);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.ZERO.subtract(complex5);
      Complex complex7 = complex4.subtract(complex6);
      Complex complex8 = complex4.NaN.tanh();
      Complex complex9 = complex8.ZERO.cosh();
      Complex complex10 = complex0.pow(complex1);
      Complex complex11 = complex10.NaN.log();
      Complex complex12 = complex11.ZERO.conjugate();
      Complex complex13 = complex11.INF.log();
      int int0 = complex0.hashCode();
      Complex complex14 = complex2.atan();
      Complex complex15 = complex14.cosh();
      Complex complex16 = complex7.exp();
      Complex complex17 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.I.asin();
      double double0 = complex0.getReal();
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex6.I.sin();
      boolean boolean1 = complex6.isNaN();
      Complex complex8 = complex3.acos();
      Complex complex9 = complex2.tan();
      double double1 = complex6.getReal();
      Complex complex10 = complex9.multiply(complex6);
      try { 
        complex10.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1777.5542262752));
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex3.log();
      Object object0 = complex5.I.readResolve();
      Complex complex6 = complex5.ZERO.multiply(complex0);
      Complex complex7 = complex0.exp();
      Complex complex8 = complex5.exp();
      int int0 = complex8.INF.hashCode();
      Complex complex9 = complex3.createComplex(0.0, 2316.0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.INF.cos();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.ONE.log();
      double double0 = complex3.ZERO.getArgument();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex2.ONE.divide(complex1);
      Complex complex6 = complex5.pow(complex2);
      Complex complex7 = complex1.NaN.negate();
      int int0 = complex7.NaN.hashCode();
      Object object1 = complex1.readResolve();
      Complex complex8 = complex5.ZERO.sqrt1z();
      Complex complex9 = complex8.NaN.exp();
      Complex complex10 = complex2.I.multiply(complex0);
      Complex complex11 = complex6.asin();
      Complex complex12 = complex2.acos();
      Complex complex13 = complex12.I.sin();
      int int1 = complex3.ZERO.hashCode();
      Complex complex14 = complex12.ZERO.cosh();
      Complex complex15 = complex13.sqrt1z();
      Complex complex16 = Complex.ZERO;
      Complex complex17 = complex16.ONE.cos();
      Complex complex18 = complex15.I.divide(complex16);
      Complex complex19 = complex0.sinh();
      Complex complex20 = complex13.sqrt();
      Complex complex21 = complex13.ONE.exp();
      Complex complex22 = complex19.multiply((-549.017166688509));
      Complex complex23 = complex3.sin();
      int int2 = complex1.hashCode();
      Complex complex24 = complex3.sqrt();
      Complex complex25 = complex19.cos();
      Complex complex26 = complex25.ZERO.tanh();
      Complex complex27 = complex20.sinh();
      double double1 = complex15.getImaginary();
      Complex complex28 = complex13.acos();
      double double2 = complex18.getImaginary();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = complex0.add(complex1);
      ComplexField complexField0 = complex1.I.getField();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex4.exp();
      Complex complex10 = complex9.multiply(2930.5266);
  }
}
