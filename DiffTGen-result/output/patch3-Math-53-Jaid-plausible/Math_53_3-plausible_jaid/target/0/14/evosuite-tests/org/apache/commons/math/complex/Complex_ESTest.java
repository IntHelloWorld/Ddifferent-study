/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 00:53:41 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.equals("M");
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.NaN.sqrt();
      Complex complex4 = complex3.ZERO.divide(complex2);
      Complex complex5 = complex2.INF.tan();
      double double0 = complex0.getReal();
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex6.NaN.acos();
      Complex complex8 = complex5.cosh();
      String string0 = complex8.toString();
      boolean boolean1 = complex1.isNaN();
      boolean boolean2 = complex6.equals(complex1);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.INF.log();
      Object object0 = complex9.readResolve();
      Complex complex11 = complex7.divide(complex9);
      Complex complex12 = complex6.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.multiply(complex2);
      Object object0 = complex2.readResolve();
      int int0 = complex4.I.hashCode();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex6.divide(complex2);
      Complex complex8 = complex0.pow(complex1);
      Complex complex9 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      List<Complex> list0 = complex0.ONE.nthRoot(2879);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.ONE.negate();
      ComplexField complexField0 = complex4.I.getField();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex3.INF.pow(complex6);
      Complex complex8 = complex1.cosh();
      // Undeclared exception!
      complex8.ZERO.nthRoot(2879);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = complex0.I.multiply(Double.NaN);
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = Complex.INF;
      Object object1 = complex0.readResolve();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex4.INF.multiply(895.28);
      double double0 = complex3.INF.abs();
      Complex complex6 = complex0.createComplex(0.0, 0.1818181574344635);
      double double1 = complex3.getArgument();
      Complex complex7 = complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.createComplex(2.0, 2.0);
      int int0 = complex3.ONE.hashCode();
      ComplexField complexField1 = complex0.ZERO.getField();
      Complex complex4 = complex1.ZERO.acos();
      Complex complex5 = complex2.I.cos();
      List<Complex> list0 = complex2.ZERO.nthRoot(2841);
      Complex complex6 = complex2.createComplex(1311.2, 0.0);
      Complex complex7 = complex6.NaN.divide(complex3);
      Complex complex8 = complex6.NaN.tanh();
      Complex complex9 = complex6.INF.exp();
      Complex complex10 = complex6.sin();
      Complex complex11 = complex1.sinh();
      Complex complex12 = complex11.ZERO.atan();
      Complex complex13 = complex11.ZERO.negate();
      Complex complex14 = complex0.add(complex11);
      Complex complex15 = complex14.INF.sqrt1z();
      Complex complex16 = complex11.multiply(1823.632861264);
      Complex complex17 = complex1.sinh();
      Complex complex18 = Complex.INF;
      Complex complex19 = complex2.pow(complex18);
      Complex complex20 = complex19.ZERO.multiply(complex12);
      Complex complex21 = complex16.sqrt1z();
      Complex complex22 = complex5.exp();
      int int1 = complex18.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.NaN.getField();
      String string0 = complex0.toString();
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex3.multiply(3389.9047313997);
      int int0 = complex4.ONE.hashCode();
      List<Complex> list0 = complex6.ZERO.nthRoot(934);
      Complex complex7 = complex3.I.cos();
      Complex complex8 = complex7.createComplex(934, 15.0);
      Complex complex9 = complex4.tan();
      Complex complex10 = complex3.ZERO.divide(complex9);
      int int1 = complex6.hashCode();
      Complex complex11 = complex9.negate();
      Complex complex12 = complex9.tan();
      Complex complex13 = complex12.sin();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex2.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.ZERO.pow(complex0);
      Complex complex5 = null;
      Complex complex6 = complex2.NaN.sin();
      try { 
        complex0.NaN.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.sin();
      double double0 = complex1.NaN.abs();
      Complex complex3 = complex0.INF.sin();
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex1.tanh();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex7 = complex4.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(3232.470700552778, 3232.470700552778);
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.multiply(3232.470700552778);
      String string0 = complex2.toString();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.createComplex(3232.470700552778, 3232.470700552778);
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex1.divide(complex4);
      Complex complex7 = complex6.INF.createComplex(1.25, Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.sin();
      Complex complex9 = complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.ZERO.sin();
      List<Complex> list0 = complex9.ZERO.nthRoot(1);
      Complex complex11 = complex4.I.conjugate();
      Complex complex12 = complex0.I.atan();
      Complex complex13 = complex0.subtract(complex4);
      double double1 = complex3.getImaginary();
      Complex complex14 = complex0.pow(complex1);
      Complex complex15 = complex4.atan();
      Complex complex16 = complex15.sqrt1z();
      Complex complex17 = complex15.divide(complex13);
      Complex complex18 = complex10.conjugate();
      Complex complex19 = complex3.conjugate();
      double double2 = complex19.ZERO.abs();
      Complex complex20 = complex19.sqrt();
      Complex complex21 = complex3.createComplex((-2701.220218585), 871.8402);
      Complex complex22 = complex12.conjugate();
      String string1 = complex3.toString();
      Complex complex23 = complex9.sqrt();
      Complex complex24 = complex5.log();
      boolean boolean0 = complex13.isNaN();
      double double3 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-1.0));
      Object object0 = complex0.I.readResolve();
      Complex complex2 = complex0.sinh();
      int int0 = complex2.ONE.hashCode();
      double double0 = complex2.getImaginary();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex3.acos();
      Complex complex5 = complex1.createComplex(0.167, Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex7.NaN.asin();
      Object object1 = complex7.I.readResolve();
      Complex complex9 = complex6.multiply(complex1);
      Complex complex10 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-3894.0387040578), (-3894.0387040578));
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = new Complex((-3894.0387040578), (-3894.0387040578));
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex0.ZERO.multiply(complex1);
      double double0 = complex3.abs();
      Complex complex6 = complex4.divide(complex3);
      Complex complex7 = complex4.negate();
      Complex complex8 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = new Complex(0.0, 1750.204652);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex3.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.INF.add(complex2);
      String string0 = complex3.INF.toString();
      Complex complex5 = complex0.divide(complex3);
      Complex complex6 = complex5.ZERO.add(complex2);
      Complex complex7 = complex5.exp();
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex1.multiply(complex8);
      Complex complex11 = complex0.ONE.cos();
      Complex complex12 = complex10.INF.tanh();
      Complex complex13 = complex2.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.createComplex((-48.34044809), (-48.34044809));
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex1.I.add(complex0);
      Complex complex4 = complex0.sqrt1z();
      double double0 = complex0.getImaginary();
      int int0 = complex3.hashCode();
      Complex complex5 = complex4.add(complex0);
      Complex complex6 = complex4.pow(complex1);
      Complex complex7 = complex3.ONE.add(complex1);
      double double1 = complex4.ZERO.abs();
      Complex complex8 = complex6.asin();
      Complex complex9 = complex5.divide(complex0);
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex4.ZERO.exp();
      Complex complex12 = complex10.NaN.negate();
      boolean boolean0 = complex3.isInfinite();
      Complex complex13 = complex8.conjugate();
      Complex complex14 = complex10.createComplex(1.0, 0.0);
      boolean boolean1 = complex10.isNaN();
      Complex complex15 = complex1.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex0.ONE.tanh();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex4 = complex0.I.sin();
      Complex complex5 = complex0.createComplex(1231.894578263791, 1231.894578263791);
      ComplexField complexField1 = complex5.getField();
      Complex complex6 = complex5.ZERO.subtract(complex0);
      Object object0 = complex5.readResolve();
      double double0 = complex4.getReal();
      double double1 = complex0.INF.getArgument();
      Complex complex7 = complex3.NaN.acos();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex7.ONE.createComplex(0.0, (-240.4901015));
      Complex complex10 = complex3.INF.divide(complex6);
      Complex complex11 = complex10.sqrt();
      List<Complex> list0 = complex5.nthRoot(1392);
      Complex complex12 = complex5.divide(complex3);
      Complex complex13 = complex12.sqrt();
      double double2 = complex4.getReal();
      Complex complex14 = complex13.acos();
      Complex complex15 = complex14.ONE.add(complex9);
      Complex complex16 = Complex.NaN;
      Complex complex17 = complex16.INF.log();
      boolean boolean0 = complex7.equals(complex16);
      Complex complex18 = complex16.asin();
      Complex complex19 = complex13.multiply(complex0);
      double double3 = complex19.ZERO.getArgument();
      boolean boolean1 = complex13.isNaN();
      Complex complex20 = complex4.divide(complex3);
      Complex complex21 = complex20.asin();
      Complex complex22 = complex9.cos();
      Complex complex23 = complex9.sqrt();
      Complex complex24 = complex2.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.NaN.sin();
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex2.ZERO.log();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.I.cos();
      Complex complex8 = complex0.sinh();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex6.ZERO.subtract(complex9);
      Complex complex11 = complex0.INF.sqrt();
      boolean boolean0 = complex1.isInfinite();
      Object object0 = complex2.readResolve();
      Complex complex12 = complex6.I.tanh();
      boolean boolean1 = complex7.isNaN();
      Complex complex13 = complex9.exp();
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex4.INF.multiply((-1138.7024909203));
      Complex complex16 = complex14.ZERO.tanh();
      Object object1 = complex14.readResolve();
      boolean boolean2 = complex8.equals(object1);
      double double0 = complex14.getArgument();
      Complex complex17 = complex13.add(complex12);
      Complex complex18 = complex7.sinh();
      Complex complex19 = complex3.ZERO.cosh();
      Complex complex20 = complex4.tanh();
      boolean boolean3 = complex13.isNaN();
      Complex complex21 = complex18.cos();
      Object object2 = complex7.readResolve();
      Complex complex22 = complex21.sinh();
      Object object3 = complex2.readResolve();
      Complex complex23 = complex13.cos();
      boolean boolean4 = complex20.isNaN();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex0.createComplex(307.7, 307.7);
      Complex complex4 = complex3.tanh();
      int int0 = complex0.hashCode();
      double double0 = complex4.getArgument();
      int int1 = complex2.NaN.hashCode();
      boolean boolean0 = complex3.isInfinite();
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex4.INF.exp();
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex2.acos();
      boolean boolean1 = complex4.isNaN();
      Complex complex10 = complex8.sin();
      boolean boolean2 = complex4.isInfinite();
      Complex complex11 = complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-2656.9090268381), (-2656.9090268381));
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.multiply((-2656.9090268381));
      double double0 = complex0.NaN.getArgument();
      int int1 = complex0.hashCode();
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(8165.417103967205, 8165.417103967205);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt();
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex3 = complex1.ONE.sqrt();
      double double0 = complex1.getArgument();
      String string0 = complex2.NaN.toString();
      Complex complex4 = complex0.exp();
      ComplexField complexField1 = complex2.INF.getField();
      double double1 = complex0.getReal();
      Complex complex5 = complex0.INF.tan();
      Complex complex6 = complex5.atan();
      double double2 = complex2.abs();
      Complex complex7 = complex1.add(complex0);
      Complex complex8 = complex7.ZERO.sqrt();
      Complex complex9 = complex8.pow(complex0);
      Complex complex10 = complex7.sinh();
      Complex complex11 = complex3.log();
      Complex complex12 = complex11.INF.multiply(1.0);
      int int0 = complex12.ZERO.hashCode();
      Complex complex13 = complex0.conjugate();
      Complex complex14 = complex13.ZERO.cos();
      Complex complex15 = complex13.tanh();
      Complex complex16 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.INF.sqrt1z();
      String string0 = complex0.toString();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex2.log();
      try { 
        complex2.nthRoot((-3852));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,852
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getArgument();
      String string0 = complex0.toString();
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = new Complex(1.5707963267948966, 1.5707963267948966);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex4.ZERO.asin();
      int int0 = complex3.INF.hashCode();
      Complex complex6 = complex3.multiply(complex0);
      Complex complex7 = complex6.ONE.cos();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex8.I.exp();
      Complex complex10 = complex3.add(complex6);
      double double1 = complex0.getArgument();
      double double2 = complex1.abs();
      Complex complex11 = complex4.atan();
      Complex complex12 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.createComplex((-4156.852), (-4156.852));
      Complex complex2 = complex0.createComplex(12.0, (-438.70647));
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex2.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.ZERO.exp();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.createComplex(0.0, (-702.6879142054735));
      Complex complex2 = complex0.tanh();
      double double0 = complex2.ONE.getArgument();
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.NaN.pow(complex4);
      Complex complex6 = complex5.ZERO.sqrt();
      Complex complex7 = complex2.exp();
      Complex complex8 = complex3.ONE.createComplex(0.0, 0.0);
      Complex complex9 = complex8.NaN.sinh();
      double double1 = complex7.getReal();
      double double2 = complex1.getImaginary();
      List<Complex> list0 = complex0.nthRoot(1);
      boolean boolean0 = complex5.isInfinite();
      Complex complex10 = complex7.add(complex0);
      Complex complex11 = complex0.sin();
      int int0 = complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex4.ZERO.log();
      double double0 = complex0.NaN.getArgument();
      double double1 = complex5.I.getArgument();
      Complex complex6 = complex0.asin();
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex5.readResolve();
      boolean boolean0 = complex5.isInfinite();
      Complex complex7 = complex1.sin();
      Complex complex8 = complex7.INF.sqrt1z();
      Complex complex9 = complex1.divide(complex7);
      Complex complex10 = complex3.sin();
      double double2 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.ZERO.acos();
      int int0 = complex2.hashCode();
      ComplexField complexField0 = complex2.INF.getField();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.ZERO.sqrt();
      double double0 = complex0.abs();
      Complex complex5 = complex0.log();
      Complex complex6 = complex3.ZERO.divide(complex2);
      Complex complex7 = complex3.I.sinh();
      Object object0 = complex3.readResolve();
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex2.asin();
      Complex complex10 = complex9.INF.subtract(complex4);
      Complex complex11 = complex8.tan();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cosh();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.multiply((-2137.576019));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.ZERO.log();
      double double0 = complex0.abs();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex2.sqrt1z();
      double double1 = complex4.ZERO.abs();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex4.I.sqrt();
      Complex complex8 = complex6.I.exp();
      double double2 = complex2.getReal();
      Complex complex9 = complex2.exp();
      Complex complex10 = complex9.I.atan();
      Complex complex11 = complex4.multiply(1.0);
      Complex complex12 = complex3.exp();
      Complex complex13 = complex2.cosh();
      Complex complex14 = complex2.conjugate();
      Complex complex15 = complex0.multiply(complex11);
      Object object1 = complex0.readResolve();
      double double3 = complex15.abs();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.multiply(complex1);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex3 = complex0.ZERO.multiply(complex1);
      double double0 = complex3.INF.abs();
      Complex complex4 = complex0.ZERO.cos();
      Complex complex5 = new Complex((-1292.4567189147), (-1292.4567189147));
      boolean boolean0 = complex0.equals(complex5);
      Complex complex6 = complex5.I.tan();
      Complex complex7 = complex5.sinh();
      Object object1 = complex5.readResolve();
      Complex complex8 = complex2.acos();
      Complex complex9 = complex2.add(complex6);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 0.0);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.ZERO.acos();
      double double0 = complex3.ONE.abs();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex2.I.exp();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex1.ZERO.multiply((-407.1));
      Complex complex9 = complex8.INF.negate();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(897.9397798336, 897.9397798336);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex1.ZERO.multiply(897.9397798336);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex1.negate();
      Object object0 = complex6.readResolve();
      Complex complex7 = complex6.sqrt1z();
      ComplexField complexField0 = complex7.getField();
      try { 
        complex1.nthRoot((-1518500250));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,518,500,250
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(1585.0005602, 0.0);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ZERO.multiply(complex1);
      double double0 = complex3.NaN.abs();
      double double1 = complex3.ZERO.getArgument();
      Complex complex4 = complex2.multiply(2671.13871);
      Object object0 = complex0.readResolve();
      Complex complex5 = complex1.divide(complex0);
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex6 = complex2.exp();
      double double2 = complex2.abs();
      Object object1 = complex3.readResolve();
      Complex complex7 = complex2.multiply(complex6);
      Complex complex8 = complex0.multiply(complex5);
      int int0 = complex1.hashCode();
      int int1 = complex0.hashCode();
      Complex complex9 = complex3.sqrt1z();
      double double3 = complex8.getArgument();
      int int2 = complex4.hashCode();
      double double4 = complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.multiply((-2021.62902));
      Complex complex4 = complex3.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.createComplex((-2396.022208), (-2396.022208));
      Complex complex2 = complex1.NaN.exp();
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex2.ZERO.atan();
      List<Complex> list0 = complex0.nthRoot(47);
      Complex complex4 = complex0.ZERO.log();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex1.getReal();
      Complex complex5 = complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.createComplex((-1.0), 1223.0796967701317);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex2.ZERO.sqrt();
      Complex complex7 = complex5.divide(complex2);
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = Complex.ONE;
      boolean boolean0 = complex0.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex0.ONE.sin();
      Complex complex5 = complex2.add(complex0);
      Complex complex6 = complex0.NaN.tanh();
      Complex complex7 = complex6.NaN.tanh();
      Complex complex8 = complex6.INF.multiply((-1951.2415));
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex2.atan();
      Complex complex11 = complex10.INF.subtract(complex9);
      Complex complex12 = complex3.add(complex5);
      Complex complex13 = complex12.tan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt();
      double double0 = complex0.INF.abs();
      Complex complex2 = complex0.multiply(Double.POSITIVE_INFINITY);
      double double1 = complex0.abs();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.multiply(complex1);
      double double2 = complex4.getImaginary();
      Complex complex5 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.I.sinh();
      String string0 = complex0.toString();
      Complex complex5 = complex0.sinh();
      boolean boolean1 = complex3.isNaN();
      boolean boolean2 = complex3.equals(complex5);
      double double0 = complex4.getArgument();
      double double1 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex1.ZERO.multiply(0.0);
      int int0 = complex2.hashCode();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex1.exp();
      double double1 = complex1.getImaginary();
      Complex complex5 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.ONE.add(complex0);
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex1.tan();
      Complex complex7 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex1.ONE.pow(complex2);
      double double0 = complex4.ZERO.getArgument();
      ComplexField complexField0 = complex1.getField();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex0.add(complex1);
      double double1 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.I.createComplex((-2279.869), (-2279.869));
      Complex complex4 = complex2.NaN.exp();
      Complex complex5 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex1.ONE.conjugate();
      Complex complex4 = complex0.NaN.multiply(complex1);
      Complex complex5 = complex0.createComplex((-2278.857089697447), 2.0);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex4.log();
      Complex complex9 = complex0.tan();
      int int0 = complex2.ZERO.hashCode();
      List<Complex> list0 = complex8.I.nthRoot(138);
      Complex complex10 = complex3.pow(complex0);
      Complex complex11 = complex10.I.tanh();
      double double0 = complex8.getArgument();
      Complex complex12 = complex5.INF.sinh();
      Complex complex13 = complex10.ZERO.subtract(complex2);
      Complex complex14 = complex0.ONE.sin();
      ComplexField complexField0 = complex1.getField();
      Complex complex15 = complex11.add(complex5);
      Complex complex16 = complex15.ONE.negate();
      Complex complex17 = complex0.cos();
      Complex complex18 = complex9.asin();
      double double1 = complex13.getImaginary();
      double double2 = complex13.getImaginary();
      int int1 = complex16.hashCode();
      Complex complex19 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cos();
      double double0 = complex0.abs();
      double double1 = complex0.getArgument();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex0.log();
      boolean boolean0 = complex1.equals(complex2);
      Complex complex4 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(1699.62240048308, 1.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.sqrt1z();
      double double0 = complex2.getArgument();
      Complex complex3 = complex2.I.asin();
      List<Complex> list0 = complex0.nthRoot(7);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-3894.0387040578), (-3894.0387040578));
      Complex complex1 = complex0.ZERO.add(complex0);
      Complex complex2 = new Complex((-3894.0387040578), (-3894.0387040578));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.ZERO.multiply(complex0);
      double double0 = complex2.abs();
      Complex complex5 = complex3.divide(complex2);
      Complex complex6 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply((-2259.798851526));
      double double0 = complex0.getArgument();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      String string0 = complex0.NaN.toString();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.pow(complex1);
      List<Complex> list0 = complex2.nthRoot(19);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.INF.exp();
      Complex complex4 = complex0.ZERO.cos();
      Complex complex5 = complex4.ONE.negate();
      String string0 = complex5.toString();
      Object object0 = complex4.ONE.readResolve();
      Object object1 = complex0.readResolve();
      Complex complex6 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.toString();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.I;
      try { 
        complex1.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.NaN.divide(complex1);
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex2.ZERO.atan();
      ComplexField complexField0 = complex2.getField();
      double double0 = complex2.getArgument();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      Complex complex6 = complex2.ZERO.negate();
      Complex complex7 = complex0.subtract(complex1);
      boolean boolean1 = complex0.isInfinite();
      Complex complex8 = complex7.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.NaN.multiply(complex0);
      String string0 = complex3.NaN.toString();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex4.createComplex(2098.021, 2098.021);
      Complex complex7 = complex6.conjugate();
      String string1 = complex5.toString();
      double double0 = complex0.abs();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex5.multiply(complex3);
      ComplexField complexField0 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex1.ONE.negate();
      Object object0 = complex0.NaN.readResolve();
      int int0 = complex0.hashCode();
      Complex complex5 = complex1.sinh();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.NaN.createComplex((-1.0), (-1.0));
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex5.atan();
      Complex complex8 = complex6.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex0.NaN.add(complex1);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.sin();
      try { 
        complex4.nthRoot((-1716));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,716
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.atan();
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex1.ZERO.subtract(complex4);
      double double1 = complex2.abs();
      Complex complex6 = complex0.NaN.exp();
      double double2 = complex3.ZERO.abs();
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex0.ZERO.multiply(0.0);
      Complex complex9 = complex1.ONE.log();
      double double3 = complex9.ZERO.abs();
      Complex complex10 = complex7.I.subtract(complex4);
      Complex complex11 = complex7.INF.multiply(complex1);
      Complex complex12 = complex1.conjugate();
      Object object0 = complex12.NaN.readResolve();
      int int0 = complex2.hashCode();
      Complex complex13 = complex1.cos();
      Object object1 = complex1.ONE.readResolve();
      List<Complex> list0 = complex13.I.nthRoot(1);
      try { 
        complex13.INF.nthRoot((-897));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -897
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt1z();
      String string0 = complex0.ONE.toString();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ZERO.sin();
      String string1 = complex3.INF.toString();
      Complex complex5 = complex2.ONE.subtract(complex0);
      ComplexField complexField1 = complex2.getField();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex5.I.pow(complex2);
      Complex complex8 = complex0.I.divide(complex1);
      Complex complex9 = complex6.ONE.divide(complex0);
      Complex complex10 = complex6.tanh();
      Complex complex11 = complex10.subtract(complex1);
      Complex complex12 = complex5.sinh();
      Complex complex13 = complex12.I.divide(complex5);
      Complex complex14 = complex12.ZERO.sqrt();
      Complex complex15 = complex5.acos();
      Complex complex16 = complex15.INF.createComplex(0.0, 1629.131309751);
      ComplexField complexField2 = complex15.getField();
      double double1 = complex2.abs();
      int int0 = complex5.hashCode();
      Complex complex17 = complex5.divide(complex2);
      String string2 = complex11.toString();
      Object object0 = complex10.readResolve();
      Complex complex18 = complex14.multiply(458.7072515318642);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex3.ONE.asin();
      double double0 = complex0.getArgument();
      Complex complex5 = complex0.createComplex(0.0, 1.0);
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = complex0.I.multiply(complex5);
      Complex complex8 = complex2.ZERO.atan();
      Complex complex9 = complex0.pow(complex5);
      double double1 = complex9.ONE.abs();
      double double2 = complex6.NaN.getArgument();
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex10.NaN.tan();
      Complex complex12 = complex10.sin();
      double double3 = complex12.ZERO.getArgument();
      boolean boolean0 = complex6.equals(complex2);
      Complex complex13 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex14 = complex3.pow(complex13);
      Complex complex15 = complex4.negate();
      Complex complex16 = complex5.cos();
      Complex complex17 = complex13.exp();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.exp();
      ComplexField complexField0 = complex0.INF.getField();
      String string0 = complex0.toString();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex1.I.sqrt1z();
      Complex complex5 = complex0.sqrt1z();
      double double0 = complex5.ONE.getArgument();
      Complex complex6 = complex5.I.multiply(0.0);
      Complex complex7 = complex6.I.tan();
      Complex complex8 = complex7.NaN.createComplex((-2374.9298751145), 0.0);
      Complex complex9 = complex1.acos();
      Complex complex10 = complex0.I.tanh();
      Complex complex11 = complex9.INF.multiply(complex5);
      Complex complex12 = complex9.atan();
      int int0 = complex12.hashCode();
      Complex complex13 = complex2.sqrt1z();
      Complex complex14 = complex12.NaN.add(complex0);
      Complex complex15 = complex12.createComplex(0.0, 1.073741824E9);
      Complex complex16 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex4.ZERO.conjugate();
      double double0 = complex5.INF.getArgument();
      Complex complex7 = complex5.I.sin();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex3.equals(object0);
      Complex complex8 = complex3.ONE.asin();
      Complex complex9 = complex1.ONE.createComplex(0.7853981633974483, 212.797);
      Complex complex10 = complex3.conjugate();
      Complex complex11 = complex0.ONE.cosh();
      double double1 = complex0.abs();
      Complex complex12 = complex7.subtract(complex0);
      ComplexField complexField0 = complex12.ONE.getField();
      Complex complex13 = complex5.ZERO.tan();
      ComplexField complexField1 = complex0.getField();
      Complex complex14 = complex10.I.log();
      double double2 = complex2.abs();
      Complex complex15 = complex7.pow(complex10);
      Complex complex16 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(232.37716, 232.37716);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      double double0 = complex2.NaN.abs();
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2861.478);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.INF.cosh();
      String string0 = complex0.ZERO.toString();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex0.I.atan();
      Complex complex7 = complex5.sqrt();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex7.I.pow(complex8);
      List<Complex> list1 = complex0.nthRoot(1);
      double double0 = complex3.getArgument();
      Complex complex10 = complex5.ONE.subtract(complex2);
      double double1 = complex0.getReal();
      Complex complex11 = complex2.log();
      Complex complex12 = complex11.I.tanh();
      Complex complex13 = complex5.sqrt();
      double double2 = complex1.getArgument();
      Complex complex14 = complex5.cosh();
      Complex complex15 = complex2.log();
      List<Complex> list2 = complex2.nthRoot(1);
      Complex complex16 = complex4.multiply(complex2);
      Complex complex17 = complex6.NaN.cosh();
      Complex complex18 = complex4.cos();
      int int0 = complex6.hashCode();
      ComplexField complexField0 = complex18.getField();
      int int1 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt();
      double double0 = complex0.INF.abs();
      Complex complex2 = complex0.multiply(1.1430250008909141E-8);
      double double1 = complex0.abs();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.multiply(complex1);
      double double2 = complex4.getImaginary();
      Complex complex5 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = complex5.NaN.asin();
      Complex complex8 = complex5.NaN.sqrt1z();
      Complex complex9 = complex7.ONE.createComplex(859.018437798, 0.0);
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex10.I.negate();
      List<Complex> list0 = complex3.NaN.nthRoot(1);
      double double0 = complex3.getReal();
      Complex complex12 = complex1.cos();
      Complex complex13 = complex10.ZERO.createComplex(859.018437798, Double.NaN);
      Complex complex14 = complex2.multiply(Double.NaN);
      Complex complex15 = complex14.I.createComplex((-303.175), 0.0);
      int int0 = complex0.hashCode();
      Complex complex16 = complex0.I.sinh();
      Complex complex17 = complex3.ONE.multiply(complex2);
      double double1 = complex17.INF.getArgument();
      Complex complex18 = complex17.INF.subtract(complex11);
      List<Complex> list1 = complex2.nthRoot(270);
      boolean boolean0 = complex4.isInfinite();
      Complex complex19 = complex4.conjugate();
      Complex complex20 = complex9.asin();
      Complex complex21 = complex1.tanh();
      Complex complex22 = complex9.divide(complex1);
      List<Complex> list2 = complex14.nthRoot(1);
      Complex complex23 = complex20.sqrt1z();
      Complex complex24 = complex5.multiply(complex18);
  }
}
