/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 14:40:29 GMT 2020
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-66.589728352);
      doubleArray0[1] = 4.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2106.35);
      doubleArray0[4] = -0.0;
      doubleArray0[5] = 1378.51;
      doubleArray0[6] = (-2624.605752238015);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-2106.35);
      doubleArray1[1] = (Double) (-2106.35);
      doubleArray1[2] = (Double) (-2106.35);
      doubleArray1[3] = (Double) 4.0;
      doubleArray1[4] = (Double) 1378.51;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector1);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct((RealVector) arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1691.7));
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      int int0 = 798;
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(798);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 798
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-66.589728352);
      doubleArray0[1] = 4.0;
      doubleArray0[2] = (-66.589728352);
      doubleArray0[3] = (-2106.35);
      doubleArray0[4] = -0.0;
      doubleArray0[5] = (-3781.7093954592);
      doubleArray0[6] = (-2624.605752238015);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-2106.35);
      doubleArray1[1] = (Double) (-2106.35);
      doubleArray1[2] = (Double) (-2106.35);
      doubleArray1[3] = (Double) 4.0;
      doubleArray1[4] = (Double) (-3781.7093954592);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector1);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct((RealVector) arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1691.7));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      double double0 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-66.589728352);
      doubleArray0[1] = 4.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2106.35);
      doubleArray0[4] = -0.0;
      doubleArray0[6] = (-2624.605752238015);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-2106.35);
      doubleArray1[1] = (Double) (-2106.35);
      doubleArray1[2] = (Double) (-2106.35);
      doubleArray1[3] = (Double) 4.0;
      doubleArray1[4] = (Double) 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1691.7));
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-66.59);
      doubleArray0[1] = (-66.59);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2106.35);
      doubleArray0[4] = -0.0;
      doubleArray0[5] = 1378.51;
      doubleArray0[6] = (-2624.605752238015);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-2106.35);
      doubleArray1[1] = (Double) (-2106.35);
      doubleArray1[2] = (Double) (-2106.35);
      doubleArray1[3] = (Double) (-66.59);
      doubleArray1[4] = (Double) 1378.51;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector1);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct((RealVector) arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1.0));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealVector realVector0 = arrayRealVector0.mapLog1p();
      RealVector realVector1 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-66.59);
      doubleArray0[1] = 4.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2106.35);
      doubleArray0[4] = -0.0;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-2624.605752238015);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-2106.35);
      doubleArray1[1] = (Double) (-2106.35);
      doubleArray1[2] = (Double) (-2106.35);
      doubleArray1[3] = (Double) 4.0;
      doubleArray1[4] = (Double) (-1.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector1);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct((RealVector) arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1691.7));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealVector realVector0 = arrayRealVector0.mapLog1p();
      RealVector realVector1 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-66.59);
      doubleArray0[1] = 4.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2106.35);
      doubleArray0[4] = -0.0;
      doubleArray0[5] = 1378.51;
      doubleArray0[6] = (-2624.605752238015);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-2106.35);
      doubleArray1[1] = (Double) (-2106.35);
      doubleArray1[2] = (Double) (-2106.35);
      doubleArray1[3] = (Double) 4.0;
      doubleArray1[4] = (Double) 1378.51;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector1);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct((RealVector) arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1691.7));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealVector realVector0 = arrayRealVector0.mapLog1p();
      RealVector realVector1 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1631.6330294336904);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 27.0;
      doubleArray0[3] = 1967.649172574;
      doubleArray0[4] = (-2025.363674);
      doubleArray0[5] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 27.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      RealMatrix realMatrix0 = openMapRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 342.0);
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 4.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2106.35);
      doubleArray0[4] = -0.0;
      doubleArray0[5] = 1378.51;
      doubleArray0[6] = (-2624.605752238015);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-2106.35);
      doubleArray1[1] = (Double) (-2106.35);
      doubleArray1[2] = (Double) (-2106.35);
      doubleArray1[3] = (Double) 4.0;
      doubleArray1[4] = (Double) 1378.51;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector1);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct((RealVector) arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1691.7));
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      try { 
        eigenDecompositionImpl0.getEigenvector((-1372));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1372
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-66.589728352);
      doubleArray0[1] = 4.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2106.35);
      doubleArray0[4] = -0.0;
      doubleArray0[5] = 1378.51;
      doubleArray0[6] = (-2624.605752238015);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-2106.35);
      doubleArray1[1] = (Double) (-2106.35);
      doubleArray1[2] = (Double) (-2106.35);
      doubleArray1[3] = (Double) 4.0;
      doubleArray1[4] = (Double) 1378.51;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector1);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct((RealVector) arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1691.7));
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1593.2218806395122;
      doubleArray0[1] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.getRowMatrix(0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-353.466701));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2041.07895);
      doubleArray0[1] = (-208931.29619456);
      doubleArray0[2] = 29343.430730052507;
      doubleArray0[3] = (-170081.82091999456);
      doubleArray0[4] = (-4018.71981);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-208931.29619456);
      doubleArray1[1] = (-2041.07895);
      doubleArray1[2] = (-2041.07895);
      doubleArray1[3] = (-208931.29619456);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2041.07895));
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-66.589728352);
      doubleArray0[1] = 4.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2106.35);
      doubleArray0[4] = -0.0;
      doubleArray0[5] = 1378.51;
      doubleArray0[6] = (-2624.605752238015);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-2106.35);
      doubleArray1[1] = (Double) (-2106.35);
      doubleArray1[2] = (Double) (-2106.35);
      doubleArray1[3] = (Double) 4.0;
      doubleArray1[4] = (Double) 1378.51;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector1);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct((RealVector) arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1691.7));
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      try { 
        eigenDecompositionImpl0.getEigenvector((-1372));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1372
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 824.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      RealVector realVector0 = arrayRealVector0.append(doubleArray0);
      RealVector realVector1 = arrayRealVector0.mapAtan();
      RealVector realVector2 = arrayRealVector0.mapRint();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 824.0);
      RealVector realVector3 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealVector realVector4 = arrayRealVector0.mapAtan();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix5 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix6 = eigenDecompositionImpl0.getV();
      double double0 = arrayRealVector0.getL1Distance(realVector4);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix7 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix8 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix9 = eigenDecompositionImpl0.getV();
      int int0 = 0;
      RealVector realVector5 = eigenDecompositionImpl0.getEigenvector(0);
      double double1 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray3 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix10 = eigenDecompositionImpl0.getV();
      double double2 = arrayRealVector0.getLInfDistance(doubleArray2);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(1482);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1482
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 4.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2106.35);
      doubleArray0[4] = -0.0;
      doubleArray0[5] = 1378.51;
      doubleArray0[6] = (-2624.605752238015);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-2106.35);
      doubleArray1[1] = (Double) (-2106.35);
      doubleArray1[2] = (Double) (-2106.35);
      doubleArray1[3] = (Double) 4.0;
      doubleArray1[4] = (Double) 1378.51;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector1);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct((RealVector) arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1691.7));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealVector realVector0 = arrayRealVector0.mapLog1p();
      RealVector realVector1 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 31;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(31, 31);
      double double0 = 649.54964624232;
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarMultiply(649.54964624232);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 649.54964624232);
      int int1 = (-7);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-7);
      doubleArray0[1] = (double) (-7);
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 824.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      RealVector realVector0 = arrayRealVector0.append(doubleArray0);
      RealVector realVector1 = arrayRealVector0.mapAtan();
      RealVector realVector2 = arrayRealVector0.mapRint();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 824.0);
      int int0 = 0;
      RealVector realVector3 = eigenDecompositionImpl0.getEigenvector(0);
      RealVector realVector4 = arrayRealVector0.mapFloor();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealVector realVector5 = arrayRealVector0.mapAtan();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix5 = eigenDecompositionImpl0.getV();
      double double0 = arrayRealVector0.getL1Distance(realVector5);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix6 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix7 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix8 = eigenDecompositionImpl0.getV();
      int int1 = 0;
      double double1 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix9 = eigenDecompositionImpl0.getV();
      double double2 = arrayRealVector0.getLInfDistance(doubleArray0);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(1482);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1482
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 249.9090143067;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1665.0;
      doubleArray0[3] = (-107.299541);
      doubleArray0[4] = 233.9618084097303;
      doubleArray0[5] = (-1939.0709);
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 249.9090143067);
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3549.9216155123));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      try { 
        array2DRowRealMatrix0.setColumn(42, doubleArray0);
      } catch(RuntimeException e) {
         //
         // column index 42 out of allowed range [0, 0]
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 800.0);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1631.6330294336904);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 27.0;
      doubleArray0[3] = 1967.649172574;
      doubleArray0[4] = (-2025.363674);
      doubleArray0[5] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2122.909172195899));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      RealMatrix realMatrix0 = openMapRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 342.0);
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1848.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1579.72113);
      doubleArray0[3] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.copy();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1579.72113));
      } catch(RuntimeException e) {
         //
         // a 4x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2606.077;
      doubleArray1[1] = (-475.561664525);
      doubleArray1[2] = (-204.42377104465837);
      doubleArray1[3] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, true);
      RealVector realVector0 = array2DRowRealMatrix0.getColumnVector(0);
      Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.subtract((RealMatrix) array2DRowRealMatrix1);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-783.0037789070825));
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x4 matrix
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 824.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      RealVector realVector0 = arrayRealVector0.append(doubleArray0);
      RealVector realVector1 = arrayRealVector0.mapAtan();
      RealVector realVector2 = arrayRealVector0.mapRint();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 824.0);
      RealVector realVector3 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealVector realVector4 = arrayRealVector0.mapAtan();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix5 = eigenDecompositionImpl0.getV();
      double double0 = arrayRealVector0.getL1Distance(realVector4);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix6 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix7 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix8 = eigenDecompositionImpl0.getV();
      int int0 = 0;
      RealVector realVector5 = eigenDecompositionImpl0.getEigenvector(0);
      double double1 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray3 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix9 = eigenDecompositionImpl0.getV();
      double double2 = arrayRealVector0.getLInfDistance(doubleArray2);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(1482);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1482
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4319.017095495);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12);
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 16;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(16, 16);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarMultiply(649.54964624232);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 649.54964624232);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      doubleArray0[2] = 649.54964624232;
      Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray0);
      try { 
        array2DRowRealMatrix0.setRowMatrix(0, array2DRowRealMatrix1);
      } catch(RuntimeException e) {
         //
         // dimensions mismatch: got 3x1 but expected 1x16
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1668.94638;
      doubleArray0[1] = 0.333;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, doubleArray0, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 18.930766732131;
      doubleArray0[2] = 9.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 1307.772625730071;
      doubleArray0[6] = (-2370.9634384);
      doubleArray0[7] = 2.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 2212.2280926);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1105.0;
      doubleArray0[1] = 829.269972246326;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1105.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-2826.12707163654));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-66.589728352);
      doubleArray0[1] = (-66.589728352);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2106.35);
      doubleArray0[4] = -0.0;
      doubleArray0[5] = 1378.51;
      doubleArray0[2] = (-2624.605752238015);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-2106.35);
      doubleArray1[1] = doubleArray1[0];
      doubleArray1[2] = (Double) (-2106.35);
      doubleArray1[3] = (Double) (-66.589728352);
      doubleArray1[4] = (Double) 1378.51;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector1);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct((RealVector) arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1691.7));
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-66.589728352);
      doubleArray0[1] = 4.0;
      doubleArray0[2] = (-66.589728352);
      doubleArray0[3] = (-2106.35);
      doubleArray0[4] = -0.0;
      doubleArray0[5] = 1378.51;
      doubleArray0[6] = (-2624.605752238015);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector1);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct((RealVector) arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1691.7));
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1539.3972302743364);
      doubleArray0[1] = 9.213181328959763E-10;
      doubleArray0[2] = 913.987078636;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-659.849491);
      doubleArray0[5] = 1.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-458.6847));
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12);
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = (-4497.356959193025);
      int int0 = (-595);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4497.356959193025);
      doubleArray0[1] = (-4497.356959193025);
      doubleArray0[2] = (double) (-1231);
      doubleArray0[3] = (double) (-595);
      doubleArray0[4] = (-4497.356959193025);
      doubleArray0[5] = (-4497.356959193025);
      doubleArray0[6] = (double) (-595);
      doubleArray0[7] = 4.727238600565897E-10;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 4.727238600565897E-10);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.2250738585072014E-308;
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 824.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      RealVector realVector0 = arrayRealVector0.append(doubleArray0);
      RealVector realVector1 = arrayRealVector0.mapAtan();
      RealVector realVector2 = arrayRealVector0.mapRint();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 824.0);
      int int0 = 0;
      RealVector realVector3 = eigenDecompositionImpl0.getEigenvector(0);
      RealVector realVector4 = arrayRealVector0.mapFloor();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealVector realVector5 = arrayRealVector0.mapAtan();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix5 = eigenDecompositionImpl0.getV();
      double double0 = arrayRealVector0.getL1Distance(realVector5);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix6 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix7 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix8 = eigenDecompositionImpl0.getV();
      int int1 = 0;
      double double1 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix9 = eigenDecompositionImpl0.getV();
      double double2 = arrayRealVector0.getLInfDistance(doubleArray0);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(1482);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1482
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-66.589728352);
      doubleArray0[1] = 4.0;
      doubleArray0[2] = (-66.589728352);
      doubleArray0[3] = (-2106.35);
      doubleArray0[4] = -0.0;
      doubleArray0[5] = (-3781.7093954592);
      doubleArray0[6] = (-2624.605752238015);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-2106.35);
      doubleArray1[1] = (Double) (-2106.35);
      doubleArray1[2] = (Double) (-2106.35);
      doubleArray1[3] = (Double) 4.0;
      doubleArray1[4] = (Double) (-3781.7093954592);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector1);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct((RealVector) arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1691.7));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      double double0 = eigenDecompositionImpl0.getDeterminant();
  }
}
