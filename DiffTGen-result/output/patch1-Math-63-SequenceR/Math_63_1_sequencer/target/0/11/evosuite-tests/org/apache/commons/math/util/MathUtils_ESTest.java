/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 19:37:04 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.stream.DoubleStream;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(93, 93);
      short short0 = MathUtils.indicator((short)2387);
      int int1 = MathUtils.pow((int) (short)1, (long) 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 93;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 93;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 4586.22);
      int int2 = MathUtils.addAndCheck(93, 66);
      int int3 = MathUtils.pow(93, 34);
      int int4 = MathUtils.addAndCheck((-1653), (int) (short)2387);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) (-1653);
      doubleArray2[1] = (double) (short)2387;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 34;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray2, doubleArray1);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      int int5 = MathUtils.gcd(2069, 78);
      double double1 = MathUtils.distanceInf(doubleArray2, doubleArray2);
      int[] intArray0 = new int[0];
      double double2 = MathUtils.distance(intArray0, intArray0);
      byte byte0 = MathUtils.sign((byte) (-66));
      boolean boolean1 = MathUtils.equalsIncludingNaN((-2184.6894428277405), (double) (short)2387);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-243.46443098721213);
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 6.283185307179586;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-243.46443098721213);
      doubleArray1[1] = 6.283185307179586;
      doubleArray1[2] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
      double double1 = MathUtils.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      short short0 = MathUtils.sign((short)11);
      long long0 = MathUtils.binomialCoefficient(857, (-1840));
      double double0 = MathUtils.sinh((-698.476));
      long long1 = MathUtils.lcm((long) (short)11, 0L);
      double double1 = MathUtils.round((double) 0L, 1030);
      int int0 = MathUtils.pow(0, 239);
      float float0 = MathUtils.round((float) (short)11, 0);
      double double2 = MathUtils.cosh(64.436063);
      float float1 = MathUtils.round((float) (short)11, 1030);
      // Undeclared exception!
      try { 
        MathUtils.lcm(9193070505571053912L, (long) 857);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      int int1 = MathUtils.pow(0, 0);
      long long0 = MathUtils.subAndCheck((long) 1, (-1420L));
      int int2 = MathUtils.indicator(1879048192);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = MathUtils.pow(1734L, 326);
      int int0 = MathUtils.indicator(139);
      int[] intArray0 = new int[4];
      intArray0[0] = 139;
      intArray0[1] = 139;
      intArray0[2] = 326;
      intArray0[3] = 139;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = MathUtils.sinh(610.14793753);
      int int0 = 344;
      int int1 = 97;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(344, 97);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2174.3585500349695);
      doubleArray0[3] = (-2433.77);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2174.3585500349695);
      doubleArray1[1] = (-2174.3585500349695);
      doubleArray1[2] = (-7.44321345601866E-11);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[5] = 1.0;
      doubleArray0[7] = 1.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((double) 0, (double) 0, 1.0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 419;
      int int1 = MathUtils.pow(419, 419);
      // Undeclared exception!
      try { 
        MathUtils.factorial(419);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 352;
      double double0 = MathUtils.binomialCoefficientDouble(352, 352);
      double double1 = MathUtils.normalizeAngle(352, (-2729.84213));
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-62);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray1 = bigInteger0.toByteArray();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
      // Undeclared exception!
      try { 
        bigInteger1.flipBit((byte) (-125));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      int[] intArray1 = new int[4];
      intArray1[0] = (int) (short)0;
      intArray1[1] = Integer.MIN_VALUE;
      intArray1[2] = (int) (short)0;
      intArray1[3] = (int) (short)0;
      double double0 = MathUtils.distance(intArray0, intArray1);
      float float0 = MathUtils.indicator((-304.2609F));
      int int0 = MathUtils.distance1(intArray0, intArray0);
      float float1 = MathUtils.indicator(0.0F);
      double double1 = MathUtils.cosh((-709.83442));
      try { 
        MathUtils.pow(0, (-2644281811660520851L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,644,281,811,660,520,851)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(82, 82);
      long long1 = MathUtils.sign(6227020800L);
      float float0 = MathUtils.indicator((float) 6227020800L);
      double double0 = 1184.7;
      boolean boolean0 = MathUtils.equals(0.0, 1184.7);
      int int0 = (-3281);
      double double1 = MathUtils.binomialCoefficientDouble(82, (-3281));
      int int1 = (-3649);
      float float1 = MathUtils.round((float) 1L, (-3649));
      double double2 = MathUtils.round((double) 1L, (-3281));
      int int2 = MathUtils.addAndCheck(82, (-3281));
      double double3 = MathUtils.round(0.0, 82, 0);
      try { 
        MathUtils.pow((-3281), (long) (-3199));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,281^-3,199)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = 53.7792611551;
      int int0 = 1488;
      double double1 = MathUtils.scalb(53.7792611551, 1488);
      int int1 = 31;
      int int2 = MathUtils.pow(31, (long) 31);
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-2010103841), (-2010103841));
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -2,010,103,841 + -2,010,103,841
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.addAndCheck(0L, 0L);
      double[] doubleArray0 = null;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-3554);
      intArray0[1] = 2146831905;
      intArray0[2] = 230;
      intArray0[3] = 120;
      intArray0[4] = 1382;
      intArray0[5] = (-2146091888);
      intArray0[6] = 2;
      int[] intArray1 = new int[3];
      intArray1[0] = 66;
      intArray1[1] = (-3554);
      intArray1[2] = 230;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short short0 = (short)9;
      short short1 = MathUtils.sign((short)9);
      float float0 = MathUtils.indicator((float) (short)9);
      double double0 = MathUtils.binomialCoefficientDouble((short)9, (short)1);
      int int0 = (-3543);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-3543));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,543
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.030589580535888672;
      int int0 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      MathUtils.factorialLog(1067406079);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2355);
      intArray0[1] = 210;
      intArray0[2] = 330;
      intArray0[3] = 15;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.addAndCheck((long) 0, (long) 15);
      double double0 = MathUtils.cosh(15L);
      float float0 = MathUtils.round((float) 210, 70);
      double double1 = MathUtils.binomialCoefficientDouble(330, 19);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 15;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) 15;
      doubleArray0[3] = (double) 210;
      doubleArray0[4] = 1634508.6862362083;
      doubleArray0[5] = (double) 70;
      doubleArray0[6] = (double) (-2355);
      doubleArray0[7] = 3.4458746115526415E30;
      doubleArray0[8] = (double) 15;
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 18;
      int int1 = MathUtils.indicator(18);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 18;
      doubleArray0[2] = (double) 1;
      int int2 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.binomialCoefficient(100562015, 100562015);
      float float0 = MathUtils.sign(0.0F);
      int int3 = (-3259);
      double double0 = MathUtils.binomialCoefficientLog(1, (-3259));
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int4 = 140;
      // Undeclared exception!
      try { 
        MathUtils.lcm(140, 100562015);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = MathUtils.indicator((-640L));
      int int0 = (-679);
      int int1 = 441;
      int int2 = MathUtils.addAndCheck((-679), 441);
      int int3 = MathUtils.subAndCheck((-679), (-679));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int4 = 1270;
      int int5 = MathUtils.mulAndCheck(1270, 0);
      boolean boolean0 = MathUtils.equals((double) (-238), (double) (-1L), (double) (-1L));
      long long1 = MathUtils.gcd(0L, 6722166367014452318L);
      boolean boolean1 = MathUtils.equals((-4251.379865475069), (-1349.2476));
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-679), 4194304);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = MathUtils.pow(1159L, 2277);
      float float0 = MathUtils.indicator(15.9F);
      float float1 = MathUtils.indicator(1.0F);
      double double0 = MathUtils.binomialCoefficientDouble(2277, 1953);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = MathUtils.pow(1166, 113236205062349959L);
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      short short0 = MathUtils.sign((short)0);
      double double0 = MathUtils.binomialCoefficientLog(78, (short)0);
      float float0 = MathUtils.indicator((float) 1166);
      int int1 = MathUtils.pow(78, (long) (short)0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 78);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 78
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = 5040L;
      long long1 = 0L;
      long long2 = MathUtils.gcd(5040L, 0L);
      BigInteger bigInteger0 = null;
      int int0 = 64;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 64);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      byte byte0 = (byte) (-128);
      byte byte1 = MathUtils.indicator((byte) (-128));
      int int0 = MathUtils.hash((double[]) null);
      int int1 = (-912);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-912));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -912
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.7168146928204135);
      doubleArray0[1] = (-3916.0713184647334);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2431.1);
      int int0 = 0;
      double double0 = MathUtils.round((-3916.0713184647334), 0, 0);
      long long0 = MathUtils.pow(40320L, 0L);
      int int1 = MathUtils.indicator(0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      try { 
        MathUtils.pow((-7278142539171889152L), (-748));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-7,278,142,539,171,889,152^-748)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int2 = MathUtils.hash(doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      double double1 = bigInteger0.doubleValue();
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, (double) 0, (-0.2499999701976776));
      byte byte0 = MathUtils.indicator((byte)12);
      float float0 = MathUtils.indicator((float) 0);
      long long0 = MathUtils.pow((long) 0, (long) (byte)12);
      double double0 = MathUtils.indicator(1677.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-562.1623), 2412.54165658254);
      long long1 = MathUtils.sign(4095L);
      int int1 = MathUtils.gcd((int) (byte)12, 0);
      long long2 = MathUtils.indicator((-2487L));
      double double1 = MathUtils.normalizeAngle(12, 0.0);
      boolean boolean2 = MathUtils.equals((double) 1.0F, 0.0, 798);
      int int2 = MathUtils.pow(12, 4095L);
      boolean boolean3 = MathUtils.equals(1677.0, (double) (byte)12, 1677.0);
      long long3 = MathUtils.indicator(20922789888000L);
      long long4 = MathUtils.addAndCheck(0L, (-1729L));
      int int3 = MathUtils.indicator(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = (-571);
      int int1 = (-1021);
      int int2 = MathUtils.addAndCheck((-571), (-1021));
      double double0 = MathUtils.normalizeAngle((-1592), (-173.88207));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-571));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 0L;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(3564.6636456851325, 0.0, 0.0);
      double double0 = MathUtils.log(0.0, 0.0);
      long long0 = MathUtils.sign((-2565L));
      boolean boolean1 = MathUtils.equalsIncludingNaN(Double.NaN, 10.0);
      int int0 = MathUtils.indicator((-4646));
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int1 = (-1238);
      int int2 = (-1576);
      int int3 = MathUtils.lcm((-1238), (-1576));
      double double2 = MathUtils.sign(0.0);
      int int4 = 3685;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1069), 3685);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,069, k = 3,685
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.round(15.0, 0);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 0.11113807559013367, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 1672);
      long long0 = MathUtils.indicator((-1171L));
      double double0 = MathUtils.indicator(2329.209);
      int int1 = MathUtils.addAndCheck((-1889), (-1672));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-855.48768963345);
      doubleArray0[1] = (double) (-1889);
      doubleArray0[2] = (double) (-1889);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) 1672;
      doubleArray0[6] = (double) (-3561);
      doubleArray0[7] = (double) (-1672);
      int int2 = MathUtils.hash(doubleArray0);
      long long1 = MathUtils.mulAndCheck((-2517L), (-2517L));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-1,889 <= -1,889)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = MathUtils.indicator(1528);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1528;
      doubleArray0[5] = (double) 1;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = (-863);
      double double1 = MathUtils.binomialCoefficientLog(1528, (-863));
      int[] intArray0 = new int[7];
      intArray0[0] = (-863);
      intArray0[1] = 1528;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 2120;
      intArray0[5] = 1;
      intArray0[6] = (-863);
      double double2 = MathUtils.distance(intArray0, intArray0);
      int int2 = MathUtils.lcm(0, 0);
      double double3 = MathUtils.log(0.0, 0.0);
      double double4 = MathUtils.cosh(0.0);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
      double double0 = MathUtils.scalb(0, 0);
      int int1 = MathUtils.indicator((-4213));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-1001.49066));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2239.8680747203), (-2239.8680747203));
      float float0 = MathUtils.round(Float.NaN, (-1270));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (-2239.8680747203);
      doubleArray0[2] = (double) Float.NaN;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 292;
      intArray0[1] = (-1270);
      intArray0[2] = (-1270);
      intArray0[3] = (-1270);
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.log(3.834E-20, Float.NaN);
      byte byte0 = MathUtils.indicator((byte)61);
      float float1 = MathUtils.sign((float) 292);
      float float2 = MathUtils.sign(Float.NaN);
      float float3 = MathUtils.indicator((float) (-1270));
      short short0 = MathUtils.indicator((short) (byte)1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-322);
      intArray0[1] = 83;
      intArray0[2] = 8;
      intArray0[3] = 1547;
      intArray0[4] = (-1024);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.log((-1024), 8);
      long long0 = MathUtils.mulAndCheck((long) 83, 0L);
      long long1 = MathUtils.pow((long) 8, (long) 1547);
      float float0 = MathUtils.sign((float) 8);
      double double1 = MathUtils.log(3675.10210670917, 9.313225746154785E-10);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float float0 = MathUtils.round(Float.NaN, 4401);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) Float.NaN, (double) Float.NaN, 248);
      long long0 = MathUtils.sign((long) 4401);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 4401;
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean1 = MathUtils.equals(0.0, Double.NaN, 4401);
      double double1 = MathUtils.safeNorm(doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 248;
      intArray0[1] = 248;
      intArray0[2] = 4401;
      intArray0[3] = 248;
      intArray0[4] = 248;
      intArray0[5] = 4401;
      int[] intArray1 = new int[7];
      intArray1[0] = 248;
      intArray1[1] = 248;
      intArray1[2] = 248;
      intArray1[3] = 4401;
      intArray1[4] = 7;
      intArray1[5] = 248;
      intArray1[6] = 4401;
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.5;
      doubleArray0[7] = 0.0;
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = MathUtils.log(2394.9318772, 2394.9318772);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2394.9318772;
      MathUtils.checkOrder(doubleArray0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = (-448);
      double double2 = MathUtils.binomialCoefficientDouble(3, (-448));
      int int1 = 876;
      // Undeclared exception!
      try { 
        MathUtils.round((-1391.4857119), 876, (-448));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = MathUtils.lcm(30, 30);
      int int1 = MathUtils.hash(0.041666663879186654);
      double double0 = MathUtils.factorialDouble(30);
      int int2 = 0;
      int int3 = MathUtils.gcd(46582978, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 46582978;
      doubleArray0[2] = (double) 46582978;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (46,582,978 >= 46,582,978)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2841.39, 10.0);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = MathUtils.gcd(4311, 0);
      long long0 = MathUtils.sign((long) 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(317.811, 0.0, 4072.55289);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4311;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.subAndCheck(4311, (-1700));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = (-3158);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.5, 0.0, (-3158));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.1102230246251565E-16;
      doubleArray0[1] = 3198.179161052099;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 1590.7;
      doubleArray0[4] = (-3650.063819);
      doubleArray0[5] = 0.99;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1209.59);
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = MathUtils.gcd(2138L, (-1274L));
      int int0 = (-1609);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1609));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,609
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = MathUtils.compareTo(3.834E-20, (-284.14537813), 3.834E-20);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-284.14537813);
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = 2670.3836209305;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = MathUtils.pow(2047L, 0);
      int int0 = 0;
      int int1 = MathUtils.sign(0);
      int int2 = MathUtils.mulAndCheck(62, 155);
      boolean boolean0 = MathUtils.equals((double) 9610, 0.0, 9610);
      double double0 = 2482.3;
      double double1 = 0.0;
      int int3 = MathUtils.compareTo(2482.3, 0, 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 9610;
      doubleArray0[2] = (double) 9610;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 9,610)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(2.2250738585072014E-308, 2.2250738585072014E-308);
      double double1 = MathUtils.factorialDouble(0);
      short short0 = MathUtils.indicator((short) (-1458));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-1458);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.1102230246251565E-16;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (1 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2135);
      int int0 = 627;
      intArray0[1] = 627;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      int int1 = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.sinh(2276.83);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        MathUtils.pow(bigInteger0, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(4194304, 261);
      long long0 = MathUtils.addAndCheck(5040L, (long) 4194565);
      double double0 = MathUtils.factorialDouble(5);
      short short0 = MathUtils.sign((short)134);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = MathUtils.indicator((-282L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.sign((short)751);
      boolean boolean0 = MathUtils.equalsIncludingNaN(885.09593509, 1924.8602322220195);
      short short1 = MathUtils.indicator((short)751);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.0, (double) (short)1, 1924.8602322220195);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      int int0 = MathUtils.mulAndCheck(1647, 1553);
      byte byte0 = MathUtils.indicator((byte)117);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = 1647;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = 2557791;
      intArray0[5] = 0;
      intArray0[6] = 1553;
      intArray0[7] = (int) (byte)1;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.mulAndCheck(425L, 601L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 425L, (-3874.115081165));
      float float1 = MathUtils.indicator((-1313.2F));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2557791;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-1313.2F);
      doubleArray0[4] = (-3874.115081165);
      doubleArray0[5] = (double) (-1313.2F);
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(67, 67);
      int int1 = 0;
      int int2 = MathUtils.pow(67, 0);
      long long0 = MathUtils.subAndCheck((long) 1, (-1420L));
      int int3 = 1;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(1, 307);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 307
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = 1.9868161777724352E-8;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1.9868161777724352E-8, 1.9868161777724352E-8, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      byte byte0 = MathUtils.sign((byte)65);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (byte)65, 80, 139);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = (-2612);
      try { 
        MathUtils.pow((-2612), (long) (-2612));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,612^-2,612)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = (-1542);
      try { 
        MathUtils.pow((-1542), (long) (-1542));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,542^-1,542)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2760.12;
      doubleArray0[3] = (-628.64);
      doubleArray0[4] = 1825.0779008221882;
      doubleArray0[5] = (-320.5);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-844L), (-844L));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-844L);
      doubleArray0[1] = (double) 712336L;
      doubleArray0[2] = 790.3201662;
      doubleArray0[3] = (double) (-844L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (712,336 >= 790.32)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-451.15216207177);
      doubleArray0[2] = 877.0;
      doubleArray0[3] = (-2073.2191890086);
      doubleArray0[4] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (877 >= -2,073.219)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0);
      double double0 = MathUtils.round((double) 0.0F, 0);
      double double1 = MathUtils.indicator((double) 0.0F);
      int int0 = MathUtils.sign((-1844));
      long long0 = MathUtils.binomialCoefficient(2433, 0);
      long long1 = MathUtils.binomialCoefficient(3184, (-1));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 412.2916476192;
      doubleArray0[1] = 0.0;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long2 = MathUtils.gcd((long) 0, 17L);
      long long3 = MathUtils.gcd((long) 0, (-1573L));
      int int1 = MathUtils.gcd((-724), 3);
      long long4 = MathUtils.sign(187L);
      long long5 = MathUtils.gcd((-2308L), (-1573L));
      double double3 = MathUtils.round(412.2916476192, 4516, 0);
      long long6 = MathUtils.pow(0L, 3628800L);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = MathUtils.lcm(1660L, 2373L);
      double double0 = MathUtils.cosh((-0.25));
      long long1 = MathUtils.addAndCheck(2373L, 3952090531849364496L);
      int int0 = MathUtils.hash((double) 2373L);
      double double1 = MathUtils.sinh(1282.87908702662);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)43;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 6);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(3130, (-1840));
      short short0 = (short)11;
      short short1 = MathUtils.sign((short)11);
      int int0 = 857;
      long long0 = MathUtils.binomialCoefficient(857, (-1840));
      double double1 = MathUtils.sinh((-698.476));
      long long1 = MathUtils.lcm((long) (short)11, 0L);
      int int1 = 1030;
      double double2 = MathUtils.round((double) 0L, 1030);
      int int2 = MathUtils.pow(0, 239);
      float float0 = MathUtils.round((float) (short)11, 0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (short)11, 1030, 3130);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 3,130, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-372L), (-372L));
      boolean boolean0 = MathUtils.equals((double) (-372L), (double) (-372L));
      int int0 = MathUtils.pow(0, (long) 0);
      long long1 = MathUtils.binomialCoefficient(0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 138384L;
      doubleArray0[5] = (double) (-372L);
      doubleArray0[6] = (double) 138384L;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 1L;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long2 = MathUtils.gcd(2327L, (-372L));
      long long3 = MathUtils.subAndCheck((-372L), (-372L));
      int int1 = MathUtils.lcm(98, 98);
      float float0 = MathUtils.indicator((float) 138384L);
      int int2 = MathUtils.gcd(0, 98);
      long long4 = MathUtils.subAndCheck(2327L, 362L);
      long long5 = MathUtils.pow(2633L, 98);
      double double1 = MathUtils.round((double) 138384L, 63, 2);
      int int3 = MathUtils.hash(138384.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
      float float0 = MathUtils.round(Float.NaN, 575, 0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 575;
      intArray0[4] = 0;
      intArray0[5] = 575;
      intArray0[6] = 575;
      intArray0[7] = 0;
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 12;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-2263L), (-2263L));
      BigInteger bigInteger0 = MathUtils.pow((BigInteger) null, 0L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 5121169L;
      doubleArray0[1] = 969.5531050836994;
      doubleArray0[2] = (double) 5121169L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (5,121,169 >= 969.553)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = MathUtils.pow((-3177), 1948);
      double double0 = MathUtils.sign(0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1948;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      boolean boolean0 = MathUtils.equals(1192.77256072, (-2007.1286673277189));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 257;
      int int1 = MathUtils.sign(257);
      int int2 = (-1773);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1773), (-1773));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,773
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-2319.2738116389);
      doubleArray0[2] = (-633.03597);
      doubleArray0[3] = (-2722.7212424488);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.1102230246251565E-16;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-914.0078092314401));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = MathUtils.sign(67);
      boolean boolean0 = MathUtils.equals(1255.883349937, 1255.883349937);
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 7, 7);
      } catch(ArithmeticException e) {
         //
         // Inexact result from rounding
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-613);
      intArray0[1] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.cosh(0.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("ROUND_HALF_EVEN");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.ROUND_HALF_EVEN
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2.0, (-0.16624879837036133));
      long long0 = MathUtils.pow((-2433L), 93);
      boolean boolean1 = MathUtils.equals((-1255.3), (-1255.3), 93);
      long long1 = MathUtils.lcm(0L, 0L);
      boolean boolean2 = MathUtils.equalsIncludingNaN((-340.84653057), 2.0);
      try { 
        MathUtils.pow(0L, (-1780));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,780)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      float float0 = MathUtils.sign((-552.0F));
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      double double2 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck(3203L, (long) 0);
      long long1 = MathUtils.pow(1113L, (long) 0);
      byte byte0 = MathUtils.sign((byte)0);
      int int0 = MathUtils.mulAndCheck(30, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.sign((-1392.79033));
      long long0 = MathUtils.subAndCheck((-3183605296591799669L), (-3183605296591799669L));
      long long1 = MathUtils.sign((-3183605296591799669L));
      int int0 = MathUtils.mulAndCheck((-817), 903);
      float float0 = MathUtils.indicator((-239.9F));
      double double1 = MathUtils.round((double) 903, (-737751));
      byte byte0 = MathUtils.sign((byte) (-72));
      short short0 = MathUtils.sign((short) (-2371));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-817);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1 >= -817)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)58);
      float float0 = MathUtils.sign((-1.0F));
      float float1 = MathUtils.indicator((-1.0F));
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = bigInteger0.intValueExact();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger3 = bigInteger0.shiftLeft(0);
      BigInteger bigInteger4 = bigInteger0.shiftRight((byte)58);
      boolean boolean0 = bigInteger0.isProbablePrime(6);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)58;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator((long) (byte)1);
      int int1 = MathUtils.compareTo(58.0, 1.1102230246251565E-16, (-1.0F));
      float float2 = MathUtils.round(0.0F, (int) (byte)1, (int) (byte)1);
      int int2 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      int int0 = MathUtils.sign(0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 1409.52495499;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      byte byte0 = MathUtils.sign((byte) (-101));
      long long1 = MathUtils.pow(0L, 922);
      int int1 = MathUtils.subAndCheck((int) (byte) (-1), 0);
      short short0 = MathUtils.indicator((short) (byte) (-101));
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      byte byte1 = MathUtils.sign((byte)76);
      boolean boolean0 = MathUtils.equals((double) (byte)76, (-129.14413139148755));
      boolean boolean1 = MathUtils.equals(0.0, (double) (byte)1, 3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1190);
      intArray0[1] = (-1547);
      intArray0[2] = 17;
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 17, (-1223.923222041042), (-1223.923222041042));
      long long0 = MathUtils.subAndCheck(4577762542105553359L, (long) (-1547));
      double double1 = MathUtils.round((-1223.923222041042), (-1738));
      double double2 = MathUtils.scalb((-1223.923222041042), (-1547));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-7.44321345601866E-11);
      doubleArray0[1] = (double) (-1547);
      doubleArray0[2] = (-8.012757559630262E153);
      doubleArray0[3] = (double) 17;
      doubleArray0[4] = (double) (-1190);
      doubleArray0[5] = (double) 17;
      doubleArray0[6] = (double) 17;
      doubleArray0[7] = (double) (-1547);
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-8.012757559630262E153);
      doubleArray1[1] = (double) 17;
      doubleArray1[2] = (double) (-1547);
      doubleArray1[3] = (double) (-1190);
      doubleArray1[4] = (double) 4577762542105553359L;
      doubleArray1[5] = (-7.44321345601866E-11);
      doubleArray1[6] = (-7.44321345601866E-11);
      doubleArray1[7] = 0.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 17;
      long long0 = MathUtils.pow(1866L, 17);
      int int1 = 4054;
      double double0 = MathUtils.factorialLog(4054);
      double double1 = MathUtils.scalb(4724987046463668224L, 4054);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-651));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -651
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = 3697.0465039293;
      doubleArray0[3] = 1.1921056801463227E-8;
      doubleArray0[4] = (-2529.260752269223);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2529.260752269223);
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = MathUtils.hash(10.0);
      int int1 = MathUtils.hash((double) 1076101120);
      short short0 = MathUtils.sign((short)3833);
      int int2 = MathUtils.lcm(0, (-622));
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(1569, mockRandom0);
      float float0 = bigInteger0.floatValue();
      boolean boolean0 = bigInteger0.equals(mockRandom0);
      float float1 = mockRandom0.nextFloat();
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) 1569, (-2235L));
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.3333333333332802;
      doubleArray0[2] = 587.445531165882;
      doubleArray0[3] = 1137.015;
      doubleArray0[4] = (-110.283599301531);
      doubleArray0[5] = (-3065.397360237);
      doubleArray0[6] = (-544.16942022296);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-544.16942022296);
      doubleArray1[1] = (-544.16942022296);
      doubleArray1[2] = (-3065.397360237);
      doubleArray1[3] = 0.3333333333332802;
      doubleArray1[4] = (-3065.397360237);
      doubleArray1[5] = 0.3333333333332802;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = MathUtils.scalb((-1185.6985595), (-906));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.factorialLog(31);
      double double1 = MathUtils.round((double) 31, 31);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = (-3310);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-3310));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,310
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      int int1 = MathUtils.pow(0, (long) 0);
      boolean boolean0 = MathUtils.equals((-1636.89765060896), 1445.817);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1636.89765060896);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-1636.89765060896);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1445.817;
      doubleArray0[5] = (double) 1;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-1636.89765060896);
      doubleArray1[2] = (-1636.89765060896);
      doubleArray1[3] = (-1636.89765060896);
      doubleArray1[4] = (-1636.89765060896);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      int int0 = MathUtils.lcm(13, 0);
      int int1 = MathUtils.gcd(0, 0);
      long long0 = MathUtils.sign(1119L);
      double double0 = MathUtils.indicator(194.4);
      double double1 = MathUtils.sinh(0);
      int int2 = 165;
      double double2 = MathUtils.binomialCoefficientLog(165, (-574));
      long long1 = MathUtils.gcd((long) 0, (-1911L));
      float float0 = MathUtils.sign((float) 1L);
      short short0 = MathUtils.indicator((short)61);
      long long2 = (-1316L);
      long long3 = MathUtils.addAndCheck((-1316L), (-1316L));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 266);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 266
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 207;
      int int1 = (-68);
      double double0 = MathUtils.binomialCoefficientLog(207, (-68));
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = MathUtils.indicator((-811.574385612542));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1.0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.sign(3368);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = 0;
      int int2 = (-1176);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1, 0, (-1176));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,176, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.gcd(0, 0);
      int int1 = MathUtils.pow(148, 2312);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 148;
      doubleArray0[2] = (double) 148;
      doubleArray0[3] = (double) 2312;
      doubleArray0[4] = (-0.0013888888689039883);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 175;
      int int1 = (-3919);
      try { 
        MathUtils.pow(175, (-3919));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (175^-3,919)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      short short0 = MathUtils.indicator((short) (-2002));
      double double1 = MathUtils.log((-1.0E-6), 2368.0443178567784);
      int int0 = 587;
      boolean boolean0 = MathUtils.equals((-2150.99541826), 2368.0443178567784, 587);
      int int1 = MathUtils.hash((double) (short) (-2002));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1164.2134), (-1164.2134));
      int[] intArray0 = new int[2];
      intArray0[0] = 210;
      intArray0[1] = 5;
      double double1 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom(0L);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-20);
      mockRandom0.nextBytes(byteArray0);
      double double2 = mockRandom0.nextGaussian();
      DoubleStream doubleStream0 = mockRandom0.doubles((long) 210);
      BigInteger bigInteger1 = BigInteger.probablePrime(210, mockRandom0);
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger2.not();
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger4 = bigInteger0.subtract(bigInteger2);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 5);
      int int0 = MathUtils.indicator(5);
      int[] intArray1 = new int[8];
      intArray1[0] = 210;
      intArray1[1] = 1;
      intArray1[2] = 5;
      intArray1[3] = 1;
      intArray1[4] = 5;
      intArray1[5] = 1;
      intArray1[6] = 5;
      intArray1[7] = 1;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray1, intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2618);
      int int0 = 147;
      intArray0[1] = 147;
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((double) (-2618), (double) (-2618));
      int int1 = 3;
      int int2 = MathUtils.addAndCheck((-3228), 3);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 1916.52);
      BigInteger bigInteger0 = BigInteger.TEN;
      Object object0 = new Object();
      int int3 = bigInteger0.intValue();
      boolean boolean2 = bigInteger0.equals(object0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger0);
      long long0 = bigInteger2.longValueExact();
      BigInteger bigInteger3 = bigInteger1.max(bigInteger2);
      BigInteger bigInteger4 = bigInteger1.mod(bigInteger0);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger1, bigInteger0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-727));
      byte byte0 = MathUtils.sign((byte)0);
      long long0 = MathUtils.mulAndCheck((long) (short) (-1), (long) (short) (-1));
      int int0 = 5;
      int int1 = 1777;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(5, 1777);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 5, k = 1,777
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      int int0 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.sign(3952090531849364496L);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 1149;
      // Undeclared exception!
      try { 
        MathUtils.factorial(1149);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 6.283185307179586;
      doubleArray1[2] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = MathUtils.indicator(2293L);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-4748));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,748
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.shiftLeft(4);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      int int1 = MathUtils.mulAndCheck(0, (-4643));
      float float0 = MathUtils.round((-2529.617F), 0, 0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-4019);
      intArray0[1] = 293;
      intArray0[2] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, 3294198.0, 3294198.0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = (-1831);
      int int1 = 921;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-1831), 921);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 921, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = MathUtils.hash((-1219.0));
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.subAndCheck((-1661), 8);
      boolean boolean0 = MathUtils.equals(2.2250738585072014E-308, (double) (-1064104960), (double) 8);
      int int2 = MathUtils.gcd(8, 0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 8, 0, 20);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 20, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 1599;
      int int1 = MathUtils.gcd(1599, 0);
      double double0 = MathUtils.sinh(1599);
      double double1 = MathUtils.sign((double) 1599);
      int int2 = (-434);
      int int3 = MathUtils.addAndCheck((-434), 3652);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (-1924.2795138573));
      long long0 = MathUtils.lcm(301L, 40320L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1733760L;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 1599;
      doubleArray0[3] = (double) 1599;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = (double) 1599;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (1 < 1,599)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double double0 = MathUtils.normalizeAngle(2.140632, (-202.2700887854963));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 17;
      double double0 = MathUtils.factorialLog(17);
      double double1 = MathUtils.round((double) 17, (-175));
      long long0 = 505L;
      long long1 = MathUtils.mulAndCheck(505L, (long) 17);
      // Undeclared exception!
      try { 
        MathUtils.round(1.5, (-175), 3604);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(866.191790837204, 866.191790837204);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 29.7387107520967;
      doubleArray0[1] = 866.191790837204;
      doubleArray0[2] = 866.191790837204;
      doubleArray0[3] = 866.191790837204;
      doubleArray0[4] = 866.191790837204;
      doubleArray0[5] = 866.191790837204;
      doubleArray0[6] = 866.191790837204;
      doubleArray0[7] = 866.191790837204;
      doubleArray0[8] = 866.191790837204;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.cosh(0.0);
      try { 
        MathUtils.normalizeArray(doubleArray1, 866.191790837204);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(549, 549);
      boolean boolean0 = MathUtils.equals(1.125, (-1131.262), 3940.242154687);
      int[] intArray0 = new int[1];
      intArray0[0] = 1098;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.lcm(1098, 1098);
      int int3 = MathUtils.pow(401, (long) 549);
      int int4 = MathUtils.gcd((-3206), (-1564));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      short short0 = (short)3149;
      short short1 = MathUtils.indicator((short)3149);
      boolean boolean0 = MathUtils.equals((double) (short)3149, (double) (short)3149, (int) (short)1);
      float float0 = 4893.479F;
      float float1 = MathUtils.indicator(4893.479F);
      int int0 = MathUtils.gcd(342, (int) (short)3149);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.and(bigInteger1);
      int int1 = (-1935);
      try { 
        MathUtils.pow(bigInteger0, (-1935));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,935)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.indicator(0L);
      float float0 = MathUtils.sign(0.0F);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2503.505), (double) 0.0F);
      double double0 = (-1837.792);
      int int0 = (-5016);
      double double1 = MathUtils.round((-1837.792), (-5016));
      short short0 = MathUtils.indicator((short)1702);
      double double2 = MathUtils.log(0.0F, 213.91432124146);
      long long2 = MathUtils.addAndCheck((long) (short)1, (long) (-5016));
      short short1 = MathUtils.indicator((short)1702);
      long long3 = MathUtils.binomialCoefficient((short)1, (-5016));
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 179);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.round((float) 0, 0, 0);
      double double0 = MathUtils.indicator(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2462.3);
      doubleArray0[1] = 5.669184079525E-24;
      doubleArray0[2] = 1.1921056801463227E-8;
      doubleArray0[3] = (-544.8742736682691);
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      short short0 = MathUtils.sign((short)1450);
      long long0 = MathUtils.mulAndCheck((-1L), 762L);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = MathUtils.pow(4, 4);
      byte byte0 = MathUtils.indicator((byte)13);
      byte byte1 = MathUtils.sign((byte)0);
      short short0 = MathUtils.indicator((short) (byte)13);
      long long0 = MathUtils.gcd(857L, (-1020L));
      long long1 = MathUtils.subAndCheck((long) 4, 857L);
      int int1 = MathUtils.addAndCheck((int) (byte)0, 256);
      int int2 = MathUtils.pow((int) (byte)1, 4);
      double double0 = MathUtils.normalizeAngle((-1020L), 1857.0185513);
      double double1 = MathUtils.round((double) 256, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 857L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 857)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1790.6493575117725, 1790.6493575117725);
      short short0 = MathUtils.indicator((short)0);
      long long0 = MathUtils.pow((-2468L), (long) (short)0);
      int int0 = MathUtils.indicator((int) (short)1);
      long long1 = MathUtils.mulAndCheck(1308L, 0L);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 1336);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(3.141592653589793, 86.7);
      long long0 = MathUtils.mulAndCheck(0L, 3942L);
      double double1 = MathUtils.sinh(86.7);
      long long1 = MathUtils.indicator(0L);
      long long2 = MathUtils.pow(0L, 1L);
      double double2 = MathUtils.normalizeAngle(0L, 0.0);
      long long3 = MathUtils.pow(1L, 712);
      double double3 = MathUtils.cosh((-335.11));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 86.7;
      doubleArray0[3] = (-335.11);
      doubleArray0[4] = (double) 3942L;
      doubleArray0[5] = (double) 3942L;
      doubleArray0[6] = (double) 712;
      doubleArray0[7] = (double) 1L;
      double double4 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = MathUtils.cosh((-6.663542893624021E-14));
      double double1 = MathUtils.indicator(2719.432);
      int int0 = MathUtils.addAndCheck(0, 179);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 27.93037477);
      double double0 = MathUtils.round(27.93037477, 0);
      float float0 = MathUtils.sign((float) 0);
      short short0 = MathUtils.indicator((short)29);
      boolean boolean1 = MathUtils.equals((-1394.0), (double) 0.0F, (int) (short)1);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 11);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 11
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathUtils.checkOrder(doubleArray0);
      byte byte0 = MathUtils.sign((byte)57);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3212.454), (double) (byte)1, (int) (byte)1);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-1814), (-1814));
      short short0 = MathUtils.sign((short)82);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      double double0 = MathUtils.indicator((double) (short)0);
      long long0 = MathUtils.binomialCoefficient((short)0, (short)0);
      byte byte0 = MathUtils.indicator((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = MathUtils.gcd((-1531), (-1531));
      boolean boolean0 = MathUtils.equalsIncludingNaN(551.4752822971122, 0.3333333333332802);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = MathUtils.gcd(3515L, 0L);
      float float0 = MathUtils.sign((float) 3515L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2457.75380969), 3440.5, 384.7);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathUtils.log((-1755.568), (-1755.568));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = MathUtils.sign((-310));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = MathUtils.cosh((-75.0766673691));
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0153587368536008E32, 2.0153587368536008E32, 1031);
      boolean boolean1 = MathUtils.equals((-3226.38), (-75.0766673691), 2.0153587368536008E32);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      String string0 = bigInteger0.toString();
      BigInteger bigInteger1 = bigInteger0.flipBit(120);
      try { 
        MathUtils.pow(bigInteger0, (-4035746434778044925L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-4,035,746,434,778,044,925)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(2001.1984165236709, 2001.1984165236709);
      float float0 = MathUtils.round((-1.0F), 12);
      long long0 = MathUtils.factorial(12);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.subAndCheck(12, 12);
      long long1 = MathUtils.subAndCheck(0L, (long) 12);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1201L);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      long long0 = MathUtils.addAndCheck((-477L), (-477L));
      double double0 = MathUtils.sinh(13.07);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = MathUtils.lcm(2, 2);
      float float0 = MathUtils.indicator((float) 2);
      int int1 = MathUtils.compareTo((-2184.6894428277405), (-192.8757605), (-1109.176910375919));
      double double0 = MathUtils.sign((double) (-1));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("9yI#i|");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.9yI#i|
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      int int0 = MathUtils.compareTo(0.0, 0.0, 3216.22472274);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      short short0 = MathUtils.indicator((short)0);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (-2986);
      intArray0[3] = 0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short)1;
      intArray0[7] = (int) (short)0;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(3.141592653589793, 0.5, 1006);
      int int0 = MathUtils.addAndCheck(1006, 0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.9699272335463627E-8, 1.9699272335463627E-8, 1.9699272335463627E-8);
      try { 
        MathUtils.pow((-2147483648L), (-2147483648L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,147,483,648^-2,147,483,648)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2515.3244667;
      doubleArray0[1] = 0.13333332538604736;
      doubleArray0[2] = 1273.544445268;
      doubleArray0[3] = (-947.93336);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.indicator((-947.93336));
      byte byte0 = MathUtils.sign((byte)14);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(16, 358);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 358;
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) (-342);
      doubleArray0[3] = (double) 16;
      doubleArray0[4] = (double) 358;
      doubleArray0[5] = (double) 358;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 16);
      float float0 = MathUtils.round((-1532.578F), (-1895));
      double double0 = MathUtils.round((-782.4647781), 120);
      long long0 = MathUtils.lcm((long) (-342), (long) 120);
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 120, (double) (-1895), 10.0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 705;
      intArray0[2] = (-670);
      intArray0[3] = 2077;
      intArray0[4] = (-651);
      intArray0[6] = 1644;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.mulAndCheck(1644, 2489);
      long long0 = MathUtils.indicator((long) (-651));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-2675));
      long long0 = MathUtils.mulAndCheck((long) (short) (-1), 68L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-68L), 3830.61, (-934.61244274928));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = MathUtils.indicator(362880L);
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      long long1 = MathUtils.gcd(1L, 362880L);
      double double0 = MathUtils.binomialCoefficientLog(17, (-698));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-698);
      doubleArray0[2] = (double) (-698);
      int int0 = MathUtils.hash(doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double1 = MathUtils.binomialCoefficientLog(17, (-698));
      double double2 = MathUtils.sign((-2317.192));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = 1380;
      int int3 = MathUtils.indicator(1380);
      int int4 = MathUtils.compareTo((-16.560604558508), 0.0, 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.2;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int5 = MathUtils.lcm(2382, 331);
      long long0 = MathUtils.pow((long) 2382, 1);
      long long1 = MathUtils.pow((long) (-1), (long) 1380);
      double double1 = MathUtils.binomialCoefficientDouble(1840, 1840);
      short short0 = MathUtils.sign((short)0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double2 = MathUtils.normalizeAngle(0.0, 0.0);
      int int6 = MathUtils.gcd((int) (short)0, 1380);
      try { 
        MathUtils.pow(0, (-1676));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,676)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = 6.283185307179586;
      int int0 = 4328;
      // Undeclared exception!
      try { 
        MathUtils.round(6.283185307179586, 4328, 4328);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = MathUtils.pow(2012L, 1475L);
      double double0 = 1130.64794;
      double double1 = MathUtils.indicator(1130.64794);
      int int0 = 744;
      double double2 = MathUtils.binomialCoefficientDouble(744, 744);
      double double3 = (-2919.407);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 2012L, (-2919.407), (double) 0L);
      long long1 = MathUtils.binomialCoefficient(744, 744);
      byte byte0 = MathUtils.sign((byte) (-66));
      int[] intArray0 = new int[1];
      intArray0[0] = 744;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.2250738585072014E-308;
      doubleArray0[1] = (-2034.9775117602);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1233.291222;
      doubleArray0[4] = 4.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1943.31);
      doubleArray0[8] = 0.333333333333333;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.binomialCoefficientLog(13, 13);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck((long) 13, 0L);
      int int0 = MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(1382.0, (-1277), (-1277));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 2;
      float float0 = MathUtils.indicator((float) 2);
      int int1 = MathUtils.compareTo((-2184.6894428277405), 1.0F, (-1108.300720409644));
      double double0 = MathUtils.sign((double) (-1));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf(" s!>='");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection. s!>='
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 1537.9698976;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1537.9698976);
      boolean boolean0 = MathUtils.equals(1537.9698976, 0.0);
      long long0 = MathUtils.pow(556L, 238);
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean1 = bigInteger0.equals((Object) null);
      boolean boolean2 = bigInteger0.testBit(136);
      int int0 = bigInteger0.intValue();
      int int1 = bigInteger0.getLowestSetBit();
      double double0 = bigInteger0.doubleValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1474);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      boolean boolean3 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray1);
      byte byte0 = MathUtils.indicator((byte)0);
      double double1 = MathUtils.binomialCoefficientDouble((byte)1, (-1));
      byte byte1 = MathUtils.indicator((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 136, 886.42033, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
