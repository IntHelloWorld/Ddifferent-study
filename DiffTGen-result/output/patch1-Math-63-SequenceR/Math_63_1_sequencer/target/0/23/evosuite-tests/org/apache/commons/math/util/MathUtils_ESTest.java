/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 19:40:14 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(12, 0);
      double double0 = MathUtils.normalizeAngle((-781.2), 0);
      int int1 = MathUtils.mulAndCheck((-103), 0);
      int int2 = MathUtils.compareTo(0, 0.0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-103);
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-781.2);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 12;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-2.085021909731381);
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      int int3 = MathUtils.subAndCheck(0, 778);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-4844.223140654);
      doubleArray2[1] = (double) (-103);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray1, doubleArray2);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = (-9223372036854775801L);
      long long1 = MathUtils.indicator((-9223372036854775801L));
      int int0 = 0;
      long long2 = MathUtils.binomialCoefficient(1801, 0);
      boolean boolean0 = MathUtils.equals((double) (-1L), 332.68491, 706.059845);
      int int1 = MathUtils.lcm(0, 1801);
      boolean boolean1 = MathUtils.equals(0.0, (double) 1801, 0.0);
      long long3 = MathUtils.gcd((long) 0, 1610L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("unable to orthogonalize matrix in {0} iterations");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.unable to orthogonalize matrix in {0} iterations
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = MathUtils.lcm(1431655765L, 1431655765L);
      double double0 = MathUtils.sinh(1431655765L);
      int int0 = MathUtils.lcm((-1147), (-1147));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      long long1 = MathUtils.sign(1431655765L);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1738.91274, 1738.91274, 871.1194458);
      int int0 = MathUtils.compareTo((-176.13), 1738.91274, 1738.91274);
      long long0 = MathUtils.sign((long) (-1));
      byte byte0 = MathUtils.indicator((byte)52);
      int int1 = MathUtils.lcm(2102, (int) (byte)52);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-839.039765975), (double) (byte)52, 1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1L);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.cosh(1.0);
      int int2 = MathUtils.compareTo(1, 0.0, (-176.13));
      long long1 = MathUtils.pow((-939L), 18);
      double double2 = MathUtils.safeNorm(doubleArray0);
      boolean boolean2 = MathUtils.equals(1.25, 1242.64543451, 1.25);
      double double3 = MathUtils.sign(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-1375L), 346L);
      long long1 = MathUtils.indicator(346L);
      int int0 = MathUtils.mulAndCheck((-3359), (-243));
      double double0 = MathUtils.scalb(1910.07934491627, 816237);
      int int1 = MathUtils.subAndCheck(3, (-3359));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      byte byte0 = MathUtils.indicator((byte)0);
      double double2 = MathUtils.indicator(243.947);
      long long0 = MathUtils.sign((long) 0);
      short short0 = MathUtils.sign((short) (-1510));
      long long1 = MathUtils.sign(0L);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      double double4 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.subAndCheck(17, (-1953));
      long long2 = MathUtils.lcm(4294967295L, (long) (-1953));
      double double5 = MathUtils.normalizeAngle((byte)0, 0L);
      double double6 = MathUtils.sign(1.0);
      long long3 = MathUtils.subAndCheck((long) 1970, 0L);
      long long4 = MathUtils.subAndCheck((-434L), (long) (-1953));
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        MathUtils.pow(bigInteger0, 1610612736);
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(12, 0);
      double double0 = MathUtils.normalizeAngle((-781.2), 0);
      int int1 = MathUtils.mulAndCheck((-103), 0);
      int int2 = MathUtils.compareTo(0, 0.0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-103);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-781.2);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 12;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-2.085021909731381);
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1824.28637);
      doubleArray0[1] = 240.88;
      doubleArray0[2] = (-104.2140480561);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 408.54183311859;
      doubleArray0[6] = 1428.8397728088637;
      doubleArray0[7] = (-1955.400665653641);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(12, 0);
      double double0 = MathUtils.normalizeAngle((-781.2), 0);
      int int1 = MathUtils.mulAndCheck((-103), 0);
      int int2 = MathUtils.compareTo(0, 0.0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-103);
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-781.2);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 12;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-2.085021909731381);
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 4632515166703976448L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = MathUtils.sign(5924356.0);
      short short0 = MathUtils.indicator((short)1288);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-159.0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-548.841), (-548.841));
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(6227020800L, 6227020800L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(0, (-1077));
      long long0 = MathUtils.pow((-1468L), (long) 1077);
      int int2 = MathUtils.lcm((-1077), 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1077;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-1077);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1468L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int3 = MathUtils.indicator((-1077));
      float float0 = MathUtils.sign((float) 1077);
      long long1 = MathUtils.gcd((long) 0, (long) 0);
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 1892;
      double double0 = MathUtils.scalb((-1.0), 1892);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[2] = (double) 1892;
      doubleArray0[3] = (double) 1892;
      doubleArray0[4] = 998.6143428112749;
      doubleArray0[5] = (double) 1892;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not increasing (1,892 > 998.614)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = 0.0;
      doubleArray0[1] = (-7.800414592973399E-9);
      doubleArray0[2] = 2760.189;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1223.54308938419);
      doubleArray0[5] = (-795.0064584416009);
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.SAFE_MIN;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte) (-13));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.valueOf(2442);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger1.modInverse(bigInteger2);
      BigInteger bigInteger4 = bigInteger0.or(bigInteger1);
      String string0 = bigInteger0.toString((int) (byte) (-13));
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      short short0 = MathUtils.indicator((short) (byte) (-1));
      int int1 = MathUtils.indicator(47);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger6 = new BigInteger(byteArray0);
      BigInteger bigInteger7 = MathUtils.pow(bigInteger6, bigInteger4);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-1.0), 0.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = MathUtils.sinh((-771.69211243));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-604);
      intArray0[1] = 228;
      int int0 = (-3130);
      intArray0[2] = (-3130);
      int int1 = 6;
      intArray0[3] = 6;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float float0 = (-99.58289F);
      float float1 = MathUtils.sign((-99.58289F));
      int int0 = (-544);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-544), (-544));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -544
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = MathUtils.TWO_PI;
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-9223372036854775808L), (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(2147483646, 2147483646);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 2147483646;
      doubleArray1[1] = 1.1102230246251565E-16;
      doubleArray1[2] = (double) 1L;
      doubleArray1[3] = (double) 2147483646;
      doubleArray1[4] = (double) 2147483646;
      doubleArray1[5] = (double) 2147483646;
      doubleArray1[6] = (double) 2147483646;
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
      long long1 = MathUtils.lcm(1L, 1L);
      int int0 = MathUtils.indicator(2147483646);
      double double1 = MathUtils.binomialCoefficientDouble(2716, (-743));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("$|1P'Z&)");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.$|1P'Z&)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      double double0 = MathUtils.factorialDouble(1058);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 1058;
      doubleArray0[2] = (double) Float.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, doubleArray0);
      int int0 = 2145801985;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1058, 2145801985);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1,058, k = 2,145,801,985
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte byte0 = (byte)2;
      byte byte1 = MathUtils.sign((byte)2);
      float float0 = MathUtils.sign(2194.345F);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 2194.345F;
      doubleArray0[6] = (double) (byte)2;
      doubleArray0[7] = (double) (byte)1;
      doubleArray0[8] = (double) 1.0F;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-1987L), 4648900067244551424L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      double double0 = MathUtils.factorialDouble(1058);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 1058;
      doubleArray0[2] = (double) Float.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = 2145801985;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1058, 2145801985);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1,058, k = 2,145,801,985
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.round((-99.58289F), 0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-99.58289F);
      doubleArray0[1] = (double) (-99.58289F);
      doubleArray0[2] = (double) 0;
      int int1 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, (double) 0);
      // Undeclared exception!
      try { 
        MathUtils.round((-99.58289337158203), 1484325535, 0);
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1293.033035612, 1293.033035612, 31);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.sinh(1293.033035612);
      double[] doubleArray1 = new double[0];
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      int[] intArray0 = new int[7];
      intArray0[0] = 31;
      intArray0[1] = 31;
      intArray0[2] = 31;
      intArray0[3] = 31;
      intArray0[4] = 31;
      intArray0[5] = 31;
      intArray0[6] = 31;
      double double3 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = (-2092);
      float float0 = MathUtils.round(0.0F, (-2092));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) (-2092);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-2,092 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = 1408.95263047783;
      int int0 = MathUtils.hash(1408.95263047783);
      long long0 = MathUtils.pow((long) 1053503007, 1053503007);
      int int1 = 1510;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(1510, 1053503007);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1,510, k = 1,053,503,007
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 348L);
      long long1 = MathUtils.factorial(0);
      double double0 = MathUtils.normalizeAngle(348L, 0);
      double double1 = MathUtils.indicator(1515.311881606013);
      double double2 = MathUtils.factorialDouble(0);
      long long2 = MathUtils.mulAndCheck(368L, 1L);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      int int2 = MathUtils.distanceInf(intArray1, intArray1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 62.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.sign(40);
      short short0 = MathUtils.sign((short)204);
      double double1 = MathUtils.normalizeAngle(0.0, (-797954849));
      long long0 = MathUtils.subAndCheck(1260L, (-3512299194304650054L));
      long long1 = MathUtils.binomialCoefficient(0, (-797954849));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      long long0 = MathUtils.mulAndCheck(0L, (-354L));
      double double1 = MathUtils.factorialDouble(1193);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)82;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1096);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = (-3513L);
      long long1 = MathUtils.mulAndCheck((-3513L), (-3513L));
      int int0 = 132;
      double double0 = MathUtils.factorialLog(132);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 132;
      doubleArray0[1] = (double) (-3513L);
      doubleArray0[2] = 515.8908245878225;
      doubleArray0[3] = (double) 12341169L;
      doubleArray0[4] = 515.8908245878225;
      doubleArray0[5] = (double) 12341169L;
      doubleArray0[6] = (double) (-3513L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-3,513 <= 515.891)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 2196.7, Double.POSITIVE_INFINITY);
      int int0 = MathUtils.lcm(106, 2531);
      float float0 = MathUtils.indicator(1917.1F);
      double double0 = MathUtils.sinh(Double.POSITIVE_INFINITY);
      float float1 = MathUtils.sign(1917.1F);
      boolean boolean2 = MathUtils.equals((-1479.042848170111), 0.0, 2531);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2531;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 10.0;
      doubleArray0[3] = (double) 1917.1F;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = MathUtils.indicator(2291);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 2291;
      doubleArray0[3] = (double) 2291;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 2291;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte)0);
      double double1 = MathUtils.sign(2291.0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) (byte)0;
      doubleArray1[2] = (double) (byte)0;
      doubleArray1[3] = (double) 1;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray1);
      byte byte1 = MathUtils.sign((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathUtils.factorialLog(6);
      boolean boolean0 = MathUtils.equalsIncludingNaN(401.86646, 62.0, Double.POSITIVE_INFINITY);
      boolean boolean1 = MathUtils.equals(1.1102230246251565E-16, 1.1102230246251565E-16, 6);
      long long0 = MathUtils.pow((long) 6, 6);
      int int0 = 20;
      long long1 = MathUtils.pow((long) 6, 20);
      int int1 = MathUtils.pow(20, 6);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(9218868437227405312L, 9218868437227405312L);
      byte byte0 = (byte)7;
      byte byte1 = MathUtils.indicator((byte)7);
      int int0 = (-4788);
      float float0 = MathUtils.round((float) (byte)7, (-4788));
      int int1 = MathUtils.indicator((int) (byte)1);
      double double0 = MathUtils.scalb((byte)7, (byte)1);
      double double1 = 1.1102230246251565E-16;
      boolean boolean0 = MathUtils.equals((double) 1, 1.1102230246251565E-16);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.scalb(Double.NEGATIVE_INFINITY, 9);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, (-3397.0211), Double.NEGATIVE_INFINITY);
      double double2 = MathUtils.binomialCoefficientDouble(9, 0);
      byte byte0 = MathUtils.indicator((byte)0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 9;
      intArray0[2] = 280;
      intArray0[3] = (int) (byte)0;
      int[] intArray1 = new int[7];
      intArray1[0] = 280;
      intArray1[1] = 9;
      intArray1[2] = 0;
      intArray1[3] = 14;
      intArray1[4] = (int) (byte)1;
      intArray1[5] = (int) (byte)1;
      intArray1[6] = 9;
      double double3 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, (-253), 0);
      int int0 = MathUtils.gcd(13, (-253));
      long long0 = 3217L;
      long long1 = MathUtils.gcd(3217L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 841);
      byte byte0 = MathUtils.indicator((byte)0);
      int[] intArray0 = new int[8];
      intArray0[0] = 841;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = 0;
      intArray0[3] = 841;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = 841;
      intArray0[7] = (-841);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (byte)1;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathUtils.sinh((-290.854804));
      float float0 = MathUtils.indicator((-1.0F));
      int int0 = MathUtils.mulAndCheck((-1984), (-1984));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
      int int1 = MathUtils.pow((-38), 0);
      boolean boolean0 = MathUtils.equals((double) 1, (double) 0, 244);
      long long0 = MathUtils.pow((long) 0, (long) 0);
      boolean boolean1 = MathUtils.equals((-1133.963044639135), (double) 1, 61);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      long long0 = MathUtils.lcm((-4297L), (-2509L));
      float float0 = MathUtils.round((float) 0, 0, 0);
      double double0 = MathUtils.scalb(1.0F, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog(Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,147,483,648
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = (-2147483646);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2147483646));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,147,483,646
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 312;
      double double0 = MathUtils.factorialDouble(312);
      long long0 = MathUtils.indicator((long) 312);
      float float0 = MathUtils.indicator((-1.0F));
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 2658;
      intArray1[3] = 2843;
      int int0 = 41;
      intArray1[4] = 41;
      intArray1[5] = (-2067);
      int int1 = MathUtils.distanceInf(intArray0, intArray1);
      long long0 = MathUtils.gcd((-2494L), (-1375L));
      boolean boolean0 = MathUtils.equals((double) (-1375L), (double) (-1375L), (double) (-1375L));
      int int2 = 31;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(31, 41);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 31, k = 41
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)2);
      float float0 = MathUtils.sign(2194.345F);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 2194.345F;
      doubleArray0[6] = (double) (byte)2;
      doubleArray0[7] = (double) (byte)1;
      doubleArray0[8] = (double) 1.0F;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = MathUtils.indicator((-2147483648L));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathUtils.cosh(1.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      double double1 = MathUtils.normalizeAngle(1.0, (-50.358));
      double double2 = MathUtils.binomialCoefficientLog(41, 0);
      int int0 = MathUtils.subAndCheck(0, 14);
      float float0 = MathUtils.sign(607.1157F);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-14));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -14
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathUtils.sinh(1230.9025887118078);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1230.9025887118078;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 1230.9025887118078;
      doubleArray0[7] = 1230.9025887118078;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      double double1 = MathUtils.cosh(2.404307984052299E-9);
      double double2 = MathUtils.normalizeAngle(Double.POSITIVE_INFINITY, 4200.0);
      int int0 = MathUtils.gcd(0, 0);
      boolean boolean1 = MathUtils.equals(1.0, 2479.94318261101);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = MathUtils.hash((-1625.55000237));
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-213165746));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -213,165,746
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathUtils.sign((-745.7));
      long long0 = MathUtils.indicator(515L);
      double double1 = MathUtils.indicator((-963.2597844));
      boolean boolean0 = MathUtils.equals((-745.7), 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (-545.3), 106);
      float float0 = MathUtils.indicator((float) 1L);
      double double2 = MathUtils.scalb(0.0, 106);
      long long1 = MathUtils.lcm(893L, (-1L));
      double double3 = MathUtils.scalb((-1.0), 106);
      int[] intArray0 = new int[2];
      intArray0[0] = 106;
      intArray0[1] = 106;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double4 = MathUtils.cosh(0.0);
      long long2 = MathUtils.sign(1L);
      int int1 = MathUtils.compareTo(0.0, 0.0, 106);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double double5 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = MathUtils.log(0.0, (-2544.630343913463));
      int int0 = 0;
      double double1 = MathUtils.round((-599.15360741672), 0);
      byte byte0 = (byte)74;
      byte byte1 = MathUtils.indicator((byte)74);
      double double2 = MathUtils.factorialDouble((byte)1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      int int1 = bigInteger0.bitCount();
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      long long0 = bigInteger0.longValue();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
      double double3 = MathUtils.factorialDouble(763);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = 1.1430250008909141E-8;
      double double1 = MathUtils.normalizeAngle(1.1430250008909141E-8, (-0.49999999999999994));
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      short short0 = MathUtils.indicator((short) (-1694));
      double double0 = MathUtils.sign((-1.0));
      doubleArray0[0] = (-1333.66092256);
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 142010185;
      intArray0[2] = 142010185;
      intArray0[3] = 142010185;
      double double2 = MathUtils.distance(intArray0, intArray0);
      double double3 = MathUtils.log(0, 1333.66092256);
      double double4 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double5 = MathUtils.normalizeAngle(1.9868161777724352E-8, 1333.66092256);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("j31");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.j31
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.gcd(14, 14);
      double double0 = MathUtils.sign((double) 14);
      double double1 = MathUtils.factorialDouble(61);
      boolean boolean0 = MathUtils.equals(62.0, 62.0);
      byte byte0 = MathUtils.sign((byte) (-103));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1364.40433;
      doubleArray0[1] = (double) 61;
      doubleArray0[2] = (double) 14;
      doubleArray0[3] = (double) 14;
      doubleArray0[4] = (double) 61;
      doubleArray0[5] = 4412.154300295473;
      doubleArray0[6] = 1.0;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-570L), (-465L));
      int int0 = MathUtils.sign(0);
      short short0 = MathUtils.indicator((short)2290);
      double double0 = MathUtils.scalb(0, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (int) (short)1;
      intArray0[4] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float float0 = MathUtils.indicator((-1.0F));
      int int0 = 158;
      int int1 = (-989);
      double double0 = MathUtils.binomialCoefficientLog(158, (-989));
      int int2 = 0;
      long long0 = MathUtils.pow(0L, 0);
      double double1 = MathUtils.binomialCoefficientLog(0, (-989));
      double double2 = MathUtils.log(2.2250738585072014E-308, (-1.0F));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-2098.677525476263);
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2639.5896943034923;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 5
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-508.7198327615912);
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = 3805.36328;
      doubleArray0[3] = 459.2329999;
      doubleArray0[4] = 67.97;
      doubleArray0[5] = 1.1102230246251565E-16;
      doubleArray0[6] = (-2526.84099719854);
      doubleArray0[7] = 6.283185307179586;
      doubleArray0[8] = 1977.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.factorialDouble(1269);
      double double2 = MathUtils.normalizeAngle(643.0, 1977.0);
      int int0 = MathUtils.addAndCheck(146, 13);
      int int1 = MathUtils.mulAndCheck((-1), 1269);
      int int2 = MathUtils.sign(211);
      try { 
        MathUtils.pow((long) 159, (-1477));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (159^-1,477)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
      int int0 = 17;
      double double0 = MathUtils.factorialDouble(17);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      int int1 = MathUtils.pow(17, 0L);
      int int2 = MathUtils.addAndCheck(0, 1);
      try { 
        MathUtils.pow((long) 1, (-855));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-855)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 1012.0336304658993);
      long long0 = MathUtils.mulAndCheck(0L, (-2792L));
      long long1 = MathUtils.gcd(0L, (-1246L));
      long long2 = MathUtils.sign((-2792L));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2792L);
      doubleArray0[1] = 2397.2683836;
      doubleArray0[2] = (-0.0013888888689039883);
      doubleArray0[3] = (double) 1246L;
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      try { 
        MathUtils.pow(4349L, (-3195L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4,349^-3,195)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1595);
      intArray0[1] = (-557);
      intArray0[2] = 52;
      intArray0[3] = 212;
      intArray0[4] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int[] intArray1 = new int[9];
      intArray1[0] = (-557);
      intArray1[1] = 0;
      intArray1[2] = (-557);
      intArray1[3] = 212;
      intArray1[4] = (-2693);
      intArray1[5] = 212;
      intArray1[6] = (-1595);
      intArray1[7] = (-1595);
      intArray1[8] = 0;
      double double1 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = MathUtils.compareTo(1.304E19, 1.304E19, (-2332.8190543655924));
      double double0 = MathUtils.log(0.0, 0.0);
      long long0 = MathUtils.addAndCheck((long) 0, (long) 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, (-2332.8190543655924), 197);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      short short0 = bigInteger1.shortValueExact();
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      String string0 = bigInteger0.toString();
      BigInteger bigInteger3 = BigInteger.TEN;
      BigInteger bigInteger4 = bigInteger3.or(bigInteger1);
      BigInteger bigInteger5 = bigInteger0.gcd(bigInteger3);
      long long1 = (-94L);
      try { 
        MathUtils.pow(bigInteger0, (-94L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-94)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float float0 = MathUtils.round((float) 1024, 1024);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) Float.NaN, (-1333.66092256), 1024);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1333.66092256);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.cosh(1024);
      int int0 = MathUtils.hash(doubleArray0);
      float float1 = MathUtils.indicator(Float.NaN);
      int[] intArray0 = new int[4];
      intArray0[0] = 142010185;
      intArray0[1] = 1024;
      intArray0[2] = 142010185;
      intArray0[3] = 142010185;
      double double2 = MathUtils.distance(intArray0, intArray0);
      double double3 = MathUtils.log(1024, 1333.66092256);
      double double4 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double5 = MathUtils.normalizeAngle(1.9868161777724352E-8, 1333.66092256);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("j31");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.j31
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = MathUtils.indicator((-2744.15386817));
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-2458L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,458)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      boolean boolean0 = MathUtils.equals(530.2036999449, (double) 0.0F);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byte byte0 = (byte)15;
      byteArray0[1] = (byte)15;
      byte byte1 = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger1);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,861,275,904)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.3333333134651184);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1240.26;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = 1088L;
      long long1 = 4577762542105553359L;
      // Undeclared exception!
      try { 
        MathUtils.lcm(1088L, 4577762542105553359L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.2246467991473532E-16;
      doubleArray0[1] = 2.3841857910019882E-8;
      doubleArray0[2] = 10.0;
      doubleArray0[3] = (-2967.5856);
      doubleArray0[4] = 2864.530519442726;
      doubleArray0[5] = 1122.05630601;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (10 >= -2,967.586)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(21, 21);
      long long1 = MathUtils.sign(4269L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 21;
      doubleArray0[1] = (double) 21;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals((double) 1L, (-644.137337376));
      int int0 = MathUtils.lcm(21, (-3175));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.gcd(0L, 0L);
      int int0 = (-2370);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-2370), (-2370));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,370
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = MathUtils.round(2637.979, 52, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 2637.979;
      doubleArray0[2] = 2637.979;
      doubleArray0[3] = 2637.979;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 2637.979;
      doubleArray0[6] = (double) 52;
      doubleArray0[7] = 2637.979;
      doubleArray0[8] = (double) 52;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.11113807559013367, 4965.6, (-1334));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 502.3;
      doubleArray0[2] = (-1047.2025929);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3755.41;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.036);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck((-1176L), (-1176L));
      int[] intArray0 = new int[3];
      intArray0[0] = (-2567);
      intArray0[1] = (-1459);
      intArray0[2] = (-481);
      double double0 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-481), (-481), 750);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 750, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = MathUtils.gcd(14, 14);
      long long0 = MathUtils.indicator((long) 14);
      byte byte0 = MathUtils.indicator((byte)0);
      int int1 = (-1589);
      int int2 = MathUtils.addAndCheck((int) (byte)0, (-1589));
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 14, 954.42212, (-1589));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float float0 = MathUtils.round(406.3034F, 4);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      long long0 = MathUtils.lcm(0L, 0L);
      int int0 = MathUtils.subAndCheck(122, 21);
      int[] intArray0 = new int[7];
      intArray0[0] = 21;
      intArray0[1] = 21;
      intArray0[2] = 122;
      intArray0[3] = 21;
      intArray0[4] = 122;
      intArray0[5] = 21;
      intArray0[6] = 1994;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.pow(181, 0L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1994, 877);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(1070, 1070);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1070, 1070, 1070);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,070, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 1921;
      int int1 = MathUtils.pow(1921, (long) 1921);
      int int2 = MathUtils.compareTo(1921, 3465.0378366, (-2094512255));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3465.0378366;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.indicator(4514.464F);
      int int3 = 74;
      // Undeclared exception!
      try { 
        MathUtils.factorial(74);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float float0 = MathUtils.indicator(520.0F);
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals((-1401.9002568328), (double) 1.0F, (double) 520.0F);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1046));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,046
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(9218868437227405312L, 9218868437227405312L);
      byte byte0 = MathUtils.indicator((byte)7);
      float float0 = MathUtils.round((float) (byte)7, (-4788));
      int int0 = MathUtils.indicator((int) (byte)1);
      double double0 = MathUtils.EPSILON;
      boolean boolean0 = MathUtils.equals((double) 1, 1.1102230246251565E-16);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double1 = MathUtils.factorialDouble(0);
      int int1 = MathUtils.hash((double) 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte byte0 = MathUtils.sign((byte)11);
      int int2 = MathUtils.pow(10, (int) (byte)1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 1.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.shiftLeft(63);
      int int0 = bigInteger1.signum();
      BigInteger bigInteger3 = bigInteger0.divide(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-1773));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1,773)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(2967L, 0L);
      long long1 = 0L;
      long long2 = MathUtils.gcd(0L, 2967L);
      double double0 = MathUtils.scalb(6.283185307179586, (-2092));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2092);
      doubleArray0[1] = 6.283185307179586;
      double double1 = (-668.8724334);
      doubleArray0[2] = (-668.8724334);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-2092);
      doubleArray0[5] = (double) (-2092);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 66;
      intArray0[4] = 10;
      intArray0[5] = 3499;
      intArray0[6] = 0;
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 10;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 3499;
      intArray1[6] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1522.5932471188, 0.0, 192);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 192;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1522.5932471188;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1384.0);
      doubleArray1[3] = 1522.5932471188;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1522.5932471188;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 1522.5932471188;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      int int0 = MathUtils.mulAndCheck(192, 192);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = MathUtils.indicator(46L);
      long long1 = MathUtils.subAndCheck(0L, 1468L);
      long long2 = MathUtils.gcd(0L, 0L);
      short short0 = MathUtils.indicator((short) (-1276));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long3 = MathUtils.addAndCheck((-1468L), 1354L);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathUtils.indicator(2724.93826917304);
      double double1 = MathUtils.round(1.0, (-1961));
      double double2 = MathUtils.round((-1363.083587133851), (-52));
      long long0 = MathUtils.sign(0L);
      int int0 = 0;
      double double3 = MathUtils.factorialDouble(0);
      float float0 = MathUtils.sign((float) 0L);
      int[] intArray0 = new int[0];
      double double4 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, (-52), (-1961));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,961, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.1102230246251565E-16;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3582.86222167);
      doubleArray0[3] = 57.2957763671875;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.875;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1.494140625;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly decreasing (-3,582.862 <= 57.296)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = MathUtils.log(2.0, 0.2222222089767456);
      double double1 = MathUtils.scalb((-2.1699250874336404), 248);
      short short0 = MathUtils.indicator((short) (-2));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(178);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 178;
      doubleArray0[1] = (double) 178;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.997844754509471E-9;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1005.507143569689);
      doubleArray0[4] = (-639.101);
      double double0 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.11111095942313305;
      doubleArray0[2] = 741.038;
      doubleArray0[3] = 6.283185307179586;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 0.111)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-0.1428571423679182);
      doubleArray0[2] = (-2858.768335370889);
      doubleArray0[3] = (-436.2323460927);
      doubleArray0[4] = 799.2745248;
      doubleArray0[5] = 748.90456;
      doubleArray0[6] = 1.5;
      doubleArray0[7] = 0.11111095942313305;
      doubleArray0[8] = 1.304E19;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      boolean boolean0 = MathUtils.equals(0.0, 1.1102230246251565E-16, (double) 0);
      long long0 = MathUtils.indicator((long) 0);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      byte byte0 = MathUtils.sign((byte)0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1836.2881262013);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2814.4073340068));
      double double1 = MathUtils.factorialLog((byte)0);
      long long1 = MathUtils.pow(4577762542105553359L, 166L);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (byte)0, 0.0);
      short short0 = MathUtils.sign((short) (-229));
      double double2 = MathUtils.indicator(0.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      long long2 = MathUtils.addAndCheck(2381L, 6722166367014452353L);
      double double3 = MathUtils.factorialDouble(0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("m&MlO{");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.m&MlO{
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2847.098421);
      doubleArray0[1] = (-65.250822946);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 463.4365;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-65.250822946);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-65.250822946);
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 463.4365;
      doubleArray1[6] = 463.4365;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      int int0 = MathUtils.hash(0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      long long0 = MathUtils.sign((long) 0);
      float float0 = MathUtils.indicator((-572.04F));
      int int1 = MathUtils.pow(0, 0);
      long long1 = MathUtils.subAndCheck(1729L, (long) 0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 289L);
      double double0 = MathUtils.binomialCoefficientLog(2050, 2050);
      int int0 = MathUtils.gcd((-2248), (-2687));
      int int1 = MathUtils.indicator(0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 1);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      long long0 = MathUtils.pow((long) (byte)0, 0);
      float float0 = MathUtils.round(0.0F, 2084, (int) (byte)0);
      int int0 = MathUtils.sign((int) (byte)0);
      short short0 = MathUtils.indicator((short)651);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 1293;
      int int1 = MathUtils.addAndCheck(1293, 1293);
      long long0 = MathUtils.lcm((long) 1293, (long) 2586);
      double double0 = MathUtils.factorialLog(2586);
      double double1 = MathUtils.log(2586L, 2586);
      double double2 = MathUtils.sinh(2586L);
      long long1 = MathUtils.pow((long) 2586, (long) 2586);
      int int2 = (-471);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-471), (-828));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -471
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = MathUtils.gcd(355687428096000L, (-5383L));
      float float0 = MathUtils.indicator(Float.NaN);
      double double0 = 2837.94079575783;
      boolean boolean0 = MathUtils.equals(2837.94079575783, (double) 7L);
      int int0 = 163;
      // Undeclared exception!
      try { 
        MathUtils.round(2837.94079575783, 163, 163);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.factorialLog(127);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.304E19, 1628.436170928);
      int int0 = MathUtils.addAndCheck(127, 0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      float float0 = 0.0F;
      float float1 = MathUtils.sign(0.0F);
      double double0 = MathUtils.indicator((-925.0558326));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (-878.2936560535);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      boolean boolean0 = MathUtils.equals(2058.1871623, (double) 0.0F, 2058.1871623);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1873);
      intArray0[1] = 7;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-878.2936560535), 2058.1871623, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 3136;
      // Undeclared exception!
      try { 
        MathUtils.factorial(3136);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(521, 521);
      int[] intArray0 = new int[5];
      intArray0[0] = 271441;
      intArray0[1] = 271441;
      intArray0[2] = 271441;
      intArray0[3] = 521;
      intArray0[4] = 521;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      boolean boolean1 = MathUtils.equals(0.0, 788.7286463776024);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 788.7286463776024;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 788.7286463776024;
      doubleArray1[1] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte byte0 = (byte)2;
      byte byte1 = MathUtils.sign((byte)2);
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      long long0 = MathUtils.addAndCheck((long) 0, (-596L));
      int int0 = MathUtils.sign(167);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 167;
      intArray0[3] = 167;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 181;
      double double1 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.sign((float) 0);
      long long1 = MathUtils.indicator((long) 0);
      long long2 = MathUtils.sign((long) 167);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = MathUtils.pow((-2041L), 0L);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) (byte)1;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-3053.1037184);
      doubleArray1[1] = (double) (byte)1;
      doubleArray1[2] = (double) (byte)0;
      doubleArray1[3] = (double) (byte)1;
      doubleArray1[4] = (double) (byte)0;
      doubleArray1[5] = (double) (byte)1;
      doubleArray1[6] = (double) (byte)0;
      doubleArray1[7] = (double) (byte)1;
      doubleArray1[8] = (-73.6822126859);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1185.9801980063053;
      doubleArray0[1] = (-528.0);
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = MathUtils.scalb((-1.0), 1892);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 1892;
      doubleArray0[2] = (double) 1892;
      doubleArray0[3] = (double) 1892;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (double) 1892;
      doubleArray0[6] = (-1.0947644252537633E-47);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = 1731.03409;
      double double1 = MathUtils.sinh(1731.03409);
      int int0 = (-1045);
      int int1 = 2136;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1045), 2136);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,045, k = 2,136
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = (-1220L);
      long long1 = MathUtils.lcm(2516L, (-1220L));
      int int0 = (-4981);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.5, (double) 2516L, (-4981));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)33);
      long long0 = MathUtils.mulAndCheck(224L, (long) (byte)1);
      long long1 = MathUtils.addAndCheck((-1L), 0L);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)1;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.log(1, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, 0.0, (double) (-1L));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 396;
      intArray0[3] = (-6066);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = MathUtils.lcm((-2009L), 2018L);
      int int0 = MathUtils.mulAndCheck(709, 709);
      // Undeclared exception!
      try { 
        MathUtils.round(1054.911978, 502681, 709);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2584.0, (-3974.532943206));
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1.0), 3181.04, (-264.7597162));
      short short0 = MathUtils.sign((short)0);
      int int0 = MathUtils.addAndCheck(0, 0);
      short short1 = MathUtils.indicator((short)0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("xY9b8n=y");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.xY9b8n=y
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 9.219544613762692E-9;
      doubleArray0[1] = (-921.698);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 9.219544613762692E-9);
      int int0 = MathUtils.pow(0, (long) 0);
      int int1 = MathUtils.lcm(1, 1);
      int int2 = MathUtils.hash(9.219544613762692E-9);
      int int3 = MathUtils.addAndCheck((-1298), 0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialLog(0);
      boolean boolean0 = MathUtils.equals((-3888.07066), 0.0, 1774.4293199735);
      int int1 = 0;
      int int2 = MathUtils.addAndCheck(0, 0);
      int int3 = MathUtils.compareTo(0, (-366.6), (-3888.07066));
      double double1 = MathUtils.sinh(646.7475288411661);
      byte byte0 = MathUtils.indicator((byte)127);
      boolean boolean1 = MathUtils.equals(646.7475288411661, (double) 0, (double) 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1774.4293199735;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (byte)1;
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      byte byte1 = MathUtils.sign((byte) (-70));
      int int4 = (-669);
      try { 
        MathUtils.pow((-669), (-669));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-669^-669)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = (-546);
      try { 
        MathUtils.pow((-546), (-546));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-546^-546)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = MathUtils.sign(114);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.factorialLog(9);
      int int1 = MathUtils.hash(1.0);
      long long0 = MathUtils.mulAndCheck((long) 1, (long) 1072693248);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.2499999997677497);
      doubleArray0[1] = (-554.673);
      doubleArray0[2] = 4249.540259;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow(52, 52);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0);
      int int0 = MathUtils.lcm(0, (-2097));
      long long0 = MathUtils.pow(24L, 6);
      double double0 = MathUtils.round((-224.662243099), 0, 0);
      byte byte0 = MathUtils.indicator((byte)0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2097);
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2097);
      doubleArray0[4] = (double) 24L;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (-2097);
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) 0.0F;
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long1 = MathUtils.lcm(0L, (-2312L));
      // Undeclared exception!
      try { 
        MathUtils.round((double) 0.0F, (int) (byte)0, (-126));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1168.76), 0.0);
      byte byte0 = (byte)88;
      byte byte1 = MathUtils.indicator((byte)88);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = MathUtils.gcd(884L, 884L);
      double double0 = MathUtils.normalizeAngle(0.0, (-2206.0));
      double double1 = MathUtils.log(884L, 499.25);
      int int0 = MathUtils.compareTo(4006.558213551181, 9.140260083262505E-9, 3294198.0);
      int int1 = MathUtils.mulAndCheck(102, 0);
      double double2 = MathUtils.indicator((double) 0);
      double double3 = MathUtils.normalizeAngle(0.0, 6.283185307179586);
      double double4 = MathUtils.normalizeAngle(0.0, 0.0);
      double double5 = MathUtils.indicator(0.0);
      int int2 = MathUtils.indicator(319);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = 1828.8609282898672;
      int int0 = MathUtils.compareTo(1828.8609282898672, 1828.8609282898672, 1828.8609282898672);
      double double1 = (-1254.003371008941);
      double double2 = 0.0;
      double double3 = MathUtils.normalizeAngle((-1254.003371008941), 0.0);
      int int1 = 0;
      float float0 = MathUtils.round((float) 0, 4152, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf(".AhKmPmZ0PV9fTsP");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection..AhKmPmZ0PV9fTsP
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0);
      int int0 = MathUtils.lcm(0, (-2097));
      long long0 = MathUtils.pow(24L, 6);
      double double0 = MathUtils.round((-224.662243099), 0, 0);
      byte byte0 = MathUtils.indicator((byte)0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2097);
      doubleArray0[1] = (double) 6;
      doubleArray0[3] = (double) (-2097);
      doubleArray0[4] = (double) 24L;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (-2097);
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) 0.0F;
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long1 = MathUtils.lcm(0L, (-2312L));
      // Undeclared exception!
      try { 
        MathUtils.round((double) 0.0F, (int) (byte)0, (-126));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 14;
      int int1 = MathUtils.lcm(14, 14);
      byte byte0 = MathUtils.indicator((byte)0);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 14);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(2322.8038396849, Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = MathUtils.cosh(9.0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-357);
      intArray0[1] = 1727;
      intArray0[2] = 0;
      intArray0[3] = (-778);
      intArray0[4] = 4;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.sign((short) (-491));
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((float) (short) (-1), 1087);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short) (-1), (-1045.05046423482));
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.pow(1, 1);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-222));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -222
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = 0L;
      int int0 = MathUtils.pow((-898), 0L);
      try { 
        MathUtils.pow((-898), (long) (-898));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-898^-898)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2590.0;
      doubleArray0[1] = 2006.823200621533;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,590 >= 2,006.823)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = MathUtils.round(0.0, (-2714));
      byte byte0 = MathUtils.sign((byte) (-19));
      byte byte1 = MathUtils.indicator((byte) (-79));
      short short0 = MathUtils.sign((short)1027);
      short short1 = MathUtils.sign((short)14);
      boolean boolean0 = MathUtils.equals((double) (byte) (-1), (double) (byte) (-1), (int) (short)1);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (byte) (-79);
      intArray0[2] = (-2714);
      intArray0[3] = (int) (short)1027;
      intArray0[4] = (int) (short)1;
      intArray0[5] = (int) (short)1;
      intArray0[6] = (int) (byte) (-1);
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.pow(1729L, 1);
      int[] intArray1 = new int[9];
      intArray1[0] = (int) (short)1;
      intArray1[1] = (int) (byte) (-1);
      intArray1[2] = (int) (byte) (-19);
      intArray1[3] = (int) (short)1;
      intArray1[4] = (int) (short)1;
      intArray1[5] = (int) (byte) (-1);
      intArray1[6] = (int) (byte) (-1);
      intArray1[7] = (int) (short)1027;
      intArray1[8] = 2209;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray1, intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = 62.0;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.sign((-797954849));
      short short0 = MathUtils.sign((short)204);
      double double0 = MathUtils.normalizeAngle(0.0, (-797954849));
      long long0 = MathUtils.subAndCheck(1260L, (-3512299194304650054L));
      long long1 = MathUtils.binomialCoefficient(0, (-797954849));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = (-1056);
      int int1 = MathUtils.sign((-1056));
      double double0 = MathUtils.log((-1056), (-190.32502));
      byte byte0 = (byte) (-29);
      byte byte1 = MathUtils.indicator((byte) (-29));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-190.32502), 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.1538461446762085;
      doubleArray0[1] = 1374.1888454878;
      doubleArray0[2] = 0.5;
      doubleArray0[3] = 3.141592653589793;
      doubleArray0[4] = 3.141592653589793;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte) (-71));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = MathUtils.pow(39916800L, 187);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 187;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 39916800L;
      doubleArray0[4] = 3479.24222253;
      doubleArray0[5] = (double) 39916800L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (187 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2222.21;
      doubleArray0[2] = 898.877389331;
      doubleArray0[3] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (2,222.21 > 898.877)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-2279));
      float float0 = MathUtils.sign((float) (short) (-1));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long long0 = MathUtils.lcm(1237L, 1237L);
      double double0 = MathUtils.round(4793.864267520562, 0);
      int int0 = MathUtils.subAndCheck(1355, 0);
      long long1 = MathUtils.sign(0L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(29, 3185);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 29, k = 3,185
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = MathUtils.sinh(1549.179);
      int int0 = MathUtils.pow(168, (long) 168);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = MathUtils.sign((-4573L));
      int int0 = MathUtils.gcd(4769, 6);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      float float0 = MathUtils.round((-177.972F), 0, 0);
      long long0 = MathUtils.mulAndCheck((-824L), (long) 0);
      int int0 = MathUtils.addAndCheck((-216), (-216));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 13;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 982L);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float float0 = MathUtils.indicator((-375.0F));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      int int1 = MathUtils.mulAndCheck(0, 21);
      float float0 = MathUtils.round((-1751.84F), 0);
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      int int2 = MathUtils.addAndCheck(0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) 21);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = (-1446);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1446), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,446, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 1414);
      int int0 = MathUtils.pow(1414, 8);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1414, 1564, (-877));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -877, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 41);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 41
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = MathUtils.indicator(66);
      long long0 = MathUtils.subAndCheck(2828L, (-1580L));
      int int1 = MathUtils.compareTo(2828L, 1.0, 0.3333333333332802);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger1, 2819561105158720014L);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-849.228208908741);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-514.73347987);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1154.863);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 39);
      int[] intArray0 = new int[6];
      intArray0[0] = 39;
      intArray0[1] = 39;
      intArray0[2] = 39;
      intArray0[3] = 39;
      intArray0[4] = 39;
      intArray0[5] = 39;
      double double0 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(39);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(6, (-2434));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2434);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      int int0 = MathUtils.pow((-2434), 2387);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 17;
      // Undeclared exception!
      try { 
        MathUtils.round((-1279.2F), 17, 17);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 17, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(9218868437227405312L, 9218868437227405312L);
      byte byte0 = MathUtils.sign((byte)7);
      int int0 = (-4788);
      float float0 = MathUtils.round((float) (byte)7, (-4788));
      int int1 = MathUtils.indicator((int) (byte)1);
      double double0 = MathUtils.scalb((byte)7, (byte)1);
      boolean boolean0 = MathUtils.equals((double) 1, 1.1102230246251565E-16);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-816);
      intArray0[1] = 2005;
      intArray0[2] = 9;
      intArray0[3] = 1751;
      intArray0[4] = 52;
      intArray0[5] = (-1903);
      intArray0[6] = 145;
      intArray0[7] = 4180;
      intArray0[8] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.binomialCoefficientLog(1582, 9);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1738.91274, 1738.91274, 871.1194458);
      int int0 = MathUtils.compareTo((-176.13), 1738.91274, 1738.91274);
      long long0 = MathUtils.sign((long) (-1));
      byte byte0 = MathUtils.indicator((byte)52);
      int int1 = MathUtils.lcm(2102, (int) (byte)52);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-839.039765975), (double) (byte)52, 1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1L);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.cosh(1.0);
      int int2 = MathUtils.compareTo(1, 0.0, (-176.13));
      long long1 = MathUtils.pow((-939L), 18);
      double double2 = MathUtils.safeNorm(doubleArray0);
      boolean boolean2 = MathUtils.equals(1.25, 1242.64543451, 1.25);
      int int3 = MathUtils.subAndCheck(1, (-6019));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = MathUtils.sign((-2582));
      int int1 = 106;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-2582), (-700.655719533731), 106);
      double double0 = MathUtils.factorialLog(106);
      int int2 = (-5609);
      int int3 = MathUtils.subAndCheck((-5609), (-1));
      int int4 = 0;
      int int5 = MathUtils.addAndCheck((-2582), 0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double double0 = MathUtils.indicator((-3212.16218));
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      intArray0[2] = (-387);
      intArray0[3] = (-1367);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1.0), 0.0, (double) (-1367));
      short short0 = MathUtils.sign((short)0);
      int int1 = MathUtils.lcm((-387), 63);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-387);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2808);
      // Undeclared exception!
      try { 
        MathUtils.factorial(2808);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)4);
      int int0 = MathUtils.hash((double) (byte)4);
      long long0 = MathUtils.subAndCheck((long) (byte)4, (long) 1074790400);
      boolean boolean0 = MathUtils.equals(0.06666666666666667, 0.06666666666666667);
      long long1 = 0L;
      long long2 = MathUtils.subAndCheck((long) (byte)4, 0L);
      double double0 = MathUtils.log((-2308.3585871423115), 0.0);
      double double1 = MathUtils.scalb(1074790400, (byte)1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1074790400, 18);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(31);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 8.22283865417801E33;
      doubleArray0[1] = 8.22283865417801E33;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 31;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      byte byte0 = MathUtils.indicator((byte)0);
      double double2 = MathUtils.indicator(243.947);
      long long0 = MathUtils.sign((long) 31);
      short short0 = MathUtils.sign((short) (-1510));
      long long1 = MathUtils.sign(0L);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      double double4 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.subAndCheck(17, (-1953));
      long long2 = MathUtils.lcm(4294967295L, (long) (-1953));
      double double5 = MathUtils.normalizeAngle((byte)0, 0L);
      double double6 = MathUtils.sign(8.22283865417801E33);
      long long3 = MathUtils.subAndCheck((long) 1970, 1L);
      long long4 = MathUtils.subAndCheck((-434L), (long) (-1953));
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, (-380.9701005144499), 634);
  }
}
