/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 19:40:16 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = MathUtils.pow(1649L, 59);
      long long1 = MathUtils.sign(0L);
      long long2 = MathUtils.lcm(2459L, 1649L);
      boolean boolean0 = MathUtils.equals(0.6931470632553101, (double) 3324334466195483345L, 91);
      Object object0 = new Object();
      boolean boolean1 = MathUtils.equalsIncludingNaN((-8.0E298), (double) 2459L, 59);
      double double0 = MathUtils.binomialCoefficientLog(149, 91);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (-2971.77903865959);
      doubleArray0[2] = (double) 1649L;
      doubleArray0[3] = (double) 0L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -2,971.779)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = MathUtils.sign((-6354.8278));
      short short0 = (short)2966;
      short short1 = MathUtils.sign((short)2966);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
      long long0 = MathUtils.gcd((long) (short)1, (long) (short)2966);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("LOESS_EXPECTS_AT_LEAST_ONE_POINT");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.LOESS_EXPECTS_AT_LEAST_ONE_POINT
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      long long0 = MathUtils.indicator(53358654061158140L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = (short) (-1554);
      short short1 = MathUtils.indicator((short) (-1554));
      long long1 = MathUtils.lcm(1L, 2870L);
      byte byte0 = (byte) (-41);
      byte byte1 = MathUtils.sign((byte) (-41));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) Float.NaN;
      try { 
        MathUtils.normalizeArray(doubleArray0, (-1237.7));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.sinh((-190.59970499581));
      int int0 = 17;
      int int1 = MathUtils.pow(17, 116L);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      MathUtils.factorialLog(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = MathUtils.sign(609);
      int[] intArray0 = new int[4];
      intArray0[0] = 609;
      intArray0[1] = 609;
      intArray0[2] = 609;
      intArray0[3] = 609;
      int[] intArray1 = new int[9];
      intArray1[0] = 1;
      intArray1[1] = (-133);
      intArray1[2] = 609;
      intArray1[3] = 1;
      intArray1[4] = 3666;
      intArray1[5] = 609;
      intArray1[6] = 609;
      intArray1[7] = 609;
      intArray1[8] = 609;
      int int1 = MathUtils.distance1(intArray0, intArray1);
      long long0 = MathUtils.factorial(0);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 3666, (-2885.99567992));
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      short short0 = MathUtils.indicator((short) (-24143));
      int int3 = MathUtils.gcd(609, 2622);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.7853981633974483;
      doubleArray0[2] = 2526.53967;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2763.8575;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.mulAndCheck(0, 696);
      boolean boolean0 = MathUtils.equals(0.0, 1833.4034451);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.sign((double) 431557537);
      long long0 = MathUtils.gcd(0L, (long) 696);
      double double2 = MathUtils.cosh((-2242.0));
      boolean boolean1 = MathUtils.equals(0.0, (-539.8686464875894));
      int int2 = MathUtils.subAndCheck(0, 3294);
      int int3 = MathUtils.subAndCheck(431557537, 0);
      boolean boolean2 = MathUtils.equalsIncludingNaN((-2242.0), 0.0);
      float float0 = MathUtils.indicator((float) 0L);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = (-980);
      int int1 = 573;
      int int2 = MathUtils.pow((-980), 573);
      int int3 = MathUtils.indicator((-980));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      boolean boolean0 = bigInteger1.equals((Object) null);
      BigInteger bigInteger2 = bigInteger0.and(bigInteger1);
      BigInteger bigInteger3 = BigInteger.valueOf(2002L);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 573);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.mulAndCheck(889, 889);
      int int1 = MathUtils.gcd((-763), 20);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-763);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 889;
      doubleArray1[1] = (double) 20;
      doubleArray1[2] = (double) 20;
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = (double) (-763);
      doubleArray1[6] = (double) 790321;
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
      float float0 = MathUtils.round((float) 0L, (-1758));
      MathUtils.checkOrder(doubleArray0);
      int int2 = MathUtils.subAndCheck(21, (-763));
      long long0 = MathUtils.addAndCheck((long) 784, (long) 1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-4,921,088^-4,921,088)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 238;
      boolean boolean0 = MathUtils.equalsIncludingNaN(2635.51, 0.0, 238);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 238;
      doubleArray0[1] = (double) 238;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.factorialDouble(238);
      double double2 = MathUtils.scalb(0.0, 238);
      int int1 = (-3004);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-3004), 238);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -3,004, k = 238
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(3016, 2633);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.log(0.0, (-2897.230793632352));
      int[] intArray0 = new int[5];
      intArray0[0] = 272;
      intArray0[1] = 52;
      intArray0[2] = 0;
      int int0 = 163;
      intArray0[3] = 163;
      intArray0[4] = 44;
      double double1 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2147483648L, 4607182418800017408L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      int int0 = 0;
      intArray0[1] = 0;
      int int1 = 487;
      intArray0[2] = 487;
      intArray0[3] = 115;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      short short0 = MathUtils.sign((short)4032);
      int int3 = MathUtils.hash((double) 487);
      int int4 = MathUtils.subAndCheck(0, 0);
      long long0 = MathUtils.gcd((long) 0, (long) 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 115;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0L;
      int int5 = MathUtils.hash(doubleArray0);
      int int6 = MathUtils.mulAndCheck(0, 1082028032);
      float float0 = MathUtils.indicator((float) 0);
      int int7 = MathUtils.sign((-350));
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (-350), 1082028032);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 487;
      intArray0[3] = 115;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      short short0 = MathUtils.sign((short)4032);
      int int1 = MathUtils.hash((double) 487);
      int int2 = MathUtils.subAndCheck(0, 0);
      long long0 = MathUtils.gcd((long) 0, (long) 0);
      float float0 = MathUtils.indicator((float) 0);
      int int3 = MathUtils.sign((-350));
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (-350), 1082028032);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-645.0), 2799.54, 239);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 135.3909614591;
      doubleArray0[2] = (double) 239;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1343.6606547917213);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.log(1317.0401876136839, 4629.5829004);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.pow((-303L), 4918L);
      double double3 = MathUtils.binomialCoefficientLog(0, 0);
      int int0 = MathUtils.hash(0.0);
      int int1 = MathUtils.gcd((-1406), (-1406));
      int int2 = MathUtils.pow((-2218), 9218868437227405312L);
      int int3 = MathUtils.lcm(10, 0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-303L);
      doubleArray1[1] = 1317.0401876136839;
      doubleArray1[2] = (double) 10;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 0;
      double double4 = MathUtils.distanceInf(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 242;
      double double0 = MathUtils.factorialDouble(242);
      int int1 = MathUtils.hash((double[]) null);
      int int2 = 8;
      long long0 = MathUtils.pow((long) 0, 8);
      long long1 = MathUtils.addAndCheck((long) 0, (long) 8);
      long long2 = MathUtils.lcm(0L, (long) 8);
      int int3 = MathUtils.pow(1002, 242);
      long long3 = MathUtils.sign((long) 0);
      boolean boolean0 = MathUtils.equals((double) 8L, 5029.9114427);
      int int4 = MathUtils.pow(1002, (long) 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 8L;
      doubleArray0[3] = 5029.9114427;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 242;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      int int0 = MathUtils.lcm(1818, 0);
      double double0 = MathUtils.scalb(0, (-1651));
      double double1 = MathUtils.normalizeAngle(0.0, 0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
      int int1 = MathUtils.compareTo(0, 0.0, (-1651));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 1818);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1651);
      intArray0[1] = 1818;
      intArray0[2] = 1818;
      intArray0[3] = 1818;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1818;
      double double2 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 17;
      double double0 = MathUtils.factorialDouble(17);
      long long0 = MathUtils.sign(3628800L);
      int int1 = MathUtils.sign(17);
      double double1 = MathUtils.binomialCoefficientLog(246, 1);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("I^yowg{");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.I^yowg{
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      byte byte0 = (byte)29;
      byte byte1 = MathUtils.sign((byte)29);
      int int1 = MathUtils.mulAndCheck(0, (int) (byte)1);
      int int2 = MathUtils.gcd((int) (byte)1, 512);
      double double0 = MathUtils.scalb(1.9868161777724352E-8, 512);
      double[] doubleArray0 = new double[0];
      int int3 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, (double[]) null);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 1);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      float float0 = MathUtils.sign((-17.3318F));
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-1.0F);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 2.6638849703675497E146;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.834E-20, 3.834E-20);
      long long0 = MathUtils.binomialCoefficient(5, 5);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-3314), 3327);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3314);
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = 0.1666666505023083;
      doubleArray0[3] = (double) (-3314);
      doubleArray0[4] = 5201.08434325;
      doubleArray0[5] = (double) 3327;
      doubleArray0[6] = (double) 3327;
      doubleArray0[7] = (double) (-3314);
      doubleArray0[8] = (double) 3327;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-3,314 <= 13)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = (-3207L);
      long long1 = MathUtils.subAndCheck((-3207L), (-3207L));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte byte0 = (byte)43;
      byte byte1 = MathUtils.sign((byte)43);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)62);
      long long0 = MathUtils.mulAndCheck((long) (byte)62, (long) (byte)62);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 10;
      int int1 = 0;
      int int2 = MathUtils.gcd(10, 0);
      long long0 = MathUtils.subAndCheck((long) 10, 2038L);
      float float0 = MathUtils.indicator((-3959.3F));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2028L);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) (-3959.3F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (-1328.6);
      doubleArray0[6] = (double) 10;
      doubleArray0[7] = (double) (-2028L);
      doubleArray0[8] = (double) (-3959.3F);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (10 >= -3,959.3)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-215.3);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck((-1674L), (-1674L));
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(0, 0);
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      // Undeclared exception!
      try { 
        MathUtils.equals(Double.NaN, 2.2250738585072014E-308, (int) (short)0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 37.8254759523;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 37.8254759523);
      double double0 = MathUtils.sign(15.58480170733);
      float float0 = MathUtils.indicator((-1.0F));
      long long0 = MathUtils.addAndCheck((long) 0, 0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      int int1 = bigInteger1.bitCount();
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) 0);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger3, (long) 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      float float1 = MathUtils.round((-3640.0F), (-693));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(1008, 1008);
      int int1 = MathUtils.gcd(1008, 855);
      long long0 = MathUtils.indicator((long) 855);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1703.8778539823), (double) 1008);
      boolean boolean1 = MathUtils.equals(0.0, 1475.27378204706);
      int int2 = MathUtils.subAndCheck(2276, 855);
      byte byte0 = MathUtils.sign((byte)0);
      long long1 = MathUtils.indicator((-2304L));
      long long2 = MathUtils.sign((long) (byte)0);
      double double0 = MathUtils.cosh(9);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      long long3 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = bigInteger0.shiftRight(0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 17);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      short short0 = MathUtils.indicator((short) (-889));
      long long4 = MathUtils.indicator((-791L));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte byte0 = (byte)4;
      byte byte1 = MathUtils.indicator((byte)4);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-0.7077965106009307);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3420.03;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 908.15093;
      doubleArray0[5] = (-719.6035);
      doubleArray0[6] = 0.5;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck((-280L), 506L);
      double double1 = MathUtils.normalizeAngle(506L, 0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(908.15093, 4293.1957);
      byte byte0 = MathUtils.sign((byte) (-52));
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long1 = MathUtils.pow(506L, 4194304);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = (-632.74903409);
      int int0 = (-2074);
      double double1 = MathUtils.scalb((-632.74903409), (-2074));
      long long0 = MathUtils.gcd((long) (-2074), (long) (-2074));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(0.0, 941.0, 6110);
      boolean boolean3 = MathUtils.equalsIncludingNaN(0.0, 1.304E19);
      long long0 = MathUtils.subAndCheck(2173L, (long) 6110);
      long long1 = MathUtils.sign((-3937L));
      long long2 = MathUtils.addAndCheck((long) 6110, (-3937L));
      boolean boolean4 = MathUtils.equals(1.304E19, 0.0);
      int[] intArray0 = new int[3];
      intArray0[0] = 6110;
      intArray0[1] = 6110;
      intArray0[2] = 6110;
      int[] intArray1 = new int[8];
      intArray1[0] = 6110;
      intArray1[1] = 6110;
      intArray1[2] = 0;
      intArray1[3] = 6110;
      intArray1[4] = 6110;
      intArray1[5] = 6110;
      intArray1[6] = 6110;
      intArray1[7] = 6110;
      double double2 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 9.0;
      doubleArray0[2] = (-2783.6190121397963);
      doubleArray0[3] = 307.9;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 307.9;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = MathUtils.indicator(757);
      long long0 = MathUtils.sign((long) 757);
      long long1 = MathUtils.factorial(1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2662.231468600331);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 757;
      doubleArray0[3] = (double) 757;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 757;
      doubleArray0[6] = (double) 1;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 757.0);
      int int1 = MathUtils.pow(757, (long) 1);
      double double0 = MathUtils.indicator((double) 757);
      int int2 = MathUtils.gcd((-354), 80);
      float float0 = MathUtils.round(0.0F, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      long long2 = MathUtils.gcd((long) 80, (long) 757);
      boolean boolean1 = MathUtils.equals(55.8829, 2.0, 1198.41);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      boolean boolean3 = MathUtils.equalsIncludingNaN((double) 757, 42.0);
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray1, 1L);
      int[] intArray0 = new int[4];
      intArray0[0] = 757;
      intArray0[1] = 2;
      intArray0[2] = (-354);
      intArray0[3] = 757;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1166.4846;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2375.94132858657);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.subAndCheck(1L, 1L);
      int int0 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.factorialLog(2457);
      float float0 = MathUtils.indicator((float) 1L);
      long long1 = MathUtils.addAndCheck(0L, 0L);
      double double2 = MathUtils.log(0L, 1.304E19);
      // Undeclared exception!
      try { 
        MathUtils.lcm(1458048086, 582);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = MathUtils.pow(61, 61);
      double double0 = MathUtils.log(61, 2.0);
      int int1 = MathUtils.mulAndCheck(61, 61);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 61, (double) 3721);
      double double1 = MathUtils.scalb(0.0, 9);
      long long0 = MathUtils.subAndCheck((long) 1062783533, (long) 9);
      int[] intArray0 = new int[7];
      intArray0[0] = 1062783533;
      intArray0[1] = 137;
      intArray0[2] = 61;
      intArray0[3] = 3721;
      intArray0[4] = 61;
      intArray0[5] = 9;
      intArray0[6] = 3721;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      float float0 = MathUtils.indicator(0.0F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float float0 = MathUtils.sign(969.3915F);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(3727, 416);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = MathUtils.log((-4824.89), (-4824.89));
      float float0 = 0.0F;
      int int0 = (-4323);
      float float1 = MathUtils.round(0.0F, (-4323));
      int int1 = MathUtils.hash((-1042.4258940231166));
      BigInteger bigInteger0 = BigInteger.ZERO;
      long long0 = 3142L;
      boolean boolean0 = bigInteger0.equals((Object) null);
      BigInteger bigInteger1 = BigInteger.valueOf(3142L);
      try { 
        MathUtils.pow(bigInteger0, (long) (-587179312));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-587,179,312)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)64);
      int int0 = MathUtils.indicator(10);
      long long0 = MathUtils.pow(0L, 4);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = 1.9699272335463627E-8;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (byte)64;
      doubleArray0[5] = (double) 1;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.sign((int) (byte)1);
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.indicator((double) 10);
      short short1 = MathUtils.indicator((short)0);
      int int2 = MathUtils.subAndCheck((-1071), 1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = (-980);
      int int1 = 573;
      int int2 = MathUtils.pow((-980), 573);
      int int3 = MathUtils.indicator((-980));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      boolean boolean0 = bigInteger1.equals((Object) null);
      BigInteger bigInteger2 = bigInteger0.and(bigInteger1);
      BigInteger bigInteger3 = BigInteger.valueOf(2002L);
      try { 
        MathUtils.pow(bigInteger0, (-980));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-980)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.shiftRight(0);
      int int0 = (-1156);
      try { 
        MathUtils.pow(bigInteger0, (-1156));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,156)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = 2935890503282001226L;
      long long1 = MathUtils.subAndCheck(2935890503282001226L, 2935890503282001226L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, (double) 0L);
      int int0 = (-2207);
      int int1 = MathUtils.pow((-2207), 2935890503282001226L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 605386177, (double) 0L, 605386177);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 3348;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.round(3970.9286203, 0);
      int int1 = MathUtils.gcd((-4487), 3348);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3348;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 3348;
      doubleArray0[3] = 3619.5800257375467;
      doubleArray0[4] = (double) 3348;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 3970.9286203;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (3,348 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-47.327), (-601.718030424), 1506.0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = (-1243);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1243), (-1243));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,243
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = MathUtils.compareTo(165.737673, 0.0, 0.0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.sinh(2.2250738585072014E-308);
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck((-1L), 0L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.2250738585072014E-308;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long2 = MathUtils.lcm(0L, 0L);
      long long3 = (-9223372036854775808L);
      try { 
        MathUtils.pow((-9223372036854775808L), (-9223372036854775808L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-9,223,372,036,854,775,808^-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      boolean boolean0 = MathUtils.equals((double) (byte)1, (double) (byte)0, 2.2250738585072014E-308);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.2250738585072014E-308;
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = 1911.993938364567;
      doubleArray0[7] = (double) (byte)1;
      doubleArray0[8] = (-1395.77956);
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = (-1169L);
      try { 
        MathUtils.pow((-1169L), (-1946L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,169^-1,946)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      byte byte0 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.binomialCoefficientLog(1441, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) (byte)1, (int) (byte)1);
      int int0 = MathUtils.hash(Double.NaN);
      boolean boolean1 = MathUtils.equals(3119.682511464, (-1.0));
      byte byte1 = MathUtils.sign((byte)0);
      long long0 = MathUtils.mulAndCheck((-7278142539171889152L), (long) (byte)0);
      double double1 = MathUtils.normalizeAngle(0L, Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2146959360;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      int int0 = MathUtils.sign((-528));
      BigInteger bigInteger4 = BigInteger.ONE;
      BigInteger bigInteger5 = bigInteger4.pow(0);
      try { 
        MathUtils.pow(bigInteger4, (long) (-528));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-528)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1053L), (-1053L));
      long long1 = MathUtils.pow((-2328L), 0L);
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      byte byte0 = MathUtils.indicator((byte)0);
      int int0 = 6208;
      int int1 = MathUtils.mulAndCheck((-250), 6208);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 103);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 103
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-0.16666666666666666);
      doubleArray0[1] = (-2906.19925859);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.mulAndCheck(0, 0);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.flipBit(19);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = MathUtils.compareTo(1.0, 2058.811274292, Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = MathUtils.compareTo(3454.6357654568, 8.251545029714408E-9, 8.251545029714408E-9);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.4384203044354907E-8;
      doubleArray0[1] = 0.058823529411764705;
      doubleArray0[2] = 8.251545029714408E-9;
      doubleArray0[3] = 3454.6357654568;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 67.17);
      double double0 = MathUtils.binomialCoefficientLog(88, 88);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0.059 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = MathUtils.sign(404L);
      double double0 = MathUtils.factorialLog(0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 184);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 184
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      short short0 = MathUtils.sign((short)19);
      double double0 = (-745.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)1, (-745.0));
      long long0 = MathUtils.sign((-1L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (-745.0);
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) (short)1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (1 > -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-167.39776);
      doubleArray0[1] = (-1428.77516051);
      doubleArray0[2] = 1529.14;
      doubleArray0[3] = (-375.9848342831345);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2107.30891);
      doubleArray0[6] = 0.08371849358081818;
      doubleArray0[7] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      boolean boolean1 = MathUtils.equals(doubleArray1, doubleArray0);
      int int0 = 182;
      int int1 = MathUtils.mulAndCheck(182, 1);
      // Undeclared exception!
      try { 
        MathUtils.round((-0.1666666567325592), 182, (-1318));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 18;
      boolean boolean0 = MathUtils.equalsIncludingNaN((-0.2499999997677497), (-0.2499999997677497), 18);
      int int1 = (-3300);
      int int2 = MathUtils.indicator((-3300));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-734.8);
      doubleArray0[1] = (-0.2499999997677497);
      doubleArray0[2] = (double) 18;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 18;
      doubleArray0[6] = (-0.2499999997677497);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (18 >= -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = MathUtils.indicator(754);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 754;
      doubleArray0[1] = (double) 754;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 754;
      doubleArray0[4] = (double) 754;
      doubleArray0[5] = (double) 754;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 754;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (754 >= 754)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2521.902432845);
      doubleArray0[1] = 2034.169054745289;
      doubleArray0[2] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.indicator(9);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-158.0), (-158.0));
      boolean boolean1 = MathUtils.equals((-158.0), 1190.5);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      long long0 = MathUtils.pow((-868L), 0L);
      float float0 = MathUtils.sign((-2965.75F));
      double double1 = MathUtils.factorialDouble(0);
      boolean boolean2 = MathUtils.equals((double[]) null, (double[]) null);
      int int0 = MathUtils.indicator(0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = MathUtils.pow(4, 0);
      boolean boolean0 = MathUtils.equals(0.0, (double) 4, (double) 0);
      int int1 = MathUtils.hash(819.68456163);
      float float0 = MathUtils.round((float) (-1141163285), 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1.14116326E9F);
      int int2 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.indicator((double) (-1141163285));
      byte byte0 = MathUtils.sign((byte)3);
      short short0 = MathUtils.sign((short) (byte)3);
      int int3 = MathUtils.pow(1748, (long) (byte)3);
      int int4 = MathUtils.lcm(4, 3199);
      double double1 = MathUtils.sinh(1);
      double double2 = MathUtils.scalb(Double.POSITIVE_INFINITY, (-965));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = MathUtils.lcm(378L, 378L);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow(98, 98);
      double double0 = MathUtils.binomialCoefficientDouble(98, 0);
      long long1 = MathUtils.lcm((-701L), (-701L));
      long long2 = MathUtils.pow(378L, 378L);
      double double1 = MathUtils.round((double) 0L, 98);
      double double2 = MathUtils.cosh(1.304E19);
      int int1 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 98;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = (-3282);
      intArray0[7] = 1;
      intArray0[8] = 0;
      int int2 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(596.126, (-547.0), 66);
      double double0 = MathUtils.cosh((-547.0));
      double double1 = MathUtils.log((-547.0), (-490.073460766398));
      boolean boolean1 = MathUtils.equals(Double.NaN, (-1080.902));
      double double2 = MathUtils.sign(1.8115553394498127E237);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 9218868437227405312L);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = 3616.5368208106;
      boolean boolean0 = MathUtils.equals(3616.5368208106, 3616.5368208106);
      int int0 = 10;
      int int1 = MathUtils.subAndCheck(10, 10);
      double double1 = MathUtils.factorialLog(0);
      double double2 = MathUtils.factorialDouble(10);
      long long0 = MathUtils.sign((long) 10);
      long long1 = MathUtils.sign((long) 0);
      int int2 = 0;
      int int3 = MathUtils.addAndCheck(0, 0);
      double double3 = MathUtils.round((-1351.3), 10, 0);
      int int4 = MathUtils.sign(0);
      boolean boolean1 = MathUtils.equals((double) 0L, (double) 0L, (double) 0);
      byte byte0 = MathUtils.indicator((byte)54);
      long long2 = MathUtils.pow(0L, 47);
      double[] doubleArray0 = new double[0];
      double double4 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)86);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)86;
      intArray0[2] = (int) (byte)86;
      intArray0[3] = (-3421);
      intArray0[4] = (int) (byte)86;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      short short0 = MathUtils.sign((short) (-3510));
      int int1 = MathUtils.subAndCheck(88, 924);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(806, 304);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3420.03;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 908.15093;
      doubleArray0[5] = (-719.6035);
      doubleArray0[6] = 0.5;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck((-280L), 506L);
      double double1 = MathUtils.normalizeAngle(506L, 0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(908.15093, 4293.1957);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      short short0 = MathUtils.sign((short)4984);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 491);
      int int0 = MathUtils.lcm(491, 491);
      int int1 = MathUtils.subAndCheck(491, 491);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.negate();
      BigInteger bigInteger2 = BigInteger.ZERO;
      double double1 = bigInteger2.doubleValue();
      BigInteger bigInteger3 = bigInteger0.andNot(bigInteger2);
      BigInteger bigInteger4 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, (long) 491);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MathUtils.checkOrder(doubleArray0);
      short short0 = MathUtils.sign((short) (-3585));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-290.0), (-290.0), (-2621));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = MathUtils.indicator((-1.3345853461321653));
      int int0 = 2146795722;
      long long0 = MathUtils.mulAndCheck((long) 2146795722, (long) 2146795722);
      long long1 = MathUtils.mulAndCheck((long) 2146795722, 138L);
      double double1 = MathUtils.normalizeAngle(161.89400346, 112.0894068135994);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1291.8336613, 1291.8336613, 0.0);
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.log(1.0, (byte)0);
      boolean boolean1 = MathUtils.equals(1412.84991, (double) (byte)0, 2.0);
      long long0 = MathUtils.lcm((long) (byte)0, (-251L));
      int int0 = MathUtils.mulAndCheck(178, (int) (byte)0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(0.0, 1412.84991, 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-251L);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1412.84991;
      doubleArray0[4] = (double) (-251L);
      doubleArray0[5] = 1412.84991;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(2);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 2, (double) 2, 2.0);
      double double1 = Double.NEGATIVE_INFINITY;
      double double2 = MathUtils.cosh(Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long long0 = MathUtils.gcd((-1816L), 0L);
      double double0 = MathUtils.normalizeAngle((-1816L), 0.3);
      int int0 = 1371;
      int int1 = MathUtils.gcd(1371, 0);
      int int2 = 235;
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0L, 235, 1371);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,371, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = MathUtils.pow((-2533L), 1536L);
      double double0 = MathUtils.factorialLog(0);
      int int0 = MathUtils.indicator(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1536L;
      doubleArray0[2] = (double) 3717386075699488769L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long1 = MathUtils.lcm(824L, 0L);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.log(0.0, 3717386075699488769L);
      int int1 = MathUtils.mulAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(316.22062, 0.097);
      double double0 = MathUtils.log(2.384185791015625E-7, (-239.7165));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      boolean boolean1 = bigInteger0.equals(bigInteger3);
      long long0 = MathUtils.indicator(0L);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger3);
      float float0 = MathUtils.sign((-273.0F));
      float float1 = MathUtils.sign((-1.0F));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1876.6233;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-222.290678249897);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator(120L);
      double double1 = MathUtils.normalizeAngle(1176.96, 0.0);
      boolean boolean0 = MathUtils.equals(1876.6233, (-224.0), 2524);
      int int0 = MathUtils.hash(2.0043475574173044);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = (-1260);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1260), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,260, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1685.6196824519227;
      doubleArray0[1] = 0.7853981633974483;
      doubleArray0[2] = 2526.53967;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2763.8575;
      doubleArray0[5] = (-175.5902138313);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = 0;
      int int2 = 696;
      int int3 = MathUtils.mulAndCheck(0, 696);
      boolean boolean0 = MathUtils.equals(1685.6196824519227, 1833.4034451);
      // Undeclared exception!
      try { 
        MathUtils.round(1685.6196824519227, 561383509);
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1554.3737807149);
      doubleArray0[1] = (-3985.42634);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3740.17618;
      doubleArray0[4] = (-0.2499999997677497);
      doubleArray0[5] = 5.669184079525E-24;
      doubleArray0[6] = 1.1102230246251565E-16;
      doubleArray0[7] = 3.834E-20;
      doubleArray0[8] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.addAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = MathUtils.indicator(5767.58369395031);
      int int0 = MathUtils.indicator((-1022));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      byte byte0 = (byte)113;
      byte byte1 = MathUtils.sign((byte)113);
      float float0 = MathUtils.round((-329.145F), 4613);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.factorial(0);
      double double0 = MathUtils.factorialDouble(109);
      double double1 = MathUtils.normalizeAngle(3228.60775091761, 0);
      int int1 = 3522;
      // Undeclared exception!
      try { 
        MathUtils.round(4795.0, 0, 3522);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1066.140598;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.factorial(0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.scalb(1066.140598, (-792));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      String string0 = bigInteger1.toString(0);
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ONE;
      BigInteger bigInteger4 = bigInteger0.remainder(bigInteger3);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 0);
      int int0 = (-3409);
      int int1 = MathUtils.lcm((-3409), (-792));
      long long1 = bigInteger4.longValueExact();
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("org.apache.commons.math.util.MathUtils$1");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.org.apache.commons.math.util.MathUtils$1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 958.60324;
      doubleArray0[1] = (-754.3927);
      doubleArray0[2] = (-178.37411328731);
      doubleArray0[3] = 703.5;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3626.3;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 958.60324);
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.scalb(Double.NaN, (-723));
      int int0 = MathUtils.lcm((-723), 0);
      int int1 = MathUtils.compareTo(Double.NaN, Double.NaN, 3408.198159009147);
      byte byte0 = MathUtils.indicator((byte) (-11));
      long long0 = MathUtils.gcd((long) 1, (-1L));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(3774, 0);
      try { 
        MathUtils.pow(1352L, (-1588));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,352^-1,588)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = (-2553);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2553));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,553
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1.0), (-1.0));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      float float0 = MathUtils.indicator(Float.NaN);
      byte byte0 = MathUtils.sign((byte)78);
      int int0 = 4377;
      int int1 = MathUtils.gcd(4377, (int) (byte)1);
      int int2 = MathUtils.subAndCheck(4377, 4377);
      double double1 = MathUtils.safeNorm(doubleArray0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      int int0 = 2918;
      int int1 = MathUtils.lcm(2918, 0);
      double double0 = MathUtils.binomialCoefficientLog((short)1, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("6Q>ou");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.6Q>ou
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.gcd((-1363), (-1363));
      int[] intArray0 = new int[6];
      intArray0[0] = 1363;
      intArray0[1] = 754;
      intArray0[2] = (-1363);
      intArray0[3] = (-1363);
      intArray0[4] = (-1363);
      intArray0[5] = (-1363);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      float float0 = MathUtils.round((float) 754, 1363);
      // Undeclared exception!
      try { 
        MathUtils.factorial(1363);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = MathUtils.gcd(40320L, 40320L);
      byte byte0 = MathUtils.sign((byte)7);
      double double0 = MathUtils.binomialCoefficientDouble((byte)7, (byte)7);
      double double1 = MathUtils.sinh((byte)7);
      boolean boolean0 = MathUtils.equalsIncludingNaN(552.0, (double) 40320L, (double) 40320L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("`)BNZ9wKZ7qz_urP$o");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.`)BNZ9wKZ7qz_urP$o
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-3512299194304650054L), (-3512299194304650054L));
      int int0 = MathUtils.mulAndCheck((-64), (-2641));
      boolean boolean0 = MathUtils.equalsIncludingNaN(2176.223702, 0.07692307692307693);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.abs();
      int int1 = bigInteger0.bitCount();
      long long1 = bigInteger0.longValueExact();
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.07692307692307693, 1346.42961);
      int[] intArray0 = new int[7];
      intArray0[0] = (-2641);
      intArray0[1] = (-64);
      intArray0[2] = (-2641);
      intArray0[3] = (-64);
      intArray0[4] = 169024;
      intArray0[5] = (-2641);
      intArray0[6] = (-64);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.factorialDouble(1916);
      boolean boolean2 = MathUtils.equalsIncludingNaN(2495.0, (double) (-2641));
      double double2 = MathUtils.cosh(0.0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = 1.25;
      int int0 = MathUtils.compareTo(0.0, 1.25, 1.25);
      long long0 = 484L;
      int int1 = MathUtils.pow(0, 484L);
      int int2 = (-690);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-690));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -690
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = MathUtils.lcm(67, 67);
      long long0 = MathUtils.indicator((-883L));
      double double0 = MathUtils.normalizeAngle((-150.32511928), 67);
      boolean boolean0 = MathUtils.equals(0.0, (double) 67, 0.0);
      byte byte0 = MathUtils.indicator((byte)37);
      int int1 = MathUtils.sign((int) (byte)37);
      // Undeclared exception!
      try { 
        MathUtils.factorial(1500);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      short short0 = MathUtils.indicator((short)748);
      long long0 = MathUtils.sign((long) (byte)0);
      int int0 = MathUtils.pow(260, 2825L);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 10;
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 10, 10);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 10, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      float float0 = MathUtils.round((float) (short)0, (int) (short)0);
      long long0 = MathUtils.subAndCheck((long) (short)0, (long) (short)0);
      int int0 = (-2978);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (short)0, (int) (short)1, (-2978));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -2,978, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-2400L), (-2400L));
      int int0 = MathUtils.addAndCheck(200, 1365);
      int int1 = MathUtils.pow(200, 0L);
      short short0 = MathUtils.sign((short) (-581));
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-581);
      intArray0[1] = 1;
      intArray0[2] = 1565;
      intArray0[3] = (int) (short) (-581);
      intArray0[4] = 1565;
      intArray0[5] = (int) (short) (-1);
      intArray0[6] = 1565;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      short short0 = MathUtils.indicator((short)0);
      byte byte0 = MathUtils.indicator((byte) (-34));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) (short)1);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger1, 0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3740.17618;
      doubleArray0[4] = (-0.2499999997677497);
      doubleArray0[6] = 1.1102230246251565E-16;
      doubleArray0[7] = 3.834E-20;
      doubleArray0[8] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.addAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.mulAndCheck(0, 0);
      int int2 = MathUtils.compareTo(0, 0, 0);
      int int3 = (-982);
      try { 
        MathUtils.pow(0, (-982));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-982)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = MathUtils.indicator((-515));
      double double0 = MathUtils.cosh(13.0);
      int int1 = MathUtils.sign((-1241));
      short short0 = MathUtils.indicator((short)2799);
      double double1 = MathUtils.sign(0.49999999999999994);
      try { 
        MathUtils.pow(84, (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (84^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = (-1965);
      int int1 = MathUtils.pow((-1965), 1692);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1965));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,965
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.125, 77.9939, 77.9939);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 77.9939;
      doubleArray0[1] = 0.125;
      doubleArray0[2] = 0.125;
      doubleArray0[3] = 0.125;
      doubleArray0[4] = 0.125;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(1.0, 0.125);
      int int1 = MathUtils.subAndCheck(0, 3);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-1L), (-1L));
      double double0 = MathUtils.scalb((-1L), (-3939));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3939);
      MathUtils.checkOrder(doubleArray0);
      int int0 = 18;
      int int1 = 3919;
      // Undeclared exception!
      try { 
        MathUtils.round((-2327.6079605), 18, 3919);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = (-436L);
      long long1 = 9218868437227405312L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-436L), 9218868437227405312L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long long0 = MathUtils.sign(4503599627370496L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1L, 0.0, (-906.359927));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(10.0, 1092.29254);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1092.29254;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 10.0;
      doubleArray0[3] = 1092.29254;
      doubleArray0[4] = 1092.29254;
      doubleArray0[5] = 1092.29254;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.subAndCheck(700L, (-1205L));
      try { 
        MathUtils.pow((-947), (-1205L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-947^-1,205)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-240.955901998);
      doubleArray0[2] = (-2162.37560173);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-809.12995540633);
      doubleArray0[6] = 72.0;
      doubleArray0[7] = 1.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-2,162.376 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      int int1 = MathUtils.lcm(0, (-688));
      int int2 = MathUtils.hash((-531.0));
      // Undeclared exception!
      try { 
        MathUtils.equals(1374.0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1297.272652998595;
      doubleArray0[2] = 637.4957118548;
      doubleArray0[3] = (-1352.9255464903606);
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 637.4957118548;
      doubleArray1[1] = (-1352.9255464903606);
      doubleArray1[2] = 637.4957118548;
      doubleArray1[3] = 637.4957118548;
      doubleArray1[4] = 637.4957118548;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-1352.9255464903606);
      doubleArray1[8] = (-1352.9255464903606);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = MathUtils.pow(1L, 0);
      double double0 = MathUtils.sinh(1L);
      int int0 = MathUtils.pow(0, (long) 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 1.1752011936438014;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1L;
      int int1 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1305234044;
      intArray0[1] = 1;
      intArray0[2] = 1305234044;
      intArray0[3] = 1;
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int2 = MathUtils.compareTo(1305234044, (-1319.8), 1305234044);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (1 <= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = (-266);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-266));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -266
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-503L), 9154082963658192752L);
      int int0 = MathUtils.gcd(0, 0);
      long long1 = MathUtils.sign(0L);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-1424);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.indicator((-520));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-503L);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -503)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(452.3178347645722, 452.3178347645722, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = (-1954);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1954));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,954
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 3348;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.round(3970.9286203, 0);
      int int1 = MathUtils.gcd(0, 3348);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3348;
      doubleArray0[2] = (double) 0;
      doubleArray0[2] = (double) 3348;
      doubleArray0[3] = 3619.5800257375467;
      doubleArray0[4] = (double) 3348;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 3970.9286203;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (3,348 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      int int0 = MathUtils.addAndCheck(0, (-2280));
      float float0 = MathUtils.round((float) (-2280), (-2280));
      double double0 = MathUtils.sign(1373.9405508706);
      try { 
        MathUtils.pow(0, (-2025L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,025)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-52), (-52));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-872));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -872
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-101));
      int int0 = MathUtils.pow(2428, 4095L);
      long long0 = MathUtils.indicator((long) (short) (-101));
      double double0 = MathUtils.sinh(0.6931470632553101);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2428;
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2428;
      doubleArray0[5] = 0.6931470632553101;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (short) (-1);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-2960.2579924715747), (-2960.2579924715747));
      double double0 = MathUtils.log((-2960.2579924715747), 0.0);
      double double1 = MathUtils.normalizeAngle((-1025.5720745172425), (-3755.98243922979));
      double double2 = MathUtils.log((-2960.2579924715747), 0.0);
      double double3 = MathUtils.round(0.0, 3427);
      float float0 = MathUtils.round((float) 3427, 799);
      long long0 = MathUtils.mulAndCheck((long) 799, (long) 3427);
      int int0 = MathUtils.sign(3427);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      int int1 = 0;
      int int2 = MathUtils.lcm(0, 0);
      double double0 = MathUtils.log(0, 0);
      long long0 = MathUtils.indicator((long) 0);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      int int0 = MathUtils.mulAndCheck(0, (-555));
      int int1 = MathUtils.gcd((-555), 0);
      long long0 = MathUtils.factorial(0);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      boolean boolean0 = MathUtils.equals(0.0, (double) 555, 716);
      float float0 = MathUtils.sign((-5967.39F));
      long long1 = MathUtils.mulAndCheck(0L, 418L);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft((-632));
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.addAndCheck(2147483647L, (long) (-632));
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (double) (-632);
      doubleArray0[5] = (double) 2147483647L;
      double double0 = MathUtils.sign((double) (-632));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-693), (-930));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -930, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 12;
      intArray0[1] = 221;
      intArray0[2] = 0;
      intArray0[3] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-5));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -5
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      double double1 = MathUtils.sign((double) 0);
      double double2 = MathUtils.factorialDouble(0);
      int int0 = MathUtils.subAndCheck(0, (-2794));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = 1649L;
      int int0 = 59;
      long long1 = MathUtils.pow(1649L, 59);
      long long2 = 0L;
      long long3 = MathUtils.sign(0L);
      long long4 = 2459L;
      long long5 = MathUtils.lcm(2459L, 1649L);
      int int1 = 91;
      boolean boolean0 = MathUtils.equals(0.6931470632553101, (double) 3324334466195483345L, 91);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-437L), (-3574L));
      int[] intArray0 = new int[8];
      intArray0[0] = 2066;
      intArray0[1] = (-1229);
      intArray0[2] = 68;
      intArray0[3] = 2203;
      intArray0[4] = 163;
      intArray0[5] = 242;
      intArray0[6] = 43;
      intArray0[7] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.lcm(168, (-1268));
      double double0 = MathUtils.log((-1033.673434), (-3574L));
      double double1 = MathUtils.cosh((-437L));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1033.673434);
      doubleArray0[1] = (-1033.673434);
      doubleArray0[2] = (double) 1561838L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-437L));
      double double2 = MathUtils.binomialCoefficientLog(0, (-1798));
      int int2 = MathUtils.compareTo(0.0, (-289.0), 0);
      short short0 = MathUtils.sign((short)5);
      // Undeclared exception!
      try { 
        MathUtils.lcm(9218868437227405312L, (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      short short0 = (short) (-1268);
      short short1 = MathUtils.indicator((short) (-1268));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = 3364.793;
      doubleArray0[4] = 3195.6391599727;
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = (double) (short) (-1268);
      doubleArray0[7] = (double) (short) (-1268);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      short short2 = MathUtils.indicator((short) (-1));
      long long0 = 2102L;
      long long1 = MathUtils.gcd((long) (short) (-1268), 2102L);
      int int0 = 0;
      float float0 = MathUtils.round((float) 2102L, 0);
      int int1 = MathUtils.indicator((int) (short) (-1));
      try { 
        MathUtils.pow(3628800L, (int) (short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (3,628,800^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = MathUtils.indicator((-9223372036854775808L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-9223372036854775808L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-9223372036854775808L);
      doubleArray0[3] = (double) (-9223372036854775808L);
      doubleArray0[4] = (-918.8232339715);
      doubleArray0[5] = (double) (-9223372036854775808L);
      doubleArray0[6] = (double) (-9223372036854775808L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 3289.79073848);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)18;
      byte byte0 = (byte)30;
      byteArray0[4] = (byte)30;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      int int0 = bigInteger1.intValue();
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (657.958 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1619.29);
      doubleArray0[1] = (-1090.312206068448);
      doubleArray0[2] = 3.834E-20;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((-2010.2F), 78);
      MathUtils.checkOrder(doubleArray0);
      int int0 = MathUtils.mulAndCheck(78, 78);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(76, 6084);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 76, k = 6,084
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals((-1147.528307134), (-773.59907387699), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 38;
      int int1 = 98;
      // Undeclared exception!
      try { 
        MathUtils.round(2591.165947119, 38, 98);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
