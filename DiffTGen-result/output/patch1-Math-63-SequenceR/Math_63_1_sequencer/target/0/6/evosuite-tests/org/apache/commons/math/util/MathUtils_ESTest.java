/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 19:33:34 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float float0 = MathUtils.indicator((-1103.011F));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = bigInteger1.negate();
      BigInteger bigInteger4 = bigInteger1.mod(bigInteger0);
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger5 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger6 = bigInteger0.modPow(bigInteger4, bigInteger4);
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, 3259L);
      byte byte0 = MathUtils.sign((byte)0);
      float float1 = MathUtils.round((float) (byte)0, (int) (byte)0);
      long long1 = MathUtils.mulAndCheck((long) (byte)0, 0L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 3259L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2.2250738585072014E-308);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = MathUtils.sign(644L);
      byte byte0 = MathUtils.sign((byte)44);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)44;
      doubleArray0[1] = (double) (byte)44;
      doubleArray0[2] = (double) (byte)44;
      doubleArray0[3] = (double) (byte)44;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.binomialCoefficientDouble(219, 219);
      double double1 = MathUtils.log((byte)44, 4.0);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      long long1 = MathUtils.lcm(1051L, (-367L));
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.3245471311735498E-8, (double) 1L, 219);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long2 = MathUtils.binomialCoefficient(766, (-984));
      int int0 = (-2147260322);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-2146913417), (-2147260322));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = MathUtils.scalb(1099.14456, 1339);
      int int0 = MathUtils.pow(1339, 15);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 15;
      doubleArray0[1] = (double) 15;
      doubleArray0[2] = (double) 1163252531;
      doubleArray0[3] = (double) 15;
      doubleArray0[5] = (double) 15;
      doubleArray0[6] = 1099.14456;
      doubleArray0[7] = (-4.081200103818758E-211);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 15;
      intArray0[1] = 15;
      int[] intArray1 = new int[9];
      intArray1[0] = 1339;
      intArray1[1] = 15;
      intArray1[2] = 1339;
      intArray1[3] = 1339;
      intArray1[5] = 1339;
      intArray1[6] = 1339;
      intArray1[7] = 1339;
      intArray1[8] = 1339;
      double double2 = MathUtils.distance(intArray0, intArray1);
      double double3 = MathUtils.factorialLog(15);
      float float0 = MathUtils.indicator(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = MathUtils.gcd((-19L), (-19L));
      int int0 = MathUtils.indicator(1073741824);
      long long1 = MathUtils.pow((-960L), 1);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.3999999761581421, 1.304E19, 1073741824);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-5034868814120038111L), (-5034868814120038111L));
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -5,034,868,814,120,038,111 + -5,034,868,814,120,038,111
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = MathUtils.round((-1485.4358118), (-19));
      float float0 = MathUtils.indicator((-3234.74F));
      float float1 = MathUtils.sign((-3234.74F));
      double double1 = MathUtils.normalizeAngle(0.0, 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1485.4358118);
      doubleArray0[3] = (double) (-1.0F);
      int int0 = MathUtils.hash((double[]) null);
      long long0 = MathUtils.gcd((long) (-19), 120L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 3186L);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = 5040L;
      int int0 = 31;
      long long1 = MathUtils.pow(5040L, 31);
      boolean boolean0 = MathUtils.equals((double) 0L, (double) 5040L, 31);
      int int1 = 4655;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(4655, 31);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      int int1 = MathUtils.gcd(0, 28);
      double double0 = MathUtils.sinh(0);
      int int2 = MathUtils.mulAndCheck(0, 28);
      double double1 = MathUtils.factorialDouble(3758);
      int int3 = MathUtils.pow((-1519), 0L);
      long long0 = MathUtils.sign((long) 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 28, (double) 28);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 1, 36.91869111);
      double double2 = MathUtils.sinh(0L);
      int int4 = MathUtils.subAndCheck(4, 3758);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.lcm((long) (-311), 0L);
      byte byte0 = MathUtils.indicator((byte) (-77));
      byte byte1 = MathUtils.sign((byte) (-1));
      float float0 = MathUtils.round((float) 0, (-4200));
      double double3 = MathUtils.cosh(0L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (byte) (-77);
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = 36.91869111;
      doubleArray0[4] = (double) (-1519);
      doubleArray0[5] = (double) 0;
      double double4 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1227.9329825;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (-1023.7426);
      doubleArray0[3] = 1.5830993332061267E-10;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 4138.8278529;
      doubleArray1[1] = 2587.26420476072;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1276.10442503275;
      doubleArray0[1] = 1237.8;
      doubleArray0[2] = (-82.02233419095921);
      doubleArray0[3] = 2985.851439933349;
      doubleArray0[4] = (-665.630124498442);
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2985.851439933349, 1989.9274766561);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1276.10442503275, 1.0, 2001.9797490404);
      double double0 = MathUtils.indicator((-658.96650551365));
      // Undeclared exception!
      try { 
        MathUtils.equals((-24.6642210049), 2985.851439933349, (-1167541329));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = MathUtils.indicator((-2145538481));
      double double0 = MathUtils.cosh((-1));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-41);
      byteArray0[8] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2579);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1347.87783624605;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (-0.1666666567325592);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 1;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger3 = bigInteger1.gcd(bigInteger0);
      int int1 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger4 = BigInteger.TEN;
      int int2 = MathUtils.gcd((-1761), (-1761));
      long long0 = MathUtils.factorial(1);
      BigInteger bigInteger5 = bigInteger1.remainder(bigInteger2);
      double double1 = MathUtils.sign(3.145894820876798E-6);
      int int3 = MathUtils.addAndCheck(20, (-2718));
      int int4 = MathUtils.gcd(1, (-1));
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(2143297520, 2187);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = MathUtils.pow(20, 20);
      double double0 = MathUtils.binomialCoefficientDouble(216, 20);
      short short0 = MathUtils.indicator((short)3813);
      double double1 = MathUtils.cosh(0);
      int int1 = 746;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(728, 746);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 728, k = 746
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = (-1485.4358118);
      int int0 = (-2144939235);
      // Undeclared exception!
      try { 
        MathUtils.round((-1485.4358118), (-2144939235));
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(1L, 1L);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.round((float) 1L, 10);
      float float1 = MathUtils.round((-35.8392F), 10, 0);
      int int0 = MathUtils.pow(10, 0);
      long long1 = MathUtils.addAndCheck(0L, (long) 1);
      long long2 = MathUtils.binomialCoefficient(20, 1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = MathUtils.pow(1732, 9);
      int int1 = MathUtils.mulAndCheck((-899), 1023);
      float float0 = MathUtils.indicator(1.0F);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1254.63534939), 417.0, 422);
      int int2 = MathUtils.pow((-3029), 1732);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.4928632496700406E7;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1023;
      doubleArray0[3] = (-1254.63534939);
      doubleArray0[4] = (double) (-899);
      doubleArray0[5] = (double) 1023;
      doubleArray0[6] = 1051.67;
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NaN);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1, 245, (-3407));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -3,407, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(1356, 1356);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2712;
      doubleArray0[1] = (double) 1356;
      doubleArray0[2] = (double) 1356;
      doubleArray0[3] = (double) 1356;
      doubleArray0[4] = (double) 1356;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1356);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-557.34751584);
      doubleArray0[1] = 2862.883;
      doubleArray0[2] = (-1401.2338);
      doubleArray0[3] = (-531.5);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 369.2028932);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      double double0 = MathUtils.indicator((-1401.2338));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,835.247 >= -1,387.707)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = 121;
      double double0 = MathUtils.scalb(1168.0, 121);
      long long0 = MathUtils.subAndCheck((long) 121, (long) 121);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.3333333333333333, (-1608.9), 0.3333333333333333);
      double double0 = MathUtils.scalb(0.5, 1);
      long long0 = MathUtils.pow((-199L), (long) 1);
      int int1 = MathUtils.addAndCheck((-798), 0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)78;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = 362880L;
      int int0 = (-2709);
      try { 
        MathUtils.pow(362880L, (-2709));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (362,880^-2,709)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = MathUtils.compareTo(3297.55130391805, 3297.55130391805, (-5087.82));
      long long0 = 187L;
      long long1 = MathUtils.pow((long) 0, 187L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      BigInteger bigInteger1 = bigInteger0.flipBit(4303);
      boolean boolean1 = bigInteger0.isProbablePrime((byte) (-77));
      int int1 = bigInteger0.intValue();
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger0.multiply(bigInteger2);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 2763L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2763L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (byte) (-77);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-5087.82));
      float float0 = MathUtils.indicator((float) 0);
      double double0 = MathUtils.binomialCoefficientDouble(0, (-1));
      // Undeclared exception!
      try { 
        MathUtils.factorial(4303);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 2432902008176640000L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(13, 13);
      long long0 = MathUtils.indicator((long) 13);
      long long1 = MathUtils.lcm(6402373705728000L, 6402373705728000L);
      int int0 = MathUtils.indicator(13);
      double double1 = MathUtils.indicator((-214.84166240331));
      int int1 = MathUtils.addAndCheck(1, 66);
      double double2 = MathUtils.cosh(0.2);
      float float0 = MathUtils.indicator((float) 1L);
      double double3 = MathUtils.binomialCoefficientDouble(67, (-2508));
      double double4 = MathUtils.round(0.2, 67, 1);
      short short0 = MathUtils.indicator((short)0);
      double double5 = MathUtils.cosh((-1.0));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (-209.624);
      doubleArray0[5] = (double) (short)0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double6 = MathUtils.factorialDouble(13);
      double double7 = MathUtils.sinh(1673.860513913);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 186);
      int[] intArray0 = new int[8];
      intArray0[0] = 186;
      intArray0[1] = 186;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 186;
      intArray0[5] = 186;
      intArray0[6] = 0;
      intArray0[7] = 186;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.pow(0, (long) 0);
      double double0 = MathUtils.binomialCoefficientDouble(0, (-2567));
      double double1 = MathUtils.normalizeAngle(0.0, 1229.5499936802537);
      long long0 = MathUtils.gcd((-606L), 479001600L);
      long long1 = MathUtils.pow((long) 186, 6L);
      double double2 = MathUtils.factorialDouble(0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-186);
      doubleArray0[1] = (double) 186;
      doubleArray0[2] = (double) 186;
      doubleArray0[3] = (double) 186;
      doubleArray0[4] = (-2022.0582289);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1229.5499936802537;
      doubleArray0[7] = 1231.5043202071988;
      doubleArray0[8] = (double) 0;
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 987.7383147;
      double double0 = 10.0;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 8.251545029714408E-9;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1799.75;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm(4499201580859392L, 0L);
      long long1 = MathUtils.sign(0L);
      String string0 = "eu8@h~R";
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("eu8@h~R");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.eu8@h~R
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 605.3;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 246.0;
      doubleArray0[3] = (-2998.783526376);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 17.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = 88;
      int int1 = 0;
      long long0 = MathUtils.binomialCoefficient(88, 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 246)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      int int0 = 0;
      int int1 = MathUtils.pow(0, 0L);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1390.9911261986952, (double) 1, (-688));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      boolean boolean0 = MathUtils.equals((double) 0, (double) 0, (-5214.6858024318));
      int int1 = (-2905);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2905), (-2747));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,905, k = -2,747
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)74;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger1.xor(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.gcd(bigInteger1);
      int int0 = (-970);
      try { 
        MathUtils.pow(bigInteger0, (-970));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-970)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = MathUtils.round(Double.NEGATIVE_INFINITY, 1617, 1617);
      int int0 = MathUtils.hash((double) 1617);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = (double) 1083786240;
      try { 
        MathUtils.normalizeArray(doubleArray0, 1.08378624E9);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.lcm(867, 867);
      double double1 = MathUtils.cosh(0.0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 867;
      doubleArray1[1] = (double) 867;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-257.0);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 1.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (double) 867;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-257.0);
      doubleArray2[1] = (-257.0);
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray2);
      long long0 = MathUtils.addAndCheck(132L, (long) 867);
      double double2 = MathUtils.normalizeAngle((-257.0), (-257.0));
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.06666666666666667;
      doubleArray0[1] = 0.9999997615814209;
      doubleArray0[2] = 3063.809050034;
      doubleArray0[3] = 1.1102230246251565E-16;
      doubleArray0[4] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.mulAndCheck((long) 2040083497, 0L);
      long long1 = MathUtils.subAndCheck((long) 2040083497, (-504L));
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, 1587.68345161);
      double double0 = MathUtils.sign(0.0);
      int int1 = MathUtils.lcm(0, 2040083497);
      boolean boolean1 = MathUtils.equals(Double.NEGATIVE_INFINITY, 481.02693, (-3720.0));
      int int2 = MathUtils.hash(1043.539650492505);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)1407);
      double double2 = MathUtils.sinh(0.0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2040083497, (-625750919));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = MathUtils.log((-768.4941708646991), (-768.4941708646991));
      float float0 = MathUtils.round(0.0F, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      float float1 = MathUtils.round((float) 0, 0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) 0);
      boolean boolean1 = MathUtils.equals((-768.4941708646991), 7.549789948768648E-8, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      long long0 = bigInteger0.longValue();
      double double0 = bigInteger0.doubleValue();
      int int0 = bigInteger0.intValue();
      long long1 = 0L;
      int int1 = bigInteger0.intValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      float float0 = bigInteger0.floatValue();
      try { 
        MathUtils.pow(1478, (-561));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,478^-561)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = MathUtils.hash((-2893.42));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-895751565);
      doubleArray0[1] = (-2893.42);
      doubleArray0[2] = (double) (-895751565);
      doubleArray0[3] = (-2893.42);
      doubleArray0[4] = (double) (-895751565);
      doubleArray0[5] = (double) (-895751565);
      doubleArray0[6] = (-2893.42);
      doubleArray0[7] = (-2893.42);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      try { 
        MathUtils.pow((-895751565), (-895751565));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-895,751,565^-895,751,565)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float float0 = MathUtils.indicator((-2293.715F));
      int int0 = MathUtils.pow(117, 752L);
      float float1 = MathUtils.sign((-1070.4291F));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-1.0F);
      doubleArray1[1] = (double) (-1.0F);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      double double1 = MathUtils.binomialCoefficientDouble(2325, (-1901489855));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathUtils.scalb((-3.141592653589793), 2522);
      double double1 = MathUtils.round((-3890.1899397), (-583));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = MathUtils.gcd((-134), (-134));
      int[] intArray0 = new int[4];
      intArray0[0] = (-2359);
      intArray0[1] = 134;
      intArray0[2] = (-134);
      intArray0[3] = (-134);
      int[] intArray1 = new int[7];
      intArray1[0] = 134;
      intArray1[1] = (-134);
      intArray1[2] = (-2359);
      intArray1[3] = (-2359);
      intArray1[4] = (-2359);
      intArray1[5] = 134;
      intArray1[6] = 134;
      int int1 = MathUtils.distance1(intArray0, intArray1);
      float float0 = MathUtils.sign(0.0F);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) (-134), 418);
      double double0 = MathUtils.sinh(0.0);
      // Undeclared exception!
      try { 
        MathUtils.lcm((long) 134, (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.375, 1.375);
      float float0 = MathUtils.round((-675.17F), 7, 7);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.2675934823758863E-8, (-824.24959724419));
      int int0 = (-2252);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2252));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,252
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1815.60541628, 1815.60541628);
      long long0 = MathUtils.sign(0L);
      double double0 = MathUtils.sinh(1815.60541628);
      double double1 = MathUtils.normalizeAngle(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double2 = MathUtils.factorialLog(2432);
      long long1 = MathUtils.sign(0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Object object0 = new Object();
      BigInteger bigInteger1 = bigInteger0.pow(1025);
      boolean boolean1 = bigInteger0.equals(object0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 2432);
      int int0 = MathUtils.addAndCheck((-50), 2016);
      double double3 = MathUtils.sinh(1400.0);
      float float0 = MathUtils.indicator((float) 2016);
      long long2 = MathUtils.subAndCheck(3952090531849364496L, 0L);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = MathUtils.hash((-679.444752473767));
      long long0 = MathUtils.addAndCheck((long) 451393190, (long) 451393190);
      double double0 = MathUtils.indicator((double) 902786380L);
      int int1 = 0;
      float float0 = MathUtils.round(0.0F, 0);
      int int2 = MathUtils.compareTo(0.0F, 0.0F, 0);
      long long1 = MathUtils.gcd(4208363204685324176L, 4208363204685324176L);
      float float1 = MathUtils.sign((float) 0);
      double double1 = MathUtils.factorialDouble(0);
      double double2 = MathUtils.sinh(2.7553817452272217E-6);
      // Undeclared exception!
      MathUtils.factorialLog(451393190);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathUtils.round((-306.9), 460, 1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = (-2203);
      int int1 = MathUtils.addAndCheck((-2203), 152);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1.1102230246251565E-16, 0.016);
      int int0 = MathUtils.gcd(322, 33);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.1102230246251565E-16;
      doubleArray0[1] = (double) 33;
      doubleArray0[2] = 0.016;
      doubleArray0[3] = 0.016;
      doubleArray0[4] = 1.1102230246251565E-16;
      doubleArray0[5] = 1.1102230246251565E-16;
      doubleArray0[6] = (double) 33;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int1 = MathUtils.pow((-3160), 140);
      int int2 = MathUtils.lcm((-3160), 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (33 >= 0.016)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 0.625;
      doubleArray0[2] = 1316.73284;
      doubleArray0[3] = 1.1102230246251565E-16;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1004.372977020764;
      doubleArray0[6] = 2.2250738585072014E-308;
      doubleArray0[7] = 2734.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(7, 7);
      int int0 = MathUtils.lcm(7, (-5458));
      long long0 = MathUtils.binomialCoefficient(816, 816);
      double double1 = MathUtils.binomialCoefficientLog(231, 7);
      double double2 = MathUtils.indicator((double) 231);
      long long1 = MathUtils.binomialCoefficient(231, 7);
      int int1 = 61;
      // Undeclared exception!
      try { 
        MathUtils.round((-2061.97F), 61, 61);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 61, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = (-2923);
      int int1 = 3464;
      int int2 = MathUtils.pow((-2923), 3464);
      int int3 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-2046042527), Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -2,046,042,527 + -2,147,483,648
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = MathUtils.lcm(2432, 2432);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(157.3073, 1136.5856122719133, 1136.5856122719133);
      int int0 = MathUtils.compareTo(157.3073, 0.5, 0.5);
      long long0 = MathUtils.addAndCheck((-303L), (long) 1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-303L);
      doubleArray0[1] = (double) (-303L);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (-303L);
      doubleArray0[4] = 1136.5856122719133;
      doubleArray0[5] = (double) (-303L);
      doubleArray0[6] = (double) 1;
      double double0 = MathUtils.safeNorm(doubleArray0);
      byte byte0 = MathUtils.sign((byte)23);
      boolean boolean1 = MathUtils.equalsIncludingNaN(Double.NaN, 2088.3769);
      int int1 = MathUtils.compareTo(0.0, (-2991.2), Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      double double1 = MathUtils.cosh(0.0);
      long long0 = 0L;
      long long1 = MathUtils.pow(0L, 0L);
      double double2 = 0.0;
      double double3 = (-2434.039685);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, (-2434.039685), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      long long0 = MathUtils.gcd(0L, 6722166367014452318L);
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
      double double2 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = MathUtils.pow(427L, 0L);
      int int0 = (-637);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (-1), (-637));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)63);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (byte)1, (double) (byte)1, 0.3999999761581421);
      double double0 = MathUtils.cosh((-1000.3));
      long long0 = MathUtils.gcd((long) (byte)63, (long) (byte)63);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.3999999761581421;
      doubleArray0[1] = (double) (byte)63;
      doubleArray0[2] = 0.3999999761581421;
      doubleArray0[3] = 1978.11539;
      doubleArray0[4] = (double) (byte)63;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float float0 = MathUtils.indicator((-1103.011F));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = bigInteger1.mod(bigInteger0);
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger4 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger5 = bigInteger0.modPow(bigInteger3, bigInteger3);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 3259L);
      byte byte0 = MathUtils.sign((byte)0);
      float float1 = MathUtils.round((float) (byte)0, (int) (byte)0);
      long long1 = MathUtils.mulAndCheck((long) (byte)0, 0L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 3259L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2.2250738585072014E-308);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = MathUtils.lcm((-1477L), (-1477L));
      int int0 = 192;
      int int1 = MathUtils.pow(192, (long) 192);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1477L);
      doubleArray0[1] = (double) (-1477L);
      doubleArray0[2] = (double) 192;
      doubleArray0[3] = (double) 1477L;
      doubleArray0[4] = (double) 1477L;
      doubleArray0[5] = (double) (-1477L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1477.0));
      double[] doubleArray2 = new double[0];
      double double0 = MathUtils.distance(doubleArray2, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1,697.688 >= -1,697.688)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1347.87783624605;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (-0.1666666567325592);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 1;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger3 = bigInteger1.gcd(bigInteger0);
      int int1 = bigInteger0.compareTo(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-1160L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,160)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-5311L), 2861L);
      long long1 = MathUtils.indicator((-4267615245585081135L));
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-15194771L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-15,194,771)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = MathUtils.pow(200, (long) 200);
      double double0 = MathUtils.scalb((-549.581), 41);
      float float0 = MathUtils.round(2141.501F, 0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, (-549.581), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 227.92027;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)0);
      long long0 = MathUtils.gcd(2152L, 2152L);
      double double1 = MathUtils.cosh((short)0);
      long long1 = MathUtils.mulAndCheck(1444L, (long) (short)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(540.2244835437, 540.2244835437, 122);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 540.2244835437;
      doubleArray1[1] = 1.0;
      double double2 = MathUtils.distance(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float float0 = MathUtils.round((-5145.93F), (-2010));
      double double0 = MathUtils.sinh((-721.2886067042));
      int int0 = MathUtils.pow((-2010), 0);
      int int1 = MathUtils.pow((-1439), 608);
      int int2 = MathUtils.mulAndCheck((-1439), 1083);
      float float1 = MathUtils.indicator((float) (-1439));
      int int3 = MathUtils.mulAndCheck((-797), 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float2 = MathUtils.round((float) (-1439), 608);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = MathUtils.sign(224);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1, (double) 1, 3);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = MathUtils.pow(335, 465L);
      short short0 = MathUtils.indicator((short) (-1394));
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 156);
      int int1 = MathUtils.addAndCheck(73, 924629583);
      int int2 = MathUtils.sign(1024);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 924629583;
      doubleArray0[1] = (double) 1024;
      doubleArray0[2] = (double) 465L;
      doubleArray0[3] = (double) 156;
      doubleArray0[4] = 3.145894820876798E-6;
      doubleArray0[5] = (double) 156;
      doubleArray0[6] = (double) 156;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (924,629,583 > 1,024)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      short short0 = MathUtils.sign((short)798);
      double double0 = MathUtils.normalizeAngle((short)1, 428.6329);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)798;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (short)798;
      doubleArray0[4] = (double) (short)798;
      doubleArray0[5] = 428.2566008882119;
      doubleArray0[6] = 428.2566008882119;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int int0 = MathUtils.sign((int) (short)1);
      long long0 = MathUtils.gcd(1607L, (-2375L));
      float float0 = MathUtils.round(913.2277F, 0);
      // Undeclared exception!
      try { 
        MathUtils.equals((-1798.02), 798.0, (-2163));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 1041);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1041;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 1041;
      doubleArray0[6] = (double) 0.0F;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      float float1 = MathUtils.round(0.0F, 4082);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 4082, 1041.0, (-2001.20893313));
      long long0 = MathUtils.gcd(39916800L, (long) 4082);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = MathUtils.compareTo(944.025611, Double.NaN, Double.NaN);
      double double0 = MathUtils.binomialCoefficientLog(1, 1);
      double double1 = MathUtils.factorialLog(1);
      int int1 = MathUtils.lcm((-1121), (-1121));
      long long0 = MathUtils.indicator((long) 1);
      double double2 = MathUtils.round((double) (-1121), 1);
      long long1 = MathUtils.sign(87178291200L);
      int int2 = MathUtils.indicator(1542);
      float float0 = MathUtils.indicator(1.0F);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2706), (-1121));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,706, k = -1,121
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = MathUtils.pow(9223372036854775807L, 0);
      long long1 = MathUtils.gcd(2047L, (long) 0);
      double double0 = MathUtils.log((-592.5156), 0.0);
      int int0 = MathUtils.compareTo(Double.NaN, 608.22141, 2047L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 9223372036854775807L;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 2.718281828459045;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = Double.NaN;
      try { 
        MathUtils.normalizeArray(doubleArray0, 1L);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 6001;
      // Undeclared exception!
      try { 
        MathUtils.factorial(6001);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-1418));
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0L);
      short short1 = MathUtils.indicator((short) (-1));
      long long0 = MathUtils.addAndCheck((long) (short) (-1), 0L);
      long long1 = MathUtils.indicator(0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialDouble(0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = MathUtils.round(955.865, 0, 0);
      long long0 = MathUtils.gcd(1351L, (long) 0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = (-1880);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1880), (-1880));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,880
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-447L), (-2025L));
      float float0 = MathUtils.round((-1.0F), (-2787));
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(6227020800L, 4503599627370495L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = MathUtils.sign(3129.45542);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3129.45542;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 3129.45542;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3129.45542;
      doubleArray0[5] = 3129.45542;
      doubleArray0[6] = 3129.45542;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 3129.45542;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.cosh(3129.45542);
      int int0 = MathUtils.pow(66, 66);
      int int1 = MathUtils.addAndCheck(66, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      int int0 = MathUtils.pow(0, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-700);
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = MathUtils.round(16.0, 13);
      double double1 = MathUtils.factorialDouble(13);
      double double2 = MathUtils.factorialLog(0);
      byte byte0 = MathUtils.indicator((byte)92);
      float float0 = MathUtils.round(668.0F, (-3044));
      long long0 = MathUtils.pow(1686L, (int) (byte)92);
      // Undeclared exception!
      try { 
        MathUtils.factorial(5113);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(1550L, 1550L);
      double double0 = MathUtils.normalizeAngle(1680.2, (-3283.8814));
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-250);
      intArray0[2] = 0;
      intArray0[3] = (-3036);
      intArray0[4] = (-118);
      intArray0[5] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 1);
      double double0 = MathUtils.round((double) 1, 1, 1);
      long long0 = MathUtils.binomialCoefficient(1, (-3938));
      float float0 = MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.19999954104423523;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.1102230246251565E-16;
      int int0 = MathUtils.hash(doubleArray0);
      byte byte0 = MathUtils.indicator((byte)0);
      long long0 = MathUtils.subAndCheck(0L, (long) 1885994164);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 1885994164;
      double double0 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 1885994164);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float float0 = MathUtils.sign(1102.0571F);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1.0F, (double) 1102.0571F);
      double double0 = MathUtils.indicator((-665.630124498442));
      byte byte0 = MathUtils.indicator((byte) (-114));
      // Undeclared exception!
      try { 
        MathUtils.round(1103.45F, 167, 167);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 167, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1921.572);
      doubleArray0[1] = (-1.0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.indicator((-1.0));
      int int0 = 0;
      int int1 = MathUtils.gcd(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1097));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,097
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      int int1 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.indicator(3157.2205F);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = MathUtils.pow((-2195L), 4091);
      long long1 = MathUtils.addAndCheck((long) 4091, (-3417371877748123115L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1800L), 0.0, (double) (-3417371877748119024L));
      float float0 = MathUtils.round((float) 3628800L, (-1797));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1797), 4091);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,797, k = 4,091
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      int int0 = 531;
      long long0 = MathUtils.binomialCoefficient(531, 531);
      short short0 = (short) (-197);
      short short1 = MathUtils.indicator((short) (-197));
      double double1 = MathUtils.round((double) 531, (int) (short) (-197));
      double double2 = MathUtils.sign(2249.896003);
      double double3 = MathUtils.sinh((-2695.236363849));
      // Undeclared exception!
      try { 
        MathUtils.round((-187.75923F), 1686, 1686);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,686, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = (-2525);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2525));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,525
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-1109), (-1109));
      byte byte0 = MathUtils.sign((byte)0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 61;
      int int1 = MathUtils.gcd(61, 61);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = (-180L);
      try { 
        MathUtils.pow((long) 61, (-180L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (61^-180)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = MathUtils.scalb((-485.71375207145286), (-381));
      long long0 = MathUtils.indicator(3561L);
      int int0 = MathUtils.gcd((-381), (-2205));
      long long1 = MathUtils.binomialCoefficient(27, (-2205));
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 27, 81);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 81, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = (-3455);
      int int1 = (-3640);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-3455), (-3640));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -3,455
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)7);
      long long0 = MathUtils.indicator((long) (byte)1);
      byte byte1 = MathUtils.sign((byte)91);
      double double0 = MathUtils.binomialCoefficientDouble(1519, (byte)1);
      int int0 = MathUtils.pow((int) (byte)91, 7);
      int int1 = MathUtils.lcm((int) (byte)91, (int) (byte)1);
      int int2 = MathUtils.lcm((-1337), (-1737));
      long long1 = MathUtils.pow((long) (-1337), (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2309), (-2309));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,309
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-2496));
      int int0 = MathUtils.sign((int) (short) (-1));
      float float0 = MathUtils.indicator((float) (short) (-1));
      double double0 = MathUtils.indicator((double) (short) (-1));
      long long0 = MathUtils.subAndCheck(1929L, (long) (short) (-1));
      double double1 = MathUtils.scalb((-1.0), (-1));
      int int1 = MathUtils.hash(346.661725);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-2496);
      doubleArray0[1] = (-1835.824962021);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1929L;
      doubleArray1[1] = (double) (short) (-1);
      doubleArray1[2] = (double) (short) (-1);
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = (double) 1929L;
      doubleArray1[5] = (-0.7853981633974483);
      doubleArray1[6] = (double) (short) (-1);
      doubleArray1[7] = (double) 746698167;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray1);
      int int2 = MathUtils.compareTo((-1.0), 0.0, (-0.7853981633974483));
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray0, (short) (-2496));
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      double[] doubleArray3 = MathUtils.normalizeArray(doubleArray2, 151.2962212330503);
      double double4 = MathUtils.sign(0.0);
      double double5 = MathUtils.indicator((-1.0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = MathUtils.factorial(15);
      long long1 = MathUtils.pow((long) 15, (long) 15);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 15;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger3 = BigInteger.ZERO;
      BigInteger bigInteger4 = bigInteger0.or(bigInteger3);
      boolean boolean0 = bigInteger0.equals("INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE");
      boolean boolean1 = bigInteger0.isProbablePrime(0);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      long long2 = MathUtils.addAndCheck(1340L, 113236205062349959L);
      double double1 = MathUtils.distanceInf(doubleArray1, doubleArray1);
      int[] intArray0 = new int[5];
      intArray0[0] = 15;
      intArray0[1] = 15;
      intArray0[2] = 0;
      intArray0[3] = 15;
      intArray0[4] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-209.1612), 2100.221780218, 500);
      long long0 = MathUtils.addAndCheck(1404L, (-1979L));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-575L);
      doubleArray0[1] = (double) 500;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.mulAndCheck(210, 500);
      double double0 = MathUtils.binomialCoefficientDouble(1285, 1285);
      short short0 = MathUtils.sign((short) (-1777));
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1285;
      doubleArray1[1] = (double) 210;
      doubleArray1[2] = (double) 1404L;
      doubleArray1[3] = (double) 1285;
      doubleArray1[4] = (double) 105000;
      doubleArray1[5] = (double) (short) (-1);
      doubleArray1[6] = 2100.221780218;
      doubleArray1[7] = (double) 1404L;
      double double1 = MathUtils.distance1(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1947.3105617723124);
      doubleArray0[1] = 7.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 7.0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-5558));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -5,558
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = MathUtils.scalb((-492), (-492));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      int int0 = MathUtils.mulAndCheck(0, 3);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.pow(0, 0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 2010;
      intArray0[2] = 12;
      intArray0[3] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.indicator(1123);
      double double0 = MathUtils.factorialLog(12);
      long long0 = MathUtils.subAndCheck(4503599627370496L, (long) 12);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.gcd(0, 0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = (-324.485721462);
      int int0 = (-1358);
      // Undeclared exception!
      try { 
        MathUtils.equals((-324.485721462), (-324.485721462), (-1358));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2858.5;
      doubleArray0[2] = 1528.08281067303;
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = 14.0;
      doubleArray0[5] = 1619.3762739464;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.normalizeAngle(2858.5, 0.0);
      boolean boolean0 = MathUtils.equals((-0.3493147667118137), 1619.3762739464);
      long long0 = MathUtils.subAndCheck((-970L), (-578L));
      double double2 = MathUtils.sign(0.0);
      boolean boolean1 = MathUtils.equals((-1823.20925847), 14.0, 12);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 11.0;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = (-3784.0);
      doubleArray0[3] = (-1316.7908937);
      doubleArray0[4] = (-1636.66206036607);
      doubleArray0[5] = 1471.93804;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow(2054, 2054);
      short short0 = MathUtils.sign((short) (-2169));
      short short1 = MathUtils.sign((short) (-2382));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.26E18, 528.02047);
      int int0 = MathUtils.indicator(1040);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = MathUtils.round(2.0, (-1575));
      double double1 = MathUtils.sign((-860.84));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 1657;
      int int1 = MathUtils.subAndCheck(1657, 3162);
      int[] intArray0 = new int[9];
      int int2 = 0;
      intArray0[0] = 0;
      intArray0[1] = (-1505);
      intArray0[2] = 1657;
      intArray0[3] = 1657;
      intArray0[4] = 203;
      intArray0[5] = 3162;
      intArray0[6] = (-1505);
      intArray0[7] = 3162;
      intArray0[8] = 3162;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.indicator((long) 0);
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int3 = MathUtils.subAndCheck(3162, 1432);
      long long1 = MathUtils.mulAndCheck((long) 203, 87178291200L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1037.233, 0.0, (-1505));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1998.774771;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = Double.NaN;
      MathUtils.checkOrder(doubleArray0);
      double double0 = MathUtils.indicator((-1693.525590531));
      double double1 = MathUtils.round(0.0, 1263, 0);
      long long0 = MathUtils.sign((long) 1263);
      int int0 = MathUtils.compareTo(0.1111111111111111, 1L, 1L);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.hash((-530.716558110939));
      int int2 = 582;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(582, 1263);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 582, k = 1,263
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0952233225107193, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0952233225107193;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0952233225107193;
      doubleArray0[3] = (double) 0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.subAndCheck((-943), 61);
      long long0 = MathUtils.sign((long) (-1004));
      double double2 = MathUtils.binomialCoefficientLog(2894, 0);
      boolean boolean0 = MathUtils.equals((double) 2894, (-679.1913751883), 0.0952233225107193);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(63, 4789);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 63, k = 4,789
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = 886L;
      long long1 = MathUtils.pow(886L, 886L);
      double double0 = 0.0;
      int int0 = (-1231);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 0.0, (-1231));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = MathUtils.indicator((-665.630124498442));
      byte byte0 = MathUtils.indicator((byte) (-114));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1569, 0);
      double double1 = MathUtils.cosh(0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1274.3414);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 2807L);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 365.7);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathUtils.checkOrder(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, Double.POSITIVE_INFINITY, 981);
      short short0 = MathUtils.indicator((short) (-2437));
      short short1 = MathUtils.indicator((short)0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow((long) (short) (-1), 121645100408832000L);
      double double1 = MathUtils.round(897.21638521784, (int) (short)1);
      short short2 = MathUtils.indicator((short)19);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)20);
      byte byte1 = MathUtils.indicator((byte)20);
      long long0 = MathUtils.indicator((long) (byte)1);
      byte byte2 = MathUtils.indicator((byte)20);
      double double0 = MathUtils.factorialDouble(203);
      int int0 = MathUtils.hash((double) (byte)1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 203;
      doubleArray0[2] = (double) 1L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (203 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = MathUtils.lcm(2003, 2003);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2003;
      doubleArray0[1] = (double) 2003;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.round(5383.066F, (-978), 2003);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,003, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-470.45717399), (-470.45717399), (-470.45717399));
      double double0 = MathUtils.indicator(912.0643006490075);
      long long0 = MathUtils.addAndCheck(0L, 5982L);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      int int0 = MathUtils.subAndCheck((int) (byte)0, (int) (byte)0);
      int int1 = MathUtils.gcd(0, 158);
      long long0 = MathUtils.lcm((long) 158, (long) 158);
      boolean boolean0 = MathUtils.equals(0.5, (-2883.7));
      int int2 = MathUtils.subAndCheck(158, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = bigInteger0.toString();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int int3 = MathUtils.hash((double) 158);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-3984L), (-2147483648L));
      int int0 = 2887;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1903), 2887);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,903, k = 2,887
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1694, 1694);
      int int0 = MathUtils.sign(1694);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = MathUtils.sign(40320L);
      double double0 = MathUtils.binomialCoefficientDouble(7, 0);
      double double1 = MathUtils.factorialDouble(6);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 13);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 4612.5021658, 1366);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.008333333333329196;
      doubleArray0[3] = 1850.73933058592;
      doubleArray0[4] = 1.5707963267948966;
      doubleArray0[5] = 779.09818;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.5707963267948966;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 779.09818;
      doubleArray1[3] = 0.008333333333329196;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.1102230246251565E-16;
      doubleArray0[1] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = 2;
      int int1 = MathUtils.pow(2, (long) 2);
      long long0 = MathUtils.subAndCheck(0L, 9154082963658192752L);
      long long1 = MathUtils.lcm(0L, (-9154082963658192752L));
      double double1 = MathUtils.normalizeAngle((-3517.096462019252), 2983.5322056059244);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1353.464589437173);
      double double2 = MathUtils.cosh(0.0);
      double double3 = MathUtils.factorialLog(2);
      double double4 = MathUtils.round((double) 0L, 194);
      long long2 = MathUtils.addAndCheck(4503599627370496L, 94L);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) (-9154082963658192752L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray2, mathUtils_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0L, 8, 8);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 8, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.indicator(9218868437227405312L);
      double double0 = MathUtils.log(9218868437227405312L, 1L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 9218868437227405312L;
      doubleArray0[6] = (-3140.117808288);
      doubleArray0[7] = (double) 1L;
      int int0 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.008333333333329196, (-2133), 249937972);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float float0 = MathUtils.indicator(1.0F);
      int int0 = (-778);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-778));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -778
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0.0F;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)255);
      short short1 = MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-2298L), (-3413L));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      double double0 = MathUtils.round((double) 0L, 647);
      long long1 = MathUtils.addAndCheck((long) 647, 0L);
      double double1 = MathUtils.factorialDouble(647);
      long long2 = MathUtils.sign(647L);
      long long3 = MathUtils.pow(1L, 0);
      short short0 = MathUtils.indicator((short) (-2081));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short) (-1), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long long0 = MathUtils.indicator(441L);
      double double0 = MathUtils.log(0.0, 441L);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-292L), (-292L));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 85264L;
      doubleArray0[1] = (double) 85264L;
      doubleArray0[2] = (double) 85264L;
      doubleArray0[3] = (double) 85264L;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-292L);
      doubleArray1[1] = (double) (-292L);
      doubleArray1[2] = (-0.25);
      doubleArray1[3] = (double) (-292L);
      doubleArray1[4] = (double) 85264L;
      doubleArray1[5] = (double) (-292L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1417.21958568876;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-3124.92729);
      doubleArray0[3] = 839.5074;
      doubleArray0[4] = 808.29551359484;
      doubleArray0[5] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float float0 = MathUtils.round((-2732.09F), 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2732.09F);
      doubleArray0[1] = (double) (-2732.09F);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-748));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -748
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      int int1 = MathUtils.sign(10);
      int int2 = 36;
      int int3 = MathUtils.pow(36, 963L);
      try { 
        MathUtils.pow((long) 36, (-961L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (36^-961)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 2230, 0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        MathUtils.pow((-302932621132653753L), (-302932621132653753L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-302,932,621,132,653,753^-302,932,621,132,653,753)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = MathUtils.sign((-844));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.5;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      try { 
        MathUtils.pow((-2101), (long) (-2101));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,101^-2,101)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(27);
      int int0 = MathUtils.pow(27, (long) 27);
      boolean boolean0 = MathUtils.equals(0.0, (double) 27, (-1340.40506));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = MathUtils.sign(2146824910);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 2146824910;
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(5648769086999809661L, 5648769086999809661L);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 5,648,769,086,999,809,661 + 5,648,769,086,999,809,661
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = MathUtils.cosh(16.0);
      int[] intArray0 = new int[7];
      intArray0[0] = 61;
      intArray0[1] = (-550);
      intArray0[2] = 2270;
      intArray0[3] = 63;
      intArray0[4] = 78;
      intArray0[5] = 19;
      intArray0[6] = 1513;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = MathUtils.factorialLog(20);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 20;
      doubleArray0[1] = (double) 20;
      doubleArray0[2] = 42.335616460753485;
      doubleArray0[3] = (double) 20;
      doubleArray0[4] = 42.335616460753485;
      doubleArray0[5] = 42.335616460753485;
      doubleArray0[6] = 0.14285714285714285;
      doubleArray0[7] = 42.335616460753485;
      doubleArray0[8] = 42.335616460753485;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      float float0 = MathUtils.round(301.9851F, 20);
      short short0 = MathUtils.sign((short)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 20;
      intArray0[2] = 861;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)38;
      byteArray0[8] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,706,107,618,061,373,659,648^-1,706,107,618,061,373,659,648)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = MathUtils.pow((-2395), 2641);
      int int1 = MathUtils.lcm(0, 0);
      double double0 = MathUtils.factorialDouble(2641);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.scalb(Double.POSITIVE_INFINITY, 2641);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 2641;
      doubleArray1[2] = 1.1102230246251565E-16;
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray1, (-89.59956315585));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double double0 = MathUtils.log(319.0, 0.0);
      long long0 = MathUtils.sign((-63L));
      long long1 = MathUtils.lcm((-548L), (-63L));
      int int0 = MathUtils.addAndCheck((-771), 935);
      byte byte0 = MathUtils.indicator((byte)64);
      long long2 = MathUtils.addAndCheck(720L, 4398046511103L);
      long long3 = MathUtils.lcm(2654L, (long) (byte)1);
      double double1 = MathUtils.factorialDouble(935);
      int int1 = MathUtils.hash((-419.31251704));
      double double2 = MathUtils.cosh(0.0);
      double double3 = MathUtils.scalb(0.0, (-777775390));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 34524L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1528.1829825, 300.25, (-4572.95));
      int int2 = MathUtils.gcd(0, 156);
      int[] intArray0 = new int[1];
      intArray0[0] = 156;
      double double4 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 156, (-2461), 156);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 156, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double double0 = MathUtils.scalb(1099.14456, 1339);
      int int0 = MathUtils.pow(1339, 15);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 15;
      doubleArray0[1] = (double) 15;
      doubleArray0[2] = (double) 1163252531;
      doubleArray0[3] = (double) 15;
      doubleArray0[4] = (double) 15;
      doubleArray0[5] = (double) 15;
      doubleArray0[6] = 1099.14456;
      doubleArray0[7] = (-4.081200103818758E-211);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 15;
      intArray0[1] = 15;
      int[] intArray1 = new int[9];
      intArray1[0] = 1339;
      intArray1[1] = 15;
      intArray1[2] = 1339;
      intArray1[3] = 1339;
      intArray1[4] = 1163252531;
      intArray1[5] = 1339;
      intArray1[6] = 1339;
      intArray1[7] = 1339;
      intArray1[8] = 1339;
      double double2 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double double0 = MathUtils.round((-1485.4358118), (-19));
      float float0 = MathUtils.indicator((-3234.74F));
      float float1 = MathUtils.sign((-3234.74F));
      double double1 = MathUtils.normalizeAngle(0.0, 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1485.4358118);
      doubleArray0[3] = (double) (-1.0F);
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = (-379);
      int int1 = MathUtils.indicator((-379));
      double double0 = 20.0;
      double double1 = MathUtils.sinh(20.0);
      int int2 = MathUtils.compareTo((-1), (-379), 1209.25032);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1516));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,516
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck((-5034868814120038111L), (-3958705157555305932L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.round((-760.7172F), 3876);
      double double0 = MathUtils.cosh(Float.NaN);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.lcm(73, 73);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-8993573971675344043L), 875, 1062);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = MathUtils.cosh((-859.2868096194));
      long long0 = MathUtils.lcm((-513L), (-513L));
      double double1 = MathUtils.binomialCoefficientLog(1124, (-6065));
      int int0 = MathUtils.compareTo(1.0, 513L, 0.0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-6065);
      intArray0[2] = 1124;
      intArray0[3] = (-6065);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.mulAndCheck(1124, 0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-6065), (-2712), 4194304);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
