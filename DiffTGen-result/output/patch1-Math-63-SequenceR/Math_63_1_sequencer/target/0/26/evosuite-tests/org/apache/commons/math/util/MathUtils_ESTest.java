/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 19:43:42 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = bigInteger0.bitCount();
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = bigInteger1.toByteArray();
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      String string0 = bigInteger3.toString(0);
      BigInteger bigInteger4 = bigInteger3.subtract(bigInteger0);
      BigInteger bigInteger5 = bigInteger0.min(bigInteger3);
      int int1 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 0L);
      int int2 = MathUtils.compareTo(0L, 224.9549246089866, 0.0);
      float float0 = MathUtils.round(Float.NaN, (-1));
      int int3 = MathUtils.lcm((-1), (-1));
      boolean boolean0 = MathUtils.equalsIncludingNaN(224.9549246089866, 0.0);
      int int4 = MathUtils.compareTo(0, (-1), (-3371.378634476402));
      float float1 = MathUtils.indicator(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float float0 = MathUtils.sign((-0.184045F));
      int int0 = MathUtils.subAndCheck(1207, 224);
      double double0 = MathUtils.normalizeAngle(983, (-230.59365309646));
      double double1 = MathUtils.normalizeAngle((-0.184045F), (-230.59365309646));
      double double2 = MathUtils.log((-2187.542573955), (-1488.0207626360266));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = MathUtils.lcm(0, (-1024));
      double double0 = MathUtils.sinh(0.0);
      double double1 = MathUtils.sign(0.0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1024);
      intArray0[2] = 0;
      intArray0[3] = (-1024);
      intArray0[4] = 0;
      double double2 = MathUtils.distance(intArray0, intArray0);
      double double3 = MathUtils.scalb((-1086.60561138833), 1827);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(1273, (-553));
      long long0 = MathUtils.pow((long) 1273, 1826);
      long long1 = MathUtils.indicator(2147483647L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, (double) 1273, 14);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 5);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(0, 0);
      int int1 = MathUtils.subAndCheck(0, 1803);
      double double0 = MathUtils.cosh((-1803));
      int[] intArray0 = new int[0];
      boolean boolean0 = MathUtils.equals(0.0, (double) (-1803), 0.0);
      float float0 = MathUtils.indicator((float) (-1803));
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-9223372036854775808L), (long) (-1803));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      long long0 = MathUtils.gcd(1014L, 1014L);
      int int0 = 0;
      double double0 = MathUtils.scalb(228.1049958402, 0);
      float float1 = MathUtils.round((-6.986656F), 0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-3635L), (-3635L));
      int int0 = MathUtils.pow(260, 260);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-3635L);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.factorialDouble(0);
      int int1 = MathUtils.indicator(0);
      double double2 = MathUtils.log(0.0, 5399.92408213);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = MathUtils.scalb(2.4384203044354907E-8, 2277);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2277;
      doubleArray0[1] = (-1.9841269659586505E-4);
      doubleArray0[2] = 2.4384203044354907E-8;
      doubleArray0[3] = (double) 2277;
      doubleArray0[4] = (-2136.5014);
      doubleArray0[5] = (double) 2277;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2277);
      int int0 = MathUtils.gcd(2277, 61);
      int int1 = MathUtils.pow(1, 242);
      long long0 = MathUtils.pow((long) 1, 0L);
      int int2 = MathUtils.lcm(731, 242);
      boolean boolean0 = MathUtils.equalsIncludingNaN(270.7375490146977, 0.1538461446762085, 95.926816);
      double double1 = MathUtils.log(1, 2277);
      double[] doubleArray2 = new double[0];
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray2);
      double double2 = MathUtils.distanceInf(doubleArray2, doubleArray0);
      long long1 = MathUtils.subAndCheck((long) 61, (long) 242);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      double double0 = MathUtils.indicator(0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int1 = bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.shiftLeft(0);
      byte[] byteArray0 = bigInteger0.toByteArray();
      String string0 = bigInteger0.toString();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int2 = MathUtils.subAndCheck(1, (-584));
      long long0 = MathUtils.sign((long) 585);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      MathUtils.OrderDirection mathUtils_OrderDirection1 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection1, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = 1781.0;
      double double1 = MathUtils.sign(1781.0);
      long long0 = 306783416L;
      long long1 = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(306783416L, (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-60.44299);
      doubleArray0[1] = 1.44888888888888883E18;
      doubleArray0[2] = (-1422.56731862);
      doubleArray0[3] = (-0.1666666567325592);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-797.1));
      int int0 = MathUtils.pow(425, 9218872835273916415L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray1);
      int int1 = MathUtils.sign((-2099));
      byte byte0 = MathUtils.indicator((byte)89);
      double double0 = MathUtils.factorialLog(3070);
      boolean boolean2 = MathUtils.equalsIncludingNaN((-60.44299), (double) 9218872835273916415L, 735);
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.distance(doubleArray1, doubleArray0);
      boolean boolean3 = MathUtils.equalsIncludingNaN((double) (byte)1, (-792.882988671354));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = 2L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-7278142539171889152L), 2L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = MathUtils.indicator((-2843.39));
      byte byte0 = MathUtils.indicator((byte)55);
      int int0 = MathUtils.mulAndCheck((int) (byte)1, (int) (byte)55);
      double double1 = MathUtils.factorialDouble((byte)55);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 55;
      doubleArray0[1] = (double) 55;
      doubleArray0[2] = 1.2696403353658648E73;
      doubleArray0[3] = (double) (byte)55;
      doubleArray0[4] = (-2843.39);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator(6227020800L);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)55;
      intArray0[1] = 2219;
      intArray0[2] = 1;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = 55;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = (int) (byte)1;
      intArray0[7] = (int) (byte)55;
      intArray0[8] = (-205);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.sign(55);
      double double2 = MathUtils.distance(intArray0, intArray0);
      int int3 = MathUtils.gcd(0, 1);
      int int4 = MathUtils.indicator(0);
      double double3 = MathUtils.normalizeAngle(0.0, 1981.909207);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1979.2033717615698);
      double double4 = MathUtils.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = MathUtils.pow(3170, 3170);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 3170;
      intArray1[2] = 1131;
      double double0 = MathUtils.distance(intArray0, intArray1);
      double double1 = MathUtils.binomialCoefficientLog(0, (-639));
      int int1 = MathUtils.compareTo(0.0, (-1657.021371), 0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2187.863), 1.1430250008909141E-8, (-1130.568109661149));
      double double2 = MathUtils.cosh((-2124));
      long long0 = MathUtils.pow((-1267L), 455L);
      double double3 = MathUtils.indicator(0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2187.863);
      doubleArray0[1] = (-1130.568109661149);
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 2363.9804;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 3170;
      doubleArray0[6] = 0.0;
      double double4 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = MathUtils.indicator((-49L));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-49L);
      doubleArray0[1] = (double) (-49L);
      int int0 = MathUtils.compareTo((-49L), (-1L), (-4195.75367459365));
      long long1 = MathUtils.gcd((-1L), (-49L));
      long long2 = MathUtils.factorial(0);
      byte byte0 = MathUtils.indicator((byte)0);
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.indicator((-4195.75367459365));
      double double1 = MathUtils.scalb((-4195.75367459365), (byte)0);
      byte byte1 = MathUtils.sign((byte)3);
      int int3 = MathUtils.pow((-1), (int) (byte)1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int4 = bigInteger0.signum();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger1.min(bigInteger2);
      BigInteger bigInteger4 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, (int) (byte)0);
      long long3 = MathUtils.pow(3540L, (long) 418411615);
      int int5 = MathUtils.hash(doubleArray0);
      double double2 = MathUtils.factorialLog(0);
      int int6 = MathUtils.sign(19);
      double double3 = MathUtils.cosh(0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1425);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 13;
      intArray0[4] = 0;
      intArray0[5] = 1278;
      intArray0[6] = (-1110);
      intArray0[7] = 2318;
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 2318;
      intArray1[2] = 2318;
      intArray1[3] = 2318;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 13;
      intArray1[7] = 13;
      intArray1[8] = (-410);
      double double0 = MathUtils.distance(intArray0, intArray1);
      boolean boolean0 = MathUtils.equals(0.75, 3439.6581795008, 13);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 13, (double) 0, (double) 2318);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.145894820876798E-6;
      doubleArray0[1] = (double) 1278;
      doubleArray0[2] = (double) 2318;
      doubleArray0[3] = (double) (-1425);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte byte0 = (byte)116;
      byte byte1 = MathUtils.sign((byte)116);
      long long0 = MathUtils.gcd((long) (byte)116, (-4567023856107126784L));
      boolean boolean0 = MathUtils.equals((double) 4L, (double) (-4567023856107126784L), (-0.16624882440418567));
      int int0 = (-1);
      int int1 = MathUtils.mulAndCheck((-1), (-1));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)116;
      doubleArray0[1] = (double) 4L;
      doubleArray0[2] = (double) (byte)1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.0, (double) 4L, 95.926816);
      int int2 = 1811;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1), 1811);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1, k = 1,811
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 313;
      int int1 = MathUtils.indicator(313);
      double[] doubleArray0 = null;
      int int2 = MathUtils.hash((double[]) null);
      int[] intArray0 = new int[4];
      intArray0[0] = 313;
      intArray0[1] = 313;
      int int3 = (-664);
      intArray0[2] = (-664);
      intArray0[3] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(61);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float float0 = (-1430.7437F);
      float float1 = MathUtils.sign((-1430.7437F));
      int int0 = MathUtils.hash((double) (-1.0F));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 2950;
      int int1 = 2591;
      double double0 = MathUtils.binomialCoefficientLog(2950, 2591);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-65));
      float float0 = MathUtils.round(Float.NaN, 1519);
      int int0 = MathUtils.indicator(104);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.factorialDouble(0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      double double0 = MathUtils.indicator(0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(0);
      byte[] byteArray0 = bigInteger0.toByteArray();
      String string0 = bigInteger0.toString();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int1 = MathUtils.subAndCheck(1, (-584));
      long long0 = MathUtils.sign((long) 585);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-183.20248710566), (-183.20248710566));
      double double0 = MathUtils.indicator((-183.20248710566));
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
      double double2 = MathUtils.factorialDouble(0);
      int int0 = (-601);
      int int1 = MathUtils.addAndCheck((-601), 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-601);
      doubleArray0[1] = (-183.20248710566);
      doubleArray0[2] = (double) (-601);
      doubleArray0[3] = (double) (-601);
      doubleArray0[4] = (double) (-601);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-183.20248710566);
      doubleArray0[8] = 0.0;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-601);
      intArray0[1] = 0;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-9223372036854775808L), (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -9,223,372,036,854,775,808 + -9,223,372,036,854,775,808
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 212;
      int int1 = (-1195);
      double double0 = MathUtils.binomialCoefficientLog(212, (-1195));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1195);
      doubleArray0[1] = (double) 212;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-1195);
      boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
      int int2 = MathUtils.indicator((-1195));
      double double1 = 1.0;
      double double2 = MathUtils.sinh(1.0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (212 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = MathUtils.round(1310.54, 2146, 0);
      boolean boolean0 = MathUtils.equals(2238.1101060845, (double) 0, (double) 2146);
      long long0 = MathUtils.indicator((long) 2146);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 1L, (-2.957007209750105E-8), 2146);
      int int0 = MathUtils.subAndCheck((-901), 4194304);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = MathUtils.hash(0.3333333134651184);
      double double0 = MathUtils.normalizeAngle((-1413.8894388133606), (-1413.8894388133606));
      int int1 = 31;
      // Undeclared exception!
      try { 
        MathUtils.lcm(2144687445, 31);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = 859;
      int int1 = MathUtils.subAndCheck(859, 859);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-2741.6451992), (-1516.82));
      double double1 = MathUtils.cosh((-0.16624882440418567));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1516.424064299981);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(0.0, (-3599.774), 452);
      int int0 = MathUtils.sign(452);
      double double3 = MathUtils.sign((-0.16624882440418567));
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1516.424064299981), Double.POSITIVE_INFINITY);
      double double4 = MathUtils.factorialLog(2394);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 452);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 452
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)52);
      boolean boolean0 = MathUtils.equals((double) (byte)1, (double) (byte)1, 7);
      double double0 = MathUtils.normalizeAngle(1.0, 33.90225);
      int int0 = MathUtils.subAndCheck(7, (-2795));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.clearBit((byte)52);
      BigInteger bigInteger3 = bigInteger0.max(bigInteger1);
      int int1 = bigInteger0.intValueExact();
      long long0 = 0L;
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0L);
      int int2 = MathUtils.pow((int) (byte)52, 0L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 2802);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 2,802
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = MathUtils.gcd(1344, (-3886));
      int int1 = MathUtils.lcm((-3886), 2);
      boolean boolean0 = MathUtils.equals(2713.0, (double) 2, 99);
      Random.setNextRandom((-6451));
      // Undeclared exception!
      try { 
        MathUtils.lcm((long) 1344, 407654095044913992L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = (-45);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-45));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -45
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = MathUtils.pow(4767, 0L);
      double double0 = MathUtils.indicator(0.0);
      long long0 = MathUtils.mulAndCheck(3226L, 435L);
      int int1 = MathUtils.addAndCheck(4767, 31);
      int int2 = MathUtils.sign(4798);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-91);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.sign(711.05106960582);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals((-324.9401753), 1.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      double double0 = MathUtils.round((double) 0, 0, 0);
      double double1 = MathUtils.cosh(0.0);
      // Undeclared exception!
      try { 
        MathUtils.lcm(2300L, 9223372036854775807L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-1498.9521052855);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 67.385;
      doubleArray0[4] = 972.70980682909;
      doubleArray0[5] = (-502.0862454713787);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1705.3604;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2 >= -1,498.952)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(293L, 293L);
      long long1 = MathUtils.pow(4499201580859392L, 586L);
      double double0 = MathUtils.cosh(0L);
      short short0 = MathUtils.indicator((short)935);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)935, 0.0, (-1513.373581));
      byte byte0 = MathUtils.indicator((byte) (-49));
      double double1 = MathUtils.log(444.98, 0L);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 4499201580859392L;
      doubleArray0[2] = (double) (short)1;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double3 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.hash((-244.4392));
      long long2 = MathUtils.mulAndCheck((long) (byte) (-1), (long) (byte) (-49));
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (short)1, 0.0, (-2094.0));
      float float0 = MathUtils.sign(0.0F);
      double double4 = MathUtils.binomialCoefficientLog(759562986, 310);
      long long3 = MathUtils.addAndCheck((-997L), 0L);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.9999997615814209;
      double double0 = (-473.5959);
      doubleArray0[1] = (-473.5959);
      doubleArray0[2] = 809.7222267726453;
      doubleArray0[3] = (-1383.73616);
      double double1 = 2079.774417316;
      doubleArray0[4] = 2079.774417316;
      int int0 = MathUtils.hash(doubleArray0);
      double double2 = MathUtils.normalizeAngle(1.304E19, 1.633123935319537E16);
      double double3 = MathUtils.binomialCoefficientLog(155059748, 160);
      byte byte0 = MathUtils.indicator((byte) (-16));
      // Undeclared exception!
      try { 
        MathUtils.factorial((byte) (-16));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -16
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.indicator(2075.1494);
      int int0 = (-1959);
      int int1 = MathUtils.mulAndCheck(408, (-1959));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-799272);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 408;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int2 = MathUtils.sign(0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0);
      int int3 = MathUtils.addAndCheck(0, (-799272));
      long long0 = MathUtils.gcd((-2671L), (long) 0);
      long long1 = MathUtils.subAndCheck((-3958705157555305932L), 565L);
      double double2 = MathUtils.safeNorm(doubleArray1);
      double double3 = MathUtils.distanceInf(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 565L, (-799272), (-1924));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,924, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = (double) 0L;
      doubleArray1[5] = (double) 0L;
      doubleArray1[6] = (double) 0L;
      doubleArray1[7] = (double) 0L;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigInteger bigInteger0 = null;
      long long0 = (-1267L);
      try { 
        MathUtils.pow((BigInteger) null, (-1267L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-1,267)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      double double0 = MathUtils.cosh(0.0F);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-392.0), (double) 0.0F, (-844.0));
      int int0 = MathUtils.subAndCheck(17, 17);
      float float1 = MathUtils.indicator(1182.189F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0.0F;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-844.0);
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = 1.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = 2184;
      // Undeclared exception!
      try { 
        MathUtils.round(1.0F, 2184, 149);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 149, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.valueOf(2761L);
      float float0 = bigInteger0.floatValue();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)99;
      byteArray0[0] = (byte)99;
      byte byte1 = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigInteger bigInteger3 = bigInteger2.or(bigInteger1);
      int int0 = 0;
      BigInteger bigInteger4 = bigInteger2.setBit(0);
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger2);
      BigInteger bigInteger5 = bigInteger0.not();
      int int1 = bigInteger0.bitLength();
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, bigInteger0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      double double0 = MathUtils.binomialCoefficientDouble(3199, 12);
      double double1 = MathUtils.normalizeAngle((-1366.6), 12);
      byte byte0 = MathUtils.sign((byte)0);
      double double2 = MathUtils.round((-395.2620588), 1796);
      byte byte1 = MathUtils.indicator((byte) (-6));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.34889193673047E33;
      doubleArray0[1] = (double) 3199;
      doubleArray0[2] = 9.417582272329582;
      doubleArray0[3] = (double) 1796;
      doubleArray0[4] = (double) 12;
      doubleArray0[5] = (-1366.6);
      doubleArray0[6] = 9.417582272329582;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (-1366.6);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, 1.1102230246251565E-16, 1.1102230246251565E-16);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.negate();
      BigInteger bigInteger2 = BigInteger.ONE;
      String string0 = bigInteger2.toString(0);
      BigInteger bigInteger3 = bigInteger0.modInverse(bigInteger2);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0L);
      double double0 = MathUtils.log(0.0, 0L);
      double double1 = MathUtils.binomialCoefficientDouble(0, (-1279));
      long long0 = MathUtils.sign((long) 0);
      double double2 = MathUtils.round(0.0, 3575, 0);
      long long1 = MathUtils.pow(1609L, (long) 3575);
      long long2 = MathUtils.binomialCoefficient(3575, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0, (double) (-1279));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1.01, 2147.91400073);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      int int0 = 930;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (byte)0, 114.3754701, 930);
      long long0 = MathUtils.pow(4556L, 1);
      int int1 = MathUtils.lcm(930, 1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 930;
      doubleArray0[1] = (double) 4556L;
      doubleArray0[2] = (double) 4556L;
      doubleArray0[3] = (double) 930;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 4556L;
      doubleArray0[6] = (double) 930;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (4,556 >= 4,556)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathUtils.round(2092.38, (-3199));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2338.7), 0.0);
      int int0 = MathUtils.gcd(693, (-542));
      double double1 = MathUtils.scalb((-238.749), 693);
      double double2 = MathUtils.scalb((-9.811345205927911E210), 255);
      float float0 = MathUtils.sign((-585.3F));
      int int1 = MathUtils.subAndCheck(1, 1188);
      long long0 = MathUtils.pow((long) 693, 1251);
      float float1 = MathUtils.sign((float) (-1243743604093067891L));
      boolean boolean1 = MathUtils.equalsIncludingNaN(14.0, 3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathUtils.sign((-0.09088450866185192));
      byte byte0 = MathUtils.sign((byte) (-73));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-73);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-0.09088450866185192);
      MathUtils.checkOrder(doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (byte) (-1);
      doubleArray1[1] = (double) (byte) (-73);
      doubleArray1[2] = (double) (byte) (-1);
      doubleArray1[3] = (double) (byte) (-73);
      doubleArray1[4] = (double) (byte) (-1);
      doubleArray1[5] = (double) (byte) (-73);
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = (-0.09088450866185192);
      doubleArray1[8] = 0.19999999999923582;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-73 <= -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      short short0 = MathUtils.indicator((short)66);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-3138L), (-3138L));
      int int0 = MathUtils.addAndCheck(0, 636);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(90, 90);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(90, 111);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 90, k = 111
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 478;
      long long0 = MathUtils.binomialCoefficient(478, 0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.sign(358);
      short short0 = MathUtils.sign((short)0);
      int int1 = MathUtils.subAndCheck(1799, 67);
      int int2 = MathUtils.lcm(358, 1732);
      double double0 = MathUtils.indicator(1260.599876302789);
      int int3 = MathUtils.indicator((int) (short)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = MathUtils.pow(1187L, 1187L);
      byte byte0 = (byte) (-8);
      byte byte1 = MathUtils.sign((byte) (-8));
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1187L, (int) (byte) (-1), (int) (byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(60, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger1);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) 60);
      int int0 = MathUtils.hash(0.0);
      byte byte0 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = MathUtils.sign(4503599627370495L);
      int int0 = MathUtils.hash(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      double double0 = MathUtils.factorialDouble((short)0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      double double1 = MathUtils.log((short)0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double2 = MathUtils.factorialDouble((short)0);
      int int0 = MathUtils.gcd(84, (-1686));
      double double3 = MathUtils.round((double) 0, 84, 0);
      int int1 = MathUtils.sign(84);
      byte byte0 = MathUtils.indicator((byte)0);
      double double4 = MathUtils.cosh((-344.2317983601));
      double double5 = MathUtils.sign((double) 0);
      int int2 = MathUtils.sign(0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = MathUtils.indicator((-1175L));
      // Undeclared exception!
      try { 
        MathUtils.round(3790.7974959197, 66, 66);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = MathUtils.lcm((-1119), (-523));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 585237;
      doubleArray0[1] = (double) (-523);
      doubleArray0[2] = (double) 585237;
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      try { 
        MathUtils.pow((-1119), (-528L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,119^-528)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      short short0 = (short)1176;
      short short1 = MathUtils.indicator((short)1176);
      int int0 = (-4390);
      int int1 = MathUtils.pow((-4390), (long) (short)1176);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      long long0 = MathUtils.gcd(1014L, 1014L);
      int int0 = 0;
      double double0 = MathUtils.scalb(228.1049958402, 0);
      float float1 = MathUtils.round(0.0F, 0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = MathUtils.pow((-3L), 9980);
      double double0 = MathUtils.cosh(1033.41997633);
      long long1 = (-162L);
      long long2 = MathUtils.indicator((-162L));
      int int0 = MathUtils.mulAndCheck(9980, (-33));
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (-162L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-162)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = MathUtils.lcm(0, (-1015));
      double double0 = MathUtils.EPSILON;
      double double1 = MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = MathUtils.gcd(40L, 40L);
      float float0 = MathUtils.sign(0.0F);
      double double0 = MathUtils.binomialCoefficientDouble(1174, 0);
      double double1 = MathUtils.factorialLog(1174);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = 1093.778657;
      int int0 = 20;
      double double1 = MathUtils.round(1093.778657, 20);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 20);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = (-1420L);
      long long1 = MathUtils.lcm(2047L, (-1420L));
      float float0 = MathUtils.sign((-124.01F));
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 16.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = (-3638);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-3638));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,638
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1852.101973320865;
      doubleArray0[1] = 4024.06904603;
      doubleArray0[2] = 3003.5750138938006;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-283.16169246);
      doubleArray0[5] = 1.304E19;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(207, 207);
      int int1 = MathUtils.pow(207, 187);
      float float0 = MathUtils.sign((float) (-1892032273));
      int int2 = MathUtils.compareTo((-1892032273), 0.0, 3000.8);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) 187;
      doubleArray0[3] = (double) 207;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 187.0);
      long long0 = MathUtils.subAndCheck((-1476L), (-3183605296591799669L));
      double double0 = MathUtils.factorialDouble(88);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)17);
      int int0 = MathUtils.subAndCheck((int) (byte)17, (int) (byte)17);
      boolean boolean0 = MathUtils.equals((double) (byte)1, 1.5830993332061267E-10, (double) (byte)17);
      long long0 = MathUtils.mulAndCheck((-35L), 1556L);
      double double0 = MathUtils.binomialCoefficientLog(17, (byte)17);
      double double1 = MathUtils.cosh(0.0);
      int int1 = MathUtils.lcm(0, (int) (byte)1);
      boolean boolean1 = MathUtils.equals(0.0, Double.NEGATIVE_INFINITY, (double) 0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)1;
      double double2 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-71);
      int int0 = 15;
      intArray0[1] = 15;
      int int1 = 0;
      intArray0[2] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int2 = MathUtils.mulAndCheck(0, 15);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 0;
      int int1 = (-46);
      long long0 = MathUtils.binomialCoefficient(0, (-46));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (-231.593074636), (double) 1L);
      int int2 = MathUtils.addAndCheck((-46), (-46));
      int int3 = 0;
      int int4 = 0;
      double double0 = MathUtils.round((double) (-46), 0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-231.593074636);
      doubleArray0[2] = (double) (-46);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-1874.0);
      doubleArray0[5] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (0 > -231.593)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      byte byte0 = MathUtils.sign((byte)0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = MathUtils.lcm(3391, (-3288));
      double double0 = MathUtils.round((double) 3391, 150);
      int int1 = MathUtils.compareTo((-1.0), 11149608, 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 3391.0;
      doubleArray0[3] = 3391.0;
      doubleArray0[4] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not increasing (3,391 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      long long0 = MathUtils.indicator((long) 0);
      double double0 = MathUtils.factorialDouble(0);
      long long1 = MathUtils.indicator(2195L);
      int int1 = MathUtils.pow(1, 1114L);
      long long2 = MathUtils.subAndCheck(3550L, 0L);
      int int2 = MathUtils.indicator(1);
      long long3 = MathUtils.pow(39916800L, 0);
      float float0 = MathUtils.indicator(0.0F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = (-3567);
      int int1 = MathUtils.addAndCheck((-3567), 1790);
      double double0 = MathUtils.binomialCoefficientLog(2385, 2385);
      double double1 = MathUtils.normalizeAngle(0.0, 3618.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(10.0, 3618.0);
      int int2 = MathUtils.gcd((-870), (-1777));
      short short0 = (short) (-2708);
      short short1 = MathUtils.sign((short) (-2708));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-2708);
      doubleArray0[1] = 0.0;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int3 = (-1904);
      // Undeclared exception!
      try { 
        MathUtils.equals((-1194.1), (-3223.9584), (-1904));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-990);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-990));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -990
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        MathUtils.pow(1L, (-2097));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,097)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      double double1 = MathUtils.log(0.0, 0.0);
      int int0 = MathUtils.sign((-623));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = 3.0;
      doubleArray0[7] = Double.NaN;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int1 = MathUtils.subAndCheck((-623), 8);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1));
      byte byte0 = (byte)101;
      byte byte1 = MathUtils.sign((byte)101);
      double double3 = MathUtils.factorialLog(1285);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = MathUtils.scalb(10.0, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 227);
      boolean boolean0 = MathUtils.equals(1814.2293495275, 1814.2293495275, (double) 227);
      int int0 = MathUtils.gcd(227, 227);
      int int1 = MathUtils.indicator(227);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1814.2293495275;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 227;
      doubleArray0[3] = 1814.2293495275;
      doubleArray0[4] = (double) 0.0F;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0036);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(130);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-3520), 2180);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = MathUtils.compareTo((-3327.4057765635), (-3376.0), (-3376.0));
      float float0 = MathUtils.round((float) 1, 41);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (-3376.0);
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.pow(1068655553, 0);
      long long0 = MathUtils.subAndCheck((long) 1, (long) 41);
      double double0 = MathUtils.scalb((-225.0), 1);
      int[] intArray0 = new int[0];
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      short short0 = MathUtils.indicator((short)0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-1921.2613407979927), 2.2250738585072014E-308, (-1365));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      float float0 = MathUtils.sign((float) 1);
      short short0 = MathUtils.indicator((short)0);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      short short1 = MathUtils.sign((short) (-493));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-741L), (-741L));
      float float0 = MathUtils.round((float) (-741L), 21);
      double double0 = MathUtils.sinh(1.0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-741.0F), 4, 21);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathUtils.sinh((-990.9357481271925));
      byte byte0 = MathUtils.indicator((byte)0);
      float float0 = MathUtils.indicator((float) (byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 182);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-4226.81395945);
      doubleArray0[1] = (-2999.215394123);
      doubleArray0[2] = 2885.0;
      doubleArray0[3] = 3230.204547543;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-6.032174644509064E-23);
      doubleArray0[6] = 653.0015310290179;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1405);
      intArray0[1] = (-3057);
      intArray0[2] = (-426);
      intArray0[3] = 0;
      intArray0[4] = 1030;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.indicator((-1368.6674678));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      boolean boolean0 = MathUtils.equals(0.0, (-234.40326135465), (-458.48));
      int int0 = MathUtils.sign(4116);
      int int1 = MathUtils.pow(0, 4116);
      byte byte0 = MathUtils.sign((byte) (-95));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byte byte0 = (byte)77;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      float float0 = bigInteger1.floatValue();
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      boolean boolean0 = bigInteger0.isProbablePrime(4194304);
      BigInteger bigInteger3 = bigInteger0.negate();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      int[] intArray0 = new int[5];
      intArray0[0] = 4194304;
      intArray0[1] = 4194304;
      intArray0[2] = 4194304;
      intArray0[3] = 4194304;
      intArray0[4] = 4194304;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.normalizeAngle(4194304, 352.0296955619284);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.304E19, 10.0, 0.5);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = MathUtils.indicator((-2572.9489408));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2572.9489408);
      doubleArray0[1] = (-2572.9489408);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2572.9489408);
      doubleArray0[4] = (-2572.9489408);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-2572.9489408);
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.compareTo(438.892228118074, 0.0, (-783.71774336557));
      float float0 = MathUtils.round((float) 1, 1);
      int int1 = MathUtils.pow(82, 0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.003;
      doubleArray0[1] = 2709.489783088;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1618.8241782998;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 2709.489783088;
      doubleArray1[3] = 2709.489783088;
      doubleArray1[4] = 2709.489783088;
      doubleArray1[5] = 0.003;
      doubleArray1[6] = 0.003;
      doubleArray1[7] = 2709.489783088;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      long long0 = MathUtils.subAndCheck((-1854L), 1461L);
      double double0 = MathUtils.safeNorm(doubleArray1);
      double double1 = MathUtils.normalizeAngle(0.0, (-1077.1811593388263));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-878), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -878, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(29L, 29L);
      long long1 = 1636L;
      long long2 = MathUtils.pow(1636L, 841L);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-603));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -603
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      short short0 = MathUtils.indicator((short)51);
      int int1 = MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = MathUtils.pow(1778, (long) 1778);
      long long0 = MathUtils.pow((long) 1778, 0);
      double double0 = MathUtils.indicator((double) 0);
      double double1 = MathUtils.indicator(0.0);
      int int1 = (-2897);
      try { 
        MathUtils.pow(0, (-2897));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,897)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      long long0 = 1438L;
      long long1 = MathUtils.subAndCheck(1438L, 1438L);
      float float0 = (-874.0F);
      float float1 = MathUtils.sign((-874.0F));
      int int0 = 0;
      int int1 = MathUtils.lcm(0, 0);
      double double1 = MathUtils.scalb(0.0, 178);
      double double2 = 0.0;
      boolean boolean1 = MathUtils.equals((double) 0, 0.0);
      double[] doubleArray0 = new double[0];
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("ROUND_HALF_DOWN");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.ROUND_HALF_DOWN
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = MathUtils.cosh((-2576.408572896));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.pow((-447), 468L);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        MathUtils.pow(67, (-69));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (67^-69)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.2;
      doubleArray0[1] = 1000.11366150613;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.2250738585072014E-308;
      doubleArray0[5] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(2329L, 0L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.indicator(3691L);
      int[] intArray0 = new int[5];
      intArray0[0] = 111;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1279;
      intArray0[4] = 636;
      int[] intArray1 = new int[6];
      intArray1[0] = 1279;
      intArray1[1] = 1279;
      intArray1[2] = 0;
      intArray1[3] = 111;
      intArray1[4] = (-1151);
      intArray1[5] = 636;
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = MathUtils.hash(1834.1253663040059);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-4199), (-4199));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-4199);
      doubleArray0[1] = (double) 17631601;
      doubleArray0[2] = (double) 17631601;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = 2003;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 2003);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, (-875));
      long long1 = MathUtils.pow((long) (-875), 0);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long2 = MathUtils.indicator(4607182418800017408L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-875), (-875));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -875
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3027;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2125.28610536;
      doubleArray0[1] = 1325.0;
      doubleArray0[2] = 1471.4814937;
      doubleArray0[3] = 162.21448077204;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(1325.0, 0.0, 2976.674589);
      double double1 = MathUtils.cosh(2.7553817452272217E-6);
      try { 
        MathUtils.pow((-1012L), (-2695L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,012^-2,695)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-359.0), (-359.0), (-359.0));
      double double0 = 2.3841857910019882E-8;
      boolean boolean1 = MathUtils.equalsIncludingNaN((-359.0), 2.3841857910019882E-8);
      // Undeclared exception!
      try { 
        MathUtils.round(2188.2F, (-251), (-251));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -251, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = 2.2250738585072014E-308;
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.9736429850260626E-8, (-1003.63041750854), 2.2250738585072014E-308);
      double double1 = MathUtils.indicator(3.9736429850260626E-8);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      short short0 = MathUtils.sign((short)0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (short)0, (double) (short)0, 1365.7567717138436);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float float0 = MathUtils.round(2555.0F, 1341, 0);
      int int0 = MathUtils.pow(113, 0L);
      int int1 = 0;
      int int2 = MathUtils.pow(1, 0);
      double double0 = MathUtils.scalb(1365.7567717138436, 61);
      double double1 = MathUtils.round((double) 2555.0F, 28);
      long long0 = MathUtils.lcm((-7278142539171889152L), 0L);
      double double2 = MathUtils.indicator((double) 1);
      boolean boolean0 = MathUtils.equals((double) 0, (double) 0);
      double double3 = (-1565.287887652);
      double double4 = MathUtils.normalizeAngle((-1393.0645118724815), (-1565.287887652));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 154);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 154
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 653;
      intArray0[2] = 46;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.mulAndCheck(4194304, 0);
      int int2 = MathUtils.mulAndCheck(0, 0);
      long long0 = MathUtils.binomialCoefficient(4090, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-159.238);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.4384203044354907E-8;
      doubleArray0[3] = (-1570.1);
      doubleArray0[4] = 778.03905056;
      doubleArray0[5] = 0.008336750013465571;
      doubleArray0[6] = 9.313225746154785E-10;
      doubleArray0[7] = 3804.4521929935104;
      doubleArray0[8] = (-1247.06039848);
      int int0 = MathUtils.hash(doubleArray0);
      try { 
        MathUtils.pow((long) (-476351571), (long) (-476351571));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-476,351,571^-476,351,571)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 16;
      // Undeclared exception!
      try { 
        MathUtils.round(996.0F, 16, 3410);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 3,410, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      float float0 = MathUtils.round((float) 0, 0);
      short short0 = MathUtils.sign((short) (-4847));
      long long0 = MathUtils.mulAndCheck(0L, 2799L);
      // Undeclared exception!
      try { 
        MathUtils.round((-934.35548), (int) (short) (-4847), (-4792));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1827.2798622155149), (-1827.2798622155149), 1470);
      float float0 = MathUtils.indicator(1.0F);
      float float1 = MathUtils.round(1.0F, 1470, 0);
      int int0 = MathUtils.gcd(125, 0);
      long long0 = MathUtils.addAndCheck((long) 125, (long) 0);
      float float2 = MathUtils.sign((float) 125L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 125L;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 125;
      doubleArray0[6] = (-1827.2798622155149);
      doubleArray0[7] = (-1827.2798622155149);
      doubleArray0[8] = (double) Float.NaN;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      int int0 = MathUtils.subAndCheck(1207, 224);
      double double0 = MathUtils.normalizeAngle(983, (-230.59365309646));
      double double1 = MathUtils.normalizeAngle(0.0F, (-230.59365309646));
      double double2 = MathUtils.log((-2187.542573955), (-1488.0207626360266));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1698.02614);
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = 694.95;
      doubleArray0[3] = Double.NaN;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.scalb(1899.640568637, 1366);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathUtils.indicator(-0.0);
      // Undeclared exception!
      try { 
        MathUtils.round(-0.0, (-1362), 16);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = MathUtils.pow(106, 106);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 106;
      doubleArray0[3] = (double) 106;
      doubleArray0[4] = (double) 106;
      doubleArray0[5] = (double) 106;
      doubleArray0[6] = (double) 0;
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = MathUtils.gcd((-692L), (-75L));
      long long1 = MathUtils.factorial(3);
      boolean boolean0 = MathUtils.equals((double) 1L, (double) (-75L), (-739.287491));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 6L;
      doubleArray0[2] = (double) 1L;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1L;
      doubleArray1[1] = (double) 1L;
      doubleArray1[2] = (double) (-75L);
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = (double) (-75L);
      doubleArray1[5] = (double) 6L;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      int int0 = MathUtils.lcm(3, 3);
      double double0 = MathUtils.binomialCoefficientLog(1410, 3);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 3);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 3
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = MathUtils.gcd(2957L, 6255L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte) (-83);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-13,226,641,010,445,907^-13,226,641,010,445,907)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.008336750013465571, 0.11111095942313305);
      long long0 = MathUtils.gcd(0L, 0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-4076), (-4076));
      long long0 = MathUtils.binomialCoefficient(5, (-2785));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = MathUtils.sign((-3477.7262562273613));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-3412.79039);
      doubleArray0[2] = (-3477.7262562273613);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-3477.7262562273613);
      doubleArray0[6] = (-1.0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-3412.79039));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 1632;
      double double0 = MathUtils.binomialCoefficientLog(1632, 1632);
      // Undeclared exception!
      try { 
        MathUtils.factorial(1632);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = MathUtils.factorial(10);
      double double1 = MathUtils.round(Double.NaN, 0);
      float float0 = MathUtils.indicator(512.36F);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(295);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.mod(bigInteger0);
      int int0 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 356);
      double double0 = MathUtils.binomialCoefficientLog(356, 0);
      double double1 = MathUtils.cosh(0.0);
      float float0 = MathUtils.sign((float) 0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-564.230293179319);
      doubleArray0[1] = 1966.699171;
      doubleArray0[2] = 0.9999997615814209;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-564.230293179319));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-88));
      long long0 = MathUtils.lcm(0L, 777L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.008333333333329196, (double) (byte) (-88), 3244);
      short short0 = MathUtils.indicator((short) (byte) (-88));
      float float0 = MathUtils.round(0.0F, (int) (byte) (-1));
      byte byte1 = MathUtils.indicator((byte) (-1));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)1;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = MathUtils.cosh(141.0719895713457);
      int int0 = 2;
      int int1 = MathUtils.lcm(2, 2);
      try { 
        MathUtils.pow((BigInteger) null, (-1357));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-1,357)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(3574, 12);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 1359L);
      int int0 = 2509;
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1359L, 2509, (-861));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm(1L, 1L);
      int int0 = MathUtils.mulAndCheck((-1617), 0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(2.2250738585072014E-308, 0.0, (-1617));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      int int1 = MathUtils.lcm(173, 0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      short short0 = MathUtils.sign((short)0);
      byte byte0 = MathUtils.indicator((byte) (-88));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = MathUtils.gcd((-1824), (-1824));
      long long0 = MathUtils.gcd((long) (-1824), 0L);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(5092, 5092);
      double double0 = MathUtils.binomialCoefficientDouble(5092, 183);
      double double1 = MathUtils.scalb((-402.25), 183);
      int int0 = MathUtils.pow(183, 2366);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.indicator((short)2390);
      int int1 = MathUtils.indicator(452);
      int int2 = MathUtils.compareTo((-27.5901), (-165.2348965148), 2366);
      long long1 = MathUtils.subAndCheck(3262L, (-1L));
      int int3 = MathUtils.addAndCheck(3262, (int) (short)2390);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("wh5U _");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.wh5U _
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      int int0 = MathUtils.hash(0.0);
      int int1 = MathUtils.gcd(0, (-2281));
      boolean boolean1 = MathUtils.equals((double[]) null, (double[]) null);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-2281);
      intArray0[2] = 2281;
      intArray0[3] = 2281;
      intArray0[4] = (-2281);
      intArray0[5] = 2281;
      intArray0[6] = (-2281);
      int int2 = (-521);
      intArray0[7] = (-521);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.sign((-709L));
      byte byte0 = MathUtils.sign((byte) (-33));
      short short0 = MathUtils.sign((short)0);
      long long1 = MathUtils.pow(0L, (long) (short)0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((short)0, 1273);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1,273
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 21;
      long long0 = MathUtils.pow(0L, 21);
      long long1 = MathUtils.sign(1340L);
      int int1 = MathUtils.lcm(21, (-5449));
      long long2 = MathUtils.sign(0L);
      double double0 = MathUtils.sign((double) (-5449));
      int int2 = 0;
      double double1 = MathUtils.round((-1.0), 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 21;
      doubleArray0[1] = (double) 0L;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long3 = MathUtils.mulAndCheck(24L, (-2189L));
      float float0 = MathUtils.round((float) 24L, 0);
      // Undeclared exception!
      MathUtils.factorialDouble(114429);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-2741.6451992), (-1516.82));
      double double1 = MathUtils.cosh((-0.16624882440418567));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1516.424064299981);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(0.0, (-3598.1854767567042), 452);
      int int0 = MathUtils.sign(452);
      double double3 = MathUtils.sign((-0.16624882440418567));
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1516.424064299981), Double.POSITIVE_INFINITY);
      double double4 = MathUtils.factorialLog(2394);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 452);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 452
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(2354.97821222, (-397), (-1514));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, 0.0);
      long long0 = MathUtils.gcd(447L, 447L);
      long long1 = MathUtils.gcd(447L, 9223372036854775807L);
      byte byte0 = MathUtils.sign((byte)31);
      long long2 = MathUtils.subAndCheck(0L, 447L);
      double double0 = MathUtils.log(9223372036854775807L, (-447L));
      int int0 = 434;
      int int1 = MathUtils.pow(434, 0L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 434;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (double) 9223372036854775807L;
      doubleArray0[3] = (double) (byte)31;
      doubleArray0[4] = (double) (byte)1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (2 < 9,223,372,036,854,776,000)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      double double1 = MathUtils.indicator(Double.NaN);
      long long0 = MathUtils.pow((-185L), 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double2 = MathUtils.binomialCoefficientDouble(4035, 0);
      int int0 = MathUtils.indicator(753);
      long long1 = MathUtils.sign((-249L));
      int int1 = MathUtils.indicator((-1143));
      double double3 = MathUtils.safeNorm(doubleArray0);
      int int2 = MathUtils.addAndCheck(0, (-1143));
      double double4 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(Double.NaN, (double) (-249L), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(0, 0);
      int int1 = MathUtils.subAndCheck(0, 1803);
      double double0 = MathUtils.cosh((-1803));
      int[] intArray0 = new int[0];
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals(0.0, (double) 0, 0.0);
      float float0 = MathUtils.indicator((float) (-1803));
      long long1 = MathUtils.mulAndCheck((-9223372036854775808L), (long) 0);
      long long2 = MathUtils.indicator((long) 0);
      boolean boolean1 = MathUtils.equals(97.23, 0.0);
      double double1 = 0.0;
      boolean boolean2 = MathUtils.equalsIncludingNaN(97.23, 0.0, 102);
      try { 
        MathUtils.pow(0, (-3384L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-3,384)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = 1129.9022;
      double double1 = MathUtils.sinh(1129.9022);
      int int0 = MathUtils.gcd(0, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      double double2 = MathUtils.distance(intArray0, intArray0);
      int int1 = (-938);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-938));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -938
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(141L, 141L);
      long long1 = MathUtils.addAndCheck(282L, 282L);
      double double0 = MathUtils.binomialCoefficientDouble(3080, 3080);
      short short0 = MathUtils.sign((short)403);
      double double1 = MathUtils.sinh(3080);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)403, (-656.8), (double) (short)403);
      long long2 = MathUtils.mulAndCheck((long) (short)1, (long) (short)403);
      float float0 = MathUtils.round((float) 3080, 10);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((short)403, 2968);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 403, k = 2,968
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
