/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 19:33:27 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, (-1.0E-6));
      BigInteger bigInteger0 = BigInteger.TEN;
      int int1 = bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.ONE;
      float float0 = bigInteger1.floatValue();
      BigInteger bigInteger2 = BigInteger.valueOf(152);
      BigInteger bigInteger3 = bigInteger0.divide(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 2673L);
      int int2 = MathUtils.mulAndCheck(152, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1.0F, (double) 1.0F, 152);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0E-6);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1585L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.log(0.0, 1.1102230246251565E-16);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = (-2188.09678073);
      int int0 = MathUtils.compareTo((-2188.09678073), (-2188.09678073), (-2188.09678073));
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-9218868437227405334L), (-9218868437227405334L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1177.3);
      doubleArray0[1] = (-2303.2971);
      doubleArray0[2] = (-1080.917);
      doubleArray0[3] = 0.030589580535888672;
      doubleArray0[4] = (-514.3198594);
      doubleArray0[5] = 4764.041636;
      doubleArray0[6] = 2.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte) (-68));
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (byte) (-68);
      doubleArray1[1] = (-1177.3);
      double double1 = MathUtils.distance1(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4392.0639022234);
      doubleArray0[1] = (-1071.0);
      doubleArray0[2] = (-4392.0639022234);
      doubleArray0[3] = 6.283185307179586;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.indicator(0L);
      float float0 = MathUtils.indicator((float) 0L);
      int int1 = MathUtils.sign((-1489));
      long long1 = MathUtils.mulAndCheck((long) (-1), (-749L));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.097;
      doubleArray0[2] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 1.570796251296997, 2253);
      long long0 = MathUtils.sign(0L);
      double double1 = MathUtils.sign(0.0);
      int int0 = MathUtils.indicator(0);
      int int1 = MathUtils.pow((-1920), 1469);
      byte byte0 = MathUtils.sign((byte) (-27));
      double double2 = MathUtils.normalizeAngle(2675.3912560511, 0.0);
      long long1 = MathUtils.indicator((long) (-1920));
      float float0 = MathUtils.indicator(1798.2399F);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int2 = MathUtils.subAndCheck(1, 143);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.570796251296997;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.097;
      doubleArray1[5] = (double) 1469;
      doubleArray1[6] = 2305.954988;
      double double4 = MathUtils.distance(doubleArray0, doubleArray1);
      Random.setNextRandom(67);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      long long1 = MathUtils.subAndCheck(2657L, 0L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long2 = MathUtils.mulAndCheck(2657L, 0L);
      float float0 = MathUtils.round((float) 0L, (-54), 0);
      int int0 = MathUtils.pow((-54), 9193070505571053912L);
      float float1 = MathUtils.round((float) (-54), 9);
      int int1 = MathUtils.hash(1723.794872687891);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = (double) (-1283328822);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ZERO;
      int int2 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) 9);
      boolean boolean0 = MathUtils.equals(0.0, 3.9736429850260626E-8, (double) 9193070505571053912L);
      long long3 = MathUtils.subAndCheck(0L, 0L);
      boolean boolean1 = MathUtils.equals((-2312.59594488), 0.0, (double) 0L);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 10.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.sign(0L);
      double double1 = MathUtils.sinh(10.0);
      int int0 = MathUtils.gcd((-2608), 145);
      int int1 = MathUtils.indicator(1226);
      BigInteger bigInteger0 = BigInteger.TEN;
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      long long1 = MathUtils.binomialCoefficient(1226, (-2608));
      int int2 = MathUtils.lcm((-2032), 246);
      boolean boolean1 = MathUtils.equals((-1939.9036), 3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = (-2188.09678073);
      int int0 = MathUtils.compareTo((-2188.09678073), (-2188.09678073), (-2188.09678073));
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-9218868437227405313L), (-9218868437227405313L));
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -9,218,868,437,227,405,313 + -9,218,868,437,227,405,313
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = MathUtils.log((-158.812940711814), (-158.812940711814));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-158.812940711814);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-158.812940711814);
      doubleArray0[4] = Double.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
      long long0 = MathUtils.lcm(1387L, (-5023L));
      double double1 = MathUtils.factorialDouble(455);
      // Undeclared exception!
      try { 
        MathUtils.round(154.387406283, (-3424), (-503));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = MathUtils.pow(0, 1030);
      double double0 = MathUtils.factorialDouble(3007);
      short short0 = MathUtils.sign((short)223);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) 0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (double) 0);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)27;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-214,514,378,213^-214,514,378,213)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1033;
      intArray0[1] = (-3835);
      intArray0[2] = 2291;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 6;
      intArray0[6] = 16;
      intArray0[7] = (-3322);
      intArray0[8] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.sign((long) 2291);
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-0.12502530217170715), (-1463.14347));
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 60;
      intArray1[3] = 1033;
      intArray1[4] = 16;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = MathUtils.sign(0.5);
      float float0 = MathUtils.round(1302.638F, 1036, 1);
      byte byte0 = MathUtils.indicator((byte)26);
      long long0 = MathUtils.pow((long) 1036, (long) 1036);
      double double1 = MathUtils.round((double) (byte)1, 1036);
      long long1 = MathUtils.binomialCoefficient(1, 0);
      double double2 = MathUtils.round((-695.3495), (int) (byte)1);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1302.638F, 0.0, (-218.9917));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (-695.3);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (byte)1;
      doubleArray0[7] = (-695.3495);
      doubleArray0[8] = (double) 1302.638F;
      double double3 = MathUtils.safeNorm(doubleArray0);
      boolean boolean1 = MathUtils.equals(Double.NaN, 1.375, (double) 0);
      double double4 = MathUtils.cosh(0.0);
      double double5 = MathUtils.sinh((-695.3495));
      double double6 = MathUtils.distance1(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short) (byte)1);
      long long2 = MathUtils.addAndCheck((long) (byte)26, 0L);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 2593.1;
      doubleArray0[0] = 2593.1;
      doubleArray0[1] = (-86.60086);
      doubleArray0[2] = (-2348.868);
      doubleArray0[3] = 10.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,593.1 >= -86.601)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-2153.770538724852));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2153.770538724852);
      doubleArray0[2] = (-2153.770538724852);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2153.770538724852);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.indicator(0);
      float float0 = MathUtils.round((float) 1, 0, 2);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-2241.445328), 0.0, 0.0);
      double double1 = MathUtils.binomialCoefficientDouble(2, 0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 1727);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 1727, (double) 1727);
      double double1 = MathUtils.sign(0.0);
      int int0 = MathUtils.lcm((-2657), 52);
      float float0 = MathUtils.indicator((float) 52);
      boolean boolean1 = MathUtils.equalsIncludingNaN(3226.6754975527, 798.1752224, 3226.6754975527);
      boolean boolean2 = MathUtils.equals(798.1752224, 0.19999998807907104);
      long long0 = MathUtils.indicator((-2655L));
      int[] intArray0 = new int[2];
      intArray0[0] = 138164;
      intArray0[1] = (-2657);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-7);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, bigInteger0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = MathUtils.scalb(Double.NEGATIVE_INFINITY, (-1965));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1965), (double) (-1965));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.round(0.0F, (-1965));
      double double1 = MathUtils.round((double) Float.NaN, 5, 5);
      int int1 = MathUtils.addAndCheck(637, 1346);
      int[] intArray0 = new int[2];
      intArray0[0] = 31;
      intArray0[1] = 1346;
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = 1346;
      intArray1[2] = 31;
      intArray1[3] = 0;
      intArray1[4] = 5;
      double double2 = MathUtils.distance(intArray0, intArray1);
      int int2 = MathUtils.pow(31, 0);
      double double3 = MathUtils.factorialDouble(0);
      try { 
        MathUtils.normalizeArray(doubleArray0, 31);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.log(736.0, 0.0);
      long long0 = MathUtils.gcd((long) (byte)0, 4074L);
      double double1 = MathUtils.factorialDouble(0);
      double double2 = MathUtils.factorialDouble(0);
      long long1 = MathUtils.mulAndCheck((long) 0, (long) (byte)0);
      int int0 = MathUtils.gcd(0, (-1476));
      float float0 = 860.444F;
      int int1 = 130;
      // Undeclared exception!
      try { 
        MathUtils.round(860.444F, 5, 130);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 130, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 6.283185307179586);
      boolean boolean0 = MathUtils.equals(0.0, 2516.93047259849, 0.0);
      byte byte0 = MathUtils.sign((byte) (-106));
      short short0 = MathUtils.sign((short) (byte) (-1));
      int int0 = 11;
      int int1 = MathUtils.mulAndCheck(11, (int) (byte) (-1));
      double double1 = MathUtils.sinh(2.404307984052299E-9);
      double double2 = MathUtils.cosh(6.283185307179586);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((byte) (-1), (short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float float0 = MathUtils.sign((-2168.8816F));
      double double0 = MathUtils.sinh((-2168.8816F));
      long long0 = MathUtils.mulAndCheck(1519L, 1519L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2307361L;
      doubleArray0[1] = (double) 1519L;
      doubleArray0[2] = (double) 1519L;
      doubleArray0[3] = (double) 1519L;
      doubleArray0[4] = (double) (-2168.8816F);
      doubleArray0[5] = (double) 2307361L;
      doubleArray0[6] = (double) (-2168.8816F);
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = (double) 1519L;
      int int0 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.sign((short) (-1187));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.5, 0.5, 36);
      int[] intArray0 = new int[6];
      intArray0[0] = 1684;
      intArray0[1] = 36;
      intArray0[2] = 36;
      intArray0[3] = 36;
      intArray0[4] = 36;
      intArray0[5] = 36;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.sign(Float.NaN);
      int int0 = (-795);
      int int1 = (-1751);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-795), (-1751));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -795
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double0 = MathUtils.scalb(0.0, (-263));
      long long0 = MathUtils.lcm(359L, 359L);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (-263), 0.0, 1037.23205);
      double double1 = MathUtils.factorialDouble(1424);
      short short0 = MathUtils.indicator((short)627);
      int int0 = MathUtils.addAndCheck(95, (int) (short)627);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = MathUtils.round((-4.0), 5);
      boolean boolean0 = MathUtils.equals((double) 5, (-4.0), 5);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-4.0), (-4.0), 5);
      double double1 = MathUtils.binomialCoefficientDouble(5, 5);
      double double2 = MathUtils.sign((-4.0));
      short short0 = MathUtils.indicator((short)179);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(5, 445);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 5, k = 445
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = MathUtils.lcm(1348L, 1348L);
      long long1 = MathUtils.addAndCheck((-1364L), 0L);
      int int0 = MathUtils.indicator(0);
      double double0 = MathUtils.log(2409.0, 3858.561625829644);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-2571.898712397839);
      doubleArray0[0] = (-2571.898712397839);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.hash(1.1102230246251565E-16);
      int int2 = (-731);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-458482216), (-731));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 0);
      double double1 = MathUtils.round(0.0, 2842, 0);
      double double2 = MathUtils.factorialLog(2842);
      boolean boolean0 = MathUtils.equals(344.716, (double) 2842, 0.0);
      int int0 = MathUtils.pow(94, (long) 94);
      long long0 = MathUtils.pow((long) 0, 0L);
      double double3 = MathUtils.log(344.716, (-4001.36704181007));
      float float0 = MathUtils.round((float) 0, 2842, 0);
      double double4 = MathUtils.factorialDouble(0);
      double[] doubleArray0 = new double[0];
      double double5 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (double) 0, (-488.0));
      // Undeclared exception!
      try { 
        MathUtils.lcm(Integer.MAX_VALUE, 16);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.9841269659586505E-4);
      doubleArray0[3] = (-1844.641);
      doubleArray0[4] = 0.125;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1.9841269659586505E-4);
      doubleArray1[3] = (-2.957007209750105E-8);
      doubleArray1[4] = (-1844.641);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-1.9841269659586505E-4);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 816;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(816, Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = MathUtils.lcm((-350), (-350));
      double double0 = MathUtils.sign(2210.603629015466);
      long long0 = MathUtils.gcd(3628800L, (-1761L));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(144, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 144;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 144;
      doubleArray0[4] = (double) 144;
      int int1 = MathUtils.hash(doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte byte0 = MathUtils.indicator((byte)0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (byte)0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 144;
      doubleArray1[3] = (double) (byte)1;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) (byte)1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 1297537183;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) (byte)1;
      doubleArray2[4] = (-6.663542893624021E-14);
      doubleArray2[5] = (double) 144;
      doubleArray2[6] = (double) (byte)0;
      doubleArray2[7] = (double) 144;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathUtils.round((-1080.917), 2103);
      int int0 = MathUtils.hash((double[]) null);
      double double1 = MathUtils.indicator((-1080.917));
      int int1 = MathUtils.pow(4, 0);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-1080.917));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.sinh((-1255.4466));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 3550.2114657598468, 15);
      float float0 = MathUtils.round((float) 15, 15);
      long long0 = MathUtils.subAndCheck(1275L, 0L);
      long long1 = MathUtils.subAndCheck(1275L, 2L);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      short short0 = MathUtils.indicator((short) (-87));
      double double2 = MathUtils.indicator(0.0);
      int int0 = MathUtils.subAndCheck(15, 15);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)95);
      boolean boolean0 = MathUtils.equals((-3456.30666), 0.0);
      float float0 = MathUtils.sign((float) (byte)1);
      long long0 = MathUtils.subAndCheck((long) (byte)95, 4294967295L);
      long long1 = MathUtils.gcd((-296L), 24L);
      double double0 = MathUtils.sign((-3456.30666));
      double double1 = MathUtils.round((-249.9859012933447), (int) (byte)95);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-932.9455899086221), (-932.9455899086221));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      short short0 = MathUtils.indicator((short) (-7132));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1557;
      intArray0[1] = 0;
      int int0 = 1576;
      intArray0[2] = 1576;
      int int1 = 0;
      intArray0[3] = 0;
      int int2 = 1584;
      intArray0[4] = 1584;
      int int3 = (-816);
      intArray0[5] = (-816);
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int4 = MathUtils.subAndCheck(1557, 1576);
      float float0 = MathUtils.round((float) (-19), 1584);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-816);
      doubleArray0[1] = (double) 1557;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) 1557;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1576;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte) (-22));
      long long0 = MathUtils.indicator((long) (byte) (-22));
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathUtils.sign(2747.2705754);
      int[] intArray0 = new int[6];
      intArray0[0] = 778;
      intArray0[1] = (-2667);
      intArray0[2] = 0;
      intArray0[3] = (-485);
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[] intArray1 = new int[4];
      intArray1[0] = (-485);
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = MathUtils.sign((-1755));
      int int1 = 1042;
      double double0 = MathUtils.binomialCoefficientDouble(1042, 122);
      int int2 = 3792;
      int int3 = MathUtils.subAndCheck((-1755), 3792);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-5547));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -5,547
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 2525;
      double double0 = MathUtils.factorialDouble(2525);
      int int1 = MathUtils.hash((double[]) null);
      double double1 = MathUtils.factorialDouble(2525);
      int int2 = MathUtils.addAndCheck(0, 0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1139.969260914364);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 618.368976;
      doubleArray0[3] = 1497.0;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-3590.08);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-3590.08));
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 709;
      intArray0[2] = 6;
      intArray0[3] = 2296;
      intArray0[4] = (-2102);
      intArray0[5] = 0;
      intArray0[6] = 168;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = MathUtils.factorialLog(25);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 2085, 0);
      boolean boolean0 = MathUtils.equals(0.0, (double) 2085, 2085);
      boolean boolean1 = MathUtils.equals((-553.94597025), (double) 2085);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2085;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-796.29469204193));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = MathUtils.log(1335.7830082, 1335.7830082);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.375;
      doubleArray0[1] = 1335.7830082;
      doubleArray0[2] = 1335.7830082;
      doubleArray0[3] = 1335.7830082;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.lcm(0L, (-3261L));
      long long1 = MathUtils.addAndCheck(0L, 0L);
      float float0 = MathUtils.indicator((-161.0F));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 904;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1435);
      intArray0[3] = 2050;
      intArray0[4] = (-2112);
      intArray0[5] = (-1184);
      intArray0[6] = (-286);
      intArray0[7] = (-3629);
      intArray0[8] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals(620.008996, (double) 0, (double) 2050);
      try { 
        MathUtils.pow(2085, (-119));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,085^-119)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 3089;
      int int1 = MathUtils.addAndCheck(1317, 3089);
      long long0 = MathUtils.subAndCheck((long) 4406, 0L);
      float float0 = MathUtils.sign((float) 4406L);
      int int2 = 0;
      int int3 = MathUtils.subAndCheck(3089, 0);
      // Undeclared exception!
      try { 
        MathUtils.round((-920.2469750208), 1317, 1317);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short)0;
      int[] intArray1 = new int[4];
      intArray1[0] = (int) (short)0;
      intArray1[1] = 7;
      intArray1[2] = (int) (short)0;
      intArray1[3] = (int) (short)0;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(3019.8524, 0.0);
      long long0 = MathUtils.gcd(0L, 0L);
      int int0 = (-2426);
      // Undeclared exception!
      try { 
        MathUtils.equals((-388.28), (double) 0L, (-2426));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = MathUtils.sign(408L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-211), (-4576));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -211
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = 4577762542105553359L;
      long long1 = MathUtils.gcd(4577762542105553359L, 4577762542105553359L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4577762542105553359L;
      doubleArray0[1] = (double) 4577762542105553359L;
      doubleArray0[2] = (double) 4577762542105553359L;
      doubleArray0[3] = (double) 4577762542105553359L;
      doubleArray0[4] = (double) 4577762542105553359L;
      doubleArray0[5] = (double) 4577762542105553359L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = (-638);
      try { 
        MathUtils.pow(3503L, (-638));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (3,503^-638)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = 2566.7724119;
      boolean boolean0 = MathUtils.equals(2566.7724119, 2566.7724119, 2566.7724119);
      int int0 = 1057;
      int int1 = MathUtils.indicator(1057);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(1, 1057);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 1,057
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)59;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      int int0 = bigInteger0.bitCount();
      BigInteger bigInteger3 = bigInteger0.not();
      int int1 = bigInteger0.intValueExact();
      BigInteger bigInteger4 = bigInteger0.shiftLeft((-1709));
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = MathUtils.sign((-1.0F));
      double double0 = MathUtils.factorialLog(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      double double0 = MathUtils.normalizeAngle(1332.50368622, 1.0F);
      long long0 = MathUtils.gcd(121645100408832000L, (-2147483648L));
      float float1 = MathUtils.round(173.37381F, (-2917));
      long long1 = MathUtils.mulAndCheck(3829L, (long) (-2917));
      double double1 = MathUtils.factorialDouble(123);
      int int0 = 2690;
      int int1 = MathUtils.subAndCheck(2690, 123);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 123, (double) 2567, (-418));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      long long0 = bigInteger1.longValueExact();
      int int1 = bigInteger0.signum();
      int int2 = bigInteger0.compareTo(bigInteger1);
      int int3 = bigInteger0.intValueExact();
      BigInteger bigInteger2 = bigInteger0.setBit(0);
      BigInteger bigInteger3 = bigInteger0.clearBit(0);
      try { 
        MathUtils.pow(bigInteger0, (int) (byte) (-28));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-28^-28)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-575.80655383019), 6.283185307179586);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 6.283185307179586);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.sign(0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-3835.776539);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, doubleArray1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      long long0 = MathUtils.gcd((-1530L), (long) 0);
      double double1 = MathUtils.round((double) 0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.divide(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-902));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-902)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte byte0 = (byte)12;
      byte byte1 = MathUtils.indicator((byte)12);
      double double0 = 1463.2703513;
      double double1 = MathUtils.indicator(1463.2703513);
      long long0 = 6227020800L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-9218868437227405313L), 6227020800L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(0, 0);
      boolean boolean0 = MathUtils.equals((double) 0, (double) 1L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.097;
      doubleArray0[2] = (-0.0013888888689039883);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-0.0013888888689039883), 1.570796251296997, 2253);
      long long0 = MathUtils.sign(0L);
      double double1 = MathUtils.sign(0.0);
      int int0 = MathUtils.indicator(0);
      int int1 = MathUtils.pow((-1920), 1469);
      byte byte0 = MathUtils.sign((byte) (-27));
      double double2 = MathUtils.normalizeAngle(2675.3912560511, (-0.0013888888689039883));
      long long1 = MathUtils.indicator((long) (-1920));
      float float0 = MathUtils.indicator(1798.2399F);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int2 = MathUtils.subAndCheck(1, 143);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(9.0, Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 9.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 9.0;
      doubleArray0[3] = 9.0;
      doubleArray0[4] = (-4182.0282880947);
      doubleArray0[5] = 9.0;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = MathUtils.gcd((-864L), (-243L));
      long long1 = MathUtils.gcd((-864L), 39916800L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 39916800L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      int int0 = MathUtils.pow(101, 101);
      int[] intArray0 = new int[5];
      intArray0[0] = (-756958059);
      intArray0[1] = 5;
      intArray0[2] = (-756958059);
      intArray0[3] = (-756958059);
      intArray0[4] = 101;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = MathUtils.hash(55.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2562.32133561619, 0.0);
      double double0 = MathUtils.scalb(0.0, 1078689792);
      int int1 = MathUtils.lcm(1004, 782);
      int int2 = MathUtils.subAndCheck((-19), 1078689792);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Object object0 = new Object();
      String string0 = bigInteger0.toString();
      double double0 = bigInteger0.doubleValue();
      int int0 = bigInteger0.intValue();
      int int1 = bigInteger0.bitCount();
      BigInteger bigInteger1 = bigInteger0.shiftRight(0);
      boolean boolean0 = bigInteger0.equals(object0);
      long long0 = bigInteger1.longValue();
      int int2 = bigInteger0.getLowestSetBit();
      float float0 = bigInteger1.floatValue();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      double double1 = MathUtils.log((-2365.08540807), (-156.7074));
      double double2 = bigInteger0.doubleValue();
      BigInteger bigInteger3 = bigInteger1.modInverse(bigInteger2);
      double[] doubleArray0 = new double[0];
      BigInteger bigInteger4 = bigInteger0.add(bigInteger1);
      int int3 = MathUtils.hash(doubleArray0);
      double double3 = MathUtils.cosh(0.0);
      try { 
        MathUtils.pow(215L, (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (215^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.round(2107.346, 1810);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2107.346, 1.1102230246251565E-16);
      double double1 = MathUtils.factorialDouble(1810);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1810;
      doubleArray0[1] = 2107.346;
      doubleArray0[2] = 2107.346;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      int int0 = MathUtils.mulAndCheck(1810, 1810);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-4043));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,043
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = MathUtils.gcd((-744), (-2564));
      int int1 = MathUtils.lcm(614, 0);
      int[] intArray0 = new int[5];
      intArray0[2] = 4;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int2 = MathUtils.lcm(0, 248);
      long long0 = MathUtils.indicator((long) (-2564));
      int[] intArray1 = new int[3];
      intArray1[0] = 614;
      intArray1[1] = 614;
      intArray1[2] = 4;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 4095L);
      long long1 = MathUtils.lcm(0L, 0L);
      double double0 = MathUtils.sign((double) 0L);
      double double1 = MathUtils.factorialDouble(1030);
      long long2 = MathUtils.subAndCheck(0L, 0L);
      int int0 = MathUtils.addAndCheck(1030, 0);
      long long3 = MathUtils.lcm((long) 1030, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(81.701401792, (-2039.49233702), 1039.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 163L);
      int[] intArray0 = new int[6];
      intArray0[0] = 1030;
      intArray0[1] = 1030;
      intArray0[2] = 1030;
      intArray0[3] = 1030;
      intArray0[4] = (-345);
      intArray0[5] = (int) (short)1;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = MathUtils.compareTo((-1991.39881096), 1723.024855554, 0.0);
      float float0 = 0.0F;
      float float1 = MathUtils.indicator(0.0F);
      double double0 = MathUtils.cosh(0.0);
      int int1 = 0;
      float float2 = MathUtils.round(1.0F, 0);
      int int2 = (-2297);
      try { 
        MathUtils.pow(0, (-2297));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,297)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      int int0 = MathUtils.gcd(3136, 3136);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 91.7924324559747);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 91.7924324559747;
      MathUtils.checkOrder(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.subAndCheck((-1194), 0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = 1561;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1561);
      int int1 = (-3593);
      try { 
        MathUtils.pow((-329L), (-3593));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-329^-3,593)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 152;
      long long0 = MathUtils.pow((-1537L), 152);
      double double0 = 0.0;
      double double1 = (-1.0E-6);
      int int1 = MathUtils.compareTo(0.0, 0.0, (-1.0E-6));
      long long1 = (-1585L);
      try { 
        MathUtils.pow((-5944026560367194111L), (-1585L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-5,944,026,560,367,194,111^-1,585)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 176.42038293;
      doubleArray0[1] = 988.090619;
      doubleArray0[2] = 2831.2208518384805;
      int int0 = MathUtils.hash(doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2831.2208518384805);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 2831.2208518384805;
      doubleArray2[1] = 2831.2208518384805;
      doubleArray2[2] = 988.090619;
      doubleArray2[3] = (double) 1184677298;
      doubleArray2[4] = 2831.2208518384805;
      doubleArray2[5] = 176.42038293;
      doubleArray2[6] = 988.090619;
      doubleArray2[7] = (double) 1184677298;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray2, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (2,831.221 <= 2,831.221)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.pow((-3039L), 0);
      byte byte0 = MathUtils.sign((byte)34);
      double double0 = MathUtils.scalb(1L, 0);
      int int1 = (-114);
      int int2 = (-262);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-114), (-262));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -114
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(9223372036854775807L, 9223372036854775807L);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 9,223,372,036,854,775,807 + 9,223,372,036,854,775,807
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = MathUtils.compareTo(368.63661472527724, (-62.6519420138026), (-62.6519420138026));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 368.63661472527724;
      doubleArray0[1] = 368.63661472527724;
      doubleArray0[2] = (-62.6519420138026);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 368.63661472527724;
      doubleArray0[5] = (-62.6519420138026);
      doubleArray0[6] = 368.63661472527724;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-62.652 < 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = MathUtils.sinh(0.058823529411764705);
      float float0 = MathUtils.round(1320.2744F, (-1035));
      long long0 = MathUtils.lcm(0L, (long) (-1035));
      int int0 = MathUtils.hash((double) 0L);
      double double1 = MathUtils.normalizeAngle((-1035), (-698.98318));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-698.98318);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 0.058857458885427594;
      doubleArray0[3] = (double) (-1035);
      doubleArray0[4] = 0.058823529411764705;
      doubleArray0[5] = 151.15;
      doubleArray0[6] = (-701.9911787194819);
      doubleArray0[7] = (double) 0L;
      double double2 = MathUtils.safeNorm(doubleArray0);
      float float1 = MathUtils.round((-201.782F), 0);
      byte byte0 = MathUtils.indicator((byte)72);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = MathUtils.lcm(720L, 2432902008176640000L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2432902008176640000L;
      doubleArray0[1] = (double) 720L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.factorialDouble(3);
      double double1 = MathUtils.factorialLog(3);
      float float0 = MathUtils.sign((float) 3);
      double double2 = MathUtils.log((-3412.4330674), (-1561.2019339450167));
      float float1 = MathUtils.round((float) 2432902008176640000L, 3);
      double double3 = MathUtils.sign(0.0);
      int int0 = MathUtils.pow(3, (long) 3);
      long long1 = MathUtils.pow((long) 3, 720L);
      double double4 = MathUtils.cosh(3);
      long long2 = MathUtils.subAndCheck((long) 3, 2819561105158720014L);
      long long3 = MathUtils.indicator(2432902008176640000L);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = 2591.6095689918;
      double double1 = MathUtils.log(0.0, 2591.6095689918);
      // Undeclared exception!
      try { 
        MathUtils.equals(-0.0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.cosh((-1335.244092664585));
      int int0 = MathUtils.gcd(0, 0);
      long long0 = MathUtils.lcm((long) 0, (long) 0);
      double double1 = 2.2250738585072014E-308;
      int int1 = MathUtils.hash(2.2250738585072014E-308);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      long long1 = bigInteger1.longValueExact();
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      // Undeclared exception!
      try { 
        bigInteger0.remainder(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      float float0 = MathUtils.indicator((-2013.79F));
      double double1 = MathUtils.binomialCoefficientDouble(7, 7);
      byte byte0 = MathUtils.indicator((byte)0);
      float float1 = MathUtils.sign(2675.0F);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, (double) 7);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(31, 0);
      long long0 = MathUtils.lcm((long) 0, (long) 31);
      long long1 = MathUtils.sign(0L);
      int int1 = 15;
      int int2 = MathUtils.mulAndCheck(15, 0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = MathUtils.pow((-4035746434778044925L), 0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = (-1255);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1255));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,255
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathUtils.log(Double.NEGATIVE_INFINITY, 0.0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, (-1662.3400634));
      int int0 = MathUtils.lcm(0, 0);
      int int1 = MathUtils.hash(0.0);
      int int2 = MathUtils.gcd(0, 156);
      long long0 = MathUtils.pow(3772L, 1366);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 11;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-43), 11);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -43, k = 11
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 2757;
      int int1 = MathUtils.gcd(2757, 2757);
      double double0 = MathUtils.factorialDouble(2757);
      int int2 = 0;
      double double1 = MathUtils.binomialCoefficientLog(2757, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(70);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(249, 11);
      boolean boolean0 = MathUtils.equals((-3953.40262156), (double) 11, 3905);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3905;
      doubleArray0[1] = (double) 249;
      doubleArray0[2] = (double) 11;
      doubleArray0[3] = (double) 11;
      doubleArray0[4] = (-3953.40262156);
      doubleArray0[5] = (-3953.40262156);
      doubleArray0[6] = (double) 3905;
      doubleArray0[7] = 42.965618683415464;
      doubleArray0[8] = (double) 11;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.lcm((-7278142539171889152L), 0L);
      long long1 = MathUtils.lcm(0L, 0L);
      long long2 = MathUtils.sign(0L);
      double double0 = MathUtils.indicator((double) 0L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2137.167566264975);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.sinh(0L);
      int int0 = MathUtils.compareTo(0.0, Double.NaN, 1103.0);
      double double3 = MathUtils.binomialCoefficientDouble(1119, 1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = MathUtils.cosh(1355.304);
      long long0 = MathUtils.indicator(820L);
      byte byte0 = MathUtils.sign((byte) (-74));
      long long1 = MathUtils.subAndCheck(9218868437227405312L, 9218868437227405312L);
      long long2 = MathUtils.subAndCheck((long) (byte) (-1), 9218868437227405312L);
      byte byte1 = MathUtils.indicator((byte) (-1));
      double double1 = MathUtils.binomialCoefficientDouble(252, (-389));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-1801), 151);
      double double0 = MathUtils.factorialDouble(1029);
      double double1 = MathUtils.indicator((double) (-1801));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float float0 = MathUtils.sign(1.0F);
      int int0 = 2976;
      // Undeclared exception!
      try { 
        MathUtils.factorial(2976);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(102, 102);
      double double1 = MathUtils.normalizeAngle(0.0, (-1440.6977636473484));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-734L), 153L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 153L;
      doubleArray0[1] = (double) 153L;
      doubleArray0[2] = (double) (-112302L);
      doubleArray0[3] = (double) (-734L);
      doubleArray0[4] = (double) (-112302L);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 153L;
      doubleArray1[1] = (double) 153L;
      doubleArray1[2] = (double) 153L;
      doubleArray1[3] = (double) (-112302L);
      doubleArray1[4] = (double) (-112302L);
      doubleArray1[5] = (double) (-734L);
      doubleArray1[6] = (double) 153L;
      doubleArray1[7] = (double) 153L;
      doubleArray1[8] = (double) (-112302L);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)106);
      int int0 = MathUtils.lcm(178, (int) (byte)106);
      int int1 = MathUtils.gcd(178, 9434);
      int int2 = MathUtils.hash(4564.012626397803);
      int[] intArray0 = new int[8];
      intArray0[0] = 9434;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = 0;
      intArray0[3] = 2076842402;
      intArray0[4] = 2076842402;
      intArray0[5] = 2076842402;
      intArray0[6] = 178;
      intArray0[7] = 9434;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd(1489L, (long) 0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      long long0 = MathUtils.gcd(0L, 1530L);
      long long1 = MathUtils.gcd(362880L, 0L);
      int int0 = MathUtils.addAndCheck(0, 0);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      float float0 = MathUtils.indicator((float) 1530L);
      double double2 = MathUtils.round((-2103.620646), 0, 0);
      byte byte0 = MathUtils.sign((byte)0);
      double double3 = MathUtils.sinh(0.0);
      long long2 = MathUtils.indicator(0L);
      BigInteger bigInteger0 = BigInteger.valueOf(362880L);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = MathUtils.sign((-1366L));
      int int0 = MathUtils.sign(20);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1366L);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-1366L);
      doubleArray0[4] = (double) (-1366L);
      doubleArray0[5] = (-1968.61985);
      doubleArray0[6] = (double) (-1L);
      doubleArray0[7] = (double) (-1L);
      doubleArray0[8] = (double) (-1L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2052.685313;
      doubleArray0[2] = 462.65649;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,052.685 >= 462.656)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = MathUtils.gcd((-2616), (-267));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.07842259109020233, 1321.61, 0.0);
      int int1 = MathUtils.hash(0.0);
      int int2 = MathUtils.pow(3988, (long) 0);
      double double0 = MathUtils.sign((double) 0);
      int[] intArray1 = new int[3];
      intArray1[0] = 46;
      intArray1[1] = 1;
      intArray1[2] = 1;
      int int3 = MathUtils.distance1(intArray1, intArray1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2717.3512);
      doubleArray0[2] = 42.0;
      doubleArray0[3] = 0.01745329052209854;
      doubleArray0[4] = (-2.957007209750105E-8);
      doubleArray0[5] = (-458.9997);
      doubleArray0[6] = 2268.840516020597;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-2,717.351 <= 42)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 754.3594);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.andNot(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.and(bigInteger1);
      String string0 = bigInteger0.toString();
      BigInteger bigInteger4 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger5 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 0L);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean1 = MathUtils.equals(0.0, Double.POSITIVE_INFINITY, (double) 0L);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float float0 = MathUtils.indicator(586.0F);
      long long0 = MathUtils.gcd(4241L, 4241L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 67);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathUtils.scalb(1622.9, 79);
      int int0 = MathUtils.indicator(79);
      double double1 = MathUtils.normalizeAngle(Double.POSITIVE_INFINITY, 0.0);
      double double2 = MathUtils.round(Double.NaN, 79, 79);
      double double3 = MathUtils.scalb(0.0, 63);
      long long0 = MathUtils.addAndCheck((long) 63, 7910884519577875640L);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = MathUtils.hash(55.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2562.32133561619, 0.0);
      double double0 = MathUtils.scalb(0.0, 1078689792);
      int int1 = MathUtils.lcm(1004, 782);
      int int2 = MathUtils.indicator(1078689792);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2121;
      double double0 = MathUtils.distance(intArray0, intArray0);
      try { 
        MathUtils.pow((long) 2121, (-86L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,121^-86)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      try { 
        MathUtils.pow((-2501L), (-481L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,501^-481)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = MathUtils.indicator((-1242));
      double double0 = (-1910.7869156268102);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (-1242), (-1910.7869156268102), (-1242));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      int int0 = MathUtils.indicator(0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, (-1824.8298738930187), (-1254));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      short short0 = MathUtils.sign((short)4279);
      long long0 = MathUtils.lcm(738L, (long) (short)1);
      boolean boolean0 = MathUtils.equals((double) (short)1, (double) (short)1);
      long long1 = MathUtils.gcd((long) (short)1, 1156L);
      int int0 = MathUtils.pow((int) (short)4279, 738L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1739266607);
      doubleArray0[1] = (double) (-1739266607);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) (short)4279;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.mulAndCheck((int) (short)1, 665);
      int[] intArray0 = new int[4];
      intArray0[0] = 41;
      intArray0[1] = (-1739266607);
      intArray0[2] = 665;
      intArray0[3] = (-1739266607);
      int int2 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      long long1 = MathUtils.subAndCheck(2657L, 0L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long2 = MathUtils.mulAndCheck(2657L, 0L);
      float float0 = MathUtils.round((float) 0L, (-54), 0);
      long long3 = 9193070505571053912L;
      int int0 = MathUtils.pow((-54), 9193070505571053912L);
      int int1 = 9;
      float float1 = MathUtils.round((float) (-54), 9);
      int int2 = MathUtils.hash(1723.794872687891);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = (double) (-1283328822);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger1.modInverse(bigInteger0);
      } catch(ArithmeticException e) {
         //
         // BigInteger not invertible.
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4392.0639022234);
      doubleArray0[1] = (-1071.0);
      doubleArray0[2] = (-442.34417);
      doubleArray0[3] = 6.283185307179586;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.indicator(0L);
      float float0 = MathUtils.indicator((float) 0L);
      int int1 = MathUtils.sign((-1489));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      double double0 = MathUtils.cosh(0.0F);
      short short0 = MathUtils.indicator((short)0);
      int int0 = (-1813);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1813));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,813
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = MathUtils.lcm(9154082963658192752L, 9154082963658192752L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 9154082963658192752L;
      doubleArray0[1] = (double) 9154082963658192752L;
      doubleArray0[2] = (double) 9154082963658192752L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (9,154,082,963,658,192,900 >= 9,154,082,963,658,192,900)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = MathUtils.compareTo((-2.6033824355191673E-8), (-2725.335129), (-2.6033824355191673E-8));
      long long0 = MathUtils.addAndCheck((long) 1, (long) 1);
      long long1 = MathUtils.gcd((long) 1, 24L);
      int int1 = 0;
      int int2 = 686;
      // Undeclared exception!
      try { 
        MathUtils.round((float) 24L, 0, 686);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 686, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 2069);
      double double1 = MathUtils.normalizeAngle(0.0, 0.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 219;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      byte byte0 = MathUtils.sign((byte) (-109));
      byte byte1 = MathUtils.indicator((byte)6);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-917.772), (-917.772));
      int int0 = MathUtils.sign(134);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (-917.772);
      doubleArray1[2] = (double) 1;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      double double1 = MathUtils.sinh((-0.2499999701976776));
      short short0 = MathUtils.sign((short)662);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.sinh(0.0);
      long long0 = MathUtils.subAndCheck((long) (byte)1, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (byte)0, (double) 0L, 0.0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = MathUtils.pow(3269L, 3269L);
      boolean boolean0 = MathUtils.equals(1042.2107032382, 2271.2068595558926);
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (-1897548770859585291L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,897,548,770,859,585,291)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.addAndCheck(0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = MathUtils.pow(2641, (long) 2641);
      double double0 = MathUtils.sign((double) 851200849);
      short short0 = MathUtils.indicator((short)2321);
      int int1 = MathUtils.pow((int) (short)1, 90);
      long long0 = MathUtils.sign((long) (short)2321);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        MathUtils.pow(42, (-373L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (42^-373)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = 9218868437227405312L;
      long long1 = MathUtils.lcm(9218868437227405312L, 9218868437227405312L);
      float float0 = MathUtils.round((float) 9218868437227405312L, 4);
      float float1 = MathUtils.round((float) 9218868437227405312L, 4);
      int int0 = 2045;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2095), 2045);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,095, k = 2,045
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2479.4879951;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = 548;
      int int1 = MathUtils.addAndCheck(548, 548);
      short short0 = MathUtils.sign((short)3465);
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(0L, 40320L);
      long long2 = MathUtils.sign((long) 548);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-769.6377), (double) 1096, (int) (short)1);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf(";7u");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.;7u
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = MathUtils.gcd((-87L), 534L);
      long long1 = MathUtils.lcm(534L, (-2158L));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1196), (-1196));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,196
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = MathUtils.scalb((-2806.68), 4);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2806.68);
      doubleArray0[1] = (-44906.88);
      doubleArray0[2] = (-136.723524434);
      doubleArray0[3] = (-2806.68);
      doubleArray0[4] = (-44906.88);
      doubleArray0[5] = (-44906.88);
      doubleArray0[6] = (-44906.88);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-932.4622447797366), (-932.4622447797366));
      long long0 = MathUtils.subAndCheck(453600L, 1814400L);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3197.8);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 5.669184079525E-24;
      doubleArray0[4] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.sign((long) (-1337294349));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathUtils.scalb((-624.3517), 752);
      int int0 = 66;
      // Undeclared exception!
      try { 
        MathUtils.round((float) 752, 66, 752);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 752, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(6.0, 6.0);
      long long0 = MathUtils.addAndCheck(4607182418800017408L, 4607182418800017408L);
      long long1 = MathUtils.sign(9214364837600034816L);
      boolean boolean0 = MathUtils.equals(0.05, 0.0, (double) 4607182418800017408L);
      float float0 = MathUtils.sign((-1.0F));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1057.278), (-1057.278));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = MathUtils.sign(835.1098063146);
      double double1 = MathUtils.scalb(1.0, 229);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 835.1098063146;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 229;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double3 = MathUtils.round(229.0, 229);
      boolean boolean0 = MathUtils.equalsIncludingNaN(8.627182933488205E68, 8.627182933488205E68, 229);
      long long0 = MathUtils.sign(6227020800L);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      int int0 = (-638);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-638));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -638
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 10.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.sign(0L);
      double double1 = MathUtils.sinh(10.0);
      int int0 = MathUtils.gcd((-2608), 145);
      int int1 = MathUtils.indicator(1226);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger1 = BigInteger.ONE;
      int int2 = bigInteger0.compareTo(bigInteger1);
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      long long1 = MathUtils.binomialCoefficient(1226, (-2608));
      int int3 = MathUtils.lcm((-2032), 246);
      int[] intArray0 = new int[9];
      intArray0[0] = 246;
      intArray0[1] = 1;
      intArray0[3] = 145;
      intArray0[4] = 156;
      intArray0[5] = 249936;
      intArray0[6] = 1;
      intArray0[7] = (-2032);
      intArray0[8] = 249936;
      double double2 = MathUtils.distance(intArray0, intArray0);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      short short0 = MathUtils.sign((short)63);
      byte byte0 = MathUtils.sign((byte)75);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = MathUtils.lcm(5040L, 4294967295L);
      long long1 = MathUtils.factorial(0);
      float float0 = MathUtils.round((-148.0F), 0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-148.0F);
      doubleArray0[3] = (-1040.15429);
      doubleArray0[4] = (double) (-148.0F);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 4294967295L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (0 > -148)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      int int0 = MathUtils.hash((double) 0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = (double) 0L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger("ROUND_HALF_DOWN", 7);
      } catch(NumberFormatException e) {
         //
         // For input string: \"ROUN\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1777;
      intArray0[1] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.indicator((double) 1777);
      int int1 = MathUtils.compareTo(3194.7764813, 1777, 0);
      int int2 = MathUtils.lcm(1777, 67);
      double double1 = MathUtils.cosh(3194.7764813);
      float float0 = MathUtils.sign((float) 0);
      double double2 = MathUtils.round((double) 1, 1777, 0);
      double double3 = MathUtils.round((double) 1, 0);
      int int3 = MathUtils.mulAndCheck(1, 1182);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1777;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1777;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1182;
      doubleArray0[7] = (double) 1182;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 122;
      intArray0[0] = 122;
      int int1 = (-995);
      intArray0[1] = (-995);
      intArray0[2] = 1002;
      intArray0[3] = 2243;
      int int2 = 449;
      intArray0[4] = 449;
      int int3 = (-2019);
      intArray0[5] = (-2019);
      int int4 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 122;
      doubleArray0[1] = (double) 449;
      doubleArray0[2] = (double) 1002;
      doubleArray0[3] = (double) 1002;
      doubleArray0[4] = (double) 449;
      doubleArray0[5] = (double) 1002;
      doubleArray0[6] = (double) 449;
      doubleArray0[7] = (double) 122;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (122 <= 449)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }
}
