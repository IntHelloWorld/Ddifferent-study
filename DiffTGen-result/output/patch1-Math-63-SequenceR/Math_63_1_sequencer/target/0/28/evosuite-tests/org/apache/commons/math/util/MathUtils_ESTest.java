/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 19:43:47 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.stream.DoubleStream;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      short short0 = MathUtils.sign((short)133);
      int int0 = MathUtils.hash(1.0);
      float float0 = MathUtils.sign(1518.0F);
      long long0 = MathUtils.subAndCheck(0L, 0L);
      double double0 = MathUtils.indicator(1.0);
      long long1 = MathUtils.addAndCheck(5311L, (-1568L));
      double double1 = MathUtils.log(2.4384203044354907E-8, (-1305.2947108));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1305.2947108);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 1072693248;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      // Undeclared exception!
      MathUtils.factorialLog(1072693248);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = MathUtils.sign(1085L);
      byte byte0 = MathUtils.sign((byte)0);
      long long1 = MathUtils.gcd((long) (byte)0, 0L);
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) 1085L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 0.11111095942313305;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (byte)0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign((float) 1085L);
      int int0 = MathUtils.indicator((int) (byte)0);
      double double0 = MathUtils.indicator(Double.POSITIVE_INFINITY);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals(1.304E19, 1.0, 0.0);
      float float1 = MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2399);
      intArray0[1] = 6;
      intArray0[2] = (-134);
      intArray0[3] = (-1494);
      intArray0[4] = 1717986918;
      intArray0[5] = 2147481926;
      intArray0[6] = 13;
      intArray0[7] = (-3363);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.EPSILON;
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 48;
      intArray0[2] = 48;
      intArray0[3] = (-1033);
      intArray0[4] = 0;
      intArray0[5] = (-2244);
      intArray0[6] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double1 = MathUtils.binomialCoefficientDouble(48, 4);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(323);
      int int0 = MathUtils.addAndCheck(323, 323);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2147483646);
      doubleArray0[1] = (double) 646;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = MathUtils.sign(1085L);
      byte byte0 = MathUtils.sign((byte)0);
      long long1 = MathUtils.gcd((long) (byte)0, 0L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1085L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 0.11111095942313305;
      doubleArray0[3] = 0.11111095942313305;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (byte)0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign((float) 1085L);
      int int0 = MathUtils.indicator((int) (byte)0);
      double double0 = MathUtils.indicator(Double.POSITIVE_INFINITY);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals(0.11111095942313305, 1.0, 0.11111095942313305);
      long long2 = MathUtils.gcd(3459L, 2047L);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.binomialCoefficientDouble(1329, 1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1763.6584855807, 1763.6584855807);
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 48;
      intArray0[2] = 891;
      intArray0[3] = 48;
      intArray0[4] = 0;
      intArray0[5] = (-2244);
      intArray0[6] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 48;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 1.1730463525082348E-7;
      doubleArray0[3] = (double) (-1033);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(323);
      int int0 = (-2147483646);
      int int1 = MathUtils.lcm((-2147483646), (-2147483646));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 3628800L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = MathUtils.sign(1085L);
      byte byte0 = MathUtils.sign((byte)0);
      long long1 = MathUtils.gcd((long) (byte)0, 0L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1085L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 0.11111095942313305;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (byte)0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign((float) 1085L);
      int int0 = MathUtils.indicator((int) (byte)0);
      double double0 = MathUtils.indicator((double) 0L);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals(1.304E19, 1.0, 0.0);
      byte byte1 = MathUtils.indicator((byte)0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (byte)0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) 1085L;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 2047L;
      doubleArray1[6] = 0.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      boolean boolean3 = MathUtils.equals(doubleArray0, doubleArray1);
      Random.setNextRandom((-5338));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        MathUtils.equals((-154.63), (-154.63), Integer.MAX_VALUE);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double double0 = MathUtils.scalb(2541.9928864, 67);
      double double1 = MathUtils.factorialDouble(67);
      long long0 = MathUtils.pow((-1421L), 4095L);
      int int0 = MathUtils.compareTo(3.751319377008883E23, 3.751319377008883E23, 3.6471110918188424E94);
      int int1 = MathUtils.gcd(0, (-282));
      byte byte0 = MathUtils.indicator((byte)109);
      int int2 = MathUtils.indicator(3);
      double double2 = MathUtils.factorialLog(3);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (byte)1, (int) (byte)1, (-282));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(323);
      int int0 = (-2147483646);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-2147483646), 752);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.indicator((float) 0L);
      boolean boolean0 = MathUtils.equals(0.0, Double.NaN);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 618.693;
      int int1 = MathUtils.hash(doubleArray0);
      float float1 = MathUtils.sign(0.0F);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(2L, 9223372036854775807L);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 2 + 9,223,372,036,854,775,807
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = MathUtils.gcd(4499201580859392L, 4499201580859392L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4499201580859392L;
      doubleArray0[1] = (double) 4499201580859392L;
      doubleArray0[2] = (double) 4499201580859392L;
      int int0 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((-1659802529), 2137159207);
      } catch(ArithmeticException e) {
         //
         // overflow in subtraction: -1,659,802,529 - 2,137,159,207
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Random.setNextRandom(Integer.MIN_VALUE);
      long long0 = MathUtils.sign((long) Integer.MIN_VALUE);
      float float0 = MathUtils.round((float) (-1L), 4, 4);
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      int int1 = 1177;
      int int2 = MathUtils.addAndCheck(4, 1177);
      long long1 = MathUtils.gcd((long) Integer.MIN_VALUE, (long) Integer.MIN_VALUE);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte byte0 = (byte)3;
      byte byte1 = MathUtils.indicator((byte)3);
      int int3 = MathUtils.indicator((int) (byte)3);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 63;
      double double0 = MathUtils.binomialCoefficientLog(63, (-485717527));
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 63);
      double double1 = MathUtils.sign((-1219.0));
      double double2 = MathUtils.log(0.0, 63);
      boolean boolean1 = MathUtils.equals((-5726.73228439), (-5726.73228439), 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1219.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-5726.73228439);
      doubleArray0[4] = -0.0;
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean3 = bigInteger0.equals((Object) null);
      BigInteger bigInteger1 = null;
      // Undeclared exception!
      try { 
        bigInteger0.compareTo((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      double double0 = MathUtils.normalizeAngle(Float.NaN, Float.NaN);
      int int0 = MathUtils.mulAndCheck(0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.binomialCoefficient(0, (-1216));
      // Undeclared exception!
      try { 
        MathUtils.equals(1632.260203481845, Double.NaN, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3320.069753642915;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.14982303977012634;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1630.855357;
      double double0 = 421.690013733447;
      doubleArray0[6] = 421.690013733447;
      doubleArray0[7] = 62.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 1630.855357, 1630.855357);
      boolean boolean2 = MathUtils.equals(44.736674656, 0.0, 3077);
      int int0 = 0;
      long long0 = MathUtils.factorial(0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 3077, 3077);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.sinh((-633.4065249));
      double double1 = MathUtils.sinh(0.08371849358081818);
      long long0 = MathUtils.pow((long) 0, (long) 0);
      double double2 = MathUtils.cosh(0);
      double[] doubleArray0 = new double[0];
      double double3 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.08381632202742034;
      doubleArray1[2] = (-633.4065249);
      doubleArray1[3] = 0.08381632202742034;
      doubleArray1[4] = (-3005.0156);
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 0.08381632202742034;
      doubleArray1[7] = 0.08381632202742034;
      double double4 = MathUtils.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = MathUtils.mulAndCheck(0, 0);
      long long0 = (-4035746434778044925L);
      long long1 = (-439L);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-4035746434778044925L), (-439L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 0.0F;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = MathUtils.sign((-1102L));
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-113);
      byte byte0 = bigInteger0.byteValueExact();
      byteArray0[1] = (byte)0;
      BigInteger bigInteger1 = BigInteger.valueOf((byte) (-113));
      BigInteger bigInteger2 = bigInteger0.negate();
      byteArray0[2] = (byte)117;
      double double0 = bigInteger0.doubleValue();
      byteArray0[3] = (byte)0;
      BigInteger bigInteger3 = bigInteger0.abs();
      BigInteger bigInteger4 = bigInteger0.setBit((byte)0);
      byteArray0[4] = (byte) (-25);
      BigInteger bigInteger5 = new BigInteger(byteArray0);
      BigInteger bigInteger6 = BigInteger.ONE;
      long long1 = MathUtils.lcm((-2564327L), (long) (byte)0);
      BigInteger bigInteger7 = bigInteger6.flipBit(6);
      // Undeclared exception!
      try { 
        bigInteger6.testBit((byte) (-113));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.round(1.0, 0, 0);
      double double2 = MathUtils.scalb(1.0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double3 = MathUtils.factorialLog(0);
      int int1 = (-2170);
      double double4 = MathUtils.scalb(1145.6625, (-2170));
      double double5 = MathUtils.cosh(1.0);
      long long0 = MathUtils.lcm(349L, 349L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = (short) (-1912);
      short short1 = MathUtils.sign((short) (-1912));
      try { 
        MathUtils.pow((-76L), (long) (short) (-1912));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-76^-1,912)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.indicator(0);
      long long1 = MathUtils.mulAndCheck(0L, (-1060L));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = MathUtils.sign(745L);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      double double0 = MathUtils.distance(intArray0, intArray1);
      int int0 = MathUtils.pow(0, 0);
      float float0 = MathUtils.round((float) 745L, 0);
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
      float float1 = MathUtils.round((float) 0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 3464.95225391478, 12);
      double double2 = MathUtils.scalb(0.0, 1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1610.871452328978);
      doubleArray0[2] = (double) 12;
      doubleArray0[3] = 671.125;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 2809.28081129562;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 1L;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1L;
      doubleArray1[3] = (double) 0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      int int1 = 2505;
      int int2 = MathUtils.gcd(0, 2505);
      float float0 = 1.0F;
      float float1 = MathUtils.sign(1.0F);
      double double0 = 1.1102230246251565E-16;
      double double1 = MathUtils.cosh(1.1102230246251565E-16);
      float float2 = MathUtils.indicator((float) 2505);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1063, 2505);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1,063, k = 2,505
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(1086, 1086);
      double double0 = MathUtils.factorialLog(0);
      short short0 = MathUtils.sign((short)0);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 1179396;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 0, 1844.22765);
      int int2 = MathUtils.compareTo(0, 1121.97903626867, 0.0);
      double double1 = MathUtils.round((-475.90846741595), 1378);
      int int3 = MathUtils.pow(1378, (long) 0);
      short short1 = MathUtils.sign((short)0);
      int int4 = MathUtils.sign(0);
      int int5 = MathUtils.pow(1086, 1086);
      double double2 = MathUtils.cosh(0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (0 < 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = MathUtils.indicator((-1509.08091074));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1509.08091074);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1509.08091074);
      doubleArray0[4] = (-1509.08091074);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1509.08091074);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator(0.0F);
      double double1 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-183.25577), (-183.25577));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.shiftLeft((-911));
      Object object0 = new Object();
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigInteger bigInteger3 = bigInteger0.gcd(bigInteger2);
      boolean boolean0 = bigInteger0.equals(object0);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0);
      boolean boolean1 = MathUtils.equals(222.801, 222.801);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2110.13319423;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 72.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2655.4871902426);
      doubleArray0[6] = 3222.475566508;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = 1101;
      double double0 = MathUtils.binomialCoefficientDouble(1101, 0);
      long long0 = 0L;
      int int1 = MathUtils.pow(1101, 0L);
      int int2 = MathUtils.addAndCheck(1, 365);
      long long1 = MathUtils.pow((long) 1, (long) 366);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = MathUtils.hash((-1155.644));
      boolean boolean0 = MathUtils.equals((-1155.644), (double) (-1272027924), 470);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 62;
      intArray0[1] = 1062;
      intArray0[2] = 19;
      intArray0[3] = 1666;
      intArray0[4] = 174;
      intArray0[5] = 0;
      intArray0[6] = (-1028);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.compareTo(10.0, 1666, 133.9759317);
      double double0 = MathUtils.log(0.0, 2.2250738585072014E-308);
      int int2 = MathUtils.addAndCheck((-3812), (-32));
      byte byte0 = MathUtils.indicator((byte)48);
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom((-2020L));
      BigInteger bigInteger1 = BigInteger.probablePrime(362, mockRandom0);
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(131L, 0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 2751);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2751;
      doubleArray0[2] = (double) 131L;
      doubleArray0[3] = (double) 2751;
      doubleArray0[4] = (double) 131L;
      doubleArray0[5] = 0.1111111111111111;
      doubleArray0[6] = (double) 2751;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 2,751)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 408.5774723018;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.6159073510033946;
      doubleArray0[4] = 4.9E-324;
      doubleArray0[5] = 8.251545029714408E-9;
      doubleArray0[6] = 1544.8;
      doubleArray0[8] = 0.6159073510033946;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long long0 = 1271L;
      long long1 = MathUtils.pow(1271L, 9);
      int int0 = 25;
      float float0 = MathUtils.round((-1.0F), 25);
      byte byte0 = (byte) (-60);
      byte byte1 = MathUtils.sign((byte) (-60));
      // Undeclared exception!
      try { 
        MathUtils.lcm(3099L, (-5854001554769912905L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.5830993332061267E-10, 1.5830993332061267E-10);
      long long0 = MathUtils.factorial(0);
      double double0 = MathUtils.cosh(1.5830993332061267E-10);
      double[] doubleArray0 = null;
      int int0 = MathUtils.hash((double[]) null);
      long long1 = MathUtils.subAndCheck((long) 0, 1L);
      byte byte0 = (byte) (-120);
      byte byte1 = MathUtils.indicator((byte) (-120));
      int int1 = MathUtils.hash((double) 1L);
      int int2 = MathUtils.lcm(0, (int) (byte) (-120));
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(63, 0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 63);
      double double1 = MathUtils.sign((-1219.0));
      double double2 = MathUtils.log(0.0, 63);
      boolean boolean1 = MathUtils.equals((-5726.73228439), (-5726.73228439), 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1219.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-5726.73228439);
      doubleArray0[4] = -0.0;
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = null;
      // Undeclared exception!
      try { 
        bigInteger0.compareTo((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1.625, 0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(6227020800L, 6227020800L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = 1448L;
      long long1 = MathUtils.gcd(1448L, 1448L);
      double double0 = MathUtils.log(1443.4457268636, 0.16666666666666666);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-0.2462971251786135), (-0.2462971251786135), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1182.766435671318);
      doubleArray0[1] = 0.5;
      doubleArray0[2] = 0.4342944622039795;
      doubleArray0[3] = 2.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      short short0 = MathUtils.indicator((short)2507);
      double double0 = MathUtils.round(1464.49363544, 0);
      double double1 = MathUtils.log((short)1, 1083.75256);
      int int0 = MathUtils.addAndCheck(12, 12);
      int int1 = MathUtils.hash((double) (short)1);
      int int2 = MathUtils.pow((int) (short)1, (long) 0);
      int int3 = MathUtils.gcd(1072693248, (int) (short)2507);
      double double2 = MathUtils.log(0.4342944622039795, 0.0);
      double double3 = MathUtils.sinh(0.0);
      int int4 = MathUtils.pow(24, (long) 0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1402.5702);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      double double4 = MathUtils.sign(0.5);
      long long0 = MathUtils.sign((-690L));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = (-1.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1.0), (-1.0));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = 3628800L;
      long long1 = (-5034868814120038111L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(3628800L, (-5034868814120038111L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 2546;
      boolean boolean0 = MathUtils.equalsIncludingNaN(1900.84117048679, 1900.84117048679, 2546);
      int int1 = 6;
      int int2 = MathUtils.mulAndCheck(6, (-2738));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1900.84117048679;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 2546;
      doubleArray0[5] = (double) (-2738);
      double double0 = (-1597.19710927632);
      doubleArray0[6] = (-1597.19710927632);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals((double) (-2738), 6.0);
      boolean boolean3 = MathUtils.equalsIncludingNaN(6.0, 6.0);
      long long0 = MathUtils.addAndCheck((long) 6, (-883L));
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1286);
      boolean boolean0 = MathUtils.equals((double) (short)1, 1.304E19);
      int int0 = MathUtils.pow((int) (short)1, 4577762542105553359L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4577762542105553359L;
      doubleArray0[2] = (double) (short)1286;
      doubleArray0[3] = (double) (short)1;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3244.9529), (-3244.9529), 4);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.167;
      doubleArray0[2] = (-0.2499999997677497);
      doubleArray0[3] = (-2896.02675592427);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1694.509675584215);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 0.167)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = MathUtils.pow(71, 0L);
      double double0 = MathUtils.sinh(71);
      byte byte0 = MathUtils.sign((byte) (-43));
      long long0 = MathUtils.mulAndCheck((long) 71, 2047L);
      long long1 = MathUtils.indicator((long) 71);
      float float0 = MathUtils.indicator((float) 0L);
      long long2 = MathUtils.pow(0L, 1);
      long long3 = MathUtils.addAndCheck(2935890503282001226L, 2047L);
      long long4 = MathUtils.sign((-2290L));
      int int1 = MathUtils.addAndCheck((-484), (int) (byte) (-1));
      double double1 = MathUtils.log(1.0E-6, (-1959.933));
      double double2 = MathUtils.normalizeAngle(0L, 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 145337L;
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (-1461.91);
      doubleArray0[3] = Double.NaN;
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-484);
      intArray0[1] = 71;
      intArray0[2] = (int) (byte) (-43);
      intArray0[3] = 1;
      intArray0[4] = 71;
      intArray0[5] = 71;
      intArray0[6] = (int) (byte) (-1);
      intArray0[7] = (-485);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = (-1557);
      int int1 = (-5186);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1557), (-5186));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,557
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 12;
      int int1 = MathUtils.mulAndCheck(12, 12);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 144;
      doubleArray0[1] = (double) 12;
      doubleArray0[2] = 1151.986684;
      doubleArray0[3] = (double) 144;
      doubleArray0[4] = (double) 144;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck((long) 144, (long) 12);
      long long1 = MathUtils.mulAndCheck((-1315L), (-59L));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (144 >= 12)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      double double0 = MathUtils.normalizeAngle(Float.NaN, Float.NaN);
      byte byte0 = MathUtils.sign((byte)66);
      int int0 = MathUtils.mulAndCheck(0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)66;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (byte)66;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (byte)1;
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.binomialCoefficient(1261, (-1216));
      // Undeclared exception!
      try { 
        MathUtils.equals(1632.260203481845, Double.NaN, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(2594, (-2550));
      long long1 = MathUtils.gcd((long) (-2550), (long) 2594);
      long long2 = MathUtils.subAndCheck(0L, (long) 2594);
      int int0 = MathUtils.addAndCheck(0, 588);
      int int1 = MathUtils.lcm(4194304, 0);
      double double0 = MathUtils.log(0, 0L);
      short short0 = MathUtils.sign((short) (-2141));
      int int2 = MathUtils.mulAndCheck((-965), 2594);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      long long0 = MathUtils.addAndCheck((long) 0, (long) 0);
      double double0 = MathUtils.scalb(0.0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      double double0 = MathUtils.cosh(0.0);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      long long1 = MathUtils.pow(0L, 2207);
      boolean boolean0 = MathUtils.equals((double) 0L, (-127.33520744108), 2207);
      boolean boolean1 = MathUtils.equals(0.0, 0.0);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.hash(0.0);
      double double2 = MathUtils.indicator(2783.504324182);
      double double3 = MathUtils.scalb((-2424.232919447), 1);
      float float0 = MathUtils.sign(5050.0557F);
      long long2 = MathUtils.gcd(0L, (-302932621132653753L));
      double double4 = MathUtils.factorialLog(2207);
      int int2 = MathUtils.sign(2207);
      double double5 = MathUtils.cosh(1.0);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) 1, (double) 1.0F, 0.0);
      int int3 = MathUtils.hash(doubleArray0);
      int int4 = MathUtils.hash(doubleArray0);
      double double6 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean3 = MathUtils.equalsIncludingNaN((double) (-302932621132653753L), 0.0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = MathUtils.sign(1085L);
      byte byte0 = MathUtils.sign((byte)0);
      long long1 = MathUtils.gcd((long) (byte)0, 0L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1085L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 0.11111095942313305;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (byte)0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign((float) 1085L);
      int int0 = MathUtils.indicator((int) (byte)0);
      double double0 = MathUtils.indicator(Double.POSITIVE_INFINITY);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals(1.304E19, 1.0, 0.0);
      long long2 = MathUtils.gcd(3459L, 2047L);
      double double1 = MathUtils.round(0.0, 1260, (int) (byte)0);
      double double2 = MathUtils.binomialCoefficientLog(1260, (-1));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = MathUtils.gcd(1491L, 1491L);
      long long1 = MathUtils.lcm(1491L, 1491L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1491L;
      doubleArray0[1] = (double) 1491L;
      doubleArray0[2] = (double) 1491L;
      doubleArray0[3] = (double) 1491L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long2 = MathUtils.sign(1491L);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = (-2158);
      double double0 = MathUtils.scalb(1491L, (-2158));
      long long3 = MathUtils.addAndCheck(1L, (-2147483648L));
      int int2 = (-231);
      // Undeclared exception!
      try { 
        MathUtils.equals(1491.0, (double) 293672833, (-231));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = (-1441L);
      long long1 = MathUtils.addAndCheck((-1441L), (-1441L));
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      long long2 = 7910884519577875640L;
      // Undeclared exception!
      try { 
        MathUtils.lcm((-2882L), 7910884519577875640L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float float0 = MathUtils.indicator(1698.0F);
      short short0 = MathUtils.indicator((short)11);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 221;
      double double0 = MathUtils.binomialCoefficientDouble(221, 221);
      double double1 = (-223.5388265372695);
      int int1 = 845;
      // Undeclared exception!
      try { 
        MathUtils.round((-223.5388265372695), 845, 221);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = MathUtils.gcd(4294967295L, 4294967295L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 4294967295L;
      doubleArray0[1] = (double) 4294967295L;
      doubleArray0[2] = (double) 4294967295L;
      doubleArray0[3] = (double) 4294967295L;
      doubleArray0[4] = (double) 4294967295L;
      doubleArray0[5] = 605.144415;
      doubleArray0[6] = 1240.1469325444803;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = MathUtils.binomialCoefficient(299, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 299;
      intArray0[2] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 241.28587941853;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 299;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 299);
      long long1 = MathUtils.mulAndCheck((-2976L), 1031L);
      byte byte0 = MathUtils.indicator((byte)11);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 1.5);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-944.3809446326), Double.NEGATIVE_INFINITY);
      int int0 = 0;
      int int1 = MathUtils.pow(0, (long) 0);
      float float0 = MathUtils.round(0.0F, (-475), 0);
      try { 
        MathUtils.pow(0, (-2840));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,840)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = bigInteger0.clearBit(8);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      BigInteger bigInteger3 = bigInteger0.shiftRight(1);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 8;
      intArray0[4] = 1;
      BigInteger bigInteger4 = bigInteger0.add(bigInteger1);
      intArray0[5] = 1;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 2508.9928864;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = (double) 8;
      doubleArray0[7] = (double) 8;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = MathUtils.pow(1L, 0);
      long long1 = MathUtils.indicator(1L);
      short short0 = MathUtils.sign((short)0);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = 0;
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (short)0;
      intArray0[8] = (int) (short)0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator(667.0113F);
      long long0 = MathUtils.pow(2147483647L, 2147483647L);
      boolean boolean0 = MathUtils.equals(2319.06315586399, (-2050.7106897), 14);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 2420);
      int int0 = 0;
      float float0 = MathUtils.round((-2721.9285F), 3112, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1517), 2420);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,517, k = 2,420
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = MathUtils.indicator(746);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.clearBit(1);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 746);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-552);
      intArray0[2] = 391;
      intArray0[3] = 1618;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      float float0 = MathUtils.sign((-1.0F));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-552);
      doubleArray0[1] = (double) (-552);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-552);
      doubleArray0[4] = (double) (-552);
      doubleArray0[5] = (double) (-552);
      doubleArray0[6] = (double) 391;
      doubleArray0[7] = (double) (-552);
      int int1 = MathUtils.hash(doubleArray0);
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 1618;
      intArray1[2] = 391;
      intArray1[3] = 1618;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = (-552);
      intArray1[8] = 391;
      int int2 = MathUtils.distanceInf(intArray0, intArray1);
      int int3 = 1889;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(94, 1889);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 94, k = 1,889
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = MathUtils.sinh((-707.07703943));
      double double1 = MathUtils.scalb((-994.0), (-3777));
      short short0 = MathUtils.sign((short) (-4514));
      int int0 = MathUtils.subAndCheck((int) (short) (-1), (int) (short) (-1));
      double double2 = MathUtils.round((double) (short) (-4514), 0);
      int int1 = MathUtils.indicator(0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-3777);
      intArray0[1] = 1;
      intArray0[2] = (-3777);
      intArray0[3] = (int) (short) (-4514);
      intArray0[4] = (int) (short) (-4514);
      intArray0[5] = 0;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(0);
      try { 
        MathUtils.pow(bigInteger0, (-114));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-114)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathUtils.sign(Double.POSITIVE_INFINITY);
      short short0 = MathUtils.sign((short) (-2796));
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-1);
      intArray0[2] = (int) (short) (-1);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = (-2068);
      double double0 = MathUtils.scalb((-290.194), (-2068));
      int int1 = MathUtils.addAndCheck((-2068), (-2068));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = MathUtils.pow((-7278142539171889152L), 307);
      double double0 = MathUtils.cosh((-7278142539171889152L));
      short short0 = MathUtils.sign((short) (-3081));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = MathUtils.sign((-4267615245585081135L));
      float float0 = MathUtils.sign((float) (-1L));
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long2 = MathUtils.pow(0L, (int) (byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom(851L);
      DoubleStream doubleStream0 = mockRandom0.doubles((long) (byte)0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      double double1 = mockRandom0.nextGaussian();
      // Undeclared exception!
      try { 
        mockRandom0.doubles(0L, (double) 851L, (double) (byte)0);
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = MathUtils.sign((-1549.279349935));
      long long0 = MathUtils.pow(9223372036854775807L, 9223372036854775807L);
      double double1 = MathUtils.normalizeAngle(2316.7070137913247, (-1918.0633495312557));
      byte byte0 = MathUtils.indicator((byte)98);
      long long1 = MathUtils.mulAndCheck((long) (byte)1, (long) (byte)98);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1918.0633495312557);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 98L;
      doubleArray0[3] = (-1918.0633495312557);
      doubleArray0[4] = (double) 9223372036854775807L;
      doubleArray0[5] = (-1918.0633495312557);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      double double3 = MathUtils.log((byte)1, 4026.745615573);
      long long2 = MathUtils.gcd((-1482L), 0L);
      long long3 = MathUtils.addAndCheck(912L, 644L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.subAndCheck((int) (byte)1, (int) (byte)1);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (98 >= -1,918.063)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      int[] intArray0 = new int[1];
      intArray0[0] = 6;
      double double0 = MathUtils.distance(intArray0, intArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = bigInteger0.toByteArray();
      boolean boolean0 = bigInteger0.equals("UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM");
      int int0 = bigInteger0.bitLength();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 6);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-497L), (-497L));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-497L);
      doubleArray0[1] = (double) (-497L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-497.0));
      int int0 = MathUtils.gcd((-313), (-3913));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 395.90200176632305;
      doubleArray0[1] = 926.27091562;
      doubleArray0[2] = 2344.0985130474837;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3191.04192);
      doubleArray0[5] = 2.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 5595.4111124269;
      doubleArray0[8] = 6.283185307179586;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (2,344.099 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = MathUtils.gcd(873L, 873L);
      boolean boolean0 = MathUtils.equals((double) 873L, 0.0, 0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 873L;
      doubleArray0[1] = (double) 873L;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 873L;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 873L;
      doubleArray0[7] = (double) 873L;
      doubleArray0[8] = (double) 873L;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 186;
      // Undeclared exception!
      try { 
        MathUtils.factorial(186);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 5648769086999809661L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, (double) 5648769086999809661L, 0.0);
      boolean boolean1 = MathUtils.equals(1.304E19, 0.0, 65);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.round((-1466.9521), 0, 0);
      int int0 = MathUtils.pow(0, (long) 0);
      long long0 = MathUtils.subAndCheck((-7278142539171889152L), (long) 1);
      try { 
        MathUtils.pow((long) 0, (-53L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-53)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3294198.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.sinh(523.6213552895875);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      float float0 = MathUtils.round((float) (short)1, 4886);
      int int0 = MathUtils.indicator(4886);
      long long0 = MathUtils.sign((long) (short)1);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (int) (short)0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.indicator(4886);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(1, 747);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 747
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 5;
      int int1 = MathUtils.mulAndCheck(5, 5);
      long long0 = MathUtils.subAndCheck((long) 5, 2L);
      float float0 = MathUtils.indicator((-1751.5F));
      double double0 = MathUtils.factorialLog(0);
      double double1 = MathUtils.factorialDouble(0);
      int int2 = MathUtils.pow(1111, 1111);
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 620;
      double double0 = MathUtils.factorialDouble(620);
      long long0 = MathUtils.mulAndCheck((long) 620, (long) 620);
      double double1 = (-2493.060690074);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1347.828723538535), 4182.85448422713, (-2493.060690074));
      int int1 = 204;
      int int2 = 192;
      int int3 = MathUtils.addAndCheck(204, 192);
      int[] intArray0 = new int[1];
      intArray0[0] = 204;
      int int4 = MathUtils.distanceInf(intArray0, intArray0);
      int int5 = (-1777);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1777), 204);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,777, k = 204
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathUtils.sign(11.0);
      int int0 = MathUtils.addAndCheck(0, 0);
      float float0 = MathUtils.indicator(423.78F);
      double double1 = MathUtils.factorialDouble(0);
      long long0 = MathUtils.sign((long) 0);
      double double2 = MathUtils.factorialLog(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 11.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.097);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (11 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1657.025645068, 1657.025645068);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1657.025645068;
      doubleArray0[1] = 1657.025645068;
      doubleArray0[2] = 1657.025645068;
      doubleArray0[3] = 1657.025645068;
      doubleArray0[4] = 1657.025645068;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.087);
      int int0 = MathUtils.hash(1657.025645068);
      int int1 = (-428);
      int int2 = MathUtils.subAndCheck(4496, (-428));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-428));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -428
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 5379.283632351916;
      doubleArray0[2] = (-185.5772885);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.sinh(5379.283632351916);
      int int0 = 121;
      long long0 = MathUtils.pow(0L, 121);
      int int1 = 0;
      int int2 = (-2386);
      int int3 = MathUtils.lcm(0, (-2386));
      float float0 = MathUtils.sign((-3546.489F));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (5,379.284 > -185.577)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1790.2137194855, 1790.2137194855);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1028));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,028
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1518.637569126;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-3695.77419804);
      doubleArray0[3] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (\u221E > -3,695.774)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = MathUtils.log(2704.23, 2704.23);
      double double1 = MathUtils.indicator(0.0);
      double double2 = MathUtils.indicator(2.2250738585072014E-308);
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = MathUtils.indicator(1);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 23.1897618842, (double) 1);
      int int1 = MathUtils.hash(0.0);
      int int2 = MathUtils.subAndCheck(1, 0);
      long long1 = MathUtils.addAndCheck(0L, (long) 1);
      double double3 = MathUtils.round(3621.733747803994, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      double double4 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1870;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.indicator((double) 0);
      long long0 = MathUtils.factorial(20);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = (-302.6828);
      boolean boolean0 = MathUtils.equalsIncludingNaN(686.62822, (-302.6828));
      int int1 = MathUtils.addAndCheck(199, 925);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 0;
      double double1 = MathUtils.round(0.0, 0);
      int int1 = 2485;
      double double2 = MathUtils.binomialCoefficientDouble(2485, 2485);
      byte byte0 = (byte)55;
      byte byte1 = MathUtils.sign((byte)55);
      long long0 = MathUtils.sign((-1279L));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 67);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 67
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(0, 0);
      double double0 = MathUtils.normalizeAngle(1, 141.1729290391933);
      int int2 = (-2626);
      int int3 = MathUtils.subAndCheck(1298, (-2626));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 3924);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 7;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 7;
      intArray1[4] = 0;
      intArray1[5] = 7;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.06666666666666667, 0.05, 1433.096577);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      int int0 = (-4566);
      // Undeclared exception!
      try { 
        MathUtils.round((-830.058F), (-4566), (-3035));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -3,035, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[3] = 7;
      intArray0[4] = 0;
      intArray0[5] = 7;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = (-2104.3574632269497);
      int int0 = 1936;
      boolean boolean0 = MathUtils.equals(0.0, (-2104.3574632269497), 1936);
      int int1 = (-2122);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1936, (-2122), 1936);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = MathUtils.lcm(147, 147);
      long long0 = MathUtils.mulAndCheck((-2442L), 0L);
      double double0 = MathUtils.factorialLog(1905);
      long long1 = MathUtils.indicator((long) 147);
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 1766;
      boolean boolean0 = MathUtils.equals(251.566715988572, 3444.757354994, 1766);
      int[] intArray0 = new int[5];
      intArray0[0] = 1766;
      intArray0[1] = 1766;
      intArray0[2] = 1766;
      intArray0[3] = 1766;
      intArray0[4] = 1766;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.cosh(0.0);
      long long0 = MathUtils.mulAndCheck((long) 1766, 3540L);
      // Undeclared exception!
      try { 
        MathUtils.equals(251.566715988572, 4234.510043688, (-340));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)122);
      int int0 = MathUtils.addAndCheck((int) (byte)122, (-959));
      double double0 = MathUtils.sign(0.0);
      long long0 = MathUtils.gcd(5648769086999809661L, 381L);
      long long1 = MathUtils.sign(1261L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-959);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)122;
      doubleArray0[4] = 2170.85300168799;
      doubleArray0[5] = (double) (-959);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      double double4 = MathUtils.cosh(1261L);
      int int1 = MathUtils.addAndCheck((int) (byte)1, (-959));
      int int2 = MathUtils.addAndCheck((int) (byte)1, 1030);
      int int3 = MathUtils.sign((-638));
      double double5 = MathUtils.normalizeAngle(2170.85300168799, (-779.12516904742));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-877.97613);
      doubleArray0[1] = 363.0;
      doubleArray0[2] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck(2935890503282001226L, 2935890503282001226L);
      byte byte0 = MathUtils.indicator((byte)0);
      long long1 = MathUtils.gcd((long) (byte)1, 0L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.mulAndCheck((int) (byte)0, 53);
      float float0 = MathUtils.indicator(0.0F);
      double double1 = MathUtils.scalb(2935890503282001226L, 0);
      double double2 = MathUtils.round(3643.887071555771, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = MathUtils.pow((-1651), 9218868437227405312L);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-493));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -493
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      long long1 = MathUtils.lcm((long) 0, 0L);
      double double1 = MathUtils.sign((double) 0L);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1708.30204);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)96;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      BigInteger[] bigIntegerArray0 = bigInteger3.divideAndRemainder(bigInteger0);
      BigInteger[] bigIntegerArray1 = bigInteger3.divideAndRemainder(bigInteger0);
      BigInteger bigInteger4 = bigInteger3.flipBit(158);
      BigInteger bigInteger5 = bigInteger0.modPow(bigInteger3, bigInteger3);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float float0 = MathUtils.indicator((-444.8982F));
      float float1 = MathUtils.sign((-444.8982F));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-444.8982F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-444.8982F);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.gcd(0, 0);
      long long0 = MathUtils.sign((-593L));
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, (-1.0));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(4053, 2298);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = MathUtils.gcd((-3374L), (-2215L));
      int int0 = MathUtils.addAndCheck((-1157), (-1157));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3374L);
      doubleArray0[1] = (double) (-2215L);
      doubleArray0[2] = (double) 1L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = MathUtils.round(2559.586, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 2559.586;
      doubleArray0[2] = 2560.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = (-1007.219);
      double double1 = MathUtils.cosh((-1007.219));
      double double2 = MathUtils.normalizeAngle((-1007.219), Double.POSITIVE_INFINITY);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1788);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, (-1788), (-1788));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,788, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(2.718281828459045, 2.718281828459045, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = MathUtils.indicator(1471.803718195935);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1471.803718195935;
      doubleArray0[1] = 1471.803718195935;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1471.803718195935;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1471.803718195935;
      doubleArray0[6] = 1471.803718195935;
      doubleArray0[7] = 1471.803718195935;
      doubleArray0[8] = 1.0;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.compareTo(1.0, 1471.803718195935, 1471.803718195935);
      long long0 = 3952090531849364496L;
      long long1 = MathUtils.indicator(3952090531849364496L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      long long2 = bigInteger0.longValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      int int2 = bigInteger0.signum();
      BigInteger bigInteger2 = BigInteger.valueOf((-145L));
      BigInteger bigInteger3 = bigInteger0.min(bigInteger1);
      int int3 = bigInteger0.signum();
      double double1 = bigInteger0.doubleValue();
      try { 
        MathUtils.pow(bigInteger0, (-3353L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-3,353)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 406;
      int int1 = 0;
      int int2 = MathUtils.pow(406, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1, (double) 0, (double) 0);
      double double0 = MathUtils.indicator((double) 0);
      int int3 = (-71);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-71));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -71
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = MathUtils.hash(3508.40663804333);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1920465411;
      doubleArray0[1] = (double) 1920465411;
      doubleArray0[2] = (-1024.0);
      doubleArray0[3] = (double) 1920465411;
      doubleArray0[4] = 3508.40663804333;
      doubleArray0[5] = (double) 1920465411;
      doubleArray0[6] = (-1024.0);
      doubleArray0[7] = (-1024.0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      boolean boolean0 = MathUtils.equals(385.0, (-1024.0), 3508.40663804333);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(3508.40663804333, 4172.67314, 1920465411);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.834E-20, (-2396.3939), 3.834E-20);
      // Undeclared exception!
      try { 
        MathUtils.equals((-2396.3939), (-2396.3939), (-1736));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2505.57363);
      doubleArray0[1] = 0.0;
      double double0 = 1.5707963267948966;
      doubleArray0[2] = 1.5707963267948966;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.scalb(1.5707963267948966, 740);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger0.min(bigInteger2);
      BigInteger bigInteger4 = bigInteger0.multiply(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-2644281811660520851L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,644,281,811,660,520,851)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1480.333946;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1024.0;
      doubleArray0[5] = (-3423.85816376856);
      doubleArray0[6] = 0.25;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1024.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1024.0;
      doubleArray1[3] = 1480.333946;
      doubleArray1[4] = 1327.911;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-3423.85816376856);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.25;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      int int1 = MathUtils.hash(1327.911);
      boolean boolean0 = MathUtils.equals(1024.0, 3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = MathUtils.hash(298.5339);
      int int1 = MathUtils.compareTo((-2376.0), (-1697948208), (-1697948208));
      int int2 = MathUtils.indicator(1);
      long long0 = MathUtils.mulAndCheck((long) 1, (-1L));
      boolean boolean0 = MathUtils.equals((double) 1, (double) (-1L), 2943);
      double double0 = MathUtils.round(0.0, 1093);
      float float0 = MathUtils.sign((float) 1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1750));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,750
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(105, 0);
      byte byte0 = MathUtils.sign((byte)87);
      float float0 = MathUtils.round((float) (byte)1, 105);
      int int1 = MathUtils.lcm(105, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 105;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (double) 105;
      doubleArray0[4] = 1.494140625;
      doubleArray0[5] = (double) Float.NaN;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (byte)1, 1099.15177);
      byte byte1 = MathUtils.sign((byte)87);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathUtils.cosh((-396.6157162831198));
      int int0 = (-997);
      int int1 = 93;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-997), 93);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -997, k = 93
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = MathUtils.indicator(0.4342944622039795);
      int int0 = 132;
      long long0 = MathUtils.pow(4607182418800017408L, 132);
      long long1 = MathUtils.subAndCheck(0L, 0L);
      int int1 = MathUtils.indicator(2519);
      int int2 = MathUtils.pow(15, 2519);
      float float0 = MathUtils.sign((float) 4607182418800017408L);
      int int3 = MathUtils.hash((double) 0L);
      // Undeclared exception!
      try { 
        MathUtils.lcm(132, Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 7;
      int int1 = 1559;
      // Undeclared exception!
      try { 
        MathUtils.round(1976.0F, 7, 1559);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,559, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1544.0, 1544.0);
      float float0 = (-2402.0F);
      float float1 = MathUtils.round((-2402.0F), (-1639));
      int int0 = MathUtils.indicator((-1639));
      try { 
        MathUtils.pow(1627L, (-1639));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,627^-1,639)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = (-2147483646);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-2147483646), 752);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 5854.305);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.sign(0L);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = MathUtils.indicator(114);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 114;
      doubleArray0[3] = 1381.760022001342;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      int int0 = MathUtils.sign((-4521));
      long long0 = 562L;
      long long1 = MathUtils.subAndCheck(562L, (long) (-4521));
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      long long2 = MathUtils.gcd(5083L, (long) (-1));
      double double1 = MathUtils.factorialDouble(3187);
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(Integer.MIN_VALUE, (-1));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = MathUtils.gcd(944, 86);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      MathUtils.checkOrder(doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("\"Uv1:0q0.Mu");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.\"Uv1:0q0.Mu
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = MathUtils.indicator(102.32);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 102.32;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 102.32;
      doubleArray0[3] = 102.32;
      doubleArray0[4] = 102.32;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 102.32;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (102.32 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = 811L;
      long long1 = MathUtils.pow(811L, 0);
      double double0 = MathUtils.sinh(1L);
      int int0 = 766;
      int int1 = MathUtils.lcm((-598), 766);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 811L, (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float float0 = MathUtils.indicator((-982.397F));
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = 0;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(0);
      BigInteger bigInteger2 = bigInteger0.clearBit(0);
      int int1 = (-25);
      try { 
        MathUtils.pow(bigInteger0, (-25));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-25)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-122));
      try { 
        MathUtils.pow((BigInteger) null, (int) (byte) (-122));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-122)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 85;
      int int1 = MathUtils.pow(85, (long) 85);
      boolean boolean0 = MathUtils.equals((double) 85, (double) 85);
      double double0 = MathUtils.sign((double) (-741017211));
      long long0 = MathUtils.gcd(1516L, (long) 85);
      int int2 = MathUtils.pow((-741017211), 85);
      double double1 = MathUtils.normalizeAngle(2.0, (-1.0));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("org.apache.commons.math.util.MathUtils$1");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.org.apache.commons.math.util.MathUtils$1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = MathUtils.indicator(13.0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 3475;
      intArray0[2] = (-314);
      intArray0[3] = (-881);
      intArray0[4] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = MathUtils.log(0.13333332538604736, 0.13333332538604736);
      int int0 = MathUtils.lcm(0, 0);
      int int1 = MathUtils.subAndCheck(159, 159);
      int int2 = MathUtils.mulAndCheck((-2226), 0);
      float float0 = MathUtils.round((float) 0, 159);
      long long0 = MathUtils.sign(0L);
      byte byte0 = MathUtils.sign((byte)76);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-500), (-500));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -500, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(3.834E-20, 3.834E-20, 3.834E-20);
      double double0 = MathUtils.round(3.834E-20, 13);
      long long0 = MathUtils.indicator(592L);
      int int0 = MathUtils.pow(0, 1L);
      double[] doubleArray0 = new double[0];
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float float0 = MathUtils.indicator(1698.0F);
      long long0 = MathUtils.addAndCheck(0L, (-1L));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double double0 = MathUtils.log((-4439.823267794), 1986.2313017541);
      long long0 = MathUtils.subAndCheck(6722166367014452318L, 6722166367014452318L);
      long long1 = MathUtils.mulAndCheck(0L, 113236205062349959L);
      double double1 = MathUtils.factorialDouble(2627);
      double double2 = MathUtils.cosh(2264.198466441139);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)95);
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.834E-20, 1.494140625, 1088);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)1;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = 4498.055;
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals(4498.055, 4498.055, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = MathUtils.pow(4607182418800017408L, 16);
      long long1 = MathUtils.indicator((long) 16);
      boolean boolean0 = MathUtils.equals((-1427.5703), (double) 1L, 900.99889803);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-4917));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,917
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long long0 = MathUtils.sign(164L);
      short short0 = MathUtils.indicator((short) (-4007));
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.indicator(141.832224405535);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1635.1072322), 3509.698);
      float float0 = MathUtils.round(0.0F, 0);
      int int0 = MathUtils.mulAndCheck(9, 9);
      double double1 = MathUtils.binomialCoefficientDouble(81, 81);
      double double2 = MathUtils.round((double) 9, 81);
      int int1 = MathUtils.gcd(646, 1859);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(67, (-712));
      byte byte0 = MathUtils.sign((byte)64);
      int int0 = (-476);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 1.570796251296997, (-476));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(747.5576232, (-2546.366029611307));
      float float0 = MathUtils.sign(1.0F);
      int int0 = MathUtils.hash(2912.5048539);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (-2546.366029611307);
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (-2546.366029611307);
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) 1016273542;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 0, 0);
      int int0 = MathUtils.pow(0, 2907L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2930.8);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = MathUtils.gcd(3669L, 0L);
      int int0 = MathUtils.mulAndCheck(867, 867);
      short short0 = MathUtils.indicator((short)0);
      int int1 = MathUtils.pow(0, 0);
      long long1 = MathUtils.subAndCheck(5648769086999809661L, 3669L);
      int int2 = MathUtils.gcd(867, 0);
      try { 
        MathUtils.pow((int) (short)0, (-682L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-682)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double double0 = MathUtils.round(0.3999999761581421, (-2782));
      BigInteger bigInteger0 = MathUtils.pow((BigInteger) null, 0L);
      int[] intArray0 = new int[1];
      intArray0[0] = (-2782);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      try { 
        MathUtils.pow((-2966), (-2782));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,966^-2,782)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)78);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (int) (byte)78);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long long0 = MathUtils.indicator((-38L));
      int int0 = MathUtils.lcm((-46), 91);
      double double0 = MathUtils.round(0.11111095942313305, 4186);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.5, 0.5, 52);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 945.234127513548;
      doubleArray0[1] = 0.5;
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.sign((-1228.34));
      double double3 = MathUtils.factorialDouble(0);
      float float0 = MathUtils.indicator(0.0F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(960);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = (-2195);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2195));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,195
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1804;
      intArray0[1] = 2742;
      intArray0[2] = 63;
      intArray0[3] = 0;
      intArray0[4] = 61;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-29));
      int int0 = MathUtils.mulAndCheck((-773), (int) (byte) (-29));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1389.716);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = MathUtils.sign(1201);
      int int1 = (-2146453184);
      int int2 = MathUtils.lcm(1, (-2146453184));
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((-2146453184), 2146551580);
      } catch(ArithmeticException e) {
         //
         // overflow in subtraction: -2,146,453,184 - 2,146,551,580
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1763.6584855807, 1763.6584855807);
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 48;
      intArray0[2] = 891;
      intArray0[3] = (-1033);
      intArray0[4] = 0;
      intArray0[5] = (-2244);
      intArray0[6] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double1 = MathUtils.binomialCoefficientDouble(891, 4);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double double0 = MathUtils.scalb(2541.9928864, 67);
      double double1 = MathUtils.factorialDouble(67);
      long long0 = MathUtils.pow((-1421L), 4095L);
      int int0 = MathUtils.compareTo(3.751319377008883E23, 3.751319377008883E23, 3.6471110918188424E94);
      int int1 = MathUtils.gcd(0, (-282));
      byte byte0 = MathUtils.indicator((byte)109);
      double double2 = MathUtils.factorialLog(3);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (byte)1, (int) (byte)1, (-282));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1763.6584855807, 1763.6584855807);
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 48;
      intArray0[2] = 891;
      intArray0[3] = (-1033);
      intArray0[4] = 0;
      intArray0[5] = (-2244);
      intArray0[6] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      long long0 = MathUtils.gcd((long) (byte)0, 0L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1085L;
      doubleArray0[2] = 0.11111095942313305;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (byte)0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign((float) 1085L);
      int int0 = MathUtils.indicator((int) (byte)0);
      double double0 = MathUtils.scalb(0.11111095942313305, (byte)0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals(1.304E19, 0.11111095942313305, 0.0);
      long long1 = MathUtils.gcd(3459L, 2047L);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      short short0 = MathUtils.sign((short)137);
      int int0 = MathUtils.hash(1.0);
      float float0 = MathUtils.sign(1518.0F);
      long long0 = MathUtils.subAndCheck(0L, 0L);
      double double0 = MathUtils.indicator(1.0);
      long long1 = MathUtils.addAndCheck(5311L, (-1571L));
      double double1 = MathUtils.log(2.4384203044354907E-8, (-1305.2947108));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1305.2947108);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 1072693248;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = MathUtils.indicator(51);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 444L);
      int int1 = MathUtils.gcd(1, 1);
      double double0 = MathUtils.sinh(1);
      double double1 = MathUtils.sign(Double.NEGATIVE_INFINITY);
      long long0 = MathUtils.sign((-2083L));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-944.3809446326), Double.NEGATIVE_INFINITY);
      int int0 = MathUtils.pow(0, (long) 0);
      float float0 = MathUtils.round(0.0F, (-475), 0);
      int int1 = MathUtils.pow(0, 4194304);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      float float0 = MathUtils.indicator((-444.8982F));
      float float1 = MathUtils.sign((-444.8982F));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-444.8982F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.0F);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.gcd(0, 0);
      long long0 = MathUtils.sign((-603L));
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, (-1.0));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(4053, 2298);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }
}
