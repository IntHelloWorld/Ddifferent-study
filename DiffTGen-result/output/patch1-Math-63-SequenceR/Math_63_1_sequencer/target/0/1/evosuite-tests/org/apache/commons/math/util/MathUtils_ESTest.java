/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 19:33:28 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.stream.DoubleStream;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(213);
      double double1 = MathUtils.round(Double.POSITIVE_INFINITY, (-838), 213);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-3530.594404985369), (-3530.594404985369), 764);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 764;
      int int0 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals(1021.524416, 1.1102230246251565E-16, 1082646559);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)2);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = 1410.38311;
      doubleArray0[5] = (double) (byte)2;
      doubleArray0[6] = (double) (byte)1;
      doubleArray0[7] = (double) (byte)2;
      doubleArray0[8] = (double) (byte)2;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((-1083.345417516), 755.5749725609306);
      double double1 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.subAndCheck((int) (byte)1, (int) (byte)2);
      float float0 = MathUtils.sign((float) (byte)1);
      long long0 = MathUtils.pow((long) (byte)1, 0);
      float float1 = MathUtils.round((-1197.0F), 0);
      long long1 = MathUtils.addAndCheck((long) (byte)2, (long) 0);
      int int1 = MathUtils.pow(1176, 1176);
      double double2 = MathUtils.scalb(0, (byte)2);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 670.974114);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 10.0;
      doubleArray2[1] = 1410.38311;
      doubleArray2[2] = (double) (-1197.0F);
      doubleArray2[3] = (-1083.345417516);
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) (-1);
      doubleArray2[6] = (double) (-1197.0F);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray2);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = null;
      int[] intArray1 = new int[4];
      int int0 = 70;
      intArray1[0] = 70;
      intArray1[1] = 0;
      intArray1[0] = 39;
      int int1 = 783;
      intArray1[3] = 783;
      int int2 = MathUtils.indicator(783);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double0 = MathUtils.scalb(2358.05, 242);
      int int3 = MathUtils.sign((-1723));
      try { 
        MathUtils.pow(70, (-2425L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (70^-2,425)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)2);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[6] = (double) (byte)2;
      doubleArray0[4] = 1410.38311;
      doubleArray0[5] = (double) (byte)2;
      doubleArray0[6] = (double) (byte)1;
      doubleArray0[7] = (double) (byte)2;
      doubleArray0[8] = (double) (byte)2;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((-1083.345417516), 755.5749725609306);
      double double1 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.subAndCheck((int) (byte)1, (int) (byte)2);
      float float0 = MathUtils.sign((float) (byte)1);
      long long0 = MathUtils.pow((long) (byte)1, 0);
      float float1 = MathUtils.round((-1197.0F), 0);
      long long1 = MathUtils.addAndCheck((long) (byte)2, (long) 0);
      int int1 = MathUtils.pow(1176, 1176);
      double double2 = MathUtils.scalb(0, (byte)2);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 670.974114);
      byte byte1 = MathUtils.indicator((byte) (-64));
      double double3 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 1840.80681778701;
      doubleArray0[2] = (-1633.9575843885);
      doubleArray0[3] = (-599.6398391211);
      doubleArray0[4] = (-322.64);
      doubleArray0[5] = (-78.05776);
      doubleArray0[6] = (-1083.345417516);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1087.05683);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = bigInteger0.toByteArray();
      double double0 = MathUtils.cosh(440.93185);
      double double1 = MathUtils.distanceInf(doubleArray1, doubleArray0);
      double double2 = MathUtils.sign(2478.06443);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,840.807 >= -1,633.958)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = MathUtils.factorial(9);
      int int0 = MathUtils.hash((double[]) null);
      double double0 = MathUtils.factorialLog(0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 9;
      intArray0[2] = 9;
      intArray0[3] = 9;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-672.182844335);
      doubleArray0[1] = (-278.535486);
      doubleArray0[2] = 790.882599952999;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1797.5557201;
      doubleArray0[6] = (-1516.32304571297);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-672.182844335));
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(7, 2147482568);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      long long0 = MathUtils.sign((-2337L));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-2434), (-2434));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,434
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-4047.1398);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-0.8826256840275246);
      double[] doubleArray1 = new double[12];
      doubleArray1[0] = (-4047.1398);
      doubleArray1[1] = (-0.8826256840275246);
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
      long long0 = MathUtils.pow(0L, 0);
      long long1 = MathUtils.subAndCheck(0L, 2935890503282001226L);
      int int0 = MathUtils.sign(66);
      boolean boolean0 = MathUtils.equals((-2273.1), (-0.8826256840275246), (double) 1);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-4047.1398), (-1369.894128805));
      int int1 = MathUtils.subAndCheck((-399), 66);
      boolean boolean2 = MathUtils.equalsIncludingNaN((-4047.1398), 0.49999999999999994);
      int int2 = MathUtils.lcm((-3005), 237);
      try { 
        MathUtils.pow((-465), (-465));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-465^-465)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = (-1114);
      double double0 = MathUtils.scalb((-759), (-1114));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-759));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -759
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      int int0 = 0;
      int int1 = MathUtils.lcm((-3589), 0);
      int int2 = MathUtils.pow(0, 0);
      long long0 = MathUtils.addAndCheck((long) 0, (long) 1);
      boolean boolean0 = MathUtils.equals((-3850.67882), 0.0, 274);
      long long1 = MathUtils.gcd(39916809L, (-4591L));
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.factorialLog(0);
      int int4 = MathUtils.mulAndCheck(0, 1121);
      int int5 = MathUtils.subAndCheck(0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.3245471311735498E-8;
      doubleArray0[3] = (-3850.67882);
      doubleArray0[4] = (double) 39916809L;
      doubleArray0[5] = 3313.638431933;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1L;
      doubleArray0[7] = (double) 1121;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.indicator((short)2434);
      boolean boolean0 = MathUtils.equals((-4.503599627370496E15), 466.128717542);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1;
      int int0 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.indicator((float) (short)1);
      int[] intArray0 = new int[6];
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.addAndCheck((int) (short)1, 0);
      int[] intArray1 = new int[5];
      intArray1[0] = 1072693279;
      intArray1[1] = 1072693279;
      intArray1[2] = (int) (short)1;
      intArray1[3] = 0;
      intArray1[4] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = (-2037);
      int int1 = (-15);
      try { 
        MathUtils.pow((-2037), (-15));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,037^-15)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = MathUtils.pow((-3512299194304650054L), 3594L);
      short short0 = (short)5108;
      short short1 = MathUtils.indicator((short)5108);
      long long1 = MathUtils.gcd((-2161L), 4503599627370495L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2161L);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-3512299194304650054L);
      doubleArray0[3] = (double) 4503599627370495L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (short)5108;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) (-2161L);
      doubleArray0[8] = (double) (-2161L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-2161L), (int) (short)1, 15);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 15, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = MathUtils.scalb(918.3, 181);
      double double1 = MathUtils.sign((-1426.0));
      long long0 = MathUtils.sign((long) 181);
      long long1 = MathUtils.mulAndCheck(0L, 2341L);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      long long2 = bigInteger0.longValue();
      long long3 = bigInteger0.longValue();
      String string0 = bigInteger0.toString();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int int1 = MathUtils.lcm(1631, 104);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 104;
      doubleArray0[1] = 2.8145813103542913E57;
      doubleArray0[2] = (double) 1L;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int2 = MathUtils.gcd(66, (-1070));
      long long4 = MathUtils.pow(24L, 2341L);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 12;
      long long0 = MathUtils.pow((-4063L), 12);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 7590118919962511745L;
      doubleArray0[1] = (double) 12;
      doubleArray0[2] = (double) 7590118919962511745L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2057.6938);
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray1, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = MathUtils.gcd((-618), 116);
      int[] intArray0 = new int[1];
      intArray0[0] = 116;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.mulAndCheck(1697L, 1697L);
      byte byte0 = MathUtils.sign((byte) (-107));
      double double1 = MathUtils.binomialCoefficientDouble(116, (byte) (-107));
      boolean boolean0 = MathUtils.equals((-1154.738692202589), (-2112.47312430771));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.andNot(bigInteger0);
      double double2 = bigInteger1.doubleValue();
      BigInteger bigInteger3 = bigInteger1.negate();
      int int1 = bigInteger0.bitCount();
      BigInteger bigInteger4 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, (long) 116);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 116;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) (byte) (-107);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      double double4 = MathUtils.log(1691.3303090745, (-660.964935648653));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 876;
      intArray0[3] = 16;
      intArray0[4] = 0;
      intArray0[5] = 1684;
      intArray0[6] = 2473;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(596.1, (double) 1684, 29);
      double double0 = MathUtils.round((-1432.7595412), 0);
      double double1 = MathUtils.round((-1432.7595412), 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      short short0 = (short) (-1295);
      short short1 = MathUtils.sign((short) (-1295));
      int int0 = MathUtils.mulAndCheck((int) (short) (-1), 679);
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 0, (-679));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -679, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2496.236433357589);
      doubleArray0[3] = 1076.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2507.0);
      doubleArray1[1] = (-3368.28);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 4104.734678879619;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      float float0 = MathUtils.round((-1.0F), (-1177));
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-1177), (-420));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -420, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4533.902000649;
      doubleArray0[1] = (-2239.578);
      doubleArray0[2] = 0.0;
      double double0 = 630.7571899;
      doubleArray0[3] = 630.7571899;
      doubleArray0[4] = 6.283185307179586;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 630.7571899);
      long long0 = MathUtils.pow(0L, 0L);
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
      double double1 = MathUtils.binomialCoefficientDouble(80, 80);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0L, 1.625);
      int int0 = MathUtils.compareTo(802.33, 802.33, 1L);
      byte byte0 = (byte)79;
      byte byte1 = MathUtils.indicator((byte)79);
      double double2 = MathUtils.round((-8.0E298), 0, (int) (byte)1);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-8.0E298), 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = MathUtils.log(271.6, 271.6);
      long long0 = MathUtils.addAndCheck(1066L, 1066L);
      double double1 = MathUtils.indicator((double) 1066L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1066L;
      doubleArray0[1] = (double) 1066L;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 271.6;
      doubleArray0[4] = (double) 1066L;
      doubleArray0[5] = 1.0;
      double double2 = 10.0;
      doubleArray0[6] = 10.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (1,066 > 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = 1476L;
      long long1 = MathUtils.subAndCheck(0L, 1476L);
      double double0 = MathUtils.sinh(0L);
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      long long2 = 0L;
      long long3 = MathUtils.addAndCheck(0L, (-1983L));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-4047.1398);
      doubleArray0[0] = (-4047.1398);
      doubleArray0[1] = 0.0;
      double double1 = 1.0;
      doubleArray0[2] = 1.0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-4047.1398);
      doubleArray1[1] = 1.0;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 296;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 296);
      BigInteger bigInteger0 = BigInteger.TEN;
      long long0 = 130L;
      BigInteger bigInteger1 = BigInteger.valueOf(2054L);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 130L);
      long long1 = (-2770L);
      try { 
        MathUtils.pow(bigInteger0, (-2770L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-2,770)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = 0.0;
      int int0 = MathUtils.hash(0.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("wk?");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.wk?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.cosh(0.5);
      float float0 = MathUtils.round(0.0F, (-863));
      long long0 = MathUtils.subAndCheck(4398046511103L, (-1774L));
      int int0 = MathUtils.subAndCheck((-863), 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4398046512877L;
      doubleArray0[1] = 3081.173364918022;
      doubleArray0[2] = 1.1276259652063807;
      doubleArray0[3] = (double) (-863);
      doubleArray0[4] = (double) (-1774L);
      doubleArray0[5] = (double) 4398046511103L;
      doubleArray0[6] = (double) (-1774L);
      doubleArray0[7] = (double) (-863);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int1 = MathUtils.hash(doubleArray0);
      long long1 = MathUtils.pow((-9223372036854775808L), 10);
      int[] intArray0 = new int[9];
      intArray0[0] = 993491346;
      intArray0[1] = (-863);
      intArray0[2] = 10;
      intArray0[3] = (-863);
      intArray0[4] = 993491346;
      intArray0[5] = (-863);
      intArray0[6] = 0;
      intArray0[7] = 10;
      intArray0[8] = 10;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.binomialCoefficientLog(19, 10);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      int int0 = MathUtils.pow(0, 0);
      long long1 = MathUtils.sign(0L);
      long long2 = MathUtils.pow(0L, 1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 0L;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      int int1 = MathUtils.addAndCheck(0, 0);
      double double3 = MathUtils.sign(0.0);
      float float0 = MathUtils.indicator(142.9F);
      double double4 = MathUtils.binomialCoefficientDouble(0, (-1044));
      short short0 = MathUtils.sign((short)0);
      long long3 = MathUtils.subAndCheck((-1251L), (long) 0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-994.28193250264);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.lcm(9218868437227405312L, (-1L));
      float float0 = MathUtils.sign((float) (-1L));
      int int0 = MathUtils.lcm(222, (-219));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = (-2457);
      int int2 = MathUtils.lcm((-2457), (-219));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-219), (-2457));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -219
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 2);
      double double0 = MathUtils.factorialDouble(2);
      double double1 = MathUtils.sign(Double.POSITIVE_INFINITY);
      long long0 = MathUtils.subAndCheck((long) 2, 2675L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2675L;
      doubleArray0[1] = 6.283185307179586;
      double double2 = MathUtils.safeNorm(doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double3 = MathUtils.binomialCoefficientDouble(44, 4);
      float float0 = MathUtils.sign((float) 2);
      long long1 = MathUtils.indicator(2675L);
      int[] intArray0 = new int[4];
      intArray0[0] = 5039;
      intArray0[1] = 44;
      intArray0[2] = 44;
      intArray0[3] = 4;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.subAndCheck(44, 3144);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      long long2 = MathUtils.factorial(0);
      int int2 = MathUtils.mulAndCheck(0, (-1014));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 1787;
      double double0 = MathUtils.factorialLog(1787);
      double[] doubleArray0 = null;
      double double1 = 3.141592653589793;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 3.141592653589793);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 10;
      int int1 = MathUtils.pow(10, (long) 10);
      int int2 = 0;
      double double0 = MathUtils.binomialCoefficientLog(10, 0);
      long long0 = 0L;
      long long1 = MathUtils.gcd((-4585L), 0L);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      MathUtils.factorialDouble(1410065408);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1746.6423, (-4012.67));
      double double0 = MathUtils.factorialLog(761);
      int[] intArray0 = new int[3];
      intArray0[0] = 761;
      intArray0[1] = 761;
      intArray0[2] = 761;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.binomialCoefficientLog(761, 0);
      double double2 = MathUtils.sign((double) 0);
      long long0 = MathUtils.mulAndCheck(1566L, (long) 761);
      long long1 = MathUtils.sign((long) 761);
      long long2 = MathUtils.gcd(2670L, 453L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 761;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (-4012.67);
      doubleArray0[3] = (double) 2670L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 761);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = 1951;
      double double0 = MathUtils.factorialLog(1951);
      float float0 = MathUtils.round((float) 1951, 1951);
      long long0 = MathUtils.pow((long) 1951, 1951);
      double double1 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) Float.NaN);
      byte[] byteArray0 = null;
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-2147483648L), (-2147483648L));
      int int0 = MathUtils.pow(14, 14);
      long long1 = MathUtils.lcm(0L, (-3141L));
      int[] intArray0 = new int[3];
      intArray0[0] = 14;
      intArray0[1] = 312;
      intArray0[2] = (-1282129920);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2147483648L);
      doubleArray0[1] = 4971.0;
      doubleArray0[2] = (double) 14;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 14;
      doubleArray0[5] = (double) (-1282129920);
      doubleArray0[6] = 272.712;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      double double0 = MathUtils.scalb(0, 0);
      long long0 = MathUtils.factorial(0);
      double double1 = MathUtils.sinh(0);
      double double2 = MathUtils.binomialCoefficientLog(0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int1 = MathUtils.hash(759.12);
      long long1 = MathUtils.binomialCoefficient(702, 0);
      int int2 = MathUtils.pow(1263, 1088L);
      int int3 = MathUtils.compareTo(0.0, 1203.63588, 2.0);
      long long2 = MathUtils.subAndCheck((long) 0, 0L);
      // Undeclared exception!
      try { 
        MathUtils.lcm(69, (-2113346340));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      double double0 = MathUtils.scalb(0, 0);
      long long0 = MathUtils.factorial(0);
      double double1 = MathUtils.sinh(0);
      double double2 = MathUtils.binomialCoefficientLog(0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int1 = MathUtils.hash(759.12);
      int int2 = MathUtils.pow(1263, (long) 1263);
      long long1 = MathUtils.subAndCheck((long) 0, 0L);
      // Undeclared exception!
      try { 
        MathUtils.lcm(69, (-2113346340));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-2961));
      long long0 = MathUtils.subAndCheck((-1074L), (long) 5);
      double double0 = MathUtils.factorialLog(3756);
      // Undeclared exception!
      try { 
        MathUtils.lcm((int) (short) (-2961), (-2136060861));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      short short0 = (short)40;
      short short1 = MathUtils.indicator((short)40);
      int int0 = 800;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((short)1, 800);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 800
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 3258;
      int int1 = 0;
      int int2 = MathUtils.subAndCheck(3258, 0);
      long long0 = MathUtils.mulAndCheck((long) 0, 0L);
      boolean boolean0 = MathUtils.equals((double) 0, 317.417630851, (-292.10089));
      double double0 = MathUtils.normalizeAngle((-6.032174644509064E-23), 0L);
      double double1 = MathUtils.sign(2.2250738585072014E-308);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 3258);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = MathUtils.cosh((-212.106324132));
      double double1 = MathUtils.indicator(0.9999997615814209);
      long long0 = MathUtils.indicator(781L);
      float float0 = MathUtils.round(2644.5703F, 11);
      int int0 = MathUtils.pow(11, 0L);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 11;
      MathUtils.checkOrder(doubleArray0);
      int int2 = MathUtils.pow(11, (long) 11);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.subAndCheck(4630L, 1L);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3617.832035), 1143.9805306598, 1143.9805306598);
      boolean boolean1 = MathUtils.equals(1143.9805306598, 4.503599627370496E15, 4.503599627370496E15);
      int int0 = MathUtils.hash(0.0);
      double double0 = MathUtils.scalb(815.4756035763595, 3139);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1537.55685015);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1537.55685015));
      long long0 = MathUtils.gcd(841L, 841L);
      // Undeclared exception!
      try { 
        MathUtils.equals((-2222.882418), (double) 841L, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathUtils.factorialLog(210);
      int int0 = MathUtils.addAndCheck(210, 210);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 210;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.sign(420);
      long long0 = MathUtils.subAndCheck(0L, 0L);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 3.141592653589793;
      doubleArray1[1] = 916.4854705743286;
      doubleArray1[2] = (double) 210;
      doubleArray1[3] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray1);
      long long1 = MathUtils.pow((long) 1, 0L);
      double double2 = MathUtils.binomialCoefficientLog(420, 1);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 916.4854705743286;
      doubleArray2[1] = (double) 0L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray2, mathUtils_OrderDirection0, true);
      int int2 = MathUtils.hash(doubleArray0);
      double double3 = MathUtils.normalizeAngle((-2692.601545186858), 1080705055);
      boolean boolean1 = MathUtils.equals(0.0, 916.4854705743286, 0.0);
      double double4 = MathUtils.sign((-876.4563));
      double[] doubleArray3 = MathUtils.normalizeArray(doubleArray1, 0.0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = 6.283185307179586;
      double double1 = (-4046.4);
      boolean boolean0 = MathUtils.equals(0.0, 6.283185307179586, (-4046.4));
      double double2 = MathUtils.normalizeAngle((-4046.4), 0.0);
      int int0 = MathUtils.compareTo((-2849.0), (-0.02866217634664281), 6.283185307179586);
      double[] doubleArray0 = new double[0];
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = (-516);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-516));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -516
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 1702;
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, 1.1102230246251565E-16, 1702);
      double double0 = 0.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.1102230246251565E-16, 0.0, (double) 1702);
      boolean boolean2 = MathUtils.equalsIncludingNaN(1.1102230246251565E-16, 0.0);
      double double1 = MathUtils.round(327.7795969483, 1702);
      boolean boolean3 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = (-1091);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1091));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,091
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-0.33333333333333287);
      doubleArray0[0] = (-0.33333333333333287);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-205.46);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 164.533922951;
      doubleArray0[5] = (-5176.87426003);
      double double1 = 3762.944257654294;
      doubleArray0[6] = 3762.944257654294;
      doubleArray0[7] = 1.1102230246251565E-16;
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.addAndCheck((-145), (-145));
      long long0 = MathUtils.pow((-879L), 1860L);
      boolean boolean0 = MathUtils.equals((double) 1860L, 164.533922951, 1.1102230246251565E-16);
      int int1 = MathUtils.compareTo(0.0, Double.POSITIVE_INFINITY, 1.1102230246251565E-16);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("u[Eh(-UJPiwQO");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.u[Eh(-UJPiwQO
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-7));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-7);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)96;
      byteArray1[1] = (byte)55;
      byteArray1[2] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (long) (byte) (-35));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,918,895,424,677,521,391,623^-35)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = null;
      int[] intArray1 = new int[4];
      int int0 = 70;
      intArray1[0] = 70;
      intArray1[1] = 0;
      intArray1[2] = 39;
      int int1 = 801;
      intArray1[3] = 801;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, intArray1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(6722166367014452318L, 6722166367014452318L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0L);
      double double0 = MathUtils.scalb(0.0, 0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.clearBit(113);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 2807);
      double double0 = MathUtils.cosh(1704.39662084);
      double double1 = MathUtils.binomialCoefficientDouble(13, (-1244));
      float float0 = MathUtils.indicator(2556.0F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      short short0 = bigInteger0.shortValueExact();
      int int0 = bigInteger0.intValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int int1 = bigInteger0.intValue();
      BigInteger bigInteger2 = bigInteger0.flipBit((short)0);
      short short1 = MathUtils.sign((short)290);
      long long0 = MathUtils.mulAndCheck((long) (short)0, (long) (short)1);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-2468.68736), (double) (short)0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.11113807559013367, 0.11113807559013367);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.11113807559013367;
      doubleArray0[1] = 0.11113807559013367;
      doubleArray0[2] = 0.11113807559013367;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2318.32391962851);
      doubleArray0[1] = 3.145894820876798E-6;
      doubleArray0[2] = 240.41436674;
      doubleArray0[3] = 2.2250738585072014E-308;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2854.2354129));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathUtils.cosh(2183.9783458614);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(828);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, (-61L));
      long long1 = MathUtils.gcd((-61L), (-3958705157555305932L));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-3958705157555305932L);
      doubleArray0[1] = (double) (-61L);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 1L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = (-6826);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-6826));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -6,826
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-6403.391834553059);
      doubleArray0[1] = 879.4847391250489;
      doubleArray0[2] = 1178.77871;
      doubleArray0[3] = 0.167;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2748.95995);
      doubleArray0[6] = (-1434.104634535217);
      doubleArray0[7] = (-327.8247817521964);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-327.8247817521964);
      doubleArray1[1] = 1.073741824E9;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.167;
      doubleArray1[4] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      int int0 = (-2274);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-1378.0), (-2748.95995), (-2274));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = (-3746);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-3746));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,746
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-2227.1127042), 1254.9998147);
      BigInteger bigInteger0 = BigInteger.TEN;
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = BigInteger.ONE;
      int int0 = bigInteger1.bitLength();
      BigInteger bigInteger2 = bigInteger0.modInverse(bigInteger1);
      MockRandom mockRandom0 = new MockRandom();
      DoubleStream doubleStream0 = mockRandom0.doubles(10L);
      BigInteger bigInteger3 = BigInteger.probablePrime(845, mockRandom0);
      int int1 = bigInteger0.signum();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0);
      float float0 = MathUtils.round((float) 0, (-1922), 0);
      double double1 = MathUtils.scalb(2411.18, 0);
      long long1 = MathUtils.pow(0L, 1434L);
      double double2 = MathUtils.factorialLog(0);
      int int2 = MathUtils.compareTo(0, 1, 845);
      int int3 = MathUtils.mulAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = MathUtils.sinh(1402.8170025322);
      int int0 = MathUtils.subAndCheck(1804, (-22));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger4 = BigInteger.ONE;
      BigInteger bigInteger5 = bigInteger0.gcd(bigInteger4);
      BigInteger bigInteger6 = bigInteger0.nextProbablePrime();
      float float0 = bigInteger4.floatValue();
      BigInteger bigInteger7 = bigInteger4.mod(bigInteger0);
      BigInteger bigInteger8 = bigInteger0.andNot(bigInteger4);
      BigInteger bigInteger9 = MathUtils.pow(bigInteger0, 4048);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1826;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 1826;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (double) (-22);
      int int1 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-22);
      intArray0[1] = (-22);
      intArray0[2] = 1804;
      intArray0[3] = 1826;
      intArray0[4] = (-22);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.round((double) 1804, 496, 0);
      try { 
        MathUtils.normalizeArray(doubleArray0, (-22));
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 2001;
      int int1 = MathUtils.gcd(2001, 2001);
      int[] intArray0 = new int[6];
      intArray0[0] = 2001;
      intArray0[1] = 2001;
      intArray0[2] = 2001;
      int int2 = (-1203);
      intArray0[3] = (-1203);
      intArray0[4] = (-262);
      intArray0[5] = 2001;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      int int4 = MathUtils.addAndCheck((-1203), 2001);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-262));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -262
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = MathUtils.gcd((-2871L), 0L);
      int int0 = MathUtils.subAndCheck(14, (-12));
      float float0 = MathUtils.indicator(Float.NaN);
      boolean boolean0 = MathUtils.equals((double) (-12), (double) Float.NaN);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-12);
      intArray0[1] = 14;
      intArray0[2] = (-12);
      intArray0[3] = (-12);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      float float1 = MathUtils.sign(1374.75F);
      boolean boolean1 = MathUtils.equals((double) 2871L, 77.9, 3064);
      try { 
        MathUtils.pow(39916800L, (-12));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (39,916,800^-12)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-0.12502530217170715);
      doubleArray0[1] = (-1985.71377);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-5351.2039471472);
      doubleArray0[4] = (-5857.1393706869);
      doubleArray0[5] = 1831.271903;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-2901.105551319);
      doubleArray0[8] = 9.313225746154785E-10;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-0.125 >= -1,985.714)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = MathUtils.compareTo((-344.06104), (-344.06104), 1554.11975);
      int int1 = 0;
      int int2 = MathUtils.subAndCheck(0, 0);
      double double0 = 2.2250738585072014E-308;
      // Undeclared exception!
      try { 
        MathUtils.equals(2.2250738585072014E-308, (-344.06104), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      long long0 = MathUtils.gcd((-2147483648L), (long) 0);
      boolean boolean0 = MathUtils.equals((double) 0, (double) 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-2147483648L);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      double double0 = 4.503599627370496E15;
      try { 
        MathUtils.normalizeArray(doubleArray0, 4.503599627370496E15);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = MathUtils.gcd((-194), 13);
      boolean boolean0 = MathUtils.equals((double) (-194), (double) (-194), 8);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 1, (double) 13, (double) (-194));
      int int1 = MathUtils.compareTo((-919.5163602958), (-919.5163602958), (-194));
      double double0 = MathUtils.round(0.0, (-449));
      short short0 = MathUtils.sign((short) (-1860));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1;
      double double1 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 85;
      long long0 = 2581L;
      int int1 = MathUtils.pow(85, 2581L);
      int int2 = (-3629);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-3629), (-778190203));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -3,629
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-1256));
      int int0 = 0;
      long long0 = MathUtils.factorial(0);
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      boolean boolean1 = MathUtils.equals((double) (short) (-1), (double) 1L);
      long long1 = (-56L);
      long long2 = MathUtils.subAndCheck((-56L), (-2455L));
      double double0 = (-2738.47327);
      boolean boolean2 = MathUtils.equals((double) (short) (-1), (double) 0, (-2738.47327));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-1275), (-1275));
      int int1 = MathUtils.lcm(3420, 3420);
      long long0 = 103L;
      try { 
        MathUtils.pow(103L, (long) (-1275));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (103^-1,275)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-746L), (-746L));
      int int0 = (-5214);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-5214), (-5214));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -5,214
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      long long0 = MathUtils.lcm((-9218868437227405313L), 0L);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3272.6);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.cosh(0.0);
      int int0 = MathUtils.sign(210);
      long long0 = MathUtils.sign((long) 1);
      long long1 = MathUtils.pow((long) 210, (long) 210);
      byte byte0 = MathUtils.indicator((byte)0);
      double double2 = MathUtils.indicator((-3272.6));
      double double3 = MathUtils.round(Double.POSITIVE_INFINITY, (int) (byte)1);
      double double4 = MathUtils.binomialCoefficientDouble(1, 1);
      boolean boolean0 = MathUtils.equals((double) 210, (-4138.4397), (int) (byte)1);
      long long2 = MathUtils.pow((long) (byte)1, 120L);
      int int1 = MathUtils.hash(Double.POSITIVE_INFINITY);
      int int2 = MathUtils.sign(0);
      short short0 = MathUtils.sign((short)206);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1232;
      intArray0[1] = 16;
      intArray0[2] = 0;
      intArray0[3] = 14;
      intArray0[4] = 0;
      intArray0[5] = 73;
      intArray0[6] = 0;
      intArray0[7] = (-1862);
      intArray0[8] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = (-1L);
      long long1 = MathUtils.lcm((-1L), (-1L));
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = MathUtils.sign(58);
      double double0 = MathUtils.sinh((-1982.0));
      int int1 = MathUtils.hash(2422.87698584003);
      byte byte0 = MathUtils.sign((byte)19);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 93;
      int int1 = MathUtils.pow(93, (long) 93);
      long long0 = MathUtils.pow((-2224L), 93);
      int int2 = 238;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(238, 93);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = MathUtils.hash(569.9376319713);
      long long0 = MathUtils.mulAndCheck((long) 95497431, (long) 95497431);
      long long1 = MathUtils.lcm((long) 95497431, 9119759327599761L);
      int int1 = (-2186);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 95497431, (-2928.368076292), (-2186));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      int int0 = 0;
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
      int int1 = 3012;
      int int2 = MathUtils.gcd(3012, 2776);
      byte byte0 = (byte) (-43);
      byte byte1 = MathUtils.sign((byte) (-43));
      long long0 = MathUtils.addAndCheck((long) 0, (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathUtils.scalb(25.42959, 0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = (-1430L);
      long long1 = MathUtils.lcm((-1690L), (-1430L));
      int int0 = 2;
      int int1 = (-2027);
      // Undeclared exception!
      try { 
        MathUtils.round(3088.032, 2, (-2027));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      long long0 = MathUtils.sign((-3117L));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (-3117L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-1L);
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      long long1 = MathUtils.addAndCheck(534L, 534L);
      double double0 = MathUtils.factorialDouble(107);
      int int0 = MathUtils.subAndCheck((-3049), (-3049));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-113);
      byteArray0[8] = (byte)31;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1830L);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 0);
      long long0 = MathUtils.subAndCheck((long) 0, (long) 0);
      long long1 = MathUtils.gcd((long) 0, (long) 0);
      long long2 = MathUtils.indicator(0L);
      int int0 = MathUtils.lcm(0, 0);
      boolean boolean0 = MathUtils.equals((double) 0L, 3.141592653589793);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.addAndCheck((-457), (-457));
      long long3 = MathUtils.subAndCheck(1L, 9223372036854775807L);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.normalizeAngle((byte)0, 2.2250738585072014E-308);
      int int0 = 169;
      int int1 = MathUtils.indicator(169);
      long long0 = MathUtils.gcd((long) (byte)0, 2516L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(Double.NaN, 0.0, (int) (byte)0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 31;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.indicator((double) 31);
      double double2 = MathUtils.sign(0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 0.0, 31);
      short short0 = MathUtils.indicator((short)124);
      long long0 = MathUtils.subAndCheck((-40L), (long) 31);
      short short1 = MathUtils.indicator((short)124);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double3 = 991.8275793;
      double double4 = MathUtils.round(991.8275793, (int) (short)1, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (-1056));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,056)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = MathUtils.sinh((-786.4054383828));
      float float0 = MathUtils.sign((-691.3F));
      long long0 = MathUtils.binomialCoefficient(0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-786.4054383828);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (-786.4054383828);
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = (double) (-1.0F);
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.cosh(0.0);
      int int0 = MathUtils.pow(0, 1L);
      int int1 = MathUtils.hash(1.0);
      double double2 = MathUtils.normalizeAngle((-2192.48), 1956.351679337285);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-979.222432203634), Double.NaN);
      boolean boolean1 = MathUtils.equals(0.0, 155.275, 0.0);
      double double0 = MathUtils.sinh(6.283185307179586);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte) (-37);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 84L);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.sign((double) (short)1);
      BigInteger bigInteger0 = MathUtils.pow((BigInteger) null, 0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = (double) (short)1;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-104);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (long) (byte) (-12));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (329,423,189,144^-12)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(202);
      boolean boolean0 = MathUtils.equals((-861.06525794), 0.0, (-1681.4));
      byte byte0 = MathUtils.indicator((byte) (-2));
      short short0 = MathUtils.sign((short)124);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (-861.06525794);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (1 < 6.283)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = MathUtils.cosh((-985.4996442199235));
      int int0 = 0;
      double double1 = MathUtils.factorialDouble(0);
      float float0 = MathUtils.sign((float) 0);
      // Undeclared exception!
      try { 
        MathUtils.equals((-985.4996442199235), 1430.75140123974, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble(Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,147,483,648
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(600.26762699, 600.26762699, 413);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-2961));
      int int0 = MathUtils.addAndCheck((int) (short) (-2961), 5);
      long long0 = MathUtils.subAndCheck((-1074L), (long) 5);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.normalizeAngle(0.0, 0.0);
      int int0 = 44;
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 44, 44);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 44, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2233.608842;
      doubleArray0[1] = (-139.637);
      doubleArray0[2] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      try { 
        MathUtils.pow((-1963236095), (long) (-1963236095));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,963,236,095^-1,963,236,095)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)119);
      short short0 = MathUtils.sign((short) (-2721));
      int int0 = MathUtils.hash((double) (byte)119);
      int int1 = MathUtils.gcd((int) (byte)119, (int) (byte)119);
      byte byte1 = (byte) (-99);
      byte byte2 = MathUtils.sign((byte) (-99));
      short short1 = MathUtils.indicator((short) (byte)1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-2721);
      doubleArray0[1] = (double) (byte)119;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (-2141.37793816);
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = (double) (short) (-2721);
      doubleArray0[7] = (double) (short) (-1);
      doubleArray0[8] = (double) (short)1;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      byte byte3 = MathUtils.indicator((byte)19);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.subAndCheck((long) (byte)1, (long) (short) (-2721));
      long long1 = MathUtils.addAndCheck((long) (byte) (-99), 6227020800L);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-50));
      double double0 = MathUtils.indicator((double) (byte) (-1));
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-50);
      intArray0[2] = 92;
      intArray0[3] = (int) (byte) (-1);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1293;
      intArray0[1] = 245;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.compareTo(0.0, 983.00929, (-178.90452972152153));
      double double1 = MathUtils.round(983.00929, 1702);
      long long0 = MathUtils.addAndCheck(0L, (-578L));
      long long1 = MathUtils.sign(0L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 245;
      doubleArray0[1] = (double) 245;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 0L;
      double double2 = MathUtils.safeNorm(doubleArray0);
      double double3 = MathUtils.sinh(0.0);
      double double4 = MathUtils.log(1293, 1293);
      byte byte0 = MathUtils.sign((byte)57);
      byte byte1 = MathUtils.sign((byte) (-84));
      int int1 = MathUtils.mulAndCheck((-2198), 1293);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-3));
      long long0 = MathUtils.addAndCheck((long) (byte) (-3), 0L);
      long long1 = MathUtils.mulAndCheck(521L, 720L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 521L;
      doubleArray0[1] = (double) (-3L);
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-77);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 36;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long long0 = MathUtils.sign(9223372036854775807L);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = MathUtils.round(1315.1929556, 0);
      double double1 = MathUtils.log((-2568.3978106993), 0.0);
      long long0 = MathUtils.pow((long) 0, 0);
      double double2 = MathUtils.sign(0.0);
      int int0 = MathUtils.gcd(0, 0);
      long long1 = MathUtils.subAndCheck((long) 0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float float0 = (-1661.0F);
      // Undeclared exception!
      try { 
        MathUtils.round((-1661.0F), 461, 548);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 548, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1918.120826501077, 1918.120826501077);
      double double1 = MathUtils.indicator(4621.605072922565);
      float float0 = MathUtils.round(Float.NaN, 94);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 0, 0);
      float float0 = MathUtils.round((float) 0, 0);
      byte byte0 = MathUtils.sign((byte)0);
      int int0 = 15;
      try { 
        MathUtils.pow(15, (-1342L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (15^-1,342)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = MathUtils.indicator(17);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 17;
      doubleArray0[3] = (double) 17;
      doubleArray0[4] = (double) 17;
      doubleArray0[5] = (double) 17;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathUtils.sinh(6.283185307179586);
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1624L), (-1624L));
      int int0 = MathUtils.lcm(220, 160);
      double double0 = MathUtils.normalizeAngle(1760, 1760);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) 220, (-4267615245585081135L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(147, 147);
      short short0 = MathUtils.sign((short)159);
      int int1 = MathUtils.compareTo(2759.8342194490297, 0.041666666666621166, 294);
      double double0 = MathUtils.sinh(367.60770089964);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)159;
      doubleArray0[1] = 0.041666666666621166;
      doubleArray0[2] = (double) 294;
      doubleArray0[3] = (double) 147;
      doubleArray0[4] = (double) 294;
      doubleArray0[5] = 2759.8342194490297;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator((float) 294);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, 1.1102230246251565E-16);
      byte byte0 = MathUtils.sign((byte) (-64));
      long long0 = MathUtils.pow(0L, 1388L);
      try { 
        MathUtils.pow((long) (byte) (-1), (-476));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-476)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      int int1 = MathUtils.compareTo((-3890.0), 3625.3551851084, 0.19999998807907104);
      double double0 = MathUtils.sign(782.723);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-2181.45220358));
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.5830993332061267E-10, (double) (-1), 1.0);
      int int2 = MathUtils.gcd(0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      boolean boolean2 = bigInteger1.equals(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.shiftLeft((-1608));
      BigInteger bigInteger3 = BigInteger.valueOf(906L);
      int int3 = bigInteger1.intValueExact();
      BigInteger bigInteger4 = bigInteger1.pow(0);
      BigInteger bigInteger5 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, bigInteger0);
      int int4 = MathUtils.compareTo((-2549.0075761413), 0.01745329052209854, (-4285.7109));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3625.3551851084;
      doubleArray0[1] = (-4285.7109);
      doubleArray0[2] = (-2181.45220358);
      doubleArray0[3] = (-2549.0075761413);
      doubleArray0[4] = 1.5830993332061267E-10;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int5 = MathUtils.indicator((-1));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (3,625.355 > -4,285.711)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      int int0 = MathUtils.compareTo(0.0, (-6211.403101655714), 3.141592653589793);
      double double1 = MathUtils.binomialCoefficientDouble(1, 0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-106);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-2769));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (240,870,545,558^-2,769)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      short short0 = MathUtils.sign((short)1605);
      long long0 = MathUtils.addAndCheck((long) (short)1605, (long) (short)1);
      double double0 = MathUtils.sign((double) 1606L);
      double double1 = MathUtils.indicator((double) (short)1605);
      int int0 = (-1676);
      // Undeclared exception!
      try { 
        MathUtils.round(3175.595719, (int) (short)1, (-1676));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 5258.2;
      int int0 = MathUtils.compareTo(0.0, 0.0, 5258.2);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathUtils.EPSILON;
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.1102230246251565E-16, 0.0, 0.0);
      double double1 = MathUtils.normalizeAngle(0.0, 0.0);
      boolean boolean1 = MathUtils.equals(0.0, 0.0, 159);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1030, 0);
      int int0 = MathUtils.mulAndCheck(0, 44);
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.binomialCoefficientDouble(1989, 0);
      float float0 = MathUtils.round((float) 1989, 2537, (int) (short)0);
      long long1 = MathUtils.mulAndCheck((-1175L), 479001600L);
      // Undeclared exception!
      try { 
        MathUtils.factorial(572);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      float float0 = MathUtils.sign((float) 0);
      short short0 = (short)13;
      short short1 = MathUtils.sign((short)13);
      long long0 = MathUtils.pow(0L, (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = MathUtils.pow(2300, 2300);
      float float0 = MathUtils.indicator((-1.0F));
      double double0 = MathUtils.sign(1342.7148545991301);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) 2300;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 2300;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-1 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.570796251296997;
      doubleArray0[2] = 1384.01167414;
      doubleArray0[3] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (1,384.012 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = MathUtils.sinh((-572.156412453));
      int int0 = MathUtils.indicator((-1));
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(1821);
      int int1 = bigInteger0.intValueExact();
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      short short0 = MathUtils.indicator((short) (-2472));
      byte byte0 = MathUtils.sign((byte) (-100));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      double double1 = MathUtils.sinh(0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-28,161^-28,161)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2824.5161), (-2824.5161), (-1227.380207));
      boolean boolean1 = MathUtils.equals((-1227.380207), 1.625, 1511);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = MathUtils.hash(0.041666666666621166);
      int int1 = MathUtils.compareTo(0.0, 1159.640746259, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1159.640746259;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.041666666666621166;
      doubleArray0[4] = (double) 1794141933;
      doubleArray0[5] = 0.041666666666621166;
      doubleArray0[6] = 0.041666666666621166;
      doubleArray0[7] = (double) (-1);
      int int2 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.pow(5648769086999809661L, 0L);
      int int3 = MathUtils.mulAndCheck((-2650), 13);
      int int4 = MathUtils.indicator((-1252));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = MathUtils.hash(1544.019437410626);
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-1476482106));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1,476,482,106)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 8);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(826, 826);
      float float0 = MathUtils.round((-330.2F), 0, 0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(134, (-1338));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1928), 1375);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,928, k = 1,375
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-1435));
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1922.884863635, 1922.884863635, 2665);
      double double0 = MathUtils.round(16.771254, 530, 2);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(1307674368000L, (-3958705157555305932L));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.09090909090909091);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 1.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = MathUtils.log(1674.9025, 1674.9025);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1674.9025;
      doubleArray0[2] = (-1491.4800935746);
      doubleArray0[3] = 1674.9025;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0.008333333333329196);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = MathUtils.compareTo((-316.3904), (-316.3904), (-316.3904));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 3239;
      intArray0[1] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 3239;
      doubleArray0[3] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.binomialCoefficientLog(3239, 61);
      double double2 = MathUtils.scalb((-2310.968544), 3239);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      boolean boolean0 = MathUtils.equals((double) 0, (double) 0, (double) 0);
      long long0 = MathUtils.indicator(0L);
      long long1 = MathUtils.mulAndCheck((long) 0, (-1038L));
      long long2 = MathUtils.gcd((long) 0, (-2357L));
      float float0 = MathUtils.round((float) 0, 0);
      long long3 = MathUtils.indicator((-1038L));
      float float1 = MathUtils.round(0.0F, (-863));
      float float2 = MathUtils.indicator(0.0F);
      long long4 = MathUtils.indicator(20922789888000L);
      long long5 = MathUtils.indicator(0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 1L;
      doubleArray0[8] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = MathUtils.compareTo(110.0, 0.0, 0.0);
      int int1 = MathUtils.pow(1, 32L);
      byte byte0 = MathUtils.indicator((byte)57);
      long long0 = MathUtils.pow(362880L, (long) (byte)1);
      double double0 = MathUtils.normalizeAngle(0.0, (byte)57);
      long long1 = MathUtils.pow((-599L), 0L);
      int int2 = MathUtils.gcd(2, 0);
      try { 
        MathUtils.pow(0L, (-557L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-557)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)2);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = 1410.38311;
      doubleArray0[5] = (double) (byte)2;
      doubleArray0[6] = (double) (byte)1;
      doubleArray0[7] = (double) (byte)2;
      doubleArray0[8] = (double) (byte)2;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((-1083.345417516), 755.5749725609306);
      double double1 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.subAndCheck((int) (byte)1, (int) (byte)2);
      float float0 = MathUtils.sign((float) (byte)1);
      long long0 = MathUtils.pow((long) (byte)1, 0);
      float float1 = MathUtils.round((-1197.0F), 0);
      long long1 = MathUtils.addAndCheck((long) (byte)2, (long) 0);
      int int1 = MathUtils.pow(1176, 1176);
      double double2 = MathUtils.scalb(0, (byte)2);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 670.974114);
      double double3 = MathUtils.distance(doubleArray1, doubleArray0);
      long long2 = MathUtils.pow((-63L), 1L);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = (-316);
      // Undeclared exception!
      try { 
        MathUtils.equals((-3517.3988), (-3517.3988), (-316));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1624L), (-1624L));
      int int0 = 220;
      int int1 = 160;
      int int2 = MathUtils.lcm(220, 160);
      double double0 = MathUtils.normalizeAngle(1760, 1760);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) 220, (-4267615245585081135L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 156;
      double double0 = MathUtils.factorialLog(156);
      double double1 = MathUtils.sign((-1020.4132414931631));
      int int1 = MathUtils.pow(0, (long) 0);
      boolean boolean0 = MathUtils.equals((-1.0), 0.0, 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1020.4132414931631);
      doubleArray0[2] = (-163.9060262);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 156;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double3 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-1,020.413 < -163.906)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      int int0 = 0;
      int int1 = MathUtils.lcm((-3589), 0);
      int int2 = MathUtils.pow(0, 0);
      long long0 = MathUtils.addAndCheck((long) 0, (long) 1);
      boolean boolean0 = MathUtils.equals((-3850.67882), 0.0, 274);
      long long1 = MathUtils.gcd(39916800L, (-4591L));
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.factorialLog(0);
      int int4 = MathUtils.mulAndCheck(0, 1121);
      int int5 = MathUtils.subAndCheck(0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-4591L);
      doubleArray0[2] = 1.3245471311735498E-8;
      doubleArray0[3] = (-3850.67882);
      doubleArray0[4] = (double) 39916800L;
      doubleArray0[5] = 3313.638431933;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1L;
      doubleArray0[8] = (double) 1121;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-4,591 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 2);
      double double0 = MathUtils.factorialDouble(2);
      double double1 = MathUtils.sign(Double.POSITIVE_INFINITY);
      long long0 = MathUtils.subAndCheck((long) 2, 2675L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2675L;
      doubleArray0[1] = 6.283185307179586;
      double double2 = MathUtils.safeNorm(doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double3 = MathUtils.binomialCoefficientDouble(25, 4);
      float float0 = MathUtils.sign((float) 2);
      long long1 = MathUtils.indicator((-2673L));
      int[] intArray0 = new int[4];
      intArray0[0] = 5039;
      intArray0[1] = 25;
      intArray0[2] = 25;
      intArray0[3] = 4;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.subAndCheck(25, 3144);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      long long2 = MathUtils.factorial(0);
      int int2 = MathUtils.mulAndCheck(0, (-1014));
      int int3 = MathUtils.gcd(25, 25);
      int int4 = MathUtils.distanceInf(intArray0, intArray0);
      double double4 = MathUtils.scalb((-1295.8698), (-2147483647));
  }
}
