/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 19:40:22 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2910.498014416882;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 456;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 456)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2088);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 6.283185307179586;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (6.283 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-1);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[3] = (-3203);
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1724;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 4656;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = MathUtils.pow((long) 1, 0L);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = MathUtils.pow(9218868437227405312L, 0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = MathUtils.pow(1603, (long) 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, (-3004), (-152));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -152, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (-690.96874);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = MathUtils.scalb((-1.7168146928204135), 7722841);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-1662L), (-1671L));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = MathUtils.lcm((-2374), (-2374));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = MathUtils.indicator(1251L);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = MathUtils.gcd((long) 0, (long) 1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(108);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(1847.9, 1847.9, (-1));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, (-776));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((long) 0, (long) (byte) (-58));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((long) 3, 1074L);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) 229164899, (long) 229164899);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) (-3130218), (-3183605296591799669L));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 1029);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.sinh((-690.96874));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = MathUtils.scalb(1082.8166800005101, (-1));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float float0 = MathUtils.round((float) 0, 0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float float0 = MathUtils.round(2797.724F, 34);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.round((double) 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = MathUtils.round(2415.121055046686, (-3098), 0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathUtils.round((-3437.351686848), 0, 0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = MathUtils.round((-1183.849156344), 204);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 9218868437227405312L);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 233);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = MathUtils.pow((long) (byte)4, (long) (byte)1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = MathUtils.pow((long) (-2639), (long) 2639);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = MathUtils.pow(4294967295L, 3549);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long long0 = MathUtils.pow(1799L, 900);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = MathUtils.pow(2059, (long) (short)1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = MathUtils.pow(3241, 2432902008176640000L);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = MathUtils.pow((-384), 0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(989L, (byte)1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(732.0, (-568.3470462115));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((int) (byte)1, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(3549, (-882));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.log((byte)61, (byte)1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathUtils.log(1752, 1752);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.log(2.404307984052299E-9, 1893.43179);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)19;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = MathUtils.hash(10.0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 3884;
      int[] intArray1 = new int[2];
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)3526;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 7722841;
      int[] intArray1 = new int[2];
      int int0 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2910.498014416882;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.11111095942313305);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.5430806348152437;
      double[] doubleArray1 = new double[6];
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(197, (-1107));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (-3318), (-3318));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (long) 1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1897), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,897, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) 1, (long) 1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-267L), 756L);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float float0 = MathUtils.indicator((float) 3);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float float0 = MathUtils.indicator((float) (-1L));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = MathUtils.gcd(9218868437227405312L, (-2402L));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = MathUtils.gcd(4577762542105553359L, 4577762542105553359L);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = MathUtils.gcd(804, (-4614));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = MathUtils.gcd(1364, 1364);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = MathUtils.factorialLog(1413);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialLog(1792045343);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = MathUtils.factorial(13);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-181.2565192640751), (-181.2565192640751), 138);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, Double.POSITIVE_INFINITY, 4656);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (byte)0, 0.0, (int) (byte)0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-252.1), (-252.1), 0.0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, (-252.1), 0.0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.2250738585072014E-308, 1962.0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 4656, (double) 4656);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = 2.2250738585072014E-308;
      doubleArray0[8] = 2.2250738585072014E-308;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.304E19;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 1497;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1,497)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (-778.1696810578);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (0 > -778.17)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      MathUtils.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-96);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,610,612,736^-1,610,612,736)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-741L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-741)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (-2716));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,716)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      try { 
        MathUtils.pow(363L, (-484L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (363^-484)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 6722166367014452318L);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        MathUtils.pow((-1228L), (-2421));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,228^-2,421)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 5324);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      try { 
        MathUtils.pow((-1444), (-1282L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,444^-1,282)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 804);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        MathUtils.pow((-1672), (-1672));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,672^-1,672)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = MathUtils.pow(1752, 1752);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(31, (-1216));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-2493));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      short short0 = MathUtils.sign((short)14);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = MathUtils.sign((-43L));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = MathUtils.sign((long) 0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = MathUtils.sign(9193070505571053912L);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = MathUtils.sign(1603);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = MathUtils.sign((-383));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float float0 = MathUtils.sign((-1656.3126F));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float float0 = MathUtils.sign((float) (byte)12);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = MathUtils.sign((-3437.351686848));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double double0 = MathUtils.sign((double) (short)1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-58));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)120);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float float0 = MathUtils.round((-7180.95F), (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float float0 = MathUtils.round(3258.1F, 6, 6);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      float float0 = MathUtils.round(1.0F, 0, 1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float float0 = MathUtils.round((-1626.769F), 0, 0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double double0 = MathUtils.round(Double.POSITIVE_INFINITY, 4656);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      try { 
        MathUtils.normalizeArray(doubleArray0, 1.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, (-0.1666666567325592));
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 3
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NaN);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, (-457));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) (short)0, (long) (short)1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-2373L), 121645100408832000L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) 0, (-1018L));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-2394L), (-1L));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long long0 = MathUtils.lcm(4095L, (long) (short)0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, (-1589L));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = MathUtils.lcm((-489), 0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = MathUtils.lcm(2767, 256);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1079);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-1415));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long long0 = MathUtils.indicator((long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long long0 = MathUtils.indicator((-58L));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = MathUtils.indicator(2);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = MathUtils.indicator((-1413));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double double0 = MathUtils.indicator((-2597.279808));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double double0 = MathUtils.indicator(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double double0 = MathUtils.indicator(2279.0018544);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)4);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long long0 = MathUtils.lcm((long) 1, 989L);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      long long0 = MathUtils.gcd((-3958705157555305932L), 902L);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      long long0 = MathUtils.gcd((-1343L), (long) 0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long long0 = MathUtils.lcm(5040L, (-3117L));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, (long) 0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = MathUtils.gcd((-387), (-1368291721));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = MathUtils.gcd(20, 0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = MathUtils.gcd((int) (byte)0, 641);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2327));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,327
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(1752);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-87));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -87
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 8;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 3.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 10.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 804);
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 0L, 580);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.5, (double) 0, 62);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN, 1440);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0L, (-550.804202547), 857343713);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (-1467), (-2736.850816), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(17.0, 17.0, (double) 1L);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double) 1, 3.141592653589793, (double) 1036);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = Double.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-0.16624882440418567), 1.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 229.50591);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int int0 = MathUtils.compareTo(2336, (-2730.3657197), (-666.35));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = MathUtils.compareTo(0L, 0.0, 0L);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.08371849358081818, 0.0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-2774), (-2774));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,774
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 184);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 184
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(2336, 14);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(2002, (byte)1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1, 0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1710, 1710);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(2316, 1023);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(255, (-2027));
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1071644672, (byte)1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1, (short)1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(66, 13);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(11, 6);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1587, (-1235));
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(16, 0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(2, (-1467));
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(2336, 2336);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) (byte)1, (long) 627);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-1L), (-43L));
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(1603, 0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double double0 = MathUtils.cosh(2);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0L);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double double0 = MathUtils.sinh(1413);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = MathUtils.hash(1.9868161777724352E-8);
  }
}
