/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:03:24 GMT 2020
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 12.566370614359172;
      doubleArray0[2] = 28.540401018956;
      doubleArray0[3] = 415.88284;
      doubleArray0[4] = 1.232595164407831E-28;
      doubleArray0[6] = 1318.682040835621;
      doubleArray0[7] = 1909.70519494;
      doubleArray0[8] = (-709.755000033);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, (-709.755000033));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      double[] doubleArray3 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1164.6584);
      doubleArray0[2] = 4200.527959235369;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-415.2942);
      doubleArray0[5] = 1.0E-12;
      doubleArray0[6] = 2129.851036568;
      doubleArray0[7] = 3288.8794677998;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1936.671));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1504);
      doubleArray0[1] = (-2037.402823);
      doubleArray0[2] = (double) 903;
      doubleArray0[3] = (double) (-1504);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-2037.402823);
      doubleArray0[6] = (double) (-1504);
      doubleArray0[7] = 0.08325;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 903;
      doubleArray1[1] = (-2037.402823);
      doubleArray1[2] = 1.0;
      doubleArray0[3] = (double) 903;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (double) 903;
      doubleArray1[6] = 0.08325;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1756.540083864102));
      try { 
        eigenDecompositionImpl0.getRealEigenvalue((-1504));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1504
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1164.6584);
      doubleArray0[2] = 4200.962739267058;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-415.2942);
      doubleArray0[5] = 1.0E-12;
      doubleArray0[6] = 2129.851036568;
      doubleArray0[7] = 4535.9;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
      RealMatrix realMatrix1 = arrayRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1936.671));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(2);
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1164.6584);
      doubleArray0[2] = 4200.962739267058;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-415.2942);
      doubleArray0[5] = 1.0E-12;
      doubleArray0[6] = 2129.851036568;
      doubleArray0[7] = 3288.8794677998;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1936.671));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1504);
      doubleArray0[2] = 3754.52;
      doubleArray0[3] = (double) 914;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-2037.402823);
      doubleArray0[6] = (double) (-1504);
      doubleArray0[7] = 0.08325;
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (-2037.402823);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (double) 914;
      doubleArray1[5] = (double) 914;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1756.540083864102));
      try { 
        eigenDecompositionImpl0.getRealEigenvalue((-1504));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1504
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1164.6584);
      doubleArray0[2] = 4200.962739267058;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-415.2942);
      doubleArray0[5] = 1.0E-12;
      doubleArray0[6] = 2129.851036568;
      doubleArray0[7] = 3288.8794677998;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      double double0 = arrayRealVector0.getL1Distance((RealVector) arrayRealVector1);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1936.671));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-889.7);
      doubleArray0[1] = 12.566370614359172;
      doubleArray0[2] = 28.540401018956;
      doubleArray0[3] = 415.88284;
      doubleArray0[4] = 1.232595164407831E-28;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1318.682040835621;
      doubleArray0[7] = 1909.70519494;
      doubleArray0[8] = (-709.755);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, (-709.755));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-889.7);
      doubleArray0[1] = 12.566370614359172;
      doubleArray0[2] = 28.540401018956;
      doubleArray0[3] = 415.88284;
      doubleArray0[4] = 1.232595164407831E-28;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1318.682040835621;
      doubleArray0[7] = 1909.70519494;
      doubleArray0[8] = (-696.9364655179702);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, (-696.9364655179702));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1164.6584);
      doubleArray0[2] = 4200.962739267058;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-415.2942);
      doubleArray0[5] = 1.0E-12;
      doubleArray0[6] = 2129.851036568;
      doubleArray0[7] = 3288.8794677998;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
      RealMatrix realMatrix1 = arrayRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1936.671));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 287.349668;
      doubleArray0[1] = (-1164.6584);
      doubleArray0[2] = 4200.962739267058;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-415.2942);
      doubleArray0[1] = 1.0E-12;
      doubleArray0[6] = 2129.851036568;
      doubleArray0[7] = 3288.8794677998;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1936.671));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (-889.7);
      doubleArray0[1] = 12.566370614359172;
      doubleArray0[2] = 28.540401018956;
      doubleArray0[3] = 415.88284;
      doubleArray0[4] = 1.232595164407831E-28;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1318.682040835621;
      doubleArray0[7] = (-889.7);
      doubleArray0[8] = (-709.755000033);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, (-709.755000033));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double double0 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2980.4584963272);
      doubleArray0[2] = (-879.323);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3117.1116781846;
      doubleArray0[5] = 350.547491436;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapLog1p();
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.mapCos();
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector1.outerproduct(openMapRealVector0);
      RealMatrix realMatrix0 = openMapRealMatrix0.scalarMultiply(649.2);
      OpenMapRealVector openMapRealVector4 = openMapRealVector1.projection(doubleArray0);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealVector4.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix2 = openMapRealMatrix0.subtract(openMapRealMatrix1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
      try { 
        eigenDecompositionImpl0.getEigenvector((-2588));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2588
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1164.6584);
      doubleArray0[2] = 4201.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-415.2942);
      doubleArray0[5] = 1.0E-12;
      doubleArray0[6] = 2129.851036568;
      doubleArray0[7] = 3288.8794677998;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1936.671));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-889.7);
      doubleArray0[2] = 28.540401018956;
      doubleArray0[3] = 415.88284;
      doubleArray0[4] = 1.232595164407831E-28;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1318.682040835621;
      doubleArray0[7] = 1909.70519494;
      doubleArray0[8] = (-709.755000033);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, (-709.755000033));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(1612);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1612
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = openMapRealVector1.outerProduct((RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapExp();
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append(557.49);
      OpenMapRealVector openMapRealVector4 = openMapRealVector1.mapTanToSelf();
      OpenMapRealVector openMapRealVector5 = openMapRealVector1.append(0.0);
      OpenMapRealVector openMapRealVector6 = openMapRealVector0.mapCbrtToSelf();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-4448.0));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      double double0 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      double double1 = eigenDecompositionImpl0.getDeterminant();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      try { 
        eigenDecompositionImpl0.getImagEigenvalue((-2147482961));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147482961
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1601.5;
      doubleArray0[2] = -0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1601.5);
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x3 matrix
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 12;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(12, 12);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.copy();
      double double0 = Double.NaN;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NaN);
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2140.956046);
      doubleArray0[1] = (-1247.3920532191696);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2.2250738585072014E-308);
      double double0 = arrayRealVector1.getL1Distance(doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapCosh();
      RealVector realVector1 = arrayRealVector0.mapAtan();
      double double1 = eigenDecompositionImpl0.getRealEigenvalue(0);
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(4, 4);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, 4);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      OpenMapRealMatrix openMapRealMatrix2 = openMapRealMatrix1.multiply(openMapRealMatrix0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(348, 1.0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      try { 
        openMapRealMatrix0.setColumnVector(4, arrayRealVector1);
      } catch(RuntimeException e) {
         //
         // column index 4 out of allowed range [0, 3]
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2458.094;
      doubleArray0[1] = (-333.75849);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1941.3342791);
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-889.7);
      doubleArray0[1] = 12.566370614359172;
      doubleArray0[2] = 28.540401018956;
      doubleArray0[3] = 415.88284;
      doubleArray0[4] = 1.232595164407831E-28;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1318.682040835621;
      doubleArray0[7] = 1909.70519494;
      doubleArray0[8] = (-709.755000033);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, (-709.755000033));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-1498.3371262));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2856.3079787093;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 4905.4380885961;
      doubleArray0[4] = (-473.76380578591045);
      doubleArray0[5] = 96.96;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // a 6x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-2237.4802644);
      doubleArray0[2] = 0.563;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 2084.18455076436);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, Double.NaN);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2980.4584963272);
      doubleArray0[2] = (-879.323);
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 3117.1116781846;
      doubleArray0[5] = 350.547491436;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapLog1p();
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.mapCos();
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector1.outerproduct(openMapRealVector0);
      RealMatrix realMatrix0 = openMapRealMatrix0.scalarMultiply(649.2);
      OpenMapRealVector openMapRealVector4 = openMapRealVector1.projection(doubleArray0);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealVector4.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix2 = openMapRealMatrix0.subtract(openMapRealMatrix1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
      try { 
        eigenDecompositionImpl0.getEigenvector((-2588));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2588
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1164.6584);
      doubleArray0[2] = 4200.962739267058;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-415.2942);
      doubleArray0[5] = 1.0E-12;
      doubleArray0[6] = 2129.851036568;
      doubleArray0[7] = 3288.8794677998;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1936.671));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-971.3);
      doubleArray0[1] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3338.689));
      double double0 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-1029.14665133));
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2980.4584963272);
      doubleArray0[2] = (-879.323);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3117.1116781846;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapLog1p();
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.mapCos();
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector1.outerproduct(openMapRealVector0);
      RealMatrix realMatrix0 = openMapRealMatrix0.scalarMultiply(649.2);
      OpenMapRealVector openMapRealVector4 = openMapRealVector1.projection(doubleArray0);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealVector4.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix2 = openMapRealMatrix0.subtract(openMapRealMatrix1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
      try { 
        eigenDecompositionImpl0.getEigenvector((-2588));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2588
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1164.6584);
      doubleArray0[2] = 4200.962739267058;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-415.2942);
      doubleArray0[5] = 1.0E-12;
      doubleArray0[6] = 2129.851036568;
      doubleArray0[7] = 3288.8794677998;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      double double0 = arrayRealVector0.getL1Distance((RealVector) arrayRealVector1);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
      String string0 = array2DRowRealMatrix0.toString();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-1936.671));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3357.682413594533);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 27.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.0;
      doubleArray0[8] = 1892.5054644252593;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1504);
      doubleArray0[1] = (-2037.402823);
      doubleArray0[2] = 3754.52;
      doubleArray0[3] = (double) (-1504);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-2037.402823);
      doubleArray0[6] = (double) (-1504);
      doubleArray0[7] = 0.08325;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 903;
      doubleArray1[1] = (-2037.402823);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (double) 903;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (double) 903;
      doubleArray1[6] = 0.08325;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1756.540083864102));
      try { 
        eigenDecompositionImpl0.getRealEigenvalue((-1504));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1504
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 3186;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(3186, 486);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 54.0);
  }
}
