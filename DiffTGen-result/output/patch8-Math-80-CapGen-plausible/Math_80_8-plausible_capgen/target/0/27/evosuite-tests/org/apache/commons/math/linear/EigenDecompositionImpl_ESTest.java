/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 15:08:36 GMT 2020
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1790.02379038137);
      doubleArray0[3] = (-818.45306);
      doubleArray0[5] = 0.0;
      doubleArray0[5] = (-713.0841);
      doubleArray0[6] = 608.48390953689;
      doubleArray0[7] = 1.01;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 608.48390953689;
      doubleArray1[1] = (-1790.02379038137);
      doubleArray1[2] = 608.48390953689;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.01;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 2811.2;
      doubleArray1[7] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[6] = (-1790.02379038137);
      doubleArray0[3] = (-818.45306);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-713.0841);
      doubleArray0[6] = 608.48390953689;
      doubleArray0[7] = 1.01;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 608.48390953689;
      doubleArray1[1] = 608.48390953689;
      doubleArray1[2] = 608.48390953689;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.01;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 2811.2;
      doubleArray1[7] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1790.02379038137);
      doubleArray0[1] = (-818.45306);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-713.0841);
      doubleArray0[6] = 608.48390953689;
      doubleArray0[7] = 1.01;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 608.48390953689;
      doubleArray1[1] = (-713.0841);
      doubleArray1[2] = 608.48390953689;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.01;
      doubleArray1[5] = 0.0;
      doubleArray1[7] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-671.0);
      doubleArray0[1] = 208.266431029;
      doubleArray0[2] = 2709.3945258146355;
      doubleArray0[3] = 208.266431029;
      doubleArray0[4] = 1.05;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.05;
      doubleArray1[2] = (-671.0);
      doubleArray1[3] = 1.232595164407831E-28;
      doubleArray1[4] = 2709.3945258146355;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2709.3945258146355);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-671.0);
      doubleArray0[1] = 208.266431029;
      doubleArray0[2] = 2709.3945258146355;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.05;
      doubleArray0[5] = 2709.3945258146355;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.05;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-671.0);
      doubleArray1[3] = 1.232595164407831E-28;
      doubleArray1[4] = 2709.3945258146355;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      try { 
        eigenDecompositionImpl0.getEigenvector(2994);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2994
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-671.0);
      doubleArray0[1] = 209.03552806466632;
      doubleArray0[2] = 2709.6452081366147;
      doubleArray0[3] = (-1780.26576);
      doubleArray0[4] = 1.05;
      doubleArray0[5] = (-1780.26576);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.05;
      doubleArray1[1] = 0.0;
      doubleArray1[4] = (-671.0);
      doubleArray1[3] = 1.232595164407831E-28;
      doubleArray1[4] = 2709.6452081366147;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1780.26576));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getEigenvector((-506));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -506
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 209.03552806466632;
      doubleArray0[2] = 2709.6452081366147;
      doubleArray0[3] = (-1780.26576);
      doubleArray0[4] = 1.05;
      doubleArray0[5] = (-1780.26576);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.05;
      doubleArray1[1] = 0.0;
      doubleArray1[3] = 1.232595164407831E-28;
      doubleArray1[4] = 2709.6452081366147;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1780.26576));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getEigenvector((-506));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -506
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-671.0);
      doubleArray0[1] = 208.266431029;
      doubleArray0[2] = 2709.3945258146355;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.05;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.05;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-671.0);
      doubleArray1[3] = 1.232595164407831E-28;
      doubleArray1[4] = 2709.3945258146355;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      double[] doubleArray3 = eigenDecompositionImpl0.getRealEigenvalues();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-671.0);
      doubleArray0[1] = 209.03552806466632;
      doubleArray0[2] = 2709.3945258146355;
      doubleArray0[3] = (-1780.26576);
      doubleArray0[4] = 1.05;
      doubleArray0[5] = 209.03552806466632;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.05;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-671.0);
      doubleArray1[3] = 1.232595164407831E-28;
      doubleArray1[4] = 2709.3945258146355;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1780.26576));
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      try { 
        eigenDecompositionImpl0.getEigenvector((-506));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -506
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1790.02379038137);
      doubleArray0[3] = (-818.45306);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-713.0841);
      doubleArray0[6] = 608.48390953689;
      doubleArray0[7] = 1.01;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 608.48390953689;
      doubleArray1[1] = 608.48390953689;
      doubleArray1[2] = 608.48390953689;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.01;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 2811.2;
      doubleArray1[7] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      try { 
        eigenDecompositionImpl0.getRealEigenvalue((-3045));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3045
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 838;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(838, (-1401.22793011));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(838, 838);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, 1.0E-12);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-671.0);
      doubleArray0[1] = 209.03552806466632;
      doubleArray0[2] = 2709.3945258146355;
      doubleArray0[3] = (-1780.26576);
      doubleArray0[4] = 1.05;
      doubleArray0[5] = (-1780.26576);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.05;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-671.0);
      doubleArray1[3] = 1.232595164407831E-28;
      doubleArray1[4] = 2709.3945258146355;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1780.26576));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getEigenvector((-506));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -506
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)array2DRowRealMatrix0.scalarAdd(0.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix1, 0.0);
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      double double0 = eigenDecompositionImpl0.getDeterminant();
      Array2DRowRealMatrix array2DRowRealMatrix3 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      Array2DRowRealMatrix array2DRowRealMatrix4 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      Array2DRowRealMatrix array2DRowRealMatrix5 = array2DRowRealMatrix1.subtract(array2DRowRealMatrix4);
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)eigenDecompositionImpl0.getEigenvector(0);
      double double1 = eigenDecompositionImpl0.getRealEigenvalue(0);
      Array2DRowRealMatrix array2DRowRealMatrix6 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-671.0);
      doubleArray0[1] = 208.266431029;
      doubleArray0[2] = 2709.3945258146355;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.05;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.05;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-671.0);
      doubleArray1[3] = 1.232595164407831E-28;
      doubleArray1[4] = 2709.3945258146355;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1790.02379038137);
      doubleArray0[3] = (-818.45306);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-713.0841);
      doubleArray0[6] = 608.48390953689;
      doubleArray0[7] = 1.01;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 608.48390953689;
      doubleArray1[1] = 608.48390953689;
      doubleArray1[2] = 608.48390953689;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.01;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 2811.2;
      doubleArray1[7] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(0.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      RealMatrix realMatrix4 = realMatrix0.getSubMatrix(intArray0, intArray0);
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      double double1 = eigenDecompositionImpl0.getRealEigenvalue(0);
      double double2 = eigenDecompositionImpl0.getImagEigenvalue(0);
      try { 
        eigenDecompositionImpl0.getImagEigenvalue((-3285));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3285
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1790.02379038137);
      doubleArray0[3] = (-818.45306);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-713.0841);
      doubleArray0[6] = 608.48390953689;
      doubleArray0[7] = 1.01;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 608.48390953689;
      doubleArray1[1] = 608.48390953689;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.01;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 2811.2;
      doubleArray1[7] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      double[] doubleArray3 = eigenDecompositionImpl0.getRealEigenvalues();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      int int0 = (-22);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-22));
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-818.45306);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-713.0841);
      doubleArray0[6] = 608.48390953689;
      doubleArray0[7] = 1.01;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 608.48390953689;
      doubleArray1[1] = 608.48390953689;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.01;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 2811.2;
      doubleArray1[7] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1499.4859665503059;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 3006.261956599204;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.05;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(0.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 4.0);
      } catch(RuntimeException e) {
         //
         // a 8x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(0.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      double double1 = eigenDecompositionImpl0.getRealEigenvalue(0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.5;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      double double0 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 3161.53301289747;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 2747.556075742373;
      doubleArray1[4] = 0.08325;
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, true);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(0.08325);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 3161.53301289747);
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x5 matrix
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(54.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1709.491130331);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NaN);
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix5 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix6 = eigenDecompositionImpl0.getD();
      double double2 = eigenDecompositionImpl0.getImagEigenvalue(0);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double double3 = eigenDecompositionImpl0.getDeterminant();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-2824.6));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, 761.7032550888816);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, (-1567.4169641307897));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-1681.998633282555));
      doubleArray0[0] = double0;
      Double double1 = new Double((-1681.998633282555));
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double double3 = new Double((-1681.998633282555));
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[2]);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[3]);
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      doubleArray0[7] = double7;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);
      RealMatrix realMatrix0 = openMapRealVector1.outerProduct((RealVector) openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (double) doubleArray0[6]);
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-379.2181620109293);
      doubleArray0[1] = (-3626.2);
      doubleArray0[2] = 217.81;
      doubleArray0[3] = 1458.744000618419;
      doubleArray0[4] = (-801.0);
      doubleArray0[5] = 2832.9890077998575;
      doubleArray0[6] = (-3712.56655);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 3240.263328;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.333);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(4, 4);
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(4, 4);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.preMultiply((RealMatrix) openMapRealMatrix1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 4);
      double[] doubleArray0 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 129.2228008055);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[7];
      intArray0[1] = 0;
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, false);
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4211.9704);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-473.168831613);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1776.1109462558513);
      doubleArray0[8] = (-1130.87358);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1790.02379038137);
      doubleArray0[3] = (-818.45306);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 608.48390953689;
      doubleArray0[7] = 1.01;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 608.48390953689;
      doubleArray1[1] = 608.48390953689;
      doubleArray1[2] = 608.48390953689;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.01;
      doubleArray1[5] = 0.0;
      doubleArray1[7] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(15);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }
}
