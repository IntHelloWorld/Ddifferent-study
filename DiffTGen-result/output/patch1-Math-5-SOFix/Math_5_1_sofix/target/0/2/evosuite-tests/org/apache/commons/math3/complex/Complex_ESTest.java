/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 08:20:46 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.pow(2160.69548552);
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex2.sin();
      double double0 = complex0.getImaginary();
      double double1 = complex0.getArgument();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.reciprocal();
      Object object0 = complex6.INF.readResolve();
      boolean boolean0 = complex5.equals(complex0);
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex1.pow(0.0);
      Complex complex9 = complex8.subtract(0.0);
      Complex complex10 = complex7.divide(0.0);
      Complex complex11 = complex10.pow(1365.23984);
      Complex complex12 = new Complex((-1.0808162722402073E-8), 0.0);
      Complex complex13 = complex0.INF.subtract(complex12);
      Complex complex14 = complex2.subtract(0.0);
      double double2 = complex14.getReal();
      Complex complex15 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.divide(complex0);
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.add(complex0);
      Complex complex3 = complex2.NaN.pow(0.0);
      Complex complex4 = complex2.multiply(complex0);
      Complex complex5 = complex0.multiply((-1.0));
      int int0 = complex4.hashCode();
      Complex complex6 = complex4.negate();
      double double0 = complex6.ONE.getArgument();
      Complex complex7 = complex6.multiply((-636));
      Complex complex8 = complex0.add(656.923741174737);
      Complex complex9 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.log();
      String string0 = complex0.ONE.toString();
      double double0 = complex1.getReal();
      Complex complex2 = complex0.ONE.createComplex((-2441.626334), Double.NEGATIVE_INFINITY);
      Complex complex3 = complex1.I.add(1514.022247);
      Complex complex4 = complex1.divide(2507.0);
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex5.divide(Double.NEGATIVE_INFINITY);
      Complex complex7 = Complex.valueOf(1514.022247);
      Complex complex8 = Complex.valueOf(2507.0, 7.957037517331382E-8);
      Complex complex9 = complex2.multiply((-946));
      Complex complex10 = complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.pow(1916.508863595);
      double double0 = complex1.getReal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.cosh();
      double double1 = complex3.ZERO.abs();
      Complex complex4 = complex3.ONE.subtract(2.0);
      Complex complex5 = complex0.ONE.cosh();
      Complex complex6 = complex2.exp();
      double double2 = complex1.abs();
      Complex complex7 = complex6.I.pow(2.0);
      Complex complex8 = complex1.cosh();
      double double3 = complex0.getArgument();
      double double4 = complex6.getReal();
      Object object1 = complex3.readResolve();
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex8.sqrt1z();
      Complex complex12 = complex4.NaN.cosh();
      Complex complex13 = complex12.INF.reciprocal();
      Complex complex14 = complex8.atan();
      double double5 = complex11.ONE.abs();
      Complex complex15 = complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex16 = complex1.exp();
      String string0 = complex11.toString();
      Complex complex17 = complex10.cos();
      Complex complex18 = complex10.sin();
      Complex complex19 = complex18.I.multiply(1.0);
      Complex complex20 = complex18.sqrt1z();
      Object object2 = complex2.INF.readResolve();
      Complex complex21 = Complex.valueOf(0.0, 3.1149346370027763E33);
      double double6 = complex14.getArgument();
      Complex complex22 = complex9.log();
      Complex complex23 = Complex.valueOf(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-524.8242814), (-524.8242814));
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.tanh();
      double double0 = complex2.abs();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.ONE.add(0.7615941559557649);
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.sin();
      Object object0 = complex6.readResolve();
      Complex complex7 = complex4.ONE.acos();
      Complex complex8 = complex1.negate();
      ComplexField complexField1 = complex8.I.getField();
      Complex complex9 = complex3.divide(complex8);
      Complex complex10 = complex9.ZERO.divide(complex5);
      Complex complex11 = complex10.INF.pow(complex1);
      Complex complex12 = complex8.subtract(complex2);
      Complex complex13 = complex3.ONE.subtract((-1.0));
      double double1 = complex9.getArgument();
      double double2 = complex4.abs();
      double double3 = complex9.getReal();
      Complex complex14 = complex8.reciprocal();
      Complex complex15 = complex0.multiply(219.803);
      Complex complex16 = complex3.NaN.createComplex(5099.4842162, (-522.75331334234));
      Complex complex17 = Complex.valueOf(1.0, (-2331.75795));
      Complex complex18 = complex15.ZERO.subtract(complex17);
      int int0 = complex7.hashCode();
      double double4 = complex8.abs();
      Complex complex19 = complex6.divide((-203.82016420418));
      ComplexField complexField2 = complex13.getField();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.INF.divide(0.0);
      Complex complex4 = complex2.INF.add(complex0);
      List<Complex> list0 = complex4.INF.nthRoot(1279);
      Complex complex5 = new Complex(0.0, (-2054.605));
      Complex complex6 = complex4.INF.multiply(complex5);
      double double0 = complex0.getImaginary();
      Complex complex7 = complex1.sin();
      Complex complex8 = complex7.INF.atan();
      Complex complex9 = complex8.NaN.multiply(complex1);
      Complex complex10 = complex9.ZERO.log();
      double double1 = complex9.I.getArgument();
      Complex complex11 = complex8.I.divide(2621.03284605);
      Complex complex12 = complex1.divide(complex0);
      Complex complex13 = complex8.I.multiply(complex0);
      Complex complex14 = complex0.sqrt();
      List<Complex> list1 = complex14.I.nthRoot(1279);
      double double2 = complex2.getReal();
      Complex complex15 = complex8.conjugate();
      Complex complex16 = complex15.asin();
      Complex complex17 = Complex.valueOf(1.0, -0.0);
      Complex complex18 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex3.ONE.asin();
      Complex complex6 = complex4.ZERO.sin();
      Complex complex7 = complex0.subtract(complex1);
      Complex complex8 = complex7.I.divide(0.0);
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex0.ONE.sin();
      Complex complex11 = complex0.acos();
      Complex complex12 = complex6.log();
      double double0 = complex12.getImaginary();
      Complex complex13 = complex0.sqrt();
      Complex complex14 = complex13.pow(0.0);
      Complex complex15 = complex14.ONE.multiply(complex4);
      Complex complex16 = complex7.cos();
      Complex complex17 = complex3.conjugate();
      Complex complex18 = complex17.ONE.add(0.0);
      boolean boolean0 = complex13.isInfinite();
      Complex complex19 = complex7.divide(complex16);
      Complex complex20 = complex16.divide(complex7);
      Complex complex21 = complex0.exp();
      Complex complex22 = new Complex(Double.NaN, 0.0);
      Complex complex23 = complex12.subtract(complex22);
      int int0 = complex20.hashCode();
      Complex complex24 = complex2.negate();
      Complex complex25 = complex18.divide(complex3);
      Complex complex26 = complex2.sqrt();
      boolean boolean1 = complex16.isInfinite();
      double double1 = complex23.getReal();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex2.I.reciprocal();
      double double0 = complex0.getReal();
      double double1 = complex2.getReal();
      Complex complex4 = complex3.I.negate();
      boolean boolean0 = complex2.isNaN();
      Complex complex5 = complex1.ONE.cos();
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex3.exp();
      Complex complex8 = complex0.multiply(0.48430514335632324);
      Complex complex9 = complex8.ZERO.tanh();
      int int0 = complex8.INF.hashCode();
      Complex complex10 = complex7.createComplex(2954.28318360052, Double.POSITIVE_INFINITY);
      Complex complex11 = complex1.log();
      int int1 = complex11.ONE.hashCode();
      Complex complex12 = complex11.INF.sinh();
      Complex complex13 = Complex.valueOf(Double.NaN);
      Complex complex14 = complex13.ONE.multiply(Double.NaN);
      Complex complex15 = complex13.ZERO.tanh();
      Complex complex16 = complex3.subtract(Double.NaN);
      Complex complex17 = complex5.negate();
      Complex complex18 = complex16.ZERO.acos();
      try { 
        complex10.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.NaN.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.log();
      double double1 = complex1.getArgument();
      String string0 = complex1.NaN.toString();
      Complex complex3 = complex0.INF.subtract(complex1);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.INF.divide(complex4);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex0.ZERO.exp();
      Complex complex8 = complex4.subtract(complex5);
      Complex complex9 = complex1.subtract(Double.NaN);
      try { 
        complex9.ONE.nthRoot((-1057));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,057
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2150.3428), Double.POSITIVE_INFINITY);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.log();
      String string0 = complex0.ONE.toString();
      double double0 = complex1.getReal();
      Complex complex2 = complex0.ONE.createComplex((-2441.626334), Double.NEGATIVE_INFINITY);
      Complex complex3 = complex1.I.add(1514.022247);
      Complex complex4 = complex1.divide(2507.0);
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = Complex.valueOf(1514.022247);
      Complex complex7 = Complex.valueOf(2507.0, 7.957037517331382E-8);
      Complex complex8 = complex2.multiply((-946));
      Complex complex9 = complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isInfinite();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.add(637.8479637);
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.I.exp();
      try { 
        complex3.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(594.0734589901534, (-1879.4179502));
      Complex complex1 = complex0.divide((-20.0));
      Complex complex2 = complex1.ONE.divide((-1879.4179502));
      Complex complex3 = complex1.NaN.asin();
      Complex complex4 = complex1.NaN.tanh();
      Complex complex5 = complex0.createComplex(95.09463954, 2306.923302514006);
      Complex complex6 = complex5.ZERO.sqrt();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex2.conjugate();
      boolean boolean0 = complex4.equals(complex3);
      double double0 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1052.9432515187);
      Complex complex1 = complex0.ZERO.divide((-1180.48904512862));
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-3448.0), (-3448.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.ZERO.negate();
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex4.createComplex((-3448.0), 0.0);
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex1.atan();
      String string0 = complex2.toString();
      Complex complex8 = complex2.NaN.sin();
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex0.multiply(complex2);
      Complex complex10 = complex0.ZERO.negate();
      Complex complex11 = complex6.acos();
      Complex complex12 = complex0.multiply(1492);
      int int0 = 5557;
      Complex complex13 = complex1.ZERO.tanh();
      // Undeclared exception!
      complex12.I.nthRoot(5557);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 1462.666;
      Complex complex0 = Complex.valueOf(1462.666);
      try { 
        complex0.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1704.32);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tanh();
      String string0 = complex0.INF.toString();
      String string1 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.NaN.multiply((-2523));
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex0.ZERO.subtract(1494.143970040048);
      Complex complex4 = complex3.ONE.subtract(complex2);
      double double1 = complex4.NaN.getArgument();
      int int0 = complex3.NaN.hashCode();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex5 = complex2.negate();
      double double2 = complex0.I.getArgument();
      Complex complex6 = complex0.multiply((double) 1);
      Complex complex7 = Complex.valueOf((double) 1);
      Complex complex8 = Complex.valueOf((double) (-2523));
      Complex complex9 = complex0.exp();
      Complex complex10 = complex9.NaN.multiply((-1878));
      Complex complex11 = Complex.valueOf(0.0, Double.NaN);
      double double3 = complex1.getArgument();
      Complex complex12 = complex1.asin();
      Complex complex13 = complex1.acos();
      Complex complex14 = complex13.NaN.conjugate();
      String string0 = complex13.I.toString();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.INF.subtract(complex0);
      Complex complex5 = complex4.I.sin();
      double double0 = complex0.getReal();
      Complex complex6 = complex3.pow(0.0);
      Complex complex7 = Complex.valueOf(0.0, 6.283185307179586);
      Complex complex8 = complex7.INF.sqrt();
      double double1 = complex7.abs();
      Complex complex9 = complex0.multiply(0.0);
      double double2 = complex9.NaN.getArgument();
      Complex complex10 = complex0.NaN.sin();
      try { 
        complex10.ZERO.nthRoot((-4440));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,440
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-857.9), (-857.9));
      Complex complex1 = Complex.valueOf(754.37488646, (-857.9));
      Complex complex2 = complex1.ONE.add((-857.9));
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex0.ZERO.pow(complex1);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.NaN.createComplex(754.37488646, 754.37488646);
      Complex complex7 = complex4.ONE.subtract(complex5);
      Complex complex8 = Complex.valueOf(754.37488646, 754.37488646);
      Complex complex9 = complex0.tan();
      Complex complex10 = complex0.conjugate();
      int int0 = complex10.ONE.hashCode();
      Complex complex11 = complex0.sin();
      Complex complex12 = complex2.sqrt1z();
      Complex complex13 = complex3.add(complex0);
      Complex complex14 = complex6.multiply(3346.814576259);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.034552380442619324, (-1181.75473113808));
      Complex complex1 = Complex.valueOf(0.034552380442619324, (-1181.75473113808));
      Complex complex2 = complex0.multiply(complex1);
      double double0 = complex0.abs();
      Complex complex3 = Complex.valueOf(1181.7547316432047, 406.114629);
      Complex complex4 = Complex.valueOf((-235.72113));
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex2.multiply(1521);
      Complex complex8 = complex2.pow(complex7);
      Complex complex9 = complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf((-295.8565), (-20.0));
      Complex complex3 = complex1.add(4903.089508207116);
      Complex complex4 = complex2.INF.sqrt();
      Complex complex5 = complex1.createComplex((-295.8565), (-1421.34107286804));
      double double0 = complex5.abs();
      Complex complex6 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(1006.852521882491);
      Complex complex1 = complex0.subtract(1006.852521882491);
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex0.cosh();
      try { 
        complex2.nthRoot((-1955));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,955
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.ZERO.sinh();
      Object object0 = complex3.INF.readResolve();
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = complex2.ZERO.reciprocal();
      Complex complex6 = complex0.NaN.multiply((-1621));
      Complex complex7 = complex2.ZERO.pow(complex1);
      Complex complex8 = complex0.ZERO.log();
      int int0 = 1;
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex9 = complex0.atan();
      Complex complex10 = null;
      try { 
        complex2.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.INF.reciprocal();
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex4.ZERO.log();
      Complex complex8 = complex6.pow((-20.0));
      Object object0 = complex4.readResolve();
      ComplexField complexField1 = complex6.getField();
      boolean boolean0 = complex0.isNaN();
      int int0 = complex2.hashCode();
      Complex complex9 = complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.createComplex((-4529.881), (-4529.881));
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex0.multiply(complex2);
      boolean boolean0 = complex4.isNaN();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.sin();
      double double0 = complex2.I.getArgument();
      int int0 = complex6.hashCode();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex0.subtract((-1700.3577612));
      Complex complex9 = complex0.divide((-4529.881));
      Complex complex10 = complex5.reciprocal();
      Complex complex11 = complex8.tan();
      Complex complex12 = complex10.sqrt();
      boolean boolean1 = complex8.isInfinite();
      boolean boolean2 = complex2.equals(complex6);
      Complex complex13 = complex7.pow((-4529.881));
      int int1 = complex4.hashCode();
      Complex complex14 = complex5.multiply(3600);
      Complex complex15 = complex12.divide(complex13);
      double double1 = complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.log();
      Complex complex2 = Complex.valueOf(2326.3268378747);
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex0.INF.divide(0.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex2.ZERO.pow((-20.42886));
      Complex complex7 = complex0.NaN.subtract(complex2);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      int int0 = complex8.ZERO.hashCode();
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex3.multiply(2326.3268378747);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2126.729599149));
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-20.0));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.add(complex0);
      double double0 = complex1.getImaginary();
      String string0 = complex0.toString();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide((-658.8739077162));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.cos();
      int int0 = complex0.NaN.hashCode();
      Complex complex5 = complex2.I.multiply(complex0);
      Complex complex6 = complex4.ZERO.sin();
      Complex complex7 = complex6.I.sqrt();
      Complex complex8 = complex4.divide(complex1);
      Complex complex9 = complex1.multiply(0);
      double double0 = complex2.getImaginary();
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex8.add((double) 0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1255.95334707857), (-8.678466172071259E-9));
      Complex complex1 = Complex.valueOf(8.877492215808044E-8, 0.0);
      Complex complex2 = complex0.I.divide(complex1);
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex3 = complex0.add((-1255.95334707857));
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex3.add(1.8573312759399414);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(1308.7856041431012, 1308.7856041431012);
      Complex complex1 = complex0.pow(1308.7856041431012);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex3.INF.conjugate();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex3.log();
      Complex complex9 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.INF.subtract(0.0);
      Complex complex5 = Complex.valueOf(0.6075552701950073);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex2.multiply(complex6);
      Complex complex8 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-4117.156598));
      Complex complex1 = complex0.NaN.multiply((-767));
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.acos();
      int int0 = complex3.ZERO.hashCode();
      Complex complex4 = complex3.I.log();
      double double1 = complex4.ZERO.getArgument();
      Complex complex5 = complex3.log();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex3.divide((double) (-767));
      Complex complex8 = complex0.pow(complex7);
      Complex complex9 = complex3.INF.multiply(3618.4292052800047);
      Complex complex10 = complex2.sinh();
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf((-686.49));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.ONE.multiply(0.0);
      Complex complex5 = complex2.NaN.exp();
      Complex complex6 = complex2.exp();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex6.createComplex(0.0, 2.81312841469177E128);
      Complex complex9 = complex8.NaN.sinh();
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex1.cos();
      Complex complex12 = complex6.add(0.0);
      ComplexField complexField0 = complex2.getField();
      Complex complex13 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex0.add((-299.4756768735421));
      Complex complex5 = Complex.valueOf(1.7177785285061278E-7, (-299.4756768735421));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1150.0), 3.5326287852455166E-24);
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex1.ZERO.sqrt();
      Complex complex5 = complex1.ONE.log();
      Complex complex6 = complex1.INF.createComplex((-1150.0), 3.5326287852455166E-24);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.subtract(2.5988736152648926);
      Complex complex9 = complex7.tan();
      Complex complex10 = complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1342.591245), (-1342.591245));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.ONE.multiply((-1342.591245));
      Complex complex4 = complex0.pow((-1342.591245));
      Complex complex5 = complex0.log();
      Complex complex6 = complex1.multiply((-1342.591245));
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex6.cos();
      List<Complex> list0 = complex6.nthRoot(1227);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1019.855866244));
      double double0 = complex0.ZERO.abs();
      ComplexField complexField0 = complex0.ZERO.getField();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.NaN.pow(0.0);
      Complex complex4 = Complex.valueOf((-1019.855866244), 2.0);
      Complex complex5 = Complex.valueOf((-1019.855866244));
      Complex complex6 = complex0.ONE.multiply(complex5);
      Complex complex7 = complex5.subtract(0.0);
      Complex complex8 = complex1.INF.conjugate();
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex9.multiply(complex5);
      Complex complex11 = complex10.INF.log();
      Complex complex12 = complex6.pow(0.0);
      ComplexField complexField1 = complex12.NaN.getField();
      Complex complex13 = complex1.log();
      Complex complex14 = complex13.add(complex5);
      Complex complex15 = complex13.I.pow(0.0);
      Complex complex16 = complex0.pow(0.0);
      Complex complex17 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex1.ZERO.createComplex(1.0, 6.283185307179586);
      Complex complex4 = complex1.subtract(1.0);
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1191.3));
      Complex complex1 = complex0.NaN.sqrt();
      String string0 = complex0.ONE.toString();
      Complex complex2 = complex0.exp();
      double double0 = complex0.abs();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = Complex.ZERO;
      double double1 = complex5.INF.getArgument();
      Complex complex6 = complex3.multiply(complex5);
      Complex complex7 = complex6.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex2.log();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-8.18804507680012E74), (-8.18804507680012E74));
      Complex complex1 = complex0.INF.multiply(17);
      double double0 = complex1.INF.getArgument();
      Complex complex2 = complex1.INF.divide((-1211.9));
      Complex complex3 = complex2.INF.createComplex(2.0, (-266.242));
      Complex complex4 = complex0.multiply((-8.18804507680012E74));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3315.62), 3189.2658200981);
      Complex complex1 = new Complex(3189.2658200981, 3189.2658200981);
      Complex complex2 = complex0.ONE.divide(complex1);
      String string0 = complex0.ZERO.toString();
      Complex complex3 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1106.8), 6.283185307179586);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = Complex.valueOf(1651.0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.ZERO.sqrt1z();
      Complex complex5 = complex3.I.pow((-798.6865887));
      Complex complex6 = complex3.ONE.sin();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex0.cosh();
      double double0 = complex2.getReal();
      boolean boolean0 = complex3.isInfinite();
      Complex complex9 = complex1.NaN.reciprocal();
      Complex complex10 = complex8.ONE.conjugate();
      Complex complex11 = complex2.divide(complex1);
      Complex complex12 = Complex.valueOf(6.283185307179586, 0.0);
      Complex complex13 = complex7.pow(complex1);
      Object object0 = new Object();
      boolean boolean1 = complex8.equals(object0);
      ComplexField complexField0 = complex7.getField();
      Complex complex14 = Complex.valueOf((-1106.8));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 2043.53289216026);
      Complex complex1 = complex0.sin();
      double double0 = complex0.NaN.getArgument();
      double double1 = complex1.getArgument();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex2.NaN.acos();
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex4.NaN.cosh();
      Complex complex7 = complex6.INF.multiply(complex1);
      double double2 = complex0.getImaginary();
      Complex complex8 = complex0.divide(2043.53289216026);
      Complex complex9 = complex8.multiply(2043.53289216026);
      Complex complex10 = complex8.log();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-3484.770261482636));
      Complex complex1 = complex0.ZERO.divide(Double.NaN);
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex2.ONE.add(complex1);
      double double0 = complex3.I.abs();
      Complex complex4 = complex2.I.pow(complex0);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.ONE.tan();
      Complex complex7 = complex0.subtract(complex5);
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex6.createComplex((-3484.770261482636), Double.POSITIVE_INFINITY);
      double double1 = complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.18573370575904846);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.pow(20.0);
      Complex complex3 = complex1.I.createComplex(0.18573370575904846, 0.0);
      String string0 = complex3.NaN.toString();
      Complex complex4 = Complex.valueOf(0.18573370575904846, 2.929187356678173E-8);
      List<Complex> list0 = complex0.nthRoot(1334);
      Complex complex5 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1559.0838298426));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      double double0 = complex1.getImaginary();
      Complex complex3 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(1832.43);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.subtract(complex1);
      double double0 = complex0.getImaginary();
      Complex complex4 = complex2.sqrt1z();
      String string0 = complex4.NaN.toString();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.9445664882659912, 0.0);
      Complex complex1 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(3720);
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex0.INF.tan();
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex0.ONE.readResolve();
      Complex complex4 = Complex.I;
      Complex complex5 = complex2.INF.negate();
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = complex0.multiply(0);
      Complex complex8 = Complex.valueOf(2.5217716516462005E-184);
      String string0 = complex2.toString();
      boolean boolean1 = complex2.isInfinite();
      double double0 = complex5.getArgument();
      boolean boolean2 = complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(4586.5740744, 4586.5740744);
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.atan();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex2.multiply((-3552.7853893228));
      double double0 = complex3.NaN.getArgument();
      double double1 = complex0.getArgument();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex1.INF.sinh();
      Complex complex8 = complex2.sin();
      ComplexField complexField0 = complex8.INF.getField();
      Complex complex9 = complex1.sin();
      Complex complex10 = complex0.sqrt();
      boolean boolean0 = complex10.isNaN();
      Complex complex11 = complex10.divide(1.5707963267948966);
      double double2 = (-4302.77);
      int int0 = (-2111);
      try { 
        complex8.NaN.nthRoot((-2111));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,111
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-2078.0109045608683), (-2078.0109045608683));
      Complex complex2 = complex1.NaN.add((-2078.0109045608683));
      Complex complex3 = complex0.I.add(complex1);
      Complex complex4 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1026.303221989993));
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.ZERO.sin();
      double double0 = complex2.getReal();
      Complex complex4 = complex2.pow((-1026.303221989993));
      double double1 = complex4.getReal();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex1.pow(complex3);
      Complex complex7 = complex5.tan();
      Complex complex8 = Complex.valueOf(0.0, 0.5795662648668432);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.ZERO.multiply((-469));
      Complex complex3 = complex0.ZERO.tanh();
      Complex complex4 = complex3.INF.log();
      double double0 = complex0.getReal();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex4.sinh();
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2602.42);
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf((-3649.812851671));
      Complex complex3 = complex0.INF.conjugate();
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex7.conjugate();
      boolean boolean0 = complex7.isNaN();
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(428.55577723778);
      Complex complex2 = complex0.pow(428.55577723778);
      Complex complex3 = complex0.INF.sqrt();
      Complex complex4 = complex1.subtract(6.283185307179586);
      List<Complex> list0 = complex2.nthRoot(4287);
      Complex complex5 = complex1.cos();
      boolean boolean0 = complex4.isInfinite();
      Complex complex6 = complex0.createComplex(4287, 4287);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1487.0));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.sinh();
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex1.createComplex(1900.7386893, 1616.6818755);
      Complex complex4 = complex1.divide(0.0);
      Complex complex5 = complex0.INF.subtract(complex3);
      try { 
        complex1.nthRoot((-3426));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,426
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.createComplex(Double.NaN, 2.0);
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = Complex.valueOf((-2486.017069283));
      Object object0 = complex5.ZERO.readResolve();
      Object object1 = complex4.readResolve();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.pow(1941.3058601);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex3.add(complex4);
      Complex complex9 = Complex.valueOf(2.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-1644.0679066));
      Complex complex1 = complex0.add((-1644.0679066));
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.pow(0.0);
      Complex complex6 = complex5.acos();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(59.96320076445079);
      Complex complex1 = complex0.ONE.createComplex(59.96320076445079, 59.96320076445079);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.ZERO.add(59.96320076445079);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex4 = complex0.NaN.reciprocal();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-435.8), (-2168.321967798));
      Complex complex1 = complex0.I.multiply(0);
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.divide((-435.8));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.multiply(1138);
      Complex complex3 = complex1.INF.sin();
      Complex complex4 = complex3.NaN.divide(Double.NaN);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex1.I.sqrt();
      Complex complex8 = complex7.ONE.tanh();
      Complex complex9 = complex5.multiply(915.297);
      Complex complex10 = complex3.exp();
      Complex complex11 = complex3.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.cosh();
      int int0 = complex1.INF.hashCode();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.sin();
      String string0 = complex4.toString();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex6.sin();
      double double0 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.ONE.nthRoot(2259);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex0.conjugate();
      double double0 = complex4.getArgument();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex6.subtract((-652.2));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1126.49864295721, 1126.49864295721);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex3.NaN.subtract((-482.2689));
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.multiply(0);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = Complex.valueOf((-624.6), 0.0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3736.729402306615);
      Complex complex1 = complex0.ONE.log();
      double double0 = complex0.I.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-1649.47672), (-424.59));
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.subtract(5520.217371900349);
      double double0 = complex0.I.getArgument();
      Complex complex2 = Complex.valueOf(1.4110645699377834E-8);
      String string0 = complex0.toString();
      boolean boolean0 = complex2.isInfinite();
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex2.multiply(1);
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.valueOf(2215.30071995);
      Object object0 = complex4.readResolve();
      boolean boolean1 = complex4.equals(object0);
      double double1 = complex0.getArgument();
      boolean boolean2 = complex1.isNaN();
      Complex complex7 = complex2.ZERO.pow(complex0);
      Complex complex8 = complex1.subtract(20.0);
      Complex complex9 = complex4.multiply(1);
      Complex complex10 = complex0.sqrt1z();
      boolean boolean3 = complex4.equals("(0.0, 0.0)");
      Complex complex11 = Complex.valueOf(5520.217371900349, 1.5707963267948966);
      Object object1 = complex1.ONE.readResolve();
      List<Complex> list0 = complex5.nthRoot(891);
      double double2 = complex0.getReal();
      Complex complex12 = complex1.negate();
      String string1 = complex5.toString();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.getImaginary();
      double double1 = complex0.I.getArgument();
      Complex complex1 = complex0.reciprocal();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.valueOf(1.5707963267948966);
      Complex complex7 = complex6.ONE.divide(20.0);
      Complex complex8 = complex7.INF.atan();
      Complex complex9 = complex5.INF.negate();
      String string0 = complex6.NaN.toString();
      Complex complex10 = Complex.valueOf(0.0, (-20.0));
      Complex complex11 = complex3.multiply(complex5);
      Complex complex12 = complex4.sin();
      Complex complex13 = complex11.tanh();
      Complex complex14 = complex3.sqrt();
      Object object0 = complex14.I.readResolve();
      int int0 = complex1.ZERO.hashCode();
      String string1 = complex3.toString();
      double double2 = complex3.getImaginary();
      Complex complex15 = complex14.pow(complex1);
      Complex complex16 = complex4.atan();
      Complex complex17 = complex4.cos();
      try { 
        complex15.nthRoot((-1828));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,828
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(889.458486681132);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.I.tan();
      Complex complex7 = complex6.ONE.atan();
      Complex complex8 = complex6.NaN.multiply(1.7838233889223407E279);
      Complex complex9 = complex4.ZERO.add(0.0);
      Complex complex10 = complex4.cosh();
      Object object0 = complex5.readResolve();
      Complex complex11 = complex2.ONE.acos();
      boolean boolean0 = complex4.equals(object0);
      Complex complex12 = complex2.tan();
      Complex complex13 = Complex.valueOf(1.7838233889223407E279, 0.0);
      Complex complex14 = complex3.asin();
      ComplexField complexField0 = complex5.getField();
      Complex complex15 = complex1.sin();
      Complex complex16 = complex4.log();
      Complex complex17 = complex12.log();
      boolean boolean1 = complex11.equals(complex13);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ZERO.add(Double.NaN);
      Complex complex4 = complex0.atan();
      double double0 = complex2.NaN.abs();
      Complex complex5 = Complex.valueOf(1.0);
      Complex complex6 = complex0.multiply(Double.NaN);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex0.log();
      Complex complex9 = complex3.sqrt1z();
      double double1 = complex8.getArgument();
      ComplexField complexField0 = complex3.getField();
      Complex complex10 = complex4.reciprocal();
      Complex complex11 = complex10.acos();
      Complex complex12 = Complex.valueOf((-1855.492503), 0.0);
      Object object0 = complex12.readResolve();
      boolean boolean0 = complex7.equals(object0);
      Complex complex13 = complex6.sqrt1z();
      Complex complex14 = complex9.log();
      Complex complex15 = complex13.multiply((-558));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = Complex.valueOf(0.0);
      double double0 = complex1.I.getArgument();
      Complex complex3 = complex1.INF.cos();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.ONE.divide((-3375.5341751));
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = complex6.I.pow(1.5707963267948966);
      Complex complex9 = complex1.pow(complex4);
      Complex complex10 = complex9.ZERO.negate();
      Complex complex11 = complex1.ONE.sqrt();
      Complex complex12 = complex9.divide(0.0);
      Complex complex13 = complex2.conjugate();
      Complex complex14 = complex13.ONE.asin();
      Complex complex15 = complex1.sin();
      Complex complex16 = complex15.I.pow(complex10);
      Complex complex17 = complex13.createComplex(0.0, (-3375.5341751));
      Complex complex18 = complex5.multiply((-12));
      Complex complex19 = complex7.sqrt();
      Complex complex20 = complex4.exp();
      Complex complex21 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-4.055299181908475E-8), 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex0.I.tan();
      Complex complex5 = complex4.INF.sin();
      Object object0 = complex5.readResolve();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex6.I.divide((-4.055299181908475E-8));
      Complex complex8 = complex7.I.pow((-4.055299181908475E-8));
      Complex complex9 = complex8.ZERO.conjugate();
      Complex complex10 = complex0.add((-4.055299181908475E-8));
      Complex complex11 = complex4.createComplex(0.0, (-4.055299181908475E-8));
      Complex complex12 = Complex.valueOf(800.7734853);
      ComplexField complexField0 = complex4.getField();
      Complex complex13 = complex6.tanh();
      Complex complex14 = complex13.createComplex(800.7734853, 800.7734853);
      Complex complex15 = complex3.cosh();
      double double0 = complex15.INF.abs();
      Complex complex16 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = Complex.valueOf(2.0, 856.902);
      Complex complex6 = complex5.INF.sinh();
      int int0 = complex6.I.hashCode();
      Complex complex7 = complex6.NaN.log();
      Complex complex8 = complex5.ZERO.add(complex3);
      Complex complex9 = complex8.I.conjugate();
      Complex complex10 = Complex.valueOf(2.0, 2.0);
      Complex complex11 = complex1.cosh();
      Complex complex12 = complex11.multiply(complex0);
      Complex complex13 = complex4.tan();
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex13.INF.multiply(complex14);
      boolean boolean0 = complex11.isNaN();
      Complex complex16 = complex4.pow(complex10);
      boolean boolean1 = complex12.isNaN();
      Complex complex17 = complex8.I.acos();
      Complex complex18 = complex17.I.acos();
      Complex complex19 = complex4.log();
      Complex complex20 = complex1.divide(0.0);
      Complex complex21 = complex20.reciprocal();
      Complex complex22 = complex12.reciprocal();
      ComplexField complexField0 = complex14.getField();
      Complex complex23 = complex11.add(complex19);
      Complex complex24 = complex5.sinh();
      Complex complex25 = complex0.conjugate();
      Complex complex26 = complex25.ZERO.multiply(1);
      Complex complex27 = complex9.cos();
      Complex complex28 = complex9.acos();
      Complex complex29 = complex28.NaN.sin();
      boolean boolean2 = complex12.equals(complex7);
  }
}
