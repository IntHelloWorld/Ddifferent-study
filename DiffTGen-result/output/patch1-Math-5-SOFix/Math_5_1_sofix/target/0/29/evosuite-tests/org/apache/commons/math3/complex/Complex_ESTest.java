/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 08:31:18 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2350.6181084621);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.ONE.subtract(Double.NaN);
      Complex complex4 = complex3.NaN.log();
      Complex complex5 = complex1.sinh();
      double double0 = 497.85611;
      Complex complex6 = complex5.INF.subtract(497.85611);
      Complex complex7 = complex6.ZERO.negate();
      try { 
        complex1.ONE.nthRoot((-136));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -136
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 0.5086748600006104;
      Complex complex0 = Complex.valueOf(0.5086748600006104);
      try { 
        complex0.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-4.4200075770425176E-8));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.tanh();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.I.reciprocal();
      Complex complex7 = complex5.atan();
      boolean boolean0 = complex1.isNaN();
      Complex complex8 = complex5.divide(complex2);
      Complex complex9 = complex8.negate();
      Complex complex10 = complex8.ZERO.exp();
      List<Complex> list0 = complex2.nthRoot(3181);
      // Undeclared exception!
      complex1.ONE.nthRoot(3181);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 5459.9701);
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.INF.add(complex1);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = complex1.pow(2496.0251533803);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex0.INF.pow(complex1);
      Complex complex6 = complex0.log();
      Complex complex7 = complex2.ZERO.atan();
      String string0 = complex1.toString();
      Complex complex8 = complex5.ONE.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex9 = complex5.multiply((-20.0));
      Complex complex10 = complex5.ONE.pow(complex1);
      Complex complex11 = complex9.I.pow(complex5);
      Complex complex12 = complex3.I.tanh();
      boolean boolean0 = complex9.isNaN();
      Complex complex13 = complex1.divide(complex2);
      Complex complex14 = complex11.ZERO.tanh();
      int int0 = complex9.hashCode();
      Complex complex15 = complex11.sqrt1z();
      Complex complex16 = complex12.NaN.multiply(complex13);
      Complex complex17 = complex11.I.tan();
      Complex complex18 = complex15.ZERO.multiply((-20.0));
      Complex complex19 = complex15.ONE.pow(complex10);
      Complex complex20 = complex3.add(complex2);
      double double0 = complex7.getArgument();
      Complex complex21 = complex4.sinh();
      Complex complex22 = complex21.multiply(complex12);
      Complex complex23 = complex20.I.sin();
      double double1 = complex1.abs();
      Complex complex24 = complex20.exp();
      Complex complex25 = complex24.multiply(7);
      Object object1 = complex4.readResolve();
      int int1 = complex22.hashCode();
      Complex complex26 = complex7.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.INF.multiply(complex0);
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = complex1.divide(0.0);
      Complex complex6 = complex5.ONE.add(0.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex5.ZERO.divide(1225.685031268149);
      Complex complex9 = complex6.subtract(0.1256551444530487);
      Complex complex10 = complex9.subtract((-20.0));
      Complex complex11 = complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(1.0, Double.POSITIVE_INFINITY);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex3.createComplex(1.0, 0.0);
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex1.readResolve();
      boolean boolean1 = complex6.equals(object0);
      Complex complex7 = complex0.exp();
      Complex complex8 = complex6.multiply(complex0);
      Complex complex9 = complex7.I.pow(complex6);
      Complex complex10 = complex7.acos();
      Complex complex11 = complex10.subtract(Double.POSITIVE_INFINITY);
      int int1 = complex8.hashCode();
      Complex complex12 = Complex.valueOf(1949.6592026, 7.526183084319617E-8);
      Complex complex13 = complex11.tan();
      Complex complex14 = complex12.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.divide(complex1);
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex1.I.reciprocal();
      double double0 = complex3.NaN.abs();
      Complex complex4 = complex1.multiply(1);
      Complex complex5 = complex4.ONE.log();
      Complex complex6 = complex0.acos();
      double double1 = complex4.I.getArgument();
      Complex complex7 = complex5.log();
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex3.multiply(Double.NaN);
      Complex complex10 = complex8.I.multiply(1);
      Complex complex11 = complex1.createComplex(329.90380335, 329.90380335);
      Complex complex12 = complex4.divide((double) 1);
      Complex complex13 = complex6.atan();
      double double2 = complex5.getArgument();
      double double3 = complex7.getReal();
      Complex complex14 = complex2.conjugate();
      Complex complex15 = complex13.add(complex12);
      Complex complex16 = complex1.negate();
      Object object0 = complex8.readResolve();
      Complex complex17 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.add(0.0);
      ComplexField complexField0 = complex4.getField();
      boolean boolean0 = complex2.equals(complex4);
      Complex complex5 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-177.313757));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.I.pow(complex0);
      Object object0 = complex1.readResolve();
      Complex complex4 = complex2.ZERO.tanh();
      Complex complex5 = complex4.ONE.add(0.0);
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex6 = complex2.tan();
      Complex complex7 = Complex.valueOf((-177.313757), (-177.313757));
      Complex complex8 = complex6.I.sqrt1z();
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex9.I.cosh();
      Complex complex11 = complex9.NaN.sin();
      List<Complex> list0 = complex3.nthRoot(17);
      Complex complex12 = complex6.atan();
      boolean boolean0 = complex8.isInfinite();
      Complex complex13 = complex2.divide(complex0);
      Complex complex14 = complex7.atan();
      Complex complex15 = complex7.cos();
      Complex complex16 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.206790586971942E-8);
      Complex complex1 = complex0.ONE.log();
      boolean boolean0 = complex0.equals("XP+Kt4-U3RXy/%fLH");
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.ZERO.multiply(complex2);
      Complex complex4 = complex3.INF.createComplex(1.206790586971942E-8, Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.ZERO.cosh();
      Object object0 = complex0.readResolve();
      boolean boolean1 = complex0.equals(object0);
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.multiply((-1850));
      double double0 = complex7.getReal();
      double double1 = complex0.getImaginary();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex8.multiply(0.0);
      Complex complex10 = complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(1931.363825386948);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex1.I.subtract(1931.363825386948);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.INF.negate();
      Complex complex6 = complex2.ONE.acos();
      Complex complex7 = complex3.ZERO.negate();
      Complex complex8 = complex7.INF.subtract((-33.67940466503511));
      Complex complex9 = complex0.subtract(1931.363825386948);
      Complex complex10 = complex9.ONE.acos();
      Complex complex11 = complex9.I.conjugate();
      String string0 = complex2.toString();
      Complex complex12 = complex2.pow(1931.363825386948);
      Complex complex13 = complex7.atan();
      Complex complex14 = complex13.divide(complex7);
      Complex complex15 = Complex.ONE;
      Complex complex16 = complex11.divide(complex15);
      Complex complex17 = complex13.asin();
      Complex complex18 = complex10.sin();
      Complex complex19 = complex10.divide((-2358.025386912));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 2.7796303536272215E-86;
      Complex complex0 = Complex.valueOf(2.7796303536272215E-86);
      try { 
        complex0.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.cos();
      List<Complex> list0 = complex2.INF.nthRoot(1);
      Complex complex3 = complex0.I.negate();
      int int0 = complex3.INF.hashCode();
      double double0 = complex2.ZERO.getArgument();
      Complex complex4 = complex1.pow(0.0);
      Complex complex5 = complex4.add((double) 1);
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex1.NaN.asin();
      Complex complex8 = complex7.add(0.0);
      Complex complex9 = complex2.cos();
      Complex complex10 = complex5.I.multiply(214.227474896605);
      Complex complex11 = complex1.reciprocal();
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      Object object0 = complex0.readResolve();
      Complex complex13 = complex6.divide((-1.0235056525096769E156));
      Complex complex14 = complex9.NaN.sin();
      Complex complex15 = complex11.reciprocal();
      Complex complex16 = complex13.divide(complex12);
      Complex complex17 = complex13.exp();
      ComplexField complexField0 = complex10.getField();
      boolean boolean0 = complex2.equals(complex15);
      Complex complex18 = complex0.sinh();
      Complex complex19 = complex6.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(194.7, 20.0);
      Complex complex1 = complex0.I.pow(20.0);
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex0.I.sin();
      Complex complex4 = complex0.ZERO.divide(complex3);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex0.ZERO.negate();
      Complex complex7 = complex6.ZERO.divide(complex2);
      Complex complex8 = Complex.valueOf(20.0, 194.7);
      List<Complex> list0 = complex8.ZERO.nthRoot(1370);
      Complex complex9 = complex5.NaN.divide(complex8);
      Complex complex10 = complex5.add(0.0);
      Complex complex11 = complex10.asin();
      Complex complex12 = complex11.ONE.cosh();
      Object object0 = complex11.NaN.readResolve();
      boolean boolean0 = complex11.isNaN();
      Complex complex13 = complex8.reciprocal();
      Complex complex14 = complex8.sinh();
      Complex complex15 = complex9.createComplex((-626.7586), (-3061.2));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex2.ONE.subtract(20.0);
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex4.ONE.subtract((double) 1344);
      Object object0 = complex0.readResolve();
      Complex complex6 = complex4.NaN.multiply(1344);
      Complex complex7 = complex0.NaN.cosh();
      Complex complex8 = complex2.sinh();
      Object object1 = complex0.ZERO.readResolve();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex9.ZERO.multiply(297.4841512766333);
      Complex complex11 = complex9.log();
      Complex complex12 = complex1.cosh();
      Complex complex13 = complex2.ZERO.negate();
      Complex complex14 = complex13.I.divide((-37.470731712467));
      Complex complex15 = complex14.INF.reciprocal();
      Complex complex16 = complex2.sinh();
      Complex complex17 = Complex.valueOf((-3589.1425));
      Complex complex18 = complex17.sqrt();
      Complex complex19 = complex2.subtract(297.4841512766333);
      Complex complex20 = complex12.atan();
      Complex complex21 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex22 = complex2.cosh();
      Complex complex23 = complex3.add(complex19);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-298.7173943558545));
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(1172.1555312, (-2371.38537));
      double double0 = complex2.ZERO.getArgument();
      Complex complex3 = Complex.valueOf((-2371.38537), (-298.7173943558545));
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex1.ZERO.atan();
      Object object0 = complex4.readResolve();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.ONE.pow(Double.NaN);
      ComplexField complexField0 = complex6.ONE.getField();
      double double1 = complex0.abs();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex1.sqrt();
      boolean boolean0 = complex1.isInfinite();
      Complex complex10 = Complex.valueOf(298.7173943558545);
      Complex complex11 = complex10.NaN.multiply(complex9);
      Complex complex12 = complex10.add(complex8);
      Complex complex13 = complex6.tan();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.ZERO.add(Double.NaN);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex2.ONE.createComplex((-2734.08947553284), (-2734.08947553284));
      Complex complex5 = complex2.I.tanh();
      Complex complex6 = complex2.I.tanh();
      double double0 = complex1.ZERO.getArgument();
      Complex complex7 = complex4.ONE.exp();
      Complex complex8 = complex6.ONE.pow((-2734.08947553284));
      Complex complex9 = complex0.ZERO.asin();
      ComplexField complexField0 = complex9.NaN.getField();
      double double1 = complex6.INF.getArgument();
      double double2 = complex1.abs();
      Complex complex10 = complex1.multiply(1);
      double double3 = complex1.getImaginary();
      int int0 = complex6.hashCode();
      Complex complex11 = complex10.NaN.cosh();
      Complex complex12 = complex4.tan();
      Complex complex13 = complex10.add(complex4);
      Complex complex14 = complex12.log();
      Complex complex15 = complex1.I.createComplex((-2324.2), (-2734.08947553284));
      Complex complex16 = complex12.sqrt1z();
      Complex complex17 = complex9.tanh();
      Complex complex18 = complex10.multiply(complex16);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4361.03));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.pow((-4361.03));
      ComplexField complexField0 = complex1.getField();
      boolean boolean0 = complex1.isNaN();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.pow(complex1);
      int int0 = complex4.INF.hashCode();
      Complex complex5 = complex1.ZERO.subtract((-4361.03));
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex3.log();
      Complex complex8 = complex6.exp();
      Complex complex9 = complex8.NaN.pow((-374.4491144558056));
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex6.asin();
      Complex complex12 = complex3.divide(complex1);
      String string0 = complex11.I.toString();
      boolean boolean1 = complex12.isInfinite();
      Complex complex13 = complex12.divide(complex11);
      double double0 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-1.1914734393460718E-8), (-785.11877084));
      Complex complex1 = complex0.ONE.sin();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ZERO.divide(3940.141484303109);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex3.NaN.pow(complex1);
      Complex complex6 = complex1.ONE.pow((-5844.926082574588));
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex0.divide(complex3);
      Complex complex9 = Complex.valueOf(3940.141484303109);
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex0.equals(complex4);
      Complex complex10 = complex9.reciprocal();
      ComplexField complexField0 = complex7.getField();
      Complex complex11 = complex7.asin();
      Complex complex12 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex3.pow((-1.0));
      Complex complex7 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2949.73, 1105.35461405);
      Complex complex1 = Complex.valueOf(1105.35461405);
      Complex complex2 = complex0.multiply(2329);
      double double0 = complex1.getArgument();
      Complex complex3 = complex0.negate();
      Object object0 = complex3.NaN.readResolve();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = complex1.atan();
      Complex complex7 = complex6.ONE.tanh();
      Complex complex8 = Complex.valueOf(2949.73);
      Complex complex9 = complex1.INF.tan();
      double double1 = complex9.NaN.abs();
      Complex complex10 = complex5.ZERO.divide(complex1);
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      Complex complex12 = complex11.I.log();
      Complex complex13 = complex5.ZERO.subtract(0.0);
      Complex complex14 = complex5.sinh();
      Complex complex15 = complex14.acos();
      double double2 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-742.189683818), (-373.8728));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = Complex.valueOf((-742.189683818), 2.008254051208496);
      Complex complex4 = complex0.ZERO.pow(complex3);
      Complex complex5 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.add(0.0);
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.ONE.add(complex1);
      int int0 = complex2.hashCode();
      Complex complex4 = complex2.tanh();
      int int1 = complex4.ONE.hashCode();
      double double0 = complex1.ZERO.abs();
      Object object0 = complex0.INF.readResolve();
      double double1 = complex0.getImaginary();
      double double2 = complex0.getImaginary();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.INF.multiply(0);
      double double3 = complex5.abs();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex7.ONE.multiply(complex2);
      double double4 = complex5.getReal();
      Complex complex10 = Complex.valueOf(0.0, Double.NaN);
      double double5 = complex8.abs();
      double double6 = complex6.getArgument();
      Complex complex11 = complex7.conjugate();
      Complex complex12 = complex6.reciprocal();
      Complex complex13 = complex7.divide(complex6);
      try { 
        complex13.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2006.86, 2006.86);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.I.cos();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex0.INF.add((-1151.73));
      Complex complex4 = complex1.NaN.add(0.7853981633974483);
      Complex complex5 = Complex.valueOf((-4258.34329342));
      Complex complex6 = complex4.ONE.createComplex((-4258.34329342), (-4258.34329342));
      Complex complex7 = complex6.INF.reciprocal();
      Complex complex8 = complex1.sinh();
      ComplexField complexField1 = complex8.ONE.getField();
      Complex complex9 = complex8.ONE.exp();
      Complex complex10 = complex1.sqrt();
      double double1 = complex10.ZERO.getArgument();
      Complex complex11 = complex0.exp();
      Complex complex12 = complex9.divide((-4258.34329342));
      double double2 = complex9.ZERO.getArgument();
      Complex complex13 = complex8.NaN.pow(0.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex14 = complex9.add((-4258.34329342));
      Complex complex15 = complex0.asin();
      Complex complex16 = complex15.ZERO.tanh();
      Object object0 = complex16.ONE.readResolve();
      Complex complex17 = complex6.cosh();
      Complex complex18 = complex17.I.asin();
      Complex complex19 = complex7.tan();
      List<Complex> list0 = complex2.nthRoot(37);
      int int0 = complex11.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1186.463240369191));
      Complex complex1 = complex0.ZERO.divide((-1186.463240369191));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.add((-1186.463240369191));
      Complex complex4 = complex1.ZERO.conjugate();
      String string0 = complex1.ZERO.toString();
      Complex complex5 = complex3.add(0.0);
      Complex complex6 = complex1.conjugate();
      Complex complex7 = Complex.valueOf((-4938.50288037), 1448.6063);
      Complex complex8 = complex5.reciprocal();
      int int0 = complex6.hashCode();
      int int1 = complex5.hashCode();
      Complex complex9 = complex5.sin();
      Complex complex10 = complex9.I.reciprocal();
      ComplexField complexField0 = complex1.getField();
      Complex complex11 = complex2.subtract(complex5);
      Complex complex12 = complex1.add(0.0);
      Complex complex13 = complex1.add(1448.6063);
      int int2 = complex9.hashCode();
      Complex complex14 = complex7.multiply(2773);
      Complex complex15 = Complex.valueOf(1448.6063, 1.7914185523986816);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cosh();
      int int0 = complex0.INF.hashCode();
      int int1 = 0;
      try { 
        complex0.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ONE.add(complex0);
      int int0 = complex1.hashCode();
      Complex complex3 = complex1.tanh();
      int int1 = complex3.ONE.hashCode();
      double double0 = complex0.ZERO.abs();
      Object object0 = complex0.INF.readResolve();
      double double1 = complex0.getImaginary();
      double double2 = complex0.getImaginary();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.INF.multiply(0);
      double double3 = complex4.abs();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex6.ONE.multiply(complex1);
      double double4 = complex4.getReal();
      Complex complex9 = Complex.valueOf(0.0, Double.NaN);
      double double5 = complex7.abs();
      double double6 = complex5.getArgument();
      Complex complex10 = complex6.conjugate();
      Complex complex11 = complex5.reciprocal();
      Complex complex12 = complex6.divide(complex5);
      try { 
        complex12.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.I.cosh();
      Complex complex5 = complex0.tan();
      String string0 = complex5.ZERO.toString();
      double double0 = complex5.ONE.abs();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = Complex.valueOf(0.0);
      double double1 = complex8.ZERO.getArgument();
      Complex complex9 = complex0.ZERO.conjugate();
      int int0 = complex2.hashCode();
      double double2 = complex8.getReal();
      Complex complex10 = complex8.multiply(0.0);
      Complex complex11 = complex10.exp();
      Complex complex12 = complex3.tanh();
      Complex complex13 = complex2.multiply(complex7);
      double double3 = complex11.abs();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.add((-1336.2012));
      Complex complex3 = complex1.reciprocal();
      double double0 = complex3.ZERO.getArgument();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex0.I.sinh();
      List<Complex> list0 = complex5.I.nthRoot(2777);
      double double1 = complex1.getReal();
      Complex complex6 = complex0.log();
      double double2 = complex2.I.abs();
      Object object0 = complex4.readResolve();
      Complex complex7 = complex2.INF.cosh();
      Complex complex8 = complex4.ZERO.conjugate();
      Complex complex9 = complex8.ONE.log();
      Complex complex10 = new Complex((-1336.2012), (-1996.328));
      Complex complex11 = complex10.ZERO.multiply((-1336.2012));
      Complex complex12 = complex0.ONE.atan();
      Complex complex13 = complex12.ZERO.divide(complex0);
      Complex complex14 = Complex.valueOf(0.0);
      Complex complex15 = complex4.pow(complex10);
      Complex complex16 = complex2.subtract(complex10);
      ComplexField complexField0 = complex16.ZERO.getField();
      Complex complex17 = complex3.log();
      Complex complex18 = new Complex(0.0);
      Complex complex19 = complex12.pow(complex18);
      boolean boolean0 = complex14.isNaN();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 932.93);
      Complex complex1 = complex0.sinh();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.valueOf(828.293699, 0.0);
      Object object0 = complex0.NaN.readResolve();
      Complex complex4 = Complex.valueOf(828.293699, (-624.7223465829));
      String string0 = complex2.toString();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.I.subtract(844.3);
      Object object1 = complex2.readResolve();
      boolean boolean0 = complex5.equals(complex4);
      double double0 = complex1.getArgument();
      Complex complex7 = complex3.createComplex(828.293699, Double.NaN);
      boolean boolean1 = complex4.equals("(NaN, NaN)");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.tanh();
      Complex complex8 = Complex.valueOf((-2779.9), (-1.0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.subtract(0.0);
      Complex complex5 = complex4.NaN.multiply(0.0);
      Complex complex6 = complex4.I.reciprocal();
      Complex complex7 = complex3.ONE.multiply(complex0);
      Complex complex8 = complex7.ZERO.sinh();
      double double0 = complex0.NaN.getArgument();
      Complex complex9 = complex0.reciprocal();
      double double1 = complex9.getReal();
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = complex3.pow(0.0);
      boolean boolean0 = complex3.isInfinite();
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex11.pow(complex6);
      Complex complex14 = complex13.conjugate();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(773.488662705, 773.488662705);
      double double0 = complex0.getImaginary();
      Complex complex1 = Complex.valueOf(773.488662705);
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.NaN.subtract(complex1);
      int int0 = complex0.ZERO.hashCode();
      String string0 = complex0.toString();
      int int1 = complex2.hashCode();
      Complex complex5 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(482.6837128, 482.6837128);
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(482.6837128, 482.6837128);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.add(0.0);
      double double0 = complex4.getArgument();
      Complex complex5 = complex1.sqrt();
      Object object0 = complex5.readResolve();
      Complex complex6 = complex4.ZERO.add(0.7853981633974483);
      double double1 = complex0.getReal();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex7.INF.sin();
      Complex complex9 = complex8.NaN.acos();
      try { 
        complex9.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.I.divide(complex1);
      Complex complex6 = complex0.createComplex(3483.8914, Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.I.pow(0.0);
      Complex complex8 = complex6.multiply(complex1);
      Complex complex9 = complex7.I.conjugate();
      Complex complex10 = complex0.NaN.sqrt1z();
      Complex complex11 = complex10.NaN.exp();
      double double0 = complex11.getArgument();
      Complex complex12 = complex1.ONE.subtract(complex10);
      Complex complex13 = complex11.conjugate();
      Complex complex14 = complex8.pow(9.755392680573412E-9);
      Complex complex15 = complex0.multiply(complex7);
      Complex complex16 = complex0.acos();
      boolean boolean0 = complex4.equals("Z");
      Complex complex17 = complex13.asin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-921.234444));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-4143.813566));
      Complex complex1 = new Complex((-4143.813566));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.INF.multiply((-2387));
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex3.ZERO.add(1106.625);
      Object object0 = complex6.NaN.readResolve();
      String string0 = complex2.toString();
      Complex complex7 = complex4.pow(complex2);
      Complex complex8 = Complex.valueOf(924.1179099646503, (-4143.813566));
      double double0 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.6471487337453832E-9), (-1.6471487337453832E-9));
      Complex complex1 = complex0.tan();
      int int0 = (-584);
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.add((-128.13319816773));
      try { 
        complex0.I.nthRoot((-584));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -584
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex0.INF.sqrt();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex5.INF.cosh();
      Complex complex9 = complex5.ZERO.sin();
      String string0 = complex0.toString();
      Complex complex10 = complex1.multiply((-2914.3986501314484));
      ComplexField complexField0 = complex10.ZERO.getField();
      Complex complex11 = complex0.asin();
      ComplexField complexField1 = complex11.ONE.getField();
      Complex complex12 = complex0.sinh();
      Complex complex13 = complex11.asin();
      double double0 = complex1.getReal();
      Complex complex14 = complex13.createComplex((-2914.3986501314484), (-2914.3986501314484));
      int int0 = complex13.hashCode();
      Complex complex15 = complex1.negate();
      double double1 = complex15.getImaginary();
      Complex complex16 = complex14.log();
      Complex complex17 = complex14.atan();
      Complex complex18 = complex12.log();
      Complex complex19 = complex3.acos();
      Complex complex20 = complex19.NaN.add(0.0);
      Complex complex21 = complex15.negate();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2217.03736);
      List<Complex> list0 = complex0.INF.nthRoot(988);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.pow((-20.0));
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = Complex.valueOf(216.2540296);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.I.atan();
      double double0 = complex4.getArgument();
      Complex complex7 = complex4.asin();
      Complex complex8 = complex7.I.tan();
      Complex complex9 = complex4.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.NaN.add(7.145787619369324E129);
      ComplexField complexField0 = complex4.INF.getField();
      double double0 = complex1.ZERO.getArgument();
      Complex complex5 = complex4.ZERO.exp();
      double double1 = complex0.NaN.getArgument();
      Complex complex6 = complex0.multiply(1);
      Object object0 = complex0.ONE.readResolve();
      Complex complex7 = complex0.createComplex(3.845535085273936E-242, 110.601754);
      Complex complex8 = complex2.cos();
      Complex complex9 = complex8.ONE.tanh();
      Complex complex10 = complex1.divide(3.845535085273936E-242);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ZERO.add((-339.3654659));
      Complex complex4 = Complex.valueOf(1172.28);
      Complex complex5 = complex0.NaN.subtract((-339.3654659));
      Object object0 = complex3.I.readResolve();
      int int0 = complex0.ZERO.hashCode();
      int int1 = complex1.hashCode();
      int int2 = complex1.INF.hashCode();
      Complex complex6 = complex1.negate();
      Complex complex7 = Complex.valueOf((-339.3654659));
      Complex complex8 = complex6.NaN.reciprocal();
      Complex complex9 = Complex.valueOf((-2966.42732));
      Complex complex10 = complex9.I.pow(complex1);
      Complex complex11 = complex0.add(Double.NaN);
      Complex complex12 = complex6.add(complex8);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = Complex.valueOf(2.0);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.I.pow(1661.26518657043);
      Complex complex4 = Complex.valueOf((-2082.878409));
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex1.getImaginary();
      Complex complex5 = complex3.I.atan();
      boolean boolean1 = complex1.isNaN();
      boolean boolean2 = complex1.isInfinite();
      Complex complex6 = complex3.sin();
      Complex complex7 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-106.154865634131), (-106.154865634131));
      double double0 = complex0.getReal();
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.ONE.divide(complex2);
      Complex complex4 = complex0.INF.multiply((-106.154865634131));
      Complex complex5 = complex3.ZERO.sinh();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex3.divide(complex2);
      double double1 = complex1.getReal();
      Complex complex9 = complex6.subtract(complex7);
      boolean boolean0 = complex1.isInfinite();
      Complex complex10 = complex8.multiply((-2247.089794141453));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(315.373989);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.NaN.add(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.INF.tanh();
      Complex complex4 = complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.pow(44.36623272941255);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex3.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract((-820.0));
      Complex complex2 = Complex.valueOf(6.283185307179586);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.ONE.add((-820.0));
      double double0 = complex0.abs();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex4.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.pow((-6.132639063569726E-8));
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.ONE.createComplex(1.0, (-6.132639063569726E-8));
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex3.NaN.sinh();
      Complex complex6 = complex5.I.pow(complex3);
      Complex complex7 = complex3.INF.divide((-6.132639063569726E-8));
      boolean boolean0 = complex1.equals(complex2);
      Complex complex8 = complex1.multiply(0);
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex0.pow((double) 0);
      Complex complex11 = complex9.acos();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-6.999215748398631E-8));
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.subtract((-6.999215748398631E-8));
      Complex complex4 = Complex.valueOf(0.0, 2906.0117);
      Complex complex5 = complex0.multiply(complex4);
      ComplexField complexField0 = complex4.getField();
      double double0 = complex0.getImaginary();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex6.pow(complex5);
      Complex complex8 = complex7.exp();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.tan();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex3.ONE.divide(0.0);
      double double0 = complex2.ZERO.getArgument();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex1.ONE.pow(0.0);
      Complex complex7 = complex1.I.acos();
      Complex complex8 = complex5.INF.createComplex((-1.0), 0.5472630262374878);
      Complex complex9 = complex8.INF.pow(complex7);
      Complex complex10 = complex5.sin();
      Complex complex11 = complex6.sqrt();
      Complex complex12 = complex6.sin();
      Complex complex13 = complex12.pow(complex8);
      Complex complex14 = complex11.sqrt();
      Complex complex15 = complex4.negate();
      Complex complex16 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.718446464587963E12), (-1.718446464587963E12));
      Complex complex1 = complex0.createComplex((-1.718446464587963E12), (-1.718446464587963E12));
      Complex complex2 = complex0.log();
      double double0 = complex0.NaN.abs();
      Complex complex3 = complex0.ONE.sqrt();
      Complex complex4 = complex0.createComplex((-1853.7828573685038), (-1.718446464587963E12));
      Complex complex5 = complex4.NaN.subtract(complex2);
      Complex complex6 = complex2.INF.pow(4581.92687823);
      double double1 = complex4.getImaginary();
      Complex complex7 = complex1.pow(complex2);
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-387.13366767819593));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.subtract(complex1);
      double double0 = complex0.abs();
      Complex complex4 = complex0.divide(56.568146676914);
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex5.ONE.pow(complex3);
      Complex complex7 = complex4.ZERO.createComplex(2.0, (-1167.191363029));
      Complex complex8 = complex7.ZERO.negate();
      Complex complex9 = complex1.add(387.13366767819593);
      Complex complex10 = complex4.tan();
      Object object0 = complex10.ZERO.readResolve();
      Complex complex11 = complex4.cosh();
      Complex complex12 = complex7.sin();
      Complex complex13 = complex2.asin();
      Complex complex14 = complex7.multiply(0);
      Complex complex15 = complex0.pow((double) 0);
      Complex complex16 = complex15.ONE.log();
      Complex complex17 = complex13.pow((-0.05417713522911072));
      Complex complex18 = complex0.sqrt1z();
      Complex complex19 = complex15.atan();
      Complex complex20 = complex19.NaN.sqrt();
      Complex complex21 = complex9.divide(2.0);
      Complex complex22 = complex11.negate();
      Complex complex23 = complex2.acos();
      Complex complex24 = complex3.multiply(complex9);
      Complex complex25 = complex13.acos();
      Complex complex26 = complex4.subtract(complex22);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply(4664);
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = new Complex(155.88827903, 1.511427628805191E111);
      Object object0 = complex1.INF.readResolve();
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex1.pow(complex4);
      Complex complex7 = complex2.tan();
      double double0 = complex4.getReal();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex2.subtract(complex0);
      int int1 = complex1.ZERO.hashCode();
      Complex complex5 = complex4.ONE.sqrt();
      ComplexField complexField0 = complex3.getField();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.multiply((-1768.793));
      Complex complex3 = complex0.multiply(1440);
      double double0 = complex0.getReal();
      Complex complex4 = complex2.asin();
      double double1 = complex2.getImaginary();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex3.multiply(1440);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-451.28991671), 1.25);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Object object0 = complex2.ONE.readResolve();
      Complex complex3 = complex0.INF.subtract(20.0);
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex3.sinh();
      double double0 = complex0.getImaginary();
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.valueOf(4031.521400269482);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-3869.3290077112056), (-3869.3290077112056));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = Complex.valueOf(1.490218341008089E-193);
      Complex complex5 = complex2.log();
      boolean boolean0 = complex5.isInfinite();
      Complex complex6 = complex5.reciprocal();
      Object object0 = complex6.NaN.readResolve();
      Object object1 = complex6.readResolve();
      double double0 = complex2.getImaginary();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = Complex.valueOf(1987.158, 0.0);
      Complex complex4 = complex1.divide((-509.54134670182));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(579.11639);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex1.subtract(complex0);
      int int0 = complex1.hashCode();
      Complex complex4 = complex0.multiply(579.11639);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-848.0), 6.283185307179586);
      Complex complex1 = complex0.divide(1245.2949);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply((-1346.888051263833));
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = complex4.INF.atan();
      Complex complex6 = complex1.divide(Double.NaN);
      boolean boolean0 = complex3.isInfinite();
      Complex complex7 = Complex.valueOf(Double.NaN);
      double double0 = complex7.I.getArgument();
      Object object0 = complex2.readResolve();
      Complex complex8 = complex6.sqrt1z();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 1820.8662969994);
      Complex complex1 = complex0.ZERO.divide(1820.8662969994);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.ONE.conjugate();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.ONE.multiply(complex1);
      Complex complex6 = complex1.pow(1820.8662969994);
      List<Complex> list0 = complex6.ONE.nthRoot(7);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex7.multiply(complex6);
      Complex complex10 = complex2.exp();
      Complex complex11 = complex6.sin();
      List<Complex> list1 = complex11.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      String string0 = complex0.toString();
      Complex complex1 = new Complex(Double.NaN, 0.0);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.divide(Double.NaN);
      String string1 = complex3.toString();
      Complex complex4 = complex0.NaN.sqrt();
      Complex complex5 = complex3.multiply(0.0);
      Complex complex6 = complex3.multiply(Double.NaN);
      int int0 = complex6.hashCode();
      double double0 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex0.sin();
      Object object0 = new Object();
      boolean boolean1 = complex1.equals(object0);
      Complex complex3 = complex0.reciprocal();
      try { 
        complex2.nthRoot((-56));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -56
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.ZERO.cosh();
      Complex complex4 = complex2.INF.divide(complex0);
      List<Complex> list0 = complex4.ONE.nthRoot(2126);
      Complex complex5 = complex1.multiply(864);
      Complex complex6 = complex0.multiply(864);
      Complex complex7 = complex6.NaN.add((double) 2126);
      Complex complex8 = complex0.exp();
      Complex complex9 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.INF.hashCode();
      Complex complex1 = new Complex(1936.6274381, 1936.6274381);
      Complex complex2 = complex0.NaN.pow(complex1);
      double double0 = complex2.INF.getArgument();
      Complex complex3 = complex0.I.cos();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Object object0 = complex3.NaN.readResolve();
      Complex complex5 = complex3.I.cosh();
      Complex complex6 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.add(1987.158);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.negate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.multiply(349.6971094446505);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(20.0);
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex2.NaN.sqrt1z();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.NaN.divide(complex1);
      double double0 = complex5.abs();
      Complex complex7 = complex5.I.cosh();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex8 = complex1.pow(4.47213595499958);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-1.7793890245755405E-8));
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      double double0 = (-1.0);
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex2.I.subtract(6.283185307179586);
      List<Complex> list0 = complex2.nthRoot(1201);
      Complex complex4 = complex2.subtract(complex0);
      ComplexField complexField0 = complex1.getField();
      try { 
        complex1.nthRoot((-1099));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,099
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(1.1544236628121676E-8);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.tanh();
      List<Complex> list0 = complex1.nthRoot(168);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1058.4542959847197), (-1434.0714776));
      Complex complex1 = Complex.ZERO;
      List<Complex> list0 = complex1.I.nthRoot(850);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Object object0 = complex2.readResolve();
      Complex complex3 = Complex.valueOf((double) 850, (-1.0));
      Complex complex4 = complex0.sin();
      List<Complex> list1 = complex2.nthRoot(1494);
      Complex complex5 = complex4.divide((-1058.4542959847197));
      Complex complex6 = Complex.valueOf(512.36031);
      Complex complex7 = complex6.ZERO.atan();
      Complex complex8 = complex7.I.tan();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex9.divide(complex2);
      Complex complex11 = complex0.tanh();
      double double0 = complex11.abs();
      Complex complex12 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.log();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.sqrt();
      Object object0 = complex0.ONE.readResolve();
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = complex0.I.createComplex((-3753.058060440272), (-3753.058060440272));
      ComplexField complexField0 = complex1.ONE.getField();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.add(0.0);
      double double0 = complex0.getArgument();
      double double1 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(20.0, 0.0);
      Complex complex3 = complex1.sin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex2.ONE.acos();
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex2.ZERO.log();
      Complex complex7 = complex2.asin();
      int int0 = complex7.ZERO.hashCode();
      Complex complex8 = complex7.NaN.log();
      Complex complex9 = complex8.ZERO.sinh();
      double double0 = complex9.NaN.abs();
      Complex complex10 = complex2.pow(1.2616519927978516);
      Complex complex11 = complex10.NaN.createComplex(0.0, 0.0);
      Complex complex12 = complex10.asin();
      String string0 = complex1.toString();
      Complex complex13 = Complex.valueOf(1.2616519927978516, 0.0);
      boolean boolean1 = complex0.equals(complex13);
      Complex complex14 = complex0.conjugate();
      Complex complex15 = complex13.pow(0.0);
      int int1 = complex2.hashCode();
      Complex complex16 = Complex.valueOf(0.0, (-370.86));
      Complex complex17 = complex2.acos();
      Complex complex18 = complex12.log();
      double double1 = complex8.getReal();
      boolean boolean2 = complex1.isNaN();
      boolean boolean3 = complex1.isInfinite();
      Complex complex19 = complex10.tan();
      Complex complex20 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-930.665496131));
      Complex complex1 = complex0.ZERO.add((-930.665496131));
      try { 
        complex0.ZERO.nthRoot((-685));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -685
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.add((-2419.627940394973));
      Complex complex2 = complex1.ZERO.pow((-5546.652653422814));
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex3.ZERO.sqrt1z();
      Complex complex6 = complex3.log();
      Complex complex7 = complex6.I.multiply(0.0);
      Complex complex8 = complex7.NaN.exp();
      Complex complex9 = Complex.valueOf(1455.0, (-2419.627940394973));
      Complex complex10 = complex9.ZERO.cosh();
      Complex complex11 = complex5.asin();
      Complex complex12 = complex11.NaN.subtract(complex0);
      Complex complex13 = complex11.createComplex((-2419.627940394973), (-2419.627940394973));
      List<Complex> list0 = complex12.INF.nthRoot(1433);
      Complex complex14 = complex13.ONE.cos();
      Complex complex15 = complex3.log();
      Complex complex16 = complex11.divide(complex2);
      Complex complex17 = complex12.cosh();
      List<Complex> list1 = complex17.NaN.nthRoot(1);
      Complex complex18 = complex11.sinh();
      Complex complex19 = complex18.ONE.tan();
      Complex complex20 = complex12.add(0.0);
      Complex complex21 = complex15.tanh();
      Complex complex22 = complex6.conjugate();
      Complex complex23 = complex18.subtract(263.0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-332.069));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.INF.subtract(complex2);
      Complex complex4 = complex3.ZERO.add(complex2);
      Complex complex5 = Complex.valueOf((double) 1);
      Complex complex6 = complex4.ZERO.divide((double) 1);
      Complex complex7 = complex0.I.multiply(1);
      int int0 = complex7.ZERO.hashCode();
      Complex complex8 = complex2.INF.acos();
      Complex complex9 = complex2.sqrt();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex10.log();
      Complex complex12 = Complex.valueOf(1151.4279413, (-332.069));
      Complex complex13 = Complex.INF;
      Complex complex14 = complex10.I.multiply(complex13);
      double double0 = complex14.I.getArgument();
      Complex complex15 = complex2.sqrt1z();
      Complex complex16 = complex13.sqrt();
      Complex complex17 = complex15.ZERO.createComplex(1, (-807.63208008));
      Complex complex18 = complex1.ZERO.add((-807.63208008));
      Complex complex19 = complex18.sin();
      Complex complex20 = complex7.reciprocal();
      ComplexField complexField0 = complex20.getField();
      Complex complex21 = complex1.divide(complex15);
      Complex complex22 = complex21.ONE.subtract(469.0);
      Complex complex23 = complex21.negate();
      double double1 = complex7.abs();
      Complex complex24 = complex1.createComplex(1151.4279413, 0.0);
      Complex complex25 = complex24.I.atan();
      int int1 = complex16.hashCode();
      Object object0 = complex20.readResolve();
      Complex complex26 = complex7.tan();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.add(complex1);
      int int0 = complex3.hashCode();
      double double0 = complex1.abs();
      Complex complex4 = complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.ZERO.tanh();
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex2.INF.divide(complex1);
      Object object0 = complex7.NaN.readResolve();
      Complex complex8 = complex2.I.reciprocal();
      Complex complex9 = complex2.ZERO.pow(complex0);
      Complex complex10 = complex0.subtract(complex2);
      Complex complex11 = complex10.ZERO.sinh();
      Complex complex12 = complex2.cos();
      Complex complex13 = complex0.sqrt1z();
      Complex complex14 = complex13.multiply(1);
      Complex complex15 = complex14.NaN.add(complex11);
      double double1 = complex9.getImaginary();
      Complex complex16 = complex9.createComplex((-1061.13705207859), 1);
      Complex complex17 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.divide(0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.pow(complex3);
      int int0 = complex4.hashCode();
      Complex complex5 = complex0.divide(0.0);
      Complex complex6 = complex2.asin();
      Complex complex7 = complex4.add(1.504112720489502);
  }
}
