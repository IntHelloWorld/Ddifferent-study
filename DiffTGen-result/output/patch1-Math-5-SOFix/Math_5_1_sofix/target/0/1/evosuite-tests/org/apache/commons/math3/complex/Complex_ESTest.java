/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 08:20:56 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = complex1.ONE.add(Double.NaN);
      Complex complex3 = complex0.acos();
      double double0 = complex3.getArgument();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.I.multiply((-1.0640473712270007));
      Complex complex8 = Complex.valueOf(2.0, 6.891548506580367);
      ComplexField complexField0 = complex1.getField();
      Complex complex9 = complex0.NaN.sin();
      Complex complex10 = complex2.multiply(2260.8531820268163);
      Complex complex11 = Complex.valueOf(2.0986040271964157E-4);
      Complex complex12 = complex11.NaN.tanh();
      List<Complex> list0 = complex10.INF.nthRoot(1);
      Complex complex13 = complex7.atan();
      Complex complex14 = complex13.ONE.tan();
      Complex complex15 = complex3.add(complex10);
      Complex complex16 = complex3.subtract(2.0);
      Complex complex17 = complex5.asin();
      Complex complex18 = complex11.sqrt();
      Complex complex19 = complex14.log();
      Complex complex20 = complex1.sqrt();
      double double1 = complex16.abs();
      Complex complex21 = complex1.tan();
      Complex complex22 = complex5.createComplex(167.3127652699, (-966.201856309));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-983.923850722316), 2.3414841777613345E-218);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.sqrt();
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex7 = complex2.negate();
      Complex complex8 = complex7.ZERO.atan();
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex7.negate();
      Complex complex11 = complex9.ONE.conjugate();
      Complex complex12 = complex7.sin();
      Complex complex13 = complex11.cos();
      Complex complex14 = complex11.add(0.0);
      Complex complex15 = complex14.tan();
      Object object0 = complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex2.INF.add((-7.81295459930537E-72));
      Complex complex5 = complex1.INF.divide(complex2);
      Complex complex6 = complex5.divide(complex4);
      Complex complex7 = complex2.pow(1639.8321);
      Complex complex8 = complex7.I.pow(complex2);
      Complex complex9 = complex8.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex10 = complex0.I.log();
      Complex complex11 = complex10.log();
      Complex complex12 = complex0.INF.pow(complex1);
      Complex complex13 = complex11.I.divide(complex4);
      Complex complex14 = complex12.INF.cosh();
      Complex complex15 = complex0.cosh();
      double double0 = complex15.abs();
      int int0 = 890228764;
      // Undeclared exception!
      complex3.nthRoot(890228764);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = Complex.valueOf((-2140.9752205942), Double.NaN);
      Complex complex3 = complex2.INF.divide(0.20421552658081055);
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex0.add(complex2);
      Complex complex7 = complex6.I.multiply(Double.NaN);
      Complex complex8 = complex6.I.sinh();
      Complex complex9 = complex8.INF.subtract(complex5);
      Complex complex10 = complex8.INF.reciprocal();
      Complex complex11 = complex10.INF.tanh();
      Complex complex12 = complex2.cosh();
      ComplexField complexField0 = complex1.getField();
      Complex complex13 = complex1.exp();
      Complex complex14 = Complex.valueOf(3813.6402);
      Complex complex15 = complex1.subtract((-2140.9752205942));
      Complex complex16 = complex2.subtract(0.0);
      double double0 = complex0.abs();
      Complex complex17 = complex3.multiply((-2373));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf((-2140.9752205942), Double.NaN);
      Complex complex2 = complex1.INF.divide(0.20421552658081055);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex1.INF.subtract(complex4);
      Complex complex6 = complex1.cosh();
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex0.exp();
      Complex complex8 = Complex.valueOf(3813.6402);
      Complex complex9 = complex0.subtract((-2140.9752205942));
      Complex complex10 = complex1.subtract(0.0);
      double double0 = complex9.abs();
      Complex complex11 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.acos();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.ONE.divide(0.0);
      Complex complex5 = complex0.ONE.negate();
      Complex complex6 = Complex.valueOf((-1339.364669769254));
      String string0 = complex6.toString();
      Complex complex7 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex7);
      Complex complex8 = complex0.NaN.subtract(0.0);
      Complex complex9 = complex6.subtract((-1339.364669769254));
      double double0 = complex4.getReal();
      Complex complex10 = complex8.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.multiply(1);
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.INF.cos();
      double double1 = complex3.getReal();
      Complex complex6 = complex5.ZERO.sin();
      Complex complex7 = complex1.divide(complex0);
      Complex complex8 = complex7.I.log();
      double double2 = complex5.getArgument();
      Complex complex9 = complex8.subtract(Double.POSITIVE_INFINITY);
      Complex complex10 = complex2.add(complex5);
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex11 = complex5.ZERO.multiply(955);
      List<Complex> list1 = complex5.nthRoot(781);
      Complex complex12 = complex1.log();
      Complex complex13 = complex10.sin();
      Complex complex14 = complex13.INF.tanh();
      double double3 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(1.7331720051707087E-70);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.valueOf(0.0, (-1527.41613490003));
      Complex complex5 = complex4.INF.multiply(complex2);
      double double0 = complex1.abs();
      Complex complex6 = complex2.subtract(1.7331720051707087E-70);
      Complex complex7 = complex6.I.acos();
      ComplexField complexField0 = complex7.ONE.getField();
      Complex complex8 = complex1.I.reciprocal();
      Complex complex9 = complex2.NaN.acos();
      Complex complex10 = complex1.subtract(complex3);
      Complex complex11 = complex2.sin();
      Complex complex12 = complex11.ONE.cos();
      ComplexField complexField1 = complex0.INF.getField();
      Complex complex13 = complex0.reciprocal();
      Complex complex14 = complex13.INF.divide(0.0);
      double double1 = complex0.getReal();
      Complex complex15 = complex10.INF.divide((-66.873375934293));
      String string0 = complex15.ZERO.toString();
      Complex complex16 = complex3.ZERO.divide(complex0);
      Complex complex17 = complex10.pow(complex1);
      Complex complex18 = complex17.sqrt();
      Complex complex19 = complex1.pow(1.7331720051707087E-70);
      Complex complex20 = complex11.atan();
      Complex complex21 = complex1.subtract(2.0);
      try { 
        complex0.nthRoot((-475));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -475
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-1587.4549029));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex1.I.divide((-1587.4549029));
      Complex complex5 = complex0.subtract((-4103.48));
      Complex complex6 = complex1.ONE.reciprocal();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex7.INF.cos();
      Complex complex9 = complex7.INF.conjugate();
      Complex complex10 = complex5.sin();
      Complex complex11 = Complex.valueOf((-4103.48), 0.0);
      Complex complex12 = complex10.NaN.subtract(complex3);
      Complex complex13 = complex11.NaN.negate();
      Complex complex14 = complex1.multiply(3292);
      List<Complex> list0 = complex14.INF.nthRoot(3292);
      Complex complex15 = complex4.pow(complex0);
      Complex complex16 = Complex.valueOf(0.0);
      Complex complex17 = complex1.log();
      int int0 = complex4.hashCode();
      Complex complex18 = complex10.divide(783.545343);
      Object object0 = complex10.readResolve();
      Complex complex19 = complex1.negate();
      Complex complex20 = complex11.multiply(339);
      Complex complex21 = complex19.cosh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = Complex.valueOf(0.0);
      int int0 = (-145);
      try { 
        complex0.nthRoot((-145));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -145
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.ONE.divide(complex0);
      double double0 = 827.61678209;
      Complex complex3 = Complex.valueOf(827.61678209, 827.61678209);
      Complex complex4 = complex3.INF.multiply(0);
      Complex complex5 = complex3.ZERO.multiply((-7.500936767542933E167));
      double double1 = complex0.getReal();
      Complex complex6 = Complex.valueOf(983.4, 0.0);
      Complex complex7 = complex6.I.add((-7.500936767542933E167));
      Complex complex8 = complex6.ONE.conjugate();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex9.NaN.sqrt1z();
      Complex complex11 = complex9.atan();
      ComplexField complexField0 = complex4.getField();
      Complex complex12 = complex0.add((double) 0);
      Complex complex13 = complex0.cos();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3802.0));
      Complex complex1 = Complex.valueOf((-3802.0));
      Complex complex2 = complex1.NaN.tanh();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.divide(532.332858712895);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex3.ZERO.subtract((-210.0));
      Complex complex6 = complex3.NaN.sinh();
      Complex complex7 = complex0.atan();
      ComplexField complexField0 = complex3.getField();
      double double1 = complex0.getImaginary();
      Complex complex8 = complex7.add((-3802.0));
      Complex complex9 = complex7.INF.tanh();
      double double2 = complex7.abs();
      boolean boolean0 = complex3.equals(complex8);
      try { 
        complex9.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex((-20.0), (-20.0));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex2.sqrt1z();
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex5.divide(complex1);
      Complex complex8 = Complex.valueOf((-20.0));
      Complex complex9 = complex8.I.pow(3216.2069584168325);
      Object object0 = complex0.ONE.readResolve();
      Complex complex10 = complex2.multiply((-1.0));
      Complex complex11 = complex0.multiply(0);
      String string0 = complex11.I.toString();
      Complex complex12 = complex3.sqrt();
      Complex complex13 = complex0.divide(complex2);
      Complex complex14 = Complex.valueOf((-20.0));
      int int0 = complex7.hashCode();
      Complex complex15 = complex4.multiply(0.0);
      Complex complex16 = complex15.NaN.pow((double) 0);
      Complex complex17 = complex3.add(complex7);
      Complex complex18 = complex8.tanh();
      Object object1 = complex17.readResolve();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1993.3809471136508);
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(1646.600118099341, 1646.600118099341);
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex0.I.sqrt();
      Complex complex5 = complex4.ZERO.pow(0.0);
      double double0 = complex0.abs();
      Complex complex6 = complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex0.subtract(20.0);
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex0.INF.multiply(complex1);
      String string0 = complex0.toString();
      Complex complex4 = complex0.reciprocal();
      List<Complex> list0 = complex4.I.nthRoot(1314);
      Complex complex5 = Complex.valueOf(1675.95975);
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex2.divide(complex1);
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex7.I.conjugate();
      Complex complex10 = complex8.ONE.sin();
      Complex complex11 = complex7.subtract(1675.95975);
      Complex complex12 = complex6.multiply(995);
      Complex complex13 = complex10.divide(20.0);
      Complex complex14 = complex0.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6601.5616135985), (-1438.713743));
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.subtract((-1438.713743));
      Complex complex3 = complex2.ZERO.pow((-1438.713743));
      Complex complex4 = complex2.ONE.cosh();
      Complex complex5 = complex1.INF.asin();
      double double0 = complex3.ZERO.abs();
      ComplexField complexField0 = complex2.getField();
      Complex complex6 = complex1.subtract((-1438.713743));
      Complex complex7 = complex6.INF.conjugate();
      Complex complex8 = complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow((-1004.5823906642));
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex2.INF.multiply(0.0);
      Complex complex4 = complex3.I.multiply(complex0);
      Complex complex5 = complex2.ONE.cos();
      Complex complex6 = complex1.NaN.sqrt1z();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.INF.atan();
      Complex complex9 = complex8.ONE.negate();
      Complex complex10 = complex0.NaN.pow((-2587.2307373999));
      Complex complex11 = complex7.NaN.sin();
      Complex complex12 = complex0.divide(complex7);
      Complex complex13 = complex7.I.divide(complex0);
      Complex complex14 = complex7.INF.createComplex((-2587.2307373999), 91.940255);
      Complex complex15 = complex7.multiply(1);
      Complex complex16 = complex15.sqrt1z();
      double double0 = complex16.ONE.abs();
      Complex complex17 = complex9.multiply((-454));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.createComplex((-1.0), (-1.0));
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex0.I.add(complex1);
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.ONE.divide((-1.0));
      Complex complex7 = complex0.add(complex5);
      Complex complex8 = complex0.sinh();
      ComplexField complexField0 = complex4.getField();
      Complex complex9 = complex7.add(complex8);
      Complex complex10 = complex5.multiply(0);
      Complex complex11 = complex10.ZERO.multiply((-5.3681978363391484E-52));
      Complex complex12 = complex9.negate();
      Complex complex13 = complex8.sqrt1z();
      Complex complex14 = complex12.divide(complex0);
      Complex complex15 = complex12.pow((-4209.58463));
      String string0 = complex9.toString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-2130.3955172998044), (-2130.3955172998044));
      Complex complex1 = Complex.valueOf((-2130.3955172998044));
      Complex complex2 = complex1.ZERO.sinh();
      ComplexField complexField0 = complex2.ZERO.getField();
      String string0 = complex0.ZERO.toString();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex1.acos();
      double double0 = complex3.ONE.abs();
      Complex complex4 = Complex.valueOf(3481.121655964854, (-2130.3955172998044));
      Complex complex5 = complex2.add(1577.0);
      Complex complex6 = complex2.INF.exp();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex5.ONE.atan();
      Complex complex9 = complex4.NaN.asin();
      Complex complex10 = complex4.exp();
      boolean boolean1 = complex0.isNaN();
      Complex complex11 = complex2.subtract(3481.121655964854);
      Complex complex12 = complex3.INF.log();
      Complex complex13 = complex0.negate();
      Complex complex14 = complex11.atan();
      Complex complex15 = complex14.INF.multiply(0.0);
      boolean boolean2 = complex4.equals(complex3);
      Complex complex16 = complex1.acos();
      Complex complex17 = complex11.tan();
      Complex complex18 = complex2.INF.negate();
      Complex complex19 = complex4.cos();
      String string1 = complex0.toString();
      ComplexField complexField1 = complex16.getField();
      Complex complex20 = complex2.subtract(complex9);
      Object object1 = complex15.readResolve();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-2130.3955172998044), (-2130.3955172998044));
      Complex complex1 = Complex.valueOf((-2130.3955172998044));
      Complex complex2 = complex1.ZERO.sinh();
      ComplexField complexField0 = complex2.ZERO.getField();
      String string0 = complex0.ZERO.toString();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex1.acos();
      double double0 = complex3.ONE.abs();
      Complex complex4 = Complex.valueOf(3481.121655964854, (-2130.3955172998044));
      Complex complex5 = complex2.add(1577.0);
      Complex complex6 = complex2.INF.exp();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex4.NaN.asin();
      Complex complex9 = complex4.exp();
      boolean boolean1 = complex0.isNaN();
      Complex complex10 = complex2.subtract(3481.121655964854);
      Complex complex11 = complex3.INF.log();
      Complex complex12 = complex10.atan();
      Complex complex13 = complex12.INF.multiply(0.0);
      boolean boolean2 = complex4.equals(complex3);
      Complex complex14 = complex1.acos();
      Complex complex15 = complex10.tan();
      Complex complex16 = complex2.INF.negate();
      Complex complex17 = complex4.cos();
      String string1 = complex0.toString();
      ComplexField complexField1 = complex14.getField();
      Complex complex18 = complex2.subtract(complex8);
      Object object1 = complex13.readResolve();
      Complex complex19 = complex9.tan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.691814001080034E75);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex2.multiply(17);
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex1.NaN.divide((-459.71230689));
      Complex complex4 = complex0.pow(complex1);
      double double0 = complex4.I.abs();
      Complex complex5 = complex4.ONE.subtract(complex1);
      Complex complex6 = complex4.createComplex(144.0787271, 0.0);
      ComplexField complexField0 = complex6.ZERO.getField();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex8.ONE.multiply(3958);
      Complex complex10 = complex7.add(complex6);
      Complex complex11 = complex6.exp();
      Complex complex12 = complex6.reciprocal();
      double double1 = complex5.getArgument();
      Complex complex13 = complex10.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.ZERO.sqrt();
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex1.multiply(170);
      Complex complex6 = complex2.divide(complex5);
      String string0 = complex6.NaN.toString();
      Complex complex7 = complex6.ONE.pow(complex3);
      Complex complex8 = complex0.divide((double) 170);
      Complex complex9 = complex5.I.acos();
      Complex complex10 = complex8.NaN.add((double) 170);
      Complex complex11 = complex6.sqrt();
      Complex complex12 = Complex.valueOf((double) 170);
      Complex complex13 = complex3.tanh();
      String string1 = complex5.toString();
      Complex complex14 = complex11.pow((-662.9786690602219));
      Complex complex15 = Complex.valueOf((double) 170, 1.9792597720953414E-32);
      List<Complex> list0 = complex4.nthRoot(170);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex0.INF.subtract(Double.NaN);
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex5.cos();
      double double0 = complex6.NaN.abs();
      Complex complex7 = complex5.I.subtract(Double.NaN);
      Complex complex8 = complex1.NaN.pow(complex4);
      double double1 = complex1.getReal();
      int int0 = complex0.hashCode();
      Complex complex9 = complex4.cosh();
      ComplexField complexField0 = complex0.getField();
      Complex complex10 = complex1.atan();
      Complex complex11 = complex10.cosh();
      boolean boolean0 = complex1.isNaN();
      Object object0 = complex4.readResolve();
      Complex complex12 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex13 = complex12.cos();
      Complex complex14 = Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(4275.64793);
      Complex complex1 = complex0.I.acos();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.add((-522.0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.atan();
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = new Complex(897.0, 897.0);
      Complex complex3 = complex0.INF.pow(complex2);
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex5.I.add(complex2);
      Complex complex7 = complex6.INF.add(complex5);
      Complex complex8 = complex4.INF.divide(897.0);
      Complex complex9 = complex0.multiply(2498);
      double double1 = complex0.getReal();
      Complex complex10 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply((-2565.541));
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ZERO.multiply((-2565.541));
      ComplexField complexField1 = complex2.getField();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex6.asin();
      ComplexField complexField2 = complex6.NaN.getField();
      String string0 = complex6.toString();
      Complex complex8 = complex6.I.sqrt1z();
      List<Complex> list0 = complex5.INF.nthRoot(106);
      double double0 = complex0.getImaginary();
      Object object0 = complex7.readResolve();
      boolean boolean0 = complex6.equals(object0);
      Complex complex9 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 6.283185307179586;
      try { 
        complex0.NaN.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-1680.41));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.exp();
      List<Complex> list0 = complex0.nthRoot(555);
      Complex complex4 = complex0.I.sqrt();
      Complex complex5 = complex4.NaN.add(complex2);
      Complex complex6 = complex5.ONE.createComplex(Double.POSITIVE_INFINITY, 208.0);
      Complex complex7 = complex5.NaN.cos();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex2.acos();
      Complex complex10 = complex9.NaN.reciprocal();
      Complex complex11 = complex9.NaN.sqrt();
      Complex complex12 = complex0.ZERO.negate();
      Complex complex13 = complex4.add(118.18979);
      int int0 = complex1.hashCode();
      Complex complex14 = complex4.ZERO.tanh();
      Complex complex15 = complex8.add(complex4);
      Complex complex16 = complex4.divide(complex3);
      double double1 = complex16.getReal();
      Complex complex17 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.NaN.multiply(complex0);
      double double0 = complex0.getImaginary();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex3.ZERO.pow(complex5);
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex3.NaN.pow(576.86285);
      Complex complex9 = complex1.add((-1128.0063475));
      double double1 = complex3.getReal();
      Complex complex10 = complex2.multiply((-1128.0063475));
      Complex complex11 = complex8.asin();
      double double2 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-1488.4189727399694), (-1488.4189727399694));
      double double0 = complex0.INF.abs();
      String string0 = complex0.toString();
      Complex complex1 = complex0.tanh();
      String string1 = complex1.toString();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex1.ZERO.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex4.NaN.negate();
      double double1 = complex3.INF.abs();
      Complex complex7 = complex4.ZERO.negate();
      boolean boolean0 = complex1.isNaN();
      Complex complex8 = complex1.tan();
      double double2 = complex3.INF.getArgument();
      double double3 = complex3.getReal();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = complex6.multiply(complex9);
      Complex complex11 = complex6.add(complex10);
      Complex complex12 = complex8.conjugate();
      Complex complex13 = complex0.conjugate();
      Complex complex14 = complex8.asin();
      Complex complex15 = complex14.divide(0.7853981633974483);
      Complex complex16 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(484.636245566713, 4.125337057189083E-84);
      Complex complex1 = complex0.I.multiply(484.636245566713);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.subtract(0.0);
      String string0 = complex2.ONE.toString();
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex2.divide(complex3);
      Complex complex6 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.I.cosh();
      Complex complex5 = complex3.NaN.tan();
      int int0 = complex2.hashCode();
      Complex complex6 = Complex.valueOf(2.1077440662171152E-207, 2.0);
      Complex complex7 = complex6.I.sin();
      double double0 = complex6.ONE.getArgument();
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex8.atan();
      double double1 = complex10.ZERO.getArgument();
      Complex complex11 = complex8.sinh();
      Complex complex12 = complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.createComplex((-1.0), 2.0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      double double0 = complex0.getReal();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex1.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex1.divide(823.8261571);
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex1.NaN.cosh();
      double double0 = complex2.ZERO.abs();
      boolean boolean1 = complex1.isInfinite();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = Complex.valueOf(823.8261571);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex3.sqrt1z();
      boolean boolean2 = complex1.isInfinite();
      double double1 = complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 3397.46894796);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.NaN.subtract(complex2);
      Complex complex4 = complex3.NaN.createComplex(3397.46894796, (-1.0));
      double double0 = complex4.abs();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex4.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.NaN.multiply(complex2);
      Complex complex4 = complex0.divide(complex2);
      boolean boolean0 = complex1.equals(complex4);
      Complex complex5 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.INF.exp();
      Complex complex6 = Complex.valueOf(0.0, 438.0831);
      Complex complex7 = complex0.log();
      Complex complex8 = complex4.tanh();
      double double0 = complex0.getArgument();
      Complex complex9 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1021.351), (-1021.351));
      String string0 = complex0.ONE.toString();
      double double0 = complex0.getReal();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.INF.add(complex4);
      Complex complex6 = complex4.ZERO.add((-1021.351));
      Complex complex7 = complex6.acos();
      Complex complex8 = complex1.I.add(complex4);
      Complex complex9 = complex8.add(complex0);
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex10.add((-1021.351));
      Complex complex12 = complex10.NaN.tan();
      Complex complex13 = Complex.valueOf(0.0);
      Complex complex14 = complex13.multiply((-4.4703076268400615E-80));
      double double1 = complex3.NaN.abs();
      Complex complex15 = complex12.ZERO.reciprocal();
      Complex complex16 = complex10.INF.reciprocal();
      Complex complex17 = complex3.reciprocal();
      double double2 = complex10.getReal();
      List<Complex> list0 = complex9.nthRoot(1531);
      Complex complex18 = complex3.exp();
      Complex complex19 = complex13.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-102.0));
      Complex complex1 = new Complex((-345.56609));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.divide(2119.29709501808);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.016525972830718E-8));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.valueOf((-2.016525972830718E-8), 0.0);
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex4.INF.createComplex(0.0, (-324.0598901));
      Complex complex6 = complex1.pow(1.149869441986084);
      int int0 = complex6.hashCode();
      Object object0 = complex2.ZERO.readResolve();
      Object object1 = complex3.readResolve();
      Complex complex7 = complex2.multiply(1.149869441986084);
      double double0 = complex7.INF.abs();
      Complex complex8 = complex1.add((-2.016525972830718E-8));
      ComplexField complexField0 = complex1.getField();
      Complex complex9 = complex8.multiply(complex7);
      Complex complex10 = complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex0.ZERO.conjugate();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.INF.sqrt1z();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex1.add(0.0);
      Complex complex9 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-27.009565508));
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.sin();
      String string0 = complex3.toString();
      Complex complex4 = Complex.valueOf((-27.009565508));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cos();
      int int0 = (-676);
      try { 
        complex1.ONE.nthRoot((-676));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -676
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      boolean boolean0 = complex0.equals("J?K17KZoc=,;vmP");
      Complex complex1 = complex0.log();
      boolean boolean1 = complex1.isInfinite();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex2.log();
      Complex complex5 = complex1.multiply(1);
      Complex complex6 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.cos();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex2.I.sinh();
      Object object1 = complex0.readResolve();
      Complex complex4 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4403.0, (-114.3871389916));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.reciprocal();
      double double0 = complex1.getImaginary();
      double double1 = complex3.abs();
      Complex complex4 = complex2.pow(0.0);
      boolean boolean0 = complex0.equals(complex2);
      ComplexField complexField0 = complex4.getField();
      Complex complex5 = complex2.add(0.0);
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex1.multiply(768);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(9.008499734799015E-141, 9.008499734799015E-141);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.asin();
      double double0 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(252.6763961, 252.6763961);
      double double0 = complex1.getArgument();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex0.createComplex(0.0, 2.906989285008994E-8);
      String string0 = complex2.ONE.toString();
      Object object0 = complex4.readResolve();
      double double1 = complex2.getReal();
      Complex complex5 = complex2.pow(0.0);
      Complex complex6 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-8.221241452580445E-8), (-8.221241452580445E-8));
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.I.multiply(complex2);
      ComplexField complexField0 = complex3.getField();
      Complex complex5 = complex2.ZERO.log();
      Complex complex6 = complex2.divide(1.2391595516612638E-199);
      Complex complex7 = complex6.NaN.tanh();
      double double0 = complex2.getReal();
      Complex complex8 = complex4.I.add(1.3048657767345307E-4);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex9 = complex4.log();
      ComplexField complexField1 = complex8.getField();
      double double1 = complex3.getImaginary();
      List<Complex> list1 = complex0.nthRoot(1);
      boolean boolean1 = complex2.isNaN();
      double double2 = complex5.getImaginary();
      Object object0 = new Object();
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex10.ONE.multiply(complex7);
      Complex complex12 = complex7.conjugate();
      ComplexField complexField2 = complex7.getField();
      try { 
        complex9.nthRoot((-567));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -567
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1748.8975974600944));
      Complex complex2 = complex0.I.divide(complex1);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-429.700036));
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.divide(complex1);
      double double0 = complex0.getReal();
      Complex complex3 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2170.3262733), 3.8331545111676784E-249);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-343.02855), (-343.02855));
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.sin();
      double double0 = complex2.getArgument();
      Complex complex3 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.sinh();
      double double0 = complex0.getImaginary();
      Complex complex3 = Complex.valueOf(1.0, 2701.50142);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex6.sqrt();
      try { 
        complex6.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double double0 = (-3.0307641004671077E-233);
      Complex complex0 = Complex.valueOf((-3.0307641004671077E-233));
      Complex complex1 = complex0.I.exp();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex1.divide(complex3);
      Complex complex6 = complex1.acos();
      Complex complex7 = complex1.negate();
      String string0 = complex1.ZERO.toString();
      Object object1 = complex7.ZERO.readResolve();
      Complex complex8 = complex1.asin();
      try { 
        complex8.INF.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.INF.tanh();
      double double0 = complex2.getArgument();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex4.ONE.sqrt1z();
      double double1 = complex4.getImaginary();
      Complex complex7 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4087.04), (-4087.04));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.acos();
      List<Complex> list0 = complex1.nthRoot(606);
      Complex complex3 = complex1.ZERO.reciprocal();
      Complex complex4 = complex1.cos();
      ComplexField complexField0 = complex1.getField();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.ZERO.asin();
      Complex complex7 = complex5.createComplex(2892.10272524213, Double.NaN);
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.ZERO.add(295.0);
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = new Complex(295.0, 295.0);
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex2.NaN.subtract(complex4);
      Object object0 = complex0.INF.readResolve();
      Complex complex7 = complex0.atan();
      double double0 = complex7.abs();
      Complex complex8 = complex2.subtract(7.568772963781632E-10);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.tan();
      double double0 = complex3.getReal();
      Complex complex4 = complex3.subtract((-459.1290386303));
      Complex complex5 = complex4.log();
      Complex complex6 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.divide((-212.5387855));
      Complex complex2 = complex0.subtract(0.5110208988189697);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(1942.99165, 1942.99165);
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.ZERO.pow(complex1);
      Object object0 = complex0.NaN.readResolve();
      Complex complex3 = complex0.subtract(1942.99165);
      Complex complex4 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.multiply(1);
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = Complex.INF;
      double double0 = complex2.ZERO.getArgument();
      Complex complex3 = complex0.NaN.add(complex2);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = Complex.valueOf((double) 1);
      Complex complex7 = complex2.divide(0.0);
      Complex complex8 = complex4.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = Complex.valueOf(1.1333588840402273E-182);
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex0.I.exp();
      Complex complex5 = complex0.ONE.subtract(complex1);
      Complex complex6 = complex0.add(4.4651109654500895E-8);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex5.negate();
      ComplexField complexField0 = complex7.getField();
      Complex complex9 = Complex.valueOf(1.1333588840402273E-182);
      Complex complex10 = complex9.NaN.cos();
      double double0 = complex9.getReal();
      Complex complex11 = complex5.acos();
      Complex complex12 = complex3.conjugate();
      Complex complex13 = Complex.valueOf(1.1333588840402273E-182);
      Complex complex14 = complex11.exp();
      Complex complex15 = complex2.cos();
      Complex complex16 = complex11.multiply((-20.0));
      Complex complex17 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(1007.779, 1007.779);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.529170882336924E-162, 0.0);
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-2667.6694));
      Complex complex1 = Complex.valueOf((-770.204817835), (-770.204817835));
      Complex complex2 = complex0.add(1296.304);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.add((-3210.4916671006));
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex5.log();
      Complex complex7 = complex0.pow(0.0);
      Complex complex8 = complex2.add(complex7);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.divide(1395.64252694932);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.add(complex0);
      int int0 = complex0.hashCode();
      Complex complex4 = Complex.valueOf(1395.64252694932);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.I.multiply(92);
      Complex complex3 = complex2.INF.log();
      Complex complex4 = Complex.valueOf((-234.700792324184), (-234.700792324184));
      double double0 = complex0.abs();
      Complex complex5 = Complex.valueOf(5058.637914507719);
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.INF.cos();
      Complex complex8 = complex0.createComplex(1382.40153556, 536.5);
      Complex complex9 = complex8.divide(4295.74368829);
      Object object0 = complex9.readResolve();
      Complex complex10 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2882.44), (-2882.44));
      Complex complex1 = complex0.multiply(7);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = new Object();
      double double0 = complex0.INF.abs();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      List<Complex> list0 = complex1.NaN.nthRoot(37);
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.multiply(37);
      Complex complex6 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.add((-123.4841463033774));
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex1.INF.reciprocal();
      Complex complex6 = complex1.ZERO.cos();
      double double0 = complex1.abs();
      Complex complex7 = complex0.acos();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex0.cosh();
      double double1 = complex8.I.getArgument();
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex9.ZERO.multiply(Double.NaN);
      Complex complex11 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(505.3054);
      Complex complex1 = complex0.createComplex(1842.78538839, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(1610.01479680564, 1610.01479680564);
      Complex complex1 = complex0.I.divide(1610.01479680564);
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.cos();
      List<Complex> list0 = complex2.nthRoot(1191);
      Complex complex4 = complex0.divide(2.7214076662438963E-100);
      Complex complex5 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(1578.757211675, 1.6438980102539062);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.NaN.add((-583.11));
      double double0 = complex4.getReal();
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex5.sqrt1z();
      boolean boolean0 = complex9.isNaN();
      Complex complex10 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.divide(1395.64252694932);
      Complex complex2 = complex0.reciprocal();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.INF.add(complex2);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.NaN.multiply(1743);
      Complex complex6 = complex0.atan();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.ONE.add((-144.23171));
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.NaN.log();
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.ZERO.atan();
      double double0 = complex2.getArgument();
      int int0 = complex1.I.hashCode();
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex3.log();
      Complex complex5 = complex3.NaN.acos();
      Complex complex6 = complex0.subtract(complex1);
      double double1 = complex0.abs();
      Complex complex7 = complex0.multiply(372);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3963.74707039));
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex2.add(0.0);
      Complex complex5 = complex4.NaN.add(complex2);
      Complex complex6 = complex1.INF.asin();
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex0.multiply(complex1);
      Complex complex9 = complex8.acos();
      double double1 = complex8.I.abs();
      int int0 = complex8.NaN.hashCode();
      Complex complex10 = complex8.NaN.createComplex((-436.639560724), 2900.19589615435);
      Complex complex11 = complex9.INF.divide(0.0);
      try { 
        complex9.nthRoot((-1003));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,003
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex((-1.8613847754677912E-9));
      Complex complex2 = complex0.divide(complex1);
      List<Complex> list0 = complex2.NaN.nthRoot(943);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.subtract(0.0);
      int int0 = complex0.ZERO.hashCode();
      Complex complex5 = complex0.ONE.multiply(7);
      Complex complex6 = complex1.asin();
      Complex complex7 = complex2.atan();
      double double0 = complex1.getArgument();
      Complex complex8 = complex2.sqrt1z();
      int int1 = complex8.ZERO.hashCode();
      Complex complex9 = complex8.ONE.add((-1450.89253));
      Complex complex10 = complex7.pow(0.0);
      Complex complex11 = complex1.ONE.sqrt();
      int int2 = complex6.hashCode();
      Complex complex12 = complex0.tan();
      Complex complex13 = complex8.tanh();
      boolean boolean0 = complex3.isNaN();
      boolean boolean1 = complex6.isInfinite();
      ComplexField complexField0 = complex10.getField();
      Complex complex14 = complex4.multiply(complex9);
      Complex complex15 = complex5.asin();
      Complex complex16 = complex1.multiply((-418.67741));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2382.53627670186);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = complex1.add(2382.53627670186);
      Complex complex5 = complex0.ZERO.cosh();
      Complex complex6 = complex5.sqrt1z();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex7 = complex6.INF.subtract(2382.53627670186);
      Complex complex8 = complex0.exp();
      Complex complex9 = complex0.log();
      Complex complex10 = complex8.ONE.multiply((-233.00171106668984));
      double double0 = complex0.getArgument();
      Complex complex11 = complex8.add(2382.53627670186);
      Complex complex12 = complex7.negate();
      Complex complex13 = complex11.ONE.createComplex(513.28013768, (-1.0));
      Complex complex14 = complex13.INF.divide(complex0);
      ComplexField complexField0 = complex11.INF.getField();
      boolean boolean0 = complex8.isNaN();
      Complex complex15 = complex8.ONE.pow(complex5);
      Complex complex16 = complex15.sqrt();
      double double1 = complex15.ZERO.getArgument();
      Complex complex17 = complex7.subtract(complex8);
      Complex complex18 = complex11.cos();
      Complex complex19 = complex18.I.sqrt();
      Complex complex20 = Complex.valueOf(0.0);
      Complex complex21 = complex20.cosh();
      Complex complex22 = complex11.multiply(3092.033814);
      Complex complex23 = complex16.subtract(4.169293918423203E144);
      Complex complex24 = complex21.tanh();
      Complex complex25 = complex9.negate();
      Complex complex26 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex((-2120.37884051983), (-2120.37884051983));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = Complex.valueOf((-2120.37884051983), (-4.996854125490041E297));
      Complex complex7 = complex0.ZERO.cosh();
      Complex complex8 = complex7.NaN.createComplex((-4.996854125490041E297), (-4.996854125490041E297));
      Complex complex9 = complex8.divide((-2120.37884051983));
      Complex complex10 = complex2.NaN.cos();
      Complex complex11 = complex5.tan();
      Complex complex12 = complex0.ONE.cosh();
      Complex complex13 = complex2.subtract((-2120.37884051983));
      String string0 = complex1.toString();
      double double0 = complex6.ONE.abs();
      double double1 = complex5.getImaginary();
      boolean boolean0 = complex6.equals(complex4);
      Complex complex14 = complex3.pow(complex11);
      double double2 = complex4.getArgument();
      Complex complex15 = complex0.I.reciprocal();
      Complex complex16 = complex3.log();
      Complex complex17 = complex6.multiply(0);
      Complex complex18 = complex13.sin();
      double double3 = complex2.getArgument();
      Complex complex19 = complex16.pow(complex4);
      Complex complex20 = complex3.pow(complex17);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.ZERO.tanh();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.NaN.sin();
      Complex complex6 = complex4.I.negate();
      double double0 = complex4.getImaginary();
      Complex complex7 = complex0.ONE.sin();
      Complex complex8 = Complex.valueOf(1504.9730593922336, 0.0);
      Complex complex9 = complex3.cos();
      String string0 = complex0.NaN.toString();
      Complex complex10 = complex9.I.tanh();
      Complex complex11 = complex0.sqrt();
      Complex complex12 = complex9.ONE.createComplex((-4415.7217966), 0.0);
      Complex complex13 = complex11.pow(complex0);
      Complex complex14 = complex11.NaN.subtract(2.0);
      String string1 = complex11.toString();
      boolean boolean0 = complex9.isNaN();
      boolean boolean1 = complex0.equals("ew0(f6Uq'}z7flyK%");
      double double1 = complex3.abs();
      Complex complex15 = complex0.tan();
      Complex complex16 = complex3.negate();
      Complex complex17 = complex7.sqrt1z();
      Complex complex18 = complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex((-2986.29153244112));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.NaN.multiply(complex2);
      Complex complex4 = complex0.divide(complex2);
      boolean boolean0 = complex1.equals(complex4);
      Complex complex5 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex2 = complex0.INF.divide((-1328.225311));
      Complex complex3 = complex1.I.add((-1549.0));
      Complex complex4 = complex3.NaN.pow(complex0);
      Complex complex5 = Complex.valueOf((-1549.0));
      Complex complex6 = Complex.valueOf(748.2, 0.0);
      Complex complex7 = complex6.ZERO.reciprocal();
      String string0 = complex6.toString();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.ONE.add(748.2);
      Complex complex10 = complex8.divide(complex6);
      Complex complex11 = complex8.NaN.sin();
      double double0 = complex10.I.abs();
      ComplexField complexField1 = complex2.getField();
      Complex complex12 = complex6.tanh();
      Complex complex13 = complex8.I.subtract(complex12);
      Complex complex14 = complex13.I.tanh();
      Complex complex15 = complex3.NaN.subtract(39.5906461);
      Complex complex16 = complex15.INF.pow(308.05051565657);
      Complex complex17 = complex9.subtract(complex4);
      Complex complex18 = complex6.ONE.reciprocal();
      Complex complex19 = complex9.subtract(0.0);
      Object object0 = complex10.readResolve();
      Complex complex20 = complex2.reciprocal();
      boolean boolean0 = complex0.isNaN();
      double double1 = complex11.abs();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.multiply(17);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex2.subtract(complex5);
      Complex complex7 = complex0.pow((-2.724174869314043E-8));
      Complex complex8 = complex4.acos();
      Complex complex9 = complex7.INF.asin();
      Complex complex10 = complex9.tan();
      Complex complex11 = complex10.INF.negate();
      Complex complex12 = complex4.ZERO.exp();
      double double0 = complex7.getArgument();
      Complex complex13 = complex7.ONE.conjugate();
      Complex complex14 = complex13.I.tanh();
      Complex complex15 = complex13.NaN.tanh();
      Complex complex16 = complex7.sinh();
      List<Complex> list0 = complex1.I.nthRoot(1);
      Complex complex17 = complex4.ONE.sin();
      Complex complex18 = complex16.NaN.multiply(complex3);
      Complex complex19 = complex7.reciprocal();
      Complex complex20 = complex19.ZERO.log();
      boolean boolean0 = complex16.equals(complex4);
      Object object0 = complex19.readResolve();
      Complex complex21 = complex8.pow(1538.1305099267556);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.ONE.divide(0.0);
      Complex complex3 = Complex.INF;
      String string0 = complex0.ZERO.toString();
      Complex complex4 = complex0.ZERO.add(complex3);
      String string1 = complex0.toString();
      Complex complex5 = complex2.I.add(complex3);
      int int0 = complex4.ZERO.hashCode();
      Complex complex6 = complex2.divide(1.3006683896462346E-8);
      Complex complex7 = complex4.atan();
      Complex complex8 = complex3.sqrt();
      String string2 = complex4.I.toString();
      Complex complex9 = complex6.INF.cosh();
      Complex complex10 = complex0.subtract(complex6);
      int int1 = complex4.hashCode();
      Complex complex11 = complex6.pow(complex1);
      Complex complex12 = complex11.divide(complex6);
      Complex complex13 = complex12.tanh();
      Complex complex14 = complex12.negate();
      Complex complex15 = complex3.atan();
      Complex complex16 = complex15.ONE.multiply(1);
      Complex complex17 = complex5.exp();
      Complex complex18 = complex16.reciprocal();
      Complex complex19 = Complex.valueOf(20.0);
  }
}
