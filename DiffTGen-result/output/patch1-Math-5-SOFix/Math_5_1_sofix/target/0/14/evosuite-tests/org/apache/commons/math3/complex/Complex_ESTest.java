/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 08:24:17 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = (-1.0);
      Complex complex0 = new Complex(2505.3, (-1.0));
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.cosh();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.pow(complex3);
      Complex complex6 = complex5.ONE.subtract(Double.POSITIVE_INFINITY);
      Complex complex7 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.reciprocal();
      int int0 = complex1.NaN.hashCode();
      int int1 = (-838);
      try { 
        complex1.nthRoot((-838));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -838
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.log();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex2 = complex0.divide(0.7853981633974483);
      Complex complex3 = complex2.add(0.7853981633974483);
      Complex complex4 = complex0.INF.subtract(complex3);
      Complex complex5 = complex3.pow(0.7853981633974483);
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex6.INF.cosh();
      double double0 = complex7.INF.abs();
      Complex complex8 = complex0.pow(complex2);
      Complex complex9 = complex8.ONE.negate();
      String string0 = complex2.I.toString();
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex9.multiply(530.6985316129);
      Complex complex12 = complex10.sqrt1z();
      Complex complex13 = complex11.sqrt1z();
      double double1 = complex2.abs();
      Complex complex14 = complex5.asin();
      Complex complex15 = complex14.cosh();
      Complex complex16 = complex5.tan();
      try { 
        complex2.nthRoot((-2147483558));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,147,483,558
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.divide(407.072);
      Complex complex4 = complex3.ZERO.reciprocal();
      ComplexField complexField0 = complex2.getField();
      Complex complex5 = complex2.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(3550.4796706, (-503.7822450710976));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.tan();
      String string0 = complex0.toString();
      Complex complex3 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.ONE.sin();
      Complex complex4 = complex0.ZERO.pow(complex1);
      Complex complex5 = complex0.NaN.multiply(complex3);
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex8.I.sqrt1z();
      int int0 = complex0.hashCode();
      String string0 = complex2.I.toString();
      Complex complex10 = complex0.tanh();
      Object object0 = new Object();
      boolean boolean0 = complex2.equals(object0);
      double double0 = complex9.getArgument();
      Complex complex11 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex2.ZERO.sqrt();
      ComplexField complexField0 = complex2.ONE.getField();
      double double0 = complex0.getArgument();
      Complex complex4 = new Complex(Double.NaN, 1.0697050094604492);
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex5.INF.reciprocal();
      Complex complex7 = complex4.INF.multiply(0.5562618970870972);
      List<Complex> list0 = complex7.ZERO.nthRoot(1);
      Complex complex8 = complex7.I.log();
      Complex complex9 = complex5.ZERO.sinh();
      double double1 = complex5.INF.getArgument();
      Complex complex10 = complex5.INF.sin();
      Complex complex11 = complex1.I.exp();
      Complex complex12 = complex5.NaN.divide(complex1);
      Complex complex13 = complex12.ONE.add(0.7853981633974483);
      String string0 = complex12.NaN.toString();
      Complex complex14 = complex12.INF.tan();
      Complex complex15 = complex1.reciprocal();
      Complex complex16 = complex4.divide(Double.NaN);
      Complex complex17 = complex15.tan();
      Complex complex18 = complex0.sqrt1z();
      Complex complex19 = complex4.divide(0.7853981633974483);
      String string1 = complex18.toString();
      Complex complex20 = complex6.multiply((-633));
      Complex complex21 = complex0.sinh();
      boolean boolean0 = complex19.isNaN();
      Complex complex22 = complex3.tan();
      Complex complex23 = complex8.log();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(1677.0);
      Complex complex1 = new Complex(1169.115535, 1677.0);
      List<Complex> list0 = complex1.nthRoot(233);
      Complex complex2 = Complex.valueOf(1.998050894021586E35);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.log();
      Complex complex5 = Complex.valueOf(1.998050894021586E35);
      Complex complex6 = complex4.cos();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-1235.0354281451548);
      double double1 = 2.0;
      Complex complex0 = Complex.valueOf((-1235.0354281451548), 2.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.INF.cosh();
      String string0 = complex0.toString();
      Complex complex4 = complex1.I.add(complex2);
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex5.NaN.createComplex((-1235.0354281451548), Double.POSITIVE_INFINITY);
      int int0 = (-229);
      Complex complex7 = complex2.INF.subtract(complex1);
      try { 
        complex4.INF.nthRoot((-229));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -229
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex1.ONE.atan();
      Complex complex4 = complex0.ZERO.createComplex(350.00622118, 350.00622118);
      Complex complex5 = complex4.INF.pow(0.0);
      Object object0 = complex1.I.readResolve();
      Complex complex6 = complex5.INF.exp();
      ComplexField complexField0 = complex5.I.getField();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex4.INF.tan();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(0.043007105588912964, (-2336.612));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.pow((-501.0));
      Complex complex3 = complex1.ZERO.cosh();
      Complex complex4 = complex1.pow((-1.0));
      Complex complex5 = Complex.INF;
      Complex complex6 = complex2.subtract(complex5);
      Complex complex7 = complex1.multiply((-2336.612));
      double double0 = complex0.getArgument();
      Complex complex8 = complex7.divide(complex0);
      boolean boolean0 = complex5.isInfinite();
      Complex complex9 = new Complex(0.0);
      boolean boolean1 = complex1.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2136.66, (-1101.417344735182));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.INF.pow((-1785.7593546));
      Object object0 = complex2.I.readResolve();
      Complex complex4 = complex0.I.add(complex2);
      Complex complex5 = complex4.tan();
      boolean boolean0 = complex2.isInfinite();
      Complex complex6 = complex0.tanh();
      double double0 = complex2.getArgument();
      Complex complex7 = complex4.INF.tanh();
      Complex complex8 = complex4.multiply(complex2);
      Complex complex9 = complex4.sin();
      Complex complex10 = complex9.NaN.subtract(complex3);
      Complex complex11 = complex1.negate();
      Complex complex12 = complex9.NaN.asin();
      Complex complex13 = complex12.I.sqrt1z();
      Complex complex14 = complex11.I.pow(complex7);
      Complex complex15 = complex1.multiply(977);
      Complex complex16 = complex15.multiply(734);
      Complex complex17 = complex11.multiply((-1233));
      Complex complex18 = complex9.sqrt1z();
      Complex complex19 = complex13.sqrt1z();
      Complex complex20 = complex19.sin();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.NaN.subtract(complex1);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex2.NaN.sinh();
      Complex complex6 = complex0.sin();
      Complex complex7 = Complex.valueOf(0.0, 4311.055025);
      Complex complex8 = complex1.INF.multiply(complex2);
      Complex complex9 = complex7.INF.sinh();
      Complex complex10 = complex5.I.cosh();
      boolean boolean0 = complex1.isNaN();
      Complex complex11 = complex1.add((-1982.421512104789));
      Complex complex12 = complex3.sqrt1z();
      Complex complex13 = complex11.I.pow(complex1);
      Complex complex14 = complex13.I.pow((-1982.421512104789));
      Complex complex15 = complex13.ONE.sqrt1z();
      double double0 = complex11.getReal();
      Complex complex16 = complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.ZERO.pow(complex2);
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = complex0.negate();
      double double0 = complex5.getArgument();
      Complex complex6 = Complex.valueOf((-2.437796532151255E213));
      Complex complex7 = complex0.multiply(1235);
      Complex complex8 = complex0.pow((-1.5707963267948966));
      Complex complex9 = complex3.cos();
      Complex complex10 = complex9.ZERO.sqrt1z();
      Complex complex11 = complex1.asin();
      Complex complex12 = complex5.sqrt();
      Complex complex13 = complex12.ONE.subtract(complex10);
      Complex complex14 = complex8.negate();
      Complex complex15 = complex5.pow(2.5313735821872488E87);
      Complex complex16 = complex6.pow(complex8);
      boolean boolean0 = complex10.isNaN();
      Complex complex17 = complex8.createComplex(1235, 980.1926255);
      Complex complex18 = complex1.multiply(0);
      Complex complex19 = complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.INF.multiply(complex1);
      double double0 = complex2.NaN.getArgument();
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex2.atan();
      Complex complex6 = complex5.ZERO.asin();
      Complex complex7 = complex3.sqrt1z();
      boolean boolean0 = complex4.equals(complex0);
      int int0 = complex7.ZERO.hashCode();
      Complex complex8 = complex4.INF.tan();
      Complex complex9 = complex7.tan();
      Complex complex10 = complex9.sqrt1z();
      Complex complex11 = complex9.multiply(0.0);
      Complex complex12 = complex11.subtract(complex2);
      Complex complex13 = complex10.sinh();
      boolean boolean1 = complex4.isInfinite();
      List<Complex> list0 = complex0.nthRoot(923);
      Complex complex14 = complex13.NaN.createComplex((-148.2566439168218), (-148.2566439168218));
      Complex complex15 = complex14.divide(complex1);
      Complex complex16 = complex9.ZERO.sin();
      double double1 = complex3.getImaginary();
      int int1 = complex13.hashCode();
      Complex complex17 = complex1.tan();
      Complex complex18 = complex4.subtract(1090.2339);
      Complex complex19 = complex13.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.toString();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.NaN.pow(complex1);
      double double0 = complex1.getArgument();
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex4.ZERO.conjugate();
      Object object0 = complex5.NaN.readResolve();
      Complex complex7 = complex3.INF.acos();
      Complex complex8 = complex5.multiply(0.0);
      Complex complex9 = complex8.NaN.multiply(0.0);
      Complex complex10 = Complex.valueOf(0.0);
      boolean boolean0 = complex0.equals(complex1);
      List<Complex> list0 = complex1.nthRoot(1469);
      Complex complex11 = complex0.multiply(1469);
      double double1 = complex4.getImaginary();
      int int0 = complex5.hashCode();
      Complex complex12 = complex8.cosh();
      Complex complex13 = complex10.log();
      Complex complex14 = complex12.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.NaN.add(0.0);
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = Complex.valueOf(0.0, 2141.0);
      Complex complex7 = complex0.I.add(0.0);
      Complex complex8 = complex6.NaN.divide(complex0);
      boolean boolean0 = complex1.equals(complex2);
      double double0 = complex3.getReal();
      Complex complex9 = complex3.subtract(1.6160884846515524E-147);
      Complex complex10 = complex6.atan();
      double double1 = complex9.INF.getArgument();
      Complex complex11 = complex0.I.log();
      List<Complex> list0 = complex9.nthRoot(627);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.cosh();
      String string0 = complex1.ONE.toString();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.NaN.sqrt1z();
      List<Complex> list0 = complex0.I.nthRoot(7);
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex2.INF.log();
      Complex complex5 = complex2.NaN.tan();
      boolean boolean0 = complex2.isNaN();
      Complex complex6 = complex2.ZERO.conjugate();
      double double0 = complex6.NaN.getArgument();
      Complex complex7 = complex3.add(1609.46098706338);
      Complex complex8 = complex5.multiply(1.8718984127044678);
      Complex complex9 = complex5.tanh();
      Complex complex10 = complex2.sqrt();
      boolean boolean1 = complex3.isNaN();
      Complex complex11 = complex9.ONE.negate();
      try { 
        complex10.ONE.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = null;
      try { 
        complex0.ZERO.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex2.ONE.sqrt1z();
      String string0 = complex3.INF.toString();
      Complex complex4 = complex1.NaN.atan();
      ComplexField complexField0 = complex0.ONE.getField();
      ComplexField complexField1 = complex0.INF.getField();
      int int0 = complex1.NaN.hashCode();
      Complex complex5 = complex0.NaN.pow(complex1);
      Complex complex6 = complex1.ZERO.sqrt();
      ComplexField complexField2 = complex0.getField();
      boolean boolean0 = complex1.isInfinite();
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = complex6.add(complex0);
      int int1 = complex0.hashCode();
      Complex complex9 = complex8.createComplex(0.0, 0.0);
      double double0 = complex7.getImaginary();
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex10.atan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(338.37238, 1.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(2.601412773132324);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = Complex.valueOf(967.619799, 2.601412773132324);
      Complex complex6 = complex0.ZERO.subtract(complex5);
      Complex complex7 = Complex.valueOf(967.619799, (-3945.952629696471));
      Complex complex8 = complex1.I.multiply(complex0);
      Complex complex9 = complex8.NaN.tanh();
      int int0 = complex9.ONE.hashCode();
      Complex complex10 = complex0.pow(1716.286099);
      Complex complex11 = complex4.INF.cos();
      Complex complex12 = Complex.valueOf(2.601412773132324);
      Complex complex13 = complex12.ZERO.atan();
      Complex complex14 = Complex.valueOf(2539.2204026476393);
      Complex complex15 = complex14.INF.log();
      double double0 = complex2.abs();
      String string0 = complex1.toString();
      Complex complex16 = complex0.negate();
      Complex complex17 = complex3.conjugate();
      Complex complex18 = complex17.I.exp();
      Complex complex19 = complex10.negate();
      Complex complex20 = complex19.I.subtract(complex17);
      Complex complex21 = complex19.cosh();
      Complex complex22 = complex2.sin();
      Complex complex23 = complex8.divide(complex18);
      Complex complex24 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex25 = complex4.subtract(complex24);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(3059.6, 3059.6);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.6358739137649536);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(3122.35, 3122.35);
      Complex complex1 = complex0.ONE.multiply(3122.35);
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = Complex.valueOf(0.6669275760650635, 0.6669275760650635);
      Complex complex4 = complex3.ONE.createComplex(5.638724693948384E-8, 1063.03450356);
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex0.sin();
      String string0 = complex0.ZERO.toString();
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = Complex.valueOf(1726.0, 1063.03450356);
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex0.tan();
      Complex complex11 = complex10.NaN.divide(complex9);
      Complex complex12 = complex10.I.cos();
      Complex complex13 = complex12.ONE.exp();
      ComplexField complexField0 = complex0.getField();
      Complex complex14 = complex1.multiply(62);
      Complex complex15 = complex9.negate();
      Complex complex16 = complex10.tan();
      double double0 = complex14.getImaginary();
      Complex complex17 = complex7.acos();
      Complex complex18 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2684.879852754015, 2684.879852754015);
      double double0 = 0.0;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.subtract(complex1);
      Object object0 = complex1.readResolve();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex0.ONE.multiply(complex3);
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex4.ONE.tanh();
      Complex complex8 = complex4.ONE.add(complex2);
      double double1 = complex8.I.abs();
      Complex complex9 = complex8.pow(0.0);
      double double2 = complex9.ONE.abs();
      Complex complex10 = complex3.INF.divide(complex1);
      try { 
        complex3.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.481292188167572, 0.5433003902435303);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex1.ZERO.atan();
      Complex complex5 = complex0.ZERO.multiply(complex2);
      Complex complex6 = complex2.I.sqrt1z();
      Complex complex7 = complex0.acos();
      Object object0 = complex7.ONE.readResolve();
      List<Complex> list0 = complex3.I.nthRoot(1);
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = Complex.valueOf(0.481292188167572);
      Complex complex9 = complex2.cosh();
      Complex complex10 = complex9.I.tan();
      Complex complex11 = complex7.createComplex(20.0, 0.481292188167572);
      Complex complex12 = complex3.sqrt();
      List<Complex> list1 = complex0.nthRoot(17);
      Complex complex13 = complex5.exp();
      Complex complex14 = complex11.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(6.283185307179586, (-1.3445113140270216E-8));
      Complex complex3 = complex1.createComplex(6.283185307179586, (-1128.88));
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.add((-1128.88));
      Complex complex6 = complex0.INF.divide((-1.3445113140270216E-8));
      boolean boolean0 = complex4.isInfinite();
      Complex complex7 = complex3.atan();
      double double0 = complex4.getArgument();
      Complex complex8 = complex3.subtract((-813.669348985003));
      Complex complex9 = complex8.I.multiply(complex4);
      Complex complex10 = complex9.ONE.exp();
      Complex complex11 = complex0.sqrt();
      Complex complex12 = complex8.NaN.conjugate();
      Complex complex13 = complex5.sin();
      int int0 = complex13.I.hashCode();
      Complex complex14 = complex9.negate();
      double double1 = complex9.getArgument();
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(153.149378, 153.149378);
      Complex complex1 = Complex.valueOf(153.149378, 153.149378);
      double double0 = complex1.abs();
      Complex complex2 = Complex.valueOf(153.149378, 153.149378);
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex4.ONE.tanh();
      double double1 = complex0.getReal();
      Complex complex7 = complex3.ZERO.atan();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex8.ONE.conjugate();
      Complex complex10 = complex9.ZERO.cosh();
      Complex complex11 = complex10.INF.divide(complex4);
      Complex complex12 = complex1.multiply(complex0);
      Complex complex13 = complex4.cos();
      Complex complex14 = complex0.conjugate();
      Complex complex15 = complex14.acos();
      double double2 = complex4.getImaginary();
      Complex complex16 = complex1.ZERO.add(complex4);
      String string0 = complex4.toString();
      Complex complex17 = complex15.tanh();
      Complex complex18 = complex12.multiply(216.58592743660375);
      Object object0 = complex9.readResolve();
      Complex complex19 = complex4.log();
      Complex complex20 = complex7.sqrt();
      Complex complex21 = complex3.pow(complex7);
      Complex complex22 = complex21.NaN.sqrt();
      ComplexField complexField1 = complex17.getField();
      double double3 = complex12.getArgument();
      double double4 = complex11.getArgument();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-609.2), (-609.2));
      Complex complex1 = complex0.NaN.multiply((-1274));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex2.INF.sqrt1z();
      Complex complex6 = complex0.ZERO.createComplex((-609.2), (-609.2));
      ComplexField complexField0 = complex5.ZERO.getField();
      Complex complex7 = complex0.subtract((-609.2));
      double double0 = complex2.getImaginary();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.conjugate();
      String string0 = complex1.INF.toString();
      Complex complex3 = complex0.conjugate();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex2.NaN.divide(0.0);
      Complex complex5 = complex0.subtract((-1.6990896855901115E-55));
      Complex complex6 = complex3.add(complex1);
      Complex complex7 = complex2.pow((-1357.936228));
      Complex complex8 = complex1.atan();
      Complex complex9 = complex1.exp();
      Complex complex10 = new Complex(0.0);
      Object object0 = complex8.I.readResolve();
      String string1 = complex8.toString();
      Complex complex11 = complex4.add(complex10);
      Complex complex12 = complex5.multiply(complex8);
      Complex complex13 = complex12.ONE.createComplex(0.0, (-868.3111530434));
      Complex complex14 = complex8.acos();
      Complex complex15 = complex10.multiply(0.0);
      double double1 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(964.847, 964.847);
      Complex complex1 = complex0.createComplex(964.847, 964.847);
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = Complex.valueOf(964.847, 1.0);
      Complex complex5 = complex1.multiply((-141.43));
      double double0 = complex5.ZERO.getArgument();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex0.multiply(complex6);
      Complex complex8 = new Complex((-141.43));
      Complex complex9 = complex7.NaN.pow(complex8);
      Complex complex10 = complex4.reciprocal();
      Complex complex11 = Complex.I;
      Complex complex12 = Complex.valueOf((-216.8699462026489));
      Complex complex13 = complex9.divide(complex11);
      Complex complex14 = Complex.valueOf(0.0);
      Complex complex15 = complex1.pow(964.847);
      String string0 = complex13.toString();
      Complex complex16 = complex8.divide(complex12);
      Complex complex17 = complex16.ZERO.sinh();
      Complex complex18 = complex14.add(complex5);
      Complex complex19 = complex11.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.9317379627195146E53), (-3.9317379627195146E53));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.divide(Double.POSITIVE_INFINITY);
      int int0 = complex2.INF.hashCode();
      Complex complex3 = complex1.I.pow((-1.0));
      int int1 = complex1.NaN.hashCode();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex5.ZERO.add((-1.0));
      Complex complex7 = complex6.NaN.multiply(complex0);
      Object object0 = complex5.ZERO.readResolve();
      String string0 = complex1.toString();
      boolean boolean0 = complex1.isInfinite();
      Complex complex8 = complex4.sqrt();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex0.add(complex9);
      Complex complex11 = complex10.ONE.subtract(complex5);
      boolean boolean1 = complex1.isInfinite();
      String string1 = complex8.NaN.toString();
      Complex complex12 = new Complex((-1.0));
      boolean boolean2 = complex8.equals(complex12);
      double double0 = complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 6.283185307179586;
      Complex complex0 = new Complex(0.0, 6.283185307179586);
      try { 
        complex0.ONE.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.multiply((-582));
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex1.I.multiply(complex0);
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex0.ZERO.multiply((double) (-582));
      Complex complex7 = complex5.I.acos();
      Object object0 = complex7.NaN.readResolve();
      Object object1 = complex5.NaN.readResolve();
      double double0 = complex5.getImaginary();
      ComplexField complexField0 = complex5.getField();
      Complex complex8 = complex4.add(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.ZERO.sinh();
      Complex complex10 = complex5.sqrt();
      Complex complex11 = Complex.valueOf(Double.NaN, Double.POSITIVE_INFINITY);
      String string0 = complex6.toString();
      boolean boolean0 = complex1.isNaN();
      Object object2 = complex0.readResolve();
      Complex complex12 = complex1.createComplex((-1178.432245288), (-144.7189669456326));
      double double1 = complex12.abs();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.NaN);
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.multiply(1388);
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex1.I.multiply(1);
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex6.ZERO.sinh();
      int int0 = complex1.hashCode();
      Complex complex8 = complex4.pow((double) 1388);
      Complex complex9 = complex8.I.pow(Double.NaN);
      Complex complex10 = complex3.asin();
      Complex complex11 = complex10.ONE.conjugate();
      Complex complex12 = complex11.INF.reciprocal();
      Complex complex13 = complex12.exp();
      Complex complex14 = complex3.reciprocal();
      Complex complex15 = complex14.pow(complex0);
      Complex complex16 = complex2.tanh();
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex17 = complex4.add(complex2);
      boolean boolean0 = complex11.isNaN();
      Complex complex18 = complex11.tanh();
      Complex complex19 = complex0.multiply(1388);
      Complex complex20 = complex2.multiply(Double.NaN);
      Object object0 = complex13.readResolve();
      boolean boolean1 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      String string0 = complex1.ZERO.toString();
      int int0 = complex1.hashCode();
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex1.ZERO.cosh();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex1.log();
      Complex complex8 = complex5.NaN.exp();
      Complex complex9 = complex0.createComplex(2944.306129862073, 5.900393284617182E-8);
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex1.exp();
      Complex complex12 = complex3.add(complex0);
      Complex complex13 = complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3455.67802, 3455.67802);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.NaN.subtract(complex1);
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.I.multiply(complex3);
      Complex complex7 = complex5.NaN.sqrt();
      Complex complex8 = complex4.add(complex0);
      Complex complex9 = complex8.INF.multiply(1);
      Complex complex10 = complex0.NaN.cosh();
      Complex complex11 = complex0.multiply(0.0);
      Complex complex12 = complex3.tan();
      Complex complex13 = complex12.ZERO.tan();
      Complex complex14 = complex0.asin();
      Complex complex15 = complex10.add(complex1);
      Complex complex16 = complex2.pow(3455.67802);
      Complex complex17 = complex16.add(3455.67802);
      Complex complex18 = complex14.sinh();
      Complex complex19 = complex11.conjugate();
      Complex complex20 = complex19.ZERO.exp();
      Complex complex21 = complex14.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-1886.9922552428686), (-4363.988118025217));
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.INF.sqrt1z();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex0.multiply(complex3);
      int int0 = complex0.ONE.hashCode();
      Complex complex5 = complex4.I.multiply((-3484));
      Complex complex6 = complex4.sinh();
      String string0 = complex0.toString();
      Complex complex7 = complex3.INF.subtract((-1262.01555345));
      Complex complex8 = complex5.ONE.atan();
      Object object1 = complex3.readResolve();
      Complex complex9 = complex5.pow(2.85040095144011776E17);
      Complex complex10 = Complex.valueOf(1.0, (-2.1706266226554237E-7));
      Complex complex11 = complex1.atan();
      boolean boolean0 = complex1.isNaN();
      Complex complex12 = complex2.sqrt();
      Complex complex13 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.multiply((-983.54986));
      Complex complex2 = complex1.I.tan();
      int int0 = complex1.NaN.hashCode();
      Complex complex3 = complex1.ONE.divide(complex0);
      String string0 = complex3.NaN.toString();
      Complex complex4 = complex0.ONE.sqrt1z();
      int int1 = complex4.ONE.hashCode();
      double double0 = complex0.abs();
      double double1 = complex0.getArgument();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.add(0.0);
      try { 
        complex2.nthRoot((-2524));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,524
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex1.ZERO.pow(1265.508220910559);
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex1.I.subtract((-1073.5933629342724));
      Object object0 = complex1.readResolve();
      Object object1 = complex5.readResolve();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex1.sqrt();
      double double0 = complex3.abs();
      Complex complex8 = complex0.log();
      Complex complex9 = complex2.multiply(complex5);
      Complex complex10 = complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.I.exp();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.21214580535888672, (-5017.776413857787));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex1.INF.cosh();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.tanh();
      double double0 = complex3.abs();
      double double1 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = 2814.5450314364575;
      Complex complex0 = new Complex(2814.5450314364575);
      Object object0 = complex0.readResolve();
      try { 
        complex0.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.reciprocal();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex0.multiply(0);
      double double0 = complex0.getImaginary();
      double double1 = complex6.getImaginary();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex1.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex1.INF.divide(0.0);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.pow(4.388125271425036E166);
      Complex complex2 = Complex.valueOf(1.627922534942627, (-1.0));
      Complex complex3 = complex2.ONE.sin();
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(285.2913, (-20.0));
      Complex complex1 = complex0.multiply(285.2913);
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.ZERO.tan();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex3.INF.multiply(complex4);
      Complex complex6 = complex1.ZERO.subtract(0.0);
      Complex complex7 = Complex.valueOf(0.0, 1442.2152014743995);
      Complex complex8 = complex0.log();
      Complex complex9 = complex1.divide(complex2);
      Complex complex10 = complex0.multiply(0.0);
      Complex complex11 = complex10.ZERO.divide(complex3);
      Complex complex12 = complex9.exp();
      Complex complex13 = complex1.ONE.conjugate();
      Complex complex14 = complex1.multiply(506.575746);
      Complex complex15 = complex5.add(506.575746);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-286.764));
      Complex complex1 = complex0.I.divide((-286.764));
      Complex complex2 = complex1.INF.multiply((-286.764));
      Complex complex3 = complex0.ONE.log();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex3.log();
      int int0 = complex0.hashCode();
      Complex complex6 = complex3.add(complex5);
      Complex complex7 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0);
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex0.divide(complex1);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(269.6, 269.6);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      double double0 = complex1.INF.abs();
      Complex complex3 = complex1.I.add(529.59);
      Complex complex4 = complex2.NaN.sinh();
      Complex complex5 = complex1.INF.exp();
      int int0 = complex4.hashCode();
      Complex complex6 = complex1.add(269.6);
      Complex complex7 = complex0.NaN.conjugate();
      List<Complex> list0 = complex4.nthRoot(454);
      Complex complex8 = complex0.I.divide(complex4);
      Complex complex9 = complex4.subtract(complex1);
      Complex complex10 = Complex.valueOf((double) 454);
      Complex complex11 = complex6.asin();
      Object object0 = complex11.readResolve();
      int int1 = complex1.ONE.hashCode();
      boolean boolean1 = complex2.equals(object0);
      Complex complex12 = complex11.sqrt();
      Complex complex13 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.ONE.add(2206.9991949421);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex1.INF.cosh();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex3.sinh();
      Complex complex8 = Complex.valueOf((-1205.2));
      int int0 = complex2.hashCode();
      Complex complex9 = complex6.asin();
      boolean boolean0 = complex6.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(1764.40868558);
      Complex complex1 = Complex.valueOf(1764.40868558);
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply((-559.84864));
      Complex complex2 = complex0.divide((-1001.5795668383));
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.add((-559.84864));
      Complex complex7 = complex2.tan();
      ComplexField complexField0 = complex7.INF.getField();
      Complex complex8 = Complex.valueOf((-1001.5795668383));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply(796);
      Complex complex2 = complex1.I.pow(2.0);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.NaN.pow((double) 796);
      Complex complex4 = complex0.ONE.createComplex(2.0, 2.2513351440429688);
      Complex complex5 = complex3.I.multiply(7);
      Complex complex6 = complex0.ONE.tan();
      Complex complex7 = complex0.multiply((-3399));
      Complex complex8 = complex0.ZERO.sqrt();
      Complex complex9 = complex7.createComplex(0.0, 0.0);
      ComplexField complexField0 = complex0.getField();
      String string0 = complex9.toString();
      Complex complex10 = complex4.multiply(2.0);
      double double0 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1278.9296443834437), (-1929.30036608));
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.cos();
      String string0 = complex2.ZERO.toString();
      Complex complex3 = complex1.divide(complex0);
      int int1 = complex0.I.hashCode();
      Complex complex4 = Complex.valueOf((-1929.30036608));
      Complex complex5 = complex3.NaN.subtract((-1929.30036608));
      Complex complex6 = complex0.ZERO.acos();
      Complex complex7 = complex5.I.exp();
      Complex complex8 = complex3.multiply(1104);
      List<Complex> list0 = complex8.INF.nthRoot(1104);
      Complex complex9 = complex0.multiply(1);
      double double0 = complex8.getImaginary();
      Complex complex10 = complex5.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(7);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-3149.1244));
      Complex complex1 = complex0.multiply((-1.0));
      Complex complex2 = complex1.NaN.createComplex(0.0, 0.0);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex1.pow((-1.0));
      Complex complex4 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf((-1153.597462160284), (-540.7));
      Complex complex3 = complex1.ZERO.pow(complex2);
      Complex complex4 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(422.0, 422.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex5.I.add(complex1);
      double double0 = complex1.I.getArgument();
      Complex complex7 = complex4.divide(0.0);
      Complex complex8 = complex0.multiply(1.5707963267948966);
      Complex complex9 = complex3.conjugate();
      Complex complex10 = complex1.multiply(complex5);
      Complex complex11 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.pow(78.285290219458);
      Complex complex3 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1078.4892), 0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.NaN.pow((-1078.4892));
      Complex complex4 = complex2.ONE.multiply(0.0);
      boolean boolean0 = complex2.isInfinite();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.sqrt();
      String string0 = complex6.INF.toString();
      Complex complex7 = Complex.valueOf((-8.772048092842086E271), 0.0);
      Complex complex8 = complex0.add(0.0);
      double double0 = complex6.getImaginary();
      Complex complex9 = complex8.negate();
      Complex complex10 = complex0.multiply((-8.772048092842086E271));
      Complex complex11 = complex4.add((-1078.4892));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.NaN.multiply((-1.4356011804377797E-9));
      Complex complex4 = complex3.ONE.conjugate();
      double double0 = complex1.getReal();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-1229.5962));
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.valueOf((-1886.9922552428686), (-4363.988118025217));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2249.603607), 3833.184978516693);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.createComplex(3833.184978516693, (-2249.603607));
      Complex complex5 = complex1.pow(complex2);
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(109.112135139858);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-948.83));
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.ZERO.asin();
      boolean boolean0 = complex0.equals("");
      double double0 = complex2.ZERO.abs();
      try { 
        complex0.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.ZERO.reciprocal();
      double double0 = complex0.getArgument();
      Complex complex3 = Complex.valueOf(0.3177432417869568);
      Complex complex4 = complex2.negate();
      Complex complex5 = complex4.createComplex(0.3177432417869568, 0.3177432417869568);
      Complex complex6 = complex5.multiply(151);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.0);
      Complex complex1 = complex0.sqrt();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = Complex.valueOf((-2080.9), 20.0);
      Complex complex3 = complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.INF.pow(719.8914781446813);
      Complex complex3 = complex0.sin();
      List<Complex> list0 = complex3.nthRoot(996);
      Complex complex4 = complex0.NaN.sinh();
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex3.I.log();
      Complex complex9 = complex7.ZERO.subtract(1.0);
      Complex complex10 = complex7.INF.negate();
      double double0 = complex7.getArgument();
      int int0 = complex3.hashCode();
      double double1 = complex10.NaN.getArgument();
      Complex complex11 = complex10.pow(0.0);
      double double2 = complex11.NaN.abs();
      boolean boolean0 = complex0.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.NaN.nthRoot((-1789));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,789
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(4218.26453395733, (-5989.3751));
      Complex complex1 = complex0.reciprocal();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex1.ONE.multiply(2371);
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex2.ZERO.pow(4218.26453395733);
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex1.I.pow((-455.092758));
      Complex complex8 = complex6.ZERO.multiply(37);
      Complex complex9 = complex8.ZERO.conjugate();
      Complex complex10 = complex8.ONE.subtract((double) 37);
      Complex complex11 = complex0.subtract(complex3);
      double double0 = complex1.abs();
      Complex complex12 = complex6.NaN.asin();
      Complex complex13 = complex1.sqrt1z();
      List<Complex> list0 = complex2.nthRoot(2357);
      Complex complex14 = complex1.createComplex(4218.26453395733, 1.3650510415162543E-4);
      Complex complex15 = complex13.add(complex6);
      Complex complex16 = complex5.pow((-5989.3751));
      Complex complex17 = complex0.sin();
      Complex complex18 = complex14.reciprocal();
      boolean boolean0 = complex15.equals(complex5);
      double double1 = complex0.abs();
      Complex complex19 = complex7.divide(675.097926917);
      Complex complex20 = Complex.valueOf((-1125.06242995), (double) 2371);
      Complex complex21 = complex5.divide(complex20);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(430.89187);
      Complex complex1 = complex0.ZERO.pow(1988.51580123);
      Complex complex2 = new Complex(1988.51580123, (-2.2798356346688802E-7));
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex0.NaN.multiply(142.126);
      Complex complex5 = complex3.I.add(complex0);
      Complex complex6 = complex0.add((-1.899407107267079E-8));
      Complex complex7 = complex6.exp();
      Complex complex8 = complex6.sqrt();
      boolean boolean0 = complex7.equals(complex6);
      Complex complex9 = complex0.subtract(complex7);
      Complex complex10 = complex1.ZERO.multiply((-2.2798356346688802E-7));
      Complex complex11 = Complex.valueOf((-3181.15713219084), 2039.134573452046);
      Complex complex12 = complex11.NaN.reciprocal();
      Complex complex13 = complex12.ONE.divide(214.978996744);
      Complex complex14 = complex11.INF.acos();
      double double0 = complex14.getArgument();
      Complex complex15 = Complex.valueOf(2039.134573452046);
      Complex complex16 = complex15.ZERO.tan();
      Complex complex17 = complex6.sin();
      Complex complex18 = complex17.INF.log();
      Complex complex19 = Complex.valueOf(2039.134573452046, (-3181.15713219084));
      Complex complex20 = complex17.multiply(1);
      Complex complex21 = complex20.ONE.log();
      boolean boolean1 = complex3.isNaN();
      Complex complex22 = complex8.pow(Double.NaN);
      Complex complex23 = complex2.sin();
      Complex complex24 = complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      double double0 = complex0.INF.abs();
      Complex complex2 = complex0.add(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.multiply(1848);
      Object object0 = new Object();
      Complex complex5 = complex1.I.pow(complex3);
      Complex complex6 = complex5.ZERO.cosh();
      boolean boolean0 = complex0.equals(object0);
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex7.I.add(Double.POSITIVE_INFINITY);
      Complex complex9 = complex1.subtract(1646.097116);
      Complex complex10 = complex2.asin();
      Complex complex11 = complex1.log();
      ComplexField complexField1 = complex0.getField();
      Complex complex12 = complex0.divide(complex11);
      Complex complex13 = complex11.tanh();
      Complex complex14 = complex2.exp();
      ComplexField complexField2 = complex14.getField();
      Complex complex15 = complex11.subtract((-2063.0));
      Complex complex16 = complex15.I.sin();
      Complex complex17 = complex15.ZERO.add(complex10);
      Complex complex18 = complex17.ONE.reciprocal();
      Complex complex19 = complex12.INF.divide((-2063.0));
      Complex complex20 = complex15.INF.sqrt();
      double double1 = complex12.getReal();
      Complex complex21 = complex10.createComplex(Double.NaN, Double.POSITIVE_INFINITY);
      double double2 = complex10.abs();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(3392.0);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.INF.pow(complex2);
      Complex complex4 = Complex.valueOf(5274.337936931084);
      Complex complex5 = complex0.ZERO.atan();
      double double0 = complex0.getArgument();
      Complex complex6 = complex1.add(0.0);
      boolean boolean0 = complex5.isNaN();
      boolean boolean1 = complex5.isInfinite();
      Complex complex7 = Complex.valueOf(5274.337936931084);
      Complex complex8 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1654.65, 540.4305306053);
      Complex complex2 = complex0.ONE.divide(540.4305306053);
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.valueOf(540.4305306053);
      Complex complex5 = complex3.atan();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex6.asin();
      String string0 = complex2.toString();
      Complex complex8 = complex3.ZERO.tanh();
      Complex complex9 = complex7.sinh();
      Complex complex10 = complex3.acos();
      Complex complex11 = complex3.tan();
      Complex complex12 = complex7.pow(0.0);
      int int0 = complex0.hashCode();
      String string1 = complex1.toString();
      double double0 = complex6.abs();
      Complex complex13 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.sqrt1z();
      Object object0 = complex1.INF.readResolve();
      Complex complex3 = complex0.exp();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex3.I.sqrt1z();
      double double0 = complex3.getReal();
      boolean boolean0 = complex3.isNaN();
      Complex complex6 = complex1.I.reciprocal();
      Complex complex7 = complex1.ONE.cosh();
      Complex complex8 = complex0.multiply(complex2);
      Complex complex9 = complex1.tanh();
      int int0 = complex9.ONE.hashCode();
      Complex complex10 = complex3.multiply(0);
      Complex complex11 = complex4.subtract(Double.NaN);
      Complex complex12 = complex11.INF.pow(287.76);
      Complex complex13 = complex2.conjugate();
      Complex complex14 = complex8.multiply(0);
      Complex complex15 = complex8.acos();
      Complex complex16 = complex1.divide(Double.NaN);
      double double1 = complex10.abs();
      boolean boolean1 = complex5.isNaN();
      Complex complex17 = complex15.multiply(1291);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex1.NaN.divide(0.0);
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex0.add(249.7);
      Complex complex6 = complex5.ONE.atan();
      Complex complex7 = complex6.I.add(249.7);
      Complex complex8 = complex5.ONE.add(complex0);
      Complex complex9 = complex5.I.tan();
      int int0 = complex1.hashCode();
      Complex complex10 = complex3.asin();
      Complex complex11 = complex10.I.multiply(299.0);
      int int1 = complex0.INF.hashCode();
      String string0 = complex0.toString();
      String string1 = complex4.I.toString();
      Complex complex12 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex12.ONE.getField();
      Complex complex13 = complex4.asin();
      Complex complex14 = complex1.acos();
      Complex complex15 = complex14.INF.atan();
      List<Complex> list0 = complex0.nthRoot(742);
      Complex complex16 = complex10.subtract((-1026.11));
      Complex complex17 = complex5.multiply(0.0);
      Complex complex18 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex2.NaN.divide(4.4266130556431266E-266);
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex2.ZERO.reciprocal();
      Complex complex7 = complex4.NaN.add(20.0);
      Complex complex8 = complex7.ZERO.sqrt();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex5.asin();
      Complex complex11 = complex4.cos();
      Complex complex12 = complex11.divide(complex0);
      double double0 = complex4.getArgument();
      Complex complex13 = complex10.add(896.0);
      Complex complex14 = complex2.tanh();
      double double1 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.subtract((-9.924196700842429E-48));
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex0.createComplex((-9.924196700842429E-48), 0.0);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.INF.multiply(complex3);
      Complex complex6 = complex2.acos();
      Complex complex7 = complex3.multiply((-9.924196700842429E-48));
      Complex complex8 = complex7.NaN.asin();
      Complex complex9 = complex8.NaN.cos();
      Complex complex10 = complex0.add(complex7);
      Object object0 = complex3.readResolve();
      int int0 = complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = Complex.valueOf(1.0, 5.462874707256208E-270);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.I.exp();
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex2.INF.sqrt1z();
      Complex complex5 = complex0.I.asin();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex1.NaN.sqrt1z();
      Complex complex8 = complex7.NaN.subtract(complex0);
      Complex complex9 = complex0.INF.subtract(complex1);
      double double0 = complex0.getImaginary();
      double double1 = complex0.getImaginary();
      Complex complex10 = Complex.valueOf((-523.63));
      Complex complex11 = complex10.ZERO.add(0.0);
      Complex complex12 = Complex.valueOf((-1.0), 1663.84857);
      Complex complex13 = complex7.subtract(complex10);
      Complex complex14 = complex13.I.sin();
      Complex complex15 = complex8.sin();
      Complex complex16 = Complex.valueOf(20.0, 1.0);
      Complex complex17 = complex16.ONE.divide(complex7);
      Complex complex18 = complex9.pow(1560.874);
      Complex complex19 = Complex.valueOf(1560.874, (-1130.291777));
      Complex complex20 = complex10.reciprocal();
  }
}
