/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 08:27:46 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(7.674361647125109E-9, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(0.4794255495071411, 0.0);
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = Complex.valueOf(0.4794255495071411, (-4.1900132227036916E-73));
      Complex complex4 = complex2.ONE.multiply(4147);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.I.multiply(4147);
      Complex complex7 = complex0.add(complex5);
      Complex complex8 = complex7.subtract(Double.POSITIVE_INFINITY);
      Complex complex9 = complex7.asin();
      Complex complex10 = complex9.ZERO.asin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex11 = complex9.cosh();
      Complex complex12 = complex2.ZERO.exp();
      Complex complex13 = complex12.NaN.cosh();
      List<Complex> list0 = complex11.nthRoot(4147);
      Complex complex14 = complex7.NaN.acos();
      Object object0 = complex5.readResolve();
      Object object1 = complex1.readResolve();
      Complex complex15 = complex11.atan();
      Complex complex16 = complex15.subtract(complex2);
      Complex complex17 = Complex.valueOf(0.0);
      Complex complex18 = complex6.multiply((double) 4147);
      Complex complex19 = complex18.ONE.pow(complex15);
      boolean boolean1 = complex9.isNaN();
      Complex complex20 = complex6.subtract(0.4794255495071411);
      Complex complex21 = complex17.sqrt1z();
      Complex complex22 = complex2.reciprocal();
      Complex complex23 = complex12.subtract(complex1);
      Complex complex24 = complex11.divide(complex13);
      Complex complex25 = complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.sqrt();
      double double0 = (-2421.895742663489);
      Complex complex3 = Complex.valueOf((-2421.895742663489));
      Complex complex4 = complex2.INF.exp();
      double double1 = complex4.INF.getArgument();
      Complex complex5 = complex4.NaN.tanh();
      double double2 = 4561.7;
      Complex complex6 = complex3.ONE.divide(4561.7);
      Object object0 = new Object();
      boolean boolean0 = complex3.equals(object0);
      try { 
        complex1.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-1319.0), (-1319.0));
      try { 
        complex0.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.divide((-3527.3223));
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = Complex.valueOf((-3527.3223), (-3527.3223));
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex0.multiply((-2980));
      Complex complex7 = complex6.add((-3527.3223));
      Complex complex8 = complex0.acos();
      Complex complex9 = complex8.ONE.reciprocal();
      Complex complex10 = complex8.INF.tan();
      Complex complex11 = complex7.pow(complex6);
      Complex complex12 = complex1.subtract((-978.23872669011));
      Complex complex13 = new Complex((-20.0), Double.NaN);
      Complex complex14 = complex12.pow(complex13);
      ComplexField complexField0 = complex1.getField();
      Complex complex15 = complex10.add(complex1);
      Complex complex16 = complex3.negate();
      Complex complex17 = Complex.NaN;
      Complex complex18 = Complex.NaN;
      Complex complex19 = complex17.ZERO.add(complex18);
      Complex complex20 = complex6.divide(complex17);
      Complex complex21 = complex3.sinh();
      Complex complex22 = complex15.divide(complex6);
      String string0 = complex10.toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(629.14502249137, (-1.0));
      Complex complex1 = complex0.ZERO.divide((-1.0));
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex0.multiply(Double.NaN);
      Complex complex4 = complex3.INF.multiply(complex1);
      Complex complex5 = complex4.NaN.sqrt1z();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.ONE.subtract(complex4);
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex0.exp();
      Complex complex10 = complex9.tan();
      Complex complex11 = Complex.valueOf((-738.0754944280557));
      Complex complex12 = complex11.INF.conjugate();
      Complex complex13 = complex12.NaN.subtract((-1105.72587233));
      Complex complex14 = complex11.INF.divide(complex10);
      Complex complex15 = complex2.tan();
      Complex complex16 = complex0.multiply(complex15);
      Complex complex17 = complex16.sinh();
      Complex complex18 = complex3.INF.log();
      Complex complex19 = complex17.sqrt();
      Complex complex20 = complex15.ONE.pow((-1.0));
      Complex complex21 = complex16.ZERO.reciprocal();
      Complex complex22 = complex17.pow(complex15);
      double double0 = complex5.getArgument();
      boolean boolean0 = complex16.isNaN();
      Complex complex23 = complex15.add(0.0);
      Complex complex24 = complex23.INF.asin();
      Complex complex25 = complex3.createComplex(Double.NaN, (-20.0));
      double double1 = complex16.getReal();
      Complex complex26 = complex6.add(complex15);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf((-1.0), 0.0);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.cos();
      try { 
        complex1.INF.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.ONE.divide((-1618.28198));
      Complex complex3 = complex2.ZERO.createComplex((-1618.28198), (-1618.28198));
      Complex complex4 = complex0.add((-1249.375));
      Object object0 = complex4.ONE.readResolve();
      double double0 = complex0.abs();
      Complex complex5 = complex4.pow((-1618.28198));
      Complex complex6 = complex0.multiply(3168.2);
      Complex complex7 = complex0.subtract(0.0);
      Complex complex8 = complex7.NaN.subtract(complex6);
      Complex complex9 = complex7.INF.cos();
      Complex complex10 = complex7.I.add((-20.0));
      Complex complex11 = complex6.INF.tanh();
      double double1 = complex7.NaN.abs();
      int int1 = complex6.hashCode();
      Complex complex12 = complex2.sqrt();
      Complex complex13 = complex5.acos();
      Complex complex14 = complex12.cosh();
      Complex complex15 = complex12.tan();
      ComplexField complexField0 = complex10.getField();
      Complex complex16 = complex13.multiply((-2596));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex1.acos();
      Complex complex5 = complex2.multiply(658.7481423606148);
      Complex complex6 = complex3.I.divide(658.7481423606148);
      String string0 = complex1.toString();
      Complex complex7 = complex5.INF.subtract(658.7481423606148);
      boolean boolean0 = complex5.equals(complex3);
      Complex complex8 = complex1.pow(complex2);
      Complex complex9 = complex8.ZERO.pow(complex7);
      Complex complex10 = complex8.INF.divide(658.7481423606148);
      try { 
        complex2.nthRoot((-1484));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,484
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-449.72849951908), (-3813.70067));
      String string0 = complex0.NaN.toString();
      Complex complex1 = new Complex(116.9652568644363, 116.9652568644363);
      Complex complex2 = Complex.valueOf((-449.72849951908));
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Complex complex4 = complex0.subtract((-3813.70067));
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = complex4.INF.reciprocal();
      String string1 = complex4.ONE.toString();
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.add((-3813.70067));
      Complex complex9 = complex8.INF.divide(complex0);
      Complex complex10 = complex8.cosh();
      Complex complex11 = complex10.ONE.multiply(complex4);
      Complex complex12 = Complex.valueOf(116.9652568644363, (-3813.70067));
      List<Complex> list0 = complex5.nthRoot(381);
      Complex complex13 = Complex.I;
      Complex complex14 = complex12.add(complex13);
      Complex complex15 = complex1.exp();
      Complex complex16 = complex14.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ZERO.getField();
      String string0 = complex0.NaN.toString();
      double double0 = complex0.abs();
      String string1 = complex0.toString();
      Complex complex1 = Complex.valueOf(0.0, (-1213.12337));
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex1.reciprocal();
      ComplexField complexField1 = complex1.getField();
      boolean boolean0 = complex2.isInfinite();
      Complex complex4 = complex0.multiply(17);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-607.24719466125));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.multiply((-3373));
      try { 
        complex0.ONE.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1403.32607), (-1403.32607));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.pow((-1403.32607));
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.INF.log();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.INF.pow(0.0);
      Complex complex7 = complex6.NaN.pow(complex5);
      Complex complex8 = complex2.NaN.negate();
      Complex complex9 = complex2.cos();
      Complex complex10 = complex9.multiply(complex0);
      Object object0 = complex10.NaN.readResolve();
      Complex complex11 = complex2.cosh();
      Complex complex12 = complex1.createComplex((-2393.628682518), (-1403.32607));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex0.pow(935.411271803669);
      Complex complex5 = complex4.asin();
      double double0 = Double.NaN;
      Complex complex6 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex7 = complex0.I.divide(935.411271803669);
      Complex complex8 = complex5.NaN.tan();
      Complex complex9 = complex8.tan();
      ComplexField complexField0 = complex5.getField();
      Complex complex10 = complex0.ZERO.subtract(complex3);
      ComplexField complexField1 = complex0.getField();
      Complex complex11 = complex1.divide(935.411271803669);
      Complex complex12 = complex11.NaN.subtract(complex8);
      double double1 = complex12.ZERO.abs();
      try { 
        complex4.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3284.0);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = complex2.multiply((-1118));
      Complex complex6 = complex4.asin();
      Complex complex7 = complex2.asin();
      String string0 = complex4.toString();
      Complex complex8 = complex7.NaN.multiply(0.0);
      Complex complex9 = complex1.sin();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex1.tanh();
      Complex complex12 = complex6.reciprocal();
      List<Complex> list0 = complex7.nthRoot(3471);
      Complex complex13 = complex9.pow(complex8);
      Complex complex14 = complex12.sin();
      Complex complex15 = Complex.valueOf(0.0);
      boolean boolean0 = complex9.isInfinite();
      Complex complex16 = complex3.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2517.259499719212, (-1365.724755252967));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex1.NaN.cosh();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.I.divide(complex5);
      Complex complex8 = complex1.atan();
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex9.ZERO.pow(2517.259499719212);
      double double0 = complex9.I.abs();
      Complex complex11 = complex7.multiply(2517.259499719212);
      double double1 = complex11.abs();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-1924.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex1.ZERO.divide(complex0);
      Complex complex5 = complex0.sin();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex4.ZERO.conjugate();
      Complex complex7 = complex0.add(2270.2069993153);
      ComplexField complexField0 = complex1.getField();
      Complex complex8 = complex7.NaN.sqrt1z();
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex7.atan();
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex7.acos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(245.682905);
      Complex complex2 = complex1.NaN.pow(245.682905);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex0.createComplex((-1082.02), (-1082.02));
      Complex complex6 = complex5.NaN.atan();
      Complex complex7 = complex0.I.multiply((-1082.02));
      Complex complex8 = complex5.cos();
      Complex complex9 = complex5.reciprocal();
      Complex complex10 = complex9.INF.acos();
      Complex complex11 = Complex.valueOf((-1022.276), (-1082.02));
      Complex complex12 = complex11.sin();
      Complex complex13 = complex12.I.log();
      boolean boolean0 = complex7.isNaN();
      double double0 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.subtract((-1414.319162839354));
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex0.ZERO.cos();
      Complex complex5 = complex0.subtract((-865.428));
      double double0 = complex5.NaN.getArgument();
      Complex complex6 = complex4.INF.sin();
      Complex complex7 = complex5.INF.conjugate();
      int int0 = complex7.INF.hashCode();
      double double1 = complex0.getImaginary();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex9.ONE.subtract(complex4);
      Complex complex11 = complex4.multiply((-4187));
      Complex complex12 = complex3.sqrt1z();
      Complex complex13 = complex9.add((-1423.0009706495734));
      Complex complex14 = complex11.add((-1423.0009706495734));
      Complex complex15 = new Complex(902.4724);
      Complex complex16 = complex4.subtract(complex15);
      Complex complex17 = complex13.pow(complex16);
      String string0 = complex17.toString();
      double double2 = complex9.getReal();
      Object object0 = complex4.readResolve();
      Complex complex18 = complex0.subtract(complex17);
      Complex complex19 = complex13.createComplex((-865.428), 1.4142135623730951);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      double double0 = complex1.ZERO.getArgument();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex1.ONE.add(0.0);
      boolean boolean0 = complex1.isNaN();
      ComplexField complexField0 = complex0.getField();
      boolean boolean1 = complex0.isInfinite();
      Complex complex5 = complex2.subtract(complex1);
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex4.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(5274.477, 5274.477);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex1.acos();
      int int0 = complex3.ONE.hashCode();
      Complex complex4 = complex3.NaN.subtract(complex2);
      Complex complex5 = complex3.divide(complex2);
      Complex complex6 = complex5.I.sinh();
      double double0 = complex1.abs();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex2.pow(790.929184087);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1854.454930996, 1854.454930996);
      Complex complex1 = complex0.INF.multiply(1);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.asin();
      Object object0 = complex0.readResolve();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.INF.add(2768.0);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex1.tan();
      double double0 = Double.NaN;
      Complex complex5 = complex1.ONE.sqrt();
      Complex complex6 = complex5.ONE.subtract(Double.NaN);
      Complex complex7 = Complex.valueOf(Double.NaN);
      double double1 = complex1.getReal();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex8.NaN.tan();
      double double2 = 20.0;
      try { 
        complex5.ONE.nthRoot((-4952));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,952
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.NaN.multiply(1005);
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = Complex.valueOf((double) 1005);
      Complex complex4 = complex2.ZERO.divide(complex0);
      Complex complex5 = complex1.I.cosh();
      List<Complex> list0 = complex4.NaN.nthRoot(1005);
      Complex complex6 = complex1.exp();
      Complex complex7 = complex1.ONE.multiply(complex4);
      Complex complex8 = complex1.ZERO.multiply(complex0);
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex9.atan();
      Complex complex11 = Complex.valueOf(2844.7);
      Complex complex12 = complex11.ONE.pow(Double.NaN);
      double double0 = complex9.abs();
      Complex complex13 = complex0.add((double) 1005);
      Complex complex14 = complex6.conjugate();
      Complex complex15 = complex14.tanh();
      Complex complex16 = complex14.multiply(complex15);
      Complex complex17 = complex5.multiply(1005);
      Complex complex18 = complex3.tanh();
      Complex complex19 = complex17.cosh();
      Complex complex20 = complex4.pow((-1874.8158272190337));
      Complex complex21 = complex6.sqrt1z();
      Complex complex22 = complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = new Complex(1.0);
      Complex complex4 = complex2.ONE.subtract(complex3);
      Complex complex5 = complex0.multiply(complex1);
      double double0 = complex1.NaN.getArgument();
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex1.ZERO.createComplex(903, (-245.9256312674916));
      List<Complex> list0 = complex5.nthRoot(903);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex8.ONE.cos();
      Complex complex10 = complex1.multiply((-2914));
      Complex complex11 = complex7.sinh();
      Complex complex12 = complex8.cosh();
      double double1 = complex9.getReal();
      Complex complex13 = Complex.valueOf(0.0);
      Complex complex14 = complex10.createComplex(0.0, (-245.9256312674916));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = Complex.valueOf((-523.99830639286));
      double double1 = complex0.NaN.abs();
      double double2 = complex0.abs();
      Complex complex2 = complex0.I.sin();
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex0.getField();
      boolean boolean1 = complex1.equals("C]D:");
      Complex complex3 = Complex.valueOf(20.0, Double.NaN);
      Complex complex4 = complex0.sin();
      Complex complex5 = new Complex(1.0);
      Complex complex6 = complex2.subtract(complex5);
      Complex complex7 = Complex.valueOf(1.0);
      String string0 = complex6.toString();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex8.I.negate();
      Complex complex10 = complex4.exp();
      boolean boolean2 = complex4.isNaN();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.add(0.0);
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex1.INF.divide(Double.NaN);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex0.I.exp();
      Complex complex7 = complex5.ONE.divide(complex1);
      Complex complex8 = complex5.subtract(complex2);
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.ONE.subtract(complex7);
      boolean boolean0 = complex3.equals(complex9);
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex11.multiply((-1304));
      Complex complex13 = complex2.tan();
      Complex complex14 = complex0.sqrt();
      Complex complex15 = complex1.createComplex(Double.NaN, (-1304));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.pow(1917.0);
      Object object0 = complex1.readResolve();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex0.INF.subtract(complex1);
      Complex complex5 = complex3.cos();
      Complex complex6 = complex0.divide(complex1);
      try { 
        complex3.nthRoot((-1173));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,173
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide((-20.0));
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = complex1.sin();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex3.ZERO.add(complex4);
      Complex complex7 = complex2.ZERO.atan();
      ComplexField complexField0 = complex3.getField();
      Complex complex8 = complex2.pow(complex4);
      Complex complex9 = complex8.ZERO.asin();
      Complex complex10 = complex9.I.acos();
      Complex complex11 = complex8.NaN.reciprocal();
      Complex complex12 = complex11.ONE.negate();
      double double0 = complex4.abs();
      Complex complex13 = complex2.exp();
      Complex complex14 = complex0.atan();
      Complex complex15 = complex2.add(Double.NaN);
      Complex complex16 = complex10.reciprocal();
      Complex complex17 = complex11.pow(1395.1101894);
      Complex complex18 = complex12.sqrt1z();
      boolean boolean0 = complex11.isNaN();
      Complex complex19 = complex16.createComplex(0.0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2158.0), (-2158.0));
      Complex complex1 = Complex.valueOf((-2158.0), (-2158.0));
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.INF.acos();
      Complex complex4 = complex1.divide(complex0);
      double double0 = complex1.ZERO.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.pow(4028.7462);
      Complex complex6 = complex5.ZERO.cosh();
      Complex complex7 = complex5.negate();
      int int0 = complex5.ZERO.hashCode();
      Complex complex8 = complex5.divide(complex7);
      double double1 = complex8.abs();
      Complex complex9 = complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(2.716759624268743E271);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex1.NaN.acos();
      Complex complex5 = complex4.ONE.tanh();
      Complex complex6 = Complex.valueOf(2.716759624268743E271);
      Complex complex7 = Complex.valueOf(2.716759624268743E271, (-810.1881162));
      Complex complex8 = complex0.tan();
      Complex complex9 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.pow(complex0);
      boolean boolean0 = complex1.isInfinite();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.NaN.exp();
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex1.NaN.acos();
      Complex complex4 = complex0.sin();
      String string1 = complex0.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1757.1524986375027), (-1757.1524986375027));
      String string0 = complex0.NaN.toString();
      double double0 = complex0.getImaginary();
      double double1 = complex0.getReal();
      Complex complex1 = complex0.pow((-1757.1524986375027));
      Complex complex2 = complex1.ONE.add((-1757.1524986375027));
      Complex complex3 = complex1.INF.sqrt1z();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2486.86258124));
      Complex complex1 = complex0.I.multiply(1);
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.createComplex((-2486.86258124), (-1122.42255145));
      String string0 = complex3.ONE.toString();
      Complex complex4 = Complex.valueOf(0.0, (-1122.42255145));
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(1.1409211158752441);
      Complex complex1 = complex0.NaN.asin();
      int int0 = complex1.INF.hashCode();
      double double0 = complex1.ONE.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.ZERO.sinh();
      boolean boolean0 = complex0.equals(object0);
      boolean boolean1 = complex0.isInfinite();
      Complex complex3 = complex1.multiply(517);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = complex4.acos();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex5.add(complex7);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = Complex.valueOf(536.84);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex1.divide(132.609645);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(7);
      Complex complex2 = complex0.add((-2094.52003195));
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.add(0.48068851232528687);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex5.negate();
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-626.0));
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.INF.cos();
      Object object0 = complex0.INF.readResolve();
      Complex complex3 = complex0.I.tan();
      Complex complex4 = complex3.NaN.tan();
      List<Complex> list0 = complex0.nthRoot(1);
      List<Complex> list1 = complex3.NaN.nthRoot(1);
      Complex complex5 = complex3.ONE.asin();
      Complex complex6 = complex5.NaN.tanh();
      Complex complex7 = complex6.NaN.subtract(complex3);
      String string0 = complex0.toString();
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex8.createComplex((-626.0), 2716.6691);
      double double0 = complex9.getArgument();
      Object object1 = complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(6.589235682116406E83, 6.589235682116406E83);
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.multiply((-177));
      Complex complex2 = complex1.ONE.tanh();
      Object object0 = complex2.ONE.readResolve();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.I.conjugate();
      Complex complex5 = complex3.sqrt();
      double double1 = complex2.getImaginary();
      Complex complex6 = complex5.log();
      Complex complex7 = complex6.I.tanh();
      Complex complex8 = complex6.tan();
      double double2 = complex4.getImaginary();
      Complex complex9 = complex4.sin();
      Complex complex10 = Complex.valueOf(664.860883775, (double) (-177));
      Complex complex11 = complex8.subtract(complex2);
      Complex complex12 = complex11.INF.negate();
      double double3 = complex10.getImaginary();
      Complex complex13 = complex10.multiply((-177));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.atan();
      double double0 = complex0.NaN.getArgument();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.createComplex((-470.86117183), (-470.86117183));
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-377));
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = complex4.add((double) (-377));
      try { 
        complex1.INF.nthRoot((-377));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -377
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(125.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.ZERO.divide(complex3);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.NaN.multiply(1898.82);
      Complex complex7 = complex0.log();
      Complex complex8 = complex6.INF.pow(715.176544082657);
      Complex complex9 = complex7.ZERO.cosh();
      Complex complex10 = complex4.cos();
      Complex complex11 = complex0.createComplex(125.0, 125.0);
      Complex complex12 = complex11.pow(complex5);
      int int0 = complex6.hashCode();
      Complex complex13 = complex6.exp();
      Complex complex14 = complex5.multiply(complex13);
      Complex complex15 = complex10.add(2.872649515690124E56);
      Complex complex16 = Complex.valueOf(Double.POSITIVE_INFINITY, 715.176544082657);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-45.14492082622856), (-45.14492082622856));
      Complex complex1 = Complex.valueOf((-45.14492082622856));
      Complex complex2 = complex1.log();
      String string0 = complex1.ONE.toString();
      Complex complex3 = complex0.ONE.divide(complex1);
      Complex complex4 = complex3.NaN.acos();
      List<Complex> list0 = complex1.I.nthRoot(2676);
      ComplexField complexField0 = complex4.INF.getField();
      Complex complex5 = complex3.negate();
      double double0 = complex5.I.getArgument();
      Complex complex6 = complex5.INF.pow(complex1);
      double double1 = complex0.ZERO.abs();
      String string1 = complex0.ZERO.toString();
      Object object0 = complex0.readResolve();
      double double2 = complex0.abs();
      Complex complex7 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = Complex.valueOf(0.0);
      String string0 = complex3.toString();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = (-945.0);
      double double1 = (-2408.0);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = Complex.valueOf((-945.0), (-2408.0));
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.INF.conjugate();
      Complex complex5 = complex3.INF.subtract(complex2);
      Complex complex6 = complex5.I.negate();
      double double2 = complex0.getImaginary();
      int int0 = complex1.ZERO.hashCode();
      double double3 = complex0.getImaginary();
      Complex complex7 = complex1.conjugate();
      try { 
        complex7.I.nthRoot((-327));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -327
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ZERO.abs();
      Object object0 = complex0.readResolve();
      Object object1 = complex0.readResolve();
      double double1 = complex0.getReal();
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.INF.tan();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.ONE.divide(304.6);
      Complex complex3 = complex0.add(304.6);
      Complex complex4 = complex2.reciprocal();
      double double0 = complex4.ZERO.getArgument();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex3.add(304.6);
      Complex complex7 = complex3.ONE.divide((-436.51812562969));
      Complex complex8 = complex2.add((-436.51812562969));
      Complex complex9 = complex8.multiply(complex0);
      Complex complex10 = complex9.cosh();
      ComplexField complexField0 = complex5.getField();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(1625.06, (-135.57845493238));
      Complex complex1 = Complex.valueOf(0.0, 1625.06);
      Complex complex2 = complex0.add(1625.06);
      Complex complex3 = complex0.I.sin();
      String string0 = complex0.INF.toString();
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = Complex.valueOf((-135.57845493238), 0.0);
      Complex complex6 = complex4.INF.sin();
      Complex complex7 = Complex.valueOf((-1542.20656242), (-1542.20656242));
      boolean boolean0 = complex0.equals(complex1);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex7.multiply(3.3527476928456816E267);
      Complex complex10 = complex4.subtract(3.3527476928456816E267);
      Complex complex11 = complex10.add(0.0);
      Complex complex12 = complex8.negate();
      Complex complex13 = complex11.multiply((double) 1);
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.subtract((-2191.45));
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.subtract(0.0);
      int int0 = complex2.hashCode();
      Complex complex4 = complex0.add((-2191.45));
      List<Complex> list0 = complex3.ONE.nthRoot(17);
      Complex complex5 = complex4.I.sqrt();
      Object object0 = complex3.readResolve();
      Complex complex6 = complex1.log();
      Complex complex7 = complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-292.03276));
      Complex complex1 = complex0.add((-292.03276));
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex1.divide((-292.03276));
      Complex complex5 = complex1.ZERO.atan();
      Complex complex6 = complex4.reciprocal();
      double double0 = complex6.getArgument();
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex6.getField();
      Complex complex7 = complex3.subtract((-292.03276));
      Complex complex8 = complex7.INF.sin();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex3.NaN.sqrt();
      Complex complex11 = complex6.createComplex((-292.03276), 0.0);
      Complex complex12 = complex3.cosh();
      boolean boolean0 = complex12.isInfinite();
      Complex complex13 = complex9.asin();
      Complex complex14 = complex11.atan();
      double double1 = complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3764.3));
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.ZERO.sqrt();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.sin();
      String string0 = complex2.INF.toString();
      double double1 = complex2.getArgument();
      double double2 = complex0.getArgument();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = complex0.add((-3764.3));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply((-391.0637036787127));
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tan();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3076.968886852177), 0.0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = Complex.valueOf(1802.8982);
      String string0 = complex0.toString();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex1.INF.divide(complex0);
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex5 = complex0.sinh();
      double double0 = complex1.getReal();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex0.createComplex(0.0, (-2245.4));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.NaN.pow(1759.0414144);
      Complex complex4 = complex1.multiply(350.0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.add((-2981.7775));
      Complex complex3 = complex0.ONE.multiply(complex1);
      double double0 = complex0.abs();
      Complex complex4 = complex1.multiply((-2981.7775));
      Complex complex5 = complex0.cos();
      Complex complex6 = complex4.multiply(complex1);
      Complex complex7 = complex6.ONE.add((-2981.7775));
      Object object0 = complex3.readResolve();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.NaN.multiply((-439));
      Complex complex10 = complex4.createComplex((-4.6694407626686244E235), (-1740.567928909053));
      double double1 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-1141.08372355));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex2.INF.createComplex((-1589.13372743), (-1141.08372355));
      Complex complex4 = complex1.INF.multiply(complex0);
      Complex complex5 = complex0.ONE.add(complex1);
      Complex complex6 = complex0.pow((-1141.08372355));
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex5.acos();
      int int0 = complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 3770.0426778743667);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.ZERO.sin();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-472.946));
      Complex complex1 = complex0.sin();
      List<Complex> list0 = complex1.nthRoot(31);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1053.0), 1.0624175071716309);
      Complex complex1 = complex0.ZERO.add((-1053.0));
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex0.multiply((-1.0));
      Complex complex3 = complex0.pow((-838.36));
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex0.add(0.2644653916358948);
      boolean boolean0 = complex3.equals(complex0);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.ZERO.acos();
      double double1 = complex7.abs();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 3433.461695123);
      Complex complex1 = complex0.ONE.multiply(20.0);
      Complex complex2 = complex0.createComplex(0.0, 1.1976919074588434E201);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.acos();
      Object object0 = complex1.readResolve();
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = complex2.exp();
      Complex complex7 = complex6.I.divide(complex4);
      Complex complex8 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 897.008284);
      Complex complex1 = complex0.add(897.008284);
      Complex complex2 = complex1.conjugate();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      double double0 = complex1.INF.abs();
      Complex complex2 = complex1.ONE.multiply((-1155.37076457));
      Complex complex3 = Complex.valueOf((-1155.37076457));
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, (-1155.37076457));
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.INF.negate();
      Complex complex7 = complex6.I.subtract(complex1);
      boolean boolean0 = complex0.isNaN();
      double double1 = complex0.I.abs();
      Complex complex8 = complex0.multiply(0.0);
      Complex complex9 = complex6.conjugate();
      Complex complex10 = complex6.add((-1155.37076457));
      int int0 = complex9.hashCode();
      Complex complex11 = complex10.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.multiply(complex1);
      List<Complex> list0 = complex0.nthRoot(351);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.I.multiply(1259);
      Complex complex4 = complex0.I.sqrt();
      double double0 = complex0.abs();
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-57.496));
      Complex complex1 = complex0.INF.conjugate();
      String string0 = complex0.ONE.toString();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = complex5.ONE.divide(2.6192569732666016);
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex10.add((-57.496));
      Object object0 = complex11.ZERO.readResolve();
      Complex complex12 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.I.divide((-2428.22596786721));
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.multiply(599);
      Complex complex6 = complex5.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.sin();
      Complex complex8 = complex3.createComplex(0.0, 599);
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.pow((-776.98592403909));
      Complex complex3 = complex1.pow((-776.98592403909));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.ONE.asin();
      Complex complex5 = complex2.add(1.3430213928222656);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.multiply(0);
      Complex complex4 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cos();
      double double0 = complex0.NaN.getArgument();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-3550.76711172));
      Complex complex2 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.NaN.pow(1043.47369620568);
      Complex complex6 = Complex.valueOf(6.283185307179586);
      Complex complex7 = complex5.ONE.multiply(7);
      double double0 = complex3.getReal();
      boolean boolean0 = complex0.isInfinite();
      Object object0 = complex1.readResolve();
      String string0 = complex1.toString();
      Complex complex8 = complex0.INF.createComplex(7, 685.6462934);
      Complex complex9 = complex4.NaN.subtract(6.283185307179586);
      Complex complex10 = complex5.INF.log();
      Complex complex11 = complex10.ONE.reciprocal();
      Complex complex12 = complex2.exp();
      Complex complex13 = complex2.acos();
      Object object1 = complex5.readResolve();
      Complex complex14 = complex4.sqrt1z();
      Complex complex15 = complex14.INF.add(complex2);
      Complex complex16 = complex14.I.subtract(complex13);
      Complex complex17 = complex1.reciprocal();
      Complex complex18 = complex8.pow((double) 7);
      Complex complex19 = complex3.INF.sin();
      Complex complex20 = complex4.cosh();
      Complex complex21 = complex6.multiply(complex7);
      Complex complex22 = Complex.valueOf(1043.47369620568);
      Complex complex23 = complex21.subtract(complex22);
      String string1 = complex2.toString();
      Complex complex24 = complex23.sinh();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(4.01780853635105E197);
      Complex complex2 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1199.4, 1199.4);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.I.divide(1199.4);
      Complex complex3 = complex2.acos();
      int int0 = complex0.I.hashCode();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex2.ONE.sin();
      Complex complex6 = Complex.valueOf(1.0, 2971.4185);
      Complex complex7 = complex5.I.cosh();
      String string0 = complex2.NaN.toString();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex2.acos();
      Complex complex10 = complex9.NaN.conjugate();
      List<Complex> list0 = complex1.NaN.nthRoot(957);
      Complex complex11 = complex2.subtract(0.0);
      Complex complex12 = complex10.negate();
      Complex complex13 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex14 = complex1.add(complex12);
      Complex complex15 = complex9.sinh();
      List<Complex> list1 = complex12.ONE.nthRoot(957);
      Complex complex16 = complex9.sqrt1z();
      Complex complex17 = complex16.ZERO.sin();
      Complex complex18 = complex17.ONE.tan();
      Complex complex19 = complex9.ONE.add(complex8);
      ComplexField complexField0 = complex6.getField();
      Complex complex20 = complex12.sqrt1z();
      String string1 = complex20.INF.toString();
      Complex complex21 = complex11.asin();
      double double0 = complex5.getReal();
      Complex complex22 = complex16.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.multiply((-856.1211));
      Complex complex3 = Complex.valueOf(5214.0, (-856.1211));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-945.901946826));
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.NaN.divide((-945.901946826));
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex2.ZERO.pow(379.7);
      Complex complex6 = complex5.acos();
      Complex complex7 = complex1.INF.pow((-945.901946826));
      Complex complex8 = complex5.tan();
      Complex complex9 = complex0.divide(0.0);
      String string0 = complex0.toString();
      Complex complex10 = complex9.multiply(37);
      Complex complex11 = complex0.exp();
      Complex complex12 = complex11.ZERO.reciprocal();
      Complex complex13 = complex10.pow((-945.901946826));
      Complex complex14 = complex10.conjugate();
      Complex complex15 = complex13.INF.multiply(7);
      double double0 = complex13.getReal();
      Complex complex16 = complex10.subtract(3843.65037178809);
      Complex complex17 = complex0.ONE.divide(complex3);
      Complex complex18 = complex8.reciprocal();
      Complex complex19 = complex9.pow(1.1333315586787883E145);
      double double1 = complex18.abs();
      Complex complex20 = complex10.sinh();
      Complex complex21 = complex15.conjugate();
      boolean boolean0 = complex9.isNaN();
      Complex complex22 = complex5.acos();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.createComplex(1.1339195187304043E246, 1.1339195187304043E246);
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex1.NaN.multiply(1);
      Complex complex3 = complex2.NaN.tanh();
      Object object1 = new Object();
      boolean boolean0 = complex0.equals(object1);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex4.subtract(complex3);
      Complex complex7 = complex2.multiply((-2801.5076128));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex2.NaN.multiply(730);
      String string0 = complex2.INF.toString();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex4.NaN.tanh();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex7.ZERO.sqrt();
      Complex complex9 = complex4.ZERO.multiply((-3.639873824357815E-8));
      Complex complex10 = complex9.INF.add(0.0);
      Complex complex11 = complex4.subtract(complex1);
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex1.equals(object0);
      double double0 = complex1.getArgument();
      Complex complex12 = complex6.createComplex(0.0, (-1340.183));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = (-1306);
      try { 
        complex0.nthRoot((-1306));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,306
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1542.130447645);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.I.multiply(4295);
      Complex complex5 = complex0.log();
      Complex complex6 = complex3.tanh();
  }
}
