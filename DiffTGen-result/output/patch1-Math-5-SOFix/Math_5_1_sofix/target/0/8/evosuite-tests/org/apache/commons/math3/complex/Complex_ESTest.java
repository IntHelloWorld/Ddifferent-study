/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 08:24:15 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.INF.asin();
      double double0 = complex3.INF.getArgument();
      Complex complex5 = complex0.I.add(complex4);
      Complex complex6 = complex1.ZERO.reciprocal();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex8.cos();
      Complex complex10 = complex1.subtract(complex2);
      Complex complex11 = complex9.acos();
      Complex complex12 = complex10.INF.log();
      Complex complex13 = complex10.divide(complex0);
      Complex complex14 = complex10.INF.multiply((-3149909.3858472435));
      Complex complex15 = complex14.ZERO.reciprocal();
      Complex complex16 = complex8.NaN.sqrt();
      String string0 = complex9.ONE.toString();
      Complex complex17 = complex8.conjugate();
      ComplexField complexField0 = complex0.getField();
      String string1 = complex1.toString();
      Complex complex18 = complex9.sqrt();
      String string2 = complex6.toString();
      boolean boolean0 = complex6.isInfinite();
      ComplexField complexField1 = complex0.getField();
      Complex complex19 = complex3.add((-3149909.3858472435));
      Complex complex20 = complex19.log();
      Complex complex21 = complex16.log();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cosh();
      try { 
        complex0.NaN.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1086.4));
      Complex complex1 = complex0.NaN.acos();
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = new Complex((-1086.4), (-699.92683661097));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.I.divide((-4011.101351));
      Complex complex6 = complex4.ONE.subtract((-699.92683661097));
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.NaN.createComplex(1.0, 1.0);
      String string0 = complex3.NaN.toString();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = Complex.valueOf(2502.0);
      Object object0 = new Object();
      boolean boolean0 = complex4.equals(object0);
      double double0 = complex1.getImaginary();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex3.sin();
      Complex complex9 = complex4.multiply((-319.271093096014));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(5.721951534729663E-8);
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex3.INF.divide(5.721951534729663E-8);
      Complex complex5 = complex3.NaN.asin();
      Complex complex6 = complex5.INF.reciprocal();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex1.ONE.abs();
      Complex complex7 = complex1.sin();
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex7.INF.negate();
      Complex complex10 = complex9.I.sqrt1z();
      Complex complex11 = complex9.acos();
      int int0 = complex0.hashCode();
      Complex complex12 = complex7.INF.pow(5.721951534729663E-8);
      Complex complex13 = complex12.I.tan();
      Complex complex14 = complex12.ZERO.sqrt1z();
      Complex complex15 = complex14.NaN.tan();
      Complex complex16 = complex15.INF.atan();
      Complex complex17 = complex1.tan();
      Complex complex18 = complex2.acos();
      Complex complex19 = complex18.add(complex0);
      Object object0 = complex18.readResolve();
      Complex complex20 = complex17.asin();
      Complex complex21 = complex0.sqrt1z();
      Complex complex22 = complex1.sqrt1z();
      Object object1 = complex21.ONE.readResolve();
      Complex complex23 = complex17.multiply(0.0);
      Complex complex24 = complex18.acos();
      Complex complex25 = complex12.conjugate();
      Object object2 = complex25.readResolve();
      boolean boolean0 = complex21.equals(object2);
      Complex complex26 = complex11.tanh();
      Complex complex27 = complex9.pow(complex13);
      Complex complex28 = complex16.negate();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.nthRoot(1094);
      double double0 = complex0.ONE.abs();
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = new Complex((-2.1534486893602122E-7), 1901.379852789);
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = Complex.valueOf(1822.9612);
      Complex complex4 = complex1.ONE.add(complex3);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex2.ONE.negate();
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = complex6.NaN.multiply(4019);
      Complex complex9 = complex8.I.reciprocal();
      Complex complex10 = complex0.multiply(complex5);
      Complex complex11 = complex2.NaN.createComplex((-270.4), 1822.9612);
      Object object0 = complex1.readResolve();
      Complex complex12 = complex2.createComplex(1901.379852789, (-2667.810416023));
      Complex complex13 = complex12.ONE.sqrt();
      Complex complex14 = complex1.acos();
      Complex complex15 = complex10.I.sinh();
      Complex complex16 = complex15.ONE.conjugate();
      Complex complex17 = complex0.exp();
      String string0 = complex10.toString();
      Complex complex18 = complex17.divide((-1379.7475));
      int int1 = complex17.hashCode();
      Complex complex19 = complex2.ONE.cos();
      ComplexField complexField0 = complex14.getField();
      Complex complex20 = complex2.subtract((-2.1534486893602122E-7));
      Complex complex21 = complex14.subtract(complex18);
      boolean boolean0 = complex21.equals(complex0);
      Complex complex22 = complex21.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      try { 
        complex0.NaN.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.add(0.0);
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.I.conjugate();
      double double0 = complex2.getReal();
      double double1 = complex2.getImaginary();
      double double2 = complex2.I.abs();
      Complex complex4 = complex1.createComplex(744.2741366915, 0.0);
      Complex complex5 = complex3.tanh();
      Complex complex6 = new Complex(Double.NaN);
      Complex complex7 = complex3.ONE.pow(complex6);
      Complex complex8 = complex2.NaN.sinh();
      Complex complex9 = complex8.ZERO.asin();
      Complex complex10 = complex4.I.atan();
      Complex complex11 = complex8.I.tan();
      Complex complex12 = complex0.NaN.cosh();
      Complex complex13 = Complex.valueOf(0.0);
      Complex complex14 = complex13.I.pow(complex3);
      Complex complex15 = complex4.I.subtract(complex0);
      double double3 = complex2.getArgument();
      Complex complex16 = complex4.divide(Double.NaN);
      Complex complex17 = complex16.I.pow(complex3);
      Complex complex18 = complex16.NaN.log();
      double double4 = complex16.abs();
      Complex complex19 = complex0.negate();
      Complex complex20 = complex0.add(complex3);
      Complex complex21 = complex1.sinh();
      Complex complex22 = complex3.conjugate();
      Complex complex23 = complex21.pow(complex22);
      List<Complex> list0 = complex23.ONE.nthRoot(1654);
      Complex complex24 = complex23.pow(complex11);
      Complex complex25 = complex1.tan();
      Complex complex26 = complex1.subtract(744.2741366915);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.I.subtract(0.0);
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = complex2.ZERO.tanh();
      Complex complex6 = complex2.ZERO.log();
      Complex complex7 = complex1.NaN.cosh();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex8.tan();
      Complex complex10 = complex9.I.sinh();
      String string0 = complex5.ONE.toString();
      Object object0 = complex0.readResolve();
      Complex complex11 = complex2.pow(complex1);
      Complex complex12 = complex11.add(0.0);
      Complex complex13 = complex11.NaN.divide(complex1);
      double double0 = complex11.getReal();
      Complex complex14 = complex1.tan();
      Complex complex15 = complex13.cos();
      Complex complex16 = complex10.createComplex(Double.NaN, 0.0);
      try { 
        complex10.nthRoot((-1323));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,323
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = Complex.valueOf(20.0, 0.0);
      Object object1 = complex1.I.readResolve();
      Complex complex2 = complex1.INF.createComplex(20.0, 0.0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = Complex.valueOf(20.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.divide(Double.NaN);
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex2.divide(6.283185307179586);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex1.tan();
      Complex complex7 = Complex.valueOf((-737.5113196554), 0.0);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex10 = complex6.multiply((-557));
      Complex complex11 = complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = Complex.valueOf(0.0);
      double double0 = complex1.INF.abs();
      Complex complex2 = complex0.ONE.multiply(20.0);
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 2054.0);
      Object object0 = complex1.readResolve();
      Complex complex5 = complex2.negate();
      Complex complex6 = Complex.valueOf(1443.9597023914, 0.49626702070236206);
      Complex complex7 = complex6.ZERO.tanh();
      Object object1 = complex7.ZERO.readResolve();
      Complex complex8 = complex0.divide(complex1);
      Complex complex9 = complex0.atan();
      Complex complex10 = complex9.multiply(complex4);
      Complex complex11 = complex9.ZERO.pow(complex2);
      Complex complex12 = complex8.divide(20.0);
      Complex complex13 = complex12.NaN.multiply(complex10);
      Complex complex14 = complex7.negate();
      double double1 = complex8.getImaginary();
      double double2 = complex4.abs();
      Complex complex15 = complex4.subtract(Double.NaN);
      Complex complex16 = complex15.ONE.sin();
      double double3 = complex1.getArgument();
      Complex complex17 = complex1.sinh();
      Complex complex18 = complex7.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(2292.562737);
      double double0 = complex0.ZERO.abs();
      double double1 = complex0.getReal();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.multiply(2292.562737);
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex3.ZERO.add(complex2);
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex2.pow(2292.562737);
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.pow(2292.562737);
      Complex complex9 = complex6.ONE.multiply(6.283185307179586);
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex10.INF.tan();
      boolean boolean0 = complex6.isNaN();
      double double2 = complex0.getImaginary();
      Complex complex12 = complex7.ONE.cosh();
      Complex complex13 = complex0.INF.pow(86.81);
      Complex complex14 = complex0.sin();
      Complex complex15 = complex8.add(0.0);
      Complex complex16 = complex8.INF.multiply(2292.562737);
      Complex complex17 = complex7.createComplex(0.0, 0.0);
      Complex complex18 = complex0.log();
      Complex complex19 = complex9.acos();
      Complex complex20 = complex0.pow(complex8);
      double double3 = complex18.getReal();
      Complex complex21 = complex6.multiply(complex7);
      Complex complex22 = complex18.createComplex(6.283185307179586, 2292.562737);
      Complex complex23 = complex18.tan();
      Complex complex24 = complex18.cosh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = Complex.valueOf(1480.604972, 1480.604972);
      Complex complex2 = complex0.ZERO.add((-2082.6271));
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex1.subtract((-3021.978141813581));
      Complex complex5 = complex4.NaN.subtract(complex1);
      Complex complex6 = complex4.NaN.divide((-3021.978141813581));
      Complex complex7 = complex0.INF.add(complex1);
      Complex complex8 = new Complex(Double.NaN, 0.0);
      Complex complex9 = complex0.divide(complex8);
      Complex complex10 = complex9.ONE.multiply((-2082.6271));
      Complex complex11 = complex5.ONE.pow(complex7);
      Complex complex12 = complex0.INF.sin();
      Complex complex13 = complex12.I.subtract(245.1);
      Complex complex14 = complex8.negate();
      Complex complex15 = complex14.ONE.log();
      Complex complex16 = complex14.I.acos();
      Complex complex17 = complex7.add((-3621.7216));
      Complex complex18 = new Complex(Double.NaN, 2533.59165653);
      Complex complex19 = complex17.ONE.subtract(complex18);
      Complex complex20 = Complex.valueOf((-3021.978141813581));
      Complex complex21 = complex8.cosh();
      Complex complex22 = complex5.pow(3.2195361624179725E244);
      Complex complex23 = Complex.valueOf(1082.0, 1082.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-376.8399308458124), 1079.964872477738);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.valueOf(432.49746913544675);
      Complex complex4 = complex3.NaN.multiply(2437);
      Complex complex5 = complex0.sin();
      double double0 = complex2.getImaginary();
      Complex complex6 = complex2.NaN.divide(432.49746913544675);
      Complex complex7 = complex1.INF.log();
      Complex complex8 = complex5.ONE.negate();
      Complex complex9 = Complex.valueOf(0.36358463764190674, (double) 2437);
      Complex complex10 = complex7.sqrt();
      Complex complex11 = complex1.divide((-376.8399308458124));
      Complex complex12 = complex11.I.sin();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex0.add(complex13);
      Complex complex15 = complex13.divide(7.73527930656735);
      Object object0 = complex14.INF.readResolve();
      Complex complex16 = complex5.ONE.cosh();
      Complex complex17 = complex15.INF.subtract((-967.8));
      Complex complex18 = complex1.divide(complex14);
      Complex complex19 = complex5.subtract(1336.419455);
      Complex complex20 = complex7.negate();
      int int0 = complex11.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1427.72788913179);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.ZERO.tanh();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.NaN.divide(0.0);
      Complex complex5 = complex4.cos();
      List<Complex> list0 = complex4.NaN.nthRoot(3521);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex2.INF.createComplex(3521, 1427.72788913179);
      Complex complex8 = complex6.ZERO.divide(0.0);
      Complex complex9 = complex0.I.log();
      Complex complex10 = complex9.I.pow(0.0);
      Complex complex11 = complex9.ZERO.subtract(0.0);
      List<Complex> list1 = complex2.nthRoot(911);
      double double0 = complex2.getReal();
      double double1 = complex0.getReal();
      Complex complex12 = complex2.sqrt1z();
      Complex complex13 = complex12.I.multiply(complex4);
      Complex complex14 = Complex.valueOf(Double.NaN);
      Complex complex15 = complex14.INF.pow(complex7);
      Complex complex16 = complex14.pow(complex0);
      Complex complex17 = complex16.ONE.acos();
      ComplexField complexField1 = complex16.INF.getField();
      Complex complex18 = complex1.acos();
      Complex complex19 = complex1.subtract(complex5);
      Complex complex20 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-54.12914895942));
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1337.7634885));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(151.79775272208);
      Complex complex1 = complex0.ONE.divide(151.79775272208);
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex3.ONE.subtract(151.79775272208);
      Complex complex5 = complex1.ZERO.add(Double.NaN);
      Complex complex6 = Complex.valueOf(151.79775272208, (-1.0938612624777085E-7));
      Complex complex7 = complex6.ONE.sinh();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex6.I.cosh();
      Complex complex10 = complex8.ZERO.asin();
      Complex complex11 = Complex.valueOf(151.79775272208, 151.79775272208);
      int int0 = complex1.NaN.hashCode();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex11.multiply(complex8);
      boolean boolean0 = complex6.equals(complex12);
      Complex complex14 = complex11.sin();
      double double0 = complex12.getImaginary();
      Complex complex15 = complex6.exp();
      String string0 = complex15.ONE.toString();
      Complex complex16 = complex5.divide(complex6);
      Object object0 = complex12.readResolve();
      double double1 = complex2.getReal();
      Complex complex17 = complex3.add((-1.0938612624777085E-7));
      Complex complex18 = complex8.add((-1857.09352610549));
      Complex complex19 = complex3.add(complex17);
      Complex complex20 = complex11.reciprocal();
      boolean boolean1 = complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1.6231601238250732, 1.6231601238250732);
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.INF.add((-177.67318));
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.ZERO.pow(complex2);
      Complex complex5 = complex2.ZERO.subtract(complex3);
      Complex complex6 = complex5.ONE.add((-2698.257309476541));
      Complex complex7 = complex6.I.cos();
      Object object0 = complex0.readResolve();
      double double0 = complex0.getImaginary();
      List<Complex> list0 = complex0.NaN.nthRoot(4654);
      Complex complex8 = complex1.multiply(0.0);
      Complex complex9 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1634.5546716));
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(2.965546585110978E236);
      int int0 = complex0.INF.hashCode();
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex0.I.multiply(2.1064911705560668E176);
      Complex complex5 = complex0.cosh();
      int int1 = complex5.hashCode();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex1.cos();
      Object object0 = complex0.readResolve();
      String string0 = complex4.toString();
      boolean boolean0 = complex1.isNaN();
      Complex complex8 = complex2.acos();
      Complex complex9 = complex8.INF.atan();
      Complex complex10 = complex5.asin();
      Complex complex11 = complex10.INF.reciprocal();
      Complex complex12 = complex1.ZERO.multiply(complex2);
      Complex complex13 = complex8.conjugate();
      Complex complex14 = complex1.divide((-602.663836585654));
      Complex complex15 = complex4.subtract(complex5);
      double double0 = complex15.INF.getArgument();
      Complex complex16 = Complex.valueOf(0.0, 2.965546585110978E236);
      Complex complex17 = complex15.negate();
      Complex complex18 = complex17.atan();
      double double1 = complex16.abs();
      Complex complex19 = complex14.multiply(5617);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.I.readResolve();
      Complex complex2 = Complex.valueOf(450.6079907692561);
      Complex complex3 = complex0.ZERO.divide(0.0);
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.add(complex0);
      Complex complex7 = complex6.INF.acos();
      String string0 = complex6.toString();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex1.multiply(complex2);
      double double0 = complex1.getReal();
      Complex complex10 = Complex.valueOf(0.0, 4374.8151718);
      boolean boolean0 = complex0.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-1635.239811773));
      Complex complex1 = complex0.multiply((-2966.922581775604));
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.sqrt();
      ComplexField complexField0 = complex2.getField();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex0.multiply((-1635.239811773));
      Complex complex6 = complex0.subtract(complex4);
      Complex complex7 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-1846.858));
      Complex complex1 = Complex.valueOf(2.0, (-1470.413154641596));
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.multiply((-3022.9117091));
      Complex complex3 = complex1.multiply((-1846.858));
      Complex complex4 = complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-2772.404637), (-2772.404637));
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1142.58903), (-1142.58903));
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.ONE.add((-252.973));
      Complex complex6 = complex5.ZERO.multiply(complex2);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex3.sinh();
      Complex complex9 = complex5.ZERO.subtract(complex1);
      Complex complex10 = complex5.pow((-1142.58903));
      Complex complex11 = complex4.ZERO.pow(0.0);
      Complex complex12 = complex1.cos();
      List<Complex> list0 = complex12.nthRoot(3402);
      Complex complex13 = complex4.divide(0.0);
      Complex complex14 = complex3.add(complex5);
      Complex complex15 = complex11.multiply(0);
      Complex complex16 = complex14.I.cosh();
      Complex complex17 = complex16.I.tan();
      Complex complex18 = complex15.ZERO.multiply((double) 0);
      Complex complex19 = complex7.subtract(complex0);
      ComplexField complexField0 = complex3.getField();
      double double0 = complex4.getImaginary();
      Complex complex20 = complex14.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.I.add(complex1);
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex1.INF.cosh();
      double double0 = complex0.getReal();
      Complex complex6 = complex1.pow(complex3);
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex4.divide((-974.87623266));
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex9.conjugate();
      Complex complex11 = Complex.valueOf(2226.8099255);
      Complex complex12 = complex11.NaN.tan();
      boolean boolean0 = complex9.equals(complex0);
      Complex complex13 = complex4.reciprocal();
      Complex complex14 = complex1.cos();
      Complex complex15 = complex3.I.log();
      Complex complex16 = complex3.multiply(complex0);
      Complex complex17 = complex16.NaN.asin();
      Complex complex18 = complex0.subtract(complex6);
      Complex complex19 = complex13.subtract(complex14);
      Complex complex20 = complex19.ZERO.divide(0.0);
      List<Complex> list0 = complex8.nthRoot(7);
      Complex complex21 = complex2.tanh();
      Complex complex22 = complex1.negate();
      Complex complex23 = complex10.multiply(843.0617);
      Complex complex24 = complex23.multiply(complex14);
      Complex complex25 = complex8.createComplex(2211.77, 0.0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-873.50535872484));
      Object object0 = complex0.INF.readResolve();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex1.I.divide(1385.071114342);
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.subtract(complex1);
      String string0 = complex2.toString();
      Complex complex8 = complex7.NaN.pow(complex0);
      Complex complex9 = complex8.INF.conjugate();
      Complex complex10 = complex9.ZERO.conjugate();
      Complex complex11 = complex5.asin();
      boolean boolean0 = complex3.isInfinite();
      int int0 = complex11.hashCode();
      List<Complex> list0 = complex1.I.nthRoot(1);
      Complex complex12 = complex11.conjugate();
      double double0 = complex12.getArgument();
      Complex complex13 = complex12.INF.cosh();
      double double1 = complex3.getArgument();
      Complex complex14 = complex11.sin();
      boolean boolean1 = complex14.equals(complex1);
      Complex complex15 = complex5.I.sqrt1z();
      Complex complex16 = complex2.sqrt1z();
      Complex complex17 = complex2.subtract(complex12);
      Complex complex18 = complex11.sinh();
      Object object1 = new Object();
      boolean boolean2 = complex2.equals(object1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-20.0);
      try { 
        complex0.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(2.404020521381534E-8, (-359.11932));
      ComplexField complexField0 = complex0.NaN.getField();
      double double0 = complex0.ZERO.abs();
      Complex complex1 = Complex.valueOf(2.404020521381534E-8, 0.0);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex0.multiply(2668);
      Complex complex3 = complex2.multiply(2668);
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex4.I.subtract((double) 2668);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.createComplex(0.0, 0.0);
      Complex complex8 = complex7.INF.multiply((-2028.0));
      Complex complex9 = complex7.ZERO.cosh();
      Complex complex10 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.divide(3296.61);
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex0.INF.acos();
      Complex complex4 = complex3.NaN.sinh();
      double double0 = complex2.ONE.abs();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.INF.acos();
      Complex complex7 = complex5.ONE.divide(0.0);
      String string0 = complex2.toString();
      Complex complex8 = Complex.valueOf(1.2829599363166098E-7);
      Complex complex9 = complex7.subtract(complex5);
      int int0 = complex2.hashCode();
      boolean boolean0 = complex3.equals(complex7);
      Complex complex10 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex1.ZERO.cos();
      Complex complex5 = complex4.NaN.cosh();
      String string0 = complex5.ZERO.toString();
      String string1 = complex5.ONE.toString();
      Object object0 = complex4.ONE.readResolve();
      Complex complex6 = complex0.subtract(0.0);
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex7.ZERO.sinh();
      double double0 = complex4.abs();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.add((-3871.98991268));
      double double0 = complex1.abs();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      double double1 = complex1.abs();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex3.NaN.sqrt1z();
      Complex complex8 = complex6.NaN.exp();
      double double2 = complex0.getArgument();
      String string0 = complex0.toString();
      Complex complex9 = complex3.sin();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex10 = complex9.NaN.createComplex((-3871.98991268), (-3871.98991268));
      Complex complex11 = complex10.INF.asin();
      Complex complex12 = complex11.ONE.sinh();
      Complex complex13 = Complex.valueOf(0.0, 0.0);
      Complex complex14 = complex5.I.add((-85.628798));
      int int0 = complex1.hashCode();
      int int1 = complex8.hashCode();
      Complex complex15 = complex13.subtract(complex4);
      List<Complex> list0 = complex6.nthRoot(395);
      ComplexField complexField1 = complex6.getField();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.I.divide((-1206.39));
      String string0 = complex0.ZERO.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(4198.6);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex2.I.cos();
      double double0 = complex0.abs();
      Complex complex4 = Complex.valueOf(4198.6, 4198.6);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex4.I.multiply(4198.6);
      double double1 = complex0.getArgument();
      Complex complex7 = complex1.atan();
      Object object0 = complex7.INF.readResolve();
      Object object1 = complex7.ONE.readResolve();
      Complex complex8 = complex3.negate();
      Complex complex9 = complex1.ONE.multiply(complex6);
      Complex complex10 = complex8.I.tanh();
      Complex complex11 = complex10.ONE.sqrt();
      Complex complex12 = complex3.reciprocal();
      String string0 = complex12.toString();
      Complex complex13 = complex2.asin();
      double double2 = complex1.abs();
      Complex complex14 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(749.8081206267, 0.5584990978240967);
      List<Complex> list0 = complex0.nthRoot(151);
      Complex complex1 = Complex.valueOf((double) 151, 749.8081206267);
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex1.INF.cos();
      int int0 = complex3.ZERO.hashCode();
      Complex complex4 = complex3.I.multiply(151);
      Complex complex5 = Complex.valueOf((double) 151);
      Complex complex6 = complex4.ONE.negate();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.ONE.tanh();
      Object object0 = complex8.I.readResolve();
      Complex complex9 = complex8.ZERO.multiply(24.0);
      Complex complex10 = complex1.cosh();
      Complex complex11 = complex1.createComplex(0.5584990978240967, 1788.0851306682);
      double double0 = complex11.INF.getArgument();
      Complex complex12 = complex1.acos();
      Complex complex13 = complex12.asin();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1268.7263187), (-1268.7263187));
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2082.3049534), (-2082.3049534));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.pow(complex1);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.add((-165.044591571));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.INF.createComplex((-165.044591571), (-165.044591571));
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.INF.exp();
      Complex complex5 = complex0.I.add(complex4);
      Complex complex6 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.add(complex0);
      double double1 = complex6.getImaginary();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex9.ZERO.conjugate();
      Complex complex11 = complex6.cos();
      Complex complex12 = complex9.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(174.02012358, Double.NaN);
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      String string0 = complex2.I.toString();
      Complex complex3 = complex0.reciprocal();
      ComplexField complexField0 = complex3.ONE.getField();
      double double0 = complex2.abs();
      Complex complex4 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.createComplex(3413.930789794702, 81.5);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-1680.81584), (-403.973571144));
      Complex complex1 = complex0.pow((-1680.81584));
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex0.multiply((-403.973571144));
      Complex complex4 = complex3.I.add(complex0);
      Complex complex5 = complex4.negate();
      Complex complex6 = complex4.subtract((-1680.81584));
      Complex complex7 = complex2.INF.multiply(complex5);
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex8.multiply(complex2);
      Complex complex10 = complex9.cosh();
      int int0 = complex0.hashCode();
      Complex complex11 = Complex.valueOf((-403.973571144), 1491.0);
      Complex complex12 = complex11.ZERO.createComplex((-403.973571144), 1491.0);
      Complex complex13 = complex4.asin();
      Complex complex14 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.sqrt();
      Object object0 = complex1.NaN.readResolve();
      Complex complex3 = complex0.ZERO.subtract((-1025.725065751188));
      Complex complex4 = complex0.INF.pow(complex1);
      Complex complex5 = complex3.ONE.sin();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex0.ONE.divide(2701.0444487107);
      Complex complex8 = complex7.ONE.add(2701.0444487107);
      Complex complex9 = complex3.I.log();
      Complex complex10 = complex6.createComplex(2701.0444487107, 2701.0444487107);
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex0.ONE.sin();
      Complex complex13 = complex12.ONE.sinh();
      ComplexField complexField0 = complex6.getField();
      Complex complex14 = complex3.cos();
      double double0 = complex3.getReal();
      double double1 = complex11.abs();
      Complex complex15 = complex3.ZERO.subtract(complex10);
      double double2 = complex5.getReal();
      Complex complex16 = complex1.sin();
      Complex complex17 = complex8.sqrt1z();
      Complex complex18 = complex14.subtract(0.8414709848078965);
      Complex complex19 = complex17.sqrt();
      Complex complex20 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2351.04033), (-2351.04033));
      Complex complex1 = Complex.valueOf((-2351.04033), (-2351.04033));
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex0.divide((-2351.04033));
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1254.9719889, 1254.9719889);
      Complex complex1 = complex0.ONE.add(1254.9719889);
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.ZERO.tan();
      Complex complex4 = Complex.valueOf(1818.5, 2337.18);
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex5.ZERO.reciprocal();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex0.INF.cos();
      double double0 = complex5.ONE.abs();
      Complex complex9 = complex7.pow(100.997);
      ComplexField complexField0 = complex0.getField();
      Complex complex10 = complex6.multiply(2337.18);
      Complex complex11 = complex0.acos();
      double double1 = complex6.abs();
      Complex complex12 = complex7.subtract(Double.POSITIVE_INFINITY);
      Complex complex13 = Complex.valueOf(1254.9719889, Double.POSITIVE_INFINITY);
      Complex complex14 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2011.53755);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.INF.multiply(complex2);
      Complex complex4 = complex1.ZERO.asin();
      Object object0 = complex4.I.readResolve();
      Complex complex5 = complex0.multiply(1);
      Complex complex6 = complex2.subtract(complex3);
      Complex complex7 = complex2.negate();
      double double0 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1672.621692), (-1368.4202));
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 3595.2298201573167);
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 359.7);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = Complex.valueOf((-1736.2761693), 0.0);
      Complex complex5 = Complex.valueOf(920.2046, 920.2046);
      Complex complex6 = complex3.divide(245.8);
      Complex complex7 = complex6.ZERO.reciprocal();
      Complex complex8 = complex6.multiply(0.0);
      double double0 = complex0.getReal();
      double double1 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      ComplexField complexField0 = complex0.NaN.getField();
      double double0 = complex0.getReal();
      double double1 = complex0.getImaginary();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex1.NaN.createComplex((-1232.658172), 0.0);
      String string0 = complex0.toString();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.INF.divide(0.0);
      Complex complex6 = complex4.cos();
      Complex complex7 = complex6.I.pow((-3401.4316));
      Complex complex8 = complex4.divide(complex2);
      Complex complex9 = complex1.divide(complex4);
      Complex complex10 = complex1.createComplex(1.0, 1.0);
      Complex complex11 = Complex.valueOf(0.0, 1.0);
      Complex complex12 = complex2.atan();
      Complex complex13 = complex5.sinh();
      Complex complex14 = complex8.tan();
      Complex complex15 = complex7.sin();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.exp();
      Object object0 = complex0.readResolve();
      Complex complex2 = Complex.valueOf(1867.90862);
      Complex complex3 = complex2.ZERO.subtract(1.6458113136245473E-38);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.multiply(505);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ZERO.tan();
      double double0 = complex1.I.getArgument();
      Complex complex3 = complex0.I.acos();
      Complex complex4 = complex3.INF.multiply(1771);
      Complex complex5 = complex0.subtract(0.0);
      Object object0 = complex1.readResolve();
      Complex complex6 = complex1.ZERO.sqrt();
      double double1 = complex5.getReal();
      double double2 = complex5.getImaginary();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex8.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex1.ZERO.add(0.0);
      Complex complex4 = complex0.I.multiply(0.0);
      Complex complex5 = complex1.I.sqrt1z();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.divide(0.0);
      Complex complex9 = complex1.add(complex7);
      Complex complex10 = complex8.cos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.subtract((-501.782));
      String string0 = complex0.ZERO.toString();
      Complex complex2 = complex1.I.pow(complex0);
      int int0 = complex0.INF.hashCode();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.multiply(0);
      Complex complex5 = complex0.I.exp();
      double double0 = complex3.ONE.getArgument();
      Complex complex6 = complex4.ONE.log();
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex7.ONE.negate();
      Complex complex9 = complex3.add(complex6);
      Complex complex10 = complex3.divide((double) 0);
      boolean boolean0 = complex9.equals("(0.0, 0.0)");
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-868.231434784), (-868.231434784));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.ONE.subtract(complex1);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex3.INF.add((-868.231434784));
      double double0 = complex3.I.abs();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, (-254.137992082207));
      Complex complex8 = complex7.multiply(20.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.multiply(0.0);
      double double1 = complex1.I.getArgument();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(3533.7231);
      Complex complex3 = complex0.NaN.multiply(1777.35901594615);
      Complex complex4 = complex2.I.pow(0.0);
      Complex complex5 = complex1.reciprocal();
      boolean boolean0 = complex1.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-4.402550702194912E-8));
      Complex complex2 = complex0.NaN.multiply(0);
      Complex complex3 = complex2.ZERO.createComplex((-4.402550702194912E-8), 1.0);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex5.acos();
      Complex complex7 = Complex.valueOf((-2848.602726));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1358.1199935211266));
      Complex complex1 = complex0.divide(4.923458004084836E41);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract((-42.9920218));
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-1901.39668043742), (-1901.39668043742));
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex2.ZERO.tan();
      double double0 = complex3.ONE.abs();
      String string0 = complex2.toString();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-1140.7008180486));
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex1.INF.pow((double) 0);
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex4.ONE.tanh();
      Complex complex6 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow(1078.0651);
      Complex complex2 = complex0.exp();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.divide(29.37520539838);
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(4006.9745, 4006.9745);
      Complex complex1 = complex0.asin();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = Complex.valueOf(0.0, 4006.9745);
      int int0 = (-479);
      try { 
        complex2.INF.nthRoot((-479));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -479
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      ComplexField complexField0 = complex0.ONE.getField();
      try { 
        complex0.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getImaginary();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.pow((-3256.4097396));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.divide(1242.1548857124078);
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.valueOf(1242.1548857124078, 1242.1548857124078);
      double double0 = complex3.getReal();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.valueOf(0.0, 6.283185307179586);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex2.INF.multiply(0);
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex0.log();
      Complex complex6 = complex1.NaN.negate();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex0.sin();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.tanh();
      int int0 = complex2.ONE.hashCode();
      Object object0 = complex1.readResolve();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.acos();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.NaN.multiply(1);
      boolean boolean0 = complex1.isNaN();
      Object object1 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.subtract(complex1);
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.pow((-2491.587344));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.NaN.subtract(1207.1623326523);
      Complex complex3 = complex1.ZERO.sin();
      String string0 = complex0.I.toString();
      double double0 = complex3.I.abs();
      Complex complex4 = complex3.I.add((-1.0));
      Complex complex5 = Complex.valueOf(2882.192347683226, 0.0);
      Complex complex6 = complex0.NaN.pow(0.0);
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex5.divide(complex2);
      Complex complex9 = complex7.INF.divide(0.0);
      int int0 = complex9.ZERO.hashCode();
      Object object0 = complex8.readResolve();
      Complex complex10 = complex1.add(2062.16365302);
      Complex complex11 = complex7.multiply((-2756));
      Complex complex12 = complex0.asin();
      Complex complex13 = complex8.INF.asin();
      boolean boolean0 = complex12.isInfinite();
      Complex complex14 = complex7.sinh();
      boolean boolean1 = complex7.isNaN();
      Complex complex15 = complex0.divide(complex7);
      double double1 = complex15.ONE.getArgument();
      Complex complex16 = complex5.multiply(complex8);
      Complex complex17 = complex16.INF.tanh();
      Complex complex18 = complex12.tanh();
      boolean boolean2 = complex6.isInfinite();
      boolean boolean3 = complex15.isNaN();
      double double2 = complex1.getArgument();
      Complex complex19 = complex12.divide((-1.5707963267948966));
      Complex complex20 = complex10.atan();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex((-963.93), (-1542.0554091214228));
      Complex complex1 = complex0.add((-1542.0554091214228));
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.log();
      Complex complex5 = complex2.NaN.add((-1542.0554091214228));
      Complex complex6 = complex5.INF.pow(complex2);
      Complex complex7 = complex1.negate();
      Complex complex8 = complex0.INF.conjugate();
      Complex complex9 = complex0.negate();
      String string0 = complex0.ONE.toString();
      double double0 = complex2.getReal();
      Complex complex10 = complex9.INF.atan();
      Complex complex11 = complex2.exp();
      ComplexField complexField0 = complex11.INF.getField();
      Complex complex12 = Complex.valueOf(1542.0554981762684, (-1542.0554091214228));
      Complex complex13 = complex9.add(complex11);
      Complex complex14 = complex13.ONE.asin();
      double double1 = complex2.ONE.getArgument();
      Complex complex15 = complex9.reciprocal();
      Complex complex16 = complex7.reciprocal();
      Object object0 = complex10.readResolve();
      Complex complex17 = complex4.multiply(complex15);
      Complex complex18 = complex6.tan();
      double double2 = complex11.abs();
      Complex complex19 = complex1.add(1542.0554981762684);
      Complex complex20 = complex18.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.INF.nthRoot(143);
      Complex complex1 = complex0.sinh();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.add(2153.7747743192);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.I.sin();
      Complex complex5 = complex4.NaN.add(2153.7747743192);
      Complex complex6 = complex1.add(complex2);
      Complex complex7 = Complex.valueOf(2153.7747743192);
      Complex complex8 = complex7.NaN.sin();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex4.asin();
      ComplexField complexField1 = complex7.getField();
      Complex complex11 = complex7.I.acos();
      Complex complex12 = complex11.ONE.negate();
      Complex complex13 = Complex.valueOf(2153.7747743192);
      List<Complex> list1 = complex0.ZERO.nthRoot(143);
      Complex complex14 = Complex.valueOf((-1.0), 0.0);
      Complex complex15 = complex14.multiply(complex7);
      ComplexField complexField2 = complex3.getField();
      Object object0 = complex2.readResolve();
      Complex complex16 = complex10.conjugate();
      Complex complex17 = complex12.acos();
      Complex complex18 = complex12.log();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.createComplex(0.0, (-679.5155067));
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.I.exp();
      Complex complex4 = Complex.valueOf(486.039);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex1.add(345.842255482);
      Complex complex7 = complex6.add(complex0);
      Complex complex8 = complex6.ONE.acos();
      Complex complex9 = complex6.divide(complex1);
      List<Complex> list0 = complex6.ONE.nthRoot(923);
      Complex complex10 = complex0.sqrt();
      double double0 = complex0.getReal();
      Complex complex11 = complex6.ONE.subtract(0.0);
      Complex complex12 = complex7.sinh();
      boolean boolean0 = complex6.isNaN();
      Complex complex13 = complex8.createComplex(923, (-2144.803051));
      Complex complex14 = complex13.I.sqrt();
      Complex complex15 = complex13.divide(0.0);
      Complex complex16 = complex2.add(345.842255482);
      Complex complex17 = complex5.negate();
      Complex complex18 = complex15.subtract((-747.0));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(364.8162, 364.8162);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.ONE.createComplex(364.8162, (-179.771215));
      Complex complex3 = complex0.atan();
      int int0 = complex0.NaN.hashCode();
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex2.INF.pow(complex4);
      Complex complex6 = complex5.subtract(364.8162);
      Complex complex7 = complex2.multiply(0.0);
      ComplexField complexField1 = complex3.getField();
      Complex complex8 = complex3.NaN.log();
      Complex complex9 = Complex.valueOf(150.0191);
      Complex complex10 = complex1.add(150.0191);
      double double0 = complex10.ONE.getArgument();
      Complex complex11 = complex3.ZERO.acos();
      Complex complex12 = Complex.valueOf(6.283185307179586);
      Complex complex13 = complex3.I.pow(complex12);
      Complex complex14 = complex13.reciprocal();
      ComplexField complexField2 = complex13.NaN.getField();
      Complex complex15 = complex14.NaN.divide(complex6);
      boolean boolean0 = complex10.isNaN();
      double double1 = complex14.ONE.abs();
      boolean boolean1 = complex3.isNaN();
      Complex complex16 = complex10.multiply(complex3);
      Complex complex17 = Complex.valueOf(150.0191);
      Complex complex18 = complex17.add(complex14);
      Complex complex19 = complex7.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add(Double.NaN);
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex0.add(1.2027015686035156);
      Complex complex4 = Complex.valueOf(1.2027015686035156, (-4.503599627370496E15));
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex2.add(complex1);
      Complex complex7 = complex3.reciprocal();
      boolean boolean0 = complex7.isInfinite();
      Complex complex8 = complex1.pow(1626.0);
      Complex complex9 = complex0.ONE.add(1497.245578848913);
      Complex complex10 = complex8.negate();
      Complex complex11 = complex0.multiply((-929));
      Complex complex12 = complex1.ZERO.conjugate();
      Complex complex13 = complex7.divide(0.0);
      Complex complex14 = complex7.negate();
      Complex complex15 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.883511811213715E-8);
      Complex complex1 = new Complex(1.883511811213715E-8, 0.0);
      Complex complex2 = complex0.multiply(complex1);
      Object object0 = complex2.NaN.readResolve();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.I.asin();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex1.tan();
      Complex complex8 = new Complex(5176.60273802, 1.883511811213715E-8);
      Complex complex9 = complex3.add(complex8);
      Complex complex10 = complex1.tan();
      Complex complex11 = complex10.NaN.tanh();
      Complex complex12 = complex1.sqrt1z();
      String string0 = complex3.NaN.toString();
      Complex complex13 = complex9.multiply(0.0);
      Complex complex14 = complex8.ONE.add(2.0);
      Complex complex15 = complex8.NaN.conjugate();
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex16 = complex10.INF.sqrt();
      Complex complex17 = complex16.NaN.sqrt();
      String string1 = complex16.toString();
      Complex complex18 = complex1.I.createComplex(1, 0.0);
      Complex complex19 = complex9.reciprocal();
      Complex complex20 = complex11.multiply(617);
      boolean boolean0 = complex11.isNaN();
      Complex complex21 = complex4.sqrt1z();
      Complex complex22 = complex9.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex4.I.conjugate();
      double double0 = complex5.ONE.getArgument();
      ComplexField complexField0 = complex5.getField();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex1.INF.sin();
      Complex complex9 = new Complex(1.125, 0.0);
      Complex complex10 = complex0.divide(complex9);
      Object object0 = complex10.readResolve();
      Complex complex11 = complex2.createComplex((-1405.66392), (-1405.66392));
      Complex complex12 = complex4.divide(complex10);
      Complex complex13 = complex12.INF.cos();
      Complex complex14 = complex2.add((-1405.66392));
      double double1 = complex4.getArgument();
      Complex complex15 = complex4.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(28.2, 0.0);
      int int0 = 353;
      List<Complex> list0 = complex0.NaN.nthRoot(353);
      double double0 = complex0.abs();
      double double1 = complex0.INF.getArgument();
      int int1 = 0;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
