/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 08:27:58 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.ZERO.pow((-2626.537141));
      Complex complex4 = complex0.tan();
      double double0 = complex1.abs();
      Complex complex5 = complex4.multiply((-2586.86798554));
      double double1 = complex0.abs();
      String string0 = complex0.toString();
      Complex complex6 = complex2.I.divide(Double.NaN);
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex7.NaN.sqrt();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex9 = complex8.I.cosh();
      Complex complex10 = new Complex(270.4914, (-2586.86798554));
      boolean boolean0 = complex7.equals(complex10);
      Complex complex11 = complex2.exp();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex13 = complex1.pow(complex11);
      Complex complex14 = complex1.multiply(complex0);
      boolean boolean1 = complex6.equals(complex13);
      Complex complex15 = complex11.asin();
      Complex complex16 = complex0.sqrt();
      Complex complex17 = complex3.tanh();
      Complex complex18 = complex17.INF.sinh();
      Complex complex19 = complex17.pow((-2696578.897096435));
      Complex complex20 = complex19.I.multiply(complex14);
      Complex complex21 = complex18.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-725.1062857446));
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.cos();
      List<Complex> list0 = complex1.nthRoot(4626);
      // Undeclared exception!
      complex1.nthRoot(847);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex0.ZERO.asin();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.divide(complex0);
      Complex complex8 = complex2.ONE.subtract(0.0);
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex2.negate();
      double double0 = complex0.I.abs();
      Complex complex11 = complex10.NaN.createComplex(20.0, 20.0);
      Complex complex12 = complex0.add(3502.987237045);
      ComplexField complexField1 = complex11.getField();
      Complex complex13 = complex2.conjugate();
      Complex complex14 = complex13.NaN.atan();
      List<Complex> list0 = complex11.nthRoot(1);
      Object object0 = complex7.readResolve();
      boolean boolean0 = complex10.isInfinite();
      Complex complex15 = complex2.subtract(2996.22907);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex0.I.asin();
      Complex complex6 = complex1.ZERO.divide((-1279.0));
      Complex complex7 = complex6.I.reciprocal();
      double double0 = complex4.ZERO.abs();
      Complex complex8 = complex4.I.asin();
      Complex complex9 = complex8.ZERO.sin();
      Complex complex10 = complex8.I.negate();
      Complex complex11 = complex10.log();
      Complex complex12 = complex0.ONE.sqrt();
      double double1 = complex0.getArgument();
      double double2 = complex12.INF.abs();
      Complex complex13 = complex4.INF.conjugate();
      List<Complex> list0 = complex1.ZERO.nthRoot(1573);
      Complex complex14 = complex0.subtract(complex1);
      Complex complex15 = complex3.sqrt1z();
      Complex complex16 = complex15.sqrt();
      Complex complex17 = complex14.tanh();
      Complex complex18 = complex17.ZERO.pow(0.0);
      Object object0 = complex3.readResolve();
      Object object1 = complex15.readResolve();
      Complex complex19 = complex15.ONE.log();
      double double3 = complex2.getReal();
      Complex complex20 = complex16.negate();
      double double4 = complex20.getArgument();
      Complex complex21 = complex10.exp();
      Complex complex22 = complex11.reciprocal();
      ComplexField complexField0 = complex7.getField();
      Complex complex23 = complex13.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(98.169);
      double double0 = complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex0.ZERO.atan();
      Complex complex5 = complex1.ZERO.conjugate();
      Complex complex6 = complex5.I.pow(complex0);
      Complex complex7 = complex5.sin();
      Complex complex8 = complex2.NaN.pow((-1209.8848507065));
      Complex complex9 = complex2.add(complex1);
      Complex complex10 = complex8.I.negate();
      Complex complex11 = complex8.INF.log();
      Complex complex12 = complex11.exp();
      double double1 = complex8.INF.getArgument();
      Complex complex13 = complex10.I.add(2.415329933166504);
      Complex complex14 = complex0.add(complex1);
      Complex complex15 = complex14.sinh();
      Complex complex16 = complex15.NaN.subtract(6.283185307179586);
      Complex complex17 = complex3.multiply(complex15);
      Complex complex18 = complex17.cos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.log();
      String string0 = complex1.I.toString();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.pow(0.0);
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex2.cos();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex5.ZERO.cosh();
      boolean boolean0 = complex5.equals(complex1);
      Complex complex7 = complex2.ONE.exp();
      Complex complex8 = complex0.cos();
      Complex complex9 = Complex.valueOf(2.8024460607734262E-8, 1.1342556476593018);
      Complex complex10 = complex4.multiply((-750));
      double double1 = complex7.abs();
      Complex complex11 = complex6.cos();
      Complex complex12 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 3.4284156709489884E181;
      Complex complex0 = new Complex(3.4284156709489884E181);
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.add(0.0);
      Complex complex5 = Complex.ONE;
      double double0 = complex2.ZERO.getArgument();
      Complex complex6 = complex5.ZERO.tan();
      boolean boolean0 = complex2.equals(complex5);
      double double1 = complex5.getArgument();
      Complex complex7 = complex2.multiply(4453);
      Complex complex8 = complex7.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.NaN.negate();
      ComplexField complexField0 = complex9.ZERO.getField();
      Object object0 = complex9.readResolve();
      Complex complex10 = Complex.valueOf(2631.736);
      Complex complex11 = complex10.ZERO.divide(complex4);
      Complex complex12 = complex10.add(0.0);
      int int0 = complex10.ONE.hashCode();
      Complex complex13 = complex9.subtract(9.008499734799015E-141);
      Complex complex14 = complex12.multiply(0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = Complex.valueOf(140.9866846737);
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex2.ZERO.tanh();
      Complex complex5 = complex0.atan();
      double double0 = complex3.getReal();
      Complex complex6 = complex4.divide(complex5);
      Complex complex7 = complex5.asin();
      Complex complex8 = complex1.NaN.cosh();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex9 = complex4.ZERO.exp();
      Complex complex10 = complex7.subtract((-1035.3295752));
      Complex complex11 = complex9.ZERO.conjugate();
      Complex complex12 = complex10.ZERO.sqrt();
      Complex complex13 = complex3.sin();
      Complex complex14 = complex6.ONE.multiply(complex8);
      double double1 = complex5.NaN.abs();
      Complex complex15 = complex2.add(complex1);
      Complex complex16 = complex1.multiply(complex6);
      Complex complex17 = complex15.conjugate();
      Complex complex18 = complex9.atan();
      Complex complex19 = Complex.valueOf(140.9866846737, Double.NaN);
      Complex complex20 = complex8.add(complex12);
      Complex complex21 = complex9.multiply(Double.POSITIVE_INFINITY);
      Complex complex22 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex23 = complex6.divide(Double.POSITIVE_INFINITY);
      Complex complex24 = Complex.valueOf((-1035.3295752), Double.NaN);
      Complex complex25 = complex8.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 7.739252980388984E-8);
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.INF.log();
      double double1 = complex2.getImaginary();
      boolean boolean0 = complex1.isInfinite();
      Complex complex5 = complex2.ONE.reciprocal();
      Complex complex6 = complex4.NaN.sin();
      Complex complex7 = complex6.I.multiply(0.0);
      double double2 = complex1.getReal();
      Complex complex8 = Complex.valueOf((-1.2921143714179786E7), (-2258.772701));
      Complex complex9 = complex4.I.subtract((-2258.772701));
      Complex complex10 = complex8.ZERO.cosh();
      Complex complex11 = complex5.multiply((-2258.772701));
      boolean boolean1 = complex4.equals((Object) null);
      Complex complex12 = Complex.valueOf((-1.2921143714179786E7), 0.7853981633974483);
      Complex complex13 = complex1.asin();
      boolean boolean2 = complex0.isNaN();
      Complex complex14 = complex4.add((-2258.772701));
      Complex complex15 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.createComplex(0.0, (-46.753748735743));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex0.multiply(17);
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex4.NaN.createComplex(17, 0.0);
      ComplexField complexField0 = complex6.I.getField();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.I.sinh();
      Complex complex9 = complex8.NaN.cos();
      Complex complex10 = complex7.NaN.subtract(complex8);
      Complex complex11 = complex0.add((double) 17);
      Complex complex12 = complex7.cos();
      Complex complex13 = complex0.NaN.multiply((-164));
      Complex complex14 = complex2.negate();
      Complex complex15 = complex11.pow((double) 17);
      String string0 = complex0.toString();
      Complex complex16 = complex3.add(complex1);
      Complex complex17 = complex7.I.log();
      Complex complex18 = complex5.add(complex3);
      Complex complex19 = complex13.pow(complex12);
      Complex complex20 = complex4.sqrt1z();
      Complex complex21 = complex20.log();
      Complex complex22 = complex1.ONE.exp();
      Complex complex23 = complex15.cos();
      Complex complex24 = complex1.multiply(complex16);
      Complex complex25 = complex24.exp();
      boolean boolean0 = complex19.isInfinite();
      Complex complex26 = complex2.subtract(complex3);
      Complex complex27 = complex5.pow(complex20);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.add((double) 110);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.ONE.multiply(110);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.valueOf((-1641.650375812615));
      List<Complex> list0 = complex4.nthRoot(1);
      double double0 = complex0.ONE.getArgument();
      Complex complex6 = complex0.negate();
      List<Complex> list1 = complex6.nthRoot(1248);
      Complex complex7 = complex0.divide(complex3);
      ComplexField complexField0 = complex0.getField();
      double double1 = complex0.getArgument();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex6.reciprocal();
      Object object0 = complex4.readResolve();
      Complex complex10 = complex5.add(0.7853981633974483);
      Complex complex11 = Complex.valueOf((double) 1248, 1847.54964);
      Complex complex12 = complex1.divide(complex11);
      Complex complex13 = complex12.exp();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1660.7086360279154));
      Complex complex1 = complex0.add((-1660.7086360279154));
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.ZERO.add(complex0);
      Complex complex4 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = 6.283185307179586;
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.createComplex(676.31218, 6.283185307179586);
      Complex complex2 = complex1.pow(676.31218);
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex4.log();
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex2.I.atan();
      try { 
        complex7.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.toString();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.ZERO.subtract(123.10902101998632);
      Complex complex4 = complex2.ONE.exp();
      Complex complex5 = complex1.ZERO.cosh();
      double double0 = complex0.getImaginary();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = new Complex(4126.03525, 4126.03525);
      Complex complex10 = complex8.pow(complex9);
      Complex complex11 = complex3.tanh();
      Complex complex12 = complex6.log();
      Complex complex13 = complex0.multiply(123.10902101998632);
      Complex complex14 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex0.I.exp();
      Complex complex4 = complex2.ZERO.tanh();
      String string0 = complex2.toString();
      Complex complex5 = new Complex((-1778.4115035654));
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex5.negate();
      boolean boolean0 = complex4.equals(complex2);
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex4.createComplex((-1778.4115035654), 1.0013406650019718);
      Complex complex10 = complex6.tanh();
      Complex complex11 = complex10.atan();
      Complex complex12 = complex7.multiply((-1789));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex0.INF.cosh();
      Complex complex4 = complex2.ZERO.tan();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex5 = complex0.ZERO.sqrt1z();
      Complex complex6 = Complex.valueOf(0.0, (-4992.124584907906));
      Object object1 = complex0.readResolve();
      int int0 = complex0.hashCode();
      Complex complex7 = Complex.valueOf(0.6808650493621826);
      Complex complex8 = complex5.pow(complex7);
      Complex complex9 = complex5.pow(complex8);
      Complex complex10 = complex6.tanh();
      ComplexField complexField0 = complex1.getField();
      Complex complex11 = complex0.multiply(1186);
      Object object2 = new Object();
      boolean boolean0 = complex2.equals(object2);
      Complex complex12 = complex7.negate();
      Complex complex13 = complex1.cos();
      double double0 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-2694.9847755));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = Complex.valueOf((-2694.9847755), 3594.059474);
      Complex complex4 = complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.I.add(1.1864056832305874E-207);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.add(complex0);
      Complex complex6 = complex3.atan();
      Complex complex7 = complex5.createComplex((-1541.28776376226), 1586.55);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2524.60688), 2.0);
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.pow((-2524.60688));
      Complex complex2 = complex0.I.cos();
      double double0 = complex1.I.getArgument();
      Complex complex3 = complex1.I.sqrt();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.NaN.add(complex1);
      Complex complex6 = complex5.ONE.subtract((-4538.0));
      Complex complex7 = complex0.cos();
      Complex complex8 = Complex.valueOf(2.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = (-749.1981);
      Complex complex0 = Complex.valueOf((-749.1981));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.NaN.divide(complex1);
      Complex complex5 = complex2.INF.createComplex((-749.1981), (-749.1981));
      Complex complex6 = complex3.NaN.negate();
      Complex complex7 = complex6.INF.add(complex2);
      String string0 = complex2.toString();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.exp();
      double double0 = complex0.ZERO.abs();
      boolean boolean0 = complex0.isInfinite();
      try { 
        complex1.nthRoot((-2363));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,363
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(999.17, (-4000.970534));
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.cosh();
      double double0 = complex1.ONE.getArgument();
      String string0 = complex2.toString();
      Complex complex3 = complex0.I.cosh();
      double double1 = complex2.getImaginary();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.INF.multiply(17);
      Complex complex6 = complex4.INF.multiply(17);
      boolean boolean0 = complex1.isNaN();
      Complex complex7 = complex4.INF.tan();
      Complex complex8 = complex7.NaN.add(complex6);
      Complex complex9 = complex7.NaN.reciprocal();
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex4.tanh();
      Complex complex12 = complex11.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      boolean boolean0 = complex0.isNaN();
      String string0 = complex0.toString();
      Complex complex1 = complex0.createComplex(868.516, 1620.436);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.pow(complex0);
      double double0 = complex0.ONE.abs();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex3.I.divide(complex0);
      Complex complex6 = complex0.I.asin();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex2.createComplex((-798.0), 0.0);
      int int0 = complex4.hashCode();
      Complex complex9 = complex3.add(complex1);
      Complex complex10 = complex8.ZERO.add(1.0);
      Complex complex11 = complex10.I.acos();
      Complex complex12 = complex8.multiply((-192));
      Complex complex13 = complex12.NaN.cosh();
      int int1 = complex12.hashCode();
      ComplexField complexField0 = complex8.getField();
      Complex complex14 = complex12.divide(complex8);
      Complex complex15 = complex14.NaN.conjugate();
      Complex complex16 = complex2.multiply(complex8);
      Complex complex17 = complex16.ZERO.add(1620.436);
      Complex complex18 = complex2.atan();
      double double1 = complex14.abs();
      Complex complex19 = complex1.asin();
      Complex complex20 = complex4.reciprocal();
      Complex complex21 = complex2.ZERO.createComplex((-798.0), 192.0);
      double double2 = complex10.getImaginary();
      boolean boolean1 = complex12.isInfinite();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = Complex.valueOf((-946.6010939155132));
      Complex complex4 = complex2.sinh();
      Complex complex5 = Complex.valueOf(1167.0549, 1167.0549);
      Complex complex6 = complex5.ZERO.subtract(911.9184);
      Complex complex7 = complex3.I.negate();
      double double0 = complex2.getArgument();
      Complex complex8 = complex0.pow(complex3);
      Complex complex9 = complex5.negate();
      String string0 = complex0.toString();
      Complex complex10 = complex7.sinh();
      double double1 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.pow(complex1);
      Object object0 = complex2.readResolve();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-1190.0324954812174), 3569.8);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex1.ZERO.pow(0.0);
      Complex complex4 = complex0.exp();
      ComplexField complexField0 = complex4.getField();
      Complex complex5 = complex1.multiply((-1190.0324954812174));
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.multiply((-2631));
      Complex complex8 = complex0.sin();
      Complex complex9 = complex8.sin();
      Complex complex10 = complex1.cosh();
      Complex complex11 = complex7.multiply(Double.NaN);
      double double0 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, (-123.71));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.NaN.pow(complex2);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.negate();
      String string0 = complex0.toString();
      Complex complex6 = complex1.sqrt();
      String string1 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 885.280994667465;
      double double1 = 0.0;
      Complex complex0 = Complex.valueOf(885.280994667465, 0.0);
      double double2 = 0.0;
      Complex complex1 = Complex.valueOf(562.7548596097248, 0.0);
      Complex complex2 = complex0.negate();
      Object object0 = complex1.ONE.readResolve();
      Complex complex3 = complex0.log();
      try { 
        complex3.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.multiply(Double.NaN);
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex3 = complex0.sqrt();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex2.tan();
      Complex complex8 = complex7.I.sqrt1z();
      Object object0 = complex1.readResolve();
      Complex complex9 = complex4.conjugate();
      Complex complex10 = complex3.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.NaN.tan();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex6.NaN.add(complex1);
      Complex complex8 = complex7.ZERO.divide(0.0);
      Complex complex9 = complex7.NaN.sqrt1z();
      Object object0 = complex1.readResolve();
      double double0 = complex4.getReal();
      Complex complex10 = complex0.I.sinh();
      Complex complex11 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex12 = complex5.reciprocal();
      double double1 = complex6.getImaginary();
      Complex complex13 = complex2.pow((-4087.140429569934));
      Complex complex14 = Complex.valueOf(0.0);
      Object object1 = complex5.readResolve();
      Complex complex15 = complex12.createComplex(0.0, (-4087.140429569934));
      Complex complex16 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.ZERO.divide(Double.NaN);
      Complex complex3 = complex0.ONE.negate();
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = complex4.ONE.divide(complex1);
      ComplexField complexField0 = complex3.INF.getField();
      ComplexField complexField1 = complex3.getField();
      Complex complex6 = complex5.ONE.subtract(complex1);
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex0.add(Double.NaN);
      Complex complex9 = complex5.atan();
      Complex complex10 = complex3.I.pow((-1047.7506128837729));
      Complex complex11 = complex3.cos();
      Complex complex12 = complex6.multiply(3604);
      double double0 = complex12.ZERO.abs();
      double double1 = complex4.getArgument();
      ComplexField complexField2 = complex2.getField();
      Complex complex13 = complex11.add(Double.NaN);
      Complex complex14 = complex7.pow(551.0705167603);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.divide((-1591.2695354));
      boolean boolean0 = complex1.isInfinite();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.sqrt();
      ComplexField complexField0 = complex5.ONE.getField();
      Complex complex6 = complex5.I.log();
      Object object0 = new Object();
      boolean boolean1 = complex5.equals(object0);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex3.pow(1053.0);
      Complex complex9 = complex7.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.985952908805853E76), (-6.985952908805853E76));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-2015.99493691), (-1851.1462523));
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.ZERO.divide(3116.234790322);
      Complex complex3 = complex0.divide((-1851.1462523));
      Complex complex4 = complex3.I.createComplex((-20.0), 1937.38488994493);
      Complex complex5 = complex4.INF.subtract(3116.234790322);
      Complex complex6 = complex5.ONE.add(Double.NaN);
      double double0 = complex5.NaN.abs();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex1.NaN.divide(complex0);
      int int0 = complex9.hashCode();
      double double1 = complex0.abs();
      Complex complex10 = complex0.ZERO.multiply(1);
      Complex complex11 = complex0.I.cosh();
      Complex complex12 = complex8.tan();
      Complex complex13 = complex1.multiply(0.0);
      Complex complex14 = complex13.ONE.tan();
      boolean boolean0 = complex8.isNaN();
      try { 
        complex1.nthRoot((-1000));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,000
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2322.2612766, 2322.2612766);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ZERO.subtract(1.086550235748291);
      int int0 = complex3.ONE.hashCode();
      Complex complex5 = complex2.NaN.cos();
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex6.log();
      Complex complex8 = complex7.I.add(complex5);
      Complex complex9 = complex2.divide(complex6);
      Complex complex10 = complex1.createComplex(2322.2612766, 1360.40950723045);
      Complex complex11 = Complex.valueOf((-2880.956408132));
      Complex complex12 = complex4.tanh();
      Complex complex13 = complex0.sqrt();
      Complex complex14 = complex13.I.tanh();
      double double0 = complex12.abs();
      Complex complex15 = complex11.tan();
      Complex complex16 = complex15.divide(1.086550235748291);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(3.901467289560222E131);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.multiply(complex4);
      double double0 = complex0.getImaginary();
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex6.reciprocal();
      double double1 = complex5.abs();
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex9.NaN.multiply(complex2);
      Complex complex11 = complex8.divide(0.0);
      Complex complex12 = complex1.divide(3.901467289560222E131);
      Complex complex13 = complex2.sqrt();
      double double2 = complex7.abs();
      double double3 = complex7.getImaginary();
      double double4 = complex8.getArgument();
      Complex complex14 = complex8.exp();
      Complex complex15 = complex10.createComplex(Double.NaN, 3.901467289560222E131);
      Complex complex16 = complex2.asin();
      Complex complex17 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1453.5818);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sinh();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(2.7865534085810115E-8, (-1284.37286042794));
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex0.divide((-1284.37286042794));
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.log();
      boolean boolean0 = complex3.equals(complex4);
      Complex complex6 = complex1.sin();
      Complex complex7 = complex4.ONE.sqrt();
      Complex complex8 = complex4.multiply(complex1);
      Complex complex9 = complex8.reciprocal();
      boolean boolean1 = complex7.isInfinite();
      double double0 = complex3.abs();
      Complex complex10 = complex6.pow(complex8);
      Complex complex11 = complex10.divide(complex9);
      Complex complex12 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(1.4055868011423819E-8, 1.4055868011423819E-8);
      Complex complex3 = complex1.pow(1.4055868011423819E-8);
      Complex complex4 = complex1.INF.conjugate();
      int int0 = complex4.NaN.hashCode();
      Complex complex5 = complex2.ONE.multiply((double) 1);
      Complex complex6 = complex5.NaN.cosh();
      Complex complex7 = complex0.multiply(1);
      Complex complex8 = complex2.I.add(complex0);
      boolean boolean0 = complex1.equals(complex2);
      Complex complex9 = complex4.ONE.pow(complex2);
      Complex complex10 = complex0.ONE.multiply(complex4);
      Complex complex11 = complex4.NaN.createComplex(64.0, 1);
      Complex complex12 = complex4.add(2.6064987182617188);
      Complex complex13 = complex10.sin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-2093.33244095447));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.multiply((-2093.33244095447));
      Complex complex5 = Complex.valueOf((-2093.33244095447), (-2093.33244095447));
      double double0 = complex2.getArgument();
      String string0 = complex1.toString();
      Object object0 = complex5.readResolve();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      int int0 = complex0.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = new Complex(6.283185307179586, 0.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.atan();
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.I.add((-20.0));
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(207.03182742);
      Complex complex1 = complex0.I.createComplex((-1.3424576100819801E-291), (-1.3424576100819801E-291));
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.ZERO.acos();
      Complex complex4 = complex1.I.multiply((double) 669);
      Complex complex5 = complex4.ZERO.divide(787.800691);
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex0.divide((-456.145318));
      Complex complex8 = complex0.multiply(669);
      Complex complex9 = complex7.ONE.add(complex1);
      Complex complex10 = complex8.NaN.subtract(207.03182742);
      double double0 = complex8.abs();
      Complex complex11 = complex8.ONE.divide(complex4);
      double double1 = complex7.getArgument();
      ComplexField complexField0 = complex10.getField();
      Complex complex12 = complex7.negate();
      Complex complex13 = complex7.reciprocal();
      Complex complex14 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(751.506, 1626.20966537);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.createComplex(4733.0, 4733.0);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.INF.multiply(complex4);
      Complex complex7 = complex5.ONE.cosh();
      Complex complex8 = Complex.valueOf(1626.20966537, 1626.20966537);
      boolean boolean0 = complex2.equals((Object) null);
      Complex complex9 = complex4.I.multiply(complex5);
      Complex complex10 = complex9.I.tan();
      Complex complex11 = complex0.multiply((-1400));
      Complex complex12 = complex11.conjugate();
      Complex complex13 = complex11.divide(0.0);
      Complex complex14 = Complex.ONE;
      Complex complex15 = complex4.subtract(complex14);
      String string0 = complex5.toString();
      Complex complex16 = complex4.ZERO.multiply(4733.0);
      Complex complex17 = complex13.sin();
      Complex complex18 = complex3.add(complex2);
      Complex complex19 = complex10.acos();
      Complex complex20 = complex18.sqrt1z();
      Complex complex21 = complex3.subtract(complex13);
      Complex complex22 = complex0.cosh();
      Complex complex23 = complex0.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(1360.0, 1360.0);
      Complex complex1 = complex0.negate();
      int int0 = complex1.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = Complex.valueOf(1360.0);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.NaN.createComplex(0.18329763412475586, 0.18329763412475586);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.atan();
      Complex complex6 = Complex.valueOf(0.0, 0.18329763412475586);
      int int0 = complex5.ZERO.hashCode();
      boolean boolean0 = complex4.equals(complex5);
      boolean boolean1 = complex2.isNaN();
      Complex complex7 = complex1.multiply(0.0);
      int int1 = complex7.ZERO.hashCode();
      Complex complex8 = complex0.asin();
      double double0 = complex2.getArgument();
      Complex complex9 = complex4.divide(0.18329763412475586);
      Complex complex10 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1660.7086360279154));
      Complex complex1 = complex0.NaN.multiply(1432);
      Complex complex2 = complex0.ZERO.add(complex0);
      Complex complex3 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex0.INF.reciprocal();
      double double0 = complex0.abs();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.NaN.sqrt1z();
      int int0 = complex3.ZERO.hashCode();
      Complex complex4 = new Complex(0.0, Double.NaN);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.ONE.subtract(complex1);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex0.pow(complex4);
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex9.ONE.asin();
      Complex complex11 = complex1.ONE.sinh();
      Object object0 = complex11.I.readResolve();
      double double0 = complex8.getArgument();
      Complex complex12 = complex4.cosh();
      int int1 = complex8.hashCode();
      Complex complex13 = complex12.acos();
      Object object1 = complex13.ONE.readResolve();
      Complex complex14 = complex0.divide(complex6);
      Complex complex15 = complex14.sqrt();
      Complex complex16 = complex15.ZERO.acos();
      Complex complex17 = Complex.valueOf(Double.NaN);
      String string0 = complex12.toString();
      Complex complex18 = complex12.I.sqrt1z();
      Complex complex19 = Complex.ONE;
      Complex complex20 = complex14.I.divide(complex19);
      Complex complex21 = complex10.conjugate();
      Complex complex22 = complex21.INF.multiply(complex11);
      Complex complex23 = complex4.divide(0.0);
      Complex complex24 = complex4.sqrt1z();
      Complex complex25 = complex24.add(complex16);
      int int2 = complex5.hashCode();
      Complex complex26 = complex16.tan();
      Complex complex27 = complex13.sqrt1z();
      Complex complex28 = complex25.add(0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.multiply(1206.6731057543);
      Complex complex3 = Complex.valueOf(1206.6731057543, 0.0);
      Complex complex4 = complex2.divide(0.0);
      Complex complex5 = complex4.NaN.add(0.0);
      Complex complex6 = Complex.valueOf((-402.52));
      Complex complex7 = Complex.valueOf(1206.6731057543, 0.0);
      Complex complex8 = complex6.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.subtract((-1129.5745538980013));
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.divide(complex0);
      Object object0 = complex3.readResolve();
      List<Complex> list0 = complex1.nthRoot(1979);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.pow((-6.171564449018882E227));
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex4.add(2198.0);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.INF.divide((-6.171564449018882E227));
      Complex complex8 = complex1.add(complex6);
      Complex complex9 = complex4.cosh();
      Complex complex10 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.557678449715009E128);
      Complex complex1 = complex0.I.pow(3.557678449715009E128);
      Complex complex2 = complex1.NaN.pow(0.0);
      Complex complex3 = complex1.ONE.add(0.0);
      Complex complex4 = complex0.sqrt1z();
      String string0 = complex4.ZERO.toString();
      Complex complex5 = complex1.asin();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex5.isInfinite();
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = complex5.exp();
      Complex complex8 = complex7.sqrt1z();
      String string1 = complex7.toString();
      Complex complex9 = complex7.add(complex2);
      Complex complex10 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.ONE.log();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.valueOf((-1703.838130387), (-1703.838130387));
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex3.INF.asin();
      Complex complex7 = complex2.multiply(complex4);
      int int0 = complex7.ONE.hashCode();
      double double0 = complex3.ZERO.getArgument();
      Complex complex8 = complex0.ONE.sqrt();
      double double1 = complex2.abs();
      Complex complex9 = complex3.asin();
      ComplexField complexField0 = complex9.getField();
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex2.atan();
      List<Complex> list0 = complex10.nthRoot(2014);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.4193426880442385E174);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.ZERO;
      double double0 = complex0.NaN.getArgument();
      Complex complex3 = complex2.INF.subtract((-1.0));
      Complex complex4 = complex0.I.add(complex2);
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = Complex.valueOf(1.4193426880442385E174, 1.4193426880442385E174);
      Complex complex7 = complex5.add(1.4193426880442385E174);
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.multiply((-4022.9266554802));
      double double0 = complex1.getArgument();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex3.ONE.asin();
      double double1 = complex4.I.getArgument();
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex0.I.asin();
      Object object0 = complex2.INF.readResolve();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.INF.sqrt1z();
      Complex complex9 = complex7.ZERO.conjugate();
      Complex complex10 = complex2.add(6.283185307179586);
      Complex complex11 = complex5.cos();
      int int0 = complex0.ZERO.hashCode();
      Complex complex12 = complex10.sinh();
      Complex complex13 = complex1.subtract(complex11);
      Complex complex14 = complex0.exp();
      double double2 = complex1.getArgument();
      Complex complex15 = complex14.subtract(1796.853844535);
      Complex complex16 = complex14.add(0.0);
      Complex complex17 = complex16.atan();
      Complex complex18 = complex9.acos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex2.ONE.subtract((double) 381);
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex3.ZERO.tan();
      List<Complex> list0 = complex1.nthRoot(381);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex1.cos();
      boolean boolean0 = complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.sqrt1z();
      String string0 = complex1.ONE.toString();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex0.tanh();
      boolean boolean0 = complex4.isInfinite();
      List<Complex> list0 = complex3.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      String string0 = complex0.toString();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex2.cos();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex1.multiply((-996));
      Complex complex6 = new Complex((-996));
      Complex complex7 = complex3.add(complex6);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.multiply((-1655.5281216));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(969.35482381);
      Complex complex1 = complex0.multiply(785);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.NaN.abs();
      double double1 = complex0.getArgument();
      Complex complex1 = complex0.subtract(1.0);
      Complex complex2 = complex0.ONE.pow(complex1);
      String string0 = complex1.toString();
      Complex complex3 = complex0.sqrt();
      double double2 = complex0.abs();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex0.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(4459.5108272);
      List<Complex> list0 = complex0.nthRoot(341);
      Complex complex1 = complex0.sqrt();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.divide(1162.0);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.divide((-1219.0478666411107));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex0.multiply(complex2);
      double double0 = 0.0;
      try { 
        complex3.NaN.nthRoot((-2981));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,981
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.add(0.0);
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex0.NaN.sqrt1z();
      double double0 = complex0.getArgument();
      try { 
        complex0.nthRoot((-1684));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,684
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex0.I.multiply((-4348));
      Complex complex7 = complex0.pow(7.3409917428393E138);
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.tan();
      Complex complex3 = complex1.I.createComplex((-3.5966064858620067E-8), 1372.2764891);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex0.exp();
      Complex complex5 = Complex.valueOf((-401.739413446), (-401.739413446));
      Complex complex6 = complex4.I.multiply((-1743));
      Complex complex7 = complex4.atan();
      Object object0 = complex6.NaN.readResolve();
      Complex complex8 = complex7.pow(1.0);
      Complex complex9 = complex6.multiply(complex7);
      Complex complex10 = complex2.log();
      double double0 = complex2.abs();
      Object object1 = complex9.readResolve();
      try { 
        complex9.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-1078.543));
      Complex complex1 = Complex.valueOf((-20.0), (-1078.543));
      Complex complex2 = complex1.ZERO.subtract((-20.0));
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex1.INF.multiply(234);
      Complex complex6 = complex0.I.subtract(complex1);
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.ZERO.asin();
      Complex complex10 = complex0.NaN.exp();
      Complex complex11 = complex0.sin();
      Complex complex12 = complex0.sqrt();
      Complex complex13 = complex0.ONE.conjugate();
      Complex complex14 = Complex.valueOf((-1006.89), Double.POSITIVE_INFINITY);
      Complex complex15 = complex10.subtract(complex12);
      Complex complex16 = complex12.exp();
      Complex complex17 = Complex.I;
      Complex complex18 = complex10.divide(complex17);
      Complex complex19 = complex18.NaN.asin();
      Complex complex20 = complex19.I.acos();
      Complex complex21 = Complex.valueOf((-20.0));
      Complex complex22 = complex17.pow((-31.717));
      Complex complex23 = complex22.ONE.cos();
      Complex complex24 = complex23.INF.createComplex((-1078.543), (-1078.543));
      double double0 = complex21.getImaginary();
      boolean boolean0 = complex11.isNaN();
      int int0 = complex20.hashCode();
      boolean boolean1 = complex11.equals("EVALUATION");
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ZERO.multiply((-20.0));
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ONE.subtract(complex1);
      Complex complex6 = complex0.sinh();
      Complex complex7 = Complex.I;
      Complex complex8 = complex1.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex0.NaN.exp();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex5.multiply(0.0);
      Complex complex7 = Complex.valueOf(3602.23463, 0.0);
      Complex complex8 = complex6.multiply(0.0);
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.pow((-609.445585639567));
      Complex complex4 = complex0.NaN.divide(65.20867372576511);
      double double0 = complex2.NaN.getArgument();
      Complex complex5 = complex3.ONE.sin();
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.add(0.0);
      Complex complex3 = complex0.ZERO.divide(complex1);
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.multiply(complex1);
      ComplexField complexField0 = complex6.ZERO.getField();
      double double0 = complex5.getReal();
      Complex complex7 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.add(0.0);
      double double0 = complex0.getImaginary();
      double double1 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(2694.48289529);
      Complex complex1 = complex0.INF.add(2694.48289529);
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex3.add(complex4);
      Object object0 = new Object();
      boolean boolean0 = complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.pow(446.26717);
      Complex complex2 = complex0.sqrt();
      List<Complex> list0 = complex2.NaN.nthRoot(1565);
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex1.isNaN();
      Complex complex3 = complex1.conjugate();
      double double0 = complex2.abs();
      double double1 = complex2.getArgument();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.pow(3727.60214728);
      Complex complex4 = complex2.acos();
      Complex complex5 = complex4.ONE.subtract(0.0);
      Complex complex6 = complex4.ONE.divide(complex1);
      Complex complex7 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1180.0, 0.0);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.ZERO.subtract((-1522.8556));
      String string0 = complex3.ZERO.toString();
      Complex complex4 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex2.multiply(1.0551795959472656);
      Complex complex5 = complex4.NaN.pow(1.0551795959472656);
      Complex complex6 = complex0.add(complex3);
      Object object0 = complex1.readResolve();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex0.createComplex(1552.7231, 1552.7231);
      String string0 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      int int0 = 0;
      try { 
        complex1.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(2416.73);
      String string0 = complex0.ZERO.toString();
      double double0 = complex0.getReal();
      Complex complex1 = new Complex(2416.73);
      Complex complex2 = complex0.divide(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.ZERO.sinh();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.ZERO.acos();
      boolean boolean1 = complex2.equals(complex5);
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex1.multiply(7);
      ComplexField complexField0 = complex8.NaN.getField();
      Complex complex9 = complex4.sqrt1z();
      Complex complex10 = complex1.subtract(2.0);
      Complex complex11 = complex10.I.add(complex9);
      Complex complex12 = complex1.acos();
      Complex complex13 = complex9.subtract(0.0);
      Complex complex14 = Complex.valueOf(0.0, 0.0);
      Complex complex15 = complex13.tan();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.conjugate();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.ONE.multiply(0.0);
      Complex complex3 = complex0.acos();
      String string0 = complex3.ONE.toString();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex2.add(0.0);
      Complex complex8 = new Complex(0.0, 2.316005229949951);
      Complex complex9 = complex8.I.sin();
      Complex complex10 = complex8.INF.add(complex1);
      Complex complex11 = complex2.pow(complex8);
      Complex complex12 = complex11.NaN.sqrt();
      Complex complex13 = complex12.INF.atan();
      Complex complex14 = complex0.createComplex(1710.26307258, (-465.819));
      Complex complex15 = complex14.NaN.tan();
      boolean boolean1 = complex5.isNaN();
      Complex complex16 = complex4.negate();
      Complex complex17 = complex7.multiply(complex0);
      Complex complex18 = new Complex(2.316005229949951);
      Complex complex19 = complex5.multiply(complex18);
      double double0 = complex6.abs();
      Complex complex20 = complex10.tan();
      Complex complex21 = complex17.tan();
      double double1 = complex16.getImaginary();
      Complex complex22 = complex5.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(5.13004286606108E-207, 0.0);
      List<Complex> list0 = complex0.ZERO.nthRoot(3701);
      Complex complex1 = Complex.valueOf(5.13004286606108E-207, 6.283185307179586);
      Complex complex2 = complex0.I.divide(403.358);
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex0.ONE.pow(complex1);
      Complex complex5 = complex0.add(1520.6542222870949);
      Complex complex6 = complex5.pow(complex0);
      double double0 = complex0.abs();
      Complex complex7 = complex0.add((-1.7335469415174996E-8));
      Complex complex8 = Complex.valueOf((-521.4393942954573));
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex5.divide(complex8);
      Complex complex10 = complex9.ONE.sinh();
      Complex complex11 = complex0.add(0.0);
      Complex complex12 = complex3.cosh();
      Complex complex13 = complex7.reciprocal();
      Complex complex14 = complex1.pow(complex4);
      Complex complex15 = Complex.valueOf((-751.9336693), 767.8879598);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = complex4.ZERO.atan();
      List<Complex> list0 = complex1.nthRoot(1394);
      Complex complex6 = complex1.I.asin();
      Complex complex7 = Complex.valueOf((-1769.607));
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.I.log();
      List<Complex> list1 = complex8.ZERO.nthRoot(2546);
      Complex complex10 = complex8.ONE.log();
      double double0 = complex7.I.getArgument();
      Complex complex11 = complex7.subtract((-1769.607));
      int int0 = complex11.ZERO.hashCode();
      Complex complex12 = complex8.multiply(complex11);
      Complex complex13 = complex6.createComplex(1056.9859078617, (-1769.607));
      boolean boolean0 = complex7.isNaN();
      Complex complex14 = complex8.sin();
      Complex complex15 = complex0.sqrt();
      Complex complex16 = complex13.asin();
      Complex complex17 = complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(535.0, 6.283185307179586);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = Complex.valueOf(6.283185307179586, 535.0);
      Complex complex3 = complex2.log();
      Complex complex4 = Complex.valueOf(6.283185307179586, 535.0);
      Complex complex5 = complex3.NaN.exp();
      Complex complex6 = complex4.ONE.atan();
      Complex complex7 = complex0.ZERO.divide(complex2);
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex9.ZERO.sqrt1z();
      Complex complex11 = complex9.I.exp();
      Complex complex12 = complex11.ZERO.createComplex(0.0, (-1207.9577846484817));
      Complex complex13 = complex3.sinh();
      Complex complex14 = Complex.valueOf(0.0, 0.0);
      Complex complex15 = complex3.multiply(782);
      double double0 = complex8.getReal();
      Complex complex16 = complex0.atan();
      Complex complex17 = complex3.pow(complex15);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.cos();
      List<Complex> list0 = complex2.INF.nthRoot(1);
      Complex complex3 = complex1.I.log();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex4.I.divide(complex6);
      Complex complex8 = complex5.ONE.acos();
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex8.INF.negate();
      Complex complex11 = complex9.ZERO.subtract(complex5);
      Complex complex12 = complex3.NaN.pow((double) 1);
      Complex complex13 = complex3.subtract(0.0);
      Complex complex14 = complex4.ONE.negate();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex((-42.941945239));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.pow(6.283185307179586);
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.I.pow(0.0);
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex5 = complex3.INF.cosh();
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex5.add(complex3);
      Complex complex8 = complex3.INF.tanh();
      Complex complex9 = complex2.I.sqrt1z();
      Complex complex10 = complex0.multiply(complex1);
      Object object0 = complex10.ONE.readResolve();
      List<Complex> list0 = complex10.INF.nthRoot(851);
      Complex complex11 = complex10.multiply(205.0);
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
