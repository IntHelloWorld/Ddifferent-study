/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 08:20:45 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.createComplex(1.8267512321472168, (-72.78));
      String string0 = complex3.ZERO.toString();
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = complex4.ONE.sinh();
      double double0 = complex5.getArgument();
      String string1 = complex4.toString();
      Complex complex6 = complex5.INF.multiply(complex1);
      Complex complex7 = complex1.acos();
      double double1 = complex3.getArgument();
      Complex complex8 = complex5.NaN.log();
      Complex complex9 = complex2.atan();
      Complex complex10 = complex3.cos();
      Complex complex11 = complex9.NaN.log();
      Complex complex12 = complex1.INF.add(complex5);
      Complex complex13 = complex10.NaN.sinh();
      Complex complex14 = complex3.negate();
      Complex complex15 = complex14.exp();
      Complex complex16 = complex9.reciprocal();
      Complex complex17 = complex2.divide((-72.78));
      Complex complex18 = complex9.negate();
      Complex complex19 = complex18.conjugate();
      Complex complex20 = Complex.valueOf(218.734997862215, 0.0);
      // Undeclared exception!
      complex17.nthRoot(2146667762);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.tanh();
      double double0 = complex2.INF.getArgument();
      double double1 = complex2.getArgument();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = Complex.valueOf(0.7853981633974483);
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex2.ONE.multiply(complex1);
      Complex complex7 = complex6.NaN.pow(complex1);
      Complex complex8 = complex7.ZERO.sinh();
      Complex complex9 = complex8.ONE.conjugate();
      Complex complex10 = complex5.I.sqrt();
      Complex complex11 = complex5.ONE.add(complex2);
      Complex complex12 = complex10.INF.tan();
      Complex complex13 = complex12.ZERO.tanh();
      double double2 = complex12.I.abs();
      int int0 = complex3.hashCode();
      ComplexField complexField0 = complex5.getField();
      ComplexField complexField1 = complex0.getField();
      Complex complex14 = complex5.reciprocal();
      Complex complex15 = complex14.tanh();
      List<Complex> list0 = complex0.ONE.nthRoot(116);
      Complex complex16 = complex3.reciprocal();
      Complex complex17 = complex16.I.cos();
      Complex complex18 = complex4.sin();
      Complex complex19 = complex3.atan();
      Complex complex20 = complex13.pow(1.0);
      Complex complex21 = complex12.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.multiply(2664.247906090639);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.ONE.createComplex(2664.247906090639, 1814.9467507308068);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.I.pow(complex0);
      Complex complex6 = complex5.acos();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex0.ONE.multiply(955);
      Complex complex9 = complex0.I.tanh();
      Complex complex10 = complex0.add(4.278345398213486E-9);
      String string0 = complex3.toString();
      Complex complex11 = complex5.reciprocal();
      Complex complex12 = complex5.subtract((-20.0));
      Complex complex13 = complex10.cos();
      Complex complex14 = complex13.I.multiply(1496.748805864805);
      Complex complex15 = complex9.divide(0.0);
      String string1 = complex15.toString();
      Complex complex16 = Complex.valueOf(784.4335436542644, (-2313.0));
      Complex complex17 = complex15.cos();
      Complex complex18 = complex0.sinh();
      int int0 = complex8.hashCode();
      Complex complex19 = complex11.divide(complex16);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = Complex.NaN;
      ComplexField complexField0 = complex4.NaN.getField();
      Object object0 = complex4.ONE.readResolve();
      double double0 = complex0.getImaginary();
      Complex complex6 = complex2.I.sqrt1z();
      Complex complex7 = complex6.I.sqrt();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.NaN);
      int int0 = complex3.hashCode();
      Complex complex9 = complex3.tan();
      Complex complex10 = complex0.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.multiply(1);
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = Complex.valueOf(2.4255220053068906E11, Double.NaN);
      Complex complex7 = complex1.subtract(0.42300052689152623);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-5103.256406));
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = new Complex((-5103.256406));
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.NaN.subtract(0.0);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.ZERO.pow(2292.8223);
      Complex complex6 = complex4.ZERO.sqrt();
      Complex complex7 = complex5.INF.exp();
      Complex complex8 = complex7.INF.atan();
      Complex complex9 = complex7.INF.sqrt1z();
      Complex complex10 = complex1.ONE.atan();
      Complex complex11 = complex8.NaN.tanh();
      Complex complex12 = complex11.NaN.multiply(complex4);
      Complex complex13 = complex7.I.divide(complex4);
      Complex complex14 = complex9.ZERO.pow((double) 1);
      Complex complex15 = complex9.NaN.divide((-1518.43308));
      Complex complex16 = complex15.ZERO.acos();
      Complex complex17 = complex0.ONE.negate();
      Complex complex18 = complex17.I.negate();
      Complex complex19 = complex1.multiply(complex4);
      Complex complex20 = complex4.log();
      Complex complex21 = complex4.NaN.atan();
      Complex complex22 = complex8.add(complex5);
      Complex complex23 = complex22.sinh();
      Complex complex24 = complex13.tan();
      Complex complex25 = complex24.tan();
      Complex complex26 = complex20.exp();
      Complex complex27 = complex25.multiply(1);
      boolean boolean0 = complex7.isNaN();
      double double0 = complex25.getReal();
      Object object0 = complex9.readResolve();
      boolean boolean1 = complex15.equals(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 6.283185307179586);
      Complex complex1 = Complex.valueOf(2.0, 6.283185307179586);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.ONE.atan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.ONE.sqrt1z();
      Complex complex6 = complex0.subtract(2.0);
      Complex complex7 = complex5.add((-20.0));
      Complex complex8 = complex7.ZERO.multiply(1);
      Complex complex9 = complex5.I.conjugate();
      Complex complex10 = complex0.multiply(complex4);
      double double0 = complex10.getArgument();
      Complex complex11 = complex0.exp();
      String string0 = complex10.toString();
      int int0 = complex8.hashCode();
      Complex complex12 = complex2.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.sqrt1z();
      List<Complex> list0 = complex2.I.nthRoot(732);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(3408.4);
      double double0 = complex0.getReal();
      Complex complex1 = Complex.valueOf(1943.5, 3408.4);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.ZERO.sin();
      double double1 = complex3.ZERO.getArgument();
      double double2 = complex2.ZERO.abs();
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex0.add(complex2);
      double double3 = complex2.getReal();
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex5.INF.subtract(2.0);
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex5.sinh();
      Complex complex10 = complex4.createComplex(0.0, 6.283185307179586);
      ComplexField complexField0 = complex10.getField();
      Complex complex11 = complex6.add(complex10);
      Complex complex12 = complex8.negate();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1053.22080456922, 1053.22080456922);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.pow((-151.9993));
      Complex complex3 = complex0.NaN.subtract(1053.22080456922);
      Complex complex4 = complex3.NaN.multiply(complex1);
      Complex complex5 = complex3.NaN.add(complex1);
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      Complex complex6 = complex3.asin();
      double double0 = complex1.getArgument();
      Complex complex7 = complex1.log();
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex5.NaN.sqrt();
      double double1 = complex4.getImaginary();
      Complex complex10 = complex5.sin();
      Complex complex11 = complex3.cos();
      Complex complex12 = Complex.valueOf(2.356194490192345);
      Complex complex13 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-1185.2025135556562));
      Complex complex1 = complex0.sinh();
      Complex complex2 = new Complex((-1185.2025135556562), (-1185.2025135556562));
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.ONE.sqrt();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex2.INF.tanh();
      Complex complex7 = complex0.multiply(complex2);
      Complex complex8 = complex7.I.negate();
      double double0 = complex8.ONE.abs();
      double double1 = complex7.INF.abs();
      Complex complex9 = Complex.valueOf(5.440559532453721E-75);
      Complex complex10 = complex0.multiply(5.440559532453721E-75);
      Complex complex11 = complex10.INF.multiply((-658.4));
      Complex complex12 = complex0.add(Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex3.nthRoot(546);
      Complex complex13 = complex4.acos();
      Complex complex14 = complex13.NaN.sinh();
      Complex complex15 = complex9.log();
      Complex complex16 = complex1.atan();
      Complex complex17 = complex6.log();
      Complex complex18 = complex17.I.cosh();
      Complex complex19 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex((-428.0), (-275.917529));
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = Complex.valueOf((-428.0));
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = Complex.valueOf((-275.917529));
      Complex complex6 = complex2.ZERO.multiply(complex5);
      Complex complex7 = complex4.ONE.sqrt1z();
      Complex complex8 = complex7.ONE.divide(complex3);
      Complex complex9 = complex7.NaN.sinh();
      Complex complex10 = complex2.INF.sinh();
      Complex complex11 = complex4.sqrt1z();
      Complex complex12 = complex3.multiply(complex1);
      Complex complex13 = complex5.pow((-428.0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(2.0, Double.NaN);
      Complex complex1 = complex0.log();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1.0);
      Complex complex1 = new Complex(1.0);
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex2.I.divide(complex0);
      Complex complex5 = Complex.valueOf(Double.NaN);
      Complex complex6 = complex0.NaN.exp();
      Complex complex7 = complex5.ONE.sqrt1z();
      Complex complex8 = complex5.INF.acos();
      Complex complex9 = complex0.subtract(complex5);
      Complex complex10 = complex9.ZERO.multiply(1.0);
      Complex complex11 = complex5.atan();
      double double0 = complex0.getArgument();
      boolean boolean0 = complex11.equals(complex2);
      Complex complex12 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.sqrt1z();
      double double0 = complex2.ONE.abs();
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex4.add(0.0);
      Complex complex6 = complex5.ONE.exp();
      Complex complex7 = complex6.ZERO.sinh();
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex5.sqrt1z();
      Complex complex10 = complex0.ONE.tanh();
      Complex complex11 = complex5.INF.tan();
      Complex complex12 = complex2.createComplex((-1713.3332), 2084.9);
      String string0 = complex1.toString();
      Complex complex13 = complex12.sinh();
      Complex complex14 = complex12.I.tanh();
      Complex complex15 = complex4.subtract(complex1);
      Complex complex16 = complex13.sqrt();
      double double1 = complex9.abs();
      Complex complex17 = complex0.atan();
      Complex complex18 = complex14.sinh();
      boolean boolean0 = complex2.equals(complex4);
      Complex complex19 = complex18.add((-1713.3332));
      Complex complex20 = Complex.valueOf((-1713.3332));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.acos();
      try { 
        complex0.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.sqrt1z();
      double double0 = complex2.ONE.abs();
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex4.add(0.0);
      Complex complex6 = complex5.ONE.exp();
      Complex complex7 = complex6.ZERO.sinh();
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex5.sqrt1z();
      Complex complex10 = complex0.ONE.tanh();
      Complex complex11 = complex5.INF.tan();
      String string0 = complex1.toString();
      Complex complex12 = complex9.sinh();
      Complex complex13 = complex0.I.tanh();
      Complex complex14 = complex4.subtract(complex1);
      double double1 = complex9.abs();
      Complex complex15 = complex0.atan();
      Complex complex16 = complex13.sinh();
      boolean boolean0 = complex2.equals(complex4);
      Complex complex17 = complex16.add((-1713.3332));
      Complex complex18 = Complex.valueOf((-1713.3332));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.cosh();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex1.ZERO.log();
      Complex complex5 = complex0.I.subtract(complex2);
      Complex complex6 = complex3.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex7 = complex3.pow(complex0);
      String string0 = complex1.toString();
      double double0 = complex2.abs();
      Complex complex8 = complex3.divide(complex7);
      double double1 = complex8.INF.abs();
      Complex complex9 = complex2.createComplex(20.0, (-1.0));
      Complex complex10 = complex9.ONE.sin();
      Complex complex11 = complex5.tanh();
      Complex complex12 = complex10.multiply(Double.POSITIVE_INFINITY);
      Complex complex13 = Complex.valueOf(0.8333333333333334, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(3.518198614137319E171);
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex4.INF.subtract(3.518198614137319E171);
      Complex complex6 = complex4.ONE.reciprocal();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex3.ZERO.add(3.518198614137319E171);
      Complex complex9 = complex3.pow(Double.NaN);
      Complex complex10 = complex1.reciprocal();
      double double1 = complex1.abs();
      Complex complex11 = complex1.divide(3.518198614137319E171);
      Complex complex12 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex13 = complex6.tan();
      double double2 = complex3.NaN.abs();
      Complex complex14 = complex9.subtract(Double.POSITIVE_INFINITY);
      double double3 = complex14.abs();
      Complex complex15 = complex4.pow((-475.095406878));
      Object object0 = complex2.readResolve();
      Complex complex16 = complex3.divide(3.518198614137319E171);
      Complex complex17 = complex12.subtract(1700.465429529);
      Complex complex18 = complex17.NaN.acos();
      Complex complex19 = complex3.sin();
      Complex complex20 = complex15.tan();
      boolean boolean0 = complex12.isNaN();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.ONE.readResolve();
      double double0 = complex0.getImaginary();
      double double1 = complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.negate();
      List<Complex> list0 = complex2.I.nthRoot(37);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = Complex.valueOf(20.0);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.ONE.asin();
      Complex complex8 = complex7.ZERO.sin();
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex9 = complex7.INF.pow(Double.POSITIVE_INFINITY);
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY, 20.0);
      Complex complex11 = complex7.ONE.negate();
      Complex complex12 = complex11.ZERO.multiply(complex2);
      int int0 = complex0.hashCode();
      Complex complex13 = complex0.reciprocal();
      Complex complex14 = complex13.ONE.asin();
      Complex complex15 = complex5.sqrt1z();
      Complex complex16 = complex2.tanh();
      try { 
        complex12.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.multiply(complex1);
      int int0 = complex2.hashCode();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.sinh();
      Complex complex7 = Complex.valueOf(1.0);
      boolean boolean0 = complex6.isNaN();
      boolean boolean1 = complex5.equals(complex2);
      Complex complex8 = complex1.subtract(complex4);
      Complex complex9 = complex5.NaN.pow(complex0);
      Complex complex10 = complex8.I.sin();
      Complex complex11 = complex8.sqrt();
      boolean boolean2 = complex10.isInfinite();
      Complex complex12 = complex6.add(0.0);
      Complex complex13 = complex10.conjugate();
      Complex complex14 = complex13.ONE.add(complex1);
      Complex complex15 = complex2.add(complex5);
      String string0 = complex14.toString();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex1.NaN.acos();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = Complex.valueOf((-670.499414211));
      Complex complex7 = complex5.ZERO.createComplex((-657.86311), 2.5436656904062604E-13);
      List<Complex> list0 = complex7.INF.nthRoot(3189);
      String string0 = complex5.toString();
      Complex complex8 = complex7.ZERO.acos();
      Complex complex9 = complex2.INF.multiply(Double.NaN);
      Complex complex10 = complex0.add(1099.68);
      Complex complex11 = complex7.multiply(2.5436656904062604E-13);
      Complex complex12 = complex6.pow(2.194891929626465);
      Complex complex13 = complex10.exp();
      Complex complex14 = complex11.acos();
      Complex complex15 = complex14.asin();
      Complex complex16 = complex15.ZERO.divide(complex13);
      Complex complex17 = complex2.cosh();
      Complex complex18 = complex17.NaN.atan();
      Complex complex19 = complex1.conjugate();
      Complex complex20 = complex5.conjugate();
      Complex complex21 = complex5.exp();
      Complex complex22 = complex17.sinh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 6.283185307179586);
      Complex complex1 = Complex.valueOf(2.0, 6.283185307179586);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.ONE.atan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.ONE.sqrt1z();
      Complex complex6 = complex0.subtract(2.0);
      Complex complex7 = complex5.add((-20.0));
      Complex complex8 = complex7.ZERO.multiply(1);
      Complex complex9 = complex5.I.conjugate();
      Complex complex10 = complex0.multiply(complex4);
      double double0 = complex10.getArgument();
      Complex complex11 = complex0.exp();
      String string0 = complex10.toString();
      int int0 = complex8.hashCode();
      Complex complex12 = complex2.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = Complex.valueOf(2435.28);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex2.createComplex(418.40036889264695, (-2835.731871));
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex4.multiply(2435.28);
      double double0 = complex2.getArgument();
      Complex complex7 = complex0.reciprocal();
      Object object0 = complex7.ONE.readResolve();
      double double1 = complex2.getArgument();
      Complex complex8 = complex1.divide(0.0);
      Complex complex9 = complex8.ZERO.createComplex(418.40036889264695, (-2835.731871));
      double double2 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex3.subtract(0.0);
      Complex complex6 = complex0.add(complex5);
      boolean boolean0 = complex3.equals(complex6);
      boolean boolean1 = complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, (-1199.22607922609));
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex1.I.add(Double.NaN);
      Complex complex4 = complex0.INF.multiply(complex1);
      Complex complex5 = complex4.I.pow(0.0);
      Complex complex6 = complex0.createComplex(0.0, Double.NaN);
      Complex complex7 = complex1.multiply(0.0);
      Complex complex8 = complex4.multiply(906);
      Complex complex9 = complex6.ZERO.tan();
      double double0 = complex9.ONE.abs();
      Complex complex10 = complex8.I.negate();
      double double1 = complex8.getImaginary();
      Complex complex11 = complex0.acos();
      Complex complex12 = complex11.sqrt();
      Complex complex13 = complex12.NaN.multiply(complex8);
      boolean boolean0 = complex6.isNaN();
      String string0 = complex0.toString();
      String string1 = complex11.toString();
      Complex complex14 = complex6.sin();
      Complex complex15 = Complex.valueOf((-1822.334608917072));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(859.541993436, 859.541993436);
      Complex complex1 = complex0.acos();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.asin();
      boolean boolean0 = complex2.isInfinite();
      Complex complex5 = complex0.sqrt1z();
      Object object0 = complex2.readResolve();
      Complex complex6 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2476.93, 2476.93);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.add(complex1);
      String string0 = complex0.I.toString();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.ZERO.divide(complex2);
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = complex1.ONE.tan();
      Complex complex9 = complex8.INF.subtract((-3.314051560952014E-254));
      Complex complex10 = complex9.ZERO.multiply(17);
      Complex complex11 = complex8.NaN.conjugate();
      Complex complex12 = complex0.I.log();
      String string1 = complex3.toString();
      Complex complex13 = complex8.INF.multiply((-3215));
      double double0 = complex8.INF.getArgument();
      Complex complex14 = complex3.pow((-420.04134));
      Complex complex15 = complex11.sin();
      double double1 = complex14.getArgument();
      boolean boolean0 = complex8.isInfinite();
      Complex complex16 = complex6.sinh();
      boolean boolean1 = complex2.isInfinite();
      Complex complex17 = complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(40.817042878, 40.817042878);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.ZERO.log();
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex6.NaN.asin();
      Complex complex9 = complex5.multiply((-162));
      double double0 = complex9.getArgument();
      Complex complex10 = Complex.valueOf(1.7347160666436305);
      Complex complex11 = complex9.tanh();
      Complex complex12 = complex1.cosh();
      Complex complex13 = complex1.negate();
      ComplexField complexField0 = complex13.NaN.getField();
      boolean boolean0 = complex1.isNaN();
      Complex complex14 = complex12.divide(complex9);
      Complex complex15 = complex4.atan();
      double double1 = complex9.getArgument();
      Complex complex16 = Complex.valueOf(1.7347160666436305, (double) (-162));
      double double2 = complex16.ONE.getArgument();
      Complex complex17 = complex5.multiply((-162));
      Complex complex18 = complex7.cosh();
      Complex complex19 = complex6.createComplex((-1.0), 1.7347160666436305);
      double double3 = complex10.abs();
      Complex complex20 = Complex.valueOf(1.7347160666436305);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(1078.54003519704, 0.0);
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.ONE.multiply((-709.6717664422986));
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex0.log();
      int int0 = complex4.hashCode();
      boolean boolean0 = complex5.equals(complex4);
      List<Complex> list0 = complex5.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.I.hashCode();
      int int1 = complex0.NaN.hashCode();
      Complex complex1 = Complex.valueOf((-1569.72));
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.I.negate();
      double double0 = complex3.I.getArgument();
      Complex complex4 = complex0.multiply(complex1);
      boolean boolean0 = complex2.isInfinite();
      Complex complex5 = complex0.sin();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.subtract(complex6);
      Complex complex8 = complex6.exp();
      Complex complex9 = complex6.INF.add(complex3);
      String string0 = complex7.I.toString();
      Complex complex10 = complex2.pow(complex5);
      Complex complex11 = complex10.INF.sin();
      Complex complex12 = complex8.I.add(complex11);
      double double1 = complex7.getArgument();
      double double2 = complex8.getArgument();
      Complex complex13 = complex0.subtract(complex6);
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1213.857);
      Complex complex1 = complex0.I.negate();
      List<Complex> list0 = complex0.INF.nthRoot(1);
      double double0 = complex0.getReal();
      double double1 = complex0.getArgument();
      Complex complex2 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex3.ONE.divide(complex1);
      Complex complex5 = complex0.negate();
      double double0 = complex0.getArgument();
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = Complex.valueOf(0.28670501708984375, 1.0);
      boolean boolean0 = complex5.isNaN();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex5.tanh();
      Complex complex10 = complex0.ZERO.negate();
      Complex complex11 = complex10.multiply(complex1);
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex12 = complex8.tanh();
      Complex complex13 = Complex.valueOf(348.96);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(1826.88981, 1.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.cosh();
      double double0 = complex0.I.abs();
      Complex complex3 = complex2.ONE.add(1826.88981);
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = complex4.NaN.add(complex3);
      Complex complex6 = complex0.I.exp();
      Object object0 = complex6.I.readResolve();
      Complex complex7 = complex4.ONE.sqrt();
      Complex complex8 = complex7.I.cosh();
      Complex complex9 = complex1.divide(1.0);
      Complex complex10 = complex9.atan();
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex1.I.pow(1826.88981);
      Complex complex13 = complex12.I.conjugate();
      Complex complex14 = complex12.exp();
      String string0 = complex3.NaN.toString();
      Complex complex15 = complex1.conjugate();
      ComplexField complexField0 = complex11.getField();
      double double1 = complex2.getReal();
      Complex complex16 = complex5.divide(complex15);
      Complex complex17 = Complex.valueOf(1.0, 0.6379399299621582);
      Complex complex18 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = Complex.valueOf((-1220.793));
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex4.cos();
      Complex complex7 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-104.671), (-104.671));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.ONE.subtract((-1769.26));
      Complex complex2 = complex1.ZERO.subtract(1.0);
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex3.sqrt1z();
      Object object0 = complex1.INF.readResolve();
      Complex complex5 = complex0.ZERO.cos();
      Complex complex6 = complex0.log();
      boolean boolean0 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.5035535029701945E-199, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex5.subtract((-720.0594));
      Complex complex7 = complex4.atan();
      Complex complex8 = complex5.ZERO.negate();
      Complex complex9 = complex4.cos();
      Complex complex10 = complex4.ONE.createComplex(2456.636156777814, 2456.636156777814);
      Complex complex11 = complex10.I.divide(complex3);
      Complex complex12 = complex5.I.multiply((-1591));
      double double0 = complex2.getImaginary();
      boolean boolean0 = complex4.equals(complex2);
      Complex complex13 = complex0.sqrt();
      double double1 = complex1.getReal();
      Complex complex14 = complex13.sqrt1z();
      Complex complex15 = complex5.add(1.0);
      Complex complex16 = complex6.conjugate();
      Complex complex17 = complex13.NaN.asin();
      Complex complex18 = complex16.divide(complex4);
      Complex complex19 = complex14.multiply((-1520));
      double double2 = complex0.getReal();
      Complex complex20 = complex11.cos();
      Complex complex21 = complex17.log();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply((-2251));
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.tan();
      try { 
        complex3.nthRoot((-2251));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,251
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2600.40829);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex2.asin();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex4.multiply(1);
      Complex complex8 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1200.4995994742), (-1200.4995994742));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = Complex.valueOf(1424.311376697731, 1.3535549640655518);
      String string0 = complex2.ONE.toString();
      Complex complex4 = complex0.pow((-138.8971706878127));
      Complex complex5 = complex4.cos();
      Complex complex6 = complex4.multiply(complex5);
      double double0 = complex0.getArgument();
      ComplexField complexField0 = complex4.getField();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.NaN.conjugate();
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex4.I.pow(complex5);
      Complex complex11 = complex9.divide(complex5);
      Complex complex12 = complex2.createComplex(190.9, (-138.8971706878127));
      Complex complex13 = complex12.NaN.createComplex(190.9, (-2.356194490192345));
      Complex complex14 = complex1.pow(190.9);
      Complex complex15 = complex5.ZERO.sinh();
      Complex complex16 = complex5.ONE.divide(complex1);
      double double1 = complex7.getImaginary();
      double double2 = complex5.getReal();
      Complex complex17 = complex1.cosh();
      Complex complex18 = complex17.NaN.subtract((-4.164932186540029E-4));
      Complex complex19 = Complex.NaN;
      ComplexField complexField1 = complex7.getField();
      Complex complex20 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(239.2081, 3.7179924024793253E227);
      Complex complex1 = Complex.valueOf((-1060.9927529620174));
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex0.ZERO.pow(1.0);
      Complex complex3 = complex0.cosh();
      double double0 = complex3.INF.getArgument();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex3.ZERO.divide(3.7179924024793253E227);
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex1.cosh();
      Complex complex8 = Complex.valueOf(0.7853981633974483, 0.0);
      double double1 = complex3.getReal();
      Complex complex9 = complex4.exp();
      double double2 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-39.0));
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.NaN.tanh();
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = Complex.valueOf((-39.0), (-39.0));
      Complex complex5 = complex4.I.add(0.5827828645706177);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex3.subtract((-39.0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-2208.12079694), (-2004.22379));
      Complex complex1 = complex0.subtract((-2208.12079694));
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = Complex.valueOf((-2208.12079694), (-2208.12079694));
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex2.subtract((-2004.22379));
      Complex complex6 = complex0.createComplex((-2007.996248), (-2329.290494397608));
      Complex complex7 = complex6.negate();
      ComplexField complexField0 = complex3.getField();
      Complex complex8 = complex3.divide(2553.6577);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-0.1666666567325592));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.ONE.add((-866.2655732));
      Complex complex3 = complex0.pow(853.05548848961);
      double double0 = complex3.getArgument();
      Complex complex4 = complex2.cosh();
      ComplexField complexField0 = complex2.getField();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.ONE.sinh();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2724.0));
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.reciprocal();
      double double0 = complex1.I.abs();
      Complex complex4 = complex0.sqrt();
      double double1 = complex1.getImaginary();
      double double2 = complex4.getReal();
      double double3 = complex1.abs();
      Complex complex5 = complex2.pow(complex4);
      double double4 = complex3.getArgument();
      Complex complex6 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1718.2018569235333);
      Complex complex1 = Complex.valueOf(1718.2018569235333, 1718.2018569235333);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.pow(1718.2018569235333);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex4.reciprocal();
      String string0 = complex5.toString();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex5.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.43623673915863037);
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.ZERO.subtract(0.43623673915863037);
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex5.NaN.sinh();
      String string0 = complex4.ONE.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = complex4.ONE.conjugate();
      Complex complex6 = complex1.ZERO.sinh();
      Complex complex7 = complex2.negate();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex5.divide(complex8);
      ComplexField complexField0 = complex4.getField();
      Complex complex10 = complex3.exp();
      Complex complex11 = complex5.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ZERO.asin();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.ONE.sqrt();
      double double0 = complex0.ZERO.abs();
      double double1 = complex0.getImaginary();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.conjugate();
      double double2 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.cos();
      double double0 = complex3.abs();
      List<Complex> list0 = complex3.nthRoot(1417);
      Complex complex4 = complex1.subtract(1.5430806348152437);
      Complex complex5 = complex4.subtract(2.85040095144011776E17);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.subtract((-1.0));
      double double0 = complex0.getImaginary();
      double double1 = complex0.getReal();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.INF.multiply((-1.0));
      int int0 = complex0.hashCode();
      Complex complex5 = complex1.add(0.0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1276.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.divide(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(657.424318431, 0.0);
      Complex complex1 = complex0.ONE.add(0.0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.NaN.acos();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex4 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-3.913411606668587E-8), (-1273.044227));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.NaN.pow((-846.4578992800779));
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.subtract((-680.7));
      Complex complex6 = complex1.add(complex5);
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex7.add(complex0);
      Complex complex9 = complex5.acos();
      Complex complex10 = complex4.add(2434.60413415);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3277.4));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex3.NaN.add(complex1);
      double double0 = complex0.abs();
      double double1 = complex1.abs();
      Complex complex5 = Complex.valueOf((-3277.4), 0.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      double double0 = complex0.getArgument();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.ONE.divide(complex1);
      Complex complex4 = complex2.ONE.conjugate();
      Complex complex5 = complex4.I.pow(complex2);
      boolean boolean0 = complex2.isNaN();
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex0.add(0.0);
      Complex complex8 = complex5.pow(complex1);
      Complex complex9 = complex8.exp();
      double double1 = complex7.getArgument();
      Complex complex10 = Complex.valueOf(0.0, 1.0337605476379395);
      Complex complex11 = complex1.divide(complex10);
      Complex complex12 = complex1.sinh();
      Complex complex13 = complex12.multiply(530.45633922);
      Complex complex14 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(6.283185307179586, 0.0);
      Complex complex2 = complex0.NaN.multiply(1229);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.NaN.multiply(complex0);
      Complex complex5 = complex2.ONE.multiply(complex0);
      Complex complex6 = complex5.asin();
      double double0 = complex3.INF.abs();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex2.add((double) 1229);
      Complex complex9 = complex8.subtract(4525.05301681307);
      Complex complex10 = Complex.valueOf(423.9083);
      Complex complex11 = complex10.NaN.conjugate();
      Complex complex12 = Complex.valueOf((-2541.456219156));
      Complex complex13 = Complex.valueOf(5021.5628813, Double.POSITIVE_INFINITY);
      Complex complex14 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex15 = complex14.NaN.pow(complex2);
      Complex complex16 = complex13.ZERO.createComplex((-2.011072593789072E-7), Double.POSITIVE_INFINITY);
      String string0 = complex16.INF.toString();
      Complex complex17 = complex6.createComplex(Double.POSITIVE_INFINITY, 5021.5628813);
      double double1 = complex2.getArgument();
      Complex complex18 = complex12.createComplex(Double.POSITIVE_INFINITY, Double.NaN);
      Complex complex19 = complex2.log();
      Complex complex20 = complex14.sqrt();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(144.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.ZERO.createComplex(0.0, Double.NaN);
      Complex complex4 = complex1.INF.pow(complex2);
      String string0 = complex2.ZERO.toString();
      Complex complex5 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ONE.createComplex((-801.8133577), (-713.126760698));
      Complex complex3 = complex0.I.divide(4954.05);
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex4.NaN.conjugate();
      int int0 = complex0.hashCode();
      String string0 = complex0.toString();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex2.asin();
      Complex complex8 = complex1.divide((-713.126760698));
      Complex complex9 = complex3.pow((-1876.8));
      Complex complex10 = complex6.divide((-1876.8));
      double double0 = complex3.getReal();
      Complex complex11 = complex1.cos();
      Complex complex12 = complex11.I.divide((-1308.12));
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex11.I.multiply(complex13);
      double double1 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1602.5), 334.362792);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex1.ZERO.sqrt1z();
      Complex complex4 = complex2.ONE.createComplex((-494.08756661221), (-1602.5));
      Complex complex5 = complex2.NaN.pow(complex1);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex2.pow(334.362792);
      Complex complex8 = complex0.sin();
      Complex complex9 = complex8.ZERO.multiply(323);
      Complex complex10 = complex1.negate();
      Complex complex11 = complex10.asin();
      Complex complex12 = complex6.cosh();
      try { 
        complex5.nthRoot((-2052));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,052
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4294.607494232194));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.INF.createComplex(0.0, 0.0);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.createComplex(0.20421552658081055, (-1788.1284674026583));
      Complex complex2 = complex0.createComplex((-20.0), 2996.816635300708);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(60.5462, 60.5462);
      Complex complex4 = complex1.I.tanh();
      Complex complex5 = complex2.I.tanh();
      Complex complex6 = complex4.NaN.atan();
      double double0 = complex2.getReal();
      List<Complex> list0 = complex0.nthRoot(37);
      Complex complex7 = complex3.I.sqrt1z();
      String string0 = complex1.toString();
      Complex complex8 = complex3.multiply(0.0);
      Complex complex9 = complex0.exp();
      Complex complex10 = complex9.ZERO.asin();
      Complex complex11 = complex8.INF.sqrt();
      Complex complex12 = Complex.valueOf(1.0, (double) 37);
      Complex complex13 = complex1.pow(complex8);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex12.equals(object0);
      Complex complex14 = complex7.subtract(1.0);
      Complex complex15 = complex12.atan();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1444.0), (-1444.0));
      Complex complex1 = complex0.ONE.pow((-1444.0));
      Complex complex2 = complex0.sqrt();
      Complex complex3 = new Complex(0.0, 1.0);
      Complex complex4 = complex3.INF.multiply((-1444.0));
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 6.283185307179586);
      Complex complex1 = complex0.ONE.multiply(273);
      Complex complex2 = complex0.ZERO.subtract(0.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.divide(476.7751);
      Complex complex4 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(392.41107, 392.41107);
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      try { 
        complex0.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex3.NaN.sin();
      Object object0 = complex3.ONE.readResolve();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex0.I.sqrt1z();
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex0.subtract(Double.NaN);
      int int0 = complex2.hashCode();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex0.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.I.tanh();
      Complex complex4 = complex1.ONE.add(2.2316346168518066);
      Complex complex5 = complex1.INF.log();
      Complex complex6 = Complex.valueOf((-3582.42141), (-3582.42141));
      double double0 = complex0.getReal();
      Complex complex7 = complex6.INF.tan();
      Complex complex8 = complex6.multiply((-20.0));
      Complex complex9 = complex6.sinh();
      double double1 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 578.631518045);
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = Complex.valueOf(578.631518045, 578.631518045);
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex4.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-4973.93));
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.INF.subtract(complex1);
      int int0 = complex2.NaN.hashCode();
      Complex complex3 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      double double1 = complex0.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex5.NaN.multiply(1);
      Complex complex7 = Complex.valueOf((-2658.36839325137), 1.1767205227552116E-179);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(1.6023339607737848E-7);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ZERO.multiply(1192);
      Complex complex3 = complex1.I.createComplex(8.227620163729258E-235, 792.92550344);
      Complex complex4 = Complex.valueOf(1.6023339607737848E-7);
      boolean boolean0 = complex1.isInfinite();
      Complex complex5 = complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex0.log();
      boolean boolean0 = complex4.equals(complex1);
      double double0 = complex4.abs();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = Complex.valueOf(Double.NaN);
      Complex complex8 = complex7.subtract(complex4);
      boolean boolean1 = complex1.equals(complex7);
      Complex complex9 = complex7.sinh();
      Complex complex10 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.atan();
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(2784.389256);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.multiply((-5527));
      Complex complex3 = complex0.add(2784.389256);
      Complex complex4 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex1.NaN.divide(3753.966130893);
      Complex complex4 = complex1.ONE.sin();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.938871462941557E63);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf(3439.0);
      Complex complex4 = Complex.valueOf(0.0, 3439.0);
      List<Complex> list0 = complex2.NaN.nthRoot(1);
      Complex complex5 = complex1.conjugate();
      double double0 = complex0.getImaginary();
      ComplexField complexField0 = complex2.getField();
      Complex complex6 = complex3.multiply(1);
      Complex complex7 = complex2.sinh();
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(1188.97335336894, 0.0);
      Complex complex1 = complex0.I.subtract(498.3352);
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.I.reciprocal();
      Complex complex5 = complex4.INF.add(complex0);
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex5.I.exp();
      Complex complex8 = complex3.multiply(complex1);
      Complex complex9 = complex8.I.sqrt();
      Complex complex10 = Complex.valueOf((-1281.776408868237));
      Complex complex11 = complex2.conjugate();
      Complex complex12 = complex0.sin();
      Complex complex13 = complex3.cos();
      Complex complex14 = complex13.INF.multiply(1644);
      Complex complex15 = complex14.I.multiply(1644);
      ComplexField complexField0 = complex11.getField();
      Complex complex16 = complex12.divide((-1281.776408868237));
      Complex complex17 = complex8.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0386032577072378E209, 1.0386032577072378E209);
      Complex complex1 = complex0.ONE.subtract(1.0386032577072378E209);
      double double0 = complex0.abs();
      Complex complex2 = complex1.ZERO.subtract(1.0386032577072378E209);
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex3.sinh();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex0.ONE.pow(complex5);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.acos();
      ComplexField complexField0 = complex0.getField();
      double double1 = complex2.getImaginary();
      boolean boolean0 = complex2.isNaN();
      Complex complex9 = complex6.add(complex0);
      double double2 = complex6.INF.getArgument();
      Complex complex10 = complex9.createComplex(1.0386032577072378E209, 0.0);
      Complex complex11 = complex0.divide(complex9);
      Complex complex12 = complex0.conjugate();
      Complex complex13 = complex5.tanh();
      Complex complex14 = complex13.pow(complex2);
      Complex complex15 = complex11.negate();
      Complex complex16 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.reciprocal();
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex1.ONE.add((-1421.8));
      double double0 = complex2.abs();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.pow(0.0);
      Complex complex5 = complex3.INF.atan();
      Complex complex6 = complex5.NaN.add(2102.715715603);
      Complex complex7 = complex0.atan();
      double double1 = complex7.I.getArgument();
      int int0 = complex7.hashCode();
      Complex complex8 = complex0.acos();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.multiply((double) 1);
      double double2 = complex0.ZERO.getArgument();
      Complex complex11 = complex10.NaN.atan();
      List<Complex> list0 = complex9.I.nthRoot(1);
      Complex complex12 = complex9.sinh();
      Complex complex13 = complex12.ONE.multiply(0.0);
      boolean boolean0 = complex0.equals(complex9);
      Complex complex14 = complex8.sin();
      Complex complex15 = complex5.log();
      Complex complex16 = complex10.multiply((double) 1);
      Complex complex17 = complex6.cos();
      Complex complex18 = complex9.subtract((double) 1);
      Complex complex19 = complex1.add(0.0);
      Complex complex20 = complex17.pow(complex6);
      List<Complex> list1 = complex11.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(3.507754341050756E-176, 3.507754341050756E-176);
      Complex complex1 = complex0.add(2.0);
      Complex complex2 = Complex.valueOf(2.0);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex((-888.628), (-888.628));
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex1.add((-1.0));
      Complex complex3 = complex1.INF.sinh();
      boolean boolean0 = complex0.equals("NORMALIZE_INFINITE");
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex1.pow((-4304.054695067505));
      int int0 = complex2.hashCode();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex6.ZERO.sinh();
      Complex complex9 = complex0.tan();
      boolean boolean1 = complex9.equals((Object) null);
      Complex complex10 = complex7.NaN.asin();
      Complex complex11 = complex1.atan();
      Complex complex12 = complex4.atan();
      boolean boolean2 = complex12.isInfinite();
      boolean boolean3 = complex7.isInfinite();
      Complex complex13 = complex7.negate();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(728.727826482);
      Complex complex2 = complex1.ZERO.pow(complex0);
      boolean boolean0 = complex0.equals(";0Aa&hf[4?a/gl%");
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.createComplex(1698.589261, 1698.589261);
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex0.ONE.log();
      ComplexField complexField0 = complex6.ONE.getField();
      double double0 = complex0.getImaginary();
      Complex complex7 = complex0.reciprocal();
      double double1 = complex2.ONE.abs();
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex2.add((-2621.6889864975947));
      Complex complex10 = complex9.ZERO.negate();
      Object object0 = complex1.readResolve();
      Complex complex11 = complex8.sin();
      Complex complex12 = complex11.INF.cosh();
      Complex complex13 = complex2.sqrt1z();
      Complex complex14 = complex13.NaN.atan();
      Complex complex15 = complex9.reciprocal();
      Complex complex16 = complex15.INF.sin();
      try { 
        complex15.nthRoot((-276));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -276
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.multiply(2664.247906090639);
      Complex complex2 = complex1.I.pow(2664.247906090639);
      Complex complex3 = complex1.ONE.createComplex(2664.247906090639, 1814.9467507308068);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.I.pow(complex0);
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.ZERO.atan();
      Complex complex8 = complex0.ONE.multiply(955);
      Complex complex9 = complex0.I.tanh();
      Complex complex10 = complex0.add(4.278345398213486E-9);
      String string0 = complex4.toString();
      Complex complex11 = complex5.reciprocal();
      Complex complex12 = complex5.subtract((-20.0));
      Complex complex13 = complex10.cos();
      Complex complex14 = complex13.I.multiply(1496.748805864805);
      Complex complex15 = complex9.divide(0.0);
      Complex complex16 = Complex.valueOf(784.4335436542644, (-2313.0));
      Complex complex17 = complex15.cos();
      Complex complex18 = complex0.sinh();
      int int0 = complex8.hashCode();
      Complex complex19 = complex11.divide(complex16);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.ZERO.subtract(1275.8396624731254);
      Complex complex3 = complex0.NaN.negate();
      double double0 = complex3.I.abs();
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex3.INF.sqrt1z();
      Complex complex6 = complex3.INF.pow(complex0);
      String string0 = complex6.NaN.toString();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex7 = Complex.valueOf(0.0, (-72.78));
      Complex complex8 = complex7.ONE.add(832.83295339992);
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex9.ONE.sinh();
      Complex complex11 = complex0.sqrt();
      boolean boolean1 = complex7.isNaN();
      Object object0 = complex7.readResolve();
      Complex complex12 = complex10.asin();
      Complex complex13 = complex0.sqrt();
      Complex complex14 = Complex.valueOf(0.38574057817459106, (-72.78));
      Complex complex15 = complex5.pow(complex8);
      Complex complex16 = complex9.subtract(complex11);
      List<Complex> list0 = complex10.nthRoot(141);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-1052));
      Complex complex2 = complex1.reciprocal();
      Object object0 = complex2.ONE.readResolve();
      Complex complex3 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      double double0 = complex0.ONE.getArgument();
      Complex complex3 = complex1.I.add(0.0);
      double double1 = complex0.getArgument();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = Complex.valueOf(4325.4854627136);
      Complex complex7 = complex4.NaN.negate();
      Complex complex8 = complex7.subtract(0.0);
      Complex complex9 = complex1.NaN.pow(6.283185307179586);
      Complex complex10 = complex2.ONE.asin();
      double double2 = complex9.ONE.abs();
      Complex complex11 = complex2.subtract(complex4);
      Object object0 = complex11.readResolve();
      Complex complex12 = complex5.log();
      Complex complex13 = complex5.reciprocal();
      Complex complex14 = complex3.tanh();
      Complex complex15 = complex5.pow(0.0);
      Complex complex16 = complex14.ONE.add(969.0);
      int int0 = complex12.hashCode();
      Complex complex17 = complex2.reciprocal();
      Complex complex18 = complex12.asin();
      Complex complex19 = complex14.tanh();
      ComplexField complexField0 = complex13.getField();
      Complex complex20 = complex19.pow(complex1);
      Complex complex21 = complex17.sqrt1z();
      Complex complex22 = complex21.exp();
      double double3 = complex11.getImaginary();
      Complex complex23 = complex17.sqrt1z();
      Complex complex24 = complex21.add(0.0);
      Complex complex25 = complex1.negate();
      Complex complex26 = complex23.tan();
  }
}
