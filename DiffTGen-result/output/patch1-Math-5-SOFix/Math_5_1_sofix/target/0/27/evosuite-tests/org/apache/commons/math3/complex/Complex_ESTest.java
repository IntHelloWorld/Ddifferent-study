/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 08:31:15 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = (-1635.4299119284);
      Complex complex0 = Complex.valueOf((-1635.4299119284));
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.INF.sin();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1488.621988);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      Complex complex4 = Complex.valueOf(1488.621988, 8.007799874741872);
      Complex complex5 = complex0.ONE.add(complex4);
      double double0 = complex4.NaN.abs();
      double double1 = complex5.NaN.getArgument();
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.INF.add(Double.NaN);
      Complex complex9 = complex8.pow((-864.56764770319));
      Complex complex10 = complex7.ONE.reciprocal();
      Complex complex11 = complex7.subtract(complex5);
      Complex complex12 = complex4.sqrt();
      Complex complex13 = complex12.INF.subtract(8.007799874741872);
      Complex complex14 = complex4.I.multiply(complex5);
      Complex complex15 = complex12.sinh();
      Object object0 = complex0.INF.readResolve();
      Complex complex16 = Complex.valueOf(20.0);
      Complex complex17 = complex0.ZERO.negate();
      Complex complex18 = complex0.sinh();
      Complex complex19 = complex1.subtract(8.007799874741872);
      ComplexField complexField0 = complex9.getField();
      Complex complex20 = complex19.multiply(382);
      Complex complex21 = complex4.multiply((-4));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      Complex complex4 = complex2.I.cos();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.INF.createComplex(0.0, 0.0);
      Complex complex7 = complex0.conjugate();
      double double0 = complex7.getImaginary();
      Complex complex8 = complex3.cosh();
      try { 
        complex3.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3573.215464907661));
      Complex complex1 = Complex.valueOf((-3573.215464907661));
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = Complex.valueOf((-3997.4986896575924), (-3997.4986896575924));
      Complex complex4 = complex2.INF.cos();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.ONE.subtract(complex0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex0.add((-1.0));
      Complex complex8 = complex1.atan();
      String string0 = complex8.NaN.toString();
      Complex complex9 = complex8.I.cosh();
      Complex complex10 = complex8.INF.divide(complex7);
      Complex complex11 = complex1.multiply(125.06552859496);
      Complex complex12 = complex9.cosh();
      Complex complex13 = complex12.I.sinh();
      List<Complex> list0 = complex4.nthRoot(412);
      String string1 = complex13.INF.toString();
      Complex complex14 = complex3.exp();
      Complex complex15 = complex9.reciprocal();
      Complex complex16 = complex4.cosh();
      double double0 = complex12.getArgument();
      boolean boolean1 = complex7.equals(complex10);
      Object object0 = complex4.readResolve();
      double double1 = complex11.getReal();
      double double2 = complex3.getArgument();
      Complex complex17 = complex13.multiply(412);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1240.45436536, 1240.45436536);
      Complex complex1 = complex0.createComplex(2850.5241994395246, 0.0);
      Complex complex2 = complex1.ZERO.tanh();
      Object object0 = complex1.I.readResolve();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.add(2850.5241994395246);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.ZERO.multiply(0);
      List<Complex> list0 = complex3.ZERO.nthRoot(1);
      Complex complex7 = complex1.createComplex(2850.5241994395246, (-1538.0));
      Complex complex8 = complex3.cos();
      Complex complex9 = complex0.subtract(complex5);
      Complex complex10 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = new Complex(20.0, 800.6691);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.ONE.cosh();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex5 = complex2.createComplex(20.0, 20.0);
      List<Complex> list0 = complex5.I.nthRoot(2972);
      // Undeclared exception!
      complex2.nthRoot(2972);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-1926.4635368554), 1520.78741);
      Complex complex1 = complex0.ONE.tan();
      Object object0 = complex0.ONE.readResolve();
      Complex complex2 = complex0.multiply(1520.78741);
      Complex complex3 = complex0.INF.pow(complex2);
      double double0 = complex3.NaN.abs();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.I.cos();
      boolean boolean0 = complex1.equals(complex4);
      Complex complex6 = complex0.multiply(complex2);
      double double1 = complex6.ZERO.getArgument();
      Complex complex7 = complex2.INF.sinh();
      double double2 = complex0.getImaginary();
      Complex complex8 = complex3.subtract(1520.78741);
      Complex complex9 = complex2.ONE.multiply(complex7);
      Complex complex10 = complex1.pow(complex0);
      Complex complex11 = complex8.multiply(9.420348186357043E-9);
      String string0 = complex2.toString();
      boolean boolean1 = complex0.isInfinite();
      Complex complex12 = complex1.tanh();
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(Double.NaN, 0.0);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.ONE.divide((-4.330693978322885E-8));
      Object object0 = complex0.I.readResolve();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex1.reciprocal();
      double double1 = complex5.abs();
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.cos();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = Complex.valueOf(6.283185307179586);
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex0.conjugate();
      int int0 = complex0.hashCode();
      Complex complex4 = complex1.I.pow(complex3);
      Complex complex5 = complex0.divide(6.283185307179586);
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex6.ONE.subtract(6.283185307179586);
      Complex complex8 = complex6.ONE.add(0.0);
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = complex8.NaN.cosh();
      Complex complex11 = complex0.subtract(complex5);
      Complex complex12 = complex11.ZERO.tanh();
      String string0 = complex1.toString();
      double double1 = complex4.getReal();
      Complex complex13 = complex3.ZERO.sin();
      Complex complex14 = complex11.createComplex((-0.9026853619330714), 2.092571258544922);
      Complex complex15 = complex14.ZERO.negate();
      Complex complex16 = Complex.valueOf((-2806.278));
      Complex complex17 = complex16.ZERO.sqrt1z();
      Complex complex18 = complex15.I.log();
      Complex complex19 = complex3.reciprocal();
      double double2 = complex15.getReal();
      Complex complex20 = complex6.sinh();
      Complex complex21 = complex13.sqrt();
      Complex complex22 = complex3.createComplex(0.0, 0.0);
      Complex complex23 = complex7.subtract(1463.5180715);
      Complex complex24 = complex23.add(complex3);
      Complex complex25 = complex20.sin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex1.I.tanh();
      double double0 = complex5.I.getArgument();
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex3.ONE.divide(1.5707963267948966);
      Complex complex9 = complex2.reciprocal();
      double double1 = complex9.ONE.abs();
      Complex complex10 = complex4.INF.acos();
      Complex complex11 = complex9.INF.pow(complex1);
      double double2 = complex2.getImaginary();
      double double3 = complex3.getReal();
      Complex complex12 = complex0.createComplex((-1.0), 0.0);
      double double4 = complex12.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex13 = complex11.I.conjugate();
      Complex complex14 = complex9.ONE.subtract(0.15943801403045654);
      double double5 = complex4.getReal();
      Complex complex15 = complex9.acos();
      Object object1 = complex11.readResolve();
      double double6 = complex15.getArgument();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex5.I.pow(complex3);
      Complex complex7 = complex2.divide(complex5);
      Complex complex8 = complex7.ONE.asin();
      Complex complex9 = complex0.INF.sin();
      Complex complex10 = complex4.ZERO.negate();
      Complex complex11 = complex4.ZERO.multiply((-2652));
      Complex complex12 = complex11.INF.exp();
      Complex complex13 = complex8.ONE.asin();
      int int0 = complex7.I.hashCode();
      Complex complex14 = complex8.ZERO.log();
      Complex complex15 = complex14.ONE.sin();
      Complex complex16 = complex8.NaN.add((-122.721008436));
      Complex complex17 = complex4.I.acos();
      ComplexField complexField0 = complex0.getField();
      Complex complex18 = complex3.ZERO.sinh();
      Complex complex19 = complex3.createComplex(0.0, 0.0);
      Complex complex20 = complex4.add(0.0);
      Complex complex21 = complex8.multiply(complex1);
      Complex complex22 = complex3.sinh();
      Complex complex23 = complex22.ZERO.asin();
      Complex complex24 = complex14.sinh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.asin();
      double double0 = complex2.INF.abs();
      Complex complex3 = complex0.INF.add(complex1);
      Object object0 = complex3.ONE.readResolve();
      String string0 = complex3.I.toString();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex6.ZERO.sqrt1z();
      Complex complex8 = complex6.atan();
      Complex complex9 = Complex.valueOf(0.0, 3719.233);
      double double1 = complex1.ZERO.getArgument();
      Complex complex10 = complex1.cosh();
      Complex complex11 = complex0.sinh();
      Complex complex12 = complex11.sin();
      Complex complex13 = complex1.sinh();
      Complex complex14 = complex13.I.negate();
      double double2 = complex10.getArgument();
      Complex complex15 = complex7.divide(3719.233);
      Complex complex16 = complex10.sqrt();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex15.isNaN();
      Complex complex17 = complex9.tanh();
      Complex complex18 = complex12.multiply(0.0);
      Complex complex19 = complex5.tan();
      Complex complex20 = complex13.multiply(Double.POSITIVE_INFINITY);
      Complex complex21 = complex17.conjugate();
      Complex complex22 = Complex.valueOf(35.48712);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-591.49));
      Complex complex1 = Complex.valueOf((-591.49));
      Complex complex2 = Complex.valueOf((-591.49), 0.0);
      Complex complex3 = complex1.ONE.sqrt1z();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex2.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-469.377534), (-747.272));
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.multiply(456);
      Object object0 = complex0.NaN.readResolve();
      double double0 = complex0.ONE.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.ZERO.multiply(1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex4.asin();
      Complex complex7 = Complex.valueOf((double) 1, (-264.751827));
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.NaN.sinh();
      Complex complex10 = complex0.acos();
      ComplexField complexField1 = complex0.getField();
      boolean boolean1 = complex1.equals(complex4);
      Complex complex11 = complex1.sqrt();
      boolean boolean2 = complex10.isNaN();
      Complex complex12 = complex5.divide((-2534.1688898524));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.createComplex(2136.281329099, (-1093.122892440093));
      Complex complex3 = Complex.valueOf(0.0, 863.69461);
      Complex complex4 = complex2.acos();
      String string0 = complex4.NaN.toString();
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex0.INF.atan();
      Complex complex7 = Complex.valueOf(2136.281329099);
      Complex complex8 = complex7.INF.divide(complex1);
      Complex complex9 = complex1.subtract(complex2);
      double double0 = complex9.getArgument();
      Complex complex10 = complex0.pow(2136.281329099);
      Complex complex11 = complex10.NaN.sqrt1z();
      Complex complex12 = complex9.pow(complex1);
      Complex complex13 = complex12.NaN.sinh();
      double double1 = complex0.getArgument();
      Complex complex14 = Complex.valueOf((-2142.0), 863.69461);
      double double2 = complex14.I.abs();
      try { 
        complex1.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.ZERO.createComplex((-1520.0), (-1520.0));
      Complex complex5 = complex1.I.subtract((-6.887556547891059E-9));
      Complex complex6 = complex2.I.multiply((-6.887556547891059E-9));
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = Complex.valueOf((-1395.0665815083028));
      Complex complex8 = complex0.add(complex7);
      double double0 = complex7.getImaginary();
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex0.ZERO.sin();
      boolean boolean1 = complex1.isInfinite();
      double double1 = complex7.getArgument();
      double double2 = complex6.getReal();
      Complex complex11 = complex5.multiply((-1529));
      double double3 = complex8.abs();
      Complex complex12 = complex5.sinh();
      Complex complex13 = complex4.multiply((-2689));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3433.5763, (-20.0));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.ZERO.tanh();
      Complex complex5 = Complex.valueOf((-20.0), (-20.0));
      List<Complex> list0 = complex5.NaN.nthRoot(203);
      List<Complex> list1 = complex5.NaN.nthRoot(2324);
      Complex complex6 = complex1.add(complex0);
      int int0 = complex1.hashCode();
      Complex complex7 = complex1.asin();
      String string0 = complex0.toString();
      Complex complex8 = complex3.cos();
      Complex complex9 = complex4.add((double) 2324);
      Complex complex10 = complex2.pow(complex9);
      boolean boolean0 = complex6.equals(list1);
      boolean boolean1 = complex1.isInfinite();
      Object object0 = complex10.readResolve();
      Complex complex11 = Complex.valueOf(0.6160298585891724, 449.9191);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(10.8562859844, 10.8562859844);
      Complex complex1 = complex0.ZERO.acos();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.asin();
      Object object0 = complex0.readResolve();
      String string0 = complex0.NaN.toString();
      Complex complex3 = complex2.multiply(2.0);
      Complex complex4 = complex3.ZERO.add(2.0);
      Complex complex5 = Complex.valueOf(3.493427277593156E19, 1662.199669326);
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex1.add(2.0);
      Complex complex8 = complex7.ZERO.createComplex(3.493427277593156E19, 0.0);
      boolean boolean0 = complex3.equals((Object) null);
      Complex complex9 = complex1.createComplex(2.0, 10.8562859844);
      Complex complex10 = complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      Complex complex1 = complex0.INF.reciprocal();
      double double0 = complex0.getArgument();
      double double1 = complex0.getImaginary();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex2.ZERO.log();
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex2.sqrt();
      List<Complex> list0 = complex7.nthRoot(1);
      Complex complex8 = complex7.cos();
      Object object0 = complex1.readResolve();
      Complex complex9 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2655.0821423930033));
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.atan();
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.I.tanh();
      Complex complex5 = complex2.conjugate();
      double double1 = complex5.I.abs();
      Object object0 = complex5.I.readResolve();
      Complex complex6 = complex0.sqrt1z();
      String string0 = complex6.I.toString();
      Complex complex7 = complex4.multiply(complex1);
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex4.NaN.divide(0.0);
      Complex complex10 = complex8.ZERO.negate();
      Complex complex11 = complex8.sinh();
      Complex complex12 = complex5.I.tanh();
      Complex complex13 = complex8.ZERO.sin();
      Complex complex14 = complex13.I.log();
      double double2 = complex4.abs();
      Complex complex15 = complex8.negate();
      Complex complex16 = complex15.subtract(0.0);
      Complex complex17 = complex5.subtract(complex7);
      double double3 = complex14.getReal();
      Complex complex18 = complex8.sin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-1372.58591), (-1171.577231));
      Complex complex1 = complex0.tan();
      int int0 = complex0.ONE.hashCode();
      double double0 = (-1424.4419);
      Complex complex2 = Complex.valueOf((-1424.4419));
      double double1 = 20.0;
      Complex complex3 = complex0.multiply(20.0);
      Complex complex4 = complex1.tanh();
      try { 
        complex4.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(798.7509);
      Complex complex1 = complex0.ONE.conjugate();
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = Complex.valueOf(798.7509, 0.0);
      Complex complex5 = complex3.ZERO.conjugate();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex4.ONE.multiply((-1934.80533477));
      Complex complex9 = Complex.valueOf(615.5993009274941);
      Complex complex10 = complex8.ZERO.divide(complex1);
      Complex complex11 = complex2.NaN.createComplex(0.0, (-1934.80533477));
      Complex complex12 = complex3.pow(0.0);
      Complex complex13 = complex1.tan();
      Complex complex14 = complex3.INF.sqrt1z();
      int int0 = complex2.hashCode();
      Complex complex15 = complex12.multiply(complex2);
      Complex complex16 = new Complex(798.7509, 798.7509);
      Complex complex17 = complex15.I.multiply(complex16);
      Complex complex18 = complex15.I.divide(complex13);
      ComplexField complexField0 = complex15.INF.getField();
      double double1 = complex1.getReal();
      Complex complex19 = complex15.sin();
      Complex complex20 = complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(997.515013461);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex0.subtract(997.515013461);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.49678635597229, 1639.83);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.multiply(37);
      Complex complex3 = complex0.log();
      List<Complex> list0 = complex2.nthRoot(404);
      Complex complex4 = complex2.pow(1639.83);
      Complex complex5 = Complex.valueOf(3642.0);
      Complex complex6 = complex2.NaN.negate();
      double double0 = complex0.ONE.getArgument();
      Complex complex7 = complex3.multiply(37);
      Complex complex8 = complex2.tan();
      Complex complex9 = complex8.divide(3140.0);
      List<Complex> list1 = complex9.ONE.nthRoot(404);
      Complex complex10 = complex0.pow(2091.5);
      Complex complex11 = complex0.pow((double) 404);
      Complex complex12 = complex4.negate();
      Complex complex13 = complex4.cosh();
      Complex complex14 = complex4.atan();
      Complex complex15 = complex8.atan();
      Complex complex16 = complex10.subtract((-659.06));
      Complex complex17 = complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.pow((-1078.0));
      List<Complex> list0 = complex0.nthRoot(1668);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.valueOf((-2452.313), (-2452.313));
      Complex complex4 = complex3.sin();
      double double0 = complex4.ZERO.getArgument();
      Complex complex5 = complex2.subtract((-2452.313));
      Complex complex6 = complex0.ONE.subtract(complex2);
      int int0 = complex5.hashCode();
      Complex complex7 = new Complex((-511.103632937903));
      Complex complex8 = complex1.ZERO.tanh();
      Complex complex9 = complex1.NaN.divide(complex7);
      Complex complex10 = complex5.subtract(0.0);
      Complex complex11 = complex0.add(complex5);
      Complex complex12 = complex9.sin();
      Complex complex13 = complex8.pow((-1499.2663749053));
      Complex complex14 = complex1.I.multiply(complex13);
      Complex complex15 = complex0.acos();
      Complex complex16 = complex7.divide((-2452.313));
      Complex complex17 = complex8.add(complex16);
      Complex complex18 = Complex.valueOf(1448.2795983822623, 0.09584270417690277);
      boolean boolean0 = complex5.equals(complex8);
      Complex complex19 = complex7.sin();
      Complex complex20 = complex8.atan();
      Complex complex21 = complex11.subtract(complex20);
      double double1 = complex15.abs();
      Complex complex22 = complex1.negate();
      Object object0 = complex3.readResolve();
      Complex complex23 = Complex.ZERO;
      Complex complex24 = complex15.multiply(complex23);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2391.1378643478674), (-2391.1378643478674));
      Complex complex1 = Complex.valueOf(0.1666666505023083, 0.0);
      Complex complex2 = Complex.NaN;
      boolean boolean0 = complex1.equals(complex2);
      Complex complex3 = complex2.NaN.multiply(63);
      Complex complex4 = complex2.divide(1.0);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.ZERO.add(complex4);
      Complex complex7 = complex4.ZERO.sinh();
      Complex complex8 = complex4.asin();
      Complex complex9 = complex5.sqrt();
      Complex complex10 = complex1.asin();
      Complex complex11 = complex4.pow(complex0);
      Complex complex12 = complex9.ZERO.exp();
      Complex complex13 = complex11.reciprocal();
      boolean boolean1 = complex0.isNaN();
      double double0 = complex3.getReal();
      Complex complex14 = complex9.negate();
      Complex complex15 = complex7.sqrt();
      Complex complex16 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.sinh();
      String string0 = complex2.ZERO.toString();
      String string1 = complex1.toString();
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = complex3.INF.subtract(complex0);
      Complex complex5 = complex4.I.sqrt1z();
      double double0 = complex0.ONE.abs();
      Complex complex6 = complex2.conjugate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex7.atan();
      Object object0 = complex4.readResolve();
      List<Complex> list0 = complex3.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 0.0;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.cosh();
      double double1 = complex0.ONE.getArgument();
      Complex complex5 = complex0.NaN.createComplex(0.0, 0.0);
      Complex complex6 = complex0.I.acos();
      Complex complex7 = complex0.INF.tan();
      int int0 = 17;
      List<Complex> list0 = complex0.nthRoot(17);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.subtract(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.INF.conjugate();
      Complex complex4 = complex3.add(Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.equals("8f0a >lPy{x;<+2");
      double double0 = complex0.I.getArgument();
      Complex complex5 = complex0.NaN.multiply((-91.68413143749338));
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.INF.tan();
      Complex complex8 = complex5.ONE.divide(complex7);
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex5.exp();
      double double1 = complex6.getArgument();
      Complex complex11 = complex5.reciprocal();
      Complex complex12 = complex5.sqrt();
      Complex complex13 = complex12.divide(complex11);
      double double2 = complex9.ZERO.getArgument();
      Complex complex14 = complex9.pow(complex8);
      Object object0 = complex14.readResolve();
      double double3 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3368.063862469));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7077150344848633, 2607.469983);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.createComplex(1.7077150344848633, 586.751521);
      Complex complex3 = complex0.ONE.divide(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex2.tanh();
      ComplexField complexField0 = complex4.getField();
      Complex complex5 = complex0.INF.acos();
      Complex complex6 = complex4.exp();
      Complex complex7 = complex6.INF.multiply(complex3);
      ComplexField complexField1 = complex0.getField();
      Complex complex8 = Complex.valueOf(586.751521);
      Complex complex9 = complex3.multiply((-5719.421001));
      double double0 = complex9.INF.getArgument();
      Complex complex10 = complex3.multiply(complex8);
      Complex complex11 = complex5.negate();
      Complex complex12 = complex10.ZERO.acos();
      Complex complex13 = Complex.valueOf(4294.021);
      Complex complex14 = complex11.cosh();
      Complex complex15 = complex4.tanh();
      Complex complex16 = complex10.sinh();
      int int0 = complex16.hashCode();
      Complex complex17 = complex10.pow(complex15);
      Complex complex18 = complex3.add(complex14);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex1.INF.subtract(26.7403627611452);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex0.ONE.pow(1336.0);
      Complex complex6 = complex5.NaN.reciprocal();
      Complex complex7 = complex0.NaN.negate();
      Complex complex8 = complex7.INF.multiply(1);
      Complex complex9 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.add(2355.4039847383046);
      Complex complex2 = Complex.valueOf(2355.4039847383046);
      String string0 = complex0.toString();
      double double0 = complex2.ONE.abs();
      Complex complex3 = Complex.valueOf((-120.63237937));
      Complex complex4 = complex2.pow((-120.63237937));
      Complex complex5 = complex0.createComplex(2355.4039847383046, (-2707.21));
      Complex complex6 = complex3.add(complex5);
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex5.subtract(complex0);
      Complex complex9 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-1.3577357192972777E258));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.subtract(2110.29);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ONE.multiply(1379);
      Complex complex5 = complex0.multiply((-6.990650304449166E-10));
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.ONE.divide(complex0);
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex5.pow(1.9299691540987203E36);
      boolean boolean0 = complex8.equals(complex9);
      Complex complex10 = complex5.acos();
      Complex complex11 = complex2.createComplex(Double.NaN, 6.283185307179586);
      Complex complex12 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      double double0 = complex0.I.abs();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex2.I.conjugate();
      Object object0 = complex3.INF.readResolve();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex4.INF.subtract((-1650.9));
      int int0 = complex6.I.hashCode();
      List<Complex> list0 = complex4.INF.nthRoot(2800);
      Complex complex7 = complex1.subtract(complex0);
      Complex complex8 = complex7.ZERO.multiply((-1650.9));
      Complex complex9 = complex2.tanh();
      Complex complex10 = complex9.cos();
      Complex complex11 = complex10.INF.sqrt1z();
      Complex complex12 = complex0.atan();
      Complex complex13 = complex12.NaN.subtract(complex1);
      boolean boolean0 = complex8.isNaN();
      int int1 = complex12.hashCode();
      Complex complex14 = complex0.tanh();
      Complex complex15 = complex8.log();
      Complex complex16 = complex4.tan();
      Complex complex17 = complex1.multiply((double) 2800);
      Complex complex18 = complex10.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.subtract((-976.8394930692));
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = Complex.valueOf((-3228.45), (-3228.45));
      Complex complex5 = complex3.sqrt();
      double double0 = complex5.I.getArgument();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.INF.tan();
      Object object0 = complex6.ONE.readResolve();
      Complex complex8 = complex1.sqrt();
      boolean boolean1 = complex5.isNaN();
      String string0 = complex0.toString();
      Complex complex9 = complex1.multiply(complex4);
      Complex complex10 = complex7.createComplex(Double.POSITIVE_INFINITY, (-976.8394930692));
      Complex complex11 = complex1.add(complex3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = Complex.valueOf(570.490556398);
      double double1 = complex4.I.abs();
      Complex complex5 = complex2.INF.log();
      Complex complex6 = complex1.acos();
      String string0 = complex0.I.toString();
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex8.INF.negate();
      double double2 = complex0.getArgument();
      Complex complex10 = complex1.sinh();
      Complex complex11 = complex2.subtract(0.0);
      Complex complex12 = complex7.acos();
      Complex complex13 = complex5.divide(6.918275021321188E-284);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.divide((-1.297587351085525E-7));
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex1.I.pow((-1.297587351085525E-7));
      Complex complex4 = complex0.NaN.cosh();
      Complex complex5 = complex3.INF.subtract(complex1);
      Object object0 = complex0.readResolve();
      Complex complex6 = complex1.ONE.multiply((-1.297587351085525E-7));
      Complex complex7 = complex5.ONE.add(complex0);
      Complex complex8 = complex7.INF.multiply(complex2);
      Complex complex9 = complex0.subtract((-1.297587351085525E-7));
      Complex complex10 = complex9.I.add(0.0);
      Complex complex11 = complex2.sqrt();
      Complex complex12 = complex3.ONE.multiply(complex5);
      Complex complex13 = complex11.INF.reciprocal();
      Complex complex14 = complex13.INF.add(6.283185307179586);
      Complex complex15 = complex5.sqrt();
      Complex complex16 = complex13.ONE.exp();
      Complex complex17 = complex5.divide((-1.297587351085525E-7));
      Complex complex18 = complex13.divide(6.283185307179586);
      Complex complex19 = Complex.valueOf((-356.8), (-3.141592653589793));
      int int0 = complex13.hashCode();
      double double1 = complex13.getReal();
      String string0 = complex3.toString();
      boolean boolean0 = complex13.equals(complex5);
      Complex complex20 = complex13.tanh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(1584.4591196);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.NaN.add(complex1);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex1.INF.abs();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.I.sinh();
      double double1 = complex7.ZERO.abs();
      Complex complex8 = complex2.cos();
      Complex complex9 = complex6.cosh();
      Complex complex10 = Complex.valueOf((-3987.5033614205945), 1584.4591196);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.ONE.subtract(1549.081756069069);
      Complex complex3 = complex0.NaN.exp();
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex4.ZERO.sqrt();
      Complex complex7 = complex6.INF.multiply(complex0);
      Complex complex8 = complex3.I.multiply(0);
      Complex complex9 = complex0.I.createComplex(0.0, 0.0);
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex9.I.reciprocal();
      Complex complex12 = complex0.subtract((-2379.369765146));
      double double0 = complex9.getReal();
      double double1 = complex3.getImaginary();
      Complex complex13 = Complex.valueOf((-2379.369765146), Double.NaN);
      Complex complex14 = complex13.I.negate();
      Complex complex15 = complex14.ONE.multiply(complex10);
      double double2 = complex9.abs();
      Complex complex16 = complex11.cos();
      Complex complex17 = complex9.divide(Double.NaN);
      Complex complex18 = complex17.ONE.divide((-2379.369765146));
      Complex complex19 = complex17.NaN.add(complex3);
      Complex complex20 = complex4.subtract(complex6);
      Object object0 = complex20.ONE.readResolve();
      boolean boolean0 = complex3.isNaN();
      double double3 = complex14.getArgument();
      double double4 = complex10.getReal();
      Complex complex21 = complex17.atan();
      Complex complex22 = complex19.createComplex(0.0, 1549.081756069069);
      Complex complex23 = complex19.sin();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-2101.6586165389));
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex0.ONE.add(complex2);
      Object object0 = complex2.NaN.readResolve();
      Complex complex4 = complex2.INF.acos();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex1.ONE.pow(0.0);
      Complex complex7 = complex0.add(0.0);
      Complex complex8 = complex2.negate();
      Complex complex9 = complex7.NaN.multiply((-20.0));
      Complex complex10 = complex8.I.add(complex2);
      Complex complex11 = complex2.ONE.atan();
      boolean boolean0 = complex3.isInfinite();
      Complex complex12 = complex7.divide(complex0);
      Complex complex13 = complex5.cos();
      Complex complex14 = complex4.exp();
      boolean boolean1 = complex13.isInfinite();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      Complex complex5 = complex4.I.add(0.0);
      Complex complex6 = complex3.atan();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.ZERO.multiply(0.0);
      Complex complex9 = complex7.I.cos();
      Complex complex10 = complex9.I.divide(0.0);
      Complex complex11 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.I.atan();
      Complex complex5 = Complex.NaN;
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex6 = complex3.subtract(complex5);
      Complex complex7 = complex6.ONE.subtract(complex4);
      double double0 = complex4.getReal();
      Complex complex8 = complex3.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.subtract((-684.5480685));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.multiply((-1258.429628));
      Complex complex4 = complex1.createComplex((-3826.0), 0.0);
      Complex complex5 = Complex.valueOf(0.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.I.multiply((-1.0));
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex3.ONE.divide(complex1);
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex0.ZERO.pow(Double.NaN);
      Complex complex7 = complex0.negate();
      boolean boolean0 = complex3.isNaN();
      Complex complex8 = complex6.pow(complex1);
      Complex complex9 = complex1.pow(3.6508464654683645E118);
      double double0 = complex8.getImaginary();
      double double1 = complex1.getReal();
      double double2 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.acos();
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.divide((-656.2379292659588));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.NaN.add(8.315287232107949E-7);
      Complex complex4 = complex0.I.tan();
      Complex complex5 = complex0.INF.pow(8.315287232107949E-7);
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex0.I.divide(Double.NaN);
      Complex complex8 = complex0.tanh();
      ComplexField complexField0 = complex8.I.getField();
      Complex complex9 = Complex.valueOf(Double.NaN);
      Complex complex10 = complex1.exp();
      Complex complex11 = complex10.atan();
      Complex complex12 = complex10.ONE.divide(8.315287232107949E-7);
      Complex complex13 = complex1.sqrt();
      Complex complex14 = complex13.log();
      Complex complex15 = complex10.add(complex8);
      Complex complex16 = complex15.divide(complex3);
      Complex complex17 = complex14.negate();
      boolean boolean0 = complex9.isNaN();
      Complex complex18 = complex2.asin();
      Complex complex19 = complex9.exp();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.ZERO.multiply(2921);
      Complex complex3 = Complex.valueOf((double) 2921, Double.NaN);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.NaN.multiply(592.507287194);
      Complex complex6 = complex1.sqrt();
      Complex complex7 = Complex.valueOf((-2410.936353352), 540.3);
      Complex complex8 = complex5.INF.sinh();
      Complex complex9 = complex7.ONE.sqrt1z();
      List<Complex> list0 = complex2.I.nthRoot(205);
      Complex complex10 = complex2.multiply(205);
      double double1 = complex10.getReal();
      Complex complex11 = complex5.multiply(540.3);
      Complex complex12 = complex2.pow(complex9);
      Complex complex13 = complex11.negate();
      boolean boolean0 = complex9.isNaN();
      Complex complex14 = complex5.subtract(complex7);
      boolean boolean1 = complex8.isInfinite();
      Complex complex15 = complex12.atan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex2.ONE.reciprocal();
      Complex complex5 = complex0.sin();
      double double0 = complex1.getReal();
      double double1 = complex5.abs();
      String string0 = complex5.ONE.toString();
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.divide(complex1);
      Complex complex8 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex9 = complex8.I.multiply((-1300));
      List<Complex> list0 = complex7.nthRoot(1);
      boolean boolean0 = complex7.isNaN();
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1671.0);
      Complex complex1 = complex0.negate();
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex1.NaN.divide(1671.0);
      Complex complex3 = complex1.add(2448.2999471028);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex0.asin();
      int int1 = complex4.ONE.hashCode();
      double double0 = complex2.getReal();
      Complex complex5 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double double0 = (-1218.3818);
      double double1 = (-820.0484588122);
      Complex complex0 = new Complex((-1218.3818), (-820.0484588122));
      Complex complex1 = complex0.subtract((-820.0484588122));
      Complex complex2 = complex0.pow((-1218.3818));
      Complex complex3 = Complex.valueOf((-820.0484588122), (-820.0484588122));
      Complex complex4 = complex2.subtract((-1218.3818));
      Complex complex5 = Complex.valueOf((-1218.3818));
      Complex complex6 = complex3.NaN.log();
      Complex complex7 = complex2.INF.sqrt1z();
      try { 
        complex2.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-2264.15545052821), (-2264.15545052821));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.sqrt();
      ComplexField complexField0 = complex1.I.getField();
      double double0 = complex0.ZERO.abs();
      double double1 = complex0.abs();
      ComplexField complexField1 = complex0.getField();
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex2.INF.tan();
      boolean boolean0 = complex2.equals(complexField0);
      Object object0 = complex2.INF.readResolve();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.I.divide(0.0);
      Complex complex7 = complex2.exp();
      double double2 = complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(326.41213184494);
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex1.multiply((-1025));
      Complex complex4 = complex1.tanh();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex5 = complex1.subtract(326.41213184494);
      Object object0 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-2.2667083759873216E16), (-2.2667083759873216E16));
      Complex complex1 = Complex.NaN;
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex0.ONE.tan();
      String string0 = complex0.I.toString();
      Complex complex5 = complex4.ONE.cosh();
      double double1 = complex0.INF.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.asin();
      double double2 = complex6.ONE.getArgument();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2360.3102869);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.INF.createComplex(74.4820084099, 2755.954);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1840.1175);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex4.asin();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-539.66228278));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex1.I.asin();
      Complex complex4 = complex0.pow((-539.66228278));
      Complex complex5 = complex1.I.atan();
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex4.pow(complex0);
      Object object0 = complex2.readResolve();
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2187.1387);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.divide(2187.1387);
      double double0 = complex1.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.ZERO.multiply((-1885));
      Complex complex6 = Complex.valueOf((-1798.0), 0.0);
      Complex complex7 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(554.78091884, 554.78091884);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = complex2.I.multiply((-1017));
      Complex complex5 = complex4.INF.asin();
      Complex complex6 = complex1.subtract((-2941.3067105325));
      double double0 = complex2.getArgument();
      Complex complex7 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.exp();
      String string0 = complex1.I.toString();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex2.divide(complex0);
      double double0 = complex4.I.getArgument();
      Complex complex5 = complex4.INF.divide(1.5707963267948966);
      Complex complex6 = complex2.sin();
      String string1 = complex4.toString();
      Complex complex7 = complex4.atan();
      Object object0 = complex5.readResolve();
      String string2 = complex4.toString();
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex4.divide(complex1);
      Complex complex10 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = Complex.valueOf((-957.9299418607435));
      double double0 = complex0.abs();
      double double1 = complex0.getReal();
      Complex complex3 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex1.NaN.pow(2.0);
      Complex complex4 = complex2.INF.log();
      Complex complex5 = complex4.add(3518.992314915028);
      Complex complex6 = complex0.divide(complex1);
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex0.pow(complex3);
      Complex complex9 = complex8.multiply(0);
      Complex complex10 = complex6.add(0.0);
      Complex complex11 = complex10.ZERO.sinh();
      Complex complex12 = complex1.cos();
      Complex complex13 = complex1.add((-375.72886));
      List<Complex> list1 = complex13.ZERO.nthRoot(1);
      Complex complex14 = complex9.asin();
      Complex complex15 = complex14.cos();
      Complex complex16 = complex14.ONE.conjugate();
      Complex complex17 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(54.862159, (-1397.692307844455));
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.ZERO.subtract(complex2);
      Complex complex6 = complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.ONE.multiply((-4407));
      Complex complex4 = complex3.ONE.add(complex1);
      Complex complex5 = complex2.INF.sin();
      Complex complex6 = complex5.I.exp();
      Complex complex7 = complex2.divide(complex0);
      ComplexField complexField0 = complex7.ZERO.getField();
      Complex complex8 = complex7.INF.add(complex6);
      Complex complex9 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(1.1309373378753662, (-933.7096209));
      Complex complex1 = complex0.add(0.6338034868240356);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5086.223607);
      Complex complex1 = complex0.NaN.multiply((-4991));
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.divide(complex3);
      try { 
        complex3.nthRoot((-4991));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,991
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.sqrt();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex3 = complex0.ZERO.sqrt();
      Complex complex4 = complex1.INF.createComplex(0.0, 0.0);
      double double0 = complex2.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex0.multiply(complex0);
      ComplexField complexField1 = complex4.ONE.getField();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex1.sin();
      int int0 = complex4.hashCode();
      Complex complex8 = complex4.acos();
      String string0 = complex2.toString();
      Complex complex9 = complex2.INF.acos();
      Complex complex10 = complex5.cosh();
      Complex complex11 = complex5.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(4475.88019, 4475.88019);
      Complex complex1 = new Complex(4475.88019, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex0.multiply(4475.88019);
      double double0 = complex0.abs();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex5.I.divide(6329.850468255066);
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex7.ONE.multiply(complex2);
      Complex complex10 = complex8.NaN.pow(0.0);
      Complex complex11 = complex8.subtract(complex7);
      Complex complex12 = complex1.tan();
      ComplexField complexField0 = complex12.getField();
      Object object0 = complex12.readResolve();
      ComplexField complexField1 = complex0.INF.getField();
      Complex complex13 = complex12.subtract(2295.11069359);
      Complex complex14 = complex2.negate();
      Complex complex15 = Complex.valueOf(3993.917278, 0.0);
      Complex complex16 = complex12.divide((-2654.844443504035));
      Object object1 = complex14.readResolve();
      Complex complex17 = complex10.exp();
      int int0 = complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2141.0));
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.cosh();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.3982778787612915);
      Complex complex1 = complex0.multiply(Double.NaN);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex1.ZERO.multiply(complex0);
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex5 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-3157.427084105894));
      Complex complex1 = complex0.INF.negate();
      int int0 = complex0.I.hashCode();
      List<Complex> list0 = complex0.nthRoot(264);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.cos();
      ComplexField complexField0 = complex2.ZERO.getField();
      List<Complex> list1 = complex0.nthRoot(264);
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.createComplex(73.128649572, 6.283185307179586);
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex2.NaN.subtract(0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.add(788.6309);
      Complex complex2 = complex1.NaN.multiply(20.0);
      Complex complex3 = Complex.valueOf(1822.0279667);
      Complex complex4 = complex0.INF.divide(complex3);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex0.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(2.2038806519542315E-267, 415.922);
      Complex complex1 = complex0.NaN.multiply(0);
      Complex complex2 = complex0.sin();
      double double0 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1274.3207, 2.655990315697216E-10);
      Complex complex1 = complex0.sqrt();
      double double0 = 934.8821;
      Complex complex2 = Complex.valueOf(934.8821);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex0.subtract(1154.6793662057);
      Complex complex6 = complex3.NaN.multiply(778);
      Complex complex7 = complex1.asin();
      try { 
        complex1.nthRoot((-2351));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,351
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1317.8);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex0.ZERO.sqrt();
      ComplexField complexField0 = complex5.getField();
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.I.sin();
      Complex complex7 = complex6.tanh();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex5.isInfinite();
      Complex complex8 = complex0.subtract(complex2);
      Complex complex9 = complex1.INF.add(0.0);
      Complex complex10 = complex8.subtract(1317.8);
      Complex complex11 = complex5.multiply(0.0);
      Complex complex12 = Complex.valueOf((-1248.72129791019));
      boolean boolean2 = complex5.isNaN();
      Complex complex13 = complex2.acos();
      Complex complex14 = complex5.ZERO.asin();
      Complex complex15 = complex13.subtract(521.91440592);
      Complex complex16 = complex10.exp();
      String string0 = complex0.toString();
      Complex complex17 = complex11.log();
      Complex complex18 = complex11.add(complex12);
      Complex complex19 = complex0.subtract(complex2);
      Complex complex20 = complex3.conjugate();
      try { 
        complex7.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.NaN.hashCode();
      int int1 = complex0.INF.hashCode();
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.ZERO.log();
      double double0 = complex0.getImaginary();
      String string0 = complex0.toString();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.sqrt1z();
      boolean boolean0 = complex2.isInfinite();
      Complex complex4 = complex3.multiply(647.64);
      Complex complex5 = complex4.ONE.divide(647.64);
      Complex complex6 = complex5.add(complex3);
      double double1 = complex6.I.getArgument();
      Object object1 = complex2.INF.readResolve();
      List<Complex> list0 = complex1.nthRoot(1);
      boolean boolean1 = complex2.equals(complex0);
      Complex complex7 = complex2.sin();
      Complex complex8 = Complex.valueOf(0.0, 2633.564);
      String string1 = complex7.I.toString();
      Complex complex9 = complex8.INF.acos();
      int int2 = complex7.hashCode();
      Complex complex10 = complex0.atan();
      String string2 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(4.0447634595724164E195);
      Complex complex1 = complex0.I.multiply(1058.0);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.I.pow(complex0);
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.ONE.reciprocal();
      Complex complex8 = complex7.I.reciprocal();
      Complex complex9 = complex1.add(complex6);
      Complex complex10 = complex9.multiply(399.2130484249685);
      Complex complex11 = complex9.ZERO.createComplex((-3178.75648006111), 4.0447634595724164E195);
      boolean boolean0 = complex6.equals(complex9);
      Complex complex12 = complex1.acos();
      Complex complex13 = complex5.sqrt1z();
      Complex complex14 = complex4.add(0.0);
      Complex complex15 = complex14.I.add(0.0);
      Complex complex16 = complex1.conjugate();
      int int1 = complex14.hashCode();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(1.0, 0.0);
      Complex complex2 = complex0.NaN.pow(2375.7531128613);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex0.ONE.sinh();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex0.ONE.subtract(2375.7531128613);
      Complex complex8 = complex6.INF.multiply(complex3);
      Complex complex9 = complex8.ONE.tan();
      Complex complex10 = complex1.I.cos();
      Complex complex11 = complex4.I.atan();
      Complex complex12 = Complex.valueOf(0.0, (-2217.44803813));
      Complex complex13 = complex12.negate();
      Complex complex14 = complex6.ZERO.conjugate();
      Complex complex15 = complex14.NaN.multiply(1797);
      double double0 = complex0.getImaginary();
      Complex complex16 = complex6.divide(0.0);
      Complex complex17 = complex13.add(complex10);
      ComplexField complexField0 = complex13.getField();
      Complex complex18 = complex9.divide(588.993469444);
      Complex complex19 = complex4.tan();
      Complex complex20 = complex9.negate();
      Complex complex21 = complex18.tan();
      Complex complex22 = Complex.valueOf((double) 1797);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(1525.529, 743.9764);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.multiply(2.373243808746338);
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.ZERO.createComplex(122.62480909, 2.373243808746338);
      Complex complex6 = complex4.I.pow(complex2);
      Complex complex7 = complex6.multiply(complex4);
      Complex complex8 = complex0.NaN.sqrt1z();
      Complex complex9 = complex8.ZERO.add(complex1);
      Complex complex10 = complex6.reciprocal();
      double double0 = complex2.I.abs();
      Complex complex11 = complex0.pow(complex4);
      Complex complex12 = complex11.NaN.cosh();
      Complex complex13 = complex11.ONE.exp();
      Complex complex14 = complex0.multiply(0);
      try { 
        complex14.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2742.94, 1867.4);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.ONE.tanh();
      int int0 = complex4.NaN.hashCode();
      Complex complex5 = complex3.INF.reciprocal();
      Complex complex6 = complex4.INF.sinh();
      Complex complex7 = complex2.INF.cos();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex8.asin();
      Complex complex10 = complex9.ZERO.cosh();
      Complex complex11 = complex2.sqrt1z();
      Complex complex12 = complex1.asin();
      Complex complex13 = Complex.INF;
      Complex complex14 = complex12.multiply(complex13);
      Complex complex15 = complex1.acos();
      boolean boolean0 = complex0.isInfinite();
      Complex complex16 = complex3.sqrt();
      Complex complex17 = complex16.ZERO.pow((-1191.3));
      double double0 = complex17.ZERO.getArgument();
      double double1 = complex12.getArgument();
      Complex complex18 = complex0.log();
      String string0 = complex2.I.toString();
      Complex complex19 = complex12.pow(complex2);
      double double2 = complex15.getImaginary();
      Object object0 = complex15.readResolve();
      boolean boolean1 = complex9.isNaN();
      Complex complex20 = complex18.multiply((-1191.3));
      Complex complex21 = complex12.conjugate();
      Complex complex22 = complex11.log();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(2.0);
      Complex complex2 = complex1.INF.createComplex(0.0, (-2469.2));
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex0.multiply(2824);
      Object object0 = complex4.readResolve();
      Complex complex5 = complex4.createComplex(2824, 2.0);
      Complex complex6 = complex5.ONE.multiply(complex4);
      Complex complex7 = complex6.ZERO.reciprocal();
      double double0 = complex4.getImaginary();
      Complex complex8 = complex1.multiply(complex0);
      Complex complex9 = complex1.cos();
      boolean boolean0 = complex9.isInfinite();
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex10.NaN.sin();
      Complex complex12 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.asin();
      ComplexField complexField0 = complex1.getField();
      List<Complex> list0 = complex1.nthRoot(2254);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = Complex.valueOf(1479.1);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex1.divide(complex4);
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.pow(0.0);
      Complex complex3 = Complex.valueOf((-681.33796461524), (-681.33796461524));
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.INF.reciprocal();
      Complex complex9 = complex8.ONE.subtract((-681.33796461524));
      Complex complex10 = complex8.createComplex(0.0, 2.6346492767333984);
      Object object0 = complex0.readResolve();
      Complex complex11 = complex7.ZERO.add(0.0);
      Complex complex12 = complex0.add(complex6);
      Complex complex13 = complex7.cos();
      Complex complex14 = complex8.ONE.log();
      Complex complex15 = complex5.atan();
      Complex complex16 = complex8.subtract(complex6);
      double double0 = complex16.ONE.getArgument();
      Complex complex17 = complex6.I.acos();
      Complex complex18 = complex7.I.add(complex16);
      Complex complex19 = complex9.multiply(0.0);
      double double1 = complex4.getArgument();
      try { 
        complex4.nthRoot((-2435));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,435
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
