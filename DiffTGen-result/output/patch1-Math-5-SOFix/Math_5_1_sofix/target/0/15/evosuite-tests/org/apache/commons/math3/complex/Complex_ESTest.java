/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 08:24:24 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.valueOf(0.32341301441192627);
      Complex complex4 = complex0.ZERO.sinh();
      double double0 = complex0.INF.abs();
      Complex complex5 = complex3.I.divide(0.32341301441192627);
      Complex complex6 = complex0.pow(complex3);
      Object object0 = complex0.readResolve();
      Complex complex7 = complex1.NaN.sin();
      ComplexField complexField1 = complex0.getField();
      Complex complex8 = complex7.INF.divide(0.32341301441192627);
      Complex complex9 = complex8.NaN.multiply((-1382.381356251955));
      String string0 = complex0.I.toString();
      Complex complex10 = new Complex(0.0, 1.0);
      Complex complex11 = complex7.ZERO.multiply(complex10);
      Complex complex12 = complex3.NaN.multiply(complex0);
      Complex complex13 = complex6.divide(0.32341301441192627);
      String string1 = complex3.toString();
      Complex complex14 = complex6.add(complex1);
      double double1 = complex7.abs();
      Complex complex15 = complex3.negate();
      Complex complex16 = complex14.I.acos();
      Object object1 = complex0.readResolve();
      Complex complex17 = complex3.multiply(complex14);
      Complex complex18 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex19 = complex5.tan();
      Complex complex20 = complex14.multiply(0);
      Complex complex21 = complex7.pow((double) 0);
      Complex complex22 = complex14.atan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.146925464473481E-8);
      Complex complex1 = complex0.ZERO.conjugate();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.tan();
      boolean boolean0 = object0.equals(object0);
      double double0 = complex1.abs();
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex1.negate();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex7.ONE.exp();
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex7.multiply(complex1);
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex10.multiply(complex11);
      Complex complex13 = complex11.reciprocal();
      Complex complex14 = complex1.cos();
      Complex complex15 = complex7.cos();
      Complex complex16 = complex4.exp();
      boolean boolean1 = complex9.equals(complex5);
      ComplexField complexField0 = complex7.getField();
      Complex complex17 = complex5.conjugate();
      Complex complex18 = complex13.exp();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-954.123), (-954.123));
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex0.NaN.add((-954.123));
      String string0 = complex0.toString();
      Complex complex4 = complex3.ONE.multiply(0.8657654599969861);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.NaN.negate();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex7.I.log();
      Complex complex9 = complex5.ONE.subtract(1964.583);
      Complex complex10 = complex2.exp();
      Complex complex11 = complex1.I.pow((-954.123));
      Complex complex12 = complex11.INF.subtract(540.0);
      Complex complex13 = complex12.NaN.tan();
      Complex complex14 = complex0.I.pow(Double.NaN);
      Complex complex15 = complex1.INF.negate();
      Complex complex16 = complex15.NaN.tan();
      Complex complex17 = complex10.NaN.conjugate();
      Complex complex18 = complex0.reciprocal();
      Complex complex19 = complex3.pow(complex1);
      Complex complex20 = complex15.multiply((-954.123));
      Complex complex21 = complex0.cosh();
      Complex complex22 = Complex.valueOf(3175.86);
      Complex complex23 = complex2.exp();
      Complex complex24 = complex23.ONE.pow(complex1);
      Complex complex25 = complex23.ONE.cos();
      Complex complex26 = Complex.valueOf(Double.NaN, 0.17090985586643725);
      Complex complex27 = complex14.atan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.I.getField();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.add((-3137.88063825));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.ZERO.negate();
      String string0 = complex2.NaN.toString();
      Complex complex4 = complex0.ZERO.createComplex(2618.1229105268058, (-342.6490554));
      Complex complex5 = complex2.add((-342.6490554));
      Complex complex6 = complex0.add(complex2);
      String string1 = complex6.INF.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex2.NaN.negate();
      Complex complex8 = complex5.tan();
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex9.I.reciprocal();
      Complex complex11 = complex6.createComplex((-1685.69249), 1.0);
      Complex complex12 = Complex.valueOf((-1685.8303), (-2840.3201071));
      Complex complex13 = complex0.negate();
      Complex complex14 = complex4.asin();
      Complex complex15 = complex12.conjugate();
      Complex complex16 = complex13.reciprocal();
      Complex complex17 = complex11.multiply((-1586));
      Complex complex18 = complex17.INF.sqrt1z();
      double double0 = complex6.getArgument();
      boolean boolean1 = complex8.isInfinite();
      Complex complex19 = complex11.sinh();
      Complex complex20 = Complex.valueOf(156.7637);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex((-949.8), (-949.8));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex0.atan();
      List<Complex> list0 = complex3.NaN.nthRoot(205);
      Object object0 = complex3.readResolve();
      Complex complex4 = complex0.INF.sinh();
      Complex complex5 = complex3.subtract(0.0);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex5.ONE.divide(0.0);
      Complex complex8 = complex0.add((-949.8));
      Complex complex9 = complex1.INF.pow(0.0);
      Complex complex10 = complex8.I.cos();
      Complex complex11 = complex1.ZERO.add(complex3);
      Complex complex12 = complex0.tan();
      double double0 = complex12.ZERO.getArgument();
      Complex complex13 = complex1.exp();
      boolean boolean0 = complex1.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.pow(3.46586694799214E-8);
      Complex complex2 = Complex.valueOf(3.46586694799214E-8, (-1927.28));
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.I.subtract(complex4);
      Complex complex6 = complex4.negate();
      Complex complex7 = complex5.ZERO.multiply(808.3875468188);
      double double0 = complex0.I.abs();
      Complex complex8 = complex0.I.sinh();
      double double1 = complex0.getReal();
      double double2 = complex4.getReal();
      Complex complex9 = complex8.ONE.divide(1170.1);
      Complex complex10 = complex5.I.sin();
      double double3 = complex1.getImaginary();
      boolean boolean0 = complex8.isNaN();
      Complex complex11 = complex1.sinh();
      Complex complex12 = complex7.add(2043.4083634692);
      double double4 = complex0.getArgument();
      boolean boolean1 = complex5.isInfinite();
      boolean boolean2 = complex0.equals(complex8);
      Complex complex13 = complex11.INF.cosh();
      Complex complex14 = complex5.add(1.094003438949585);
      Complex complex15 = complex11.multiply((-3064.304473703226));
      Complex complex16 = complex7.atan();
      boolean boolean3 = complex4.isNaN();
      Complex complex17 = complex9.acos();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex3.exp();
      ComplexField complexField0 = complex4.ZERO.getField();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex3.NaN.sin();
      Complex complex7 = complex2.INF.sqrt1z();
      Complex complex8 = complex0.multiply((-1361.81761164));
      Complex complex9 = complex8.INF.cosh();
      Complex complex10 = complex9.ONE.asin();
      int int0 = complex0.ZERO.hashCode();
      boolean boolean0 = complex2.isInfinite();
      // Undeclared exception!
      complex0.I.nthRoot(5410);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.NaN.log();
      double double0 = complex1.ONE.abs();
      Complex complex3 = complex1.ONE.pow(Double.POSITIVE_INFINITY);
      int int0 = complex3.I.hashCode();
      Complex complex4 = complex0.ONE.sin();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.NaN.pow(complex4);
      Object object0 = complex6.I.readResolve();
      Complex complex7 = complex5.I.exp();
      Complex complex8 = complex5.I.atan();
      ComplexField complexField0 = complex8.I.getField();
      int int1 = complex0.hashCode();
      double double1 = complex0.getImaginary();
      Complex complex9 = complex3.cos();
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex1.pow(complex2);
      Complex complex12 = complex0.add((-400.0106040038228));
      Complex complex13 = complex3.INF.atan();
      Complex complex14 = complex9.exp();
      Complex complex15 = complex3.asin();
      double double2 = complex15.getArgument();
      Complex complex16 = complex15.multiply(742);
      boolean boolean0 = complex12.equals(complex14);
      boolean boolean1 = complex3.equals(complex13);
      Complex complex17 = complex6.cos();
      Complex complex18 = complex17.INF.tan();
      boolean boolean2 = complex14.isNaN();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.createComplex((-2604.3044253318), 0.0);
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex2.I.createComplex(585.70078564, 0.0);
      Complex complex5 = complex3.I.add((-2636.14271));
      Complex complex6 = complex0.log();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex8.negate();
      Complex complex10 = complex5.tanh();
      Complex complex11 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1570.4353436375);
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex2.acos();
      double double1 = complex0.INF.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex2.sqrt();
      int int0 = complex5.ONE.hashCode();
      Complex complex6 = complex5.pow(complex0);
      Complex complex7 = complex3.INF.multiply(complex5);
      Complex complex8 = complex7.I.sinh();
      Complex complex9 = complex4.sqrt1z();
      Complex complex10 = complex9.INF.subtract(0.0);
      Complex complex11 = complex9.ZERO.negate();
      Complex complex12 = complex4.multiply(complex3);
      Complex complex13 = complex12.ZERO.cosh();
      Complex complex14 = complex4.ONE.multiply(complex0);
      Complex complex15 = complex0.asin();
      double double2 = complex11.getImaginary();
      Complex complex16 = complex3.tan();
      Complex complex17 = complex16.I.divide(complex1);
      Complex complex18 = complex3.sin();
      double double3 = complex10.getImaginary();
      Complex complex19 = complex2.asin();
      ComplexField complexField0 = complex8.getField();
      String string0 = complex16.toString();
      double double4 = complex2.getImaginary();
      ComplexField complexField1 = complex6.getField();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.ZERO.reciprocal();
      Complex complex4 = complex2.NaN.pow(1.1899254154663847E-222);
      Complex complex5 = complex3.ONE.asin();
      String string0 = complex2.INF.toString();
      double double0 = complex1.INF.abs();
      String string1 = complex0.toString();
      boolean boolean0 = complex2.isInfinite();
      Complex complex6 = complex3.add(complex0);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = complex6.NaN.subtract(1.1899254154663847E-222);
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex9.tan();
      Complex complex11 = complex1.multiply(1.1899254154663847E-222);
      Complex complex12 = complex8.add(complex4);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(3574.553015, 3574.553015);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.ONE;
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.multiply(0.0);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.ZERO.divide(complex1);
      String string0 = complex1.toString();
      double double0 = complex5.NaN.getArgument();
      boolean boolean1 = complex0.isNaN();
      Complex complex6 = complex1.subtract(complex4);
      Complex complex7 = complex6.ZERO.divide(complex5);
      Complex complex8 = complex6.ONE.acos();
      Complex complex9 = complex4.pow((-1.0));
      Complex complex10 = complex6.ONE.multiply(2068);
      Complex complex11 = complex1.I.sqrt();
      Complex complex12 = complex6.sin();
      Complex complex13 = complex9.divide(complex0);
      Complex complex14 = complex12.ZERO.divide(complex5);
      Complex complex15 = complex1.pow(complex9);
      Complex complex16 = complex12.tanh();
      Complex complex17 = complex4.subtract(complex13);
      Complex complex18 = complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      String string0 = complex1.NaN.toString();
      Complex complex2 = Complex.valueOf(2658.83848070377, 2658.83848070377);
      Complex complex3 = complex0.NaN.pow(complex2);
      Complex complex4 = complex3.ZERO.multiply(complex1);
      Object object0 = complex3.NaN.readResolve();
      Complex complex5 = complex0.multiply(0);
      Complex complex6 = complex5.divide((double) 0);
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.I.negate();
      boolean boolean0 = complex2.equals(complex5);
      Complex complex9 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(482.259200987175, 482.259200987175);
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt();
      try { 
        complex0.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(29.0, 29.0);
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.ZERO.multiply(0);
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex3.NaN.cosh();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex1.NaN.divide((double) 0);
      Complex complex6 = complex1.ZERO.multiply(29.0);
      Complex complex7 = complex6.NaN.divide(complex5);
      Complex complex8 = complex2.pow(complex0);
      Complex complex9 = complex8.ONE.tan();
      Complex complex10 = complex8.tanh();
      boolean boolean0 = complex2.isNaN();
      Complex complex11 = complex0.tanh();
      boolean boolean1 = complex2.isInfinite();
      Complex complex12 = complex11.createComplex(20.0, 0);
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex7.add(complex13);
      Complex complex15 = complex14.ZERO.acos();
      Complex complex16 = complex10.reciprocal();
      Complex complex17 = complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1895.746814092093), (-1895.746814092093));
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.I.subtract(0.0);
      Complex complex3 = complex0.INF.createComplex(Double.POSITIVE_INFINITY, (-2.042639194493364E-9));
      Complex complex4 = complex0.NaN.exp();
      Complex complex5 = complex0.I.multiply((-2.042639194493364E-9));
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex4.reciprocal();
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex7 = complex6.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex6.I.atan();
      Complex complex9 = complex8.ZERO.reciprocal();
      Complex complex10 = complex9.I.subtract((-7.947087669425045E-8));
      Complex complex11 = complex4.acos();
      Complex complex12 = complex11.ONE.multiply(complex10);
      Complex complex13 = complex3.add(Double.POSITIVE_INFINITY);
      Complex complex14 = complex0.add((-1895.746814092093));
      Complex complex15 = complex9.pow(complex12);
      Complex complex16 = complex3.exp();
      try { 
        complex8.nthRoot((-3266));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,266
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0413759887481643E23, 1.0413759887481643E23);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.ZERO.negate();
      String string0 = complex0.toString();
      Complex complex4 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-2347.2575052312754), 2.3277319969498524E60);
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = Complex.valueOf(3170.5);
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.cosh();
      try { 
        complex2.nthRoot((-728));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -728
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2779.0102549369803);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.INF.pow(2779.0102549369803);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex3.INF.subtract(0.0);
      Complex complex5 = complex3.INF.pow(2779.0102549369803);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex7.NaN.sinh();
      Complex complex9 = complex6.asin();
      Complex complex10 = complex9.divide(2650.55084613465);
      Complex complex11 = complex8.divide(0.0);
      Complex complex12 = complex9.exp();
      Complex complex13 = complex10.ZERO.createComplex(2650.55084613465, 1093.51513644);
      int int0 = complex2.hashCode();
      Complex complex14 = complex10.acos();
      Complex complex15 = complex4.divide(complex3);
      Complex complex16 = complex6.pow(1117.13);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-8.18804507680012E74), (-8.18804507680012E74));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.NaN.divide(complex0);
      ComplexField complexField0 = complex3.ZERO.getField();
      boolean boolean0 = complex1.isNaN();
      boolean boolean1 = complex1.equals("");
      List<Complex> list0 = complex2.nthRoot(405);
      double double0 = complex0.getArgument();
      double double1 = complex3.abs();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1061.0), Double.NaN);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = new Complex(1503.9549, (-275.714));
      Complex complex4 = complex0.NaN.reciprocal();
      String string0 = complex3.INF.toString();
      Complex complex5 = complex2.I.cos();
      Complex complex6 = complex3.I.atan();
      Complex complex7 = complex0.subtract(complex3);
      Complex complex8 = complex7.ONE.asin();
      Complex complex9 = complex8.I.pow(1481.0);
      Complex complex10 = complex0.createComplex(0.01742541790008545, Double.NaN);
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex8.log();
      Complex complex13 = complex2.asin();
      int int0 = complex2.hashCode();
      Complex complex14 = complex13.log();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex0.NaN.sqrt();
      Complex complex5 = complex3.I.subtract(0.6816387176513672);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.ZERO.subtract(complex1);
      Complex complex8 = complex0.divide((-1170.506773388));
      Complex complex9 = complex8.divide(956.0519695413722);
      boolean boolean0 = complex6.isInfinite();
      List<Complex> list0 = complex1.nthRoot(6);
      boolean boolean1 = complex2.equals(complex0);
      Complex complex10 = complex3.pow(0.6816387176513672);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(958.316, 20.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      int int0 = complex0.hashCode();
      Complex complex3 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(5110.2616);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex1.acos();
      Complex complex6 = Complex.valueOf(5110.2616, (-2033.329));
      Complex complex7 = complex2.multiply(complex5);
      double double0 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.NaN.pow(6.519765758635405E-145);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.INF.subtract(complex2);
      Complex complex5 = complex0.NaN.log();
      double double0 = complex3.INF.getArgument();
      Complex complex6 = complex5.NaN.negate();
      Complex complex7 = complex3.NaN.conjugate();
      Complex complex8 = complex6.negate();
      double double1 = complex8.ZERO.getArgument();
      String string0 = complex3.toString();
      Complex complex9 = complex3.INF.sqrt();
      Complex complex10 = complex0.tan();
      Complex complex11 = complex10.subtract(0.0);
      Complex complex12 = complex11.I.log();
      int int0 = complex8.ZERO.hashCode();
      Complex complex13 = complex7.multiply(0.0);
      Complex complex14 = complex6.pow(complex0);
      Complex complex15 = complex13.ONE.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.equals(", ");
      Complex complex16 = complex13.subtract(complex0);
      Object object0 = complex6.readResolve();
      double double2 = complex8.getArgument();
      Complex complex17 = complex7.negate();
      Complex complex18 = complex11.sin();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply((-1705));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.log();
      double double0 = complex2.INF.getArgument();
      double double1 = complex2.NaN.abs();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.ONE.multiply((double) (-1705));
      Complex complex6 = complex1.pow(complex2);
      boolean boolean0 = complex6.isInfinite();
      boolean boolean1 = complex3.isNaN();
      Complex complex7 = complex2.multiply((-1705));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(129.434611);
      Complex complex1 = complex0.ONE.multiply(0);
      List<Complex> list0 = complex1.INF.nthRoot(1269);
      Complex complex2 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex0.INF.asin();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.NaN.createComplex(26.020958, 0.0);
      Complex complex8 = complex5.INF.divide(complex0);
      Complex complex9 = complex5.multiply(0.0);
      Complex complex10 = complex3.add(complex1);
      Complex complex11 = complex0.log();
      Complex complex12 = complex7.multiply(660);
      Complex complex13 = complex9.divide(1541.83008165561);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3041809768060802E52, 1.3041809768060802E52);
      Complex complex1 = complex0.ONE.add(0.0);
      int int0 = complex1.ONE.hashCode();
      String string0 = complex0.INF.toString();
      double double0 = complex0.abs();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.NaN.asin();
      Object object0 = complex2.ONE.readResolve();
      Complex complex4 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(3103.5180660593, (-623.677353));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.multiply(816);
      Complex complex3 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1669.3450758102404, 1669.3450758102404);
      Complex complex1 = complex0.I.multiply(1669.3450758102404);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex0.pow(complex2);
      String string0 = complex5.toString();
      double double0 = complex5.getReal();
      double double1 = complex1.getReal();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex1.add((-1004.8729534779036));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3246.0), 0.0);
      Complex complex1 = new Complex((-3246.0));
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex0.pow(501.8);
      Complex complex7 = complex6.INF.subtract((-3246.0));
      double double0 = complex7.I.getArgument();
      Complex complex8 = complex0.add(complex6);
      Complex complex9 = Complex.valueOf(0.0, (-1.0));
      Complex complex10 = complex9.INF.cosh();
      double double1 = complex9.abs();
      Object object0 = complex10.INF.readResolve();
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex10.cosh();
      Complex complex13 = complex12.INF.cos();
      Complex complex14 = complex9.asin();
      Complex complex15 = complex7.conjugate();
      Complex complex16 = complex15.I.tan();
      double double2 = complex15.getArgument();
      int int0 = complex3.hashCode();
      Complex complex17 = Complex.valueOf((-3246.0), 1.0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-688.2851305696807));
      Complex complex1 = Complex.valueOf((-688.2851305696807), (-688.2851305696807));
      Complex complex2 = complex0.atan();
      String string0 = complex1.ONE.toString();
      Complex complex3 = Complex.valueOf((-688.2851305696807));
      Complex complex4 = complex1.INF.multiply(2576.39249901074);
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex1.multiply(1.960616287777496E-7);
      String string1 = complex6.NaN.toString();
      Complex complex7 = complex6.cosh();
      String string2 = complex7.ONE.toString();
      Complex complex8 = complex5.atan();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex6.add((-66.5));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(1086.4363526, (-1366.878671));
      Complex complex1 = Complex.valueOf(1730.068, 1086.4363526);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(693.38139666, 693.38139666);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.multiply((-0.010714690733195933));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = new Complex(0.18654438853263855, 0.18654438853263855);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex2.subtract(complex1);
      Complex complex6 = complex2.cosh();
      boolean boolean0 = complex3.isInfinite();
      Complex complex7 = complex3.createComplex(0.18654438853263855, 0.0);
      Complex complex8 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-398.0046995766));
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.INF.divide(complex3);
      Complex complex6 = complex3.I.pow((-398.0046995766));
      Complex complex7 = complex6.NaN.negate();
      Complex complex8 = complex0.atan();
      Object object0 = complex8.ONE.readResolve();
      Complex complex9 = complex8.ONE.pow(8.29169700697816E-169);
      Complex complex10 = complex3.NaN.pow(complex5);
      Complex complex11 = complex4.INF.log();
      Complex complex12 = complex3.reciprocal();
      Complex complex13 = complex12.divide(936.568);
      Object object1 = complex12.readResolve();
      Complex complex14 = complex10.sqrt();
      Complex complex15 = complex14.ZERO.tanh();
      Complex complex16 = complex10.exp();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 4721.0);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.INF.pow(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.INF.divide(4721.0);
      Complex complex4 = complex0.I.log();
      double double0 = complex0.abs();
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex5.ZERO.divide(complex1);
      int int0 = complex6.hashCode();
      double double1 = complex1.getImaginary();
      Complex complex7 = complex4.add(complex0);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex5.tanh();
      Object object0 = complex3.readResolve();
      Complex complex10 = complex3.sin();
      Complex complex11 = complex10.ZERO.pow(Double.POSITIVE_INFINITY);
      Complex complex12 = complex1.tanh();
      Complex complex13 = complex6.pow(4721.0);
      Complex complex14 = complex5.subtract(Double.POSITIVE_INFINITY);
      Complex complex15 = complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.INF.getArgument();
      try { 
        complex0.ONE.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.createComplex(Double.NaN, (-2663.6405379704));
      Complex complex6 = complex1.INF.sqrt();
      Complex complex7 = complex6.NaN.sqrt();
      Complex complex8 = complex5.INF.divide(Double.NaN);
      Complex complex9 = complex1.exp();
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex0.I.cos();
      Complex complex12 = complex8.createComplex((-2663.6405379704), 0.0);
      Complex complex13 = complex4.log();
      Complex complex14 = complex4.sqrt();
      Complex complex15 = complex10.cos();
      Complex complex16 = complex15.exp();
      Complex complex17 = complex14.pow(294.7209864495);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.NaN.nthRoot(1281);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ZERO.multiply(134217729);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = Complex.valueOf((-4200.66));
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.INF.reciprocal();
      Complex complex8 = complex4.multiply(118);
      Complex complex9 = complex3.createComplex(1281, 3.529920406834134E113);
      double double0 = complex8.abs();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex1.ZERO.multiply(Double.NaN);
      Complex complex4 = complex1.multiply(1);
      int int0 = complex4.NaN.hashCode();
      boolean boolean0 = complex4.isNaN();
      Complex complex5 = complex3.negate();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex5.subtract((double) 1);
      ComplexField complexField0 = complex7.getField();
      Complex complex8 = complex3.multiply(0.0);
      Complex complex9 = complex1.tan();
      double double0 = complex8.getArgument();
      Complex complex10 = complex7.asin();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-113.9466960348709));
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex0.ONE.pow((-113.9466960348709));
      Complex complex7 = complex6.ZERO.divide(complex4);
      Complex complex8 = complex5.I.exp();
      Complex complex9 = complex3.ONE.pow(complex0);
      List<Complex> list0 = complex1.nthRoot(1229);
      Complex complex10 = complex5.pow(complex4);
      Complex complex11 = complex4.asin();
      double double0 = complex11.ZERO.getArgument();
      boolean boolean0 = complex10.isInfinite();
      Complex complex12 = complex0.add(complex10);
      Complex complex13 = complex3.multiply((-113.9466960348709));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.NaN.subtract((-4211.33202987));
      Complex complex2 = Complex.valueOf(3.205923535388443E-235, 367.390279524497);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex4.multiply(0.0);
      Complex complex6 = Complex.valueOf((-974.8453298), (-1.0));
      Object object0 = complex6.ZERO.readResolve();
      Complex complex7 = complex3.INF.createComplex((-1.0), 670.5048862451144);
      Complex complex8 = complex7.INF.divide((-1.0));
      double double0 = complex7.ONE.getArgument();
      Complex complex9 = complex2.INF.tanh();
      double double1 = complex9.getArgument();
      Complex complex10 = complex3.ZERO.cos();
      int int0 = complex0.hashCode();
      double double2 = complex1.getReal();
      Complex complex11 = complex3.acos();
      Complex complex12 = complex11.negate();
      Complex complex13 = complex2.tanh();
      Complex complex14 = complex13.cos();
      Object object1 = complex14.INF.readResolve();
      Complex complex15 = complex10.tanh();
      double double3 = complex11.getArgument();
      Object object2 = complex11.readResolve();
      Complex complex16 = complex12.sqrt1z();
      Complex complex17 = complex3.createComplex(3.205923535388443E-235, 0.0);
      boolean boolean0 = complex6.isNaN();
      Complex complex18 = complex2.multiply((-4378));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex1.NaN.tan();
      Complex complex5 = complex3.NaN.cos();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex0.pow((-365.4));
      Complex complex8 = complex7.ZERO.divide((-365.4));
      Complex complex9 = complex7.sqrt1z();
      Complex complex10 = complex9.multiply((-79));
      Complex complex11 = complex10.subtract(complex2);
      Complex complex12 = complex9.subtract(2.0014700145557332E-75);
      Complex complex13 = complex5.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.pow((-2840.59514995));
      Complex complex3 = complex0.I.subtract(complex1);
      int int0 = complex1.INF.hashCode();
      Complex complex4 = Complex.valueOf((-2840.59514995), 1.719974302355042E61);
      double double0 = complex0.abs();
      Complex complex5 = complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.I.multiply(1.0);
      Complex complex4 = complex1.NaN.sinh();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex1.reciprocal();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.ONE.subtract(7.802219817310385E-9);
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.ONE.atan();
      Object object0 = complex2.NaN.readResolve();
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex2.multiply((-1428));
      boolean boolean1 = complex3.isInfinite();
      Complex complex10 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex2.ZERO.multiply((-3654.596104));
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex4.ONE.subtract(complex1);
      Complex complex6 = complex4.ZERO.createComplex(0.0, 0.0);
      Complex complex7 = complex6.ZERO.divide(complex1);
      Complex complex8 = complex3.subtract(complex0);
      double double0 = complex2.abs();
      Complex complex9 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex0.pow(0.0);
      List<Complex> list0 = complex4.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(163.11533);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex1.ZERO.multiply(Double.NaN);
      Complex complex4 = complex1.multiply(1);
      int int0 = complex4.NaN.hashCode();
      boolean boolean0 = complex4.isNaN();
      Complex complex5 = complex3.negate();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex5.subtract((double) 1);
      Complex complex8 = complex1.tan();
      double double0 = complex0.getArgument();
      Complex complex9 = complex7.asin();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.NaN.subtract(complex3);
      Complex complex5 = complex0.cos();
      boolean boolean0 = complex2.equals("");
      List<Complex> list0 = complex5.nthRoot(825);
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1600.64);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex2.negate();
      boolean boolean0 = complex4.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      double double0 = complex0.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.subtract(Double.NaN);
      Complex complex3 = complex1.multiply(6.283185307179586);
      int int0 = complex3.NaN.hashCode();
      double double1 = complex1.getImaginary();
      Complex complex4 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.subtract(0.0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex3.NaN.createComplex(0.0, 0.0);
      int int0 = complex4.INF.hashCode();
      Complex complex6 = complex3.multiply(1658);
      double double0 = complex3.getArgument();
      Complex complex7 = complex0.cosh();
      double double1 = complex1.getArgument();
      Complex complex8 = Complex.valueOf(Double.NaN, 0.7853981633974483);
      Complex complex9 = complex2.add(complex6);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(1701.005, 2.69449520111084);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.add(complex1);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(657.36);
      Complex complex1 = complex0.NaN.multiply(657.36);
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.sinh();
      try { 
        complex0.nthRoot((-510));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -510
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex1.cos();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex2.subtract(complex4);
      double double0 = complex2.getImaginary();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1082.92763));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.conjugate();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      int int0 = 0;
      Complex complex1 = complex0.ONE.multiply(0);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ONE.negate();
      int int1 = complex4.ZERO.hashCode();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex4.I.exp();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex7.INF.negate();
      Object object0 = complex5.readResolve();
      Complex complex9 = complex4.I.multiply(complex6);
      Complex complex10 = complex9.ONE.atan();
      Complex complex11 = complex7.conjugate();
      Complex complex12 = complex11.INF.add((double) 0);
      Complex complex13 = complex8.multiply((double) 0);
      Complex complex14 = complex8.negate();
      Complex complex15 = complex14.INF.multiply(complex1);
      Complex complex16 = complex15.ZERO.divide(complex8);
      Complex complex17 = complex3.ZERO.subtract(complex8);
      Complex complex18 = complex5.sqrt1z();
      Complex complex19 = Complex.valueOf(1.1108184705020206E-7, 0.0);
      Complex complex20 = complex13.negate();
      boolean boolean0 = complex2.equals("mL`&FqKQFV['");
      Complex complex21 = complex1.sin();
      try { 
        complex6.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-3242.03266625), (-3242.03266625));
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.multiply((-925));
      Complex complex3 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex1.subtract(complex4);
      Complex complex8 = complex3.ZERO.log();
      ComplexField complexField0 = complex7.getField();
      Complex complex9 = complex6.add(0.0);
      Complex complex10 = complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.multiply(complex0);
      int int0 = complex0.hashCode();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      String string0 = complex1.ZERO.toString();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.ONE.multiply(complex1);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-4823.8), 3130.69);
      Complex complex2 = complex1.NaN.createComplex((-4823.8), 0.4914994239807129);
      Complex complex3 = complex0.createComplex((-1235.0), 0.0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(Double.NaN, (-1277.324549588886));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0), 1.266589879989624);
      Complex complex2 = complex0.divide((-20.0));
      Complex complex3 = complex1.divide((-20.0));
      Complex complex4 = complex1.subtract(83.14038);
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-17.96961));
      Complex complex1 = complex0.INF.sinh();
      String string0 = complex1.ZERO.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.atan();
      Object object0 = new Object();
      boolean boolean1 = complex2.equals(object0);
      Complex complex3 = complex1.divide(complex0);
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, (-1334.7535445933));
      Complex complex2 = complex0.ONE.multiply(complex1);
      double double0 = complex2.abs();
      Complex complex3 = complex0.exp();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.924196700842429E-48), 0.0);
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex1.INF.pow(0.0);
      Complex complex6 = complex1.add(complex2);
      Complex complex7 = complex6.ZERO.multiply(complex5);
      Complex complex8 = Complex.valueOf(1119.1038295156);
      Complex complex9 = complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(51.850084271, 51.850084271);
      Complex complex1 = complex0.INF.subtract(1219.8257730556);
      Complex complex2 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = Complex.ONE;
      double double0 = complex0.I.abs();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex0.pow((-1.0));
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex4.I.sqrt1z();
      double double1 = complex3.ZERO.getArgument();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex3.subtract((-1.0));
      double double2 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-538.73963030782));
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex0.subtract(1455.62);
      Complex complex4 = complex3.add(7.722018663521402E99);
      double double0 = complex3.abs();
      Complex complex5 = complex0.divide((-538.73963030782));
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex3.INF.pow(1994.3596303078198);
      Complex complex9 = complex7.negate();
      double double1 = complex3.getImaginary();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex8.equals(object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.acos();
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex1.negate();
      String string0 = complex1.ONE.toString();
      String string1 = complex0.ONE.toString();
      Complex complex3 = complex0.ZERO.tanh();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex2.divide(complex3);
      Complex complex7 = Complex.valueOf(0.0, (-1413.69574));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.add(1.0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.add(1173.10170977829);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = new Complex(0.0, 0.0);
      double double0 = complex2.getArgument();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(51.850084271, 51.850084271);
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      String string0 = complex1.toString();
      Complex complex2 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(1215.3184221956594, 0.0);
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = 20.0;
      Complex complex0 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      int int0 = (-1276);
      try { 
        complex0.INF.nthRoot((-1276));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,276
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply(37);
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex1.ZERO.add(complex0);
      Object object0 = complex0.NaN.readResolve();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.INF.asin();
      Complex complex5 = complex0.log();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex1.ZERO.asin();
      Complex complex8 = complex7.ONE.divide(Double.NaN);
      Complex complex9 = complex5.sinh();
      Complex complex10 = complex1.reciprocal();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex10.pow(complex11);
      try { 
        complex3.nthRoot((-3148));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,148
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex((-814.409020503), (-814.409020503));
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = Complex.valueOf((-814.409020503));
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex0.multiply((-814.409020503));
      double double0 = complex5.INF.abs();
      Complex complex6 = Complex.valueOf((-814.409020503), (-814.409020503));
      Complex complex7 = complex5.I.exp();
      Complex complex8 = complex5.ONE.negate();
      int int0 = complex1.hashCode();
      Complex complex9 = complex2.reciprocal();
      Complex complex10 = complex9.I.multiply(complex7);
      double double1 = complex1.getArgument();
      ComplexField complexField0 = complex2.getField();
      Complex complex11 = complex5.divide(0.0);
      Complex complex12 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(7.076135457313529E-62);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.pow(7.076135457313529E-62);
      Complex complex5 = complex0.NaN.pow((-2214.6));
      Complex complex6 = complex2.sqrt1z();
      Object object0 = complex3.readResolve();
      Complex complex7 = complex3.add((-3566.0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex0.sqrt1z();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(2824.24989609);
      double double0 = complex0.abs();
      Complex complex1 = complex0.I.cos();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 2218.566804897);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.add(complex0);
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex5.ONE.asin();
      Complex complex8 = complex4.NaN.acos();
      int int0 = complex4.ONE.hashCode();
      Complex complex9 = complex4.log();
      Complex complex10 = complex5.atan();
      Complex complex11 = complex9.pow(2.343525263620692E-8);
      Complex complex12 = complex8.negate();
      int int1 = complex12.NaN.hashCode();
      Complex complex13 = complex4.I.sin();
      try { 
        complex11.nthRoot((-2097));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,097
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1407.2232506);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.cos();
      ComplexField complexField0 = complex3.getField();
      Complex complex5 = complex0.log();
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 76.4968763181);
      double double0 = complex0.ZERO.abs();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex0.I.subtract(complex3);
      Complex complex5 = Complex.valueOf(76.4968763181, 0.0);
      Complex complex6 = complex2.INF.sqrt1z();
      Complex complex7 = complex0.sqrt();
      List<Complex> list0 = complex3.nthRoot(689);
      boolean boolean0 = complex7.isInfinite();
      Complex complex8 = complex7.cos();
      List<Complex> list1 = complex8.nthRoot(689);
      String string0 = complex6.toString();
      Complex complex9 = complex8.multiply(complex0);
      int int0 = complex9.NaN.hashCode();
      Object object0 = complex8.NaN.readResolve();
      Complex complex10 = complex6.createComplex((-651.01), 0.0);
      boolean boolean1 = complex9.equals(complex6);
      Complex complex11 = complex3.createComplex(0.0, (-651.01));
      Complex complex12 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      int int0 = 0;
      Complex complex1 = complex0.ONE.multiply(0);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ONE.negate();
      int int1 = complex4.ZERO.hashCode();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex4.I.exp();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex7.INF.negate();
      Object object0 = complex5.readResolve();
      Complex complex9 = complex4.I.multiply(complex6);
      Complex complex10 = complex9.ONE.atan();
      Complex complex11 = complex7.conjugate();
      Complex complex12 = complex11.INF.add((double) 0);
      Complex complex13 = complex8.multiply((double) 0);
      Complex complex14 = complex8.negate();
      Complex complex15 = complex14.INF.multiply(complex1);
      Complex complex16 = complex15.ZERO.divide(complex8);
      Complex complex17 = complex3.ZERO.subtract(complex8);
      Complex complex18 = complex5.sqrt1z();
      Complex complex19 = Complex.valueOf(1.1108184705020206E-7, 0.0);
      Complex complex20 = complex13.negate();
      Complex complex21 = complex20.NaN.subtract((double) 0);
      boolean boolean0 = complex2.equals("mL`&FqKQFV['");
      Complex complex22 = complex1.sin();
      Object object1 = complex11.readResolve();
      try { 
        complex6.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-80.932479495));
      Complex complex2 = null;
      Complex complex3 = complex1.ZERO.subtract((-80.932479495));
      Complex complex4 = complex3.ZERO.createComplex(1030.2720251576, 2.61726605666378E-211);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = new Complex((-20.0));
      Complex complex4 = complex0.NaN.multiply(complex3);
      Complex complex5 = complex0.NaN.conjugate();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.INF.subtract(complex6);
      int int0 = complex0.hashCode();
      Complex complex8 = complex3.ZERO.multiply(complex5);
      Complex complex9 = complex1.ZERO.add(complex0);
      Complex complex10 = complex8.ONE.cosh();
      try { 
        complex5.nthRoot((-108));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -108
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 0.0);
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.ZERO.subtract((-20.0));
      double double1 = complex0.NaN.getArgument();
      Complex complex3 = complex0.ZERO.tanh();
      Complex complex4 = complex0.ZERO.cos();
      Complex complex5 = complex4.ZERO.divide(complex0);
      Complex complex6 = complex3.INF.log();
      Complex complex7 = complex6.ZERO.sin();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex3.ZERO.divide(0.0);
      Complex complex10 = complex3.ONE.add(1.9366601417010147E-217);
      Complex complex11 = complex0.acos();
      Complex complex12 = complex9.acos();
      double double2 = complex1.getReal();
      Complex complex13 = complex12.ZERO.pow(1.9366601417010147E-217);
      Complex complex14 = complex3.subtract(2945.8);
      boolean boolean0 = complex14.equals(complex12);
      Complex complex15 = complex9.sqrt1z();
      int int0 = complex15.hashCode();
      Complex complex16 = complex7.divide(0.0);
      Complex complex17 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(2164.3);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.divide((-274.8));
      Complex complex3 = complex0.ZERO.acos();
      Complex complex4 = complex1.cosh();
      Object object0 = complex1.readResolve();
      int int0 = complex0.hashCode();
      double double0 = complex2.abs();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex3.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex3.NaN.sqrt1z();
      double double0 = complex3.I.getArgument();
      ComplexField complexField0 = complex2.INF.getField();
      int int0 = complex1.ONE.hashCode();
      double double1 = complex1.abs();
      Complex complex6 = complex0.divide(2.0);
      Complex complex7 = complex1.sin();
      Complex complex8 = complex7.ONE.pow(0.0);
      Complex complex9 = complex7.INF.divide(0.0);
      Complex complex10 = complex9.ONE.sin();
      Complex complex11 = complex10.ZERO.cos();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex7.divide(complex12);
      Complex complex14 = complex13.I.sinh();
      int int1 = complex13.hashCode();
      Complex complex15 = complex13.sinh();
      double double2 = complex12.abs();
      Complex complex16 = complex6.log();
      Complex complex17 = complex0.exp();
      double double3 = complex2.abs();
      double double4 = complex10.getArgument();
      Complex complex18 = complex15.sqrt();
      Complex complex19 = complex16.cos();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      double double1 = complex0.getReal();
      Complex complex2 = complex1.subtract(complex0);
      double double2 = complex2.ONE.getArgument();
      Complex complex3 = complex0.NaN.subtract(complex1);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex1.I.cos();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex1.negate();
      String string0 = complex0.toString();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex7.cosh();
      Complex complex10 = complex0.ONE.subtract(complex4);
      Complex complex11 = complex10.ONE.reciprocal();
      Complex complex12 = complex7.I.atan();
      try { 
        complex5.nthRoot((-1080));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,080
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
