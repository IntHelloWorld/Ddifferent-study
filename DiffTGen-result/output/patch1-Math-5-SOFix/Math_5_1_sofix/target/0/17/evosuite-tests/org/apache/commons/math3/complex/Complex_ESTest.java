/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 08:27:55 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.NaN.pow((-8.168129112703755E-288));
      Complex complex4 = complex0.INF.log();
      List<Complex> list0 = complex0.nthRoot(2146018560);
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex5.INF.subtract(complex1);
      Complex complex7 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.add(1.0);
      Complex complex3 = complex1.INF.sqrt1z();
      Complex complex4 = Complex.NaN;
      double double1 = complex4.abs();
      Complex complex5 = complex0.multiply(complex4);
      Object object0 = complex2.readResolve();
      Complex complex6 = Complex.valueOf(Double.NaN, 1.0);
      String string0 = complex6.ZERO.toString();
      Object object1 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.multiply(Double.NaN);
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex1.NaN.tanh();
      Complex complex4 = complex2.multiply(0.0);
      Complex complex5 = complex3.NaN.log();
      Complex complex6 = complex0.ZERO.sin();
      Object object0 = complex0.ONE.readResolve();
      Object object1 = complex0.readResolve();
      Complex complex7 = complex0.I.conjugate();
      String string0 = complex6.toString();
      Complex complex8 = complex0.divide(complex6);
      Complex complex9 = complex6.add(Double.NaN);
      Complex complex10 = complex2.asin();
      Complex complex11 = complex10.reciprocal();
      Complex complex12 = complex4.negate();
      Complex complex13 = complex3.atan();
      int int0 = complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2199.092), (-2199.092));
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.add(250.658);
      Complex complex4 = complex1.ZERO.sinh();
      Complex complex5 = complex1.sinh();
      Complex complex6 = Complex.valueOf((-1290.08794), 0.0);
      Complex complex7 = complex2.I.subtract(Double.NaN);
      Complex complex8 = complex5.divide(250.658);
      Complex complex9 = complex8.I.multiply((-810));
      Complex complex10 = complex4.sin();
      Complex complex11 = complex1.tanh();
      double double0 = complex1.I.abs();
      Complex complex12 = complex4.divide((-1290.08794));
      Complex complex13 = complex11.pow(complex1);
      Complex complex14 = Complex.valueOf(0.0);
      Complex complex15 = complex14.INF.pow(complex0);
      Object object0 = complex10.readResolve();
      Complex complex16 = complex12.subtract(Double.NaN);
      Complex complex17 = complex16.tan();
      Complex complex18 = complex2.asin();
      Complex complex19 = complex1.I.add(0.0);
      Complex complex20 = Complex.valueOf(1.0, (-596.26979034));
      Complex complex21 = complex12.sqrt();
      Complex complex22 = complex21.ZERO.pow(0.0);
      try { 
        complex21.NaN.nthRoot((-810));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -810
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.createComplex((-2.3580462372762525E-230), (-2.3580462372762525E-230));
      Complex complex4 = complex3.INF.subtract(2.0);
      String string0 = complex0.NaN.toString();
      double double0 = complex0.INF.getArgument();
      Complex complex5 = complex0.negate();
      Object object0 = complex3.readResolve();
      Complex complex6 = complex5.createComplex(2.0, (-2.3580462372762525E-230));
      double double1 = complex0.getReal();
      int int0 = complex3.I.hashCode();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = new Complex(0.7853981633974483);
      Complex complex9 = complex5.NaN.multiply(complex8);
      Complex complex10 = complex7.NaN.add(0.0);
      Complex complex11 = complex10.INF.sinh();
      Complex complex12 = complex3.multiply(0.7853981633974483);
      int int1 = complex5.hashCode();
      Complex complex13 = complex12.ZERO.pow(0.0);
      String string1 = complex3.NaN.toString();
      Complex complex14 = complex3.tanh();
      double double2 = complex12.getImaginary();
      Complex complex15 = complex14.add(complex13);
      Complex complex16 = complex5.sinh();
      Complex complex17 = complex2.conjugate();
      Complex complex18 = complex5.exp();
      Complex complex19 = complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.INF.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex1.multiply((-1905.59125));
      double double0 = 0.0;
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex0.divide(0.0);
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex1.ZERO.cosh();
      Complex complex8 = complex7.ZERO.multiply(complex6);
      List<Complex> list0 = complex3.nthRoot(444);
      Complex complex9 = complex7.NaN.log();
      Complex complex10 = complex3.NaN.conjugate();
      String string1 = complex3.toString();
      double double1 = complex3.getImaginary();
      List<Complex> list1 = complex8.nthRoot(2947);
      // Undeclared exception!
      complex0.nthRoot(2947);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1166.6087006883, 1166.6087006883);
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex0.exp();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex4.ZERO.divide(complex1);
      Complex complex6 = complex3.multiply(0);
      Complex complex7 = complex6.NaN.tanh();
      Complex complex8 = Complex.valueOf((double) 0);
      Complex complex9 = complex8.ONE.cos();
      Complex complex10 = complex9.ZERO.negate();
      ComplexField complexField0 = complex8.getField();
      Complex complex11 = complex3.asin();
      Complex complex12 = complex8.log();
      Complex complex13 = complex12.negate();
      ComplexField complexField1 = complex5.getField();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf((-1.0));
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex3.INF.atan();
      Complex complex6 = complex5.I.sin();
      Complex complex7 = complex1.INF.multiply(complex4);
      ComplexField complexField0 = complex5.ONE.getField();
      Complex complex8 = complex2.INF.add(complex4);
      Complex complex9 = complex0.NaN.createComplex(0.0, (-1672.0));
      Complex complex10 = complex1.subtract(complex0);
      Complex complex11 = complex10.sin();
      Complex complex12 = complex10.I.divide(complex9);
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex10.INF.getArgument();
      Complex complex13 = complex10.subtract(complex2);
      Complex complex14 = complex11.sqrt();
      int int0 = complex11.hashCode();
      Complex complex15 = complex6.pow(complex12);
      Complex complex16 = complex1.asin();
      try { 
        complex1.nthRoot((-4362));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,362
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-2043.14), (-2043.14));
      Complex complex1 = complex0.multiply(869);
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex2.ONE.pow(0.0);
      Complex complex4 = complex2.NaN.pow(3.814697265625E-6);
      Complex complex5 = complex2.multiply(869);
      Complex complex6 = complex0.cosh();
      Complex complex7 = Complex.valueOf(1.2297456769063303E-80, (-2781.95006811127));
      Complex complex8 = complex6.sin();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex4.sqrt();
      Complex complex11 = complex10.NaN.cosh();
      Complex complex12 = complex10.acos();
      Complex complex13 = Complex.valueOf(295.6090755769, (-2043.14));
      Complex complex14 = complex7.add(complex3);
      Complex complex15 = complex6.sqrt();
      Complex complex16 = complex0.sqrt();
      Complex complex17 = complex12.add(1.2297456769063303E-80);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(954.7);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = Complex.valueOf(954.7);
      double double0 = complex1.getArgument();
      int int0 = complex1.hashCode();
      Complex complex5 = complex0.I.tan();
      Complex complex6 = complex0.multiply(1728);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex5.multiply(complex2);
      Complex complex9 = complex3.INF.log();
      Complex complex10 = Complex.valueOf((double) 1728, 0.0);
      double double1 = complex3.getArgument();
      Complex complex11 = complex1.acos();
      Complex complex12 = complex0.pow(complex7);
      boolean boolean0 = complex6.isInfinite();
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.asin();
      List<Complex> list0 = complex0.INF.nthRoot(1);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex4.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(702.6305369);
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = Complex.valueOf(702.6305369);
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = complex0.ZERO.log();
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex4.multiply(complex1);
      Complex complex8 = complex6.I.log();
      Complex complex9 = complex5.sqrt();
      Complex complex10 = Complex.valueOf(702.6305369, 7.64416021682279E-9);
      Complex complex11 = complex10.NaN.add(complex4);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex12 = complex5.log();
      Complex complex13 = complex6.I.multiply(complex0);
      String string0 = complex12.toString();
      Complex complex14 = Complex.valueOf(702.6305369);
      String string1 = complex14.toString();
      Complex complex15 = complex3.sqrt();
      Complex complex16 = complex15.NaN.sinh();
      Complex complex17 = complex0.sqrt();
      boolean boolean1 = complex8.isNaN();
      Complex complex18 = complex15.exp();
      Complex complex19 = complex2.negate();
      Complex complex20 = complex19.NaN.add(0.0);
      Complex complex21 = complex3.sqrt1z();
      Complex complex22 = complex21.NaN.cosh();
      Complex complex23 = complex6.acos();
      Object object1 = complex23.NaN.readResolve();
      Complex complex24 = complex6.subtract(0.0);
      Complex complex25 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.createComplex((-659.7063107), (-659.7063107));
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex4.ONE.divide((-659.7063107));
      Object object0 = complex0.readResolve();
      List<Complex> list0 = complex0.nthRoot(433);
      Complex complex6 = complex4.I.multiply((-659.7063107));
      List<Complex> list1 = complex3.ONE.nthRoot(433);
      Complex complex7 = complex4.multiply(0);
      Complex complex8 = complex1.I.createComplex(0, 1377.100222008);
      Complex complex9 = complex3.pow(0.0);
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex3.atan();
      String string0 = complex11.I.toString();
      Complex complex12 = complex3.tanh();
      Complex complex13 = Complex.valueOf(2324.732206045743);
      Complex complex14 = complex8.tan();
      Complex complex15 = complex11.atan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1223.0301874642366, 1223.0301874642366);
      Complex complex1 = complex0.multiply((-1514));
      double double0 = complex1.ONE.abs();
      Complex complex2 = Complex.valueOf((-2905.2));
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex0.cosh();
      Complex complex6 = Complex.valueOf((-20.0));
      Complex complex7 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(4.4068830785712375E-8, (-441.49710538));
      Complex complex3 = complex2.multiply(910);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.I.conjugate();
      double double0 = complex0.getArgument();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.NaN.add(complex0);
      Complex complex6 = complex1.subtract(complex4);
      Complex complex7 = Complex.valueOf((-1793.3));
      String string0 = complex7.ONE.toString();
      Object object0 = complex1.I.readResolve();
      Complex complex8 = complex3.add(complex2);
      Complex complex9 = complex1.ZERO.asin();
      Object object1 = new Object();
      String string1 = complex8.INF.toString();
      boolean boolean0 = complex8.equals(object1);
      Complex complex10 = complex2.atan();
      Complex complex11 = complex3.pow(complex2);
      Complex complex12 = complex11.ZERO.divide(1262.913);
      boolean boolean1 = complex6.isInfinite();
      String string2 = complex8.toString();
      Complex complex13 = complex3.pow(0.0);
      Complex complex14 = complex1.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-1320.1042), (-1320.1042));
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.divide((-1320.1042));
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = Complex.valueOf((-220.99705327), (-1320.1042));
      Complex complex5 = complex0.exp();
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = Complex.valueOf((-220.99705327));
      double double0 = complex5.getReal();
      Complex complex8 = complex2.divide(0.0);
      ComplexField complexField1 = complex1.getField();
      Complex complex9 = complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = 1;
      List<Complex> list0 = complex0.I.nthRoot(1);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = (-1451.95958772365);
      Complex complex0 = new Complex((-958.514936272), (-1451.95958772365));
      Complex complex1 = complex0.ONE.log();
      Object object0 = complex1.NaN.readResolve();
      String string0 = complex0.INF.toString();
      double double1 = complex0.getReal();
      double double2 = (-18.83);
      Complex complex2 = complex0.add((-18.83));
      Complex complex3 = complex2.sin();
      double double3 = complex1.NaN.getArgument();
      Complex complex4 = complex2.negate();
      double double4 = 1920.5711718;
      Complex complex5 = Complex.valueOf((-958.514936272), 1920.5711718);
      Complex complex6 = complex5.NaN.sinh();
      Complex complex7 = complex5.I.multiply(1144);
      Complex complex8 = complex7.I.multiply(1144);
      boolean boolean0 = complex0.isNaN();
      Complex complex9 = complex1.conjugate();
      try { 
        complex1.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(518.543046);
      List<Complex> list0 = complex0.NaN.nthRoot(1051);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.INF.multiply(36.44141758);
      Complex complex5 = complex3.INF.exp();
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex7.ZERO.add(0.0);
      Complex complex9 = complex0.INF.multiply((-2292));
      Complex complex10 = complex8.ZERO.subtract(complex2);
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex10.exp();
      ComplexField complexField0 = complex12.getField();
      Complex complex13 = complex8.atan();
      Complex complex14 = Complex.valueOf(872.68864962, (double) 1051);
      Complex complex15 = complex11.subtract(518.543046);
      Complex complex16 = complex11.pow(complex2);
      Complex complex17 = complex4.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.NaN);
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex1.NaN.multiply(1001);
      Complex complex3 = complex0.INF.divide(Double.NaN);
      Complex complex4 = complex0.divide(complex0);
      Complex complex5 = complex0.ZERO.acos();
      double double1 = complex0.getReal();
      int int0 = complex0.hashCode();
      Complex complex6 = complex2.multiply(complex1);
      Complex complex7 = complex6.cosh();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = Complex.valueOf((-954.6539701726637), 0.0);
      Complex complex9 = complex8.ONE.sin();
      Complex complex10 = complex9.ONE.acos();
      Complex complex11 = complex4.createComplex((-954.6539701726637), 0.0);
      List<Complex> list0 = complex8.nthRoot(1801);
      Complex complex12 = complex8.createComplex(0.0, Double.NaN);
      Complex complex13 = complex12.createComplex(1001, Double.POSITIVE_INFINITY);
      Complex complex14 = complex2.divide(complex5);
      Complex complex15 = complex5.pow((double) 1001);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = Complex.valueOf(1956.83148);
      double double0 = complex4.NaN.getArgument();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex0.multiply(0.0);
      Complex complex7 = complex0.atan();
      Object object0 = complex4.readResolve();
      Complex complex8 = complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1698.8), (-1698.8));
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.7048805655699485E151);
      double double0 = complex0.getReal();
      Complex complex1 = new Complex(3.7048805655699485E151, 536.6);
      Complex complex2 = complex0.NaN.pow(complex1);
      double double1 = complex2.NaN.getArgument();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.I.cosh();
      double double2 = complex4.I.abs();
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex5.ZERO.conjugate();
      Complex complex7 = complex3.multiply(complex0);
      Complex complex8 = complex1.ONE.subtract(3.7048805655699485E151);
      Complex complex9 = complex2.asin();
      Complex complex10 = complex1.multiply(3.7048805655699485E151);
      Complex complex11 = complex5.pow(complex10);
      Complex complex12 = complex10.sinh();
      Complex complex13 = complex2.divide(complex3);
      Complex complex14 = complex10.add((-2146.2231));
      String string0 = complex14.INF.toString();
      boolean boolean0 = complex10.equals(complex8);
      boolean boolean1 = complex9.isInfinite();
      Complex complex15 = complex13.add(complex7);
      Complex complex16 = Complex.valueOf((-1256.6), (-993.0));
      Complex complex17 = complex16.conjugate();
      ComplexField complexField0 = complex13.getField();
      double double3 = complex6.getReal();
      List<Complex> list0 = complex12.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.subtract(complex1);
      String string0 = complex0.NaN.toString();
      Complex complex3 = complex0.I.subtract(Double.NaN);
      Complex complex4 = complex0.createComplex(Double.NaN, 1.0705673935006142E-106);
      Complex complex5 = complex3.ONE.pow(1140.0);
      Complex complex6 = complex3.INF.log();
      Complex complex7 = complex0.acos();
      Complex complex8 = Complex.valueOf(2418.423192299469, 570.0);
      Complex complex9 = Complex.valueOf((-2313.059673));
      Complex complex10 = complex0.add(complex4);
      Complex complex11 = complex0.multiply(complex3);
      Complex complex12 = complex1.multiply((-20.0));
      Complex complex13 = new Complex(962.21, Double.NaN);
      Complex complex14 = complex13.I.pow(complex12);
      boolean boolean0 = complex2.equals(complex13);
      Complex complex15 = complex11.acos();
      Complex complex16 = Complex.ONE;
      Complex complex17 = complex12.multiply(complex16);
      Complex complex18 = complex11.add(complex15);
      Complex complex19 = complex15.multiply(2418.423192299469);
      Complex complex20 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-191.0), (-1529.0));
      Complex complex1 = complex0.ZERO.multiply(17);
      Complex complex2 = complex0.sqrt1z();
      Object object0 = complex2.I.readResolve();
      Complex complex3 = Complex.valueOf((-1529.0));
      Complex complex4 = complex0.subtract(441.3219);
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex5.add(2.0);
      Complex complex8 = new Complex(441.3219);
      Complex complex9 = complex0.multiply(complex8);
      Complex complex10 = complex3.sin();
      Complex complex11 = complex5.sqrt1z();
      Complex complex12 = complex1.divide(888.826220026);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(780.5862593);
      Complex complex1 = null;
      try { 
        complex0.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1496.541146406938));
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex2.INF.asin();
      String string0 = complex0.toString();
      Complex complex5 = complex4.ONE.subtract(complex3);
      Complex complex6 = complex0.negate();
      Complex complex7 = complex0.pow((-1496.541146406938));
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex8.NaN.pow((-2.2015877944429946E-104));
      Complex complex10 = complex8.ONE.tanh();
      int int0 = complex2.hashCode();
      Complex complex11 = complex1.tan();
      double double0 = complex0.getReal();
      Complex complex12 = complex2.exp();
      Complex complex13 = complex12.NaN.multiply(0);
      Complex complex14 = complex13.sin();
      Complex complex15 = complex14.I.cosh();
      Complex complex16 = complex13.I.log();
      List<Complex> list0 = complex4.nthRoot(251);
      Complex complex17 = complex1.asin();
      Complex complex18 = complex1.subtract((double) 251);
      Complex complex19 = complex17.acos();
      Complex complex20 = complex17.asin();
      Complex complex21 = complex2.cosh();
      Complex complex22 = complex9.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex23 = complex21.sinh();
      Complex complex24 = complex18.divide(complex6);
      double double1 = complex9.getImaginary();
      ComplexField complexField0 = complex18.getField();
      Complex complex25 = complex5.divide(complex14);
      Complex complex26 = Complex.valueOf(2.0);
      Complex complex27 = complex11.log();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(541.0);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex1.ZERO.pow(complex0);
      Object object0 = complex0.readResolve();
      String string0 = complex3.INF.toString();
      Complex complex4 = complex0.NaN.negate();
      Complex complex5 = complex0.ZERO.log();
      Complex complex6 = complex5.ZERO.add(complex4);
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex5.ZERO.cosh();
      Complex complex8 = complex7.ZERO.divide(Double.POSITIVE_INFINITY);
      String string1 = complex7.ONE.toString();
      Complex complex9 = complex5.divide(541.0);
      Complex complex10 = complex9.I.cos();
      double double0 = complex4.NaN.abs();
      Complex complex11 = complex9.subtract(541.0);
      Complex complex12 = complex4.atan();
      Object object1 = complex12.readResolve();
      Complex complex13 = complex12.I.conjugate();
      Complex complex14 = complex13.ZERO.conjugate();
      int int0 = complex12.NaN.hashCode();
      String string2 = complex0.toString();
      Complex complex15 = Complex.valueOf(541.0, 0.0);
      Complex complex16 = complex4.tan();
      double double1 = complex6.abs();
      Object object2 = new Object();
      boolean boolean1 = complex6.equals(object2);
      double double2 = complex5.abs();
      Complex complex17 = complex0.acos();
      double double3 = complex12.getImaginary();
      double double4 = complex2.getReal();
      int int1 = complex10.hashCode();
      int int2 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.ONE.subtract((-20.0));
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex1.log();
      boolean boolean0 = complex5.isNaN();
      Complex complex6 = complex0.createComplex(2.6786368134431636E-33, (-20.0));
      Complex complex7 = Complex.INF;
      Complex complex8 = complex4.divide(complex7);
      double double0 = complex8.getImaginary();
      Object object0 = complex4.readResolve();
      List<Complex> list0 = complex3.nthRoot(787);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 3305.404);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex0.NaN.add(complex1);
      Complex complex5 = complex4.ZERO.createComplex(20.0, 20.0);
      Complex complex6 = complex0.NaN.sqrt1z();
      Complex complex7 = complex6.INF.asin();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex8.acos();
      double double0 = complex8.getImaginary();
      Complex complex10 = complex9.exp();
      Complex complex11 = complex8.sqrt1z();
      Complex complex12 = complex11.NaN.multiply(798);
      int int0 = complex3.hashCode();
      Complex complex13 = complex4.tanh();
      Complex complex14 = complex13.ZERO.negate();
      Complex complex15 = complex3.multiply(complex13);
      Complex complex16 = complex14.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex2.ZERO.subtract(0.0);
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex4 = complex2.divide(1119.0);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.multiply(complex2);
      Complex complex7 = Complex.valueOf(0.0);
      double double0 = complex6.getReal();
      Object object0 = complex6.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex8 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.ZERO.log();
      Complex complex4 = complex1.ONE.cosh();
      Complex complex5 = complex0.NaN.multiply(724.2182697344);
      Complex complex6 = complex1.I.cosh();
      Complex complex7 = complex5.INF.conjugate();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex3.equals(object0);
      Complex complex8 = complex2.cos();
      Complex complex9 = complex1.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1465.771521814452);
      Complex complex1 = Complex.valueOf(1465.771521814452);
      Complex complex2 = complex0.sin();
      Complex complex3 = new Complex(1465.771521814452, 1465.771521814452);
      Complex complex4 = complex0.INF.multiply(complex1);
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex3.asin();
      Complex complex7 = complex1.tan();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex3.add(712.5868570958567);
      double double0 = complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 165.199636673);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.tan();
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.INF.multiply(3223);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.I.sin();
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = complex7.subtract(0.0);
      Complex complex9 = complex2.INF.exp();
      double double1 = complex5.getArgument();
      Complex complex10 = complex1.add(complex0);
      Complex complex11 = complex10.atan();
      Complex complex12 = complex2.acos();
      double double2 = complex2.getReal();
      String string0 = complex0.toString();
      double double3 = complex1.abs();
      Complex complex13 = complex9.divide((-2.297952860150901));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 615.0);
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.conjugate();
      List<Complex> list0 = complex2.INF.nthRoot(1512);
      Complex complex3 = complex2.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.acos();
      int int0 = complex4.hashCode();
      Complex complex5 = complex4.NaN.sqrt1z();
      int int1 = complex0.NaN.hashCode();
      Complex complex6 = complex5.cos();
      Complex complex7 = (Complex)complex6.NaN.readResolve();
      Complex complex8 = complex4.tanh();
      double double1 = complex4.getReal();
      Complex complex9 = complex3.ZERO.exp();
      Complex complex10 = complex3.subtract((-1735.2774759));
      Complex complex11 = complex10.pow(complex0);
      Complex complex12 = complex1.multiply(complex4);
      Complex complex13 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-1113.60454219), 0.0);
      Complex complex1 = complex0.ONE.add(0.0);
      double double0 = complex0.NaN.abs();
      double double1 = complex1.ONE.abs();
      Complex complex2 = complex0.I.subtract(complex1);
      String string0 = complex0.toString();
      boolean boolean0 = complex1.equals("(-1113.60454219, 0.0)");
      Object object0 = complex1.readResolve();
      List<Complex> list0 = complex0.INF.nthRoot(710);
      boolean boolean1 = complex1.equals(object0);
      List<Complex> list1 = complex0.nthRoot(89);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1656.74931);
      int int0 = complex1.NaN.hashCode();
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.ZERO.acos();
      double double1 = complex1.getArgument();
      Complex complex4 = complex1.ONE.multiply(614);
      Complex complex5 = complex2.ZERO.subtract((-8.64864445321803E-144));
      Complex complex6 = complex5.I.subtract(Double.NaN);
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex3.multiply((-2000.5));
      Complex complex9 = complex1.INF.divide(complex5);
      Complex complex10 = complex7.ONE.divide(complex3);
      Complex complex11 = complex2.cos();
      double double2 = complex1.abs();
      Complex complex12 = Complex.valueOf(1656.74931, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5723689794540405);
      Complex complex1 = complex0.multiply(0.5723689794540405);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.subtract(0.5723689794540405);
      Complex complex4 = complex3.tan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex2.tan();
      Complex complex7 = complex3.subtract(0.5723689794540405);
      Complex complex8 = complex7.ONE.add(complex5);
      Complex complex9 = complex7.sqrt();
      Complex complex10 = complex8.exp();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1465.771521814452);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.INF.multiply(complex1);
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex3.asin();
      Complex complex7 = complex3.tan();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex3.add(712.5868570958567);
      double double0 = complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4964.8, 1.14650559425354);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.ONE.multiply((-482.23303));
      Complex complex3 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.ONE.atan();
      int int0 = complex0.hashCode();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = Complex.valueOf((-2201.75625073), (-2201.75625073));
      Complex complex5 = complex4.ONE.divide(complex0);
      Complex complex6 = complex0.acos();
      double double0 = complex0.abs();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex3 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.pow(2746.37902571255);
      String string0 = complex0.toString();
      Complex complex5 = complex3.multiply((-230.63881211568));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.negate();
      Complex complex4 = complex2.INF.divide(0.0);
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex5.divide((-114.43355));
      double double0 = complex5.ZERO.getArgument();
      Complex complex7 = complex5.NaN.reciprocal();
      Complex complex8 = complex0.pow(0.0);
      boolean boolean0 = complex5.isNaN();
      Complex complex9 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.ZERO.pow(0.0);
      double double0 = complex0.ONE.getArgument();
      Complex complex3 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3294.0));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf((-3294.0));
      Complex complex3 = complex0.sqrt();
      String string0 = complex3.toString();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-597.979), (-597.979));
      Complex complex1 = complex0.tan();
      List<Complex> list0 = complex1.INF.nthRoot(855);
      Complex complex2 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(3204.0, 3204.0);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.INF.conjugate();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex3 = complex0.subtract(0.5220900774002075);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = complex1.ZERO.multiply(1207.23);
      Complex complex3 = Complex.valueOf(1207.23, 0.0);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-2284));
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf((double) (-2284), (double) (-2284));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex1.ONE.subtract(complex0);
      Complex complex4 = complex0.NaN.tan();
      Complex complex5 = complex4.ZERO.createComplex(0.0, (-2.35387025694381E-8));
      String string0 = complex5.I.toString();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex6 = complex0.pow(1.0);
      double double0 = complex6.INF.abs();
      Complex complex7 = complex6.tanh();
      double double1 = complex7.NaN.abs();
      Complex complex8 = complex0.NaN.acos();
      double double2 = complex0.abs();
      String string1 = complex0.toString();
      Complex complex9 = complex0.pow(2428.38);
      Object object1 = complex0.readResolve();
      double double3 = complex6.getImaginary();
      Complex complex10 = complex0.acos();
      Complex complex11 = complex1.pow((-599.546268262));
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex10.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-103.2523913434), 751.1921058);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = new Complex(751.1921058, Double.NaN);
      Complex complex5 = complex3.ZERO.multiply(complex4);
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex3.add(complex0);
      Complex complex8 = complex0.negate();
      Object object0 = complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1305.017980124909, 20.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex0.NaN.conjugate();
      double double0 = complex0.abs();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.I.createComplex(1305.017980124909, 0.0);
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex7.INF.sqrt();
      String string0 = complex4.toString();
      Complex complex9 = complex3.add(complex6);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.createComplex(0.0, (-1504.5450728762412));
      Complex complex3 = complex1.ONE.multiply(complex0);
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex4.INF.acos();
      Complex complex7 = complex0.subtract(complex4);
      Complex complex8 = Complex.valueOf(5832.092905982524, 5832.092905982524);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tanh();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(5.865827662008209E-8);
      Complex complex1 = complex0.ONE.divide(1033.489609);
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex1.ZERO.divide(complex0);
      Complex complex4 = complex0.NaN.tanh();
      Complex complex5 = complex0.pow(894.0);
      Complex complex6 = complex0.divide(894.0);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.NaN.log();
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex3.ZERO.multiply(complex0);
      List<Complex> list0 = complex1.INF.nthRoot(560);
      Complex complex5 = complex1.ZERO.negate();
      Complex complex6 = complex5.log();
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.I.asin();
      Complex complex9 = complex8.cos();
      Object object0 = complex2.NaN.readResolve();
      ComplexField complexField1 = complex2.INF.getField();
      Complex complex10 = complex7.cosh();
      Complex complex11 = complex2.conjugate();
      Complex complex12 = complex0.add(complex1);
      Complex complex13 = complex12.NaN.sin();
      Complex complex14 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.NaN.multiply(788);
      String string0 = complex5.ZERO.toString();
      Complex complex6 = complex2.INF.sqrt1z();
      double double0 = complex2.getReal();
      Complex complex7 = complex3.pow(Double.NaN);
      double double1 = complex4.getImaginary();
      Complex complex8 = complex3.log();
      Complex complex9 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(1480.79, 1480.79);
      Complex complex1 = new Complex(1.1155805587768555, 1.1155805587768555);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.add(3438.2498158358);
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = complex0.atan();
      List<Complex> list0 = complex1.nthRoot(324);
      Complex complex5 = complex4.multiply(7.73262243);
      Complex complex6 = complex3.add(complex2);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-192.77), (-192.77));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.INF.multiply(complex2);
      Object object0 = complex1.readResolve();
      Complex complex5 = Complex.valueOf((-192.77));
      Complex complex6 = complex2.exp();
      Complex complex7 = complex6.NaN.tan();
      String string0 = complex0.toString();
      Complex complex8 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-767.99));
      Complex complex1 = complex0.createComplex((-2.6437112632041807E-8), (-767.99));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-606.07414083536), (-606.07414083536));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex0.atan();
      Complex complex5 = Complex.valueOf((-606.07414083536));
      Complex complex6 = complex5.INF.atan();
      Complex complex7 = complex1.ONE.atan();
      String string0 = complex0.toString();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex4.ZERO.multiply(complex5);
      ComplexField complexField0 = complex4.getField();
      Complex complex10 = complex4.acos();
      Complex complex11 = complex10.I.tanh();
      Object object0 = complex3.readResolve();
      Object object1 = complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(624.4327, 211.2790819);
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.I.exp();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.pow(Double.NaN);
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      double double0 = 8.408597060399334E-50;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = Complex.valueOf(862.0);
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex0.ZERO.add(8.408597060399334E-50);
      double double1 = 3.5346080979652066E-295;
      Complex complex6 = complex5.INF.pow(3.5346080979652066E-295);
      Complex complex7 = complex0.multiply(0.0);
      Complex complex8 = complex7.exp();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.ZERO.divide(0.0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.ZERO.divide(complex4);
      double double1 = complex1.INF.abs();
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.exp();
      double double2 = complex6.abs();
      boolean boolean0 = complex6.isNaN();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.multiply(complex0);
      Complex complex9 = complex6.multiply(complex7);
      Complex complex10 = complex7.cos();
      double double3 = complex5.getReal();
      Complex complex11 = complex3.divide(complex9);
      Complex complex12 = complex10.log();
      Complex complex13 = complex1.INF.reciprocal();
      Complex complex14 = complex9.exp();
      double double4 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(1.4033570289611816, (-1051.9970869519714));
      Complex complex1 = new Complex(1.4033570289611816);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.NaN.conjugate();
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.I.asin();
      Complex complex5 = complex0.conjugate();
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6.51813137650059E-8);
      Complex complex2 = complex1.I.pow(6.51813137650059E-8);
      Complex complex3 = complex1.INF.multiply(1015);
      double double0 = complex1.ZERO.abs();
      Complex complex4 = complex1.NaN.cos();
      Complex complex5 = Complex.valueOf(337.63114254, 6.51813137650059E-8);
      int int0 = complex5.I.hashCode();
      Complex complex6 = complex5.NaN.acos();
      boolean boolean0 = complex0.isInfinite();
      double double1 = complex0.getReal();
      Complex complex7 = Complex.valueOf((-2417.518273339745), 0.0);
      Complex complex8 = complex4.atan();
      Complex complex9 = complex4.multiply(1015);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(2823.1181118092445, 2823.1181118092445);
      Complex complex1 = complex0.multiply(1409);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      String string0 = complex0.NaN.toString();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.divide((-25.7771));
      Complex complex3 = complex0.NaN.pow((-25.7771));
      List<Complex> list0 = complex3.I.nthRoot(526);
      Complex complex4 = complex0.add((-2.3470351753125604E-8));
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex4.subtract(complex2);
      Complex complex7 = complex2.exp();
      Complex complex8 = complex2.ZERO.pow((-25.7771));
      Complex complex9 = complex6.INF.log();
      Complex complex10 = complex1.exp();
      Complex complex11 = complex1.add((-1774.25447));
      Complex complex12 = complex6.sqrt();
      boolean boolean0 = complex12.isNaN();
      boolean boolean1 = complex8.isNaN();
      Complex complex13 = Complex.valueOf((-4.333719263537725E-8), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, (-2701.11229));
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.ONE.exp();
      int int0 = complex0.hashCode();
      Complex complex4 = Complex.valueOf((-1586.6));
      Complex complex5 = complex1.asin();
      String string0 = complex5.ONE.toString();
      Complex complex6 = complex5.INF.exp();
      try { 
        complex1.nthRoot((-2355));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,355
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2737.51587482);
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex1.ZERO.divide(complex2);
      Complex complex4 = complex0.NaN.add((-2093.655892464165));
      Complex complex5 = Complex.valueOf((-2093.655892464165), 0.0);
      Complex complex6 = complex2.INF.subtract(complex5);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.I.reciprocal();
      Complex complex10 = complex9.ZERO.acos();
      Complex complex11 = complex0.subtract(complex8);
      double double0 = complex1.abs();
      Complex complex12 = complex8.acos();
      Complex complex13 = complex2.log();
      Complex complex14 = complex11.reciprocal();
      Complex complex15 = Complex.I;
      boolean boolean0 = complex1.equals(complex15);
      Complex complex16 = complex10.negate();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tanh();
      String string0 = complex0.NaN.toString();
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex1.I.tanh();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.acos();
      String string1 = complex4.toString();
      int int1 = complex3.hashCode();
      Complex complex6 = complex5.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex1 = Complex.valueOf((double) 17);
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.INF.sinh();
      Object object0 = complex2.NaN.readResolve();
      Complex complex3 = complex2.pow((-3162.1802654784683));
      Complex complex4 = complex3.NaN.atan();
      Object object1 = complex0.ZERO.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.sqrt();
      double double0 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.divide((-1721.5505349743826));
      Complex complex2 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-4545.9817));
      Complex complex1 = complex0.add((-2.260433328226171E-8));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.subtract(1.0);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.ONE.multiply(1.0);
      double double1 = complex3.INF.abs();
      Complex complex4 = complex3.NaN.exp();
      int int0 = complex4.NaN.hashCode();
      Complex complex5 = new Complex(1.0, Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.multiply(1);
      Complex complex7 = complex2.asin();
      Complex complex8 = Complex.valueOf(139.31711593701);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(1326.362);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.sinh();
      double double0 = complex2.INF.abs();
      Complex complex3 = complex2.ONE.exp();
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex1.divide(1326.362);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.ZERO.pow(0.0);
      String string0 = complex0.ZERO.toString();
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.INF.sqrt1z();
      Complex complex4 = complex3.subtract(0.0);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex1.log();
      Complex complex8 = complex7.I.divide(0.0);
      int int0 = 0;
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply((-1406.215857769));
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.INF.add(1.0);
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex2.INF.divide(complex1);
      Complex complex6 = complex0.log();
      ComplexField complexField0 = complex6.ZERO.getField();
      Complex complex7 = complex5.I.divide(747.138648);
      Complex complex8 = complex6.tan();
      Complex complex9 = complex6.add(complex4);
      List<Complex> list0 = complex1.I.nthRoot(7);
      Complex complex10 = complex9.ONE.sqrt();
      Complex complex11 = complex6.reciprocal();
      Complex complex12 = complex11.I.multiply(complex2);
      Complex complex13 = complex8.add(complex1);
      Complex complex14 = complex5.NaN.asin();
      Complex complex15 = complex14.NaN.divide(complex13);
      Complex complex16 = complex14.NaN.cosh();
      Complex complex17 = complex8.ZERO.log();
      Complex complex18 = complex14.ZERO.sin();
      Complex complex19 = Complex.valueOf(1.0, 1.0);
      Complex complex20 = complex14.ONE.createComplex(1.0, 1101.663);
      Complex complex21 = complex5.multiply(complex8);
      Complex complex22 = complex7.atan();
      Complex complex23 = complex8.cos();
      double double0 = complex12.getReal();
      Complex complex24 = complex0.acos();
      Complex complex25 = complex21.pow(3181.266198241189);
      Complex complex26 = complex14.acos();
      Complex complex27 = complex21.cos();
      Complex complex28 = complex7.divide(complex4);
      Complex complex29 = Complex.valueOf((double) 7, (double) 7);
      Complex complex30 = complex15.subtract(complex29);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply(1497.15003289479);
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex2.equals(complex1);
      double double1 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.pow(2816.0381654);
      double double0 = 1285.7678848848711;
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex0.I.subtract(1285.7678848848711);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex2.multiply(complex5);
      Complex complex8 = complex7.ZERO.negate();
      ComplexField complexField0 = complex7.INF.getField();
      int int0 = (-4211);
      try { 
        complex5.nthRoot((-4211));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,211
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2285.8802614863475));
      String string0 = complex0.toString();
      Complex complex1 = complex0.NaN.multiply((-2285.8802614863475));
      double double0 = complex1.I.abs();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.ZERO.subtract(complex0);
      Complex complex5 = complex3.I.tanh();
      Complex complex6 = complex0.log();
      int int0 = complex3.hashCode();
      Object object1 = complex6.readResolve();
      Complex complex7 = Complex.valueOf((-392.878863548), 1.3399392455370071E-284);
      Complex complex8 = complex1.INF.multiply(0.0);
      Complex complex9 = complex2.ZERO.negate();
      ComplexField complexField0 = complex5.getField();
      Complex complex10 = complex4.I.cos();
      Complex complex11 = complex4.ONE.atan();
      Complex complex12 = complex4.asin();
      Complex complex13 = complex12.ZERO.subtract(complex1);
      Complex complex14 = complex2.reciprocal();
      Complex complex15 = complex14.atan();
      String string1 = complex1.toString();
      Complex complex16 = Complex.valueOf(1136.0726, (-2285.8802614863475));
      double double1 = complex0.getArgument();
      try { 
        complex14.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2564.293));
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ONE.negate();
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.pow(complex0);
      String string0 = complex0.NaN.toString();
      double double1 = complex0.getReal();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex4.I.acos();
      int int0 = complex0.ZERO.hashCode();
      Complex complex6 = complex4.NaN.acos();
      ComplexField complexField0 = complex1.getField();
      Complex complex7 = complex4.acos();
      Complex complex8 = complex5.negate();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex8.ONE.cos();
      int int1 = complex3.ZERO.hashCode();
      boolean boolean0 = complex4.isNaN();
      int int2 = complex1.ZERO.hashCode();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2564.293));
      Complex complex12 = complex4.atan();
      double double2 = complex1.abs();
      Complex complex13 = complex8.multiply(6.283185307179586);
      Complex complex14 = complex13.sqrt();
      Complex complex15 = complex14.ZERO.asin();
      Complex complex16 = complex4.ZERO.exp();
      double double3 = complex10.getArgument();
      Complex complex17 = complex10.reciprocal();
      int int3 = complex11.hashCode();
      Complex complex18 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex((-7.963112393823186E-8));
      Complex complex1 = new Complex((-7.963112393823186E-8), 8.408597060399334E-50);
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex1.ONE.asin();
      Complex complex4 = complex0.divide(complex1);
      double double0 = complex4.ONE.abs();
      double double1 = complex0.getArgument();
      double double2 = (-383.269356809);
      Complex complex5 = complex3.subtract((-383.269356809));
      Complex complex6 = complex3.multiply((-7.963112393823186E-8));
      Complex complex7 = complex6.log();
      Complex complex8 = complex6.INF.cos();
      double double3 = complex0.getReal();
      Complex complex9 = complex2.asin();
      double double4 = (-649.02631707);
      try { 
        complex4.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex((-2.308736892479391E-9));
      Complex complex1 = complex0.createComplex(0.0, (-1663.84852005746));
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.INF.add((-853.6781803));
      Complex complex4 = Complex.valueOf((-1663.84852005746), (-362.85052387504317));
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex0.NaN.multiply(complex5);
      Complex complex7 = complex5.ZERO.pow(complex2);
      Complex complex8 = Complex.valueOf(0.0, (-2.308736892479391E-9));
      ComplexField complexField0 = complex8.NaN.getField();
      Complex complex9 = complex0.log();
      Complex complex10 = complex5.tan();
      Complex complex11 = complex10.cosh();
      Complex complex12 = complex11.acos();
      double double0 = complex0.getArgument();
      Complex complex13 = complex10.conjugate();
      Complex complex14 = complex6.reciprocal();
      Complex complex15 = complex7.sqrt();
      Complex complex16 = Complex.NaN;
      Complex complex17 = complex7.subtract(complex16);
      Complex complex18 = complex8.pow(complex15);
      double double1 = complex15.getImaginary();
      ComplexField complexField1 = complex2.getField();
      int int0 = complex10.hashCode();
      Complex complex19 = complex18.multiply(318);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2469.54901167, 2469.54901167);
      Complex complex2 = complex1.ZERO.sinh();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-213.0957388044), (-348.67110747428416));
      Complex complex1 = complex0.divide(4.983191803254889E-7);
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex1.tan();
      String string0 = complex3.toString();
      Complex complex6 = complex0.I.multiply(1);
      Complex complex7 = complex6.ONE.multiply((-213.0957388044));
      Complex complex8 = complex3.I.subtract(complex6);
      Complex complex9 = complex0.ZERO.subtract(complex1);
      Complex complex10 = complex9.pow((-348.67110747428416));
      Complex complex11 = complex10.NaN.cosh();
      Complex complex12 = complex1.pow((-213.0957388044));
      Complex complex13 = complex12.ONE.negate();
      Complex complex14 = Complex.valueOf((-348.67110747428416));
      Complex complex15 = complex12.cos();
      int int0 = complex0.hashCode();
      Complex complex16 = Complex.INF;
      Complex complex17 = complex16.INF.sin();
      Object object0 = complex16.readResolve();
      boolean boolean0 = complex12.equals(object0);
      Complex complex18 = complex14.sqrt();
      Complex complex19 = complex13.ZERO.sinh();
      Complex complex20 = complex14.subtract(complex13);
      int int1 = complex7.hashCode();
      double double0 = complex20.getReal();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = new Complex(389.737, (-1782.723884));
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.I.subtract(389.737);
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex2.ONE.sqrt1z();
      Complex complex6 = complex4.tanh();
      double double0 = complex5.NaN.getArgument();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex7 = complex4.multiply(complex0);
      Complex complex8 = complex7.subtract(2.361012986350505E-4);
      Complex complex9 = complex8.I.multiply((-2160.9267042200354));
      Complex complex10 = complex9.ZERO.tanh();
      Complex complex11 = Complex.valueOf(389.737, 2668.73);
      Complex complex12 = complex4.subtract(complex2);
      Object object1 = complex4.readResolve();
      Object object2 = complex0.readResolve();
      ComplexField complexField1 = complex0.getField();
      Complex complex13 = complex1.conjugate();
      List<Complex> list0 = complex3.nthRoot(2409);
      Complex complex14 = complex3.log();
      Complex complex15 = complex6.sqrt();
      Complex complex16 = complex4.sin();
      Complex complex17 = complex2.subtract(3329.16081306846);
      Complex complex18 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.createComplex(1881.964, (-4014.01));
      double double0 = complex2.ONE.getArgument();
      String string0 = complex0.toString();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex3.subtract(1881.964);
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.INF.createComplex(1881.964, 930.7586);
      Complex complex8 = complex6.log();
      Complex complex9 = complex0.multiply((-4014.01));
      double double1 = complex9.getReal();
      Complex complex10 = Complex.valueOf(-0.0);
      Complex complex11 = complex4.tanh();
  }
}
