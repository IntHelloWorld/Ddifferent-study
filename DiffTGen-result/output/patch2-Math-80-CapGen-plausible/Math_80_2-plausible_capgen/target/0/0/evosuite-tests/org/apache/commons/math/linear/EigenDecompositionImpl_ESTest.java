/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:34:07 GMT 2020
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 1365.4;
      doubleArray0[2] = (-2840.6828);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3045.363609215;
      doubleArray0[5] = 327.390237;
      doubleArray0[6] = 0.25;
      doubleArray0[7] = 0.9999999999999998;
      doubleArray0[8] = 100.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealVector realVector0 = arrayRealVector1.mapTanh();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      double double0 = arrayRealVector0.getL1Distance(arrayRealVector1);
      RealMatrix realMatrix2 = realMatrix0.subtract(realMatrix1);
      double[] doubleArray3 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getD();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double double1 = eigenDecompositionImpl0.getImagEigenvalue(2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 1365.4;
      doubleArray0[2] = (-2840.6828);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3045.363609215;
      doubleArray0[5] = 327.390237;
      doubleArray0[6] = 0.25;
      doubleArray0[7] = 0.9999999999999998;
      doubleArray0[8] = 100.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealVector realVector0 = arrayRealVector1.mapTanh();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix2 = realMatrix0.subtract(realMatrix1);
      double[] doubleArray3 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getD();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 1365.4;
      doubleArray0[2] = (-2840.6828);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3045.363609215;
      doubleArray0[5] = 327.390237;
      doubleArray0[6] = 0.25;
      doubleArray0[7] = 0.9999999999999998;
      doubleArray0[8] = 100.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealVector realVector0 = arrayRealVector1.mapTanh();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix1 = realMatrix0.subtract(realMatrix0);
      double[] doubleArray3 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 1365.4;
      doubleArray0[2] = (-2840.6828);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1365.4;
      doubleArray0[5] = 327.390237;
      doubleArray0[6] = 0.25;
      doubleArray0[7] = 0.9999999999999998;
      doubleArray0[8] = 100.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealVector realVector0 = arrayRealVector1.mapTanh();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      double[] doubleArray3 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-851.809087);
      doubleArray0[1] = (-1242.6973266);
      doubleArray0[2] = (-993.1114362260728);
      doubleArray0[3] = 536.8109997735095;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-851.809087));
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 1365.4;
      doubleArray0[2] = (-2840.6828);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3045.363609215;
      doubleArray0[5] = 327.390237;
      doubleArray0[6] = 0.25;
      doubleArray0[7] = 0.9999999999999998;
      doubleArray0[8] = 100.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealVector realVector0 = arrayRealVector1.mapTanh();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealVector realVector1 = arrayRealVector0.append(realVector0);
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      double[] doubleArray3 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 1365.4;
      doubleArray0[2] = (-2840.6828);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3045.363609215;
      doubleArray0[5] = 327.390237;
      doubleArray0[6] = 3.418088984135306;
      doubleArray0[7] = 0.9999999999999998;
      doubleArray0[8] = 100.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealVector realVector0 = arrayRealVector1.mapTanh();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      double[] doubleArray3 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      double double0 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1905, 649644313);
      RealMatrix realMatrix0 = openMapRealMatrix0.getColumnMatrix(36);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 649644313);
      } catch(RuntimeException e) {
         //
         // row index 1,905 out of allowed range [0, 1,904]
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      int int0 = 3;
      RealMatrix realMatrix0 = array2DRowRealMatrix0.createMatrix(3, 3);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0);
      try { 
        eigenDecompositionImpl0.getEigenvector((-2479));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2479
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1100, 1100);
      int[] intArray0 = new int[1];
      intArray0[0] = 52;
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1100;
      doubleArray1[1] = (double) 52;
      doubleArray1[2] = (double) 52;
      doubleArray1[3] = (double) 52;
      doubleArray1[4] = (double) 52;
      doubleArray1[5] = (double) 52;
      doubleArray1[6] = (double) 1100;
      doubleArray1[7] = (double) 52;
      doubleArray1[8] = (double) 52;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 1100;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 52;
      doubleArray3[1] = (double) 52;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) 1100;
      doubleArray3[4] = (double) 1100;
      doubleArray3[5] = (double) 52;
      doubleArray3[6] = (double) 52;
      doubleArray3[7] = (double) 52;
      doubleArray3[8] = (double) 52;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 1100;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (double) 52;
      doubleArray4[3] = (double) 1100;
      doubleArray4[4] = (double) 52;
      doubleArray4[5] = (double) 1100;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (-983.0);
      doubleArray5[6] = (double) 1100;
      doubleArray5[7] = 0.0;
      doubleArray5[8] = (double) 52;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = (double) 1100;
      doubleArray6[1] = (double) 52;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (double) 1100;
      doubleArray6[4] = (-1512.9);
      doubleArray6[5] = 0.0;
      doubleArray6[6] = (double) 1100;
      doubleArray6[7] = (double) 52;
      doubleArray6[8] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = (-1512.9);
      doubleArray7[1] = (double) 52;
      doubleArray7[2] = (double) 52;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = (double) 52;
      doubleArray0[7] = doubleArray8;
      blockRealMatrix0.copySubMatrix(intArray0, intArray0, doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-1170.0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 1365.4;
      doubleArray0[2] = (-2840.6828);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3045.363609215;
      doubleArray0[5] = 327.390237;
      doubleArray0[6] = 0.25;
      doubleArray0[7] = 0.9999999999999998;
      doubleArray0[8] = 100.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealVector realVector0 = arrayRealVector1.mapTanh();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      double[] doubleArray3 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 12.566370614359172);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 167.97);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1651.0512296;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-678.1912587144);
      doubleArray0[3] = 2915.844915043;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 341.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1517.2957080935141));
      try { 
        eigenDecompositionImpl0.getEigenvector((-162));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -162
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3834.0181275);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealVector realVector0 = arrayRealVector0.ebeDivide(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      arrayRealVector0.unitize();
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3834.0181275));
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      double double0 = arrayRealVector1.getLInfDistance((RealVector) arrayRealVector0);
      try { 
        eigenDecompositionImpl0.getEigenvector((-1231));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1231
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2806.94;
      doubleArray0[4] = 1243.776975801052;
      doubleArray0[5] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      double double0 = array2DRowRealMatrix0.getNorm();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // a 6x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 834.3);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 850.80427;
      doubleArray0[1] = (-887.2488931456778);
      doubleArray0[2] = 3565.374048428986;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1945.8563803141);
      doubleArray0[5] = 0.563;
      doubleArray0[6] = 2.2250738585072014E-308;
      doubleArray0[7] = 1.1102230246251565E-16;
      doubleArray0[8] = (-2003.26583197);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1.1102230246251565E-16;
      doubleArray1[1] = 0.563;
      doubleArray1[2] = (-887.2488931456778);
      doubleArray1[3] = 2.2250738585072014E-308;
      doubleArray1[4] = 977.1721;
      doubleArray1[5] = (-1945.8563803141);
      doubleArray1[6] = (-2003.26583197);
      doubleArray1[7] = (-1945.8563803141);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2003.26583197));
      try { 
        eigenDecompositionImpl0.getImagEigenvalue((-1925));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1925
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, 197.3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = 4251.557724;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 4251.557724);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1668.515935589;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 24.705695;
      doubleArray0[3] = (-1261.06638800255);
      doubleArray0[4] = 2220.91057625411;
      doubleArray0[5] = 2.2250738585072014E-308;
      doubleArray0[6] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 2.2250738585072014E-308);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 1365.4;
      doubleArray0[2] = (-2840.6828);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3045.363609215;
      doubleArray0[5] = 319.1096298510226;
      doubleArray0[6] = 0.25;
      doubleArray0[7] = 0.9999999999999998;
      doubleArray0[8] = 100.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealVector realVector0 = arrayRealVector1.mapTanh();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      double[] doubleArray3 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      double[] doubleArray4 = eigenDecompositionImpl0.getRealEigenvalues();
      double double0 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2432.8234234708);
      doubleArray0[1] = 1.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-2432.8234234708));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[2] = double1;
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
      // Undeclared exception!
      try { 
        arrayRealVector0.outerProduct((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-529.50141742444));
      doubleArray0[0] = double0;
      Double double1 = new Double((-529.50141742444));
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (double) doubleArray0[0]);
      try { 
        eigenDecompositionImpl0.getEigenvector(8);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = (-479.62006345088736);
      doubleArray0[3] = 1475.839612;
      doubleArray0[4] = 4523.356562;
      doubleArray0[5] = (-1918.313321869337);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1694.1294584);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 47.014002;
      doubleArray0[3] = 8.08639844128081;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 8.08639844128081;
      doubleArray1[2] = 8.08639844128081;
      doubleArray1[3] = 787.1;
      doubleArray1[4] = 47.014002;
      doubleArray1[5] = 1.1102230246251565E-14;
      doubleArray1[6] = 8.08639844128081;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-519.1));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }
}
