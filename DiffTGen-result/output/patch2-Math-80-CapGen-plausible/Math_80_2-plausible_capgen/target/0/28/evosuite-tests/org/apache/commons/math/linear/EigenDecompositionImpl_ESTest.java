/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:43:58 GMT 2020
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 854.207834936;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = (-666.37537);
      doubleArray0[4] = 1591.1951235988;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 100.0;
      doubleArray1[1] = 854.207834936;
      doubleArray1[2] = 1591.1951235988;
      doubleArray1[3] = (-666.37537);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      try { 
        eigenDecompositionImpl0.getEigenvector((-866));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -866
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3530.76603;
      doubleArray0[1] = 854.207834936;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = (-666.37537);
      doubleArray0[4] = 1591.1951235988;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 100.0;
      doubleArray1[1] = 854.207834936;
      doubleArray1[2] = 1591.1951235988;
      doubleArray1[3] = (-666.37537);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      try { 
        eigenDecompositionImpl0.getEigenvector((-866));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -866
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3530.76603;
      doubleArray0[1] = 3530.76603;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = (-666.37537);
      doubleArray0[4] = (-666.37537);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 100.0;
      doubleArray1[1] = 854.207834936;
      doubleArray1[2] = 1591.1951235988;
      doubleArray1[3] = (-666.37537);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY);
      try { 
        eigenDecompositionImpl0.getEigenvector((-866));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -866
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3530.76603;
      doubleArray0[1] = 854.207834936;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = (-666.37537);
      doubleArray0[4] = 1591.1951235988;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 100.0;
      doubleArray1[2] = 1591.1951235988;
      doubleArray1[3] = (-666.37537);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY);
      try { 
        eigenDecompositionImpl0.getEigenvector((-866));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -866
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3530.76603;
      doubleArray0[1] = 854.207834936;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = (-666.37537);
      doubleArray0[4] = 1591.1951235988;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 854.207834936;
      doubleArray1[1] = 854.207834936;
      doubleArray1[2] = 1591.1951235988;
      doubleArray1[3] = (-666.37537);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY);
      try { 
        eigenDecompositionImpl0.getImagEigenvalue((-731));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -731
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2153;
      int int1 = 325;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2153, 325);
      int int2 = 0;
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.copy();
      double[] doubleArray0 = openMapRealMatrix0.getColumn(0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 2153);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1845.7407684456678);
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, false);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray1);
      RealVector realVector0 = arrayRealVector0.copy();
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, (-1845.7407684456678));
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double[] doubleArray3 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(0);
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getD();
      double double1 = eigenDecompositionImpl0.getImagEigenvalue(0);
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getV();
      double[] doubleArray4 = eigenDecompositionImpl0.getRealEigenvalues();
      double[] doubleArray5 = eigenDecompositionImpl0.getRealEigenvalues();
      double double2 = eigenDecompositionImpl0.getImagEigenvalue(0);
      double double3 = eigenDecompositionImpl0.getDeterminant();
      RealVector realVector1 = arrayRealVector0.mapExpm1();
      try { 
        array2DRowRealMatrix0.setColumn(31, doubleArray5);
      } catch(RuntimeException e) {
         //
         // column index 31 out of allowed range [0, 0]
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2076.36);
      doubleArray0[1] = 3453.89950977;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-709.927));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(1921, 0.0);
      try { 
        openMapRealVector0.ebeMultiply((RealVector) openMapRealVector1);
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 2 but expected 1,921
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 17;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(17, 17);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(17);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1800.9);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(17);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, Double.POSITIVE_INFINITY);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1974;
      int int1 = 40;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(1974, 40);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.copy();
      double double0 = (-1283.728516391);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1283.728516391));
      } catch(RuntimeException e) {
         //
         // a 1,974x40 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 4088.838380096);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.9999999999999998;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 2.0;
      doubleArray1[3] = 679.0;
      doubleArray1[4] = 514.81;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1883.478);
      doubleArray1[7] = (-1388.4344);
      doubleArray1[8] = 2910.095;
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.copy();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NEGATIVE_INFINITY);
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x9 matrix
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, 12.566370614359172);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 27.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1096.0;
      doubleArray0[1] = (-530.60701286);
      doubleArray0[2] = (-214.4);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-417.885);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1096.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2064.9866435113);
      doubleArray0[1] = (-874.308);
      doubleArray0[2] = 0.0;
      double double0 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.9999999999999998;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      try { 
        array2DRowRealMatrix0.getRowMatrix((-1138));
      } catch(RuntimeException e) {
         //
         // row index -1,138 out of allowed range [0, 4]
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3530.76603;
      doubleArray0[1] = 854.207834936;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = (-666.37537);
      doubleArray0[4] = 1591.1951235988;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 100.0;
      doubleArray1[1] = 854.207834936;
      doubleArray1[2] = 1591.1951235988;
      doubleArray1[3] = (-666.37537);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY);
      try { 
        eigenDecompositionImpl0.getEigenvector((-866));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -866
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.2250738585072014E-308;
      doubleArray0[1] = 3125.4828944613105;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2543.55377638);
      doubleArray0[4] = (-2776.531851309716);
      doubleArray0[5] = (-873.7539504);
      doubleArray0[6] = (-3854.6818924086);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-859.94920311);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-618.89);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 54.0;
      doubleArray0[1] = (-1736.6025905737383);
      doubleArray0[2] = 1.1102230246251565E-16;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 54.0;
      doubleArray1[1] = 1.1102230246251565E-16;
      doubleArray1[2] = 1.1102230246251565E-16;
      doubleArray1[3] = 54.0;
      doubleArray1[4] = 54.0;
      doubleArray1[5] = 1.1102230246251565E-16;
      doubleArray1[7] = (-1736.6025905737383);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2989.1196483);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }
}
