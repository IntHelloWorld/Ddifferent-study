/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:34:13 GMT 2020
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-343.7967815229);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-963.7567303090744);
      doubleArray0[4] = 1.9888366354175835;
      doubleArray0[6] = 2061.512025671485;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-215.5045047203));
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2016.3002483151);
      doubleArray0[1] = 2710.613;
      doubleArray0[0] = (-1349.2305);
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = 0.08325;
      doubleArray0[5] = 0.08325;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2016.3002483151);
      doubleArray1[1] = 2710.613;
      doubleArray1[2] = 0.08325;
      doubleArray1[3] = (-2016.3002483151);
      doubleArray1[4] = 2.2250738585072014E-308;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2016.3002483151);
      doubleArray0[1] = 2710.613;
      doubleArray0[2] = (-1349.2305);
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = 0.08325;
      doubleArray0[5] = 2408.06612;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2016.3002483151);
      doubleArray1[1] = 2710.613;
      doubleArray1[2] = 0.08325;
      doubleArray1[3] = (-2016.3002483151);
      doubleArray1[4] = 2.2250738585072014E-308;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.0));
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-343.7967815229);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-976.2233079);
      doubleArray0[4] = 1.8;
      doubleArray0[5] = (-215.5045047203);
      doubleArray0[6] = 2061.512025671485;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-215.5045047203));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapSinhToSelf();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-343.7967815229);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-976.2233079);
      doubleArray0[4] = 1.8;
      doubleArray0[5] = (-215.5045047203);
      doubleArray0[6] = 2061.512025671485;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-215.5045047203));
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapSubtractToSelf((-3961.6732510122606));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (-343.7967815229);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-979.733032685816);
      doubleArray0[4] = 1.8;
      doubleArray0[5] = (-215.5045047203);
      doubleArray0[6] = 2061.512025671485;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-215.5045047203));
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getEigenvector(715827883);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 715827883
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-343.7967815229);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-976.2233079);
      doubleArray0[4] = 1.8;
      doubleArray0[5] = (-215.5045047203);
      doubleArray0[6] = 2061.512025671485;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-215.5045047203));
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-343.7967815229);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-976.2233079);
      doubleArray0[4] = 1.8;
      doubleArray0[5] = (-206.48004286371577);
      doubleArray0[6] = 2061.512025671485;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-206.48004286371577));
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(31);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 31
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-343.7967815229);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-976.2233079);
      doubleArray0[1] = 1.8;
      doubleArray0[5] = (-215.5045047203);
      doubleArray0[6] = 2061.512025671485;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-215.5045047203));
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2016.3002483151);
      doubleArray0[1] = 2710.613;
      doubleArray0[2] = (-1349.2305);
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = 0.08325;
      doubleArray0[5] = 2408.06612;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2016.3002483151);
      doubleArray1[1] = 2710.613;
      doubleArray1[2] = 0.08325;
      doubleArray1[3] = (-2016.3002483151);
      doubleArray1[4] = 2.2250738585072014E-308;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.0));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(8);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-343.7967815229);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-976.2233079);
      doubleArray0[4] = 1.8;
      doubleArray0[5] = (-215.5045047203);
      doubleArray0[6] = 2061.512025671485;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-215.5045047203));
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-343.7967815229);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-976.2233079);
      doubleArray0[4] = 1.8;
      doubleArray0[5] = (-215.5045047203);
      doubleArray0[6] = 2061.512025671485;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-215.5045047203));
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      double double0 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-343.7967815229);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-976.2233079);
      doubleArray0[5] = (-215.5045047203);
      doubleArray0[6] = 2061.512025671485;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-215.5045047203));
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 7;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(7, 7);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 7);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getEigenvector(52);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 4261;
      int int1 = 423;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(4261, 423);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 269.0653572;
      doubleArray0[1] = 543.584415;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 6.283185307179586;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 269.0653572;
      doubleArray1[3] = 6.283185307179586;
      doubleArray1[4] = 269.0653572;
      doubleArray1[5] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1804.549278219109);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 27.0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 27.0;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 27.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1317.4;
      doubleArray0[1] = (-1258.6719429530876);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 4241.665490103061;
      doubleArray0[4] = 54.0;
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 54.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 54.0;
      doubleArray1[3] = (Double) 4241.665490103061;
      doubleArray1[4] = (Double) 54.0;
      doubleArray1[5] = (Double) 4241.665490103061;
      doubleArray1[6] = (Double) 4241.665490103061;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1, 0, 0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector1);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue((-1));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (-343.7967815229);
      doubleArray0[1] = (-5.698084754428957);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-979.733032685816);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-215.5045047203);
      doubleArray0[6] = 2061.512025671485;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-215.5045047203));
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      String string0 = openMapRealMatrix0.toString();
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      try { 
        eigenDecompositionImpl0.getEigenvector(715827883);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 715827883
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.05;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      RealMatrix realMatrix0 = openMapRealVector1.outerProduct((RealVector) openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(41);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 41
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 27.0;
      doubleArray0[2] = 2.2250738585072014E-308;
      doubleArray0[3] = 54.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 100.0;
      doubleArray0[6] = 2290.34111113916;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 100.0);
      } catch(RuntimeException e) {
         //
         // a 7x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3061.442);
      doubleArray0[2] = 12.566370614359172;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 1.1102230246251565E-16);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 100.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.5);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (-2091.159);
      doubleArray0[2] = 2.384314967684986E-12;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, Double.POSITIVE_INFINITY);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1854.034);
      doubleArray0[3] = (-1337.42082989);
      doubleArray0[4] = 1249.7069;
      doubleArray0[5] = (-80.9640738143144);
      doubleArray0[6] = 2683.35845308;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      RealMatrix realMatrix1 = array2DRowRealMatrix0.preMultiply(realMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1.0));
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x7 matrix
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-343.7967815229);
      doubleArray0[1] = (-343.7967815229);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-343.7967815229);
      doubleArray0[4] = 1.8;
      doubleArray0[5] = (-215.5045047203);
      doubleArray0[6] = 2061.512025671485;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-215.5045047203));
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      double double0 = openMapRealMatrix0.getNorm();
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      double double1 = openMapRealVector0.getDistance(openMapRealVector1);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      double double2 = eigenDecompositionImpl0.getDeterminant();
      try { 
        eigenDecompositionImpl0.getEigenvector((-2104));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2104
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      double[] doubleArray0 = new double[2];
      double double0 = 15.620122892581703;
      try { 
        arrayRealVector0.getLInfDistance(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 0 but expected 2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      try { 
        array2DRowRealMatrix0.createMatrix(8, (-1861));
      } catch(IllegalArgumentException e) {
         //
         // invalid column dimension -1,861 (must be positive)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-3094.1400803977));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 4084;
      int int1 = (-11);
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(4084, (-11));
      } catch(IllegalArgumentException e) {
         //
         // invalid column dimension -11 (must be positive)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 718.386144508147;
      doubleArray0[1] = (-829.700808779829);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 761.7275324;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 54.0;
      doubleArray0[6] = (-8.745);
      doubleArray0[7] = 1878.095589;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray1);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.preMultiply((RealMatrix) blockRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getD();
      double double1 = eigenDecompositionImpl0.getImagEigenvalue(0);
      double double2 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix5 = eigenDecompositionImpl0.getVT();
  }
}
