* EvoSuite 1.0.6
* Going to generate test cases for class: org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer
* Starting client
* Connecting to master process on port 6084
* Analyzing classpath: 
  - /home/hewitt/work/DiffTGen-master/output/patch1-Math-57-CapGen/Math_57_1_capgen/target/build/classes/all0.jar
  - /home/hewitt/work/DiffTGen-master/lib/myprinter.jar
  - /home/hewitt/work/DiffTGen-master/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 115
  - Branch 64
  - Exception 0
  - MutationFactory 161
  - Output 6
  - Method 3
  - MethodNoException 3
  - CBranchFitnessFactory 64
* Using seed 1585449486310
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%][Progress:=====>                        18%] [Cov:>                                  0%][Progress:=====>                        18%] [Cov:====>                              13%][Progress:=====>                        18%] [Cov:======>                            19%][Progress:=====>                        18%] [Cov:========>                          23%][Progress:======>                       20%] [Cov:>                                  1%][Progress:======>                       20%] [Cov:====>                              13%][Progress:======>                       20%] [Cov:========>                          24%][Progress:======>                       20%] [Cov:==========>                        31%][Progress:======>                       21%] [Cov:>                                  2%][Progress:======>                       21%] [Cov:=>                                 3%][Progress:======>                       21%] [Cov:=====>                             15%][Progress:======>                       21%] [Cov:=====>                             16%][Progress:======>                       21%] [Cov:=========>                         27%][Progress:======>                       21%] [Cov:============>                      35%][Progress:=======>                      26%] [Cov:>                                  0%][Progress:=======>                      26%] [Cov:>                                  1%][Progress:=======>                      26%] [Cov:====>                              13%][Progress:=======>                      26%] [Cov:======>                            19%][Progress:=======>                      26%] [Cov:========>                          23%][Progress:=======>                      26%] [Cov:========>                          24%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:==========>                   36%] [Cov:>                                  1%][Progress:==========>                   36%] [Cov:====>                              13%][Progress:==========>                   36%] [Cov:========>                          24%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:============>                 41%] [Cov:>                                  1%][Progress:============>                 41%] [Cov:====>                              13%][Progress:============>                 41%] [Cov:========>                          24%][Progress:============>                 41%] [Cov:==========>                        31%][Progress:==============>               48%] [Cov:>                                  0%][Progress:==============>               48%] [Cov:====>                              13%][Progress:==============>               48%] [Cov:======>                            19%][Progress:==============>               48%] [Cov:========>                          23%][Progress:==============>               48%] [Cov:========>                          24%][Progress:==============>               48%] [Cov:==========>                        31%][Progress:==================>           60%] [Cov:>                                  0%][Progress:==================>           60%] [Cov:>                                  1%][Progress:==================>           60%] [Cov:====>                              13%][Progress:==================>           60%] [Cov:======>                            19%][Progress:==================>           60%] [Cov:========>                          23%][Progress:==================>           60%] [Cov:========>                          24%][Progress:==================>           60%] [Cov:==========>                        31%][Progress:==================>           61%] [Cov:>                                  1%][Progress:==================>           61%] [Cov:====>                              13%][Progress:==================>           61%] [Cov:========>                          24%][Progress:==================>           61%] [Cov:==========>                        31%][Progress:==================>           61%] [Cov:============>                      37%][Progress:==================>           61%] [Cov:=================>                 49%][Progress:==================>           61%] [Cov:=================>                 50%][Progress:==================>           63%] [Cov:>                                  1%][Progress:==================>           63%] [Cov:====>                              13%][Progress:==================>           63%] [Cov:=======>                           20%][Progress:==================>           63%] [Cov:========>                          24%][Progress:==================>           63%] [Cov:=================>                 50%][Progress:===================>          65%] [Cov:==========>                        31%][Progress:===================>          65%] [Cov:===========>                       34%][Progress:===================>          65%] [Cov:=============>                     38%][Progress:===================>          65%] [Cov:===============>                   45%][Progress:===================>          65%] [Cov:================>                  47%][Progress:===================>          65%] [Cov:=================>                 49%][Progress:===================>          65%] [Cov:=================>                 50%][Progress:===================>          66%] [Cov:======>                            19%][Progress:===================>          66%] [Cov:========>                          23%][Progress:===================>          66%] [Cov:==========>                        31%][Progress:===================>          66%] [Cov:===========>                       34%][Progress:===================>          66%] [Cov:================>                  47%][Progress:===================>          66%] [Cov:=================>                 49%][Progress:===================>          66%] [Cov:=================>                 50%][Progress:====================>         68%] [Cov:==================>                54%][Progress:=====================>        73%] [Cov:==================>                54%][Progress:======================>       75%] [Cov:==================>                52%][Progress:======================>       75%] [Cov:==================>                54%][Progress:======================>       75%] [Cov:==================>                54%][Progress:======================>       76%] [Cov:==================>                52%][Progress:======================>       76%] [Cov:==================>                54%][Progress:======================>       76%] [Cov:==================>                54%][Progress:========================>     81%] [Cov:==================>                54%][Progress:=========================>    86%] [Cov:==================>                54%][Progress:==========================>   88%] [Cov:==================>                52%][Progress:===========================>  93%] [Cov:==================>                52%][Progress:===========================>  93%] [Cov:==================>                54%][Progress:=============================>98%] [Cov:==================>                54%][Progress:==============================100%] [Cov:==================>                54%][Progress:==============================100%] [Cov:==================>                54%][Progress:==============================100%] [Cov:====================>              58%]
* Search finished after 63s and 4 generations, 2892 statements, best individual has fitness: 322.31884057691616
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 43%
* Total number of goals: 115
* Number of covered goals: 50
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 33%
* Total number of goals: 64
* Number of covered goals: 21
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 39%
* Total number of goals: 161
* Number of covered goals: 62
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 6
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 33%
* Total number of goals: 64
* Number of covered goals: 21
* Generated 5 tests with total length 35
* Resulting test suite's coverage: 58% (average coverage for all fitness functions)
* Compiling and checking tests
* Writing JUnit test case 'KMeansPlusPlusClusterer_ESTest' to evosuite-tests
* Done!

* Computation finished
