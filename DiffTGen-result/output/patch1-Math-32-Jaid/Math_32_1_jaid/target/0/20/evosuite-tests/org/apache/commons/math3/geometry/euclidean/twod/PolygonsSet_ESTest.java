/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 10:55:41 GMT 2020
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.AffineTransform;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Segment;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.AbstractRegion;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor;
import org.apache.commons.math3.geometry.partitioning.Region;
import org.apache.commons.math3.geometry.partitioning.Side;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PolygonsSet_ESTest extends PolygonsSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D(205.8961841654244, vector2D0);
      double double0 = Vector2D.distanceInf(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, 3468.454984);
      SubLine subLine0 = new SubLine(vector2D0, vector2D1);
      boolean boolean0 = linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      Line line1 = new Line(line0);
      Segment segment0 = new Segment(vector2D0, vector2D1, line1);
      SubLine subLine1 = new SubLine(segment0);
      boolean boolean1 = linkedList0.add((SubHyperplane<Euclidean2D>) subLine1);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      // Undeclared exception!
      try { 
        polygonsSet0.computeGeometricalProperties();
      } catch(IllegalStateException e) {
         //
         // illegal state: internal error, please fill a bug report at https://issues.apache.org/jira/browse/MATH
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D(205.8961841654244, vector2D0);
      double double0 = Vector2D.distanceInf(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, 3468.454984);
      Line line1 = new Line(line0);
      Segment segment0 = new Segment(vector2D0, vector2D1, line1);
      SubLine subLine0 = new SubLine(segment0);
      boolean boolean0 = linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      polygonsSet0.computeGeometricalProperties();
      BSPTree<Euclidean2D> bSPTree0 = polygonsSet0.getTree(true);
      polygonsSet0.computeGeometricalProperties();
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.getPlus();
      line0.setOriginOffset(0.0);
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree1);
      BSPTree<Euclidean2D> bSPTree2 = bSPTree0.split(subLine0);
      Region.Location region_Location0 = polygonsSet0.checkPoint(vector2D0);
      polygonsSet0.computeGeometricalProperties();
      Vector2D[][] vector2DArray1 = polygonsSet1.getVertices();
      boolean boolean1 = bSPTree1.insertCut(line1);
      polygonsSet1.computeGeometricalProperties();
      PolygonsSet polygonsSet2 = polygonsSet0.buildNew(bSPTree2);
      polygonsSet1.computeGeometricalProperties();
      Vector2D[][] vector2DArray2 = polygonsSet1.getVertices();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      BSPTree<Euclidean2D> bSPTree1 = new BSPTree<Euclidean2D>(subLine0, bSPTree0, bSPTree0, subLine0);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree1);
      PolygonsSet polygonsSet1 = new PolygonsSet();
      // Undeclared exception!
      try { 
        polygonsSet0.getVertices();
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.twod.SubLine cannot be cast to org.apache.commons.math3.geometry.partitioning.BoundaryAttribute
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      polygonsSet0.computeGeometricalProperties();
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.revertSelf();
      Line line1 = new Line(line0);
      Side side0 = polygonsSet0.side(line1);
      Vector2D vector2D1 = new Vector2D(0.0, vector2D0, 0.0, vector2D0, (-533.69904561), vector2D0);
      double double0 = vector2D0.distanceInf((Vector<Euclidean2D>) vector2D1);
      polygonsSet0.computeGeometricalProperties();
      BSPTree<Euclidean2D> bSPTree0 = polygonsSet0.getTree(true);
      SubLine subLine0 = line0.wholeHyperplane();
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.split(subLine0);
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      polygonsSet0.computeGeometricalProperties();
      Vector2D[][] vector2DArray1 = polygonsSet0.getVertices();
      double double1 = line0.getAngle();
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree0);
      PolygonsSet polygonsSet2 = polygonsSet0.buildNew(bSPTree0);
      PolygonsSet polygonsSet3 = polygonsSet1.buildNew(bSPTree1);
      Vector2D[][] vector2DArray2 = polygonsSet0.getVertices();
      PolygonsSet polygonsSet4 = polygonsSet1.buildNew(bSPTree1);
      // Undeclared exception!
      try { 
        polygonsSet4.computeGeometricalProperties();
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.partitioning.BoundaryAttribute cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D(205.8961841654244, vector2D0);
      double double0 = Vector2D.distanceInf(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, 3468.454984);
      Line line1 = new Line(line0);
      Segment segment0 = new Segment(vector2D0, vector2D1, line1);
      SubLine subLine0 = new SubLine(segment0);
      boolean boolean0 = linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      polygonsSet0.computeGeometricalProperties();
      BSPTree<Euclidean2D> bSPTree0 = polygonsSet0.getTree(true);
      polygonsSet0.computeGeometricalProperties();
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.getPlus();
      line0.setOriginOffset(0.0);
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree1);
      BSPTree<Euclidean2D> bSPTree2 = bSPTree0.split(subLine0);
      Region.Location region_Location0 = polygonsSet0.checkPoint(vector2D0);
      polygonsSet0.computeGeometricalProperties();
      Vector2D[][] vector2DArray1 = polygonsSet1.getVertices();
      polygonsSet1.computeGeometricalProperties();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = Vector2D.NaN;
      Vector2D vector2D2 = vector2D0.add((Vector<Euclidean2D>) vector2D1);
      SubLine subLine0 = line0.wholeHyperplane();
      Vector2D vector2D3 = Vector2D.NaN;
      Vector2D vector2D4 = vector2D0.subtract((Vector<Euclidean2D>) vector2D3);
      Line line1 = line0.getReverse();
      boolean boolean0 = linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      boolean boolean1 = linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (-200.82626339);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 238.73989;
      doubleArray0[7] = 474.0;
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      doubleArray0[8] = 69.409676674133;
      Vector2D vector2D5 = null;
      try {
        vector2D5 = new Vector2D(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(0.0, (-314.88391152316), (-314.88391152316), (-2665.5));
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Boolean boolean0 = new Boolean(false);
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(boolean0);
      Vector2D vector2D1 = new Vector2D(0.0, Double.NEGATIVE_INFINITY);
      Vector2D vector2D2 = new Vector2D(0.0, vector2D0, 3.0, vector2D1, 591.47486, vector2D0);
      BSPTree<Euclidean2D> bSPTree1 = new BSPTree<Euclidean2D>(subLine0, bSPTree0, bSPTree0, vector2D2);
      BSPTree<Euclidean2D> bSPTree2 = bSPTree1.getCell(vector2D1);
      BSPTree<Euclidean2D> bSPTree3 = bSPTree2.split(subLine0);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree3);
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      boolean boolean0 = linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      polygonsSet0.computeGeometricalProperties();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.copySelf();
      BSPTree<Euclidean2D> bSPTree2 = bSPTree1.getMinus();
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew((BSPTree<Euclidean2D>) null);
      polygonsSet0.computeGeometricalProperties();
      // Undeclared exception!
      try { 
        polygonsSet1.getVertices();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      BSPTree<Euclidean2D> bSPTree0 = polygonsSet0.getTree(false);
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      SubHyperplane<Euclidean2D> subHyperplane0 = bSPTree0.getCut();
      BSPTree<Euclidean2D> bSPTree1 = new BSPTree<Euclidean2D>((SubHyperplane<Euclidean2D>) null, bSPTree0, bSPTree0, polygonsSet0);
      BSPTree.LeafMerger<Euclidean2D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean2D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      doReturn((BSPTree) null).when(bSPTree_LeafMerger0).merge(nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , anyBoolean() , anyBoolean());
      BSPTree<Euclidean2D> bSPTree2 = bSPTree1.merge(bSPTree0, bSPTree_LeafMerger0);
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew((BSPTree<Euclidean2D>) null);
      bSPTree0.insertInTree(bSPTree1, true);
      // Undeclared exception!
      try { 
        polygonsSet1.computeGeometricalProperties();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PolygonsSet polygonsSet0 = null;
      try {
        polygonsSet0 = new PolygonsSet((Collection<SubHyperplane<Euclidean2D>>) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 4008.6383496;
      double double1 = 0.0;
      PolygonsSet polygonsSet0 = null;
      try {
        polygonsSet0 = new PolygonsSet((-3.4028234663852886E38), 4008.6383496, 4008.6383496, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.BSPTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(845.236, 3.0, 845.236, 3.0);
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance(845.236, 845.236);
      Transform<Euclidean2D, Euclidean1D> transform0 = Line.getTransform(affineTransform0);
      AbstractRegion<Euclidean2D, Euclidean1D> abstractRegion0 = polygonsSet0.applyTransform(transform0);
      polygonsSet0.computeGeometricalProperties();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = vector2D0.normalize();
      double double0 = Vector2D.distanceInf(vector2D0, vector2D0);
      PolygonsSet polygonsSet0 = line0.wholeSpace();
      polygonsSet0.computeGeometricalProperties();
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1.0E-10, 1.0E-10);
      Line line0 = new Line(vector2D0, 1.0E-10);
      Line line1 = new Line(line0);
      PolygonsSet polygonsSet0 = line1.wholeSpace();
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(line1);
      BSPTreeVisitor<Euclidean2D> bSPTreeVisitor0 = (BSPTreeVisitor<Euclidean2D>) mock(BSPTreeVisitor.class, new ViolatedAssumptionAnswer());
      bSPTree0.visit(bSPTreeVisitor0);
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree0);
      // Undeclared exception!
      try { 
        polygonsSet1.computeGeometricalProperties();
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.twod.Line cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      double double0 = polygonsSet0.getBoundarySize();
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      polygonsSet0.computeGeometricalProperties();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet((-1928.55), 2686.189814152179, 2686.189814152179, 3.4028234663852886E38);
      // Undeclared exception!
      try { 
        polygonsSet0.getSize();
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.partitioning.BoundaryAttribute cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D(205.8961841654244, vector2D0);
      double double0 = Vector2D.distanceInf(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, 3468.454984);
      Line line1 = new Line(line0);
      Segment segment0 = new Segment(vector2D0, vector2D1, line1);
      SubLine subLine0 = new SubLine(segment0);
      boolean boolean0 = linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      polygonsSet0.computeGeometricalProperties();
      BSPTree<Euclidean2D> bSPTree0 = polygonsSet0.getTree(true);
      polygonsSet0.computeGeometricalProperties();
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.getPlus();
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree1);
      BSPTree<Euclidean2D> bSPTree2 = bSPTree0.split(subLine0);
      Region.Location region_Location0 = polygonsSet0.checkPoint(vector2D0);
      polygonsSet0.computeGeometricalProperties();
      Vector2D[][] vector2DArray1 = polygonsSet1.getVertices();
      polygonsSet1.computeGeometricalProperties();
      PolygonsSet polygonsSet2 = polygonsSet0.buildNew(bSPTree2);
      polygonsSet1.computeGeometricalProperties();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D(205.8961841654244, vector2D0);
      double double0 = Vector2D.distanceInf(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, 3468.454984);
      Line line1 = new Line(line0);
      Segment segment0 = new Segment(vector2D0, vector2D1, line1);
      SubLine subLine0 = new SubLine(segment0);
      boolean boolean0 = linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      polygonsSet0.computeGeometricalProperties();
      BSPTree<Euclidean2D> bSPTree0 = polygonsSet0.getTree(true);
      polygonsSet0.computeGeometricalProperties();
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.getPlus();
      line0.setOriginOffset(0.0);
      SubHyperplane<Euclidean2D> subHyperplane0 = linkedList0.removeFirst();
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree1);
      BSPTree<Euclidean2D> bSPTree2 = bSPTree0.split(subLine0);
      Region.Location region_Location0 = polygonsSet0.checkPoint(vector2D0);
      polygonsSet0.computeGeometricalProperties();
      Vector2D[][] vector2DArray1 = polygonsSet1.getVertices();
      boolean boolean1 = bSPTree1.insertCut(line1);
      polygonsSet1.computeGeometricalProperties();
      PolygonsSet polygonsSet2 = polygonsSet0.buildNew(bSPTree2);
      polygonsSet1.computeGeometricalProperties();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Vector2D vector2D1 = new Vector2D(3.0, vector2D0, 1994.4963537225185, vector2D0, 408.50247, vector2D0);
      Vector2D vector2D2 = new Vector2D(408.50247, vector2D1, 3.0, vector2D0);
      Vector2D vector2D3 = new Vector2D(408.50247, vector2D2, 1.0, vector2D0, 408.50247, vector2D1, 1.0, vector2D0);
      Line line0 = new Line(vector2D3, vector2D0);
      Vector2D vector2D4 = Vector2D.ZERO;
      double double0 = Vector2D.distance(vector2D4, vector2D1);
      PolygonsSet polygonsSet0 = line0.wholeSpace();
      boolean boolean0 = line0.contains(vector2D2);
      Vector2D vector2D5 = vector2D1.subtract(3.0, (Vector<Euclidean2D>) vector2D2);
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      SubHyperplane<Euclidean2D> subHyperplane0 = bSPTree0.getCut();
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.getParent();
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew((BSPTree<Euclidean2D>) null);
      PolygonsSet polygonsSet2 = polygonsSet0.buildNew(bSPTree0);
      polygonsSet0.computeGeometricalProperties();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet((-1885.40498547762), (-10.6059276088075), (-1885.40498547762), (-270.43013));
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      polygonsSet0.computeGeometricalProperties();
      polygonsSet0.computeGeometricalProperties();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet((-1885.40498547762), 0.0, (-1885.40498547762), (-270.43013));
      polygonsSet0.computeGeometricalProperties();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      double double0 = polygonsSet0.getSize();
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      BSPTree.LeafMerger<Euclidean2D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean2D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      polygonsSet0.computeGeometricalProperties();
  }
}
