/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 00:43:23 GMT 2020
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixPreservingVisitor;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4334.083228);
      doubleArray0[2] = (-3628.051152984055);
      doubleArray0[4] = 484.0;
      doubleArray0[5] = (-1566.7333411888353);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-438.3076712305);
      doubleArray0[1] = (-4334.083228);
      doubleArray0[2] = (-3628.051152984055);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 484.0;
      doubleArray0[5] = (-1566.7333411888353);
      doubleArray0[6] = 3198.34987;
      doubleArray0[7] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1555.51));
      doubleArray0[0] = double0;
      Double double1 = new Double(0.5);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      double double3 = Double.max((double) doubleArray0[0], 489.2785385);
      Double double4 = new Double((double) doubleArray0[0]);
      doubleArray0[3] = double4;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapDivide((-1555.51));
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector2.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      double double5 = eigenDecompositionImpl0.getDeterminant();
      RealVector realVector1 = eigenDecompositionImpl0.getEigenvector(0);
      double double6 = eigenDecompositionImpl0.getImagEigenvalue(0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1555.51));
      doubleArray0[0] = double0;
      Double double1 = new Double(0.5);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      double double3 = Double.sum((-797.3107888), (double) doubleArray0[1]);
      Double double4 = new Double((double) doubleArray0[0]);
      doubleArray0[3] = double4;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapDivide((-1555.51));
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector0);
      double double5 = Double.max(1.0E-12, 1.0E-12);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector2.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.append(openMapRealVector1);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      double double6 = eigenDecompositionImpl0.getDeterminant();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1555.51));
      doubleArray0[0] = double0;
      Double double1 = new Double(0.5);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      double double3 = Double.max((double) doubleArray0[0], 489.2785385);
      Double double4 = new Double((double) doubleArray0[0]);
      doubleArray0[3] = double4;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapDivide((-1555.51));
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector2.outerproduct(openMapRealVector0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.mapPowToSelf(489.2785385);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      double double5 = eigenDecompositionImpl0.getDeterminant();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4334.083228);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 484.0;
      doubleArray0[5] = (-1566.7333411888353);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1555.51));
      doubleArray0[0] = double0;
      Double double1 = new Double(0.5);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      double double3 = Double.max((double) doubleArray0[0], 489.2785385);
      Double double4 = new Double((double) doubleArray0[0]);
      doubleArray0[3] = double4;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapDivide((-1555.51));
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector2.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      double double5 = eigenDecompositionImpl0.getDeterminant();
      try { 
        eigenDecompositionImpl0.getImagEigenvalue((-202));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -202
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 1210.2128621178233;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 350.9;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-735.451003421);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = openMapRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1.0));
      Object object0 = new Object();
      boolean boolean0 = openMapRealVector1.equals(object0);
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double double0 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (-2.7028);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-2.7028);
      doubleArray2[1] = (-2.7028);
      doubleArray2[2] = (-2.7028);
      doubleArray2[3] = 2.0;
      doubleArray2[4] = (-2.7028);
      doubleArray0[1] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.copy();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1082.8257161151435);
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1210.2128621178233;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 350.9;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-735.451003421);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = openMapRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1.0));
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(4, 4);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      String string0 = openMapRealMatrix0.toString();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, 1.0);
      OpenMapRealMatrix openMapRealMatrix2 = openMapRealMatrix1.add(openMapRealMatrix0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      OpenMapRealMatrix openMapRealMatrix3 = openMapRealMatrix0.add(openMapRealMatrix1);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      double[] doubleArray0 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      int int0 = 5;
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      double double0 = openMapRealMatrix0.walkInOptimizedOrder((RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor0);
      try { 
        eigenDecompositionImpl0.getEigenvector(5);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 3016.332;
      doubleArray0[2] = (-982.054285175222);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2.0);
      ArrayRealVector arrayRealVector2 = arrayRealVector1.subtract(arrayRealVector0);
      int int0 = 0;
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(46);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1790;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1790, 1790);
      double double0 = (-117.40747611);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-117.40747611));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3588.7439448229684;
      doubleArray0[1] = (-568.4179655534801);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1863.2);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1401.4);
      } catch(RuntimeException e) {
         //
         // a 4x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2355.6);
      doubleArray1[1] = 2.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 715.0;
      doubleArray1[4] = (-1.0);
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, true);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x5 matrix
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.25;
      doubleArray0[1] = 2425.89711681371;
      doubleArray0[2] = (-3034.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.9999999999999998;
      doubleArray0[5] = (-391.675);
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.9999999999999998;
      doubleArray1[1] = 2425.89711681371;
      doubleArray1[2] = (-3034.0);
      doubleArray1[3] = 0.9999999999999998;
      doubleArray1[4] = (-3034.0);
      doubleArray1[5] = (-3034.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1351.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 235.2199972873731);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-762.8181666265433));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, Double.POSITIVE_INFINITY);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1865.440141;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4257.0887798);
      doubleArray0[3] = (-3351.5012655941);
      doubleArray0[4] = (-2801.40171931771);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-1.0));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1675.85;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1675.85;
      doubleArray0[1] = doubleArray2;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(1675.85);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      double double0 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-3491.6426313445);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1790, 1790);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-117.40747611));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1778.1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.0E-12);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, Double.POSITIVE_INFINITY);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-43.51243));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.25;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.9999999999999998;
      doubleArray0[5] = (-391.675);
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.9999999999999998;
      doubleArray1[1] = 2425.89711681371;
      doubleArray1[3] = 0.9999999999999998;
      doubleArray1[4] = (-3034.0);
      doubleArray1[5] = (-3034.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1351.0);
      int int0 = (-376);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      try { 
        eigenDecompositionImpl0.getEigenvector((-376));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -376
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 1037.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4334.083228);
      doubleArray0[2] = (-3628.051152984055);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 484.0;
      doubleArray0[5] = (-1566.7333411888353);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1555.51));
      doubleArray0[0] = double0;
      Double double1 = new Double(0.5);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      double double3 = Double.max((double) doubleArray0[0], 489.2785385);
      Double double4 = new Double((double) doubleArray0[0]);
      doubleArray0[3] = double4;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapDivide((-1555.51));
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector2.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-0.7781367743526628));
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      double double5 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1210.2128621178233;
      doubleArray0[3] = 350.9;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-735.451003421);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = openMapRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 14.411206974247868);
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }
}
