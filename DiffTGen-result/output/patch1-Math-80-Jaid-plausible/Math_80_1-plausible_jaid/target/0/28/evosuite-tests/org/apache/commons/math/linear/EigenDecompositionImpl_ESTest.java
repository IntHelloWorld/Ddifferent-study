/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 00:46:15 GMT 2020
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(52, 52);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      double double0 = new Integer(52);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1.0E-12);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapRintToSelf();
      double double1 = eigenDecompositionImpl0.getDeterminant();
      double double2 = eigenDecompositionImpl0.getRealEigenvalue(3);
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(52, 52);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      double double0 = openMapRealMatrix0.getFrobeniusNorm();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1.0E-12);
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector((-701291562));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(52, 52);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.copy();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1.0E-12);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(52);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1539.723022674);
      doubleArray0[2] = (-3078.406582663);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 717.8562;
      doubleArray0[5] = 1998.132084319;
      doubleArray0[6] = 1.1102230246251565E-14;
      doubleArray0[7] = 1330.0102792;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, true);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct(doubleArray0);
      RealVector realVector0 = arrayRealVector1.mapExp();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3078.406582663));
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      RealVector realVector1 = arrayRealVector1.mapFloor();
      RealVector realVector2 = arrayRealVector2.mapExp();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      arrayRealVector2.set(0.0);
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
      Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      double double1 = eigenDecompositionImpl0.getDeterminant();
      double double2 = eigenDecompositionImpl0.getImagEigenvalue(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(52, 52);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      double double0 = openMapRealMatrix0.getFrobeniusNorm();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1.0E-12);
      double double1 = eigenDecompositionImpl0.getDeterminant();
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1539.723022674);
      doubleArray0[2] = (-3078.406582663);
      doubleArray0[3] = (-1539.723022674);
      doubleArray0[4] = 717.8562;
      doubleArray0[5] = 1998.132084319;
      doubleArray0[6] = 1.1102230246251565E-14;
      doubleArray0[7] = 1330.0102792;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, true);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct(doubleArray0);
      RealVector realVector0 = arrayRealVector1.mapExp();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3078.406582663));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealVector realVector1 = arrayRealVector1.mapFloor();
      arrayRealVector2.set(0.0);
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getD();
      ArrayRealVector arrayRealVector3 = arrayRealVector0.ebeMultiply(arrayRealVector1);
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getV();
      double double1 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1539.723022674);
      doubleArray0[2] = (-3078.406582663);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 717.8562;
      doubleArray0[6] = 1.1102230246251565E-14;
      doubleArray0[7] = 1330.0102792;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, true);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct(doubleArray0);
      RealVector realVector0 = arrayRealVector1.mapExp();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3078.406582663));
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3201.0);
      doubleArray0[1] = 1396.0032182537045;
      doubleArray0[2] = 1.232595164407831E-28;
      doubleArray0[3] = (-1065.912544);
      doubleArray0[4] = 2.776732318978752E-38;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1065.912544));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getVT();
      RealVector realVector0 = arrayRealVector1.mapLog();
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix5 = eigenDecompositionImpl0.getD();
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix6 = eigenDecompositionImpl0.getVT();
      int int0 = 840602013;
      try { 
        eigenDecompositionImpl0.getEigenvector(840602013);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 840602013
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(52, 52);
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0E-12;
      doubleArray1[1] = (double) 52;
      doubleArray0[0] = doubleArray1;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 1.150155837393629E-15);
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x2 matrix
         //
         verifyException("org.apache.commons.math.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1539.723022674);
      doubleArray0[2] = (-3078.406582663);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 717.8562;
      doubleArray0[5] = 1998.132084319;
      doubleArray0[6] = 1.1102230246251565E-14;
      doubleArray0[7] = 1330.0102792;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, true);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct(doubleArray0);
      RealVector realVector0 = arrayRealVector1.mapExp();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3078.406582663));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      try { 
        eigenDecompositionImpl0.getEigenvector((-1234));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1234
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1539.723022674);
      doubleArray0[2] = (-3078.406582663);
      doubleArray0[3] = (-2.6909981391289435);
      doubleArray0[4] = 717.8562;
      doubleArray0[5] = 1998.132084319;
      doubleArray0[6] = 1.1102230246251565E-14;
      doubleArray0[7] = 1330.0102792;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, true);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct(doubleArray0);
      ArrayRealVector arrayRealVector3 = (ArrayRealVector)arrayRealVector1.mapExp();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3078.406582663));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      ArrayRealVector arrayRealVector4 = (ArrayRealVector)arrayRealVector1.mapFloor();
      ArrayRealVector arrayRealVector5 = new ArrayRealVector(arrayRealVector4, arrayRealVector3);
      ArrayRealVector arrayRealVector6 = (ArrayRealVector)arrayRealVector2.mapExp();
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      arrayRealVector2.set(0.0);
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      Integer integer0 = new Integer(0);
      Array2DRowRealMatrix array2DRowRealMatrix3 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      Array2DRowRealMatrix array2DRowRealMatrix4 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      double double0 = eigenDecompositionImpl0.getDeterminant();
      Array2DRowRealMatrix array2DRowRealMatrix5 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1539.723022674);
      doubleArray0[2] = (-3078.406582663);
      doubleArray0[4] = 717.8562;
      doubleArray0[5] = 1998.132084319;
      doubleArray0[6] = 1.1102230246251565E-14;
      doubleArray0[7] = 1330.0102792;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      ArrayRealVector arrayRealVector2 = (ArrayRealVector)arrayRealVector1.mapExp();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3078.406582663));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      ArrayRealVector arrayRealVector3 = (ArrayRealVector)arrayRealVector1.mapFloor();
      ArrayRealVector arrayRealVector4 = new ArrayRealVector(arrayRealVector3, arrayRealVector2);
      ArrayRealVector arrayRealVector5 = (ArrayRealVector)arrayRealVector0.mapExp();
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      arrayRealVector1.set(0.0);
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      Integer integer0 = new Integer(0);
      Array2DRowRealMatrix array2DRowRealMatrix3 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      Array2DRowRealMatrix array2DRowRealMatrix4 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      double double0 = eigenDecompositionImpl0.getDeterminant();
      Array2DRowRealMatrix array2DRowRealMatrix5 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1539.723022674);
      doubleArray0[2] = (-3078.406582663);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 717.8562;
      doubleArray0[5] = 1998.132084319;
      doubleArray0[6] = 1.1102230246251565E-14;
      doubleArray0[7] = 1330.0102792;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, true);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct(doubleArray0);
      RealVector realVector0 = arrayRealVector1.mapExp();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3078.406582663));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealVector realVector1 = arrayRealVector2.mapInv();
      RealVector realVector2 = arrayRealVector1.mapFloor();
      RealVector realVector3 = arrayRealVector2.mapExp();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      arrayRealVector2.set(0.0);
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getVT();
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix5 = eigenDecompositionImpl0.getV();
      double double1 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix6 = eigenDecompositionImpl0.getVT();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1539.723022674);
      doubleArray0[2] = (-3078.406582663);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 717.8562;
      doubleArray0[5] = 1998.132084319;
      doubleArray0[6] = 1.1102230246251565E-14;
      doubleArray0[7] = 1330.0102792;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, true);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct(doubleArray0);
      RealVector realVector0 = arrayRealVector1.mapExp();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3078.406582663));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      RealVector realVector1 = arrayRealVector1.mapFloor();
      RealVector realVector2 = arrayRealVector2.mapExp();
      arrayRealVector2.set(0.0);
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getVT();
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix5 = eigenDecompositionImpl0.getV();
      double double1 = eigenDecompositionImpl0.getDeterminant();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1539.723022674);
      doubleArray0[2] = (-3078.406582663);
      doubleArray0[3] = (-2.6909981391289435);
      doubleArray0[4] = 717.8562;
      doubleArray0[5] = 1998.132084319;
      doubleArray0[6] = 1.1102230246251565E-14;
      doubleArray0[7] = 1330.0102792;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, true);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct(doubleArray0);
      RealVector realVector0 = arrayRealVector1.mapExp();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3078.406582663));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealVector realVector1 = arrayRealVector1.mapFloor();
      RealVector realVector2 = arrayRealVector1.append(doubleArray0);
      RealVector realVector3 = arrayRealVector2.mapExp();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      arrayRealVector2.set(0.0);
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getVT();
      double double0 = new Integer(0);
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix5 = eigenDecompositionImpl0.getV();
      double double1 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(2346, 2346);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 2346);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2.2250738585072014E-308;
      doubleArray1[1] = (-971.0845154);
      doubleArray1[2] = 3803.8430903408;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 3803.8430903408;
      doubleArray2[1] = 2.2250738585072014E-308;
      doubleArray2[2] = (-971.0845154);
      doubleArray0[1] = doubleArray2;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, false);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-868.0857934521765));
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1539.723022674);
      doubleArray0[2] = (-3078.406582663);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 717.8562;
      doubleArray0[5] = 1998.132084319;
      doubleArray0[6] = 1.1102230246251565E-14;
      doubleArray0[7] = 1330.0102792;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, true);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct(doubleArray0);
      RealVector realVector0 = arrayRealVector1.mapExp();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3078.406582663));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealVector realVector1 = arrayRealVector1.mapFloor();
      RealVector realVector2 = arrayRealVector2.mapExp();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      arrayRealVector2.set(0.0);
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getVT();
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix5 = eigenDecompositionImpl0.getV();
      double double1 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (-2924.929013573052);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3.0;
      doubleArray0[5] = 0.9999999999999998;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // a 6x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-521.05);
      doubleArray0[1] = 1696.5646;
      doubleArray0[2] = 2264.46391;
      doubleArray0[3] = 1839.354295343946;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-521.05));
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(727);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 727
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 64.0;
      doubleArray0[2] = (-3578.5681);
      doubleArray0[3] = 905.946;
      doubleArray0[4] = 1417.3651032;
      doubleArray0[5] = 537.0;
      doubleArray0[6] = (-3041.335);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1095.0533);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, 1.5);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 7;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(7, 7);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 7);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      double double0 = array2DRowRealMatrix0.getNorm();
      try { 
        array2DRowRealMatrix0.setRowMatrix(1219, realMatrix0);
      } catch(RuntimeException e) {
         //
         // row index 1,219 out of allowed range [0, 6]
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 2071.97);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1885.1704625302473);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 699.59872365;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, doubleArray0, (-1442.193316156));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 408.424769332;
      doubleArray0[1] = 1166.0;
      doubleArray0[2] = 0.25;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 6113.540948861898);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(52, 52);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1.0E-12);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1539.723022674);
      doubleArray0[2] = (-3078.406582663);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 717.8562;
      doubleArray0[5] = 1997.0746088938238;
      doubleArray0[6] = 1.1102230246251565E-14;
      doubleArray0[7] = 1330.0102792;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, true);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct(doubleArray0);
      RealVector realVector0 = arrayRealVector1.mapExp();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3078.406582663));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      RealVector realVector1 = arrayRealVector1.mapFloor();
      RealVector realVector2 = arrayRealVector2.mapExp();
      arrayRealVector2.set(0.0);
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
      RealVector realVector3 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getV();
      double double1 = eigenDecompositionImpl0.getDeterminant();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1539.723022674);
      doubleArray0[2] = (-3078.406582663);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 717.8562;
      doubleArray0[5] = 1998.132084319;
      doubleArray0[6] = 717.8562;
      doubleArray0[7] = 1330.0102792;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0);
      ArrayRealVector arrayRealVector2 = new ArrayRealVector(arrayRealVector1, true);
      RealMatrix realMatrix0 = arrayRealVector2.outerProduct(doubleArray0);
      RealVector realVector0 = arrayRealVector1.mapExp();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3078.406582663));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealVector realVector1 = arrayRealVector1.mapFloor();
      RealVector realVector2 = arrayRealVector2.mapExp();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      arrayRealVector2.set(0.0);
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getVT();
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix5 = eigenDecompositionImpl0.getV();
      double double1 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = (-3306);
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix((-3306), (-3306));
      } catch(IllegalArgumentException e) {
         //
         // invalid row dimension -3,306 (must be positive)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-41.66012059624);
      doubleArray0[2] = Double.NaN;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 2684.47478;
      doubleArray0[2] = (-1785.756245320401);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1402.289662763;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-310.9516128289702));
      // Undeclared exception!
      try { 
        openMapRealVector0.outerproduct((OpenMapRealVector) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }
}
