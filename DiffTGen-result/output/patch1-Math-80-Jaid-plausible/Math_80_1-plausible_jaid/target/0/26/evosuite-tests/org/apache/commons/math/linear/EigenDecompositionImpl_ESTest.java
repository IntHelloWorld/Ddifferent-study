/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 00:46:08 GMT 2020
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3888.789);
      doubleArray0[1] = (-2122.904680201117);
      doubleArray0[2] = (-2589.23159531);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-3888.789);
      doubleArray1[1] = (-2589.23159531);
      doubleArray1[2] = (-2122.904680201117);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      int int0 = 0;
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver2 = eigenDecompositionImpl0.getSolver();
      RealVector realVector1 = eigenDecompositionImpl0.getEigenvector(0);
      RealVector realVector2 = eigenDecompositionImpl0.getEigenvector(0);
      DecompositionSolver decompositionSolver3 = eigenDecompositionImpl0.getSolver();
      double double1 = eigenDecompositionImpl0.getRealEigenvalue(0);
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix5 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix6 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver4 = eigenDecompositionImpl0.getSolver();
      try { 
        eigenDecompositionImpl0.getEigenvector(720);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 720
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 54.48441290264729;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2185.1);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 54.48441290264729;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(2921);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2921
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3888.789);
      doubleArray0[1] = (-2122.904680201117);
      doubleArray0[3] = 1007.8141;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1007.8141;
      doubleArray1[2] = (-2122.904680201117);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY);
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      int[] intArray0 = new int[5];
      intArray0[0] = 3132;
      intArray0[1] = 3132;
      intArray0[2] = 329;
      intArray0[3] = (-444);
      intArray0[4] = 3931;
      double double0 = eigenDecompositionImpl0.getDeterminant();
      int int0 = 0;
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      array2DRowRealMatrix0.setColumn(0, doubleArray0);
      double double1 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      double double2 = eigenDecompositionImpl0.getDeterminant();
      try { 
        array2DRowRealMatrix0.setEntry(3157, 3157, 0.0);
      } catch(RuntimeException e) {
         //
         // no entry at indices (3,157, 3,157) in a 1x1 matrix
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3888.789);
      doubleArray0[1] = (-2122.904680201117);
      doubleArray0[2] = (-2589.23159531);
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = (-2589.23159531);
      doubleArray1[2] = (-2122.904680201117);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2589.23159531));
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      int int0 = 0;
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver2 = eigenDecompositionImpl0.getSolver();
      int int1 = 3284;
      try { 
        eigenDecompositionImpl0.getEigenvector(3284);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3284
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3888.789);
      doubleArray0[1] = (-3888.789);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-3888.789);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-3888.789);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      int int0 = 0;
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver2 = eigenDecompositionImpl0.getSolver();
      int int1 = 3284;
      try { 
        eigenDecompositionImpl0.getEigenvector(3284);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3284
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 3.8071448216214776E-8);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3888.789);
      doubleArray0[1] = (-3888.789);
      doubleArray0[2] = (-2589.23159531);
      doubleArray0[3] = 1007.8141;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1007.8141;
      doubleArray1[2] = (-3888.789);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      int int0 = 0;
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver2 = eigenDecompositionImpl0.getSolver();
      int int1 = 3284;
      try { 
        eigenDecompositionImpl0.getEigenvector(3284);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3284
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3888.789);
      doubleArray0[1] = (-2122.904680201117);
      doubleArray0[2] = (-2122.904680201117);
      doubleArray0[3] = 1007.8141;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1007.8141;
      doubleArray1[2] = (-2122.904680201117);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver2 = eigenDecompositionImpl0.getSolver();
      int int0 = 3284;
      try { 
        eigenDecompositionImpl0.getEigenvector(3284);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3284
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 3.8071448216214776E-8);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3888.789);
      doubleArray0[1] = (-2122.904680201117);
      doubleArray0[2] = (-2589.23159531);
      doubleArray0[3] = 1007.8141;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      int int0 = 0;
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver2 = eigenDecompositionImpl0.getSolver();
      int int1 = 3284;
      try { 
        eigenDecompositionImpl0.getEigenvector(3284);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3284
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3888.789);
      doubleArray0[1] = (-2122.904680201117);
      doubleArray0[2] = (-2589.23159531);
      doubleArray0[3] = 1007.8141;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2589.23159531);
      doubleArray1[1] = 1007.8141;
      doubleArray1[2] = (-2122.904680201117);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      int int0 = 0;
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      int int1 = 3284;
      try { 
        eigenDecompositionImpl0.getEigenvector(3284);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3284
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3888.789);
      doubleArray0[1] = (-2122.904680201117);
      doubleArray0[2] = (-2589.23159531);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-3888.789);
      doubleArray1[1] = (-2589.23159531);
      doubleArray1[2] = (-2122.904680201117);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      int int0 = 0;
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver2 = eigenDecompositionImpl0.getSolver();
      int int1 = 3284;
      try { 
        eigenDecompositionImpl0.getEigenvector(3284);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3284
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 3.8071448216214776E-8);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-1.0));
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1822.4553928419);
      doubleArray0[2] = 3.0;
      doubleArray0[3] = 1100.3541;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 3.0;
      doubleArray1[1] = 1100.3541;
      doubleArray1[2] = 1100.3541;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1100.3541);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      try { 
        eigenDecompositionImpl0.getEigenvector((-3370));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3370
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3888.789);
      doubleArray0[1] = (-2122.904680201117);
      doubleArray0[2] = (-2589.23159531);
      doubleArray0[3] = 1007.8141;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1007.8141;
      doubleArray1[2] = (-2122.904680201117);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      int int0 = 0;
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver2 = eigenDecompositionImpl0.getSolver();
      int int1 = 3284;
      try { 
        eigenDecompositionImpl0.getEigenvector(3284);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3284
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      int[] intArray0 = new int[5];
      intArray0[0] = 3132;
      intArray0[1] = 0;
      intArray0[2] = 329;
      intArray0[3] = (-444);
      intArray0[4] = 3937;
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      try { 
        array2DRowRealMatrix0.copySubMatrix(intArray0, intArray0, doubleArray1);
      } catch(RuntimeException e) {
         //
         // row index 3,132 out of allowed range [0, 0]
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2173, 2173);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 6;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(6, 298);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 6);
      } catch(RuntimeException e) {
         //
         // row index 6 out of allowed range [0, 5]
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 342.51867809570734;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = 1064.76;
      doubleArray0[3] = 1.01;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3619.367335);
      doubleArray0[7] = (-567.6233372759);
      doubleArray0[8] = 1766.600612936791;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-1601.276489));
      } catch(RuntimeException e) {
         //
         // a 9x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 2171.0219336871);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3007.84098824;
      doubleArray0[1] = (-579.059636);
      doubleArray0[2] = 1.05;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-823.6589739);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.5;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, doubleArray0, 1700.0280083266646);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.333;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1006.5754229693);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 1.1102230246251565E-16);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);
      try { 
        openMapRealVector1.getEntry(0);
      } catch(RuntimeException e) {
         //
         // index 0 out of allowed range [0, -1]
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1546.9261724;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1289.23614060699);
      doubleArray0[6] = 2409.615722986315;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1665.6503369530644);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 97.3);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 2239.68411419972;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0E-12;
      doubleArray0[6] = (-1638.5780466016506);
      doubleArray0[7] = 6.283185307179586;
      doubleArray0[8] = (-694.1292531707);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 6.283185307179586);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1452.28905));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix();
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 836.1625514839384);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      int int0 = Integer.MAX_VALUE;
      OpenMapRealVector openMapRealVector1 = null;
      try {
        openMapRealVector1 = new OpenMapRealVector((OpenMapRealVector) null, Integer.MAX_VALUE);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-4237.001702462);
      doubleArray0[1] = (-522.9218606495352);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (-686.62144849);
      doubleArray0[8] = (-579.30154);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }
}
