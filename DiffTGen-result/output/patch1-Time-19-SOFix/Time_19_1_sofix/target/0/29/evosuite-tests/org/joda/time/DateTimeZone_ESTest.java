/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 07:10:51 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.minusYears(637);
      DateTime dateTime2 = dateTime0.withTimeAtStartOfDay();
      int int0 = 23118750;
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(1, 23118750);
      } catch(IllegalArgumentException e) {
         //
         // Value 23118750 for monthOfYear must not be larger than 12
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-2234);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2234));
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths((-2234));
      DateTime dateTime0 = dateMidnight1.toDateTime();
      // Undeclared exception!
      try { 
        dateTime0.withDayOfWeek((-2234));
      } catch(IllegalArgumentException e) {
         //
         // Value -2234 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2644);
      long long0 = dateTimeZone0.UTC.convertLocalToUTC((long) 2644, true, (long) 2644);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      long long1 = dateTimeZone0.previousTransition(0L);
      Locale locale0 = Locale.forLanguageTag("DS;pIDJ2g");
      String string0 = dateTimeZone0.UTC.getShortName(0L, locale0);
      DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone((TimeZone) null);
      Object object0 = dateTimeZone1.UTC.writeReplace();
      String string1 = dateTimeZone1.UTC.getShortName(0L, locale0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      long long2 = dateTimeZone1.UTC.previousTransition(2644);
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      String string2 = dateTimeZone0.getShortName(0L);
      DateTimeZone.setDefault(dateTimeZone0);
      long long3 = dateTimeZone1.previousTransition(10L);
      DateTimeZone dateTimeZone3 = DateTimeZone.forOffsetHours(572);
      TimeZone timeZone1 = dateTimeZone3.toTimeZone();
      long long4 = dateTimeZone3.getMillisKeepLocal(dateTimeZone2, 2329L);
      long long5 = dateTimeZone0.previousTransition(896L);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      int int0 = dateTimeZone0.hashCode();
      DateTimeUtils.setCurrentMillisSystem();
      Days days0 = Days.SEVEN;
      Duration duration0 = days0.toStandardDuration();
      Period period0 = new Period((ReadableInstant) null, duration0);
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) period0, (-939L), (-4176L));
      String string0 = dateTimeZone0.getName((-4176L), (Locale) null);
      int int1 = dateTimeZone0.hashCode();
      long long0 = dateTimeZone0.convertLocalToUTC((long) 1, false, (long) 1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      int int0 = dateTimeZone0.UTC.getStandardOffset(2189L);
      int int1 = dateTimeZone0.getOffset(2189L);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      Provider provider0 = DateTimeZone.getProvider();
      DateTimeZone.setProvider(provider0);
      TimeZone timeZone0 = dateTimeZone1.toTimeZone();
      long long0 = dateTimeZone1.convertLocalToUTC(918518400000L, true, 1008L);
      int int2 = dateTimeZone0.getStandardOffset(918518400000L);
      DateTimeZone.setProvider(provider0);
      boolean boolean0 = dateTimeZone0.isStandardOffset((-3804L));
      boolean boolean1 = dateTimeZone1.equals(provider0);
      Provider provider1 = DateTimeZone.getProvider();
      DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetHours(27);
      long long1 = dateTimeZone2.previousTransition((-931L));
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(83);
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      boolean boolean2 = dateTimeZone2.UTC.equals(object0);
      int int3 = dateTimeZone1.getStandardOffset(0L);
      String string0 = dateTimeZone2.getNameKey(0L);
      long long2 = dateTimeZone1.convertLocalToUTC(1008L, true, 918489600000L);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("%0-", (-3804L));
      } catch(IllegalArgumentException e) {
         //
         // weight=-3804.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
      Provider provider0 = DateTimeZone.getProvider();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(40);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, 0L, 4482);
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 4482
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      int int0 = 1000;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      int int1 = 110;
      DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis(110);
      try { 
        DateTimeZone.forOffsetHoursMinutes(1000, 1000);
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 1000
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "UTC", 0, 20, 0, 20, (-1142), 0, (-1257), (-1257));
      DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(simpleTimeZone0);
      DateTimeZone dateTimeZone3 = DateTimeZone.getDefault();
      SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone(1, "?P\"\"7]Nz$4zKPDnBOX");
      DateTimeZone dateTimeZone4 = DateTimeZone.forTimeZone(simpleTimeZone1);
      Locale locale0 = new Locale("", "?P\"\"7]Nz$4zKPDnBOX");
      long long0 = dateTimeZone0.previousTransition(20);
      Locale locale1 = Locale.CANADA;
      String string0 = locale0.getDisplayScript();
      String string1 = locale0.getDisplayLanguage(locale1);
      String string2 = dateTimeZone0.getName(2558L, locale0);
      String string3 = dateTimeZone3.getNameKey(2336L);
      String string4 = dateTimeZone1.getName(0L, locale0);
      boolean boolean0 = dateTimeZone0.isFixed();
      String string5 = dateTimeZone3.getShortName(201L, locale0);
      DateTimeZone dateTimeZone5 = DateTimeZone.forOffsetMillis((-3564));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      int int0 = fixedDateTimeZone0.getOffsetFromLocal(2590L);
      int int1 = fixedDateTimeZone0.hashCode();
      int int2 = fixedDateTimeZone0.UTC.getOffset(0L);
      long long0 = fixedDateTimeZone0.previousTransition(1404L);
      long long1 = fixedDateTimeZone0.UTC.convertUTCToLocal(0L);
      Locale locale0 = Locale.CANADA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      String string0 = ".XOqz!}x?M;";
      // Undeclared exception!
      try { 
        Charset.forName(".XOqz!}x?M;");
      } catch(IllegalCharsetNameException e) {
         //
         // .XOqz!}x?M;
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(572);
      long long0 = dateTimeZone0.adjustOffset((-2571L), false);
      long long1 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 4L);
      int int0 = dateTimeZone0.hashCode();
      Locale locale0 = Locale.CANADA;
      String string0 = dateTimeZone0.getName(3930L, locale0);
      DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis(572);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>(572);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      ReadableInstant readableInstant0 = null;
      int int1 = dateTimeZone1.getOffset((ReadableInstant) null);
      Provider provider0 = DateTimeZone.getProvider();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode1);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(2059200000, "+07:00", 572, 0, 572, (-1946), (-435), 1, 1070, 1281, (-1946), 0, (-3741));
      } catch(IllegalArgumentException e) {
         //
         // Illegal end time -1946
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      String string0 = fixedDateTimeZone0.getName(0L);
      long long0 = 3L;
      Locale locale0 = null;
      String string1 = fixedDateTimeZone0.UTC.getShortName(3L, (Locale) null);
      long long1 = fixedDateTimeZone0.convertUTCToLocal(2629746000L);
      try { 
        DateTimeZone.forOffsetHoursMinutes(1829, 1829);
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 1829
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      boolean boolean0 = dateTimeZone0.UTC.isStandardOffset(100000000000L);
      String string0 = dateTimeZone0.getName(379L);
      DateTimeUtils.setCurrentMillisOffset(0L);
      long long0 = dateTimeZone0.UTC.nextTransition(0L);
      String string1 = dateTimeZone0.getShortName((long) 0);
      boolean boolean1 = dateTimeZone0.isFixed();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider("+00:00", classLoader0);
      } catch(Throwable e) {
         //
         // Resource not found: \"+00:00/ZoneInfoMap\" ClassLoader: sun.misc.Launcher$AppClassLoader@0000000002
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(572);
      long long0 = dateTimeZone0.adjustOffset(0L, false);
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Locale locale0 = Locale.PRC;
      String string0 = dateTimeZone0.getShortName((long) 1, locale0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);
      DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis(3344);
      String string1 = dateTimeZone1.getShortName((long) 1, locale0);
      int int0 = dateTimeZone0.getOffset((long) 1);
      long long0 = dateTimeZone0.previousTransition((-75L));
      String string2 = dateTimeZone0.UTC.getNameKey((-75L));
      String string3 = dateTimeZone0.getName(1000000000L, locale0);
      long long1 = dateTimeZone0.convertLocalToUTC((long) 1, false, 1000000000L);
      DateTimeZone dateTimeZone3 = DateTimeZone.forOffsetHours(0);
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      try { 
        DateTimeZone.forOffsetHoursMinutes(3012, 3012);
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 3012
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      String string0 = dateTimeZone0.getNameKey(2592000000L);
      DateTimeUtils.setCurrentMillisSystem();
      long long0 = dateTimeZone0.adjustOffset(2592000000L, true);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("7");
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '7' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = (-2426);
      int int1 = 2;
      try { 
        DateTimeZone.forOffsetHoursMinutes((-2426), 2);
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(1);
      int int0 = fixedDateTimeZone0.getStandardOffset(1);
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      int int1 = fixedDateTimeZone0.UTC.getOffsetFromLocal(1);
      int int2 = fixedDateTimeZone0.getOffsetFromLocal(1);
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(45);
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) islamicChronology0);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0);
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadablePeriod) mutablePeriod0);
      Minutes minutes0 = Minutes.MAX_VALUE;
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      DateMidnight dateMidnight2 = dateMidnight1.withFieldAdded(durationFieldType0, 994);
      DateTime dateTime0 = dateMidnight2.toDateTime((Chronology) null);
      int int3 = fixedDateTimeZone0.getOffset((ReadableInstant) dateTime0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = (-940);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-940));
      long long0 = dateTimeZone0.UTC.convertUTCToLocal((-940));
      long long1 = (-1846L);
      long long2 = dateTimeZone0.UTC.convertLocalToUTC(9223372036854775807L, true, (-1846L));
      String string0 = dateTimeZone0.UTC.getShortName((-2742L));
      long long3 = dateTimeZone0.nextTransition((-940));
      long long4 = dateTimeZone0.adjustOffset(9223372036854775807L, true);
      boolean boolean0 = dateTimeZone0.UTC.equals("+00:00");
      int int1 = 946;
      try { 
        DateTimeZone.forOffsetHoursMinutes((-940), 946);
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 946
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1909);
      long long0 = dateTimeZone0.convertLocalToUTC((long) 1909, true, (long) 1909);
      String string0 = dateTimeZone0.toString();
      String string1 = dateTimeZone0.getNameKey(1909);
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      Locale locale0 = Locale.GERMAN;
      String string2 = dateTimeZone0.getShortName(0L, locale0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      Set<String> set0 = uTCProvider0.getAvailableIDs();
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("^)Ks{^K9Q");
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      ZoneId zoneId1 = zoneId0.normalized();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.FRENCH;
      Object object0 = locale0.clone();
      String string0 = locale0.getScript();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      String string1 = timeZone0.getDisplayName(locale0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      Set<Character> set0 = locale0.getExtensionKeys();
      // Undeclared exception!
      try { 
        DateTimeZone.forID("Heure de Greenwich");
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'Heure de Greenwich' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID("America/St_Johns");
      long long0 = (-200L);
      Locale locale0 = Locale.GERMAN;
      ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) cachedDateTimeZone0);
      int int0 = 4560;
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(1397);
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfYear(4560);
      } catch(IllegalArgumentException e) {
         //
         // Value 4560 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(92);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHoursMinutes(59, 9);
      DateTimeZone.setDefault(dateTimeZone1);
      long long0 = dateTimeZone1.UTC.adjustOffset(59, true);
      long long1 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 9);
      Locale locale0 = Locale.JAPAN;
      String string0 = dateTimeZone1.getName(0L, locale0);
      boolean boolean0 = dateTimeZone0.isStandardOffset(0L);
      // Undeclared exception!
      try { 
        dateTimeZone1.convertUTCToLocal(9223372036854775807L);
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      // Undeclared exception!
      try { 
        DateTimeZone.forID(",L*J2)PtZtS+");
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id ',L*J2)PtZtS+' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      long long0 = fixedDateTimeZone0.adjustOffset(0L, true);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID((String) null);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(0L);
      Object object0 = ((DateTimeZone)cachedDateTimeZone0).writeReplace();
      int int1 = (-1040);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((-886), 25200000, 25200000, 25200000, 572, (-886), (-1040), ethiopicChronology0);
      } catch(IllegalArgumentException e) {
         //
         // Value 25200000 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.convertLocalToUTC((-2039L), false, 0L);
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("UTC");
      boolean boolean0 = dateTimeZone1.UTC.equals(set0);
      long long1 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (-397L));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Minutes minutes0 = Minutes.THREE;
      Days days0 = minutes0.toStandardDays();
      LocalDate localDate0 = new LocalDate();
      Days days1 = days0.minus(689);
      LocalDate localDate1 = localDate0.minus(minutes0);
      Hours hours0 = Hours.hoursBetween((ReadablePartial) localDate1, (ReadablePartial) localDate1);
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      int int0 = days0.get(durationFieldType0);
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) days0, 0L, (-3632L));
      long long0 = dateTimeZone0.convertLocalToUTC((long) 1, true);
      long long1 = dateTimeZone0.convertUTCToLocal((-3632L));
      long long2 = dateTimeZone0.convertLocalToUTC(0L, false);
      boolean boolean0 = dateTimeZone0.isStandardOffset((-3632L));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      long long0 = dateTimeZone0.convertLocalToUTC((long) 0, false, 1L);
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      long long1 = dateTimeZone0.convertUTCToLocal(0L);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      Object object1 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeUtils.setCurrentMillisOffset(705L);
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("k\rsmzJZo8z");
      long long0 = fixedDateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, 0L);
      int int0 = fixedDateTimeZone0.getOffsetFromLocal(10L);
      String string0 = fixedDateTimeZone0.getNameKey((-732L));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(0);
      Locale locale0 = Locale.ITALIAN;
      int int1 = fixedDateTimeZone0.getStandardOffset(1L);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      Locale.LanguageRange locale_LanguageRange0 = linkedList1.pollFirst();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList2);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale locale1 = Locale.lookup(linkedList1, list1);
      Locale locale2 = new Locale("-");
      String string0 = locale2.getDisplayName();
      String string1 = locale0.getDisplayVariant(locale2);
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      DateTimeZone.setNameProvider(defaultNameProvider0);
      Locale locale3 = (Locale)locale0.clone();
      String string2 = fixedDateTimeZone0.getName(1L, locale0);
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTimeZone.setNameProvider((NameProvider) null);
      DateTimeUtils.setCurrentMillisSystem();
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider)DateTimeZone.getProvider();
      long long0 = cachedDateTimeZone0.previousTransition(0);
      boolean boolean0 = cachedDateTimeZone0.isFixed();
      // Undeclared exception!
      try { 
        cachedDateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 46);
      String string0 = dateTimeZone0.getName(0L);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      long long0 = dateTimeZone1.UTC.previousTransition(0L);
      TimeZone timeZone0 = dateTimeZone1.toTimeZone();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = (-2494);
      try { 
        DateTimeZone.forOffsetHours((-2494));
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(60);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeZone.setDefault(fixedDateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Chronology chronology0 = copticChronology0.withZone(dateTimeZone0);
      Locale locale0 = Locale.CHINA;
      String string0 = dateTimeZone0.UTC.getShortName((-262L), locale0);
      DateTime dateTime0 = new DateTime((-1508L), chronology0);
      int int0 = dateTimeZone0.UTC.getOffset((ReadableInstant) dateTime0);
      DateTimeUtils.setCurrentMillisSystem();
      int int1 = dateTimeZone0.hashCode();
      String string1 = dateTimeZone0.getShortName((long) 1);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(60);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(543);
      long long0 = dateTimeZone0.nextTransition(543);
      Locale locale0 = Locale.PRC;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale locale1 = Locale.lookup(linkedList0, linkedHashSet0);
      String string0 = dateTimeZone0.getName((long) 543, locale0);
      long long1 = dateTimeZone0.nextTransition(543L);
      Object object0 = locale0.clone();
      String string1 = dateTimeZone0.getShortName((long) 543, locale0);
      String string2 = dateTimeZone0.getShortName((-577L), locale0);
      String string3 = dateTimeZone0.getID();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1308);
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      Locale locale0 = Locale.ENGLISH;
      String string0 = defaultNameProvider0.getName(locale0, "Asia/Tokyo", "");
      String string1 = defaultNameProvider0.getShortName(locale0, "CST", "CST");
      DateTimeZone.setNameProvider(defaultNameProvider0);
      long long0 = dateTimeZone0.UTC.getMillisKeepLocal(dateTimeZone1, 1308);
      long long1 = dateTimeZone0.convertUTCToLocal(2139L);
      boolean boolean0 = dateTimeZone0.isStandardOffset(420L);
      TimeZone timeZone0 = dateTimeZone1.UTC.toTimeZone();
      long long2 = dateTimeZone0.previousTransition(2139L);
      DateTimeZone dateTimeZone2 = DateTimeZone.getDefault();
      String string2 = dateTimeZone0.getID();
      boolean boolean1 = dateTimeZone0.isFixed();
      String string3 = dateTimeZone2.getName(0L);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      long long0 = dateTimeZone0.nextTransition(0);
      int int0 = dateTimeZone0.getOffset((-6182L));
      String string0 = dateTimeZone0.getShortName((-1559L));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(292278990);
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
      long long0 = dateTimeZone0.UTC.previousTransition((-1840L));
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      long long1 = dateTimeZone0.convertLocalToUTC(4L, true);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, 0L, 2258);
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 2258
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      String string0 = dateTimeZone0.toString();
      String string1 = dateTimeZone0.getName(2243L);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      try { 
        DateTimeZone.forOffsetHoursMinutes(46, (-2646));
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -2646
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.nextTransition((-2122L));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 0;
      int int1 = (-2560);
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-2560));
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -2560
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 3457;
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, 3457);
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 3457
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Years years0 = Years.TWO;
      long long0 = julianChronology0.add((ReadablePeriod) years0, 1L, 1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      // Undeclared exception!
      try { 
        dateTimeZone1.convertUTCToLocal(9223372036854775807L);
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      String string0 = cachedDateTimeZone0.UTC.getShortName(1259L);
      String string1 = cachedDateTimeZone0.UTC.getNameKey(1259L);
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) cachedDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusDays((-813));
      boolean boolean0 = cachedDateTimeZone0.isLocalDateTimeGap(localDateTime1);
      String string2 = cachedDateTimeZone0.UTC.getNameKey((-139L));
      Object object0 = ((DateTimeZone)cachedDateTimeZone0).writeReplace();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(45, 45);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      // Undeclared exception!
      try { 
        MutableDateTime.parse("");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      boolean boolean0 = dateTimeZone0.equals(buddhistChronology0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours((-3186));
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-378));
      DateTimeZone.setDefault(dateTimeZone0);
      DateTimeUtils.setCurrentMillisSystem();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      UTCProvider uTCProvider0 = new UTCProvider();
      Set<String> set0 = uTCProvider0.getAvailableIDs();
      DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetHours((-378));
      DateTimeZone.setProvider(uTCProvider0);
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (-2660L));
      long long1 = dateTimeZone0.UTC.convertUTCToLocal(17L);
      int int0 = dateTimeZone0.getOffsetFromLocal((-378));
      long long2 = dateTimeZone1.previousTransition((-1360800000));
      long long3 = dateTimeZone0.convertLocalToUTC((long) (-1360800000), true, (-2660L));
      long long4 = dateTimeZone1.convertUTCToLocal(0L);
      String string0 = dateTimeZone1.getShortName(1690L);
      long long5 = dateTimeZone2.nextTransition((-1360800000));
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      String string1 = dateTimeZone2.getID();
      DateTimeZone.setDefault(dateTimeZone0);
      Provider provider0 = DateTimeZone.getProvider();
  }
}
