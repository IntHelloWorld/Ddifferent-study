/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 07:04:56 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URI;
import java.time.ZoneId;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2417));
      long long0 = dateTimeZone0.UTC.adjustOffset(9223372036854775807L, false);
      Locale locale0 = Locale.GERMAN;
      String string0 = dateTimeZone0.getShortName(9223372036854775807L, locale0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      long long1 = dateTimeZone0.convertLocalToUTC((long) (-2417), true);
      String string1 = dateTimeZone0.getName((long) (-2417));
      int int0 = 1260;
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1260);
      long long2 = dateTimeZone1.UTC.previousTransition(910L);
      long long3 = dateTimeZone1.adjustOffset((-26880L), true);
      long long4 = dateTimeZone1.UTC.getMillisKeepLocal(dateTimeZone0, (-1292L));
      String string2 = dateTimeZone0.getName(716L, locale0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("C87");
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'C87' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTC");
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "-";
      // Undeclared exception!
      try { 
        DateTimeZone.forID("-");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(154800000, "PST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      int int0 = dateTimeZone0.UTC.getStandardOffset((-32326142L));
      String string0 = dateTimeZone0.getName(1493L);
      int int1 = dateTimeZone0.getOffsetFromLocal(1493L);
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.ENGLISH;
      String string1 = locale0.getDisplayName(locale1);
      String[] stringArray0 = Locale.getISOCountries();
      String string2 = dateTimeZone0.getShortName(259200000L, locale0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(154800000, "PST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      int int0 = dateTimeZone0.UTC.getStandardOffset(1493L);
      String string0 = dateTimeZone0.getName(1493L);
      int int1 = dateTimeZone0.getOffsetFromLocal(1493L);
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.ENGLISH;
      String string1 = locale0.getDisplayName(locale1);
      String[] stringArray0 = Locale.getISOCountries();
      String string2 = dateTimeZone0.getShortName(259200000L, locale0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-394));
      int int0 = dateTimeZone0.UTC.getOffset((long) (-394));
      String string0 = dateTimeZone0.getShortName((-963L));
      Locale locale0 = Locale.US;
      String string1 = dateTimeZone0.getShortName((-27L), locale0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider((File) null);
      } catch(IllegalArgumentException e) {
         //
         // No file directory provided
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      LocalDateTime localDateTime0 = null;
      int int0 = dateTimeZone0.getStandardOffset(0L);
      // Undeclared exception!
      try { 
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      boolean boolean0 = dateTimeZone0.UTC.equals((Object) null);
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[1TGM4Pd|K");
      int int0 = dateTimeZone0.getStandardOffset((-1454L));
      String string0 = dateTimeZone0.getShortName((-1454L));
      int int1 = dateTimeZone0.getOffset((ReadableInstant) null);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.JAPANESE;
      String string1 = locale0.getDisplayName(locale1);
      String string2 = dateTimeZone0.getName(9223372036854775807L, locale0);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      boolean boolean2 = dateTimeZone1.isFixed();
      DateTimeZone dateTimeZone2 = DateTimeZone.getDefault();
      String string3 = dateTimeZone2.UTC.getShortName(10800000L, locale0);
      Provider provider0 = DateTimeZone.getProvider();
      String string4 = dateTimeZone2.toString();
      TimeZone timeZone0 = TimeZone.getTimeZone("+07:00");
      ZoneId zoneId0 = ZoneId.systemDefault();
      ZoneId zoneId1 = zoneId0.normalized();
      TimeZone timeZone1 = TimeZone.getTimeZone(zoneId1);
      DateTimeZone dateTimeZone3 = DateTimeZone.forTimeZone(timeZone0);
      System.setCurrentTimeMillis(26607895200000L);
      Provider provider1 = DateTimeZone.getProvider();
      String string5 = dateTimeZone3.toString();
      String string6 = dateTimeZone0.toString();
      String string7 = dateTimeZone2.getName((-25197184L));
      int int2 = dateTimeZone2.getStandardOffset(145L);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("UTC");
      long long0 = dateTimeZone1.UTC.previousTransition((-633L));
      Locale locale0 = Locale.ITALIAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      String string0 = dateTimeZone0.getShortName(0L, locale0);
      long long1 = dateTimeZone1.convertLocalToUTC(0L, false, (-633L));
      boolean boolean0 = dateTimeZone0.isFixed();
      DateTimeZone dateTimeZone2 = DateTimeZone.forID("UTC");
      try { 
        DateTimeZone.forOffsetHoursMinutes(979, 1604);
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 1604
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      String string0 = fixedDateTimeZone0.getName(62035200000L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      String string1 = dateTimeZone0.getShortName(62035200000L);
      MockDate mockDate0 = new MockDate(2682L);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(1306);
      Object object0 = mockDate0.clone();
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      String string2 = dateTimeZone1.UTC.getName(0L, locale1);
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
      long long0 = fixedDateTimeZone0.convertUTCToLocal(9223372036854775807L);
      long long1 = fixedDateTimeZone0.adjustOffset(62035200000L, false);
      String string3 = dateTimeZone1.getName(0L, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours((-467));
      LocalDate localDate0 = new LocalDate(0L);
      LocalTime localTime0 = new LocalTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      boolean boolean0 = localTime0.isSupported(dateTimeFieldType0);
      LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
      LocalDateTime localDateTime1 = localDateTime0.plusDays(12740625);
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      String string0 = fixedDateTimeZone0.toString();
      ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider)DateTimeZone.getProvider();
      ZoneInfoProvider zoneInfoProvider1 = (ZoneInfoProvider)DateTimeZone.getProvider();
      int int0 = fixedDateTimeZone0.getOffset(0L);
      System.setCurrentTimeMillis(25200000L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(1548);
      String string0 = fixedDateTimeZone0.UTC.getNameKey((-997L));
      DateTimeUtils.setCurrentMillisFixed(10800000L);
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      long long0 = fixedDateTimeZone0.getMillisKeepLocal((DateTimeZone) null, 1548);
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis((-3499));
      FixedDateTimeZone fixedDateTimeZone2 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(65);
      long long1 = fixedDateTimeZone2.UTC.previousTransition((-25196904L));
      FixedDateTimeZone fixedDateTimeZone3 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(65);
      long long2 = fixedDateTimeZone3.adjustOffset(10800000L, false);
      DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(515, "", 1382, 1295, (-1144), (-1223), 1207, 2553, (-1142), 1207, 1, 1023, (-198));
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 1382
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      String string0 = dateTimeZone0.UTC.getNameKey(3032L);
      DateTimeUtils.setCurrentMillisFixed(0L);
      int int0 = 1676;
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1676);
      long long0 = dateTimeZone1.nextTransition(382L);
      TimeZone timeZone0 = dateTimeZone1.toTimeZone();
      String string1 = dateTimeZone0.getShortName(0L);
      int int1 = dateTimeZone0.getOffsetFromLocal(100000L);
      long long1 = dateTimeZone1.adjustOffset(25200000, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider("*C3G1e", classLoader0);
      } catch(Throwable e) {
         //
         // Resource not found: \"*C3G1e/ZoneInfoMap\" ClassLoader: sun.misc.Launcher$AppClassLoader@0000000010
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      int int1 = 1160;
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, 1160);
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 1160
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      ReadableInstant readableInstant0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 2);
      int int0 = 3;
      long long0 = gJChronology0.getDateTimeMillis(2, 3, 2, 2);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      int int1 = cachedDateTimeZone0.getOffset((ReadableInstant) null);
      CachedDateTimeZone cachedDateTimeZone1 = (CachedDateTimeZone)DateTimeZone.getDefault();
      boolean boolean0 = cachedDateTimeZone0.UTC.isFixed();
      Object object0 = ((DateTimeZone)cachedDateTimeZone0).writeReplace();
      boolean boolean1 = cachedDateTimeZone0.UTC.isStandardOffset(1691L);
      long long1 = cachedDateTimeZone1.previousTransition((-1L));
      long long2 = cachedDateTimeZone1.nextTransition(2);
      boolean boolean2 = cachedDateTimeZone0.equals(gJChronology0);
      ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone1.toTimeZone();
      CachedDateTimeZone cachedDateTimeZone2 = (CachedDateTimeZone)DateTimeZone.getDefault();
      try { 
        gJChronology0.getDateTimeMillis(2463L, 1631, 3, 3, 45);
      } catch(IllegalArgumentException e) {
         //
         // Value 1631 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) null, 2);
      long long0 = gJChronology0.getDateTimeMillis(2, 3, 2, 2);
      int int0 = cachedDateTimeZone0.getOffset((ReadableInstant) null);
      CachedDateTimeZone cachedDateTimeZone1 = (CachedDateTimeZone)DateTimeZone.getDefault();
      Object object0 = ((DateTimeZone)cachedDateTimeZone0).writeReplace();
      boolean boolean0 = cachedDateTimeZone0.UTC.isStandardOffset(1691L);
      long long1 = cachedDateTimeZone1.previousTransition((-1L));
      long long2 = cachedDateTimeZone1.nextTransition(2);
      boolean boolean1 = cachedDateTimeZone0.equals(gJChronology0);
      ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone1.toTimeZone();
      CachedDateTimeZone cachedDateTimeZone2 = (CachedDateTimeZone)DateTimeZone.getDefault();
      try { 
        gJChronology0.getDateTimeMillis(2463L, 1631, 3, 3, 45);
      } catch(IllegalArgumentException e) {
         //
         // Value 1631 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      int int0 = dateTimeZone0.getOffset(3263L);
      String string0 = dateTimeZone0.getID();
      Locale locale0 = Locale.CHINESE;
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("UTC");
      DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);
      TimeZone timeZone1 = dateTimeZone0.toTimeZone();
      long long0 = dateTimeZone0.previousTransition((-3373L));
      long long1 = dateTimeZone0.adjustOffset((-3373L), false);
      Provider provider0 = DateTimeZone.getProvider();
      Locale locale1 = Locale.CHINA;
      String string1 = dateTimeZone0.getShortName(0L, locale1);
      long long2 = dateTimeZone0.convertLocalToUTC((-3373L), false);
      long long3 = dateTimeZone0.convertUTCToLocal(0L);
      int int1 = dateTimeZone0.hashCode();
      DateTimeZone dateTimeZone3 = DateTimeZone.forOffsetHours(1);
      String string2 = dateTimeZone3.getName((-3373L));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1941));
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = iSOChronology0.withUTC();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      long long0 = dateTimeZone1.getMillisKeepLocal(dateTimeZone0, 10800000L);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      Locale locale0 = new Locale("");
      String string0 = defaultNameProvider0.getShortName(locale0, "", "iIJn%|MBSK$9:E8");
      DateTimeZone.setNameProvider(defaultNameProvider0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(1);
      DateTimeZone dateTimeZone2 = DateTimeZone.forID("UTC");
      DateTimeUtils.setCurrentMillisSystem();
      long long0 = dateTimeZone1.UTC.convertLocalToUTC(0L, false);
      long long1 = dateTimeZone1.convertUTCToLocal(1);
      String string1 = dateTimeZone1.getNameKey(652L);
      String string2 = fixedDateTimeZone0.getNameKey(3600000L);
      String string3 = dateTimeZone1.getName(1269L, (Locale) null);
      String string4 = dateTimeZone0.getNameKey(0L);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(572, "UTC");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Chronology chronology0 = copticChronology0.withUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86400);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);
      Chronology chronology1 = copticChronology0.withZone(dateTimeZone0);
      String string0 = dateTimeZone0.getName((long) 1);
      CopticChronology copticChronology1 = CopticChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      String string1 = dateTimeZone1.getID();
      long long0 = dateTimeZone1.adjustOffset(1, true);
      boolean boolean0 = dateTimeZone1.equals(dateTimeZone0);
      long long1 = dateTimeZone0.UTC.getMillisKeepLocal(dateTimeZone1, 86400);
      DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis(1);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDate localDate0 = localDateTime0.toLocalDate();
      CopticChronology copticChronology2 = CopticChronology.getInstance();
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded((DurationFieldType) null, (-4216));
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(22);
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1L));
      Hours hours0 = Hours.SIX;
      LocalTime localTime1 = localTime0.withPeriodAdded(hours0, 874);
      LocalTime localTime2 = localTime1.withHourOfDay(22);
      DateTime dateTime0 = localTime2.toDateTimeToday();
      DateTime dateTime1 = dateTime0.plusDays(22);
      int int0 = dateTimeZone0.UTC.getOffset((ReadableInstant) dateTime1);
      Locale locale0 = Locale.US;
      DateTimeZone.setDefault(dateTimeZone0);
      long long0 = dateTimeZone0.UTC.convertUTCToLocal(22);
      Locale locale1 = Locale.forLanguageTag("Types array must not contain duplicate: ");
      String string0 = dateTimeZone0.getName((long) 22, locale0);
      String string1 = dateTimeZone0.getShortName(915L);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = (-155L);
      long long1 = dateTimeZone0.previousTransition((-155L));
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      String string0 = dateTimeZone0.getShortName((-1730L));
      boolean boolean0 = dateTimeZone0.isFixed();
      long long2 = dateTimeZone0.convertLocalToUTC((-1730L), true, 9223372036854775807L);
      boolean boolean1 = dateTimeZone0.isStandardOffset((-1730L));
      Provider provider0 = DateTimeZone.getProvider();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(iSOChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) strictChronology0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfMonth(0);
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 32;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(32);
      boolean boolean0 = dateTimeZone0.isStandardOffset((-623L));
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      String string0 = dateTimeZone0.getShortName(0L);
      TimeZone timeZone1 = dateTimeZone0.toTimeZone();
      String string1 = dateTimeZone0.getNameKey(0L);
      DateTimeUtils.setCurrentMillisFixed(10L);
      int int1 = dateTimeZone0.getOffset((ReadableInstant) null);
      try { 
        DateTimeZone.forOffsetHoursMinutes(115200000, 37);
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.convertLocalToUTC(0L, false, 0L);
      String string0 = dateTimeZone0.toString();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      int int0 = 3600000;
      int int1 = 0;
      try { 
        DateTimeZone.forOffsetHoursMinutes(3600000, 0);
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      String string0 = dateTimeZone0.getName((-2708L));
      long long0 = dateTimeZone0.UTC.nextTransition(0L);
      boolean boolean0 = dateTimeZone0.isStandardOffset(0L);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(60);
      String string0 = dateTimeZone0.getShortName((-1L), (Locale) null);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("+60:00");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+60:00\" is malformed at \"60:00\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      int int0 = (-2702);
      try { 
        DateTimeZone.forOffsetHoursMinutes((-2702), 1);
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeUtils.setCurrentMillisFixed((-1474L));
      TimeZone timeZone0 = dateTimeZone0.UTC.toTimeZone();
      long long0 = dateTimeZone0.adjustOffset((-1474L), false);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      int int0 = dateTimeZone0.getStandardOffset((-1474L));
      long long1 = 31083597720000L;
      int int1 = dateTimeZone0.getOffsetFromLocal(31083597720000L);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("a's4G&<wQ !4{7");
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'a's4G&<wQ !4{7' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("W<fA2LIBBFM$!gS17\"");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(46);
      int int0 = dateTimeZone0.UTC.getStandardOffset(46);
      DateTimeUtils.setCurrentMillisFixed(46);
      DateTimeUtils.setCurrentMillisFixed(46);
      long long0 = dateTimeZone0.UTC.convertUTCToLocal((-1325L));
      long long1 = dateTimeZone0.convertLocalToUTC((long) 46, false);
      long long2 = dateTimeZone0.convertLocalToUTC((-165599954L), false, (-165599954L));
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      long long3 = dateTimeZone0.convertUTCToLocal(46);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      boolean boolean0 = dateTimeZone1.isStandardOffset((-1325L));
      long long4 = dateTimeZone0.convertUTCToLocal(46);
      boolean boolean1 = dateTimeZone1.isFixed();
      DateTimeZone dateTimeZone2 = DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        DateTimeUtils.setCurrentMillisProvider((DateTimeUtils.MillisProvider) null);
      } catch(IllegalArgumentException e) {
         //
         // The MillisProvider must not be null
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours((-152));
      int int0 = fixedDateTimeZone0.getOffsetFromLocal((-152));
      DateTimeZone.setDefault(fixedDateTimeZone0);
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      String string0 = fixedDateTimeZone0.getName(2669L);
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forOffsetHours((-152));
      long long0 = fixedDateTimeZone1.UTC.convertUTCToLocal(2669L);
      FixedDateTimeZone fixedDateTimeZone2 = (FixedDateTimeZone)DateTimeZone.forOffsetHours((-152));
      long long1 = fixedDateTimeZone0.convertUTCToLocal(1677L);
      long long2 = fixedDateTimeZone0.adjustOffset(3L, false);
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) fixedDateTimeZone2);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear((-152));
      int int1 = fixedDateTimeZone0.getOffset((ReadableInstant) dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(99);
      boolean boolean0 = dateTimeZone0.UTC.isStandardOffset(31083597720000L);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      DateTimeZone.setDefault(dateTimeZone1);
      long long0 = dateTimeZone1.convertLocalToUTC(100000000L, false);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      String string0 = dateTimeZone1.UTC.getNameKey(9223372036854775807L);
      long long0 = dateTimeZone0.previousTransition(0);
      String string1 = "UTC";
      DateTimeZone dateTimeZone2 = DateTimeZone.forID("UTC");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      boolean boolean0 = dateTimeZone0.isFixed();
      DateTimeZone dateTimeZone3 = DateTimeZone.forOffsetMillis(0);
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider("", classLoader0);
      } catch(Throwable e) {
         //
         // Resource not found: \"/ZoneInfoMap\" ClassLoader: sun.misc.Launcher$AppClassLoader@0000000003
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      long long0 = fixedDateTimeZone0.previousTransition((-109L));
      DateTimeZone.setNameProvider((NameProvider) null);
      int int0 = fixedDateTimeZone0.getStandardOffset((-962L));
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long1 = fixedDateTimeZone0.nextTransition(1000L);
      long long2 = dateTimeZone0.convertLocalToUTC(1000L, true, 0L);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      boolean boolean0 = fixedDateTimeZone0.isFixed();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      int int0 = fixedDateTimeZone0.getOffsetFromLocal(1005L);
      int int1 = (-1807);
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-1807));
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -1807
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(572, 572);
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 572
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(600, 600);
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 600
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      int int0 = dateTimeZone0.getOffset((long) 0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      int int0 = dateTimeZone0.getOffset(1308L);
      long long0 = dateTimeZone0.convertUTCToLocal((-3750L));
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("UTC");
      String string0 = dateTimeZone0.getID();
      String string1 = dateTimeZone0.getShortName(1788L);
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      DateTimeZone.setNameProvider(defaultNameProvider0);
      long long1 = dateTimeZone0.adjustOffset(0L, false);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 0;
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      long long0 = dateTimeZone0.adjustOffset(0, false);
      String string1 = dateTimeZone0.getName(0L);
      int int1 = (-3025);
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-3025));
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -3025
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeUtils.setCurrentMillisFixed(1L);
      int int0 = dateTimeZone0.getOffsetFromLocal((-1448L));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(355, 1);
      Locale locale0 = Locale.JAPANESE;
      String string0 = dateTimeZone0.getName(0L, locale0);
      int int0 = dateTimeZone0.getStandardOffset(0L);
      long long0 = dateTimeZone0.convertLocalToUTC((long) 1, true, (long) 1278060000);
      String string1 = dateTimeZone0.getShortName((-1143L));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(1, 1);
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      int int0 = fixedDateTimeZone0.getOffsetFromLocal(1892L);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1872);
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
      long long0 = dateTimeZone0.previousTransition(1872);
      Set<String> set0 = DateTimeZone.getAvailableIDs();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime();
      boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      int int0 = fixedDateTimeZone0.getStandardOffset(0L);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("Z");
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'Z' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours((-1017));
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(0);
      int int1 = 1024;
      try { 
        DateTimeZone.forOffsetHoursMinutes(1024, (-970));
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -970
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = (-316);
      try { 
        DateTimeZone.forOffsetHoursMinutes((-316), (-316));
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -316
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      boolean boolean0 = dateTimeZone0.isStandardOffset(0);
      String string0 = dateTimeZone0.UTC.getName((long) 0);
      String string1 = dateTimeZone0.getNameKey(0);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(29);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 29);
      LocalDateTime localDateTime1 = localDateTime0.minusYears(29);
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      LocalDateTime localDateTime2 = localDateTime1.withFieldAdded(durationFieldType0, (-2504));
      LocalDateTime localDateTime3 = localDateTime2.minusMillis(29);
      LocalDateTime localDateTime4 = localDateTime3.withYearOfEra(2085);
      long long0 = 0L;
      int int0 = 572;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Locale locale0 = new Locale("");
      String string0 = dateTimeZone0.UTC.getShortName(0L, locale0);
      // Undeclared exception!
      try { 
        localDateTime1.getField(572, (Chronology) buddhistChronology0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 572
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }
}
