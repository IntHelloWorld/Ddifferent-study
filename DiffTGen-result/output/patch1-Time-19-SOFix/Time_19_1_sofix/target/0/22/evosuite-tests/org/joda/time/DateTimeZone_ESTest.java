/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 07:07:10 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      // Undeclared exception!
      try { 
        dateTime0.withDate(0, 1548, 17887500);
      } catch(IllegalArgumentException e) {
         //
         // Value 1548 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(12740625, "Id must not be null");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("mYu]mK.47{j:x8h'");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      int int0 = dateTimeZone0.hashCode();
  }
}
