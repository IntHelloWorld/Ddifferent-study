/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 23 13:13:59 GMT 2020
 */

package org.apache.commons.math.stat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.Iterator;
import org.apache.commons.math.stat.Frequency;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Frequency_ESTest extends Frequency_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 70 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 5. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 6. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 7. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: I10 Branch 8 IFNE L281 - true
   * Goal 9. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 10. Branch org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(I)V
   * Goal 11. Branch org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: I10 Branch 8 IFNE L281 - true in context: org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Object;)D
   * Goal 12. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 13. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 151
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 152
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 23. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 223
   * Goal 24. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 226
   * Goal 25. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 228
   * Goal 26. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 232
   * Goal 27. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 235
   * Goal 28. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 280
   * Goal 29. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 281
   * Goal 30. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 284
   * Goal 31. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 32. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 33. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 34. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 35. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 36. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 37. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 38. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D
   * Goal 39. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 40. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 41. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D
   * Goal 42. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 43. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 44. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 45. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 46. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 47. Weak Mutation 41: org.apache.commons.math.stat.Frequency.addValue(I)V:151 - InsertUnaryOp Negation
   * Goal 48. Weak Mutation 42: org.apache.commons.math.stat.Frequency.addValue(I)V:151 - InsertUnaryOp IINC 1
   * Goal 49. Weak Mutation 43: org.apache.commons.math.stat.Frequency.addValue(I)V:151 - InsertUnaryOp IINC -1
   * Goal 50. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 51. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 52. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 53. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 54. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 55. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 56. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 57. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 58. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 59. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:223 - ReplaceComparisonOperator == -> !=
   * Goal 60. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> 1
   * Goal 61. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> -1
   * Goal 62. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:235 - InsertUnaryOp Negation
   * Goal 63. Weak Mutation 69: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - InsertUnaryOp Negation
   * Goal 64. Weak Mutation 70: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> 1
   * Goal 65. Weak Mutation 71: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> -1
   * Goal 66. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceComparisonOperator != -> <
   * Goal 67. Weak Mutation 79: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:284 - InsertUnaryOp Negation
   * Goal 68. Weak Mutation 80: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:284 - ReplaceArithmeticOperator / -> +
   * Goal 69. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:284 - ReplaceArithmeticOperator / -> -
   * Goal 70. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:zero
   */

  @Test
  public void test00()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      frequency0.addValue(0);
      double double0 = frequency0.getPct((Object) frequency0);
  }

  //Test case number: 1
  /*
   * 73 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getPct(J)D: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 6. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 7. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 8. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true
   * Goal 9. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: I10 Branch 8 IFNE L281 - true
   * Goal 10. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 11. Branch org.apache.commons.math.stat.Frequency.getPct(J)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(J)D
   * Goal 12. Branch org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(C)V
   * Goal 13. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 14. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 178
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 179
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 24. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 223
   * Goal 25. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 226
   * Goal 26. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 228
   * Goal 27. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 232
   * Goal 28. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 235
   * Goal 29. org.apache.commons.math.stat.Frequency.getPct(J)D: Line 306
   * Goal 30. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 280
   * Goal 31. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 281
   * Goal 32. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 284
   * Goal 33. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 34. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 35. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 36. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 37. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 38. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 39. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 40. org.apache.commons.math.stat.Frequency.getPct(J)D
   * Goal 41. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 42. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 43. org.apache.commons.math.stat.Frequency.getPct(J)D
   * Goal 44. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 45. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 46. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 47. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 48. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 49. Weak Mutation 45: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp Negation
   * Goal 50. Weak Mutation 46: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp IINC 1
   * Goal 51. Weak Mutation 47: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp IINC -1
   * Goal 52. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 53. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 54. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 55. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 56. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 57. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 58. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 59. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 60. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 61. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:223 - ReplaceComparisonOperator == -> !=
   * Goal 62. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> 1
   * Goal 63. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> -1
   * Goal 64. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:235 - InsertUnaryOp Negation
   * Goal 65. Weak Mutation 69: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - InsertUnaryOp Negation
   * Goal 66. Weak Mutation 70: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> 1
   * Goal 67. Weak Mutation 71: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> -1
   * Goal 68. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceComparisonOperator != -> <
   * Goal 69. Weak Mutation 79: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:284 - InsertUnaryOp Negation
   * Goal 70. Weak Mutation 80: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:284 - ReplaceArithmeticOperator / -> +
   * Goal 71. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:284 - ReplaceArithmeticOperator / -> -
   * Goal 72. Weak Mutation 87: org.apache.commons.math.stat.Frequency.getPct(J)D:306 - InsertUnaryOp Negation
   * Goal 73. org.apache.commons.math.stat.Frequency.getPct(J)D:zero
   */

  @Test
  public void test01()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      frequency0.addValue('}');
      double double0 = frequency0.getPct((-708L));
  }

  //Test case number: 2
  /*
   * 75 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getPct(I)D: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 6. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 7. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 8. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true
   * Goal 9. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: I10 Branch 8 IFNE L281 - true
   * Goal 10. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 11. Branch org.apache.commons.math.stat.Frequency.getPct(I)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(I)D
   * Goal 12. Branch org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(C)V
   * Goal 13. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 14. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 178
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 179
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 24. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 223
   * Goal 25. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 226
   * Goal 26. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 228
   * Goal 27. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 232
   * Goal 28. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 235
   * Goal 29. org.apache.commons.math.stat.Frequency.getPct(I)D: Line 295
   * Goal 30. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 280
   * Goal 31. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 281
   * Goal 32. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 284
   * Goal 33. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 34. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 35. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 36. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 37. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 38. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 39. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 40. org.apache.commons.math.stat.Frequency.getPct(I)D
   * Goal 41. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 42. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 43. org.apache.commons.math.stat.Frequency.getPct(I)D
   * Goal 44. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 45. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 46. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 47. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 48. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 49. Weak Mutation 45: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp Negation
   * Goal 50. Weak Mutation 46: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp IINC 1
   * Goal 51. Weak Mutation 47: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp IINC -1
   * Goal 52. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 53. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 54. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 55. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 56. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 57. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 58. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 59. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 60. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 61. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:223 - ReplaceComparisonOperator == -> !=
   * Goal 62. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> 1
   * Goal 63. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> -1
   * Goal 64. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:235 - InsertUnaryOp Negation
   * Goal 65. Weak Mutation 69: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - InsertUnaryOp Negation
   * Goal 66. Weak Mutation 70: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> 1
   * Goal 67. Weak Mutation 71: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> -1
   * Goal 68. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceComparisonOperator != -> <
   * Goal 69. Weak Mutation 79: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:284 - InsertUnaryOp Negation
   * Goal 70. Weak Mutation 80: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:284 - ReplaceArithmeticOperator / -> +
   * Goal 71. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:284 - ReplaceArithmeticOperator / -> -
   * Goal 72. Weak Mutation 84: org.apache.commons.math.stat.Frequency.getPct(I)D:295 - InsertUnaryOp Negation
   * Goal 73. Weak Mutation 85: org.apache.commons.math.stat.Frequency.getPct(I)D:295 - InsertUnaryOp IINC 1
   * Goal 74. Weak Mutation 86: org.apache.commons.math.stat.Frequency.getPct(I)D:295 - InsertUnaryOp IINC -1
   * Goal 75. org.apache.commons.math.stat.Frequency.getPct(I)D:zero
   */

  @Test
  public void test02()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      frequency0.addValue('}');
      double double0 = frequency0.getPct(2813);
  }

  //Test case number: 3
  /*
   * 70 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 5. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 6. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 7. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: I10 Branch 8 IFNE L281 - true
   * Goal 9. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 10. Branch org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(C)D
   * Goal 11. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 12. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 13. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 14. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 22. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 223
   * Goal 23. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 226
   * Goal 24. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 228
   * Goal 25. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 232
   * Goal 26. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 235
   * Goal 27. org.apache.commons.math.stat.Frequency.getPct(C)D: Line 317
   * Goal 28. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 280
   * Goal 29. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 281
   * Goal 30. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 284
   * Goal 31. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 32. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 33. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 34. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 35. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 36. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 37. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 38. org.apache.commons.math.stat.Frequency.getPct(C)D
   * Goal 39. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 40. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 41. org.apache.commons.math.stat.Frequency.getPct(C)D
   * Goal 42. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 43. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 44. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 45. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 46. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 47. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 48. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 49. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 50. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 51. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 52. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 53. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 54. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 55. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 56. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:223 - ReplaceComparisonOperator == -> !=
   * Goal 57. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> 1
   * Goal 58. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> -1
   * Goal 59. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:235 - InsertUnaryOp Negation
   * Goal 60. Weak Mutation 69: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - InsertUnaryOp Negation
   * Goal 61. Weak Mutation 70: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> 1
   * Goal 62. Weak Mutation 71: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> -1
   * Goal 63. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceComparisonOperator != -> <
   * Goal 64. Weak Mutation 79: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:284 - InsertUnaryOp Negation
   * Goal 65. Weak Mutation 80: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:284 - ReplaceArithmeticOperator / -> +
   * Goal 66. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:284 - ReplaceArithmeticOperator / -> -
   * Goal 67. Weak Mutation 88: org.apache.commons.math.stat.Frequency.getPct(C)D:317 - InsertUnaryOp Negation
   * Goal 68. Weak Mutation 89: org.apache.commons.math.stat.Frequency.getPct(C)D:317 - InsertUnaryOp IINC 1
   * Goal 69. Weak Mutation 90: org.apache.commons.math.stat.Frequency.getPct(C)D:317 - InsertUnaryOp IINC -1
   * Goal 70. org.apache.commons.math.stat.Frequency.getPct(C)D:zero
   */

  @Test
  public void test03()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      double double0 = frequency0.getPct('2');
  }

  //Test case number: 4
  /*
   * 78 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumPct(J)D: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 5. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 6. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I15 Branch 10 IFEQ L334 - true
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I33 Branch 11 IFNONNULL L338 - false
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: I10 Branch 17 IFNE L423 - true
   * Goal 11. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 12. Branch org.apache.commons.math.stat.Frequency.getCumPct(J)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(J)D
   * Goal 13. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 14. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 15. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 16. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 24. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 331
   * Goal 25. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 334
   * Goal 26. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 337
   * Goal 27. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 338
   * Goal 28. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 339
   * Goal 29. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 341
   * Goal 30. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 344
   * Goal 31. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 348
   * Goal 32. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 349
   * Goal 33. org.apache.commons.math.stat.Frequency.getCumPct(J)D: Line 452
   * Goal 34. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 422
   * Goal 35. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 423
   * Goal 36. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 426
   * Goal 37. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 38. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 39. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 40. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 41. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 42. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 43. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 44. org.apache.commons.math.stat.Frequency.getCumPct(J)D
   * Goal 45. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 46. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 47. org.apache.commons.math.stat.Frequency.getCumPct(J)D
   * Goal 48. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 49. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 50. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 51. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 52. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 53. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 54. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 55. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 56. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 57. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 58. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 59. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 60. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 61. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 62. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> 1
   * Goal 63. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> -1
   * Goal 64. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceComparisonOperator != -> <
   * Goal 65. Weak Mutation 98: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:334 - ReplaceComparisonOperator == -> !=
   * Goal 66. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:338 - ReplaceComparisonOperator != null -> = null
   * Goal 67. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> 1
   * Goal 68. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> -1
   * Goal 69. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:349 - InsertUnaryOp Negation
   * Goal 70. Weak Mutation 120: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - InsertUnaryOp Negation
   * Goal 71. Weak Mutation 121: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> 1
   * Goal 72. Weak Mutation 122: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> -1
   * Goal 73. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceComparisonOperator != -> <
   * Goal 74. Weak Mutation 130: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:426 - InsertUnaryOp Negation
   * Goal 75. Weak Mutation 131: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:426 - ReplaceArithmeticOperator / -> +
   * Goal 76. Weak Mutation 133: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:426 - ReplaceArithmeticOperator / -> -
   * Goal 77. Weak Mutation 138: org.apache.commons.math.stat.Frequency.getCumPct(J)D:452 - InsertUnaryOp Negation
   * Goal 78. org.apache.commons.math.stat.Frequency.getCumPct(J)D:zero
   */

  @Test
  public void test04()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      double double0 = frequency0.getCumPct(2L);
  }

  //Test case number: 5
  /*
   * 92 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumPct(I)D: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 6. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 7. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - true
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I15 Branch 10 IFEQ L334 - true
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I33 Branch 11 IFNONNULL L338 - false
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I56 Branch 12 IFNULL L345 - true
   * Goal 13. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I80 Branch 13 IFGE L352 - false
   * Goal 14. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: I10 Branch 17 IFNE L423 - true
   * Goal 15. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Integer;)V
   * Goal 16. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 17. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: root-Branch in context: 
   * Goal 18. Branch org.apache.commons.math.stat.Frequency.getCumPct(I)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(I)D
   * Goal 19. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 20. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 24. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 25. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 26. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 27. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 28. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 160
   * Goal 29. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 161
   * Goal 30. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 331
   * Goal 31. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 334
   * Goal 32. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 337
   * Goal 33. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 338
   * Goal 34. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 339
   * Goal 35. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 341
   * Goal 36. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 344
   * Goal 37. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 345
   * Goal 38. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 350
   * Goal 39. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 352
   * Goal 40. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 353
   * Goal 41. org.apache.commons.math.stat.Frequency.getCumPct(I)D: Line 439
   * Goal 42. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 422
   * Goal 43. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 423
   * Goal 44. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 426
   * Goal 45. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 46. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 47. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 48. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 49. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 50. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: Line 491
   * Goal 51. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 52. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 53. org.apache.commons.math.stat.Frequency.getCumPct(I)D
   * Goal 54. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 55. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 56. org.apache.commons.math.stat.Frequency.getCumPct(I)D
   * Goal 57. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 58. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 59. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 60. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 61. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 62. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 63. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 64. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 65. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 66. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 67. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 68. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 69. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 70. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 71. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> 1
   * Goal 72. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> -1
   * Goal 73. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceComparisonOperator != -> <
   * Goal 74. Weak Mutation 98: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:334 - ReplaceComparisonOperator == -> !=
   * Goal 75. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:338 - ReplaceComparisonOperator != null -> = null
   * Goal 76. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> 1
   * Goal 77. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> -1
   * Goal 78. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:345 - ReplaceComparisonOperator = null -> != null
   * Goal 79. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:352 - ReplaceComparisonOperator >= -> -1
   * Goal 80. Weak Mutation 107: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:353 - ReplaceConstant - 0 -> 1
   * Goal 81. Weak Mutation 108: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:353 - ReplaceConstant - 0 -> -1
   * Goal 82. Weak Mutation 120: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - InsertUnaryOp Negation
   * Goal 83. Weak Mutation 121: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> 1
   * Goal 84. Weak Mutation 122: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> -1
   * Goal 85. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceComparisonOperator != -> <
   * Goal 86. Weak Mutation 130: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:426 - InsertUnaryOp Negation
   * Goal 87. Weak Mutation 131: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:426 - ReplaceArithmeticOperator / -> +
   * Goal 88. Weak Mutation 133: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:426 - ReplaceArithmeticOperator / -> -
   * Goal 89. Weak Mutation 135: org.apache.commons.math.stat.Frequency.getCumPct(I)D:439 - InsertUnaryOp Negation
   * Goal 90. Weak Mutation 136: org.apache.commons.math.stat.Frequency.getCumPct(I)D:439 - InsertUnaryOp IINC 1
   * Goal 91. Weak Mutation 137: org.apache.commons.math.stat.Frequency.getCumPct(I)D:439 - InsertUnaryOp IINC -1
   * Goal 92. org.apache.commons.math.stat.Frequency.getCumPct(I)D:zero
   */

  @Test
  public void test05()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Integer integer0 = new Integer(2091);
      frequency0.addValue(integer0);
      double double0 = frequency0.getCumPct((-6));
  }

  //Test case number: 6
  /*
   * 80 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 5. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 6. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I15 Branch 10 IFEQ L334 - true
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I33 Branch 11 IFNONNULL L338 - false
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: I10 Branch 17 IFNE L423 - true
   * Goal 11. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 12. Branch org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(C)D
   * Goal 13. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 14. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 15. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 16. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 24. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 331
   * Goal 25. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 334
   * Goal 26. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 337
   * Goal 27. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 338
   * Goal 28. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 339
   * Goal 29. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 341
   * Goal 30. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 344
   * Goal 31. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 348
   * Goal 32. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 349
   * Goal 33. org.apache.commons.math.stat.Frequency.getCumPct(C)D: Line 465
   * Goal 34. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 422
   * Goal 35. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 423
   * Goal 36. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 426
   * Goal 37. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 38. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 39. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 40. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 41. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 42. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 43. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 44. org.apache.commons.math.stat.Frequency.getCumPct(C)D
   * Goal 45. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 46. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 47. org.apache.commons.math.stat.Frequency.getCumPct(C)D
   * Goal 48. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 49. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 50. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 51. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 52. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 53. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 54. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 55. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 56. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 57. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 58. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 59. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 60. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 61. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 62. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> 1
   * Goal 63. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> -1
   * Goal 64. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceComparisonOperator != -> <
   * Goal 65. Weak Mutation 98: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:334 - ReplaceComparisonOperator == -> !=
   * Goal 66. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:338 - ReplaceComparisonOperator != null -> = null
   * Goal 67. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> 1
   * Goal 68. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> -1
   * Goal 69. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:349 - InsertUnaryOp Negation
   * Goal 70. Weak Mutation 120: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - InsertUnaryOp Negation
   * Goal 71. Weak Mutation 121: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> 1
   * Goal 72. Weak Mutation 122: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> -1
   * Goal 73. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceComparisonOperator != -> <
   * Goal 74. Weak Mutation 130: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:426 - InsertUnaryOp Negation
   * Goal 75. Weak Mutation 131: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:426 - ReplaceArithmeticOperator / -> +
   * Goal 76. Weak Mutation 133: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:426 - ReplaceArithmeticOperator / -> -
   * Goal 77. Weak Mutation 139: org.apache.commons.math.stat.Frequency.getCumPct(C)D:465 - InsertUnaryOp Negation
   * Goal 78. Weak Mutation 140: org.apache.commons.math.stat.Frequency.getCumPct(C)D:465 - InsertUnaryOp IINC 1
   * Goal 79. Weak Mutation 141: org.apache.commons.math.stat.Frequency.getCumPct(C)D:465 - InsertUnaryOp IINC -1
   * Goal 80. org.apache.commons.math.stat.Frequency.getCumPct(C)D:zero
   */

  @Test
  public void test06()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      double double0 = frequency0.getCumPct('Z');
  }

  //Test case number: 7
  /*
   * 82 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 6. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 7. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - true
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I15 Branch 10 IFEQ L334 - true
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I33 Branch 11 IFNONNULL L338 - false
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I56 Branch 12 IFNULL L345 - false
   * Goal 13. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I80 Branch 13 IFGE L352 - true
   * Goal 14. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I93 Branch 14 IFLT L356 - false
   * Goal 15. Branch org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(J)V
   * Goal 16. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 17. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: root-Branch in context: 
   * Goal 18. Branch org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(J)J
   * Goal 19. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 20. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(J)V: Line 169
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(J)V: Line 170
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 24. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 25. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 26. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 27. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 28. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 29. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 30. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: Line 393
   * Goal 31. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 331
   * Goal 32. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 334
   * Goal 33. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 337
   * Goal 34. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 338
   * Goal 35. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 339
   * Goal 36. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 341
   * Goal 37. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 344
   * Goal 38. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 345
   * Goal 39. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 346
   * Goal 40. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 350
   * Goal 41. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 352
   * Goal 42. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 356
   * Goal 43. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 357
   * Goal 44. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 45. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 46. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 47. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 48. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 49. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: Line 491
   * Goal 50. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 51. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 52. org.apache.commons.math.stat.Frequency.getCumFreq(J)J
   * Goal 53. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 54. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 55. org.apache.commons.math.stat.Frequency.getCumFreq(J)J
   * Goal 56. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 57. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 58. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 59. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 60. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 61. Weak Mutation 44: org.apache.commons.math.stat.Frequency.addValue(J)V:169 - InsertUnaryOp Negation
   * Goal 62. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 63. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 64. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 65. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 66. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 67. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 68. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 69. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 70. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 71. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> 1
   * Goal 72. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> -1
   * Goal 73. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceComparisonOperator != -> <
   * Goal 74. Weak Mutation 98: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:334 - ReplaceComparisonOperator == -> !=
   * Goal 75. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:338 - ReplaceComparisonOperator != null -> = null
   * Goal 76. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> 1
   * Goal 77. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> -1
   * Goal 78. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:345 - ReplaceComparisonOperator = null -> != null
   * Goal 79. Weak Mutation 106: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:352 - ReplaceComparisonOperator >= -> >
   * Goal 80. Weak Mutation 111: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:356 - ReplaceComparisonOperator < -> <=
   * Goal 81. Weak Mutation 116: org.apache.commons.math.stat.Frequency.getCumFreq(J)J:393 - InsertUnaryOp Negation
   * Goal 82. org.apache.commons.math.stat.Frequency.getCumFreq(J)J:positive
   */

  @Test
  public void test07()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      frequency0.addValue(0L);
      long long0 = frequency0.getCumFreq(0L);
  }

  //Test case number: 8
  /*
   * 47 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getCount(J)J: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 6. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true
   * Goal 7. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I28 Branch 7 IFNULL L229 - false
   * Goal 8. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Integer;)V
   * Goal 9. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 10. Branch org.apache.commons.math.stat.Frequency.getCount(J)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(J)J
   * Goal 11. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 12. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 160
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 161
   * Goal 22. org.apache.commons.math.stat.Frequency.getCount(J)J: Line 255
   * Goal 23. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 223
   * Goal 24. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 226
   * Goal 25. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 228
   * Goal 26. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 229
   * Goal 27. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 230
   * Goal 28. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 234
   * Goal 29. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 235
   * Goal 30. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 31. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 32. org.apache.commons.math.stat.Frequency.getCount(J)J
   * Goal 33. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 34. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 35. org.apache.commons.math.stat.Frequency.getCount(J)J
   * Goal 36. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 37. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 38. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 39. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 40. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 41. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:223 - ReplaceComparisonOperator == -> !=
   * Goal 42. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> 1
   * Goal 43. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> -1
   * Goal 44. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:229 - ReplaceComparisonOperator = null -> != null
   * Goal 45. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:235 - InsertUnaryOp Negation
   * Goal 46. Weak Mutation 65: org.apache.commons.math.stat.Frequency.getCount(J)J:255 - InsertUnaryOp Negation
   * Goal 47. org.apache.commons.math.stat.Frequency.getCount(J)J:positive
   */

  @Test
  public void test08()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Integer integer0 = new Integer(0);
      frequency0.addValue(integer0);
      long long0 = frequency0.getCount(0L);
  }

  //Test case number: 9
  /*
   * 52 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getCount(I)J: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 6. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true
   * Goal 7. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I28 Branch 7 IFNULL L229 - false
   * Goal 8. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 9. Branch org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(I)V
   * Goal 10. Branch org.apache.commons.math.stat.Frequency.getCount(I)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(I)J
   * Goal 11. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 12. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 151
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 152
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 22. org.apache.commons.math.stat.Frequency.getCount(I)J: Line 245
   * Goal 23. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 223
   * Goal 24. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 226
   * Goal 25. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 228
   * Goal 26. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 229
   * Goal 27. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 230
   * Goal 28. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 234
   * Goal 29. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 235
   * Goal 30. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 31. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 32. org.apache.commons.math.stat.Frequency.getCount(I)J
   * Goal 33. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 34. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 35. org.apache.commons.math.stat.Frequency.getCount(I)J
   * Goal 36. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 37. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 38. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 39. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 40. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 41. Weak Mutation 41: org.apache.commons.math.stat.Frequency.addValue(I)V:151 - InsertUnaryOp Negation
   * Goal 42. Weak Mutation 42: org.apache.commons.math.stat.Frequency.addValue(I)V:151 - InsertUnaryOp IINC 1
   * Goal 43. Weak Mutation 43: org.apache.commons.math.stat.Frequency.addValue(I)V:151 - InsertUnaryOp IINC -1
   * Goal 44. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:223 - ReplaceComparisonOperator == -> !=
   * Goal 45. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> 1
   * Goal 46. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> -1
   * Goal 47. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:229 - ReplaceComparisonOperator = null -> != null
   * Goal 48. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:235 - InsertUnaryOp Negation
   * Goal 49. Weak Mutation 62: org.apache.commons.math.stat.Frequency.getCount(I)J:245 - InsertUnaryOp Negation
   * Goal 50. Weak Mutation 63: org.apache.commons.math.stat.Frequency.getCount(I)J:245 - InsertUnaryOp IINC 1
   * Goal 51. Weak Mutation 64: org.apache.commons.math.stat.Frequency.getCount(I)J:245 - InsertUnaryOp IINC -1
   * Goal 52. org.apache.commons.math.stat.Frequency.getCount(I)J:positive
   */

  @Test
  public void test09()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      frequency0.addValue(0);
      long long0 = frequency0.getCount(0);
  }

  //Test case number: 10
  /*
   * 52 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCount(C)J: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 6. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true
   * Goal 7. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I28 Branch 7 IFNULL L229 - false
   * Goal 8. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 9. Branch org.apache.commons.math.stat.Frequency.getCount(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(C)J
   * Goal 10. Branch org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(C)V
   * Goal 11. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 12. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 178
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 179
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 22. org.apache.commons.math.stat.Frequency.getCount(C)J: Line 265
   * Goal 23. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 223
   * Goal 24. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 226
   * Goal 25. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 228
   * Goal 26. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 229
   * Goal 27. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 230
   * Goal 28. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 234
   * Goal 29. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 235
   * Goal 30. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 31. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 32. org.apache.commons.math.stat.Frequency.getCount(C)J
   * Goal 33. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 34. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 35. org.apache.commons.math.stat.Frequency.getCount(C)J
   * Goal 36. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 37. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 38. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 39. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 40. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 41. Weak Mutation 45: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp Negation
   * Goal 42. Weak Mutation 46: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp IINC 1
   * Goal 43. Weak Mutation 47: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp IINC -1
   * Goal 44. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:223 - ReplaceComparisonOperator == -> !=
   * Goal 45. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> 1
   * Goal 46. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> -1
   * Goal 47. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:229 - ReplaceComparisonOperator = null -> != null
   * Goal 48. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:235 - InsertUnaryOp Negation
   * Goal 49. Weak Mutation 66: org.apache.commons.math.stat.Frequency.getCount(C)J:265 - InsertUnaryOp Negation
   * Goal 50. Weak Mutation 67: org.apache.commons.math.stat.Frequency.getCount(C)J:265 - InsertUnaryOp IINC 1
   * Goal 51. Weak Mutation 68: org.apache.commons.math.stat.Frequency.getCount(C)J:265 - InsertUnaryOp IINC -1
   * Goal 52. org.apache.commons.math.stat.Frequency.getCount(C)J:positive
   */

  @Test
  public void test10()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      frequency0.addValue('r');
      long long0 = frequency0.getCount('r');
  }

  //Test case number: 11
  /*
   * 82 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(I)J: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 6. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 7. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - true
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I15 Branch 10 IFEQ L334 - true
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I33 Branch 11 IFNONNULL L338 - false
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I56 Branch 12 IFNULL L345 - true
   * Goal 13. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I80 Branch 13 IFGE L352 - true
   * Goal 14. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I93 Branch 14 IFLT L356 - false
   * Goal 15. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Integer;)V
   * Goal 16. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 17. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: root-Branch in context: 
   * Goal 18. Branch org.apache.commons.math.stat.Frequency.getCumFreq(I)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(I)J
   * Goal 19. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 20. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 24. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 25. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 26. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 27. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 28. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 160
   * Goal 29. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 161
   * Goal 30. org.apache.commons.math.stat.Frequency.getCumFreq(I)J: Line 381
   * Goal 31. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 331
   * Goal 32. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 334
   * Goal 33. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 337
   * Goal 34. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 338
   * Goal 35. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 339
   * Goal 36. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 341
   * Goal 37. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 344
   * Goal 38. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 345
   * Goal 39. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 350
   * Goal 40. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 352
   * Goal 41. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 356
   * Goal 42. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 357
   * Goal 43. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 44. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 45. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 46. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 47. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 48. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: Line 491
   * Goal 49. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 50. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 51. org.apache.commons.math.stat.Frequency.getCumFreq(I)J
   * Goal 52. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 53. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 54. org.apache.commons.math.stat.Frequency.getCumFreq(I)J
   * Goal 55. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 56. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 57. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 58. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 59. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 60. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 61. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 62. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 63. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 64. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 65. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 66. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 67. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 68. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 69. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> 1
   * Goal 70. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> -1
   * Goal 71. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceComparisonOperator != -> <
   * Goal 72. Weak Mutation 98: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:334 - ReplaceComparisonOperator == -> !=
   * Goal 73. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:338 - ReplaceComparisonOperator != null -> = null
   * Goal 74. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> 1
   * Goal 75. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> -1
   * Goal 76. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:345 - ReplaceComparisonOperator = null -> != null
   * Goal 77. Weak Mutation 105: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:352 - ReplaceComparisonOperator >= -> ==
   * Goal 78. Weak Mutation 110: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:356 - ReplaceComparisonOperator < -> !=
   * Goal 79. Weak Mutation 113: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:381 - InsertUnaryOp Negation
   * Goal 80. Weak Mutation 114: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:381 - InsertUnaryOp IINC 1
   * Goal 81. Weak Mutation 115: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:381 - InsertUnaryOp IINC -1
   * Goal 82. org.apache.commons.math.stat.Frequency.getCumFreq(I)J:positive
   */

  @Test
  public void test11()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      Integer integer0 = new Integer(0);
      frequency0.addValue(integer0);
      long long0 = frequency0.getCumFreq(52);
  }

  //Test case number: 12
  /*
   * 175 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch
   * Goal 5. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L82 - true
   * Goal 6. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L82 - false
   * Goal 7. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 9. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 10. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 11. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true
   * Goal 12. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I28 Branch 7 IFNULL L229 - false
   * Goal 13. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: I10 Branch 8 IFNE L281 - true
   * Goal 14. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - true
   * Goal 15. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I15 Branch 10 IFEQ L334 - true
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I33 Branch 11 IFNONNULL L338 - false
   * Goal 17. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I56 Branch 12 IFNULL L345 - false
   * Goal 18. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I80 Branch 13 IFGE L352 - true
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I93 Branch 14 IFLT L356 - true
   * Goal 20. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I93 Branch 14 IFLT L356 - false
   * Goal 21. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I108 Branch 15 IFEQ L361 - false
   * Goal 22. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I120 Branch 16 IFLE L363 - true
   * Goal 23. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: I10 Branch 17 IFNE L423 - true
   * Goal 24. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 25. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: root-Branch in context: 
   * Goal 26. Branch org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(I)V
   * Goal 27. Branch org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L82 - false in context: org.apache.commons.math.stat.Frequency:toString()Ljava/lang/String;
   * Goal 28. Branch org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: I27 Branch 1 IFEQ L82 - true in context: org.apache.commons.math.stat.Frequency:toString()Ljava/lang/String;
   * Goal 29. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 30. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 31. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 151
   * Goal 32. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 152
   * Goal 33. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 34. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 35. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 36. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 37. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 38. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 39. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 40. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 223
   * Goal 41. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 226
   * Goal 42. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 228
   * Goal 43. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 229
   * Goal 44. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 230
   * Goal 45. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 234
   * Goal 46. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 235
   * Goal 47. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 331
   * Goal 48. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 334
   * Goal 49. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 337
   * Goal 50. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 338
   * Goal 51. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 339
   * Goal 52. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 341
   * Goal 53. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 344
   * Goal 54. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 345
   * Goal 55. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 346
   * Goal 56. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 350
   * Goal 57. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 352
   * Goal 58. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 356
   * Goal 59. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 357
   * Goal 60. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 360
   * Goal 61. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 361
   * Goal 62. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 362
   * Goal 63. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 363
   * Goal 64. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 366
   * Goal 65. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 422
   * Goal 66. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 423
   * Goal 67. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 426
   * Goal 68. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 280
   * Goal 69. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 281
   * Goal 70. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 284
   * Goal 71. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 72. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 73. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 74. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 75. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 76. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 78
   * Goal 77. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 79
   * Goal 78. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 80
   * Goal 79. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 81
   * Goal 80. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 82
   * Goal 81. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 83
   * Goal 82. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 84
   * Goal 83. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 85
   * Goal 84. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 86
   * Goal 85. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 87
   * Goal 86. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 88
   * Goal 87. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 89
   * Goal 88. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 90
   * Goal 89. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 91
   * Goal 90. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 92
   * Goal 91. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;: Line 93
   * Goal 92. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: Line 196
   * Goal 93. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: Line 491
   * Goal 94. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 95. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 96. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 97. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 98. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 99. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;
   * Goal 100. Weak Mutation 0: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:80 - ReplaceConstant - Value 	 Freq. 	 Pct. 	 Cum Pct. 
 -> 
   * Goal 101. Weak Mutation 1: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:82 - ReplaceComparisonOperator == -> !=
   * Goal 102. Weak Mutation 2: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:85 - ReplaceConstant - 9 -> 0
   * Goal 103. Weak Mutation 3: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:85 - ReplaceConstant - 9 -> 1
   * Goal 104. Weak Mutation 4: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:85 - ReplaceConstant - 9 -> -1
   * Goal 105. Weak Mutation 5: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:85 - ReplaceConstant - 9 -> 8
   * Goal 106. Weak Mutation 6: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:85 - ReplaceConstant - 9 -> 10
   * Goal 107. Weak Mutation 7: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:87 - ReplaceConstant - 9 -> 0
   * Goal 108. Weak Mutation 8: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:87 - ReplaceConstant - 9 -> 1
   * Goal 109. Weak Mutation 9: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:87 - ReplaceConstant - 9 -> -1
   * Goal 110. Weak Mutation 10: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:87 - ReplaceConstant - 9 -> 8
   * Goal 111. Weak Mutation 11: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:87 - ReplaceConstant - 9 -> 10
   * Goal 112. Weak Mutation 12: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:89 - ReplaceConstant - 9 -> 0
   * Goal 113. Weak Mutation 13: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:89 - ReplaceConstant - 9 -> 1
   * Goal 114. Weak Mutation 14: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:89 - ReplaceConstant - 9 -> -1
   * Goal 115. Weak Mutation 15: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:89 - ReplaceConstant - 9 -> 8
   * Goal 116. Weak Mutation 16: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:89 - ReplaceConstant - 9 -> 10
   * Goal 117. Weak Mutation 17: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:91 - ReplaceConstant - 10 -> 0
   * Goal 118. Weak Mutation 18: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:91 - ReplaceConstant - 10 -> 1
   * Goal 119. Weak Mutation 19: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:91 - ReplaceConstant - 10 -> -1
   * Goal 120. Weak Mutation 20: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:91 - ReplaceConstant - 10 -> 9
   * Goal 121. Weak Mutation 21: org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:91 - ReplaceConstant - 10 -> 11
   * Goal 122. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 123. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 124. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 125. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 126. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 127. Weak Mutation 41: org.apache.commons.math.stat.Frequency.addValue(I)V:151 - InsertUnaryOp Negation
   * Goal 128. Weak Mutation 42: org.apache.commons.math.stat.Frequency.addValue(I)V:151 - InsertUnaryOp IINC 1
   * Goal 129. Weak Mutation 43: org.apache.commons.math.stat.Frequency.addValue(I)V:151 - InsertUnaryOp IINC -1
   * Goal 130. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 131. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 132. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 133. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 134. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 135. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 136. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 137. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 138. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 139. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:223 - ReplaceComparisonOperator == -> !=
   * Goal 140. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> 1
   * Goal 141. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> -1
   * Goal 142. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:229 - ReplaceComparisonOperator = null -> != null
   * Goal 143. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:235 - InsertUnaryOp Negation
   * Goal 144. Weak Mutation 69: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - InsertUnaryOp Negation
   * Goal 145. Weak Mutation 70: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> 1
   * Goal 146. Weak Mutation 71: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> -1
   * Goal 147. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceComparisonOperator != -> <
   * Goal 148. Weak Mutation 79: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:284 - InsertUnaryOp Negation
   * Goal 149. Weak Mutation 80: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:284 - ReplaceArithmeticOperator / -> +
   * Goal 150. Weak Mutation 81: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:284 - ReplaceArithmeticOperator / -> %
   * Goal 151. Weak Mutation 82: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:284 - ReplaceArithmeticOperator / -> -
   * Goal 152. Weak Mutation 83: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:284 - ReplaceArithmeticOperator / -> *
   * Goal 153. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> 1
   * Goal 154. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> -1
   * Goal 155. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceComparisonOperator != -> <
   * Goal 156. Weak Mutation 98: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:334 - ReplaceComparisonOperator == -> !=
   * Goal 157. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:338 - ReplaceComparisonOperator != null -> = null
   * Goal 158. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> 1
   * Goal 159. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> -1
   * Goal 160. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:345 - ReplaceComparisonOperator = null -> != null
   * Goal 161. Weak Mutation 105: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:352 - ReplaceComparisonOperator >= -> ==
   * Goal 162. Weak Mutation 106: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:352 - ReplaceComparisonOperator >= -> >
   * Goal 163. Weak Mutation 109: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:356 - ReplaceComparisonOperator < -> -2
   * Goal 164. Weak Mutation 111: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:356 - ReplaceComparisonOperator < -> <=
   * Goal 165. Weak Mutation 112: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:361 - ReplaceComparisonOperator == -> !=
   * Goal 166. Weak Mutation 120: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - InsertUnaryOp Negation
   * Goal 167. Weak Mutation 121: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> 1
   * Goal 168. Weak Mutation 122: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> -1
   * Goal 169. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceComparisonOperator != -> <
   * Goal 170. Weak Mutation 130: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:426 - InsertUnaryOp Negation
   * Goal 171. Weak Mutation 131: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:426 - ReplaceArithmeticOperator / -> +
   * Goal 172. Weak Mutation 132: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:426 - ReplaceArithmeticOperator / -> %
   * Goal 173. Weak Mutation 133: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:426 - ReplaceArithmeticOperator / -> -
   * Goal 174. Weak Mutation 134: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:426 - ReplaceArithmeticOperator / -> *
   * Goal 175. org.apache.commons.math.stat.Frequency.toString()Ljava/lang/String;:nonnull
   */

  @Test
  public void test12()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      frequency0.addValue(0);
      frequency0.addValue(2264);
      String string0 = frequency0.toString();
  }

  //Test case number: 13
  /*
   * 68 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 4. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 5. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 6. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - true
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I15 Branch 10 IFEQ L334 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I33 Branch 11 IFNONNULL L338 - false
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: I10 Branch 17 IFNE L423 - true
   * Goal 10. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 11. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 12. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 13. Branch org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: I10 Branch 17 IFNE L423 - true in context: org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Object;)D
   * Goal 14. getCumPct(Ljava/lang/Object;)D_java.lang.NullPointerException_IMPLICIT
   * Goal 15. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 16. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 24. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 331
   * Goal 25. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 334
   * Goal 26. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 337
   * Goal 27. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 338
   * Goal 28. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 339
   * Goal 29. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 341
   * Goal 30. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 344
   * Goal 31. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 422
   * Goal 32. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 423
   * Goal 33. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 426
   * Goal 34. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 35. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 36. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 37. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 38. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 39. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 40. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 41. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D
   * Goal 42. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 43. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 44. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 45. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 46. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 47. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 48. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 49. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 50. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 51. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 52. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 53. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 54. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 55. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 56. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 57. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 58. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> 1
   * Goal 59. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> -1
   * Goal 60. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceComparisonOperator != -> <
   * Goal 61. Weak Mutation 98: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:334 - ReplaceComparisonOperator == -> !=
   * Goal 62. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:338 - ReplaceComparisonOperator != null -> = null
   * Goal 63. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> 1
   * Goal 64. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> -1
   * Goal 65. Weak Mutation 120: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - InsertUnaryOp Negation
   * Goal 66. Weak Mutation 121: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> 1
   * Goal 67. Weak Mutation 122: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> -1
   * Goal 68. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceComparisonOperator != -> <
   */

  @Test
  public void test13()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      // Undeclared exception!
      try { 
        frequency0.getCumPct((Object) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  //Test case number: 14
  /*
   * 16 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true
   * Goal 3. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 4. Branch org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true in context: org.apache.commons.math.stat.Frequency:getCount(Ljava/lang/Object;)J
   * Goal 5. getCount(Ljava/lang/Object;)J_java.lang.NullPointerException_IMPLICIT
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 8. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 223
   * Goal 9. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 226
   * Goal 10. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 228
   * Goal 11. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 12. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J
   * Goal 13. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 14. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:223 - ReplaceComparisonOperator == -> !=
   * Goal 15. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> 1
   * Goal 16. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> -1
   */

  @Test
  public void test14()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      // Undeclared exception!
      try { 
        frequency0.getCount((Object) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  //Test case number: 15
  /*
   * 11 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch
   * Goal 3. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Integer;)V
   * Goal 4. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 5. addValue(Ljava/lang/Integer;)V_java.lang.NullPointerException_IMPLICIT
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 8. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 160
   * Goal 9. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 10. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 11. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   */

  @Test
  public void test15()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      // Undeclared exception!
      try { 
        frequency0.addValue((Integer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.apache.commons.math.stat.Frequency", e);
      }
  }

  //Test case number: 16
  /*
   * 38 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Integer;)V
   * Goal 7. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 8. Branch org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(C)V
   * Goal 9. addValue(Ljava/lang/Integer;)V_java.lang.IllegalArgumentException_EXPLICIT
   * Goal 10. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 11. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 178
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 179
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 141
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 160
   * Goal 24. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 25. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 26. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 27. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 28. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 29. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 30. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 31. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 32. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 33. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 34. Weak Mutation 39: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:141 - ReplaceConstant - Value not comparable to existing values. -> 
   * Goal 35. Weak Mutation 40: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:141 - ReplaceComparisonOperator == -> !=
   * Goal 36. Weak Mutation 45: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp Negation
   * Goal 37. Weak Mutation 46: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp IINC 1
   * Goal 38. Weak Mutation 47: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp IINC -1
   */

  @Test
  public void test16()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      frequency0.addValue('*');
      Integer integer0 = new Integer(3486);
      // Undeclared exception!
      try { 
        frequency0.addValue(integer0);
      } catch(IllegalArgumentException e) {
         //
         // Value not comparable to existing values.
         //
         assertThrownBy("org.apache.commons.math.stat.Frequency", e);
      }
  }

  //Test case number: 17
  /*
   * 14 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 3. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 4. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 5. addValue(Ljava/lang/Comparable;)V_java.lang.NullPointerException_IMPLICIT
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 8. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 9. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 10. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 11. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 13. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 14. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   */

  @Test
  public void test17()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      // Undeclared exception!
      try { 
        frequency0.addValue((Comparable<?>) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  //Test case number: 18
  /*
   * 36 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(I)V
   * Goal 7. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 8. addValue(Ljava/lang/Comparable;)V_java.lang.IllegalArgumentException_EXPLICIT
   * Goal 9. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 10. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 11. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 151
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 152
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 141
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 22. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 24. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 25. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 26. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 27. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 28. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 29. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 30. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 31. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 32. Weak Mutation 39: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:141 - ReplaceConstant - Value not comparable to existing values. -> 
   * Goal 33. Weak Mutation 40: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:141 - ReplaceComparisonOperator == -> !=
   * Goal 34. Weak Mutation 41: org.apache.commons.math.stat.Frequency.addValue(I)V:151 - InsertUnaryOp Negation
   * Goal 35. Weak Mutation 42: org.apache.commons.math.stat.Frequency.addValue(I)V:151 - InsertUnaryOp IINC 1
   * Goal 36. Weak Mutation 43: org.apache.commons.math.stat.Frequency.addValue(I)V:151 - InsertUnaryOp IINC -1
   */

  @Test
  public void test18()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      frequency0.addValue(0);
      // Undeclared exception!
      try { 
        frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
      } catch(IllegalArgumentException e) {
         //
         // Value not comparable to existing values.
         //
         assertThrownBy("org.apache.commons.math.stat.Frequency", e);
      }
  }

  //Test case number: 19
  /*
   * 38 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: I4 Branch 2 IFNE L110 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(J)V
   * Goal 7. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 8. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: I4 Branch 2 IFNE L110 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Object;)V
   * Goal 9. addValue(J)V_java.lang.IllegalArgumentException_EXPLICIT
   * Goal 10. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 11. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(J)V: Line 169
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 141
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 110
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 114
   * Goal 24. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 115
   * Goal 25. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 26. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 27. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V
   * Goal 28. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 29. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V
   * Goal 30. Weak Mutation 22: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:110 - ReplaceComparisonOperator != -> ==
   * Goal 31. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 32. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 33. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 34. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 35. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 36. Weak Mutation 39: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:141 - ReplaceConstant - Value not comparable to existing values. -> 
   * Goal 37. Weak Mutation 40: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:141 - ReplaceComparisonOperator == -> !=
   * Goal 38. Weak Mutation 44: org.apache.commons.math.stat.Frequency.addValue(J)V:169 - InsertUnaryOp Negation
   */

  @Test
  public void test19()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      frequency0.addValue((Object) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n2264\t1\t50%\t100%\n");
      // Undeclared exception!
      try { 
        frequency0.addValue(0L);
      } catch(IllegalArgumentException e) {
         //
         // Value not comparable to existing values.
         //
         assertThrownBy("org.apache.commons.math.stat.Frequency", e);
      }
  }

  //Test case number: 20
  /*
   * 41 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 7. Branch org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(I)V
   * Goal 8. Branch org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(C)V
   * Goal 9. addValue(I)V_java.lang.IllegalArgumentException_EXPLICIT
   * Goal 10. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 11. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 178
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 179
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 151
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 141
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 24. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 25. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 26. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 27. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 28. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 29. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 30. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 31. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 32. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 33. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 34. Weak Mutation 39: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:141 - ReplaceConstant - Value not comparable to existing values. -> 
   * Goal 35. Weak Mutation 40: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:141 - ReplaceComparisonOperator == -> !=
   * Goal 36. Weak Mutation 41: org.apache.commons.math.stat.Frequency.addValue(I)V:151 - InsertUnaryOp Negation
   * Goal 37. Weak Mutation 42: org.apache.commons.math.stat.Frequency.addValue(I)V:151 - InsertUnaryOp IINC 1
   * Goal 38. Weak Mutation 43: org.apache.commons.math.stat.Frequency.addValue(I)V:151 - InsertUnaryOp IINC -1
   * Goal 39. Weak Mutation 45: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp Negation
   * Goal 40. Weak Mutation 46: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp IINC 1
   * Goal 41. Weak Mutation 47: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp IINC -1
   */

  @Test
  public void test20()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      frequency0.addValue('l');
      // Undeclared exception!
      try { 
        frequency0.addValue((-700));
      } catch(IllegalArgumentException e) {
         //
         // Value not comparable to existing values.
         //
         assertThrownBy("org.apache.commons.math.stat.Frequency", e);
      }
  }

  //Test case number: 21
  /*
   * 36 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(C)V
   * Goal 7. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 8. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 9. addValue(C)V_java.lang.IllegalArgumentException_EXPLICIT
   * Goal 10. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 11. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 178
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 139
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 141
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 22. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 24. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 25. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 26. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 27. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 28. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 29. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 30. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 31. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 32. Weak Mutation 39: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:141 - ReplaceConstant - Value not comparable to existing values. -> 
   * Goal 33. Weak Mutation 40: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:141 - ReplaceComparisonOperator == -> !=
   * Goal 34. Weak Mutation 45: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp Negation
   * Goal 35. Weak Mutation 46: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp IINC 1
   * Goal 36. Weak Mutation 47: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp IINC -1
   */

  @Test
  public void test21()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      frequency0.addValue((Comparable<?>) "");
      // Undeclared exception!
      try { 
        frequency0.addValue('(');
      } catch(IllegalArgumentException e) {
         //
         // Value not comparable to existing values.
         //
         assertThrownBy("org.apache.commons.math.stat.Frequency", e);
      }
  }

  //Test case number: 22
  /*
   * 31 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: I10 Branch 17 IFNE L423 - false
   * Goal 4. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: I10 Branch 17 IFNE L423 - false in context: org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Object;)D
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 422
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 423
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 424
   * Goal 11. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 12. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 13. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 14. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 15. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D
   * Goal 17. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 18. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D
   * Goal 19. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 20. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 21. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 22. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 23. Weak Mutation 120: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - InsertUnaryOp Negation
   * Goal 24. Weak Mutation 121: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> 1
   * Goal 25. Weak Mutation 122: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> -1
   * Goal 26. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceComparisonOperator != -> -1
   * Goal 27. Weak Mutation 126: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:424 - ReplaceConstant - NaN -> 0.0
   * Goal 28. Weak Mutation 127: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:424 - ReplaceConstant - NaN -> 1.0
   * Goal 29. Weak Mutation 128: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:424 - ReplaceConstant - NaN -> -1.0
   * Goal 30. Weak Mutation 129: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:424 - ReplaceConstant - NaN -> NaN
   * Goal 31. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:positive
   */

  @Test
  public void test22()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      Object object0 = new Object();
      double double0 = frequency0.getCumPct(object0);
  }

  //Test case number: 23
  /*
   * 81 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 5. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 6. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I15 Branch 10 IFEQ L334 - true
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I33 Branch 11 IFNONNULL L338 - false
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I56 Branch 12 IFNULL L345 - false
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I80 Branch 13 IFGE L352 - true
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I93 Branch 14 IFLT L356 - false
   * Goal 13. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 14. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: root-Branch in context: 
   * Goal 15. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 16. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 17. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 18. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I15 Branch 10 IFEQ L334 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 19. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I33 Branch 11 IFNONNULL L338 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 20. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I56 Branch 12 IFNULL L345 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 21. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I80 Branch 13 IFGE L352 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 22. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I93 Branch 14 IFLT L356 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 23. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 24. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 25. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 26. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 27. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 28. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 29. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 30. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 31. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 32. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 331
   * Goal 33. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 334
   * Goal 34. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 337
   * Goal 35. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 338
   * Goal 36. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 339
   * Goal 37. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 341
   * Goal 38. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 344
   * Goal 39. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 345
   * Goal 40. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 346
   * Goal 41. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 350
   * Goal 42. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 352
   * Goal 43. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 356
   * Goal 44. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 357
   * Goal 45. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 46. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 47. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 48. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 49. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 50. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: Line 491
   * Goal 51. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 52. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 53. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 54. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 55. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 56. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 57. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 58. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 59. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 60. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 61. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 62. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 63. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 64. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 65. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 66. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 67. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 68. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 69. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 70. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 71. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> 1
   * Goal 72. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> -1
   * Goal 73. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceComparisonOperator != -> <
   * Goal 74. Weak Mutation 98: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:334 - ReplaceComparisonOperator == -> !=
   * Goal 75. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:338 - ReplaceComparisonOperator != null -> = null
   * Goal 76. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> 1
   * Goal 77. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> -1
   * Goal 78. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:345 - ReplaceComparisonOperator = null -> != null
   * Goal 79. Weak Mutation 106: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:352 - ReplaceComparisonOperator >= -> >
   * Goal 80. Weak Mutation 111: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:356 - ReplaceComparisonOperator < -> <=
   * Goal 81. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:positive
   */

  @Test
  public void test23()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      frequency0.addValue((Comparable<?>) "");
      long long0 = frequency0.getCumFreq((Object) "");
  }

  //Test case number: 24
  /*
   * 75 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 5. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 6. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 7. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - true
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I15 Branch 10 IFEQ L334 - true
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I15 Branch 10 IFEQ L334 - false
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I33 Branch 11 IFNONNULL L338 - false
   * Goal 12. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 13. Branch org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(C)V
   * Goal 14. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 15. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I15 Branch 10 IFEQ L334 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 16. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 17. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 178
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 179
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 24. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 25. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 26. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 27. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: Line 393
   * Goal 28. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 331
   * Goal 29. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 334
   * Goal 30. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 335
   * Goal 31. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 337
   * Goal 32. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 338
   * Goal 33. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 339
   * Goal 34. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 341
   * Goal 35. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 344
   * Goal 36. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 348
   * Goal 37. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 349
   * Goal 38. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 39. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 40. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 41. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 42. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 43. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 44. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 45. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 46. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 47. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 48. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 49. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 50. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 51. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 52. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 53. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 54. Weak Mutation 45: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp Negation
   * Goal 55. Weak Mutation 46: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp IINC 1
   * Goal 56. Weak Mutation 47: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp IINC -1
   * Goal 57. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 58. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 59. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 60. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 61. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 62. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 63. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 64. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 65. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 66. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> 1
   * Goal 67. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> -1
   * Goal 68. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceComparisonOperator != -> <
   * Goal 69. Weak Mutation 98: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:334 - ReplaceComparisonOperator == -> !=
   * Goal 70. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:338 - ReplaceComparisonOperator != null -> = null
   * Goal 71. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> 1
   * Goal 72. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> -1
   * Goal 73. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:349 - InsertUnaryOp Negation
   * Goal 74. Weak Mutation 116: org.apache.commons.math.stat.Frequency.getCumFreq(J)J:393 - InsertUnaryOp Negation
   * Goal 75. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:zero
   */

  @Test
  public void test24()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      frequency0.addValue('}');
      Integer integer0 = new Integer((-15));
      long long0 = frequency0.getCumFreq((Object) integer0);
  }

  //Test case number: 25
  /*
   * 27 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - false
   * Goal 4. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 331
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 332
   * Goal 10. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 11. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 12. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 13. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 14. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 15. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 16. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 17. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 18. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 19. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 20. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 21. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 22. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> 1
   * Goal 23. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> -1
   * Goal 24. Weak Mutation 93: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceComparisonOperator != -> -1
   * Goal 25. Weak Mutation 96: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:332 - ReplaceConstant - 0 -> 1
   * Goal 26. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:332 - ReplaceConstant - 0 -> -1
   * Goal 27. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:zero
   */

  @Test
  public void test25()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      long long0 = frequency0.getCumFreq((Object) null);
  }

  //Test case number: 26
  /*
   * 61 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 5. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 6. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 7. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: I10 Branch 8 IFNE L281 - true
   * Goal 9. Branch org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(J)V
   * Goal 10. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 11. Branch org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: I10 Branch 8 IFNE L281 - true in context: org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Object;)D
   * Goal 12. getPct(Ljava/lang/Object;)D_java.lang.NullPointerException_IMPLICIT
   * Goal 13. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 14. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(J)V: Line 169
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(J)V: Line 170
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 24. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 223
   * Goal 25. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 226
   * Goal 26. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 228
   * Goal 27. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 280
   * Goal 28. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 281
   * Goal 29. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 284
   * Goal 30. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 31. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 32. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 33. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 34. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 35. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 36. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 37. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D
   * Goal 38. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 39. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 40. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 41. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 42. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 43. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 44. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 45. Weak Mutation 44: org.apache.commons.math.stat.Frequency.addValue(J)V:169 - InsertUnaryOp Negation
   * Goal 46. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 47. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 48. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 49. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 50. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 51. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 52. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 53. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 54. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 55. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:223 - ReplaceComparisonOperator == -> !=
   * Goal 56. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> 1
   * Goal 57. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> -1
   * Goal 58. Weak Mutation 69: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - InsertUnaryOp Negation
   * Goal 59. Weak Mutation 70: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> 1
   * Goal 60. Weak Mutation 71: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> -1
   * Goal 61. Weak Mutation 73: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceComparisonOperator != -> <
   */

  @Test
  public void test26()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      frequency0.addValue(1L);
      // Undeclared exception!
      try { 
        frequency0.getPct((Object) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  //Test case number: 27
  /*
   * 31 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 3. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: I10 Branch 8 IFNE L281 - false
   * Goal 4. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: I10 Branch 8 IFNE L281 - false in context: org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Object;)D
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 8. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 280
   * Goal 9. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 281
   * Goal 10. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 282
   * Goal 11. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 12. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 13. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 14. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 15. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 16. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D
   * Goal 17. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 18. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D
   * Goal 19. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 20. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 21. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 22. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 23. Weak Mutation 69: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - InsertUnaryOp Negation
   * Goal 24. Weak Mutation 70: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> 1
   * Goal 25. Weak Mutation 71: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> -1
   * Goal 26. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceComparisonOperator != -> -1
   * Goal 27. Weak Mutation 75: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:282 - ReplaceConstant - NaN -> 0.0
   * Goal 28. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:282 - ReplaceConstant - NaN -> 1.0
   * Goal 29. Weak Mutation 77: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:282 - ReplaceConstant - NaN -> -1.0
   * Goal 30. Weak Mutation 78: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:282 - ReplaceConstant - NaN -> NaN
   * Goal 31. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:positive
   */

  @Test
  public void test27()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      Object object0 = new Object();
      double double0 = frequency0.getPct(object0);
  }

  //Test case number: 28
  /*
   * 45 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 5. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true
   * Goal 6. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I28 Branch 7 IFNULL L229 - false
   * Goal 7. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Integer;)V
   * Goal 8. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 9. Branch org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true in context: org.apache.commons.math.stat.Frequency:getCount(Ljava/lang/Object;)J
   * Goal 10. Branch org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I28 Branch 7 IFNULL L229 - false in context: org.apache.commons.math.stat.Frequency:getCount(Ljava/lang/Object;)J
   * Goal 11. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 12. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 160
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V: Line 161
   * Goal 22. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 223
   * Goal 23. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 226
   * Goal 24. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 228
   * Goal 25. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 229
   * Goal 26. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 230
   * Goal 27. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 234
   * Goal 28. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 235
   * Goal 29. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 30. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 31. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J
   * Goal 32. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 33. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Integer;)V
   * Goal 34. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J
   * Goal 35. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 36. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 37. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 38. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 39. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 40. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:223 - ReplaceComparisonOperator == -> !=
   * Goal 41. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> 1
   * Goal 42. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> -1
   * Goal 43. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:229 - ReplaceComparisonOperator = null -> != null
   * Goal 44. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:235 - InsertUnaryOp Negation
   * Goal 45. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:positive
   */

  @Test
  public void test28()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      Integer integer0 = new Integer(0);
      frequency0.addValue(integer0);
      Long long0 = new Long(0L);
      long long1 = frequency0.getCount((Object) long0);
  }

  //Test case number: 29
  /*
   * 24 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true
   * Goal 3. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I28 Branch 7 IFNULL L229 - true
   * Goal 4. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true in context: org.apache.commons.math.stat.Frequency:getCount(Ljava/lang/Object;)J
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I28 Branch 7 IFNULL L229 - true in context: org.apache.commons.math.stat.Frequency:getCount(Ljava/lang/Object;)J
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 8. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 9. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 223
   * Goal 10. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 226
   * Goal 11. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 228
   * Goal 12. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 229
   * Goal 13. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 234
   * Goal 14. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 235
   * Goal 15. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 16. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J
   * Goal 17. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 18. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J
   * Goal 19. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:223 - ReplaceComparisonOperator == -> !=
   * Goal 20. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> 1
   * Goal 21. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> -1
   * Goal 22. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:229 - ReplaceComparisonOperator = null -> != null
   * Goal 23. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:235 - InsertUnaryOp Negation
   * Goal 24. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:zero
   */

  @Test
  public void test29()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Long long0 = new Long(2387L);
      long long1 = frequency0.getCount((Object) long0);
  }

  //Test case number: 30
  /*
   * 48 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 5. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 6. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 7. Branch org.apache.commons.math.stat.Frequency.addValue(J)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(J)V
   * Goal 8. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 9. Branch org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true in context: org.apache.commons.math.stat.Frequency:getSumFreq()J
   * Goal 10. Branch org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false in context: org.apache.commons.math.stat.Frequency:getSumFreq()J
   * Goal 11. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 12. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(J)V: Line 169
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(J)V: Line 170
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 22. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 23. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 24. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 25. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 26. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 27. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 28. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 29. org.apache.commons.math.stat.Frequency.getSumFreq()J
   * Goal 30. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 31. org.apache.commons.math.stat.Frequency.addValue(J)V
   * Goal 32. org.apache.commons.math.stat.Frequency.getSumFreq()J
   * Goal 33. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 34. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 35. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 36. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 37. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 38. Weak Mutation 44: org.apache.commons.math.stat.Frequency.addValue(J)V:169 - InsertUnaryOp Negation
   * Goal 39. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 40. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 41. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 42. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 43. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 44. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 45. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 46. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 47. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 48. org.apache.commons.math.stat.Frequency.getSumFreq()J:positive
   */

  @Test
  public void test30()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      frequency0.addValue(0L);
      long long0 = frequency0.getSumFreq();
  }

  //Test case number: 31
  /*
   * 19 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 3. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 4. Branch org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true in context: org.apache.commons.math.stat.Frequency:getSumFreq()J
   * Goal 5. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 7. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 8. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 9. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 10. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 11. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 12. org.apache.commons.math.stat.Frequency.getSumFreq()J
   * Goal 13. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 14. org.apache.commons.math.stat.Frequency.getSumFreq()J
   * Goal 15. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 16. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 17. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 18. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 19. org.apache.commons.math.stat.Frequency.getSumFreq()J:zero
   */

  @Test
  public void test31()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      long long0 = frequency0.getSumFreq();
  }

  //Test case number: 32
  /*
   * 63 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - false
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 4. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 5. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 6. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - true
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I15 Branch 10 IFEQ L334 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I33 Branch 11 IFNONNULL L338 - false
   * Goal 9. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 10. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 11. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 12. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 13. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I15 Branch 10 IFEQ L334 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 14. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I33 Branch 11 IFNONNULL L338 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 15. getCumFreq(Ljava/lang/Object;)J_java.lang.NullPointerException_IMPLICIT
   * Goal 16. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 17. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 130
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 24. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 25. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 26. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 331
   * Goal 27. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 334
   * Goal 28. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 337
   * Goal 29. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 338
   * Goal 30. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 339
   * Goal 31. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 341
   * Goal 32. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 344
   * Goal 33. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 34. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 35. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 36. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 37. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 38. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 39. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 40. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 41. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 42. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 43. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 44. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 45. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 46. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 47. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 48. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 49. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 50. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 51. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 52. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 53. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 54. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 55. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 56. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 57. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> 1
   * Goal 58. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> -1
   * Goal 59. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceComparisonOperator != -> <
   * Goal 60. Weak Mutation 98: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:334 - ReplaceComparisonOperator == -> !=
   * Goal 61. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:338 - ReplaceComparisonOperator != null -> = null
   * Goal 62. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> 1
   * Goal 63. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> -1
   */

  @Test
  public void test32()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      Integer integer0 = Integer.valueOf(0);
      frequency0.addValue((Comparable<?>) integer0);
      // Undeclared exception!
      try { 
        frequency0.getCumFreq((Object) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  //Test case number: 33
  /*
   * 12 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch
   * Goal 3. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 4. Branch org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch in context: org.apache.commons.math.stat.Frequency:valuesIterator()Ljava/util/Iterator;
   * Goal 5. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 7. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: Line 196
   * Goal 8. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 9. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 10. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 11. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;
   * Goal 12. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;:nonnull
   */

  @Test
  public void test33()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      Iterator iterator0 = frequency0.valuesIterator();
  }

  //Test case number: 34
  /*
   * 111 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch
   * Goal 5. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: root-Branch
   * Goal 6. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 7. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 8. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 9. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 10. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true
   * Goal 11. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I28 Branch 7 IFNULL L229 - false
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - true
   * Goal 13. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I15 Branch 10 IFEQ L334 - true
   * Goal 14. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I33 Branch 11 IFNONNULL L338 - false
   * Goal 15. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I56 Branch 12 IFNULL L345 - true
   * Goal 16. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I80 Branch 13 IFGE L352 - true
   * Goal 17. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I93 Branch 14 IFLT L356 - true
   * Goal 18. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I108 Branch 15 IFEQ L361 - false
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I120 Branch 16 IFLE L363 - true
   * Goal 20. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I120 Branch 16 IFLE L363 - false
   * Goal 21. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 22. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: root-Branch in context: 
   * Goal 23. Branch org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(C)J
   * Goal 24. Branch org.apache.commons.math.stat.Frequency.addValue(C)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(C)V
   * Goal 25. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 26. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 27. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 178
   * Goal 28. org.apache.commons.math.stat.Frequency.addValue(C)V: Line 179
   * Goal 29. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 30. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 31. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 32. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 33. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 34. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 35. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 36. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 223
   * Goal 37. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 226
   * Goal 38. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 228
   * Goal 39. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 229
   * Goal 40. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 230
   * Goal 41. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 234
   * Goal 42. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 235
   * Goal 43. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: Line 405
   * Goal 44. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 331
   * Goal 45. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 334
   * Goal 46. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 337
   * Goal 47. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 338
   * Goal 48. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 339
   * Goal 49. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 341
   * Goal 50. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 344
   * Goal 51. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 345
   * Goal 52. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 350
   * Goal 53. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 352
   * Goal 54. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 356
   * Goal 55. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 360
   * Goal 56. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 361
   * Goal 57. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 362
   * Goal 58. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 363
   * Goal 59. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 364
   * Goal 60. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 366
   * Goal 61. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 368
   * Goal 62. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 63. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 64. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 65. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 66. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 67. org.apache.commons.math.stat.Frequency.valuesIterator()Ljava/util/Iterator;: Line 196
   * Goal 68. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: Line 491
   * Goal 69. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 70. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 71. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 72. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 73. org.apache.commons.math.stat.Frequency.addValue(C)V
   * Goal 74. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 75. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 76. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 77. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 78. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 79. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 80. Weak Mutation 45: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp Negation
   * Goal 81. Weak Mutation 46: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp IINC 1
   * Goal 82. Weak Mutation 47: org.apache.commons.math.stat.Frequency.addValue(C)V:178 - InsertUnaryOp IINC -1
   * Goal 83. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 84. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 85. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 86. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 87. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 88. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 89. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 90. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 91. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 92. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:223 - ReplaceComparisonOperator == -> !=
   * Goal 93. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> 1
   * Goal 94. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> -1
   * Goal 95. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:229 - ReplaceComparisonOperator = null -> != null
   * Goal 96. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:235 - InsertUnaryOp Negation
   * Goal 97. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> 1
   * Goal 98. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> -1
   * Goal 99. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceComparisonOperator != -> <
   * Goal 100. Weak Mutation 98: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:334 - ReplaceComparisonOperator == -> !=
   * Goal 101. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:338 - ReplaceComparisonOperator != null -> = null
   * Goal 102. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> 1
   * Goal 103. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> -1
   * Goal 104. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:345 - ReplaceComparisonOperator = null -> != null
   * Goal 105. Weak Mutation 105: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:352 - ReplaceComparisonOperator >= -> ==
   * Goal 106. Weak Mutation 109: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:356 - ReplaceComparisonOperator < -> -2
   * Goal 107. Weak Mutation 112: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:361 - ReplaceComparisonOperator == -> !=
   * Goal 108. Weak Mutation 117: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:405 - InsertUnaryOp Negation
   * Goal 109. Weak Mutation 118: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:405 - InsertUnaryOp IINC 1
   * Goal 110. Weak Mutation 119: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:405 - InsertUnaryOp IINC -1
   * Goal 111. org.apache.commons.math.stat.Frequency.getCumFreq(C)J:positive
   */

  @Test
  public void test34()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      frequency0.addValue(')');
      frequency0.addValue('0');
      long long0 = frequency0.getCumFreq('*');
  }

  //Test case number: 35
  /*
   * 28 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCount(J)J: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - false
   * Goal 5. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I28 Branch 7 IFNULL L229 - true
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 7. Branch org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - false in context: org.apache.commons.math.stat.Frequency:getCount(Ljava/lang/Object;)J
   * Goal 8. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 9. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 10. org.apache.commons.math.stat.Frequency.getCount(J)J: Line 255
   * Goal 11. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 223
   * Goal 12. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 224
   * Goal 13. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 226
   * Goal 14. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 228
   * Goal 15. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 229
   * Goal 16. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 234
   * Goal 17. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 235
   * Goal 18. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 19. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J
   * Goal 20. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 21. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J
   * Goal 22. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:223 - ReplaceComparisonOperator == -> !=
   * Goal 23. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> 1
   * Goal 24. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> -1
   * Goal 25. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:229 - ReplaceComparisonOperator = null -> != null
   * Goal 26. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:235 - InsertUnaryOp Negation
   * Goal 27. Weak Mutation 65: org.apache.commons.math.stat.Frequency.getCount(J)J:255 - InsertUnaryOp Negation
   * Goal 28. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:zero
   */

  @Test
  public void test35()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      Integer integer0 = new Integer(0);
      long long0 = frequency0.getCount((Object) integer0);
  }

  //Test case number: 36
  /*
   * 34 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 7. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 8. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 9. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 10. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 11. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 13. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 14. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 15. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 137
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 19. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 21. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 23. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 24. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 25. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 26. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 27. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 28. Weak Mutation 32: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:137 - ReplaceConstant - 1 -> 0
   * Goal 29. Weak Mutation 33: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:137 - ReplaceConstant - 1 -> -1
   * Goal 30. Weak Mutation 34: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:137 - ReplaceConstant - 1 -> 2
   * Goal 31. Weak Mutation 35: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:137 - ReplaceArithmeticOperator + -> %
   * Goal 32. Weak Mutation 36: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:137 - ReplaceArithmeticOperator + -> -
   * Goal 33. Weak Mutation 37: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:137 - ReplaceArithmeticOperator + -> *
   * Goal 34. Weak Mutation 38: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:137 - ReplaceArithmeticOperator + -> /
   */

  @Test
  public void test36()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      frequency0.addValue((Comparable<?>) "");
      frequency0.addValue((Comparable<?>) "");
  }

  //Test case number: 37
  /*
   * 18 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: I4 Branch 2 IFNE L110 - false
   * Goal 3. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 4. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: I4 Branch 2 IFNE L110 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Object;)V
   * Goal 5. addValue(Ljava/lang/Object;)V_java.lang.IllegalArgumentException_EXPLICIT
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 8. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 110
   * Goal 9. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 111
   * Goal 10. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V: Line 113
   * Goal 11. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 12. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V
   * Goal 13. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 14. Weak Mutation 22: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:110 - ReplaceComparisonOperator != -> ==
   * Goal 15. Weak Mutation 23: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:111 - ReplaceConstant - -1 -> 0
   * Goal 16. Weak Mutation 24: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:111 - ReplaceConstant - -1 -> 1
   * Goal 17. Weak Mutation 25: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:111 - ReplaceConstant - -1 -> -2
   * Goal 18. Weak Mutation 26: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Object;)V:113 - ReplaceComparisonOperator == -> !=
   */

  @Test
  public void test37()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      // Undeclared exception!
      try { 
        frequency0.addValue((Object) null);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.apache.commons.math.stat.Frequency", e);
      }
  }

  //Test case number: 38
  /*
   * 26 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCount(J)J: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I28 Branch 7 IFNULL L229 - true
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.getCount(J)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(J)J
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 8. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 9. org.apache.commons.math.stat.Frequency.getCount(J)J: Line 255
   * Goal 10. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 223
   * Goal 11. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 226
   * Goal 12. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 228
   * Goal 13. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 229
   * Goal 14. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 234
   * Goal 15. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 235
   * Goal 16. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 17. org.apache.commons.math.stat.Frequency.getCount(J)J
   * Goal 18. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 19. org.apache.commons.math.stat.Frequency.getCount(J)J
   * Goal 20. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:223 - ReplaceComparisonOperator == -> !=
   * Goal 21. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> 1
   * Goal 22. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> -1
   * Goal 23. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:229 - ReplaceComparisonOperator = null -> != null
   * Goal 24. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:235 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 65: org.apache.commons.math.stat.Frequency.getCount(J)J:255 - InsertUnaryOp Negation
   * Goal 26. org.apache.commons.math.stat.Frequency.getCount(J)J:zero
   */

  @Test
  public void test38()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      long long0 = frequency0.getCount((-1311L));
  }

  //Test case number: 39
  /*
   * 36 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumPct(I)D: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: I10 Branch 17 IFNE L423 - false
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.getCumPct(I)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(I)D
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 8. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumPct(I)D: Line 439
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 422
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 423
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 424
   * Goal 13. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 14. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 15. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 16. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 17. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 18. org.apache.commons.math.stat.Frequency.getCumPct(I)D
   * Goal 19. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 20. org.apache.commons.math.stat.Frequency.getCumPct(I)D
   * Goal 21. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 22. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 23. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 24. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 120: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - InsertUnaryOp Negation
   * Goal 26. Weak Mutation 121: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> 1
   * Goal 27. Weak Mutation 122: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> -1
   * Goal 28. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceComparisonOperator != -> -1
   * Goal 29. Weak Mutation 126: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:424 - ReplaceConstant - NaN -> 0.0
   * Goal 30. Weak Mutation 127: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:424 - ReplaceConstant - NaN -> 1.0
   * Goal 31. Weak Mutation 128: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:424 - ReplaceConstant - NaN -> -1.0
   * Goal 32. Weak Mutation 129: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:424 - ReplaceConstant - NaN -> NaN
   * Goal 33. Weak Mutation 135: org.apache.commons.math.stat.Frequency.getCumPct(I)D:439 - InsertUnaryOp Negation
   * Goal 34. Weak Mutation 136: org.apache.commons.math.stat.Frequency.getCumPct(I)D:439 - InsertUnaryOp IINC 1
   * Goal 35. Weak Mutation 137: org.apache.commons.math.stat.Frequency.getCumPct(I)D:439 - InsertUnaryOp IINC -1
   * Goal 36. org.apache.commons.math.stat.Frequency.getCumPct(I)D:positive
   */

  @Test
  public void test39()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      double double0 = frequency0.getCumPct(1);
  }

  //Test case number: 40
  /*
   * 36 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: I10 Branch 8 IFNE L281 - false
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.getPct(C)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(C)D
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 8. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 9. org.apache.commons.math.stat.Frequency.getPct(C)D: Line 317
   * Goal 10. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 280
   * Goal 11. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 281
   * Goal 12. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 282
   * Goal 13. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 14. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 15. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 16. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 17. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 18. org.apache.commons.math.stat.Frequency.getPct(C)D
   * Goal 19. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 20. org.apache.commons.math.stat.Frequency.getPct(C)D
   * Goal 21. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 22. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 23. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 24. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 69: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - InsertUnaryOp Negation
   * Goal 26. Weak Mutation 70: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> 1
   * Goal 27. Weak Mutation 71: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> -1
   * Goal 28. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceComparisonOperator != -> -1
   * Goal 29. Weak Mutation 75: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:282 - ReplaceConstant - NaN -> 0.0
   * Goal 30. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:282 - ReplaceConstant - NaN -> 1.0
   * Goal 31. Weak Mutation 77: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:282 - ReplaceConstant - NaN -> -1.0
   * Goal 32. Weak Mutation 78: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:282 - ReplaceConstant - NaN -> NaN
   * Goal 33. Weak Mutation 88: org.apache.commons.math.stat.Frequency.getPct(C)D:317 - InsertUnaryOp Negation
   * Goal 34. Weak Mutation 89: org.apache.commons.math.stat.Frequency.getPct(C)D:317 - InsertUnaryOp IINC 1
   * Goal 35. Weak Mutation 90: org.apache.commons.math.stat.Frequency.getPct(C)D:317 - InsertUnaryOp IINC -1
   * Goal 36. org.apache.commons.math.stat.Frequency.getPct(C)D:positive
   */

  @Test
  public void test40()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      double double0 = frequency0.getPct('2');
  }

  //Test case number: 41
  /*
   * 34 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumPct(J)D: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: I10 Branch 17 IFNE L423 - false
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.getCumPct(J)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(J)D
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 8. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumPct(J)D: Line 452
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 422
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 423
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 424
   * Goal 13. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 14. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 15. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 16. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 17. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 18. org.apache.commons.math.stat.Frequency.getCumPct(J)D
   * Goal 19. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 20. org.apache.commons.math.stat.Frequency.getCumPct(J)D
   * Goal 21. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 22. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 23. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 24. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 120: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - InsertUnaryOp Negation
   * Goal 26. Weak Mutation 121: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> 1
   * Goal 27. Weak Mutation 122: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> -1
   * Goal 28. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceComparisonOperator != -> -1
   * Goal 29. Weak Mutation 126: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:424 - ReplaceConstant - NaN -> 0.0
   * Goal 30. Weak Mutation 127: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:424 - ReplaceConstant - NaN -> 1.0
   * Goal 31. Weak Mutation 128: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:424 - ReplaceConstant - NaN -> -1.0
   * Goal 32. Weak Mutation 129: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:424 - ReplaceConstant - NaN -> NaN
   * Goal 33. Weak Mutation 138: org.apache.commons.math.stat.Frequency.getCumPct(J)D:452 - InsertUnaryOp Negation
   * Goal 34. org.apache.commons.math.stat.Frequency.getCumPct(J)D:positive
   */

  @Test
  public void test41()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      double double0 = frequency0.getCumPct(2L);
  }

  //Test case number: 42
  /*
   * 28 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCount(I)J: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I28 Branch 7 IFNULL L229 - true
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.getCount(I)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(I)J
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 8. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 9. org.apache.commons.math.stat.Frequency.getCount(I)J: Line 245
   * Goal 10. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 223
   * Goal 11. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 226
   * Goal 12. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 228
   * Goal 13. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 229
   * Goal 14. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 234
   * Goal 15. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 235
   * Goal 16. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 17. org.apache.commons.math.stat.Frequency.getCount(I)J
   * Goal 18. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 19. org.apache.commons.math.stat.Frequency.getCount(I)J
   * Goal 20. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:223 - ReplaceComparisonOperator == -> !=
   * Goal 21. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> 1
   * Goal 22. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> -1
   * Goal 23. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:229 - ReplaceComparisonOperator = null -> != null
   * Goal 24. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:235 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 62: org.apache.commons.math.stat.Frequency.getCount(I)J:245 - InsertUnaryOp Negation
   * Goal 26. Weak Mutation 63: org.apache.commons.math.stat.Frequency.getCount(I)J:245 - InsertUnaryOp IINC 1
   * Goal 27. Weak Mutation 64: org.apache.commons.math.stat.Frequency.getCount(I)J:245 - InsertUnaryOp IINC -1
   * Goal 28. org.apache.commons.math.stat.Frequency.getCount(I)J:zero
   */

  @Test
  public void test42()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      long long0 = frequency0.getCount(2207);
  }

  //Test case number: 43
  /*
   * 36 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: I10 Branch 17 IFNE L423 - false
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.getCumPct(C)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumPct(C)D
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 8. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumPct(C)D: Line 465
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 422
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 423
   * Goal 12. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 424
   * Goal 13. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 14. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 15. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 16. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 17. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 18. org.apache.commons.math.stat.Frequency.getCumPct(C)D
   * Goal 19. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 20. org.apache.commons.math.stat.Frequency.getCumPct(C)D
   * Goal 21. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 22. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 23. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 24. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 120: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - InsertUnaryOp Negation
   * Goal 26. Weak Mutation 121: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> 1
   * Goal 27. Weak Mutation 122: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> -1
   * Goal 28. Weak Mutation 123: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceComparisonOperator != -> -1
   * Goal 29. Weak Mutation 126: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:424 - ReplaceConstant - NaN -> 0.0
   * Goal 30. Weak Mutation 127: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:424 - ReplaceConstant - NaN -> 1.0
   * Goal 31. Weak Mutation 128: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:424 - ReplaceConstant - NaN -> -1.0
   * Goal 32. Weak Mutation 129: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:424 - ReplaceConstant - NaN -> NaN
   * Goal 33. Weak Mutation 139: org.apache.commons.math.stat.Frequency.getCumPct(C)D:465 - InsertUnaryOp Negation
   * Goal 34. Weak Mutation 140: org.apache.commons.math.stat.Frequency.getCumPct(C)D:465 - InsertUnaryOp IINC 1
   * Goal 35. Weak Mutation 141: org.apache.commons.math.stat.Frequency.getCumPct(C)D:465 - InsertUnaryOp IINC -1
   * Goal 36. org.apache.commons.math.stat.Frequency.getCumPct(C)D:positive
   */

  @Test
  public void test43()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      double double0 = frequency0.getCumPct('Z');
  }

  //Test case number: 44
  /*
   * 36 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getPct(I)D: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: I10 Branch 8 IFNE L281 - false
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.getPct(I)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(I)D
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 8. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 9. org.apache.commons.math.stat.Frequency.getPct(I)D: Line 295
   * Goal 10. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 280
   * Goal 11. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 281
   * Goal 12. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 282
   * Goal 13. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 14. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 15. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 16. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 17. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 18. org.apache.commons.math.stat.Frequency.getPct(I)D
   * Goal 19. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 20. org.apache.commons.math.stat.Frequency.getPct(I)D
   * Goal 21. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 22. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 23. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 24. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 69: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - InsertUnaryOp Negation
   * Goal 26. Weak Mutation 70: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> 1
   * Goal 27. Weak Mutation 71: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> -1
   * Goal 28. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceComparisonOperator != -> -1
   * Goal 29. Weak Mutation 75: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:282 - ReplaceConstant - NaN -> 0.0
   * Goal 30. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:282 - ReplaceConstant - NaN -> 1.0
   * Goal 31. Weak Mutation 77: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:282 - ReplaceConstant - NaN -> -1.0
   * Goal 32. Weak Mutation 78: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:282 - ReplaceConstant - NaN -> NaN
   * Goal 33. Weak Mutation 84: org.apache.commons.math.stat.Frequency.getPct(I)D:295 - InsertUnaryOp Negation
   * Goal 34. Weak Mutation 85: org.apache.commons.math.stat.Frequency.getPct(I)D:295 - InsertUnaryOp IINC 1
   * Goal 35. Weak Mutation 86: org.apache.commons.math.stat.Frequency.getPct(I)D:295 - InsertUnaryOp IINC -1
   * Goal 36. org.apache.commons.math.stat.Frequency.getPct(I)D:positive
   */

  @Test
  public void test44()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      double double0 = frequency0.getPct((-229));
  }

  //Test case number: 45
  /*
   * 32 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - false
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.getCumFreq(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(C)J
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 8. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(C)J: Line 405
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 331
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 332
   * Goal 12. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 13. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 14. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 15. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 16. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 17. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 18. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(C)J
   * Goal 20. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 21. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 22. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 23. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 24. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> 1
   * Goal 25. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> -1
   * Goal 26. Weak Mutation 93: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceComparisonOperator != -> -1
   * Goal 27. Weak Mutation 96: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:332 - ReplaceConstant - 0 -> 1
   * Goal 28. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:332 - ReplaceConstant - 0 -> -1
   * Goal 29. Weak Mutation 117: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:405 - InsertUnaryOp Negation
   * Goal 30. Weak Mutation 118: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:405 - InsertUnaryOp IINC 1
   * Goal 31. Weak Mutation 119: org.apache.commons.math.stat.Frequency.getCumFreq(C)J:405 - InsertUnaryOp IINC -1
   * Goal 32. org.apache.commons.math.stat.Frequency.getCumFreq(C)J:zero
   */

  @Test
  public void test45()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      long long0 = frequency0.getCumFreq('0');
  }

  //Test case number: 46
  /*
   * 28 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCount(C)J: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I4 Branch 6 IFEQ L223 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: I28 Branch 7 IFNULL L229 - true
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.getCount(C)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCount(C)J
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 8. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 9. org.apache.commons.math.stat.Frequency.getCount(C)J: Line 265
   * Goal 10. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 223
   * Goal 11. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 226
   * Goal 12. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 228
   * Goal 13. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 229
   * Goal 14. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 234
   * Goal 15. org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J: Line 235
   * Goal 16. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 17. org.apache.commons.math.stat.Frequency.getCount(C)J
   * Goal 18. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 19. org.apache.commons.math.stat.Frequency.getCount(C)J
   * Goal 20. Weak Mutation 57: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:223 - ReplaceComparisonOperator == -> !=
   * Goal 21. Weak Mutation 58: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> 1
   * Goal 22. Weak Mutation 59: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:226 - ReplaceConstant - 0 -> -1
   * Goal 23. Weak Mutation 60: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:229 - ReplaceComparisonOperator = null -> != null
   * Goal 24. Weak Mutation 61: org.apache.commons.math.stat.Frequency.getCount(Ljava/lang/Object;)J:235 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 66: org.apache.commons.math.stat.Frequency.getCount(C)J:265 - InsertUnaryOp Negation
   * Goal 26. Weak Mutation 67: org.apache.commons.math.stat.Frequency.getCount(C)J:265 - InsertUnaryOp IINC 1
   * Goal 27. Weak Mutation 68: org.apache.commons.math.stat.Frequency.getCount(C)J:265 - InsertUnaryOp IINC -1
   * Goal 28. org.apache.commons.math.stat.Frequency.getCount(C)J:zero
   */

  @Test
  public void test46()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      long long0 = frequency0.getCount('+');
  }

  //Test case number: 47
  /*
   * 34 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getPct(J)D: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: I10 Branch 8 IFNE L281 - false
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.getPct(J)D: root-Branch in context: org.apache.commons.math.stat.Frequency:getPct(J)D
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 8. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 9. org.apache.commons.math.stat.Frequency.getPct(J)D: Line 306
   * Goal 10. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 280
   * Goal 11. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 281
   * Goal 12. org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D: Line 282
   * Goal 13. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 14. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 15. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 16. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 17. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 18. org.apache.commons.math.stat.Frequency.getPct(J)D
   * Goal 19. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 20. org.apache.commons.math.stat.Frequency.getPct(J)D
   * Goal 21. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 22. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 23. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 24. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 69: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - InsertUnaryOp Negation
   * Goal 26. Weak Mutation 70: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> 1
   * Goal 27. Weak Mutation 71: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceConstant - 0 -> -1
   * Goal 28. Weak Mutation 72: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:281 - ReplaceComparisonOperator != -> -1
   * Goal 29. Weak Mutation 75: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:282 - ReplaceConstant - NaN -> 0.0
   * Goal 30. Weak Mutation 76: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:282 - ReplaceConstant - NaN -> 1.0
   * Goal 31. Weak Mutation 77: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:282 - ReplaceConstant - NaN -> -1.0
   * Goal 32. Weak Mutation 78: org.apache.commons.math.stat.Frequency.getPct(Ljava/lang/Object;)D:282 - ReplaceConstant - NaN -> NaN
   * Goal 33. Weak Mutation 87: org.apache.commons.math.stat.Frequency.getPct(J)D:306 - InsertUnaryOp Negation
   * Goal 34. org.apache.commons.math.stat.Frequency.getPct(J)D:positive
   */

  @Test
  public void test47()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      double double0 = frequency0.getPct(0L);
  }

  //Test case number: 48
  /*
   * 30 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - false
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.getCumFreq(J)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(J)J
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 8. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(J)J: Line 393
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 331
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 332
   * Goal 12. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 13. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 14. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 15. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 16. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 17. org.apache.commons.math.stat.Frequency.getCumFreq(J)J
   * Goal 18. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(J)J
   * Goal 20. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 21. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 22. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 23. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 24. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> 1
   * Goal 25. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> -1
   * Goal 26. Weak Mutation 93: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceComparisonOperator != -> -1
   * Goal 27. Weak Mutation 96: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:332 - ReplaceConstant - 0 -> 1
   * Goal 28. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:332 - ReplaceConstant - 0 -> -1
   * Goal 29. Weak Mutation 116: org.apache.commons.math.stat.Frequency.getCumFreq(J)J:393 - InsertUnaryOp Negation
   * Goal 30. org.apache.commons.math.stat.Frequency.getCumFreq(J)J:zero
   */

  @Test
  public void test48()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      long long0 = frequency0.getCumFreq(0L);
  }

  //Test case number: 49
  /*
   * 12 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.clear()V: root-Branch
   * Goal 3. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 4. Branch org.apache.commons.math.stat.Frequency.clear()V: root-Branch in context: org.apache.commons.math.stat.Frequency:clear()V
   * Goal 5. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 6. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 7. org.apache.commons.math.stat.Frequency.clear()V: Line 183
   * Goal 8. org.apache.commons.math.stat.Frequency.clear()V: Line 184
   * Goal 9. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 10. org.apache.commons.math.stat.Frequency.clear()V
   * Goal 11. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 12. org.apache.commons.math.stat.Frequency.clear()V
   */

  @Test
  public void test49()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      frequency0.clear();
  }

  //Test case number: 50
  /*
   * 32 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.getCumFreq(I)J: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - false
   * Goal 5. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 6. Branch org.apache.commons.math.stat.Frequency.getCumFreq(I)J: root-Branch in context: org.apache.commons.math.stat.Frequency:getCumFreq(I)J
   * Goal 7. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 8. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(I)J: Line 381
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 331
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 332
   * Goal 12. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 13. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 14. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 15. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 16. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 17. org.apache.commons.math.stat.Frequency.getCumFreq(I)J
   * Goal 18. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 19. org.apache.commons.math.stat.Frequency.getCumFreq(I)J
   * Goal 20. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 21. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 22. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 23. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 24. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> 1
   * Goal 25. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> -1
   * Goal 26. Weak Mutation 93: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceComparisonOperator != -> -1
   * Goal 27. Weak Mutation 96: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:332 - ReplaceConstant - 0 -> 1
   * Goal 28. Weak Mutation 97: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:332 - ReplaceConstant - 0 -> -1
   * Goal 29. Weak Mutation 113: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:381 - InsertUnaryOp Negation
   * Goal 30. Weak Mutation 114: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:381 - InsertUnaryOp IINC 1
   * Goal 31. Weak Mutation 115: org.apache.commons.math.stat.Frequency.getCumFreq(I)J:381 - InsertUnaryOp IINC -1
   * Goal 32. org.apache.commons.math.stat.Frequency.getCumFreq(I)J:zero
   */

  @Test
  public void test50()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      long long0 = frequency0.getCumFreq(52);
  }

  //Test case number: 51
  /*
   * 80 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 5. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 6. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I15 Branch 10 IFEQ L334 - true
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I33 Branch 11 IFNONNULL L338 - false
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: I10 Branch 17 IFNE L423 - true
   * Goal 11. Branch org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>(Ljava/util/Comparator;)V
   * Goal 12. Branch org.apache.commons.math.stat.Frequency.addValue(I)V: root-Branch in context: org.apache.commons.math.stat.Frequency:addValue(I)V
   * Goal 13. Branch org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: I10 Branch 17 IFNE L423 - true in context: org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Object;)D
   * Goal 14. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 67
   * Goal 15. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V: Line 68
   * Goal 16. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 151
   * Goal 17. org.apache.commons.math.stat.Frequency.addValue(I)V: Line 152
   * Goal 18. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 19. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 20. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 21. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 22. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 24. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 25. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 331
   * Goal 26. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 334
   * Goal 27. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 337
   * Goal 28. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 338
   * Goal 29. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 339
   * Goal 30. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 341
   * Goal 31. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 344
   * Goal 32. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 348
   * Goal 33. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 349
   * Goal 34. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 422
   * Goal 35. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 423
   * Goal 36. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D: Line 426
   * Goal 37. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 38. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 39. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 40. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 41. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 42. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 43. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 44. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D
   * Goal 45. org.apache.commons.math.stat.Frequency.<init>(Ljava/util/Comparator;)V
   * Goal 46. org.apache.commons.math.stat.Frequency.addValue(I)V
   * Goal 47. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D
   * Goal 48. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 49. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 50. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 51. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 52. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 53. Weak Mutation 41: org.apache.commons.math.stat.Frequency.addValue(I)V:151 - InsertUnaryOp Negation
   * Goal 54. Weak Mutation 42: org.apache.commons.math.stat.Frequency.addValue(I)V:151 - InsertUnaryOp IINC 1
   * Goal 55. Weak Mutation 43: org.apache.commons.math.stat.Frequency.addValue(I)V:151 - InsertUnaryOp IINC -1
   * Goal 56. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 57. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 58. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 59. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 60. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 61. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 62. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 63. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 64. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 65. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> 1
   * Goal 66. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> -1
   * Goal 67. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceComparisonOperator != -> <
   * Goal 68. Weak Mutation 98: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:334 - ReplaceComparisonOperator == -> !=
   * Goal 69. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:338 - ReplaceComparisonOperator != null -> = null
   * Goal 70. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> 1
   * Goal 71. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> -1
   * Goal 72. Weak Mutation 103: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:349 - InsertUnaryOp Negation
   * Goal 73. Weak Mutation 120: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - InsertUnaryOp Negation
   * Goal 74. Weak Mutation 121: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> 1
   * Goal 75. Weak Mutation 122: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceConstant - 0 -> -1
   * Goal 76. Weak Mutation 124: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:423 - ReplaceComparisonOperator != -> <
   * Goal 77. Weak Mutation 130: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:426 - InsertUnaryOp Negation
   * Goal 78. Weak Mutation 131: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:426 - ReplaceArithmeticOperator / -> +
   * Goal 79. Weak Mutation 133: org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:426 - ReplaceArithmeticOperator / -> -
   * Goal 80. org.apache.commons.math.stat.Frequency.getCumPct(Ljava/lang/Object;)D:zero
   */

  @Test
  public void test51()  throws Throwable  {
      Frequency frequency0 = new Frequency((Comparator) null);
      frequency0.addValue(2034);
      double double0 = frequency0.getCumPct((Object) frequency0);
  }

  //Test case number: 52
  /*
   * 78 covered goals:
   * Goal 1. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: root-Branch
   * Goal 2. org.apache.commons.math.stat.Frequency.<init>()V: root-Branch
   * Goal 3. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true
   * Goal 4. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false
   * Goal 5. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - true
   * Goal 6. org.apache.commons.math.stat.Frequency.getSumFreq()J: I15 Branch 5 IFEQ L209 - false
   * Goal 7. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - true
   * Goal 8. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I15 Branch 10 IFEQ L334 - true
   * Goal 9. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I33 Branch 11 IFNONNULL L338 - false
   * Goal 10. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I56 Branch 12 IFNULL L345 - true
   * Goal 11. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I80 Branch 13 IFGE L352 - false
   * Goal 12. Branch org.apache.commons.math.stat.Frequency.<init>()V: root-Branch in context: org.apache.commons.math.stat.Frequency:<init>()V
   * Goal 13. Branch org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: root-Branch in context: 
   * Goal 14. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I8 Branch 3 IFEQ L129 - true in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 15. Branch org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: I27 Branch 4 IFNONNULL L134 - false in context: org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V
   * Goal 16. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I6 Branch 9 IFNE L331 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 17. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I15 Branch 10 IFEQ L334 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 18. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I33 Branch 11 IFNONNULL L338 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 19. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I56 Branch 12 IFNULL L345 - true in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 20. Branch org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: I80 Branch 13 IFGE L352 - false in context: org.apache.commons.math.stat.Frequency:getCumFreq(Ljava/lang/Object;)J
   * Goal 21. org.apache.commons.math.stat.Frequency.<init>()V: Line 58
   * Goal 22. org.apache.commons.math.stat.Frequency.<init>()V: Line 59
   * Goal 23. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 128
   * Goal 24. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 129
   * Goal 25. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 133
   * Goal 26. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 134
   * Goal 27. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 135
   * Goal 28. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 142
   * Goal 29. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V: Line 143
   * Goal 30. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 331
   * Goal 31. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 334
   * Goal 32. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 337
   * Goal 33. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 338
   * Goal 34. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 339
   * Goal 35. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 341
   * Goal 36. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 344
   * Goal 37. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 345
   * Goal 38. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 350
   * Goal 39. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 352
   * Goal 40. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J: Line 353
   * Goal 41. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 207
   * Goal 42. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 208
   * Goal 43. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 209
   * Goal 44. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 210
   * Goal 45. org.apache.commons.math.stat.Frequency.getSumFreq()J: Line 212
   * Goal 46. org.apache.commons.math.stat.Frequency$NaturalComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I: Line 491
   * Goal 47. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 48. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 49. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 50. org.apache.commons.math.stat.Frequency.<init>()V
   * Goal 51. org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V
   * Goal 52. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J
   * Goal 53. Weak Mutation 27: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:129 - ReplaceComparisonOperator == -> !=
   * Goal 54. Weak Mutation 28: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:134 - ReplaceComparisonOperator != null -> = null
   * Goal 55. Weak Mutation 29: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 0
   * Goal 56. Weak Mutation 30: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> -1
   * Goal 57. Weak Mutation 31: org.apache.commons.math.stat.Frequency.addValue(Ljava/lang/Comparable;)V:135 - ReplaceConstant - 1 -> 2
   * Goal 58. Weak Mutation 48: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> 1
   * Goal 59. Weak Mutation 49: org.apache.commons.math.stat.Frequency.getSumFreq()J:207 - ReplaceConstant - 0 -> -1
   * Goal 60. Weak Mutation 50: org.apache.commons.math.stat.Frequency.getSumFreq()J:209 - ReplaceComparisonOperator == -> !=
   * Goal 61. Weak Mutation 51: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - InsertUnaryOp Negation
   * Goal 62. Weak Mutation 52: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> %
   * Goal 63. Weak Mutation 53: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> -
   * Goal 64. Weak Mutation 54: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> *
   * Goal 65. Weak Mutation 55: org.apache.commons.math.stat.Frequency.getSumFreq()J:210 - ReplaceArithmeticOperator + -> /
   * Goal 66. Weak Mutation 56: org.apache.commons.math.stat.Frequency.getSumFreq()J:212 - InsertUnaryOp Negation
   * Goal 67. Weak Mutation 91: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> 1
   * Goal 68. Weak Mutation 92: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceConstant - 0 -> -1
   * Goal 69. Weak Mutation 94: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:331 - ReplaceComparisonOperator != -> <
   * Goal 70. Weak Mutation 98: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:334 - ReplaceComparisonOperator == -> !=
   * Goal 71. Weak Mutation 99: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:338 - ReplaceComparisonOperator != null -> = null
   * Goal 72. Weak Mutation 100: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> 1
   * Goal 73. Weak Mutation 101: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:341 - ReplaceConstant - 0 -> -1
   * Goal 74. Weak Mutation 102: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:345 - ReplaceComparisonOperator = null -> != null
   * Goal 75. Weak Mutation 104: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:352 - ReplaceComparisonOperator >= -> -1
   * Goal 76. Weak Mutation 107: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:353 - ReplaceConstant - 0 -> 1
   * Goal 77. Weak Mutation 108: org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:353 - ReplaceConstant - 0 -> -1
   * Goal 78. org.apache.commons.math.stat.Frequency.getCumFreq(Ljava/lang/Object;)J:zero
   */

  @Test
  public void test52()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      frequency0.addValue((Comparable<?>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
      long long0 = frequency0.getCumFreq((Object) "6ZBm:;%$IO5");
  }
}
