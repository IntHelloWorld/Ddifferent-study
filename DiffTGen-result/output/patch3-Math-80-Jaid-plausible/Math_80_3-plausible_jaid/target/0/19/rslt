* EvoSuite 1.0.6
* Going to generate test cases for class: org.apache.commons.math.linear.EigenDecompositionImpl
* Starting client
* Connecting to master process on port 20315
* Analyzing classpath: 
  - /home/hewitt/work/DiffTGen-master/output/patch3-Math-80-Jaid-plausible/Math_80_3-plausible_jaid/target/build/classes/all0.jar
  - /home/hewitt/work/DiffTGen-master/lib/myprinter.jar
  - /home/hewitt/work/DiffTGen-master/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.linear.EigenDecompositionImpl
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 853
  - Branch 432
  - Exception 0
  - MutationFactory 216
  - Output 28
  - Method 17
  - MethodNoException 17
  - CBranchFitnessFactory 432
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1585441903495
* Starting evolution
[Progress:=>                            5%] [Cov:>                                  0%][Progress:=>                            5%] [Cov:>                                  1%][Progress:=>                            5%] [Cov:====>                              13%][Progress:=>                            5%] [Cov:====>                              14%][Progress:=>                            6%] [Cov:>                                  2%][Progress:=>                            6%] [Cov:=>                                 4%][Progress:=>                            6%] [Cov:=====>                             16%][Progress:=>                            6%] [Cov:=====>                             17%][Progress:=>                            6%] [Cov:======>                            19%][Progress:=>                            6%] [Cov:=======>                           20%][Progress:=>                            6%] [Cov:=======>                           21%][Progress:==>                           8%] [Cov:>                                  0%][Progress:==>                           8%] [Cov:>                                  1%][Progress:==>                           8%] [Cov:====>                              13%][Progress:==>                           8%] [Cov:====>                              14%][Progress:==>                           8%] [Cov:=====>                             16%][Progress:==>                           8%] [Cov:=====>                             17%][Progress:===>                          10%] [Cov:>                                  0%][Progress:===>                          10%] [Cov:====>                              12%][Progress:===>                          10%] [Cov:====>                              13%][Progress:===>                          11%] [Cov:>                                  0%][Progress:===>                          11%] [Cov:>                                  1%][Progress:===>                          11%] [Cov:====>                              13%][Progress:======>                       21%] [Cov:>                                  0%][Progress:======>                       21%] [Cov:>                                  1%][Progress:======>                       21%] [Cov:====>                              13%][Progress:======>                       23%] [Cov:>                                  0%][Progress:======>                       23%] [Cov:>                                  1%][Progress:======>                       23%] [Cov:====>                              13%][Progress:=======>                      25%] [Cov:====>                              14%][Progress:========>                     28%] [Cov:>                                  0%][Progress:========>                     28%] [Cov:>                                  1%][Progress:========>                     28%] [Cov:====>                              13%][Progress:========>                     28%] [Cov:====>                              14%][Progress:=========>                    31%] [Cov:>                                  0%][Progress:=========>                    31%] [Cov:>                                  1%][Progress:=========>                    31%] [Cov:====>                              13%][Progress:=========>                    31%] [Cov:====>                              14%][Progress:=========>                    33%] [Cov:>                                  2%][Progress:=========>                    33%] [Cov:=>                                 4%][Progress:=========>                    33%] [Cov:=====>                             17%][Progress:=========>                    33%] [Cov:======>                            18%][Progress:=========>                    33%] [Cov:=======>                           20%][Progress:=========>                    33%] [Cov:========>                          25%][Progress:=========>                    33%] [Cov:==========>                        30%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:==========>                   35%] [Cov:>                                  0%][Progress:==========>                   35%] [Cov:>                                  1%][Progress:==========>                   35%] [Cov:====>                              13%][Progress:==========>                   35%] [Cov:====>                              14%][Progress:==========>                   36%] [Cov:>                                  0%][Progress:===========>                  38%] [Cov:>                                  1%][Progress:===========>                  38%] [Cov:====>                              13%][Progress:===========>                  38%] [Cov:==========>                        31%][Progress:============>                 40%] [Cov:====>                              13%][Progress:============>                 40%] [Cov:====>                              14%][Progress:============>                 41%] [Cov:====>                              13%][Progress:============>                 41%] [Cov:====>                              14%][Progress:============>                 41%] [Cov:==========>                        29%][Progress:============>                 41%] [Cov:==========>                        30%][Progress:============>                 41%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:=====>                             16%][Progress:============>                 43%] [Cov:==========>                        29%][Progress:============>                 43%] [Cov:==========>                        30%][Progress:============>                 43%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:===========>                       32%][Progress:=============>                46%] [Cov:===========>                       32%][Progress:==============>               48%] [Cov:===========>                       32%][Progress:===============>              51%] [Cov:===========>                       32%][Progress:===============>              53%] [Cov:===========>                       32%][Progress:================>             55%] [Cov:===========>                       32%][Progress:==================>           60%] [Cov:===========>                       32%][Progress:==================>           61%] [Cov:===========>                       32%][Progress:==================>           63%] [Cov:===========>                       32%][Progress:===================>          66%] [Cov:===========>                       32%][Progress:====================>         68%] [Cov:===========>                       32%][Progress:=====================>        70%] [Cov:===========>                       32%][Progress:=====================>        71%] [Cov:===========>                       32%][Progress:=====================>        73%] [Cov:===========>                       32%][Progress:======================>       76%] [Cov:===========>                       32%][Progress:=======================>      78%] [Cov:===========>                       32%][Progress:=======================>      78%] [Cov:===========>                       33%][Progress:========================>     80%] [Cov:===========>                       32%][Progress:========================>     81%] [Cov:===========>                       32%][Progress:========================>     83%] [Cov:===========>                       33%][Progress:=========================>    85%] [Cov:===========>                       32%][Progress:=========================>    85%] [Cov:===========>                       33%][Progress:=========================>    85%] [Cov:===========>                       34%][Progress:=========================>    85%] [Cov:============>                      35%][Progress:=========================>    86%] [Cov:===========>                       32%][Progress:=========================>    86%] [Cov:===========>                       33%][Progress:==========================>   88%] [Cov:===========>                       32%][Progress:===========================>  90%] [Cov:============>                      35%][Progress:===========================>  91%] [Cov:============>                      35%][Progress:===========================>  91%] [Cov:============>                      36%][Progress:===========================>  91%] [Cov:============>                      37%][Progress:===========================>  91%] [Cov:=============>                     38%][Progress:============================> 95%] [Cov:=============>                     38%][Progress:============================> 95%] [Cov:=============>                     39%][Progress:============================> 95%] [Cov:==============>                    40%][Progress:============================> 96%] [Cov:=============>                     38%][Progress:=============================>98%] [Cov:=============>                     38%][Progress:==============================100%] [Cov:==============>                    40%][Progress:==============================100%] [Cov:==============>                    42%][Progress:==============================100%] [Cov:===============>                   44%][Progress:==============================100%] [Cov:================>                  48%][Progress:==============================100%] [Cov:=================>                 50%][Progress:==============================100%] [Cov:=================>                 50%][Progress:==============================100%] [Cov:==================>                52%]
* Search finished after 63s and 10 generations, 6682 statements, best individual has fitness: 2292.72097635144
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 51%
* Total number of goals: 853
* Number of covered goals: 434
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 36%
* Total number of goals: 432
* Number of covered goals: 154
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 38%
* Total number of goals: 216
* Number of covered goals: 83
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 29%
* Total number of goals: 28
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 71%
* Total number of goals: 17
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 65%
* Total number of goals: 17
* Number of covered goals: 11
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 36%
* Total number of goals: 432
* Number of covered goals: 154
* Generated 27 tests with total length 98
* Resulting test suite's coverage: 53% (average coverage for all fitness functions)
* Compiling and checking tests
* Writing JUnit test case 'EigenDecompositionImpl_ESTest' to evosuite-tests
* Done!

* Computation finished
