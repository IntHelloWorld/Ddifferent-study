/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:04:55 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.negate();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex2.ZERO.conjugate();
      Complex complex6 = complex3.I.createComplex((-1.0), 0.0);
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex3.conjugate();
      Complex complex9 = complex8.NaN.multiply(complex1);
      Complex complex10 = complex3.I.log();
      Complex complex11 = complex10.tan();
      String string0 = complex6.I.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex12 = complex3.sinh();
      // Undeclared exception!
      complex0.nthRoot(6202);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.INF.conjugate();
      double double0 = complex3.abs();
      Complex complex4 = complex1.INF.divide(complex0);
      Complex complex5 = complex4.ZERO.pow(complex2);
      Complex complex6 = complex5.INF.add(complex4);
      Complex complex7 = complex2.multiply(1421.7461346569);
      Complex complex8 = complex1.ZERO.conjugate();
      List<Complex> list0 = complex7.nthRoot(442);
      double double1 = complex1.getArgument();
      Complex complex9 = complex7.pow(complex1);
      Complex complex10 = complex9.INF.add(complex2);
      String string0 = complex10.toString();
      Complex complex11 = complex0.tan();
      Complex complex12 = complex10.tan();
      Complex complex13 = complex1.log();
      Complex complex14 = complex13.sqrt();
      Complex complex15 = complex11.exp();
      Complex complex16 = complex9.I.sqrt1z();
      Complex complex17 = complex15.ONE.sinh();
      Complex complex18 = complex13.INF.createComplex(0.0, 0.0);
      Complex complex19 = complex7.ZERO.exp();
      Complex complex20 = complex7.NaN.sqrt();
      Complex complex21 = complex9.atan();
      Complex complex22 = complex21.I.multiply(complex9);
      Complex complex23 = complex0.tanh();
      Complex complex24 = complex9.add(complex14);
      boolean boolean0 = complex11.equals(">q`aV6Vpo]|L abbSK");
      Complex complex25 = complex14.cos();
      Complex complex26 = complex3.atan();
      boolean boolean1 = complex12.equals("(NaN, NaN)");
      Complex complex27 = complex7.multiply((-2094.334074547576));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex1.createComplex(1540.0, 804.0);
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex8.ONE.sin();
      Complex complex10 = complex8.ONE.acos();
      Complex complex11 = complex10.ONE.acos();
      Complex complex12 = complex3.multiply(complex2);
      ComplexField complexField1 = complex3.getField();
      Complex complex13 = complex2.ONE.log();
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex14 = complex12.multiply(Double.POSITIVE_INFINITY);
      Complex complex15 = complex10.ONE.add(complex13);
      Complex complex16 = complex13.asin();
      Complex complex17 = complex13.atan();
      double double0 = 0.0;
      Complex complex18 = complex8.createComplex(804.0, 0.0);
      Complex complex19 = complex7.asin();
      try { 
        complex7.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2891.97973401);
      Complex complex1 = complex0.INF.createComplex(2574.08261479161, 2286.904);
      int int0 = complex0.ONE.hashCode();
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex2.I.log();
      double double0 = complex0.getArgument();
      Complex complex4 = complex2.multiply(2286.904);
      Complex complex5 = complex1.createComplex(0.0, 2286.904);
      Complex complex6 = complex5.pow(complex0);
      Complex complex7 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex0.multiply(complex1);
      boolean boolean0 = complex1.isNaN();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.ONE.sqrt1z();
      double double0 = complex0.getReal();
      Complex complex8 = complex0.ZERO.negate();
      Complex complex9 = complex8.ONE.createComplex(0.0, 1.0);
      boolean boolean1 = complex7.equals(complex6);
      List<Complex> list0 = complex5.nthRoot(1263);
      Complex complex10 = complex0.INF.conjugate();
      boolean boolean2 = complex1.equals(complex7);
      Complex complex11 = complex6.divide(complex2);
      Complex complex12 = complex3.sin();
      int int0 = complex6.hashCode();
      Complex complex13 = complex11.ZERO.add(complex7);
      Complex complex14 = complex11.subtract(complex7);
      Complex complex15 = complex11.asin();
      Complex complex16 = complex15.negate();
      Complex complex17 = complex14.acos();
      try { 
        complex17.nthRoot((-2266));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,266
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.INF.acos();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.ZERO.log();
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex4.ZERO.negate();
      Object object0 = complex0.INF.readResolve();
      Complex complex7 = complex2.ZERO.pow(complex4);
      Complex complex8 = complex7.INF.cosh();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex2.exp();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex10.NaN.subtract(complex11);
      Complex complex13 = complex12.I.log();
      Complex complex14 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex15 = complex3.ONE.cosh();
      Complex complex16 = complex14.multiply(270.42365);
      Complex complex17 = complex16.ZERO.atan();
      Complex complex18 = Complex.ZERO;
      Complex complex19 = complex17.ZERO.pow(complex18);
      Complex complex20 = complex19.NaN.conjugate();
      Complex complex21 = complex3.asin();
      Complex complex22 = complex7.sin();
      double double1 = complex16.getReal();
      boolean boolean0 = complex22.equals(complex10);
      Complex complex23 = complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.ZERO.hashCode();
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.ONE.createComplex((-2526.0), 1.0);
      Complex complex2 = complex1.NaN.acos();
      double double1 = complex2.NaN.getArgument();
      double double2 = complex2.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex1.ONE.sin();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex6.NaN.asin();
      int int1 = complex6.NaN.hashCode();
      double double3 = complex1.getArgument();
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex5.tanh();
      ComplexField complexField1 = complex9.getField();
      Complex complex10 = complex8.sqrt1z();
      Complex complex11 = complex4.multiply(complex10);
      ComplexField complexField2 = complex5.getField();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-181.3235229));
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = null;
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = complex3.INF.sin();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex2.ONE.subtract(complex0);
      boolean boolean0 = complex1.isInfinite();
      Complex complex4 = complex0.divide(complex1);
      double double0 = complex0.getImaginary();
      Complex complex5 = complex4.conjugate();
      int int0 = complex4.hashCode();
      Complex complex6 = complex0.ZERO.pow(complex5);
      Complex complex7 = complex6.I.multiply(complex3);
      Complex complex8 = complex0.I.sin();
      Complex complex9 = complex0.subtract(complex1);
      Complex complex10 = complex5.I.subtract(complex3);
      Complex complex11 = Complex.I;
      Complex complex12 = complex10.ZERO.divide(complex11);
      Complex complex13 = complex2.ONE.subtract(complex11);
      String string0 = complex9.ONE.toString();
      Complex complex14 = complex5.ZERO.sqrt1z();
      Complex complex15 = complex14.NaN.divide(complex6);
      Complex complex16 = complex14.ONE.sqrt();
      Complex complex17 = complex4.I.multiply(complex1);
      double double1 = complex14.ZERO.getArgument();
      Complex complex18 = complex9.cos();
      ComplexField complexField0 = complex5.getField();
      Complex complex19 = complex8.cosh();
      Complex complex20 = complex9.asin();
      boolean boolean1 = complex18.equals(complex20);
      Complex complex21 = complex4.cosh();
      Complex complex22 = complex17.sin();
      Complex complex23 = complex7.asin();
      Complex complex24 = complex3.exp();
      Complex complex25 = complex4.exp();
      Complex complex26 = complex25.ONE.conjugate();
      Complex complex27 = complex19.tan();
      Complex complex28 = complex17.subtract(complex21);
      Object object0 = complex24.readResolve();
      Complex complex29 = complex20.tanh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex1.INF.pow(complex2);
      Complex complex4 = complex2.ONE.sinh();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex6.NaN.tanh();
      Complex complex8 = complex0.subtract(complex4);
      Complex complex9 = complex2.createComplex((-176.07452115883578), 2.0);
      Complex complex10 = complex2.NaN.pow(complex8);
      Complex complex11 = complex3.cosh();
      Complex complex12 = complex11.NaN.createComplex(2.0, (-176.07452115883578));
      Complex complex13 = complex9.asin();
      double double0 = complex9.getImaginary();
      Complex complex14 = complex1.I.pow(complex9);
      Complex complex15 = complex13.add(complex5);
      String string0 = complex5.ZERO.toString();
      int int1 = complex1.hashCode();
      Complex complex16 = complex15.add(complex9);
      Complex complex17 = complex4.negate();
      Complex complex18 = complex2.divide(complex10);
      Complex complex19 = complex18.multiply(complex12);
      Complex complex20 = complex16.pow(complex6);
      Complex complex21 = complex5.cosh();
      List<Complex> list0 = complex18.nthRoot(16);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.createComplex(609.1422954499446, 609.1422954499446);
      int int0 = complex1.I.hashCode();
      Complex complex5 = complex1.ZERO.sin();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex1.ZERO.sinh();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex1.subtract(complex4);
      Complex complex10 = complex9.I.add(complex0);
      int int1 = complex2.hashCode();
      Complex complex11 = complex9.createComplex(2.0, (-5421.593156418281));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-494.5452), 181.49470476);
      Complex complex1 = complex0.sinh();
      double double0 = complex0.I.getArgument();
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex2.INF.tan();
      Complex complex5 = complex4.ZERO.asin();
      int int1 = complex0.ZERO.hashCode();
      int int2 = complex0.hashCode();
      Complex complex6 = complex1.INF.sinh();
      Complex complex7 = complex0.NaN.multiply(181.49470476);
      Complex complex8 = complex0.atan();
      ComplexField complexField0 = complex8.NaN.getField();
      Complex complex9 = complex8.INF.tan();
      Complex complex10 = complex1.acos();
      String string0 = complex9.INF.toString();
      double double1 = complex10.getImaginary();
      boolean boolean0 = complex10.isInfinite();
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex0.tan();
      Complex complex13 = complex12.ONE.acos();
      Complex complex14 = complex12.ONE.sinh();
      Complex complex15 = complex11.sqrt();
      Complex complex16 = complex1.log();
      Complex complex17 = complex16.tan();
      Complex complex18 = complex17.ZERO.cosh();
      boolean boolean1 = complex11.isNaN();
      double double2 = complex16.getImaginary();
      Complex complex19 = complex6.cos();
      Complex complex20 = complex0.pow(complex9);
      Complex complex21 = complex19.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(306.3109, 306.3109);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.createComplex((-3430.25054), 306.3109);
      try { 
        complex1.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex2.I.pow(complex1);
      Object object0 = complex2.INF.readResolve();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.ONE.sin();
      boolean boolean0 = complex4.equals(complex0);
      Object object1 = complex2.NaN.readResolve();
      Complex complex6 = complex5.INF.subtract(complex1);
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex7.sinh();
      Object object2 = complex8.ZERO.readResolve();
      boolean boolean1 = complex5.isNaN();
      String string0 = complex4.toString();
      Complex complex9 = complex7.tanh();
      ComplexField complexField0 = complex4.getField();
      Complex complex10 = complex2.acos();
      Complex complex11 = complex7.asin();
      Complex complex12 = complex11.INF.cos();
      boolean boolean2 = complex9.isNaN();
      double double0 = complex4.getImaginary();
      Object object3 = complex10.readResolve();
      double double1 = complex0.getReal();
      Complex complex13 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(1554.999, 1554.999);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex0.tanh();
      double double0 = complex2.NaN.abs();
      double double1 = complex0.abs();
      Complex complex5 = complex1.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.INF.sin();
      Complex complex9 = complex1.INF.conjugate();
      Complex complex10 = complex2.atan();
      Complex complex11 = complex10.ZERO.divide(complex2);
      Complex complex12 = complex11.ONE.sin();
      double double2 = complex10.ONE.getArgument();
      Complex complex13 = complex1.multiply(1554.999);
      Complex complex14 = complex2.I.sqrt();
      String string0 = complex0.toString();
      Complex complex15 = complex10.cosh();
      boolean boolean0 = complex6.isNaN();
      Complex complex16 = complex3.exp();
      double double3 = complex15.getArgument();
      double double4 = complex1.getImaginary();
      boolean boolean1 = complex1.isNaN();
      Complex complex17 = complex4.divide(complex11);
      Complex complex18 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(476.78, 1190.0);
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(2909.159148893787, (-2.957007209750105E-8));
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.ZERO.pow(complex2);
      Complex complex4 = complex2.ZERO.acos();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex0.sqrt();
      double double0 = complex6.getArgument();
      Complex complex7 = complex6.NaN.sinh();
      Complex complex8 = complex2.INF.atan();
      Complex complex9 = complex8.INF.tanh();
      Complex complex10 = complex2.asin();
      Complex complex11 = complex5.INF.negate();
      double double1 = complex10.getImaginary();
      Complex complex12 = complex0.createComplex(1467.5186231439418, (-1906.75561194485));
      Complex complex13 = complex5.sin();
      Complex complex14 = complex13.ZERO.exp();
      boolean boolean0 = complex13.isInfinite();
      Complex complex15 = complex2.sqrt1z();
      Complex complex16 = complex13.asin();
      int int0 = complex15.hashCode();
      Complex complex17 = complex16.add(complex3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.cos();
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex3.ZERO.cosh();
      double double0 = complex4.I.abs();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex5 = complex2.atan();
      Complex complex6 = complex2.tanh();
      double double1 = complex6.abs();
      Complex complex7 = complex5.add(complex2);
      Complex complex8 = complex1.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sin();
      boolean boolean0 = complex0.equals((Object) null);
      double double0 = complex0.getReal();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.sinh();
      List<Complex> list0 = complex0.nthRoot(138);
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex0.atan();
      Complex complex8 = new Complex((-3523.97853441172), Double.NaN);
      Complex complex9 = complex0.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(42.55, 42.55);
      Complex complex1 = complex0.INF.log();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.asin();
      int int0 = complex6.NaN.hashCode();
      Complex complex7 = complex5.I.createComplex(42.55, 42.55);
      Complex complex8 = complex7.ONE.acos();
      Complex complex9 = complex0.INF.tanh();
      Complex complex10 = complex9.ONE.atan();
      Complex complex11 = complex9.I.sqrt();
      Complex complex12 = complex5.exp();
      Complex complex13 = complex3.ZERO.sinh();
      Complex complex14 = complex2.ZERO.asin();
      double double0 = complex8.I.getArgument();
      Complex complex15 = complex0.asin();
      double double1 = complex5.ZERO.getArgument();
      double double2 = complex5.getArgument();
      Complex complex16 = complex7.ZERO.sin();
      Complex complex17 = complex5.I.multiply(42.55);
      Complex complex18 = complex8.multiply(complex0);
      Complex complex19 = complex3.sinh();
      Complex complex20 = complex19.INF.multiply(1.5707963267948966);
      Object object0 = complex6.readResolve();
      boolean boolean1 = complex15.equals(object0);
      Complex complex21 = complex13.multiply(42.55);
      Complex complex22 = complex6.createComplex((-1166.020719823), (-1166.020719823));
      Complex complex23 = complex17.cos();
      Complex complex24 = Complex.NaN;
      Complex complex25 = complex23.divide(complex24);
      ComplexField complexField0 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.atan();
      boolean boolean0 = complex2.equals(complex1);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ZERO.divide(complex1);
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex0.multiply(complex1);
      double double0 = complex1.NaN.getArgument();
      Complex complex4 = complex0.I.acos();
      Complex complex5 = complex4.multiply(Double.NaN);
      Complex complex6 = complex4.ONE.sin();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex7.tan();
      double double1 = complex8.getArgument();
      ComplexField complexField1 = complex8.getField();
      double double2 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-2615.715727), (-518.63));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.createComplex((-901.45), 766.089930141);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1283.25735758579));
      boolean boolean0 = complex0.equals("");
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex3.NaN.pow(complex1);
      Complex complex5 = complex1.createComplex(0.0, (-892.7565133));
      Complex complex6 = complex5.I.log();
      Complex complex7 = Complex.I;
      Complex complex8 = complex5.divide(complex7);
      Complex complex9 = complex5.tanh();
      Complex complex10 = complex7.add(complex0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex6.cos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      List<Complex> list0 = complex0.nthRoot(1186);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.sin();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(559.6, 559.6);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex1.ZERO.pow(complex0);
      Complex complex4 = complex0.I.tan();
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.subtract(complex2);
      Object object0 = complex3.ZERO.readResolve();
      Complex complex8 = complex1.INF.negate();
      Complex complex9 = complex0.NaN.sin();
      Complex complex10 = complex0.I.createComplex(1.903991307, 1.903991307);
      Complex complex11 = complex8.INF.sqrt();
      ComplexField complexField0 = complex0.getField();
      Complex complex12 = complex0.createComplex(2.3841857910019882E-8, (-4076.749452505843));
      Complex complex13 = complex1.sqrt1z();
      Complex complex14 = complex1.divide(complex13);
      Complex complex15 = complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.I.createComplex(Double.POSITIVE_INFINITY, (-851.2458555396487));
      Complex complex3 = complex2.INF.asin();
      double double0 = complex0.abs();
      Complex complex4 = complex1.ZERO.tanh();
      Complex complex5 = complex0.log();
      int int0 = complex5.I.hashCode();
      Complex complex6 = complex1.multiply((-851.2458555396487));
      Complex complex7 = complex1.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.pow(complex1);
      int int0 = complex2.hashCode();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-1128.6041476555258), (-1128.6041476555258));
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex0.getReal();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex0.multiply(complex1);
      List<Complex> list0 = complex2.ZERO.nthRoot(1);
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.equals("@b5BObif#;bqW");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(609.1515, (-1.0));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.cos();
      try { 
        complex2.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.multiply((-2039.655));
      Complex complex3 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-1.7168146928204135), (-1.7168146928204135));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.ZERO.sqrt();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.conjugate();
      Object object0 = complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-183.98846979533675), (-183.98846979533675));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex3.multiply((-183.98846979533675));
      Object object0 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(1787.961146735666);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.divide(complex1);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.createComplex(3423.1354252, 3423.1354252);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.INF;
      double double1 = complex0.INF.getArgument();
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex2.log();
      Complex complex6 = complex0.multiply(1.0);
      Complex complex7 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.acos();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex1.INF.divide(complex2);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex0.add(complex4);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex2.I.sin();
      Complex complex5 = complex0.tan();
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sinh();
      List<Complex> list0 = complex0.nthRoot(2622);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.I.log();
      boolean boolean0 = complex2.isInfinite();
      List<Complex> list1 = complex3.nthRoot(2622);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex3.multiply(complex4);
      Complex complex8 = complex7.NaN.acos();
      Complex complex9 = complex2.ZERO.cosh();
      boolean boolean1 = complex4.equals(complex7);
      Object object0 = complex5.readResolve();
      Complex complex10 = complex7.conjugate();
      Complex complex11 = complex0.atan();
      Complex complex12 = complex4.atan();
      Complex complex13 = complex8.tan();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex3.exp();
      Complex complex8 = complex7.ONE.conjugate();
      double double1 = complex5.abs();
      String string0 = complex2.toString();
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.divide(complex0);
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex4 = complex0.ONE.pow(complex2);
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.INF.subtract(complex0);
      Complex complex7 = complex1.subtract(complex5);
      double double1 = complex7.getImaginary();
      Complex complex8 = complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = complex1.tan();
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex8.tan();
      Complex complex12 = complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2989.1461723107, (-1780.057975178845));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex3.createComplex(0.0, 2989.1461723107);
      Complex complex7 = complex3.add(complex5);
      double double0 = complex3.INF.getArgument();
      String string0 = complex3.toString();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex8.subtract(complex0);
      double double1 = complex8.ZERO.abs();
      Complex complex10 = complex8.INF.pow(complex2);
      List<Complex> list0 = complex10.INF.nthRoot(1385);
      Complex complex11 = complex10.ZERO.subtract(complex4);
      Complex complex12 = complex1.tanh();
      Complex complex13 = complex2.acos();
      int int0 = complex13.ONE.hashCode();
      Complex complex14 = complex1.negate();
      Complex complex15 = complex13.cos();
      boolean boolean0 = complex5.isNaN();
      Object object0 = complex1.readResolve();
      boolean boolean1 = complex15.isNaN();
      double double2 = complex15.getImaginary();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.acos();
      int int0 = complex2.INF.hashCode();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex4.I.cosh();
      ComplexField complexField0 = complex4.I.getField();
      Complex complex6 = complex3.add(complex2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.ZERO.atan();
      List<Complex> list0 = complex0.nthRoot(1081);
      Complex complex4 = complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-2119.35322167751), (-2119.35322167751));
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(9.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.cosh();
      List<Complex> list0 = complex0.nthRoot(3454);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex3.INF.multiply(1.0);
      Complex complex5 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.exp();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.tan();
      double double0 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2563.68923772, (-4.9E-324));
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.log();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex3 = complex2.sin();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ZERO.toString();
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, (-4494.800375042));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex3 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex3);
      ComplexField complexField0 = complex3.getField();
      double double0 = complex0.getReal();
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1920.36418);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex4.log();
      Complex complex6 = complex3.NaN.acos();
      Complex complex7 = complex5.NaN.tanh();
      ComplexField complexField0 = complex7.ZERO.getField();
      Complex complex8 = complex1.ONE.negate();
      Complex complex9 = complex1.I.createComplex(0.0, 0.0);
      Complex complex10 = complex4.I.pow(complex3);
      Complex complex11 = complex0.cos();
      Complex complex12 = complex11.NaN.sin();
      String string0 = complex11.I.toString();
      double double0 = complex4.getArgument();
      Complex complex13 = complex4.cos();
      Complex complex14 = complex9.multiply((-2769.09));
      Complex complex15 = complex14.NaN.divide(complex7);
      Complex complex16 = complex5.multiply(complex7);
      try { 
        complex1.ONE.nthRoot((-2357));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,357
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-760.07), (-760.07));
      Complex complex1 = null;
      try { 
        complex0.NaN.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cos();
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex1.log();
      String string0 = complex6.toString();
      Complex complex7 = complex0.INF.sin();
      String string1 = complex3.NaN.toString();
      Complex complex8 = complex6.INF.createComplex(Double.NaN, 0.5987505288937529);
      Complex complex9 = complex1.cosh();
      Complex complex10 = complex6.subtract(complex2);
      Complex complex11 = complex10.asin();
      String string2 = complex11.NaN.toString();
      ComplexField complexField0 = complex6.I.getField();
      Complex complex12 = complex0.ZERO.cos();
      Complex complex13 = complex9.createComplex((-209.4536233725122), 2330.25976386);
      Complex complex14 = complex9.ONE.atan();
      double double1 = complex6.abs();
      Complex complex15 = complex8.tanh();
      Complex complex16 = complex13.subtract(complex1);
      Complex complex17 = complex16.ONE.sqrt();
      Complex complex18 = complex6.multiply(complex8);
      Complex complex19 = complex16.acos();
      double double2 = complex19.INF.getArgument();
      Complex complex20 = complex11.subtract(complex9);
      Complex complex21 = complex20.ONE.sin();
      Complex complex22 = complex1.pow(complex3);
      List<Complex> list0 = complex15.nthRoot(639);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.NaN.sin();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.ONE.cosh();
      Complex complex4 = complex1.multiply((-7.800414592973399E-9));
      Complex complex5 = complex3.ZERO.multiply(4390.90407476574);
      Complex complex6 = complex4.ONE.pow(complex3);
      Complex complex7 = complex6.NaN.sqrt1z();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex4.atan();
      Complex complex10 = complex0.NaN.acos();
      Complex complex11 = complex10.ONE.asin();
      Complex complex12 = complex3.tan();
      Complex complex13 = complex8.pow(complex4);
      boolean boolean0 = complex6.equals(complex4);
      Complex complex14 = complex6.log();
      boolean boolean1 = complex0.isNaN();
      Complex complex15 = complex2.acos();
      Object object0 = complex9.readResolve();
      Complex complex16 = complex13.asin();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      ComplexField complexField0 = complex1.INF.getField();
      ComplexField complexField1 = complex0.ONE.getField();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.sin();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex1.add(complex0);
      try { 
        complex0.ONE.nthRoot((-125));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -125
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.negate();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.divide(complex1);
      int int0 = complex1.hashCode();
      double double0 = complex2.abs();
      boolean boolean0 = complex1.isNaN();
      int int1 = complex2.hashCode();
      Complex complex3 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex1.I.cosh();
      try { 
        complex4.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cos();
      List<Complex> list0 = complex0.ONE.nthRoot(90);
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex2.INF.createComplex(0.0, 90);
      int int0 = complex0.hashCode();
      boolean boolean0 = complex2.equals(complex0);
      boolean boolean1 = complex0.isNaN();
      Complex complex5 = complex0.I.cos();
      int int1 = complex2.hashCode();
      Complex complex6 = complex0.tanh();
      boolean boolean2 = complex2.isNaN();
      Complex complex7 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.NaN.negate();
      Complex complex6 = complex4.NaN.acos();
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = complex0.NaN.pow(complex5);
      double double0 = complex1.getImaginary();
      Complex complex9 = complex3.ZERO.log();
      Complex complex10 = complex3.ONE.pow(complex2);
      Complex complex11 = complex0.INF.sqrt1z();
      Complex complex12 = complex11.ONE.asin();
      Complex complex13 = complex1.conjugate();
      Complex complex14 = complex3.tan();
      Complex complex15 = complex14.cos();
      double double1 = complex2.abs();
      Complex complex16 = complex10.log();
      Complex complex17 = complex16.ZERO.atan();
      Complex complex18 = complex6.atan();
      Complex complex19 = complex11.add(complex6);
      List<Complex> list0 = complex0.nthRoot(2923);
      Complex complex20 = complex19.createComplex(0.0, 0.0);
  }
}
