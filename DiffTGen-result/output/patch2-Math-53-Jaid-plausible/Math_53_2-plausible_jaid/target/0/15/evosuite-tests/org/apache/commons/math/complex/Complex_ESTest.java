/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:08:26 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.INF.asin();
      Complex complex5 = complex2.I.cos();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex6.createComplex(2095.48497, 0.0);
      Complex complex8 = complex7.ZERO.sin();
      double double0 = complex8.abs();
      Complex complex9 = complex0.exp();
      double double1 = complex0.abs();
      Object object0 = complex5.readResolve();
      Complex complex10 = complex5.asin();
      Complex complex11 = complex8.subtract(complex7);
      Complex complex12 = complex11.I.tan();
      Complex complex13 = complex0.subtract(complex7);
      Complex complex14 = complex9.sqrt1z();
      Complex complex15 = complex14.asin();
      Object object1 = complex15.I.readResolve();
      Complex complex16 = complex5.asin();
      try { 
        complex8.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.createComplex((-841.729), (-841.729));
      Object object0 = complex0.INF.readResolve();
      Complex complex4 = complex3.I.createComplex((-841.729), (-841.729));
      Complex complex5 = complex1.NaN.cosh();
      double double0 = complex0.ONE.getArgument();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex3.sin();
      Complex complex8 = complex6.exp();
      Complex complex9 = complex6.acos();
      int int0 = complex9.ONE.hashCode();
      Complex complex10 = complex9.INF.exp();
      double double1 = complex1.getArgument();
      Object object1 = complex6.ONE.readResolve();
      Complex complex11 = complex8.NaN.pow(complex0);
      Complex complex12 = complex3.log();
      double double2 = complex2.getReal();
      Complex complex13 = complex12.divide(complex3);
      double double3 = complex13.ONE.getArgument();
      Complex complex14 = complex8.I.tanh();
      Object object2 = complex3.readResolve();
      double double4 = complex2.getArgument();
      Complex complex15 = complex6.NaN.exp();
      Complex complex16 = complex15.ZERO.multiply(complex14);
      Object object3 = complex8.readResolve();
      double double5 = complex8.getReal();
      Complex complex17 = complex0.divide(complex12);
      Complex complex18 = complex14.sin();
      Complex complex19 = complex7.add(complex17);
      Complex complex20 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.INF.tanh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex3.ONE.atan();
      Complex complex6 = complex4.NaN.sinh();
      Complex complex7 = complex3.ZERO.cos();
      try { 
        complex0.nthRoot((-965));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -965
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(121.74708686087, 181.16751926319);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.log();
      ComplexField complexField0 = complex2.I.getField();
      String string0 = complex0.ZERO.toString();
      Complex complex3 = complex0.INF.sqrt();
      Complex complex4 = complex0.ZERO.multiply(121.74708686087);
      double double0 = complex4.INF.abs();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex4.tan();
      List<Complex> list0 = complex1.INF.nthRoot(3449);
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = complex4.acos();
      Complex complex9 = complex7.NaN.createComplex(510.247604443593, 3449);
      Object object0 = complex7.readResolve();
      boolean boolean0 = complex1.equals(object0);
      Complex complex10 = complex9.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-2212.7), 5214.7101558);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex4.ONE.sqrt();
      double double0 = complex4.ZERO.abs();
      Complex complex6 = complex3.I.tanh();
      List<Complex> list0 = complex3.ZERO.nthRoot(167);
      Complex complex7 = complex0.multiply(complex2);
      Complex complex8 = complex3.negate();
      Complex complex9 = complex7.atan();
      Complex complex10 = complex7.NaN.subtract(complex3);
      Complex complex11 = complex9.NaN.tanh();
      Complex complex12 = complex11.ONE.cosh();
      Complex complex13 = complex11.I.multiply(5214.7101558);
      double double1 = complex11.NaN.getArgument();
      Complex complex14 = complex11.I.multiply(complex9);
      Complex complex15 = complex2.sinh();
      Complex complex16 = complex9.asin();
      Complex complex17 = complex9.conjugate();
      Complex complex18 = complex1.cosh();
      ComplexField complexField0 = complex12.getField();
      Complex complex19 = complex11.conjugate();
      Complex complex20 = complex18.subtract(complex6);
      Complex complex21 = complex18.multiply(complex0);
      Complex complex22 = complex7.add(complex13);
      int int0 = complex18.hashCode();
      Complex complex23 = complex7.divide(complex11);
      Complex complex24 = complex18.subtract(complex21);
      Complex complex25 = complex14.exp();
      Complex complex26 = complex23.cosh();
      Complex complex27 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-1178.202633976999), (-7.800414592973399E-9));
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.conjugate();
      int int0 = complex1.ONE.hashCode();
      Complex complex3 = complex1.ONE.sqrt1z();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex1.ZERO.multiply(complex4);
      boolean boolean0 = complex0.isNaN();
      double double0 = complex1.getArgument();
      boolean boolean1 = complex2.isNaN();
      Complex complex6 = complex1.ONE.sinh();
      List<Complex> list0 = complex4.nthRoot(204);
      // Undeclared exception!
      complex3.nthRoot(5094);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-1623.9786350079626), (-1320.354));
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(2534.786, (-1203.0216));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.ONE.atan();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex4 = complex3.NaN.multiply(complex2);
      String string0 = complex0.I.toString();
      Complex complex5 = complex0.sinh();
      String string1 = complex5.ONE.toString();
      ComplexField complexField1 = complex5.getField();
      Complex complex6 = complex2.ZERO.negate();
      double double0 = complex5.getReal();
      String string2 = complex2.toString();
      Complex complex7 = complex3.sin();
      Complex complex8 = complex5.asin();
      Complex complex9 = complex8.NaN.atan();
      Complex complex10 = complex8.ONE.cosh();
      Complex complex11 = complex8.NaN.sqrt1z();
      Complex complex12 = complex2.sin();
      Complex complex13 = complex1.multiply((-1203.0216));
      int int0 = complex2.hashCode();
      boolean boolean0 = complex3.isInfinite();
      Complex complex14 = complex2.tanh();
      Complex complex15 = complex1.multiply((-1203.0216));
      Complex complex16 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(0.19999999999923582, 0.19999999999923582);
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.multiply(0.19999999999923582);
      double double0 = complex4.NaN.getArgument();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex1.ZERO.sin();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex8.ZERO.multiply(Double.NaN);
      Complex complex10 = complex8.sin();
      Complex complex11 = complex9.ZERO.atan();
      Complex complex12 = complex10.ZERO.cosh();
      Object object0 = complex3.readResolve();
      Complex complex13 = complex9.asin();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.I.asin();
      ComplexField complexField0 = complex0.INF.getField();
      double double0 = complex0.getReal();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex0.createComplex(Double.NaN, 1834.19653);
      int int0 = complex6.NaN.hashCode();
      Complex complex7 = complex6.I.sin();
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.I.createComplex(0.0, 6.0);
      Complex complex5 = complex0.ONE.tanh();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex4.NaN.conjugate();
      Complex complex8 = complex0.NaN.pow(complex3);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex9 = complex8.INF.log();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex4.NaN.tanh();
      String string0 = complex6.toString();
      Complex complex7 = complex6.ZERO.tan();
      double double0 = complex4.ZERO.getArgument();
      Complex complex8 = complex0.cosh();
      double double1 = complex0.I.abs();
      Complex complex9 = complex8.NaN.sqrt();
      boolean boolean0 = complex8.isInfinite();
      double double2 = complex8.getArgument();
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex0.INF.pow(complex9);
      Complex complex12 = complex11.multiply(complex7);
      Complex complex13 = complex10.NaN.tan();
      Complex complex14 = complex3.conjugate();
      Complex complex15 = complex14.ZERO.multiply(complex11);
      Complex complex16 = complex14.cosh();
      Object object0 = complex14.I.readResolve();
      Complex complex17 = complex8.conjugate();
      ComplexField complexField0 = complex0.getField();
      double double3 = complex17.abs();
      Complex complex18 = complex7.tan();
      Complex complex19 = complex2.sin();
      Complex complex20 = complex14.sinh();
      Complex complex21 = complex3.sin();
      double double4 = complex15.abs();
      Complex complex22 = complex19.subtract(complex16);
      Complex complex23 = complex8.NaN.conjugate();
      boolean boolean1 = complex1.isNaN();
      double double5 = complex14.getReal();
      Complex complex24 = complex15.tan();
      int int0 = complex15.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.exp();
      double double0 = complex2.abs();
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex2.sinh();
      ComplexField complexField0 = complex4.I.getField();
      Complex complex5 = complex0.sqrt1z();
      String string0 = complex5.toString();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.NaN.conjugate();
      double double1 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.getArgument();
      double double1 = complex0.INF.getArgument();
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex0.ZERO.createComplex(1909.5479539, (-3436.4308045756));
      List<Complex> list0 = complex4.ONE.nthRoot(3069);
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex5.atan();
      double double2 = complex0.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex0.multiply(complex4);
      Object object0 = complex7.readResolve();
      boolean boolean1 = complex0.equals(object0);
      int int0 = complex3.hashCode();
      Complex complex8 = complex3.atan();
      Complex complex9 = complex3.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex1.NaN.acos();
      Complex complex6 = complex1.divide(complex0);
      double double0 = complex0.ONE.abs();
      ComplexField complexField0 = complex5.NaN.getField();
      ComplexField complexField1 = complex3.ZERO.getField();
      Complex complex7 = complex1.add(complex3);
      Complex complex8 = complex2.pow(complex1);
      int int0 = complex0.hashCode();
      int int1 = complex3.hashCode();
      Complex complex9 = complex8.cos();
      Complex complex10 = Complex.NaN;
      ComplexField complexField2 = complex10.getField();
      Object object0 = complex10.readResolve();
      boolean boolean0 = complex4.equals(object0);
      Complex complex11 = complex9.cos();
      try { 
        complex4.nthRoot((-1168));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,168
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(402.9255823599115, 5029.674640821928);
      ComplexField complexField0 = complex0.I.getField();
      ComplexField complexField1 = complex0.getField();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.I.pow(complex4);
      Complex complex7 = Complex.I;
      boolean boolean0 = complex2.equals(complex7);
      Complex complex8 = complex5.asin();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.I.subtract(complex1);
      Complex complex4 = complex3.NaN.multiply(0.6666666269302368);
      Complex complex5 = complex3.INF.tanh();
      int int0 = complex1.ONE.hashCode();
      Complex complex6 = complex3.INF.multiply(0.0);
      Object object0 = complex0.readResolve();
      Complex complex7 = complex0.multiply(1.0);
      Complex complex8 = complex7.sin();
      try { 
        complex8.NaN.nthRoot((-696));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -696
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex2.INF.multiply(complex1);
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex1.ZERO.tan();
      Complex complex6 = complex0.ZERO.divide(complex1);
      Complex complex7 = complex6.INF.divide(complex2);
      Complex complex8 = complex6.multiply(complex1);
      double double0 = complex0.ONE.getArgument();
      Complex complex9 = complex0.negate();
      try { 
        complex9.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      String string0 = complex0.ONE.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex3 = complex0.ONE.cos();
      Complex complex4 = complex2.ZERO.asin();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.multiply(0.0);
      boolean boolean0 = complex0.equals(complex1);
      ComplexField complexField1 = complex4.I.getField();
      ComplexField complexField2 = complex4.getField();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex4.log();
      Complex complex9 = complex0.atan();
      double double0 = complex6.getArgument();
      Complex complex10 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.NaN.tanh();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.I.asin();
      Complex complex6 = complex4.ONE.atan();
      double double0 = complex6.ONE.getArgument();
      Complex complex7 = complex5.acos();
      Object object0 = complex4.readResolve();
      Complex complex8 = complex0.createComplex((-41.0652277389465), (-41.0652277389465));
      double double1 = complex4.getReal();
      Complex complex9 = complex0.multiply(complex4);
      double double2 = complex8.getImaginary();
      List<Complex> list0 = complex8.INF.nthRoot(1834);
      Complex complex10 = complex0.sinh();
      boolean boolean0 = complex0.equals(complex5);
      Complex complex11 = Complex.I;
      Complex complex12 = complex8.ZERO.pow(complex11);
      Complex complex13 = complex10.cosh();
      boolean boolean1 = complex10.isNaN();
      Complex complex14 = complex5.add(complex13);
      ComplexField complexField0 = complex8.getField();
      Complex complex15 = complex13.acos();
      List<Complex> list1 = complex14.nthRoot(1834);
      Complex complex16 = complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.ONE.exp();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.INF.subtract(complex1);
      Complex complex5 = complex0.ZERO.sin();
      Complex complex6 = complex4.ONE.add(complex2);
      Complex complex7 = complex6.ONE.subtract(complex0);
      Complex complex8 = complex0.NaN.createComplex(3148.4563391, 3148.4563391);
      Complex complex9 = complex3.tan();
      double double0 = complex9.getArgument();
      Complex complex10 = complex8.ZERO.cosh();
      Complex complex11 = complex9.multiply(1343.92);
      Complex complex12 = complex1.multiply(complex8);
      Complex complex13 = complex9.tanh();
      Complex complex14 = complex8.conjugate();
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex2.ONE.add(complex1);
      Complex complex4 = complex3.INF.log();
      ComplexField complexField0 = complex2.INF.getField();
      double double0 = complex1.INF.abs();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.ONE.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      int int0 = complex5.hashCode();
      double double1 = complex5.getReal();
      ComplexField complexField1 = complex0.getField();
      Complex complex7 = complex5.log();
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex2.equals(object0);
      Complex complex8 = complex1.exp();
      Complex complex9 = complex2.multiply(2502.644);
      Complex complex10 = complex3.multiply(Double.POSITIVE_INFINITY);
      boolean boolean1 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.ONE.add(complex3);
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField0 = complex3.getField();
      double double0 = complex3.I.getArgument();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex3.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1013.90788232587), (-1013.90788232587));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.333333333333333);
      Complex complex1 = complex0.INF.multiply(0.333333333333333);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex4.I.atan();
      try { 
        complex3.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = (-1064.5097802748478);
      Complex complex0 = new Complex((-1064.5097802748478), (-1064.5097802748478));
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex0.NaN.tanh();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.INF.createComplex((-3425.8477408566628), 2.0);
      Complex complex7 = complex0.ONE.pow(complex5);
      Complex complex8 = complex7.negate();
      Complex complex9 = complex8.ZERO.exp();
      double double1 = complex0.ZERO.abs();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex5.NaN.divide(complex4);
      try { 
        complex10.ONE.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.subtract(complex1);
      Complex complex7 = complex2.divide(complex5);
      Complex complex8 = complex0.I.log();
      List<Complex> list0 = complex1.nthRoot(216);
      Complex complex9 = complex0.ZERO.cosh();
      Complex complex10 = complex4.divide(complex7);
      Complex complex11 = complex10.createComplex(1543.2393645, Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.asin();
      double double0 = complex12.NaN.getArgument();
      Complex complex13 = complex3.log();
      Complex complex14 = complex0.log();
      Complex complex15 = complex13.INF.sinh();
      Complex complex16 = complex7.sinh();
      boolean boolean0 = complex5.isNaN();
      Complex complex17 = complex7.negate();
      Complex complex18 = complex17.sqrt();
      Complex complex19 = complex17.ZERO.cos();
      double double1 = complex16.abs();
      double double2 = complex1.getReal();
      List<Complex> list1 = complex6.nthRoot(216);
      Complex complex20 = complex13.add(complex5);
      String string0 = complex10.toString();
      Complex complex21 = complex15.tan();
      Complex complex22 = complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.pow(complex0);
      double double0 = complex1.I.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.sin();
      boolean boolean1 = complex7.isInfinite();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1708.8344345057012);
      Complex complex1 = complex0.sinh();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex0.NaN.sqrt();
      Complex complex7 = complex6.INF.exp();
      ComplexField complexField0 = complex2.getField();
      Complex complex8 = complex0.createComplex(1734.2935089, 0.0);
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex0.add(complex9);
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.I.sqrt();
      Complex complex4 = complex1.NaN.cos();
      boolean boolean0 = complex1.isInfinite();
      double double0 = complex0.getReal();
      Complex complex5 = complex0.pow(complex1);
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(4581.862, 1702.0);
      Complex complex1 = complex0.exp();
      double double0 = complex1.abs();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex0.multiply(complex2);
      Complex complex7 = complex6.tanh();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cosh();
      String string0 = complex0.toString();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex1.NaN.atan();
      Complex complex5 = complex2.ZERO.createComplex((-1.0), (-2699.5356));
      Complex complex6 = complex1.log();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-513.0), (-513.0));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.ONE.subtract(complex1);
      Complex complex4 = complex0.ZERO.createComplex((-513.0), 0.0);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.ZERO.atan();
      Complex complex5 = complex4.ZERO.tanh();
      Object object0 = complex2.ONE.readResolve();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex6.INF.atan();
      Complex complex8 = complex2.sinh();
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex1.atan();
      Complex complex10 = complex8.subtract(complex0);
      boolean boolean0 = complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-4377.633717084), (-2125.1344406));
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = complex3.INF.cos();
      List<Complex> list0 = complex1.ONE.nthRoot(255);
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex0.cosh();
      double double0 = complex6.ZERO.abs();
      double double1 = complex2.getImaginary();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex0.NaN.multiply(complex4);
      Complex complex9 = complex6.INF.divide(complex2);
      Complex complex10 = complex6.asin();
      Complex complex11 = complex10.I.multiply((-2125.1344406));
      Complex complex12 = complex10.divide(complex6);
      Complex complex13 = complex2.sqrt1z();
      ComplexField complexField0 = complex3.getField();
      boolean boolean0 = complex11.equals(complex13);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.exp();
      double double0 = complex2.abs();
      Complex complex3 = complex2.sinh();
      ComplexField complexField0 = complex3.I.getField();
      Complex complex4 = complex0.sqrt1z();
      String string0 = complex4.toString();
      Complex complex5 = complex4.acos();
      double double1 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.NaN.log();
      double double0 = complex0.I.getArgument();
      List<Complex> list0 = complex0.NaN.nthRoot(191);
      double double1 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.cos();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.ONE.divide(complex0);
      double double0 = complex0.abs();
      Complex complex3 = complex1.exp();
      double double1 = complex0.ONE.abs();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.ONE.conjugate();
      Complex complex6 = complex1.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.NaN.cosh();
      Complex complex8 = complex7.INF.exp();
      Complex complex9 = complex3.ZERO.atan();
      String string0 = complex0.toString();
      Complex complex10 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex1.log();
      boolean boolean0 = complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = complex4.sin();
      Complex complex7 = complex6.add(complex3);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.subtract(complex0);
      double double1 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.ZERO.atan();
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex3.I.sin();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex2.log();
      Complex complex9 = complex2.negate();
      Complex complex10 = complex2.conjugate();
      Complex complex11 = complex0.negate();
      Complex complex12 = complex8.ONE.pow(complex2);
      Complex complex13 = complex11.ZERO.acos();
      Complex complex14 = complex1.sqrt1z();
      String string0 = complex14.toString();
      Complex complex15 = complex8.add(complex2);
      List<Complex> list0 = complex4.nthRoot(107);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.ONE.cosh();
      Complex complex4 = complex0.I.pow(complex1);
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex0.cosh();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getReal();
      double double1 = complex0.ZERO.getArgument();
      List<Complex> list0 = complex0.nthRoot(365);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex0.cos();
      Object object0 = complex3.NaN.readResolve();
      Complex complex4 = complex2.NaN.cosh();
      double double2 = complex2.abs();
      Complex complex5 = complex3.multiply(complex2);
      double double3 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.NaN.atan();
      int int0 = complex0.hashCode();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ZERO.tanh();
      Complex complex5 = complex4.sin();
      int int1 = complex5.NaN.hashCode();
      Complex complex6 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.NaN.asin();
      double double0 = complex0.INF.getArgument();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.createComplex(0.8414709848078965, 0.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(0.0);
      double double0 = complex0.INF.getArgument();
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply(1531.0);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.multiply(complex0);
      String string0 = complex1.toString();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.exp();
      int int0 = complex1.hashCode();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.I.cosh();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex8.I.add(complex0);
      double double0 = complex1.getArgument();
      double double1 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(7.549789948768648E-8, 6.283185307179586);
      Complex complex1 = complex0.ONE.exp();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isNaN();
      Object object0 = complex0.readResolve();
      boolean boolean2 = complex0.equals(object0);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex1.I.log();
      Complex complex5 = complex4.ONE.tan();
      double double0 = complex2.abs();
      Complex complex6 = complex2.divide(complex0);
      Complex complex7 = complex0.negate();
      Complex complex8 = Complex.ONE;
      boolean boolean3 = complex7.equals(complex8);
      Complex complex9 = complex8.ONE.tan();
      String string0 = complex9.NaN.toString();
      Complex complex10 = complex9.ONE.tan();
      Complex complex11 = complex8.sinh();
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex8.sqrt();
      Complex complex14 = complex11.ONE.tan();
      Complex complex15 = complex14.ONE.asin();
      Complex complex16 = complex4.createComplex(2323.7, 2323.7);
      Complex complex17 = complex16.cos();
      Complex complex18 = complex6.multiply(complex11);
      Complex complex19 = complex16.add(complex7);
      Complex complex20 = complex17.add(complex0);
      Complex complex21 = complex20.ZERO.add(complex4);
      boolean boolean4 = complex15.isInfinite();
      List<Complex> list0 = complex13.nthRoot(1511);
      Complex complex22 = complex18.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.6666666269302368, 422.1509305);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.I.atan();
      Complex complex5 = complex0.INF.sin();
      Complex complex6 = complex3.NaN.sinh();
      Complex complex7 = complex3.asin();
      Complex complex8 = complex7.NaN.divide(complex4);
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex0.createComplex(422.1509305, 0.6666666269302368);
      Complex complex11 = complex7.tan();
      Complex complex12 = complex10.ZERO.pow(complex5);
      Complex complex13 = complex0.sin();
      int int0 = complex0.INF.hashCode();
      Complex complex14 = complex4.sinh();
      int int1 = complex4.hashCode();
      Complex complex15 = complex10.sqrt();
      Complex complex16 = complex7.subtract(complex5);
      double double0 = complex10.getImaginary();
      Complex complex17 = complex16.NaN.tanh();
      Complex complex18 = complex16.ONE.pow(complex5);
      Complex complex19 = complex11.add(complex16);
      double double1 = complex16.abs();
      double double2 = complex5.INF.abs();
      Object object0 = complex18.readResolve();
      boolean boolean0 = complex17.equals(complex13);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.createComplex(1.0, 1.0);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex5.ONE.multiply(1.0);
      Complex complex8 = complex5.subtract(complex2);
      Complex complex9 = complex2.ONE.cosh();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex10.INF.divide(complex2);
      Complex complex12 = complex11.tan();
      Complex complex13 = complex1.divide(complex4);
      Complex complex14 = complex5.acos();
      Complex complex15 = Complex.NaN;
      Complex complex16 = complex15.I.subtract(complex12);
      Complex complex17 = complex15.ONE.pow(complex10);
      Complex complex18 = complex0.ZERO.subtract(complex15);
      Complex complex19 = complex2.sqrt();
      boolean boolean0 = complex5.equals(complex1);
      Complex complex20 = complex14.atan();
      Complex complex21 = complex8.exp();
      Complex complex22 = complex5.tan();
      Complex complex23 = complex1.log();
      double double0 = complex8.getImaginary();
      List<Complex> list0 = complex19.nthRoot(1563);
      Complex complex24 = complex4.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex1.INF.sinh();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.NaN.atan();
      double double0 = complex5.INF.getArgument();
      List<Complex> list0 = complex6.I.nthRoot(1651);
      Object object0 = complex4.NaN.readResolve();
      Complex complex7 = complex1.subtract(complex5);
      Complex complex8 = complex4.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(866.39515983428, 866.39515983428);
      Complex complex1 = complex0.ONE.negate();
      double double0 = complex1.I.getArgument();
      int int0 = complex1.ZERO.hashCode();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex2.ONE.asin();
      int int1 = complex0.hashCode();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex5.ZERO.negate();
      Object object0 = complex5.readResolve();
      ComplexField complexField1 = complex0.getField();
      Complex complex7 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex2.ONE.tanh();
      boolean boolean0 = complex3.equals(complex1);
      boolean boolean1 = complex2.isInfinite();
      boolean boolean2 = complex3.isNaN();
      Complex complex5 = complex1.exp();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.ONE.nthRoot(1327);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.multiply((double) 1327);
      Complex complex3 = complex0.tan();
      double double0 = complex2.abs();
      Complex complex4 = complex2.NaN.multiply(complex1);
      Complex complex5 = complex0.NaN.multiply(complex4);
      double double1 = complex5.INF.getArgument();
      double double2 = complex5.ZERO.abs();
      List<Complex> list1 = complex5.INF.nthRoot(1327);
      Complex complex6 = complex4.ONE.tanh();
      Complex complex7 = complex1.I.pow(complex0);
      Complex complex8 = complex0.ONE.cosh();
      String string0 = complex7.NaN.toString();
      Complex complex9 = complex2.ONE.pow(complex0);
      Complex complex10 = complex9.NaN.tanh();
      Complex complex11 = complex10.INF.acos();
      double double3 = complex9.ONE.abs();
      Complex complex12 = complex7.ONE.sinh();
      int int0 = complex12.ONE.hashCode();
      int int1 = complex0.hashCode();
      Complex complex13 = complex4.divide(complex1);
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ZERO.atan();
      String string0 = complex2.ZERO.toString();
      Complex complex4 = complex3.ZERO.multiply(2433.699764113);
      int int0 = complex2.I.hashCode();
      Complex complex5 = complex4.NaN.pow(complex0);
      Complex complex6 = complex3.ZERO.multiply(3068.167221652419);
      Complex complex7 = complex3.I.add(complex2);
      Complex complex8 = complex6.atan();
      Complex complex9 = complex8.INF.conjugate();
      Complex complex10 = complex8.I.add(complex4);
      double double0 = complex3.INF.getArgument();
      Complex complex11 = complex0.I.log();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex12 = complex1.createComplex(3113.211930445717, 3113.211930445717);
      Complex complex13 = complex0.tan();
      Complex complex14 = complex13.add(complex0);
      Complex complex15 = complex14.NaN.subtract(complex3);
      Complex complex16 = complex13.NaN.sin();
      Complex complex17 = complex12.INF.exp();
      Complex complex18 = complex17.ZERO.sqrt1z();
      Complex complex19 = complex18.ZERO.tan();
      String string1 = complex1.ZERO.toString();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex20 = complex1.cosh();
      ComplexField complexField1 = complex1.getField();
      Complex complex21 = complex18.asin();
      boolean boolean1 = complex0.equals("");
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.abs();
      Complex complex1 = new Complex((-1), Double.NaN);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.ZERO.acos();
      try { 
        complex0.INF.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex0.ZERO.subtract(complex2);
      Complex complex5 = complex1.negate();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.INF.sinh();
      List<Complex> list0 = complex3.nthRoot(193);
      Complex complex8 = complex2.multiply(0.0);
      Complex complex9 = complex5.acos();
      double double0 = complex1.getArgument();
      Complex complex10 = complex1.atan();
      Complex complex11 = complex3.ZERO.cosh();
      Complex complex12 = complex4.sqrt1z();
      Complex complex13 = complex3.add(complex0);
  }
}
