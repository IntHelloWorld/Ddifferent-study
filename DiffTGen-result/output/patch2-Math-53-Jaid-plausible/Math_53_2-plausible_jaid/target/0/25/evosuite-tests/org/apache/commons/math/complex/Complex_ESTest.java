/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:15:17 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.I.conjugate();
      String string0 = complex0.toString();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex3.atan();
      Complex complex10 = complex3.subtract(complex6);
      Complex complex11 = complex10.INF.sin();
      Complex complex12 = complex8.ZERO.asin();
      Complex complex13 = complex5.multiply(complex9);
      Complex complex14 = complex3.exp();
      Complex complex15 = complex8.log();
      Complex complex16 = complex9.exp();
      String string1 = complex14.toString();
      Complex complex17 = complex9.sin();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-1082.08590755));
      Complex complex1 = complex0.acos();
      String string0 = complex0.ONE.toString();
      Complex complex2 = complex1.NaN.cosh();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.ONE.conjugate();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex3.divide(complex6);
      double double1 = complex6.getReal();
      try { 
        complex7.nthRoot((-790));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -790
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.sqrt1z();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex0.NaN.pow(complex1);
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex2.ONE.atan();
      ComplexField complexField1 = complex5.INF.getField();
      Complex complex7 = complex5.ONE.acos();
      Complex complex8 = complex2.NaN.atan();
      ComplexField complexField2 = complex2.ONE.getField();
      Complex complex9 = complex1.sinh();
      double double0 = complex0.getImaginary();
      double double1 = complex5.abs();
      Complex complex10 = complex0.conjugate();
      double double2 = complex2.abs();
      double double3 = complex0.getReal();
      Complex complex11 = complex2.sqrt();
      Complex complex12 = complex5.atan();
      Complex complex13 = complex11.INF.subtract(complex1);
      Complex complex14 = complex0.cosh();
      Complex complex15 = complex11.conjugate();
      Complex complex16 = complex14.sinh();
      Complex complex17 = complex16.I.multiply(complex12);
      Complex complex18 = complex12.multiply(complex1);
      Complex complex19 = complex18.ZERO.conjugate();
      Complex complex20 = complex7.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 1993;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex0.sin();
      int int1 = complex0.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex4.multiply(0.1818181574344635);
      Complex complex7 = complex6.ONE.sqrt1z();
      Complex complex8 = complex4.createComplex(1.5830993332061267E-10, 0.04168701738764507);
      double double0 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.sin();
      int int0 = complex1.hashCode();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex3.sin();
      Complex complex6 = complex0.I.tan();
      Complex complex7 = complex5.createComplex(0.0, 3524.69761);
      Complex complex8 = complex5.NaN.log();
      Complex complex9 = complex8.ONE.log();
      int int1 = complex9.ONE.hashCode();
      Complex complex10 = complex2.ONE.subtract(complex1);
      int int2 = complex8.I.hashCode();
      double double0 = complex3.getArgument();
      Complex complex11 = complex3.sqrt();
      Complex complex12 = complex2.NaN.divide(complex7);
      double double1 = complex12.abs();
      int int3 = complex11.hashCode();
      Complex complex13 = complex3.sin();
      Complex complex14 = complex13.subtract(complex8);
      Complex complex15 = complex7.tanh();
      Complex complex16 = complex11.I.pow(complex15);
      Complex complex17 = complex13.multiply(complex7);
      Complex complex18 = complex9.atan();
      Complex complex19 = complex18.NaN.cosh();
      ComplexField complexField0 = complex2.getField();
      Complex complex20 = complex7.subtract(complex11);
      String string0 = complex3.toString();
      List<Complex> list0 = complex17.nthRoot(9);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(1124.581559);
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex1.NaN.cos();
      Complex complex6 = complex5.ONE.exp();
      Complex complex7 = complex4.INF.pow(complex3);
      String string0 = complex3.toString();
      Complex complex8 = complex0.INF.conjugate();
      Complex complex9 = complex8.multiply(complex0);
      ComplexField complexField0 = complex8.INF.getField();
      Object object0 = complex8.ONE.readResolve();
      ComplexField complexField1 = complex8.ZERO.getField();
      Complex complex10 = complex8.ONE.divide(complex0);
      Complex complex11 = complex0.ONE.sqrt();
      int int0 = complex0.NaN.hashCode();
      Complex complex12 = complex8.ZERO.divide(complex10);
      Complex complex13 = complex3.NaN.negate();
      Complex complex14 = complex10.I.sqrt();
      Object object1 = complex0.readResolve();
      Complex complex15 = complex10.sin();
      Complex complex16 = complex15.ONE.tan();
      ComplexField complexField2 = complex15.getField();
      Complex complex17 = complex9.log();
      String string1 = complex11.toString();
      Complex complex18 = complex2.tan();
      List<Complex> list0 = complex18.ZERO.nthRoot(3395);
      Complex complex19 = complex9.add(complex7);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.createComplex(0.0, 0.0);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex0.I.subtract(complex1);
      double double0 = complex1.I.abs();
      Complex complex5 = complex1.INF.sinh();
      int int0 = complex0.INF.hashCode();
      double double1 = complex0.getImaginary();
      double double2 = complex1.getArgument();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex4.INF.sqrt1z();
      Complex complex8 = complex6.I.cos();
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex1.sqrt1z();
      ComplexField complexField0 = complex6.getField();
      Complex complex11 = complex4.multiply(complex10);
      List<Complex> list0 = complex10.NaN.nthRoot(1);
      Complex complex12 = complex5.cos();
      Complex complex13 = new Complex(1, 0.0);
      Complex complex14 = complex12.INF.subtract(complex13);
      Complex complex15 = complex1.divide(complex11);
      Complex complex16 = complex10.asin();
      Complex complex17 = complex16.exp();
      Complex complex18 = complex6.multiply(0.0);
      double double3 = complex9.getReal();
      double double4 = complex12.getImaginary();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.createComplex((-1274.73511), 5.0);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.NaN.acos();
      List<Complex> list0 = complex3.INF.nthRoot(1);
      Complex complex4 = complex0.I.sinh();
      Complex complex5 = complex2.I.negate();
      Complex complex6 = complex3.I.pow(complex1);
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex6.INF.sqrt1z();
      String string0 = complex8.NaN.toString();
      boolean boolean0 = complex2.isNaN();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex9.negate();
      Complex complex11 = complex10.I.cos();
      Complex complex12 = complex3.I.subtract(complex4);
      Complex complex13 = complex10.ZERO.pow(complex9);
      Complex complex14 = complex9.negate();
      Complex complex15 = Complex.NaN;
      Complex complex16 = complex3.divide(complex15);
      Complex complex17 = complex4.ONE.multiply(complex7);
      ComplexField complexField0 = complex10.getField();
      Complex complex18 = complex1.conjugate();
      Complex complex19 = complex4.sqrt1z();
      Complex complex20 = complex4.acos();
      Object object0 = complex9.readResolve();
      Complex complex21 = complex16.negate();
      Complex complex22 = complex1.atan();
      int int0 = complex6.hashCode();
      Complex complex23 = complex19.asin();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.I.negate();
      Complex complex4 = complex3.NaN.add(complex2);
      double double0 = complex0.I.abs();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.NaN.sinh();
      Complex complex7 = complex1.INF.subtract(complex5);
      Complex complex8 = complex2.ONE.asin();
      Complex complex9 = complex2.log();
      Object object0 = complex2.readResolve();
      Complex complex10 = complex2.sqrt();
      List<Complex> list0 = complex2.NaN.nthRoot(3293);
      Complex complex11 = complex7.tanh();
      Complex complex12 = complex4.sqrt();
      Complex complex13 = complex1.NaN.sqrt1z();
      Complex complex14 = complex6.sqrt();
      int int0 = complex12.hashCode();
      Complex complex15 = complex3.cos();
      boolean boolean0 = complex3.isInfinite();
      Complex complex16 = complex0.subtract(complex14);
      Complex complex17 = complex5.cosh();
      Complex complex18 = complex9.sqrt();
      Complex complex19 = complex14.tan();
      Complex complex20 = Complex.ZERO;
      Complex complex21 = complex0.add(complex20);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.NaN.cos();
      double double0 = complex1.NaN.abs();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.ZERO.divide(complex3);
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.INF.multiply(complex1);
      double double1 = complex0.abs();
      boolean boolean1 = complex4.isInfinite();
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex7.ONE.add(complex3);
      boolean boolean2 = complex7.isNaN();
      Complex complex9 = complex3.atan();
      double double2 = complex9.NaN.abs();
      Complex complex10 = complex7.NaN.divide(complex0);
      Complex complex11 = complex2.multiply((-1418.8148666));
      Complex complex12 = complex4.multiply((-245.8272158590844));
      Object object0 = complex8.readResolve();
      Complex complex13 = complex0.tanh();
      Complex complex14 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, 73.8474297271);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex2.ONE.subtract(complex3);
      Complex complex5 = complex3.NaN.exp();
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex2.subtract(complex3);
      int int0 = complex8.ZERO.hashCode();
      Complex complex9 = complex8.NaN.negate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex10 = complex3.exp();
      double double0 = complex10.I.abs();
      Complex complex11 = complex0.sqrt();
      Complex complex12 = complex11.ONE.multiply(complex2);
      Complex complex13 = complex8.cos();
      Complex complex14 = complex4.pow(complex0);
      Complex complex15 = complex14.I.conjugate();
      Complex complex16 = complex8.cosh();
      Complex complex17 = complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      double double0 = complex0.ONE.getArgument();
      Complex complex2 = complex0.multiply(Double.NaN);
      Complex complex3 = complex0.INF.asin();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.cos();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.ZERO.multiply(complex2);
      Complex complex7 = complex4.NaN.add(complex5);
      Complex complex8 = complex4.log();
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex9.ZERO.tanh();
      Complex complex11 = complex10.I.cos();
      Complex complex12 = complex10.I.sqrt();
      Complex complex13 = complex7.cosh();
      Complex complex14 = complex13.ONE.tanh();
      Complex complex15 = complex14.ZERO.log();
      double double1 = complex13.getArgument();
      boolean boolean1 = complex8.equals(complex0);
      boolean boolean2 = complex1.isInfinite();
      boolean boolean3 = complex10.isNaN();
      Complex complex16 = complex11.cos();
      ComplexField complexField0 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.I.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex1.exp();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex3.multiply(complex5);
      Complex complex7 = complex1.cos();
      Complex complex8 = complex1.negate();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex3.equals(object0);
      boolean boolean1 = complex7.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex1.atan();
      boolean boolean0 = complex2.isInfinite();
      Complex complex3 = complex0.multiply(2422.73504871);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.0, 756.9973436653567);
      Complex complex2 = complex0.divide(complex1);
      int int0 = complex0.hashCode();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex3.ZERO.multiply(complex2);
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex0.multiply(complex3);
      Complex complex8 = complex6.ZERO.tan();
      double double0 = complex8.INF.abs();
      Complex complex9 = complex7.log();
      Complex complex10 = complex6.I.cosh();
      Complex complex11 = complex1.sqrt();
      Complex complex12 = complex7.sin();
      Object object0 = complex3.readResolve();
      double double1 = complex6.abs();
      List<Complex> list0 = complex12.nthRoot(1);
      ComplexField complexField0 = complex2.getField();
      double double2 = complex7.getReal();
      ComplexField complexField1 = complex5.getField();
      Complex complex13 = complex3.subtract(complex1);
      boolean boolean0 = complex7.isInfinite();
      Complex complex14 = complex0.cosh();
      List<Complex> list1 = complex14.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.INF.sin();
      Complex complex4 = complex1.I.createComplex((-2834.203727596), (-2834.203727596));
      ComplexField complexField0 = complex1.getField();
      int int0 = complex0.I.hashCode();
      int int1 = complex0.I.hashCode();
      ComplexField complexField1 = complex0.getField();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.I.divide(complex4);
      Complex complex7 = complex6.I.subtract(complex2);
      Complex complex8 = complex1.NaN.add(complex0);
      double double0 = complex8.INF.getArgument();
      Object object1 = complex5.readResolve();
      Complex complex9 = complex4.sin();
      Complex complex10 = complex4.log();
      Complex complex11 = complex10.INF.subtract(complex4);
      double double1 = complex11.ZERO.getArgument();
      Complex complex12 = complex1.log();
      ComplexField complexField2 = complex1.getField();
      Complex complex13 = complex3.pow(complex4);
      Complex complex14 = complex8.divide(complex13);
      Complex complex15 = complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(1182.68738996611, 0.0);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.I.sinh();
      String string0 = complex0.toString();
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex3.multiply(complex5);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.asin();
      double double0 = complex8.INF.getArgument();
      double double1 = complex8.getArgument();
      Complex complex9 = complex2.createComplex((-448.6), 4609.27717);
      Complex complex10 = complex0.pow(complex8);
      Complex complex11 = complex10.pow(complex9);
      Complex complex12 = complex7.exp();
      Complex complex13 = complex1.sinh();
      try { 
        complex13.INF.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-1869.27873), 958.0);
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.ZERO.cosh();
      int int0 = complex1.hashCode();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.NaN.createComplex((-1869.27873), 958.0);
      Complex complex4 = complex2.ZERO.add(complex1);
      Complex complex5 = complex4.ZERO.subtract(complex0);
      double double0 = complex0.getArgument();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex3.multiply(958.0);
      int int1 = complex1.hashCode();
      Complex complex9 = complex1.ONE.tanh();
      Object object0 = complex9.I.readResolve();
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex7.createComplex(2.667997390530912, 2.667997390530912);
      boolean boolean0 = complex6.isNaN();
      Complex complex12 = complex4.tanh();
      Complex complex13 = complex9.pow(complex8);
      ComplexField complexField0 = complex1.getField();
      Complex complex14 = complex3.sqrt1z();
      ComplexField complexField1 = complex12.getField();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.INF.atan();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex3.multiply(complex1);
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.ONE.add(complex1);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex6.ZERO.asin();
      Complex complex11 = complex8.ONE.divide(complex9);
      Complex complex12 = complex8.NaN.cos();
      Complex complex13 = complex8.ZERO.atan();
      Complex complex14 = complex2.sin();
      Complex complex15 = complex3.cosh();
      Complex complex16 = complex2.log();
      double double0 = complex6.getImaginary();
      Complex complex17 = complex11.INF.log();
      Complex complex18 = complex17.ZERO.pow(complex6);
      Complex complex19 = complex2.conjugate();
      Complex complex20 = complex5.exp();
      String string0 = complex20.NaN.toString();
      Complex complex21 = complex2.add(complex11);
      Complex complex22 = complex21.NaN.exp();
      Complex complex23 = complex14.multiply(Double.NaN);
      Complex complex24 = complex23.I.sqrt1z();
      Complex complex25 = complex16.exp();
      int int0 = complex25.ZERO.hashCode();
      boolean boolean0 = complex3.isInfinite();
      boolean boolean1 = complex2.isInfinite();
      Complex complex26 = complex18.cosh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.createComplex(0.6366197723675814, (-2643.149));
      Complex complex4 = complex2.NaN.tanh();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex0.NaN.subtract(complex1);
      Complex complex7 = complex0.I.cosh();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex0.sin();
      int int0 = complex0.hashCode();
      Complex complex10 = complex3.pow(complex2);
      Complex complex11 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex0.ONE.multiply(0.0);
      double double1 = complex3.getReal();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.I.abs();
      try { 
        complex0.INF.nthRoot((-985));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -985
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex1.ONE.createComplex(988.441, Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.ONE.exp();
      Complex complex6 = complex5.INF.multiply(1782.9303935);
      Object object0 = complex6.ONE.readResolve();
      Complex complex7 = complex0.ZERO.subtract(complex1);
      Complex complex8 = complex0.atan();
      Complex complex9 = complex8.NaN.sin();
      Complex complex10 = complex6.INF.divide(complex0);
      double double0 = complex8.getImaginary();
      Complex complex11 = complex6.INF.cosh();
      Complex complex12 = complex11.ZERO.log();
      Complex complex13 = complex12.NaN.asin();
      Complex complex14 = complex4.ONE.createComplex(Double.POSITIVE_INFINITY, 303.2794086663089);
      double double1 = complex4.getImaginary();
      boolean boolean0 = complex7.isInfinite();
      Complex complex15 = complex4.INF.conjugate();
      String string0 = complex15.toString();
      Complex complex16 = complex4.ZERO.asin();
      Complex complex17 = complex4.asin();
      Complex complex18 = complex6.cos();
      Complex complex19 = complex1.cosh();
      Complex complex20 = complex8.ONE.sin();
      boolean boolean1 = complex17.isNaN();
      int int0 = complex11.hashCode();
      int int1 = complex0.hashCode();
      Complex complex21 = complex9.subtract(complex1);
      Object object1 = complex8.readResolve();
      List<Complex> list0 = complex1.nthRoot(1194);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.ONE.add(complex1);
      Complex complex5 = complex3.ZERO.sqrt1z();
      String string0 = complex4.INF.toString();
      Complex complex6 = complex2.I.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex7 = Complex.I;
      boolean boolean0 = complex2.equals(complex7);
      Complex complex8 = complex6.multiply(complex7);
      int int0 = complex3.hashCode();
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex0.NaN.multiply((-1628.37239));
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex4.ZERO.negate();
      Complex complex7 = complex6.INF.multiply(complex0);
      boolean boolean0 = complex1.isNaN();
      Complex complex8 = complex4.ONE.add(complex5);
      int int0 = complex8.I.hashCode();
      Object object0 = complex4.readResolve();
      Complex complex9 = complex2.createComplex((-2424.8160751739374), 1762.79);
      int int1 = complex9.NaN.hashCode();
      Complex complex10 = complex9.add(complex1);
      Complex complex11 = complex2.I.subtract(complex4);
      Complex complex12 = complex9.add(complex0);
      Object object1 = complex2.readResolve();
      Complex complex13 = complex4.ZERO.cosh();
      Complex complex14 = complex4.exp();
      Complex complex15 = complex12.sinh();
      ComplexField complexField0 = complex15.ZERO.getField();
      Object object2 = complex14.readResolve();
      double double0 = complex10.getReal();
      double double1 = complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.add(complex0);
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex2.ONE.createComplex((-808.6369343553), (-808.6369343553));
      Complex complex4 = complex3.add(complex1);
      String string0 = complex4.I.toString();
      int int1 = 0;
      Complex complex5 = complex1.I.conjugate();
      Complex complex6 = complex5.I.exp();
      Complex complex7 = complex5.ONE.log();
      try { 
        complex1.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.log();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      String string0 = complex0.toString();
      Complex complex2 = complex0.sqrt();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex2.getReal();
      Complex complex3 = complex0.I.exp();
      Complex complex4 = complex3.NaN.tanh();
      List<Complex> list0 = complex1.nthRoot(242);
      double double1 = complex0.abs();
      boolean boolean1 = complex1.isInfinite();
      Complex complex5 = complex0.multiply((double) 242);
      Complex complex6 = complex5.createComplex(Double.POSITIVE_INFINITY, (-2746.238));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply(0.11113807559013367);
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex2.I.subtract(complex0);
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = Complex.ONE;
      boolean boolean1 = complex1.equals(complex6);
      boolean boolean2 = complex2.isInfinite();
      Complex complex7 = complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 0.11113807559013367;
      Complex complex0 = new Complex(0.11113807559013367, 0.11113807559013367);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex1.NaN.atan();
      Complex complex6 = complex0.ONE.log();
      Complex complex7 = complex6.I.cosh();
      Complex complex8 = complex7.ZERO.sqrt1z();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(432.9739526, (-170.0778742));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(1864.2707036, 1864.2707036);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.I.tanh();
      double double0 = complex4.ONE.abs();
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex6.conjugate();
      Complex complex9 = complex3.sqrt1z();
      boolean boolean0 = complex7.equals("M&CiWXl4Xu''|");
      double double1 = complex4.getArgument();
      double double2 = complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      int int0 = complex0.ZERO.hashCode();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-4418), (-604.5602));
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex0.INF.log();
      Object object0 = complex3.I.readResolve();
      double double0 = complex0.INF.getArgument();
      try { 
        complex0.I.nthRoot((-4418));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,418
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.NaN.getField();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt1z();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex1.NaN.subtract(complex0);
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex5.ONE.log();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex7.I.log();
      Complex complex9 = complex1.subtract(complex7);
      Complex complex10 = complex5.exp();
      Complex complex11 = complex10.NaN.subtract(complex7);
      Complex complex12 = complex0.cosh();
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.ONE.cos();
      Object object0 = complex2.INF.readResolve();
      double double0 = complex1.getArgument();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex1.ONE.negate();
      double double1 = complex4.NaN.getArgument();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex0.exp();
      List<Complex> list0 = complex4.nthRoot(709);
      String string0 = complex7.ZERO.toString();
      Complex complex8 = complex0.add(complex1);
      Complex complex9 = complex1.tan();
      Complex complex10 = complex7.cosh();
      Complex complex11 = complex1.log();
      ComplexField complexField1 = complex8.getField();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.ONE.conjugate();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(2107.307);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex0.INF.log();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex6.tan();
      Complex complex9 = complex8.log();
      Complex complex10 = complex9.multiply(complex7);
      try { 
        complex10.ZERO.nthRoot((-4175));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,175
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.createComplex(6275.1598, 6275.1598);
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.cos();
      try { 
        complex4.nthRoot((-388));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -388
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.ONE.createComplex((-346.893306), (-346.893306));
      Complex complex4 = complex0.ZERO.sinh();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.conjugate();
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.ONE.add(complex2);
      double double0 = complex0.getReal();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.multiply(0.0);
      ComplexField complexField0 = complex3.getField();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex5.I.subtract(complex4);
      Complex complex7 = complex3.multiply(0.0);
      Complex complex8 = complex7.add(complex1);
      double double0 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.createComplex(0.0, 1.5830993332061267E-10);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      List<Complex> list0 = complex1.ZERO.nthRoot(389);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sin();
      double double0 = complex0.ZERO.getArgument();
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex0.atan();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      double double0 = complex1.INF.getArgument();
      Complex complex2 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.ZERO.pow(complex1);
      Complex complex5 = complex4.ZERO.negate();
      int int0 = complex0.hashCode();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.ONE.sqrt1z();
      Object object0 = complex2.NaN.readResolve();
      Complex complex3 = complex1.INF.cos();
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex1.I.negate();
      Complex complex7 = complex6.NaN.pow(complex4);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex0.I.cosh();
      Complex complex10 = complex3.I.sin();
      List<Complex> list0 = complex4.nthRoot(1382);
      Complex complex11 = complex4.add(complex0);
      Complex complex12 = complex2.sqrt1z();
      Complex complex13 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.multiply((-1717.106523552763));
      Complex complex3 = complex0.pow(complex1);
      int int0 = complex3.hashCode();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-366.4776821), (-366.4776821));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply((-366.4776821));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1.0), (-1.0));
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.cos();
      double double0 = complex3.ZERO.abs();
      Complex complex4 = complex0.add(complex1);
      String string0 = complex1.NaN.toString();
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex0.sqrt();
      String string1 = complex4.toString();
      double double1 = complex1.getImaginary();
      Complex complex7 = complex4.log();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex9.ZERO.sin();
      Complex complex11 = complex2.negate();
      Complex complex12 = complex9.subtract(complex5);
      Complex complex13 = complex8.cosh();
      Complex complex14 = complex5.pow(complex8);
      Complex complex15 = complex7.createComplex((-979.048219678), (-1.0));
      ComplexField complexField0 = complex7.getField();
      Complex complex16 = complex8.sqrt();
      Complex complex17 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.asin();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex1.ONE.divide(complex0);
      boolean boolean0 = complex0.equals(object0);
      boolean boolean1 = complex0.isInfinite();
      boolean boolean2 = complex0.isNaN();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex0.NaN.createComplex(0.0, 0.0);
      Complex complex6 = complex4.tan();
      Object object1 = complex1.readResolve();
      Complex complex7 = complex3.log();
      Complex complex8 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      double double0 = complex0.INF.abs();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.log();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex3.I.log();
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex6.I.multiply(Double.POSITIVE_INFINITY);
      Object object0 = complex1.readResolve();
      Complex complex8 = complex0.NaN.subtract(complex1);
      Complex complex9 = complex4.tan();
      Complex complex10 = complex9.NaN.cos();
      Complex complex11 = complex8.I.divide(complex2);
      Complex complex12 = complex3.cosh();
      Complex complex13 = complex4.sinh();
      ComplexField complexField0 = complex3.INF.getField();
      Complex complex14 = complex12.multiply(complex0);
      Complex complex15 = complex14.I.multiply(complex12);
      Complex complex16 = complex1.divide(complex3);
      double double1 = complex2.getImaginary();
      Complex complex17 = complex2.negate();
      Complex complex18 = new Complex((-1596.89259818), 0.0);
      Complex complex19 = complex16.add(complex18);
      Complex complex20 = complex3.tan();
      int int0 = complex1.hashCode();
      Complex complex21 = complex1.negate();
      try { 
        complex18.nthRoot((-5194));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,194
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-6.663542893624021E-14), (-6.663542893624021E-14));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.ZERO.sqrt();
      Complex complex4 = complex2.INF.atan();
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex3.NaN.tan();
      Complex complex7 = complex1.log();
      Complex complex8 = complex5.ONE.sinh();
      Complex complex9 = complex7.I.sqrt();
      double double0 = complex7.getReal();
      String string0 = complex5.toString();
      Complex complex10 = complex4.sinh();
      Complex complex11 = complex4.multiply((-29.992966402518515));
      Complex complex12 = complex11.INF.acos();
      double double1 = complex11.NaN.getArgument();
      Complex complex13 = complex10.INF.add(complex8);
      Complex complex14 = complex9.multiply((-29.992966402518515));
      Complex complex15 = complex14.NaN.sqrt();
      Complex complex16 = complex10.NaN.createComplex((-6.663542893624021E-14), (-6.663542893624021E-14));
      Complex complex17 = complex10.exp();
      Complex complex18 = complex17.multiply(complex9);
      Complex complex19 = complex15.INF.sqrt();
      Complex complex20 = complex14.negate();
      Complex complex21 = complex2.pow(complex7);
      Complex complex22 = complex21.acos();
      Complex complex23 = complex21.I.multiply(complex14);
      String string1 = complex15.toString();
      List<Complex> list0 = complex0.nthRoot(1554);
      List<Complex> list1 = complex11.nthRoot(1554);
      Complex complex24 = complex21.cosh();
      Complex complex25 = complex3.atan();
      Complex complex26 = complex22.cosh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-0.1666666567325592), (-0.1666666567325592));
      Complex complex1 = complex0.ONE.tanh();
      int int0 = complex1.ONE.hashCode();
      List<Complex> list0 = complex1.I.nthRoot(1);
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex3.ONE.asin();
      ComplexField complexField0 = complex2.getField();
      Complex complex5 = complex2.asin();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.pow(complex6);
      Complex complex8 = complex7.add(complex5);
      double double0 = complex8.abs();
      Complex complex9 = complex1.ZERO.sin();
      boolean boolean0 = complex0.equals(complex7);
      Complex complex10 = complex7.sinh();
      Complex complex11 = complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sinh();
      int int0 = complex0.NaN.hashCode();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex0.ONE.cosh();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.cos();
      double double0 = complex5.ONE.abs();
      Complex complex7 = complex0.INF.pow(complex5);
      double double1 = complex5.abs();
      Complex complex8 = complex0.ONE.negate();
      boolean boolean1 = complex0.equals(complex5);
      Complex complex9 = complex6.negate();
      Complex complex10 = complex6.pow(complex9);
      int int1 = complex2.hashCode();
      Complex complex11 = complex6.ZERO.conjugate();
      Object object1 = complex11.ZERO.readResolve();
      Complex complex12 = complex11.I.pow(complex5);
      Complex complex13 = complex12.INF.multiply(989.18891);
      Complex complex14 = complex5.asin();
      Complex complex15 = complex6.cosh();
      Complex complex16 = complex15.ONE.acos();
      Complex complex17 = complex8.multiply(0.0);
      Complex complex18 = complex0.pow(complex3);
      Complex complex19 = complex6.negate();
      Complex complex20 = complex18.cos();
      double double2 = complex17.getImaginary();
      Complex complex21 = complex3.log();
      Complex complex22 = complex5.exp();
      Complex complex23 = complex19.createComplex(1.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.createComplex(3790.897845640806, 0.0);
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex0.INF.tan();
      Complex complex6 = complex3.ZERO.sinh();
      Complex complex7 = complex0.ZERO.add(complex1);
      Object object1 = complex0.readResolve();
  }
}
