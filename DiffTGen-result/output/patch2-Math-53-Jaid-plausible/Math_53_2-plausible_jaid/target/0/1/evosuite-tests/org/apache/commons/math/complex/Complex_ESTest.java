/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:04:50 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.NaN;
      double double0 = complex0.getReal();
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.sin();
      Complex complex7 = Complex.I;
      Complex complex8 = complex0.divide(complex7);
      Complex complex9 = complex4.tan();
      double double1 = complex6.abs();
      Complex complex10 = complex1.tan();
      Complex complex11 = complex8.sqrt1z();
      Complex complex12 = complex11.ZERO.tanh();
      Complex complex13 = complex7.sinh();
      Complex complex14 = complex4.sqrt();
      Complex complex15 = complex7.exp();
      Complex complex16 = complex3.exp();
      Object object0 = complex4.readResolve();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.7976931348623157E308, 1.7976931348623157E308);
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.ZERO.pow(complex1);
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex1.INF.cosh();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex3.exp();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex4.sin();
      ComplexField complexField0 = complex5.getField();
      Complex complex10 = complex7.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.atan();
      double double0 = complex2.abs();
      Complex complex4 = complex2.I.multiply(0.0);
      List<Complex> list0 = complex0.I.nthRoot(247);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.I.tan();
      List<Complex> list1 = complex5.NaN.nthRoot(247);
      Complex complex7 = complex0.cos();
      double double1 = complex7.ZERO.getArgument();
      Complex complex8 = complex1.createComplex((-1.0), (-1.0));
      Complex complex9 = complex2.sqrt();
      Complex complex10 = complex8.tanh();
      Complex complex11 = complex4.subtract(complex5);
      Complex complex12 = complex5.cosh();
      Complex complex13 = complex8.multiply(complex9);
      Complex complex14 = complex4.createComplex(693.383116819, 1232.2733360485);
      Complex complex15 = complex14.asin();
      Complex complex16 = complex11.sinh();
      ComplexField complexField0 = complex15.getField();
      Complex complex17 = complex11.sinh();
      Complex complex18 = complex1.negate();
      String string0 = complex18.toString();
      Complex complex19 = complex11.add(complex16);
      int int0 = complex1.hashCode();
      ComplexField complexField1 = complex8.getField();
      Complex complex20 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex1.I.exp();
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex0.INF.conjugate();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex5.ONE.atan();
      Complex complex8 = complex2.NaN.multiply(0.0);
      Complex complex9 = complex5.ZERO.sinh();
      ComplexField complexField0 = complex7.I.getField();
      ComplexField complexField1 = complex6.ZERO.getField();
      Complex complex10 = complex6.I.cosh();
      Complex complex11 = complex6.INF.tan();
      Complex complex12 = complex6.multiply((-0.25));
      Complex complex13 = complex0.acos();
      Complex complex14 = complex13.I.negate();
      int int0 = complex5.hashCode();
      List<Complex> list0 = complex13.nthRoot(4264);
      Complex complex15 = complex0.multiply(complex1);
      Complex complex16 = complex2.tanh();
      double double0 = complex14.getArgument();
      Complex complex17 = complex14.atan();
      Complex complex18 = complex17.NaN.conjugate();
      Object object0 = complex13.readResolve();
      int int1 = complex17.hashCode();
      double double1 = complex12.getArgument();
      int int2 = complex5.hashCode();
      Complex complex19 = complex11.exp();
      boolean boolean0 = complex2.isNaN();
      Complex complex20 = complex11.atan();
      Complex complex21 = complex14.tanh();
      Complex complex22 = complex10.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = new Complex(1479.599, 1479.599);
      Complex complex4 = complex0.I.pow(complex3);
      int int0 = complex4.I.hashCode();
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex5.sin();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex7 = complex3.I.add(complex5);
      Complex complex8 = complex7.ONE.tan();
      Complex complex9 = complex0.exp();
      List<Complex> list0 = complex9.I.nthRoot(1993);
      Complex complex10 = complex3.sqrt1z();
      boolean boolean0 = complex3.isInfinite();
      double double0 = complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(647.3797250823, 1253.88);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tan();
      int int0 = complex1.hashCode();
      String string0 = complex1.INF.toString();
      Complex complex2 = new Complex(Double.NaN, (-1451.76599));
      Complex complex3 = complex0.I.divide(complex2);
      Complex complex4 = complex1.I.sin();
      Complex complex5 = complex3.ONE.tan();
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex6 = new Complex((-1451.76599), Double.POSITIVE_INFINITY);
      ComplexField complexField1 = complex6.I.getField();
      Complex complex7 = complex6.INF.sqrt();
      Complex complex8 = complex0.pow(complex6);
      Complex complex9 = complex0.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex1.tan();
      try { 
        complex11.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex0.I.sin();
      Complex complex8 = complex5.I.subtract(complex6);
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex6.I.sinh();
      Complex complex10 = complex1.cos();
      boolean boolean0 = complex6.equals(complex9);
      Complex complex11 = complex3.sqrt1z();
      try { 
        complex11.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(935.5330059556461, 935.5330059556461);
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.I.sin();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex2.ONE.pow(complex1);
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex6 = complex5.INF.sqrt1z();
      ComplexField complexField1 = complex5.ZERO.getField();
      String string0 = complex2.NaN.toString();
      Complex complex7 = complex2.INF.tan();
      Complex complex8 = complex7.NaN.sqrt1z();
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex8.INF.exp();
      Complex complex11 = complex8.exp();
      Complex complex12 = complex11.I.multiply(complex4);
      Complex complex13 = complex2.cosh();
      String string1 = complex11.ZERO.toString();
      ComplexField complexField2 = complex1.ZERO.getField();
      Complex complex14 = complex0.sin();
      Complex complex15 = complex14.ONE.subtract(complex0);
      Complex complex16 = complex15.cos();
      Complex complex17 = complex2.sqrt1z();
      Object object0 = complex7.readResolve();
      double double0 = complex1.getArgument();
      Complex complex18 = complex0.sinh();
      Complex complex19 = complex0.exp();
      Complex complex20 = complex2.exp();
      Complex complex21 = complex14.atan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2402.1));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex1.atan();
      ComplexField complexField0 = complex4.ZERO.getField();
      Object object0 = complex4.INF.readResolve();
      double double0 = complex0.abs();
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex4.asin();
      Complex complex7 = complex0.cos();
      String string0 = complex2.NaN.toString();
      Complex complex8 = complex4.subtract(complex1);
      Complex complex9 = complex8.ONE.pow(complex1);
      Complex complex10 = complex4.add(complex0);
      double double1 = complex8.abs();
      Complex complex11 = complex7.sqrt1z();
      boolean boolean0 = complex10.isNaN();
      Complex complex12 = complex8.sin();
      Complex complex13 = complex11.ZERO.exp();
      Complex complex14 = complex13.ZERO.createComplex((-2402.1), 0.0);
      double double2 = complex3.getImaginary();
      Complex complex15 = complex11.atan();
      boolean boolean1 = complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.ONE.createComplex(0.5039018405998233, 0.5039018405998233);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.divide(complex0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex4.ONE.multiply((-190.6130086));
      Complex complex6 = complex0.asin();
      Complex complex7 = complex1.INF.tan();
      Complex complex8 = complex6.I.negate();
      Complex complex9 = complex2.conjugate();
      double double0 = complex1.abs();
      Complex complex10 = complex0.asin();
      Complex complex11 = complex10.NaN.tanh();
      Complex complex12 = complex11.ONE.sqrt();
      Complex complex13 = complex10.ZERO.negate();
      boolean boolean1 = complex1.equals(complex2);
      int int0 = complex4.hashCode();
      boolean boolean2 = complex9.isInfinite();
      Complex complex14 = complex0.log();
      Complex complex15 = complex3.atan();
      Complex complex16 = complex4.multiply(complex1);
      Complex complex17 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.ZERO.multiply(940.0);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.ONE.subtract(complex0);
      Complex complex5 = complex2.INF.add(complex1);
      double double0 = complex5.abs();
      Complex complex6 = complex5.I.divide(complex1);
      Complex complex7 = complex0.NaN.subtract(complex6);
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex8.tan();
      int int0 = complex9.hashCode();
      Complex complex10 = complex3.INF.sin();
      Complex complex11 = complex9.acos();
      boolean boolean1 = complex2.isNaN();
      boolean boolean2 = complex2.isInfinite();
      double double1 = complex0.abs();
      int int1 = complex5.hashCode();
      boolean boolean3 = complex7.isNaN();
      double double2 = complex6.abs();
      Complex complex12 = complex3.sin();
      Complex complex13 = complex12.atan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-2610.9042), (-2610.9042));
      Complex complex1 = complex0.multiply(2784.6706750141);
      Object object0 = complex0.readResolve();
      double double0 = complex0.abs();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.subtract(complex1);
      double double1 = complex0.getArgument();
      Complex complex4 = complex0.ZERO.acos();
      int int1 = complex2.ONE.hashCode();
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex5.NaN.add(complex2);
      Complex complex7 = complex3.createComplex(2784.6706750141, 0.0);
      int int2 = complex2.hashCode();
      Complex complex8 = complex4.ZERO.tan();
      Complex complex9 = complex8.ONE.exp();
      Complex complex10 = complex4.ZERO.negate();
      Complex complex11 = complex0.I.sqrt1z();
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex7.cos();
      Complex complex14 = complex7.divide(complex4);
      Complex complex15 = complex6.divide(complex14);
      Complex complex16 = complex5.subtract(complex12);
      Complex complex17 = complex2.tan();
      int int3 = complex3.hashCode();
      Complex complex18 = complex6.sin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(839.0, 1874.26);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex3.I.createComplex((-3220.89), 1874.26);
      Complex complex6 = complex4.ONE.add(complex2);
      Complex complex7 = complex0.ZERO.sqrt1z();
      Complex complex8 = complex3.ONE.acos();
      Complex complex9 = complex1.cosh();
      Complex complex10 = complex9.cosh();
      int int0 = complex9.hashCode();
      Complex complex11 = complex9.ONE.exp();
      Complex complex12 = complex3.INF.multiply(complex5);
      double double0 = complex1.getArgument();
      boolean boolean0 = complex3.isNaN();
      Object object0 = complex4.readResolve();
      Complex complex13 = complex11.exp();
      double double1 = complex9.getImaginary();
      int int1 = complex10.hashCode();
      Complex complex14 = complex9.sin();
      Complex complex15 = complex7.multiply(3242.6970675788);
      Complex complex16 = complex15.INF.tanh();
      Complex complex17 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.NaN.subtract(complex1);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.NaN.pow(complex4);
      List<Complex> list0 = complex0.nthRoot(418);
      Complex complex6 = complex0.NaN.multiply((double) 418);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.multiply((double) 418);
      Complex complex9 = complex8.NaN.add(complex7);
      Complex complex10 = complex9.INF.multiply((double) 418);
      Complex complex11 = complex9.sqrt1z();
      ComplexField complexField0 = complex7.ONE.getField();
      Complex complex12 = complex7.atan();
      Complex complex13 = complex12.ZERO.log();
      Complex complex14 = complex12.ZERO.acos();
      int int0 = complex0.hashCode();
      Complex complex15 = complex7.NaN.sin();
      Complex complex16 = complex7.sqrt();
      Complex complex17 = complex16.NaN.sqrt1z();
      Complex complex18 = complex0.exp();
      Complex complex19 = complex18.INF.acos();
      Complex complex20 = complex7.cos();
      Complex complex21 = complex7.add(complex13);
      Complex complex22 = complex7.sqrt();
      Complex complex23 = complex13.atan();
      Complex complex24 = complex13.sinh();
      Complex complex25 = complex20.log();
      Complex complex26 = complex13.conjugate();
      Complex complex27 = complex9.divide(complex25);
      Complex complex28 = complex21.multiply((-1761.860053));
      Complex complex29 = complex21.tanh();
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex3.NaN.multiply((-1050.0));
      String string0 = complex1.ONE.toString();
      try { 
        complex0.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(0.041666666666666664, (-136.439193586));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.INF.multiply(0.041666666666666664);
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex4 = complex2.ONE.pow(complex0);
      Complex complex5 = complex3.I.sin();
      Complex complex6 = complex0.atan();
      int int0 = complex1.hashCode();
      Complex complex7 = complex6.INF.atan();
      Complex complex8 = complex3.I.sin();
      Complex complex9 = complex8.asin();
      Complex complex10 = complex8.NaN.divide(complex1);
      ComplexField complexField1 = complex1.getField();
      Complex complex11 = complex0.INF.add(complex6);
      Complex complex12 = complex11.NaN.cos();
      Complex complex13 = complex0.divide(complex6);
      Complex complex14 = complex3.cosh();
      Complex complex15 = complex14.ONE.tan();
      double double0 = complex4.getReal();
      Complex complex16 = complex7.sqrt1z();
      Object object0 = complex11.readResolve();
      Complex complex17 = complex16.tan();
      List<Complex> list0 = complex16.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.NaN.divide(complex1);
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex0.createComplex(0.0, -0.0);
      double double0 = complex6.ZERO.getArgument();
      Complex complex7 = complex6.ONE.atan();
      Object object0 = complex0.readResolve();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex1.tan();
      boolean boolean0 = complex5.isInfinite();
      Complex complex10 = complex4.cosh();
      List<Complex> list0 = complex10.nthRoot(362);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.ZERO.cosh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex3.NaN.sin();
      boolean boolean1 = complex1.isNaN();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex6.ZERO.log();
      Complex complex9 = complex3.multiply(complex6);
      Complex complex10 = complex9.NaN.createComplex(7224.0843501, 7224.0843501);
      double double0 = complex6.abs();
      Complex complex11 = complex9.subtract(complex3);
      Complex complex12 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-1976.36), 0.0);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.ZERO.multiply(complex2);
      double double0 = complex0.getReal();
      Complex complex5 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      double double1 = complex2.INF.abs();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex4.I.tanh();
      List<Complex> list0 = complex0.nthRoot(2678);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1.0), 2656.8652472797);
      List<Complex> list0 = complex0.ZERO.nthRoot(600);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex2.acos();
      double double0 = complex5.I.abs();
      Complex complex6 = complex4.add(complex1);
      boolean boolean0 = complex3.isInfinite();
      Complex complex7 = complex5.createComplex(0.0, (-1848.0));
      boolean boolean1 = complex1.isNaN();
      Complex complex8 = complex3.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(647.3797250823, 1253.88);
      Complex complex1 = complex0.ZERO.tanh();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex1.negate();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.I.hashCode();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex0.tanh();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex5 = complex0.ZERO.negate();
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex4.I.cosh();
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex0.NaN.conjugate();
      Complex complex10 = complex9.ZERO.sqrt();
      double double0 = complex4.getImaginary();
      Complex complex11 = complex7.exp();
      List<Complex> list0 = complex1.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(0.2857142686843872, 0.2857142686843872);
      List<Complex> list0 = complex0.ONE.nthRoot(1);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.multiply(complex0);
      String string0 = complex0.INF.toString();
      Object object0 = complex1.I.readResolve();
      int int0 = complex1.ZERO.hashCode();
      Complex complex3 = complex0.negate();
      List<Complex> list1 = complex3.I.nthRoot(1);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.I.cosh();
      int int1 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.sqrt1z();
      double double0 = complex0.getArgument();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex1.NaN.tanh();
      Complex complex4 = complex1.I.asin();
      Complex complex5 = complex3.sinh();
      try { 
        complex2.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt();
      ComplexField complexField0 = complex1.INF.getField();
      String string0 = complex0.I.toString();
      Complex complex2 = complex0.ONE.cosh();
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.I.tanh();
      double double1 = complex0.abs();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex1.cos();
      int int0 = complex5.hashCode();
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex6.INF.negate();
      Complex complex8 = complex6.ONE.pow(complex2);
      Complex complex9 = complex8.ZERO.sqrt1z();
      Complex complex10 = complex9.INF.exp();
      Complex complex11 = complex4.I.log();
      Complex complex12 = complex5.NaN.exp();
      double double2 = complex5.ONE.abs();
      Complex complex13 = complex12.ONE.exp();
      Complex complex14 = complex12.I.sinh();
      Complex complex15 = complex2.multiply(0.7853981633974483);
      int int1 = complex2.hashCode();
      boolean boolean0 = complex4.isNaN();
      Complex complex16 = complex1.divide(complex5);
      Complex complex17 = complex14.subtract(complex1);
      Complex complex18 = complex14.createComplex(Double.POSITIVE_INFINITY, 0.7853981633974483);
      Complex complex19 = complex17.INF.asin();
      Complex complex20 = complex8.multiply(Double.POSITIVE_INFINITY);
      Complex complex21 = complex10.divide(complex18);
      Complex complex22 = complex12.cos();
      Object object0 = complex17.readResolve();
      Complex complex23 = complex21.acos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-2136.3147210531356), 0.0);
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.cos();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(2447.09195084384, 8.0E298);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex0.I.subtract(complex4);
      Complex complex7 = complex4.NaN.multiply(complex6);
      Complex complex8 = complex1.pow(complex4);
      String string0 = complex8.I.toString();
      Complex complex9 = complex5.add(complex4);
      Complex complex10 = complex0.acos();
      int int0 = complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.INF.createComplex((-2740.87935881), 0.0);
      double double0 = complex1.abs();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex1.I.cosh();
      Complex complex6 = complex2.I.tan();
      Complex complex7 = complex3.ONE.acos();
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex0.multiply((-2554.0));
      Complex complex9 = complex3.ZERO.tanh();
      double double1 = complex1.getReal();
      ComplexField complexField0 = complex2.getField();
      Complex complex10 = complex4.exp();
      Complex complex11 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(875.723265493, 1084.827263439851);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.sinh();
      Object object0 = complex1.readResolve();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.INF.subtract(complex0);
      Object object1 = complex1.readResolve();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex1.log();
      Complex complex8 = complex0.INF.sqrt1z();
      Complex complex9 = complex7.INF.cos();
      Complex complex10 = complex1.multiply(complex5);
      double double0 = complex2.getImaginary();
      Complex complex11 = complex9.multiply(complex2);
      Complex complex12 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.log();
      Complex complex4 = complex0.INF.cosh();
      double double0 = complex0.NaN.getArgument();
      Complex complex5 = complex2.ONE.divide(complex1);
      Complex complex6 = complex0.INF.subtract(complex3);
      Complex complex7 = complex6.I.cos();
      Complex complex8 = complex7.NaN.multiply((-3799.17786710417));
      Complex complex9 = complex6.ZERO.sqrt();
      Complex complex10 = complex7.INF.multiply(9.140260083262505E-9);
      Complex complex11 = complex10.ONE.divide(complex7);
      Complex complex12 = complex2.asin();
      Complex complex13 = complex12.multiply(complex3);
      Complex complex14 = complex13.ZERO.tan();
      Complex complex15 = complex5.subtract(complex1);
      Complex complex16 = complex13.cos();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex0.conjugate();
      double double0 = complex1.getArgument();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex4.log();
      Complex complex7 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.I.exp();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex1.multiply(0.0);
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.INF.sin();
      double double0 = complex0.getImaginary();
      Complex complex8 = complex6.asin();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-1.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex2.NaN.multiply(0.0);
      Complex complex5 = complex1.asin();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex3.add(complex1);
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex3.cos();
      Complex complex10 = complex0.sqrt1z();
      boolean boolean0 = complex10.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex0.ONE.acos();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1294.996438051), 0.0);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.ONE.cos();
      double double0 = complex2.ZERO.getArgument();
      double double1 = complex2.NaN.getArgument();
      int int0 = complex0.ONE.hashCode();
      Complex complex4 = new Complex(0.0, 0.0);
      boolean boolean0 = complex0.equals(complex4);
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.NaN.divide(complex0);
      Complex complex8 = complex5.NaN.multiply(complex3);
      Complex complex9 = complex2.INF.negate();
      boolean boolean1 = complex5.equals(complex4);
      Complex complex10 = complex3.I.subtract(complex5);
      Complex complex11 = complex4.negate();
      Complex complex12 = complex3.exp();
      boolean boolean2 = complex6.isInfinite();
      boolean boolean3 = complex3.isNaN();
      Complex complex13 = complex5.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tan();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isNaN();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.INF.subtract(complex1);
      List<Complex> list0 = complex3.INF.nthRoot(195);
      Complex complex6 = complex3.I.conjugate();
      double double0 = complex0.NaN.getArgument();
      Object object0 = complex3.readResolve();
      Object object1 = complex2.readResolve();
      Complex complex7 = complex2.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex3.createComplex(1234.296914, 1234.296914);
      double double0 = complex0.getArgument();
      double double1 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.createComplex(0.0, 0.01745329052209854);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = complex5.ONE.tanh();
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex1.pow(complex0);
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex3 = complex2.multiply((-3352.5168145034));
      Complex complex4 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.I.asin();
      Object object0 = complex0.I.readResolve();
      double double1 = complex0.getImaginary();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.I.multiply(3806.188);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex0.sin();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex1.I.multiply(Double.NaN);
      Complex complex7 = complex3.sqrt1z();
      double double0 = complex4.getArgument();
      Complex complex8 = complex1.INF.sinh();
      Complex complex9 = complex7.INF.atan();
      Complex complex10 = complex2.exp();
      Complex complex11 = complex4.divide(complex7);
      String string0 = complex0.toString();
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex8.multiply(complex12);
      Complex complex14 = complex9.multiply(complex3);
      Complex complex15 = complex3.multiply(Double.NaN);
      Complex complex16 = complex15.ONE.sqrt1z();
      double double1 = complex8.getReal();
      Complex complex17 = complex13.createComplex(Double.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.cos();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex3 = complex1.exp();
      double double0 = complex2.getReal();
      Complex complex4 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-926.62564765958), (-926.62564765958));
      String string0 = complex1.INF.toString();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.cos();
      ComplexField complexField0 = complex1.INF.getField();
      boolean boolean0 = complex1.equals(complex0);
      String string0 = complex1.NaN.toString();
      boolean boolean1 = complex1.isNaN();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex2.conjugate();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.I.tan();
      Complex complex3 = complex2.I.cosh();
      String string0 = complex3.NaN.toString();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex3.ZERO.cos();
      Complex complex6 = complex4.NaN.subtract(complex1);
      Complex complex7 = complex6.INF.cos();
      Complex complex8 = complex1.multiply((-1854.489092974));
      double double0 = complex8.ONE.abs();
      Object object0 = complex8.readResolve();
      Complex complex9 = complex2.exp();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex10 = complex9.ZERO.multiply(393.97);
      Complex complex11 = complex10.ZERO.tan();
      ComplexField complexField0 = complex3.getField();
      boolean boolean0 = complex9.isInfinite();
      int int0 = complex6.hashCode();
      Complex complex12 = complex9.createComplex(1.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.cos();
      ComplexField complexField0 = complex1.INF.getField();
      boolean boolean0 = complex1.equals(complex0);
      boolean boolean1 = complex1.isNaN();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.conjugate();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.multiply(complex0);
      Object object0 = complex3.readResolve();
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex0.multiply(0.0);
      Complex complex7 = complex0.tanh();
      double double0 = complex1.getImaginary();
      Complex complex8 = complex4.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex0.INF.subtract(complex1);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex4 = complex0.tanh();
      double double0 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.atan();
      double double1 = complex1.getArgument();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.INF.toString();
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex2.atan();
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.exp();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.I.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = new Complex(0.0, 862.9638367);
      Complex complex3 = complex2.NaN.divide(complex0);
      double double0 = complex3.NaN.abs();
      String string0 = complex3.INF.toString();
      double double1 = complex2.abs();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex5.I.sin();
      Complex complex7 = complex4.I.sqrt1z();
      boolean boolean1 = complex1.equals(complex4);
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.INF.atan();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply((-810.4664143));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex3.INF.negate();
      double double0 = complex0.ONE.abs();
      Complex complex6 = complex2.sqrt();
      double double1 = complex0.getArgument();
      Complex complex7 = complex0.subtract(complex2);
      double double2 = complex6.getImaginary();
      Complex complex8 = complex4.multiply(complex3);
      Complex complex9 = complex8.sin();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      double double0 = complex1.I.abs();
      Complex complex2 = complex1.ONE.multiply(complex0);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex3 = complex1.sin();
      Complex complex4 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-1085.907665472), (-1085.907665472));
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.createComplex(2073.47956384, (-28.75964));
      Complex complex3 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.INF.subtract(complex0);
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.pow(complex1);
      double double0 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-2869.6), 581.040383);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.INF.createComplex(Double.NaN, Double.NaN);
      int int0 = complex1.ZERO.hashCode();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.NaN.multiply(complex2);
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex3.NaN.tan();
      Complex complex7 = complex3.sinh();
      Object object0 = complex0.NaN.readResolve();
      int int1 = complex7.ONE.hashCode();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex6.sqrt1z();
      Object object1 = complex7.readResolve();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex7.add(complex5);
      Complex complex12 = complex10.ONE.sinh();
      double double0 = complex10.abs();
      Complex complex13 = complex2.NaN.subtract(complex4);
      Complex complex14 = complex9.NaN.pow(complex10);
      Complex complex15 = complex1.pow(complex7);
      Complex complex16 = complex15.ZERO.multiply(0.7071067811865476);
      Complex complex17 = complex5.createComplex(581.040383, 581.040383);
      List<Complex> list0 = complex17.ZERO.nthRoot(441);
      Complex complex18 = complex3.INF.negate();
      Complex complex19 = complex17.I.tanh();
      Complex complex20 = complex6.multiply((-2869.6));
      Object object2 = complex20.INF.readResolve();
      Complex complex21 = complex1.negate();
      Complex complex22 = complex9.exp();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex0.ONE.exp();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex3.ONE.divide(complex0);
      Complex complex6 = complex4.INF.acos();
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex6.ONE.divide(complex0);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex9 = complex8.NaN.atan();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex4.NaN.add(complex9);
      Complex complex12 = complex11.atan();
      int int0 = complex4.hashCode();
      Complex complex13 = complex4.tanh();
      try { 
        complex13.ONE.nthRoot((-737));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -737
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt1z();
      int int0 = complex0.hashCode();
      List<Complex> list0 = complex0.nthRoot(2234);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex2 = complex1.multiply(0.0);
      int int1 = complex0.hashCode();
      Complex complex3 = complex1.INF.asin();
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = Complex.I;
      Complex complex8 = complex5.ONE.divide(complex7);
      String string0 = complex5.toString();
      Complex complex9 = complex2.cosh();
      String string1 = complex9.toString();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex5.log();
      Complex complex12 = complex11.INF.createComplex(6.283185307179586, (-0.2499999701976776));
      Complex complex13 = complex4.multiply((-2019.6429997013315));
      boolean boolean0 = complex12.isNaN();
      Complex complex14 = complex12.createComplex(2234, 1110.2468696027004);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex1.ONE.cosh();
      Complex complex5 = complex1.multiply(complex2);
      Complex complex6 = complex5.ONE.exp();
      Complex complex7 = complex1.sqrt();
      boolean boolean0 = complex1.isNaN();
      Complex complex8 = complex0.exp();
      int int0 = (-3869);
      try { 
        complex0.nthRoot((-3869));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,869
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.333333333333333, 0.333333333333333);
      Complex complex1 = new Complex((-3086.13261), (-1283.285688987));
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.ONE.cosh();
      Complex complex4 = new Complex((-1822.3769129997534), (-1822.3769129997534));
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex3.ZERO.cosh();
      Complex complex7 = complex0.pow(complex4);
      int int0 = complex7.ZERO.hashCode();
      Complex complex8 = complex4.I.sqrt();
      Complex complex9 = complex2.createComplex((-1.0), 0.0);
      Complex complex10 = complex3.ONE.add(complex1);
      Complex complex11 = complex3.divide(complex2);
      double double0 = complex11.INF.getArgument();
      Complex complex12 = complex11.ONE.atan();
      ComplexField complexField0 = complex7.getField();
      double double1 = complex2.getReal();
      Complex complex13 = complex5.createComplex((-3086.13261), (-1.0));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(330.165845710987);
      Complex complex2 = complex1.ZERO.add(complex0);
      List<Complex> list0 = complex2.NaN.nthRoot(1448);
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = complex5.INF.tanh();
      int int0 = complex4.hashCode();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex8.pow(complex1);
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tanh();
      ComplexField complexField0 = complex1.INF.getField();
      double double0 = complex0.I.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.NaN.exp();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
  }
}
