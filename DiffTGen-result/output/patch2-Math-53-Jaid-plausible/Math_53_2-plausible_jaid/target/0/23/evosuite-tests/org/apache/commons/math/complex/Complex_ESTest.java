/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:11:48 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-4244.9), 0.0);
      double double0 = complex0.NaN.abs();
      Complex complex2 = complex0.ONE.pow(complex1);
      String string0 = complex0.NaN.toString();
      Complex complex3 = Complex.ZERO;
      double double1 = complex0.abs();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex0.ZERO.acos();
      ComplexField complexField0 = complex4.I.getField();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.multiply(1.0);
      Complex complex8 = complex7.NaN.sqrt1z();
      boolean boolean0 = complex0.equals(complex6);
      double double2 = complex0.getReal();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex4.exp();
      Complex complex11 = complex1.multiply(complex0);
      Complex complex12 = complex10.log();
      String string1 = complex12.NaN.toString();
      Complex complex13 = complex6.pow(complex10);
      Complex complex14 = complex13.I.atan();
      Complex complex15 = complex6.acos();
      ComplexField complexField1 = complex6.getField();
      Complex complex16 = complex0.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.NaN.multiply(Double.POSITIVE_INFINITY);
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex1.INF.exp();
      Complex complex4 = complex3.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.ZERO.conjugate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex0.subtract(complex1);
      Complex complex8 = complex7.NaN.tanh();
      double double0 = complex8.ZERO.abs();
      Complex complex9 = complex0.cos();
      Complex complex10 = complex9.INF.add(complex8);
      Complex complex11 = complex9.ZERO.multiply(754.25);
      double double1 = complex0.getImaginary();
      Complex complex12 = complex0.sin();
      Complex complex13 = complex0.acos();
      Complex complex14 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.ONE.subtract(complex5);
      Complex complex7 = complex5.I.log();
      String string0 = complex3.toString();
      int int0 = complex3.hashCode();
      Complex complex8 = new Complex(1.9868161777724352E-8, Double.POSITIVE_INFINITY);
      boolean boolean0 = complex6.equals(complex8);
      int int1 = complex4.ZERO.hashCode();
      Complex complex9 = complex6.INF.negate();
      Complex complex10 = complex6.createComplex(Double.POSITIVE_INFINITY, 1.9868161777724352E-8);
      double double0 = complex6.getArgument();
      Complex complex11 = complex10.log();
      Object object0 = complex11.NaN.readResolve();
      Complex complex12 = complex5.cos();
      Complex complex13 = complex5.sqrt1z();
      Complex complex14 = complex12.ZERO.multiply(complex3);
      Complex complex15 = complex10.atan();
      Complex complex16 = complex3.cosh();
      Complex complex17 = complex2.subtract(complex16);
      Complex complex18 = complex7.multiply(complex8);
      Complex complex19 = complex13.conjugate();
      Complex complex20 = complex13.asin();
      double double1 = complex15.getImaginary();
      boolean boolean1 = complex16.isNaN();
      Complex complex21 = complex12.conjugate();
      Complex complex22 = complex11.negate();
      ComplexField complexField0 = complex6.getField();
      ComplexField complexField1 = complex13.getField();
      List<Complex> list0 = complex1.nthRoot(1089);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = new Complex((-990.562295), 0.0);
      Complex complex2 = complex0.divide(complex1);
      List<Complex> list0 = complex1.ONE.nthRoot(1287);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.createComplex(0.0, 1417.18016231);
      Complex complex2 = complex1.ONE.createComplex(0.0, 0.0);
      String string0 = complex0.toString();
      Complex complex3 = complex1.tanh();
      Complex complex4 = new Complex(1417.18016231, 1.0);
      Complex complex5 = complex1.ZERO.add(complex4);
      Complex complex6 = complex1.I.subtract(complex0);
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = complex7.atan();
      double double0 = complex7.INF.abs();
      boolean boolean0 = complex2.isInfinite();
      int int0 = complex2.I.hashCode();
      Complex complex9 = complex0.NaN.tanh();
      Complex complex10 = complex2.createComplex(1417.18016231, 1310.499464329625);
      String string1 = complex2.toString();
      Complex complex11 = complex1.I.subtract(complex2);
      Complex complex12 = complex2.cosh();
      int int1 = complex2.hashCode();
      boolean boolean1 = complex2.isNaN();
      Complex complex13 = complex1.sqrt();
      Complex complex14 = complex13.NaN.add(complex5);
      Complex complex15 = complex14.I.pow(complex4);
      Complex complex16 = complex15.I.multiply(complex14);
      Complex complex17 = complex12.sinh();
      Complex complex18 = complex1.log();
      Complex complex19 = complex18.add(complex6);
      Complex complex20 = complex5.add(complex0);
      Complex complex21 = complex20.NaN.cosh();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.ZERO.createComplex(2162.809774707216, 2162.809774707216);
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = Complex.I;
      boolean boolean0 = complex0.equals(complex4);
      Complex complex5 = complex3.sin();
      Complex complex6 = complex5.sqrt();
      double double0 = complex0.INF.abs();
      double double1 = complex2.abs();
      Complex complex7 = complex2.NaN.pow(complex4);
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex4.multiply(complex5);
      Complex complex11 = complex10.I.atan();
      Complex complex12 = complex11.ZERO.asin();
      double double2 = complex10.getImaginary();
      Complex complex13 = complex3.asin();
      boolean boolean1 = complex2.equals(complex5);
      Complex complex14 = complex8.pow(complex13);
      Complex complex15 = complex14.I.acos();
      Object object0 = new Object();
      boolean boolean2 = complex9.equals(object0);
      Complex complex16 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.add(complex0);
      double double1 = complex1.getArgument();
      Complex complex3 = complex0.ZERO.multiply(0.0);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex1.NaN.asin();
      Complex complex8 = complex1.I.cosh();
      Complex complex9 = complex6.I.multiply(Double.NaN);
      Complex complex10 = complex9.exp();
      Complex complex11 = complex1.I.sqrt1z();
      Complex complex12 = complex6.INF.conjugate();
      Complex complex13 = complex1.ZERO.asin();
      Complex complex14 = complex12.ZERO.asin();
      Complex complex15 = complex2.sqrt();
      Complex complex16 = complex1.asin();
      Complex complex17 = complex16.INF.cos();
      double double2 = complex2.getReal();
      Complex complex18 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-953.5558756982158));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex0.I.sinh();
      Complex complex7 = complex6.ONE.pow(complex1);
      Complex complex8 = complex7.INF.asin();
      Complex complex9 = complex6.NaN.add(complex3);
      double double0 = complex0.abs();
      Complex complex10 = complex1.acos();
      Complex complex11 = complex6.NaN.cosh();
      Complex complex12 = complex10.negate();
      try { 
        complex12.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(197.0, (-325.0));
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex0.isInfinite();
      Object object0 = new Object();
      boolean boolean1 = complex0.equals(object0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.log();
      Object object1 = complex3.readResolve();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-2386.8778333157), (-2386.8778333157));
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.cos();
      double double0 = complex0.getReal();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(4984.58485015, (-508.454246));
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex0.ZERO.sinh();
      Complex complex5 = complex0.cosh();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex0.divide(complex6);
      double double0 = complex7.ONE.getArgument();
      Complex complex8 = complex7.ZERO.cos();
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex0.NaN.tan();
      int int0 = complex9.I.hashCode();
      double double1 = complex9.I.getArgument();
      Complex complex10 = complex9.sin();
      Complex complex11 = complex5.add(complex8);
      double double2 = complex11.ONE.abs();
      Complex complex12 = complex5.sinh();
      List<Complex> list0 = complex12.nthRoot(1);
      Complex complex13 = complex0.tan();
      ComplexField complexField1 = complex3.getField();
      Complex complex14 = complex7.conjugate();
      Complex complex15 = complex12.ONE.sqrt();
      Object object0 = complex14.I.readResolve();
      Complex complex16 = complex1.acos();
      Complex complex17 = complex12.sinh();
      Complex complex18 = complex13.tanh();
      Complex complex19 = complex14.sqrt();
      Complex complex20 = complex14.negate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(3231.446975552, 3231.446975552);
      Complex complex1 = complex0.sin();
      int int0 = (-1);
      Complex complex2 = complex0.INF.sin();
      try { 
        complex2.I.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.log();
      ComplexField complexField0 = complex2.ONE.getField();
      List<Complex> list0 = complex1.ONE.nthRoot(1443);
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex0.INF.sqrt1z();
      Complex complex4 = complex3.ZERO.multiply(complex2);
      Complex complex5 = complex0.ZERO.sin();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex4.atan();
      Complex complex8 = complex6.ZERO.divide(complex1);
      int int0 = complex0.hashCode();
      double double0 = complex5.abs();
      Complex complex9 = complex2.sin();
      Complex complex10 = complex2.ZERO.pow(complex4);
      boolean boolean0 = complex6.equals(complex8);
      int int1 = complex2.hashCode();
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-0.3058015757857271), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex((-1373.4900628616), (-890.2499385439));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.I.log();
      Complex complex6 = new Complex(2657.666487047731, (-667.256730506));
      Complex complex7 = complex4.I.multiply(complex6);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.INF.divide(complex8);
      ComplexField complexField0 = complex4.getField();
      Complex complex10 = complex3.exp();
      Complex complex11 = complex6.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.negate();
      Complex complex3 = new Complex(Double.NaN, Double.NaN);
      Complex complex4 = complex3.ONE.add(complex0);
      Complex complex5 = complex2.tan();
      Complex complex6 = complex2.add(complex3);
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex0.log();
      double double0 = complex1.getArgument();
      Complex complex9 = complex5.pow(complex0);
      Complex complex10 = complex9.asin();
      boolean boolean0 = complex5.isNaN();
      Complex complex11 = complex8.NaN.divide(complex9);
      Complex complex12 = complex11.I.pow(complex3);
      Complex complex13 = complex4.NaN.conjugate();
      Complex complex14 = complex2.ONE.conjugate();
      Complex complex15 = complex5.ONE.log();
      List<Complex> list0 = complex8.nthRoot(103);
      Complex complex16 = complex9.sinh();
      Complex complex17 = complex16.I.multiply((-3287.527));
      boolean boolean1 = complex6.isInfinite();
      Complex complex18 = complex15.sinh();
      double double1 = complex2.abs();
      Complex complex19 = complex1.conjugate();
      Complex complex20 = complex4.asin();
      Complex complex21 = complex20.INF.createComplex(Double.NaN, Double.NaN);
      String string0 = complex14.toString();
      Complex complex22 = complex14.negate();
      Complex complex23 = complex4.cos();
      Complex complex24 = complex15.divide(complex14);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ZERO.toString();
      try { 
        complex0.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.sin();
      ComplexField complexField0 = complex0.I.getField();
      List<Complex> list0 = complex2.I.nthRoot(972);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = complex4.INF.createComplex(972, 972);
      Object object0 = complex4.ZERO.readResolve();
      Complex complex6 = complex3.ZERO.sqrt1z();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex2.multiply((double) 972);
      Complex complex9 = complex1.atan();
      double double0 = complex3.getReal();
      Object object1 = complex8.readResolve();
      int int0 = complex3.hashCode();
      Complex complex10 = complex9.asin();
      ComplexField complexField1 = complex2.getField();
      double double1 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex1.ONE.acos();
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex5.ONE.cosh();
      double double0 = complex1.getArgument();
      Complex complex8 = complex3.ZERO.acos();
      Complex complex9 = complex0.exp();
      double double1 = complex2.I.getArgument();
      Complex complex10 = complex2.I.cos();
      Complex complex11 = complex10.NaN.conjugate();
      Complex complex12 = complex9.ZERO.atan();
      double double2 = complex2.getImaginary();
      boolean boolean0 = complex1.isNaN();
      Complex complex13 = complex9.multiply(complex3);
      double double3 = complex3.abs();
      double double4 = complex9.getReal();
      Complex complex14 = complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1878.4), (-1878.4));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex2.INF.acos();
      Complex complex6 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(1365.4789267182, 1365.4789267182);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex0.INF.add(complex1);
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex6.I.multiply(0.0);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex5.NaN.divide(complex8);
      Complex complex10 = complex0.negate();
      Complex complex11 = complex10.cos();
      Object object0 = complex10.ONE.readResolve();
      double double0 = complex0.ONE.abs();
      double double1 = complex0.getReal();
      double double2 = complex0.abs();
      String string0 = complex1.toString();
      Complex complex12 = complex6.ZERO.cosh();
      Complex complex13 = complex12.tanh();
      boolean boolean0 = complex11.isNaN();
      Complex complex14 = complex7.cosh();
      double double3 = complex5.getReal();
      Complex complex15 = complex0.conjugate();
      double double4 = complex0.abs();
      Complex complex16 = complex4.sqrt1z();
      Complex complex17 = complex16.tanh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex((-1523.1289254049), (-1523.1289254049));
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex1.ZERO.exp();
      String string0 = complex5.toString();
      Complex complex7 = complex5.atan();
      boolean boolean0 = complex7.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.ONE.negate();
      Object object0 = complex4.I.readResolve();
      Complex complex5 = complex3.multiply(complex2);
      Complex complex6 = complex2.tan();
      Complex complex7 = complex2.log();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex0.INF.multiply(complex1);
      Complex complex5 = complex0.createComplex((-3257.34), (-1185.609));
      boolean boolean0 = complex1.isNaN();
      double double0 = complex1.getImaginary();
      Complex complex6 = complex5.add(complex4);
      Complex complex7 = complex4.pow(complex5);
      Complex complex8 = complex2.sqrt1z();
      String string0 = complex8.toString();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1.8014398509481984E16, (-717.8031515060261));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex0.I.conjugate();
      double double0 = complex3.I.getArgument();
      Object object0 = complex3.NaN.readResolve();
      Complex complex5 = complex1.ZERO.divide(complex2);
      Object object1 = complex0.readResolve();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex1.log();
      Complex complex10 = complex9.INF.multiply(0.0);
      Complex complex11 = complex4.exp();
      Complex complex12 = complex11.ONE.sqrt();
      Complex complex13 = complex3.multiply((-7.800414592973399E-9));
      Object object2 = complex7.readResolve();
      Object object3 = complex9.readResolve();
      Complex complex14 = complex2.exp();
      Complex complex15 = complex8.cosh();
      Complex complex16 = complex2.conjugate();
      Complex complex17 = complex3.add(complex9);
      String string0 = complex7.toString();
      Complex complex18 = complex15.multiply((-2901.38292199668));
      double double1 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.NaN.sinh();
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.sqrt();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex1.isNaN();
      Complex complex3 = complex1.ZERO.multiply(complex2);
      List<Complex> list0 = complex1.nthRoot(17);
      Complex complex4 = complex3.INF.divide(complex0);
      int int0 = complex0.hashCode();
      Object object0 = complex0.readResolve();
      Object object1 = complex2.I.readResolve();
      ComplexField complexField1 = complex3.getField();
      Complex complex5 = complex0.createComplex(17, 100.9089723);
      Complex complex6 = complex5.I.sin();
      Complex complex7 = complex3.asin();
      Complex complex8 = complex7.INF.atan();
      Complex complex9 = complex7.I.divide(complex5);
      Complex complex10 = complex9.INF.sin();
      String string0 = complex7.toString();
      Complex complex11 = complex7.createComplex(17, 100.9089723);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex2.multiply(0.0);
      Complex complex5 = complex2.ZERO.pow(complex0);
      Complex complex6 = complex0.divide(complex2);
      boolean boolean1 = complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.01);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.NaN.pow(complex1);
      int int0 = complex3.ZERO.hashCode();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.NaN.pow(complex0);
      boolean boolean0 = complex7.isInfinite();
      List<Complex> list0 = complex0.ZERO.nthRoot(24);
      double double0 = complex2.getReal();
      boolean boolean1 = complex3.isInfinite();
      boolean boolean2 = complex4.isInfinite();
      Complex complex9 = complex0.sinh();
      int int1 = complex4.hashCode();
      Complex complex10 = complex5.add(complex4);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.ZERO.conjugate();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex5.NaN.tanh();
      Complex complex7 = complex5.ONE.cosh();
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.sinh();
      boolean boolean0 = complex3.isNaN();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex1.subtract(complex2);
      Complex complex6 = complex4.ONE.tanh();
      Complex complex7 = complex2.log();
      ComplexField complexField0 = complex7.INF.getField();
      int int0 = complex6.INF.hashCode();
      Complex complex8 = complex4.pow(complex3);
      Complex complex9 = complex8.tan();
      Complex complex10 = complex6.multiply(complex2);
      Complex complex11 = complex10.NaN.conjugate();
      Complex complex12 = complex11.NaN.tanh();
      String string0 = complex9.toString();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(636.3332, (-1.0));
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex(2007.15, 2007.15);
      Complex complex3 = complex0.createComplex((-2480.9), (-2480.9));
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.pow(complex2);
      double double0 = complex6.INF.abs();
      Complex complex7 = complex5.divide(complex6);
      double double1 = complex5.getImaginary();
      Complex complex8 = complex6.log();
      double double2 = complex6.getImaginary();
      Complex complex9 = complex7.pow(complex0);
      List<Complex> list0 = complex6.ONE.nthRoot(136);
      Complex complex10 = complex9.pow(complex4);
      double double3 = complex8.abs();
      Complex complex11 = complex5.negate();
      double double4 = complex4.getReal();
      Complex complex12 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.multiply(342.7);
      Complex complex3 = complex0.I.sqrt();
      double double0 = complex1.ZERO.getArgument();
      double double1 = complex0.getArgument();
      String string0 = complex1.toString();
      String string1 = complex0.toString();
      Complex complex4 = complex0.createComplex(0.0, Double.NaN);
      Object object0 = complex4.readResolve();
      List<Complex> list0 = complex0.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.createComplex(1.0, 1.0);
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex0.multiply(complex3);
      String string0 = complex5.toString();
      Complex complex6 = complex4.exp();
      ComplexField complexField0 = complex5.getField();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-911.740797152), (-4513.102208));
      Complex complex1 = complex0.multiply(1688.36);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex1.INF.negate();
      Complex complex4 = complex0.I.pow(complex1);
      int int0 = complex4.INF.hashCode();
      List<Complex> list0 = complex0.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(299.64587900249, 299.64587900249);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.sinh();
      double double0 = complex4.abs();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex7.conjugate();
      double double1 = complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-3325.099458532054), (-2263.362195));
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex2.tanh();
      String string0 = complex2.NaN.toString();
      double double0 = complex2.NaN.getArgument();
      Complex complex4 = complex0.log();
      try { 
        complex4.ZERO.nthRoot((-80));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -80
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.conjugate();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex1.ZERO.tanh();
      Complex complex6 = complex1.createComplex(2623.97602, 0.6299605249474366);
      Complex complex7 = complex6.pow(complex1);
      Complex complex8 = complex5.multiply(complex1);
      Complex complex9 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(3391.3592596);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.sqrt1z();
      ComplexField complexField1 = complex0.getField();
      Complex complex2 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.createComplex((-308.2266146185649), (-308.2266146185649));
      Complex complex3 = complex0.multiply((-308.2266146185649));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex2.INF.log();
      Object object0 = complex1.I.readResolve();
      Complex complex4 = complex1.NaN.add(complex0);
      Complex complex5 = complex4.ONE.log();
      Object object1 = complex5.ZERO.readResolve();
      Complex complex6 = complex5.sin();
      String string0 = complex5.I.toString();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex5.pow(complex1);
      Complex complex9 = complex0.ZERO.cos();
      Complex complex10 = complex1.I.negate();
      Complex complex11 = complex10.sqrt();
      ComplexField complexField0 = complex1.getField();
      boolean boolean0 = complex1.isInfinite();
      boolean boolean1 = complex1.equals(complexField0);
      boolean boolean2 = complex1.isNaN();
      Complex complex12 = complex7.asin();
      Complex complex13 = complex12.I.subtract(complex8);
      Complex complex14 = complex6.acos();
      Complex complex15 = Complex.ONE;
      Complex complex16 = complex1.NaN.add(complex2);
      Complex complex17 = complex14.subtract(complex15);
      Complex complex18 = complex7.multiply(complex8);
      Complex complex19 = complex1.subtract(complex6);
      Complex complex20 = complex19.ONE.add(complex2);
      Complex complex21 = complex4.atan();
      Complex complex22 = complex19.cos();
      double double0 = complex17.getReal();
      Complex complex23 = complex11.tan();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      Complex complex1 = new Complex((-1673.4005596737), 0.0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.ZERO.multiply(0.0);
      Complex complex4 = complex1.ZERO.add(complex2);
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.log();
      boolean boolean0 = complex0.isNaN();
      double double1 = complex6.INF.abs();
      Complex complex7 = complex5.sin();
      ComplexField complexField0 = complex6.ONE.getField();
      Complex complex8 = complex5.I.exp();
      Complex complex9 = complex7.subtract(complex2);
      Complex complex10 = complex6.ZERO.acos();
      Complex complex11 = complex7.pow(complex0);
      Complex complex12 = complex11.ZERO.tan();
      Complex complex13 = complex2.exp();
      Complex complex14 = complex6.I.exp();
      Object object0 = complex1.readResolve();
      boolean boolean1 = complex4.equals(object0);
      Complex complex15 = complex5.INF.pow(complex7);
      int int0 = complex6.hashCode();
      String string0 = complex2.toString();
      Complex complex16 = complex9.divide(complex2);
      double double2 = complex7.getImaginary();
      Complex complex17 = complex5.tan();
      double double3 = complex6.getImaginary();
      Complex complex18 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.negate();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex5.multiply(complex2);
      double double0 = complex5.abs();
      Complex complex9 = complex2.ZERO.conjugate();
      Complex complex10 = complex9.I.atan();
      String string0 = complex8.toString();
      Complex complex11 = complex4.negate();
      Complex complex12 = complex11.cosh();
      boolean boolean1 = complex8.isNaN();
      double double1 = complex0.getImaginary();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex2.ONE.acos();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex2.ZERO.negate();
      Complex complex7 = complex5.INF.createComplex(145.745, (-2926.44051769));
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex5.NaN.divide(complex8);
      Complex complex10 = complex5.ONE.exp();
      double double0 = complex5.I.getArgument();
      Complex complex11 = complex5.atan();
      List<Complex> list0 = complex5.nthRoot(1);
      Complex complex12 = complex1.sin();
      List<Complex> list1 = complex12.nthRoot(1);
      Complex complex13 = complex5.divide(complex2);
      Complex complex14 = complex10.acos();
      Complex complex15 = complex2.acos();
      Complex complex16 = complex15.cosh();
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      ComplexField complexField0 = complex0.INF.getField();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.I.add(complex1);
      double double1 = complex0.ONE.abs();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.I.pow(complex0);
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex3.ONE.sqrt1z();
      Complex complex7 = complex2.ONE.divide(complex1);
      Complex complex8 = complex7.ZERO.atan();
      double double2 = complex7.ONE.getArgument();
      Complex complex9 = complex3.negate();
      Complex complex10 = complex3.ZERO.tan();
      Complex complex11 = complex4.tan();
      boolean boolean1 = complex9.isInfinite();
      Complex complex12 = complex0.pow(complex5);
      Complex complex13 = complex2.acos();
      Complex complex14 = complex13.INF.sqrt1z();
      Complex complex15 = complex2.acos();
      Complex complex16 = complex15.subtract(complex10);
      Complex complex17 = complex2.cosh();
      Complex complex18 = complex4.acos();
      Complex complex19 = complex18.divide(complex14);
      Complex complex20 = complex19.cos();
      Complex complex21 = complex13.multiply(complex19);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex2.INF.sqrt1z();
      String string0 = complex3.ONE.toString();
      Complex complex5 = complex2.NaN.pow(complex0);
      String string1 = complex0.toString();
      List<Complex> list0 = complex0.nthRoot(229);
      List<Complex> list1 = complex0.nthRoot(17);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex0.INF.createComplex(17, 17);
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex4.createComplex(229, 17);
      double double0 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.log();
      double double0 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.ONE.atan();
      double double0 = complex1.NaN.getArgument();
      Complex complex3 = complex1.NaN.tanh();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.INF.multiply(complex2);
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex3.ONE.log();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex3.sqrt1z();
      String string1 = complex1.toString();
      Complex complex9 = complex5.sin();
      int int0 = complex6.hashCode();
      Complex complex10 = complex6.acos();
      Complex complex11 = complex5.createComplex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-3744.723259804), (-0.16666666666666666));
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex3.I.add(complex1);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex2.I.atan();
      Complex complex7 = complex6.INF.asin();
      Complex complex8 = complex7.I.sqrt();
      Complex complex9 = complex2.NaN.tanh();
      Complex complex10 = complex9.INF.multiply(complex4);
      Object object0 = complex0.readResolve();
      Complex complex11 = complex3.ZERO.sin();
      Complex complex12 = complex11.tanh();
      Complex complex13 = complex11.ONE.negate();
      Complex complex14 = complex3.multiply(complex0);
      Complex complex15 = complex14.tan();
      double double0 = complex1.getReal();
      Complex complex16 = complex4.cos();
      Complex complex17 = complex16.INF.subtract(complex4);
      Complex complex18 = complex16.I.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex19 = complex17.subtract(complex2);
      ComplexField complexField0 = complex2.getField();
      Complex complex20 = complex16.sqrt();
      Complex complex21 = Complex.NaN;
      boolean boolean0 = complex13.equals(complex21);
      String string0 = complex17.toString();
      Complex complex22 = complex5.createComplex(1.2246467991473532E-16, 1.2246467991473532E-16);
      boolean boolean1 = complex20.isInfinite();
      boolean boolean2 = complex5.equals((Object) null);
  }
}
