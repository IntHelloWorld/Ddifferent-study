/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:15:16 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex4.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.pow(complex0);
      int int0 = complex2.NaN.hashCode();
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.ZERO.sqrt();
      double double0 = complex1.ZERO.getArgument();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex2.ONE.subtract(complex5);
      Complex complex9 = complex0.tan();
      String string0 = complex9.ZERO.toString();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex10.ONE.sinh();
      Complex complex12 = complex11.ZERO.acos();
      Object object0 = complex11.NaN.readResolve();
      double double1 = complex0.getReal();
      boolean boolean0 = complex9.isInfinite();
      Complex complex13 = complex5.sinh();
      double double2 = complex0.getReal();
      Complex complex14 = complex0.multiply(Double.POSITIVE_INFINITY);
      double double3 = complex14.getArgument();
      Complex complex15 = complex6.asin();
      double double4 = complex11.abs();
      double double5 = complex14.getArgument();
      boolean boolean1 = complex15.isInfinite();
      boolean boolean2 = complex5.isInfinite();
      double double6 = complex2.getImaginary();
      Complex complex16 = complex3.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(2289.0, 2289.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.createComplex(0.0, 2289.0);
      Complex complex3 = new Complex((-1.0), (-1.0));
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex1.NaN.tanh();
      Complex complex7 = complex3.add(complex0);
      Complex complex8 = complex7.ONE.tan();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex9.log();
      double double0 = complex2.getReal();
      Complex complex11 = complex10.I.sin();
      Complex complex12 = complex11.atan();
      Complex complex13 = complex11.acos();
      Complex complex14 = complex1.negate();
      Complex complex15 = complex14.ONE.cosh();
      Complex complex16 = complex10.multiply(complex7);
      Complex complex17 = complex16.divide(complex7);
      Complex complex18 = complex2.sqrt();
      double double1 = complex4.getReal();
      Complex complex19 = complex1.cosh();
      Complex complex20 = complex19.sqrt();
      double double2 = complex10.INF.getArgument();
      Complex complex21 = complex8.add(complex10);
      Complex complex22 = complex16.cos();
      Complex complex23 = complex4.log();
      Complex complex24 = complex23.log();
      Complex complex25 = complex24.I.sqrt1z();
      try { 
        complex19.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-1449.72214090906), (-3560.7089));
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.ONE.conjugate();
      Complex complex4 = complex1.subtract(complex2);
      double double0 = complex4.getArgument();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex1.sinh();
      double double1 = complex7.I.abs();
      Complex complex8 = complex6.acos();
      Complex complex9 = complex5.subtract(complex0);
      double double2 = complex4.getImaginary();
      Complex complex10 = complex7.NaN.sqrt1z();
      Complex complex11 = complex6.multiply(complex1);
      Complex complex12 = complex11.ONE.tanh();
      Complex complex13 = complex8.multiply(Double.NaN);
      Complex complex14 = complex13.negate();
      Complex complex15 = complex7.multiply(768.19968);
      Complex complex16 = complex15.ZERO.sqrt1z();
      boolean boolean0 = complex13.isInfinite();
      int int0 = complex7.hashCode();
      Complex complex17 = complex6.add(complex3);
      Complex complex18 = complex17.log();
      Complex complex19 = complex7.sinh();
      Complex complex20 = complex11.sinh();
      Complex complex21 = complex13.exp();
      String string0 = complex21.toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.acos();
      String string0 = complex2.ONE.toString();
      int int0 = complex2.hashCode();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.multiply((-1794.93341610061));
      String string1 = complex4.ONE.toString();
      Complex complex5 = complex4.ZERO.multiply(complex1);
      Complex complex6 = complex0.ZERO.cosh();
      Complex complex7 = complex4.multiply(3061.8361294);
      Complex complex8 = complex4.acos();
      Complex complex9 = complex3.atan();
      Complex complex10 = complex3.sqrt();
      Complex complex11 = complex10.NaN.createComplex((-1794.93341610061), (-1794.93341610061));
      Complex complex12 = complex0.sinh();
      Complex complex13 = complex3.tan();
      Complex complex14 = complex1.exp();
      String string2 = complex14.ONE.toString();
      String string3 = complex5.toString();
      Complex complex15 = complex8.sinh();
      Object object0 = new Object();
      boolean boolean0 = complex11.equals(object0);
      String string4 = complex1.toString();
      double double0 = complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      double double0 = complex0.INF.getArgument();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.sqrt();
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex3.exp();
      double double1 = complex3.getReal();
      double double2 = complex0.abs();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex1.exp();
      Complex complex8 = new Complex(Double.NaN, Double.NaN);
      Complex complex9 = complex5.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2.0, 2.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.subtract(complex1);
      Complex complex4 = complex2.INF.sqrt1z();
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = complex7.INF.add(complex3);
      Complex complex9 = complex7.I.pow(complex8);
      Complex complex10 = complex9.ZERO.conjugate();
      Complex complex11 = complex1.atan();
      Complex complex12 = complex0.add(complex7);
      Complex complex13 = complex8.INF.add(complex10);
      Complex complex14 = complex11.INF.sinh();
      Complex complex15 = complex11.I.sinh();
      Complex complex16 = complex1.NaN.sqrt();
      Complex complex17 = complex16.INF.add(complex8);
      Complex complex18 = complex1.createComplex(1.0, 1.0);
      Complex complex19 = complex18.NaN.tanh();
      Complex complex20 = complex2.ONE.cosh();
      Complex complex21 = complex20.I.multiply(complex17);
      List<Complex> list0 = complex7.nthRoot(68);
      int int0 = complex11.hashCode();
      Complex complex22 = complex7.cos();
      Complex complex23 = complex22.ONE.negate();
      double double0 = complex0.getReal();
      Complex complex24 = complex2.sin();
      Complex complex25 = complex2.sqrt();
      Complex complex26 = complex1.sqrt1z();
      Complex complex27 = complex12.createComplex(1.0, Double.POSITIVE_INFINITY);
      Complex complex28 = complex23.sin();
      Complex complex29 = complex0.sqrt();
      int int1 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-379.9600967508873));
      Complex complex1 = complex0.cosh();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.multiply(complex4);
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex4.cosh();
      int int0 = complex4.ONE.hashCode();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex6.createComplex((-479.0207683), (-479.0207683));
      Complex complex9 = complex8.INF.divide(complex4);
      Object object0 = complex6.readResolve();
      Complex complex10 = complex6.NaN.exp();
      Complex complex11 = complex6.sinh();
      Complex complex12 = complex11.INF.sqrt1z();
      ComplexField complexField0 = complex11.getField();
      boolean boolean1 = complex5.isInfinite();
      Complex complex13 = complex12.I.exp();
      Complex complex14 = complex13.ZERO.sqrt1z();
      Complex complex15 = Complex.NaN;
      String string0 = complex0.toString();
      int int1 = complex4.NaN.hashCode();
      boolean boolean2 = complex12.equals(complex15);
      boolean boolean3 = complex12.isInfinite();
      double double0 = complex5.getImaginary();
      Complex complex16 = complex5.asin();
      double double1 = complex8.getReal();
      Complex complex17 = complex7.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.divide(complex1);
      int int0 = complex0.ZERO.hashCode();
      Complex complex4 = complex0.ZERO.cos();
      Complex complex5 = complex0.multiply((-1173.958727835615));
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(2688.82889, 2688.82889);
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(0.14982303977012634, 0.14982303977012634);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex4.INF.exp();
      Complex complex8 = complex6.INF.sqrt();
      Complex complex9 = complex5.NaN.multiply(0.14982303977012634);
      Object object0 = complex1.INF.readResolve();
      String string0 = complex5.INF.toString();
      Complex complex10 = complex0.multiply(complex2);
      double double0 = complex10.NaN.getArgument();
      Complex complex11 = complex4.INF.pow(complex1);
      double double1 = complex2.getImaginary();
      double double2 = complex1.getArgument();
      double double3 = complex4.getImaginary();
      Complex complex12 = complex5.tan();
      Complex complex13 = complex9.I.sqrt();
      Complex complex14 = complex2.ZERO.sqrt();
      String string1 = complex4.toString();
      boolean boolean0 = complex12.isNaN();
      String string2 = complex3.toString();
      boolean boolean1 = complex4.equals(complex0);
      String string3 = complex5.toString();
      Complex complex15 = complex9.exp();
      Complex complex16 = complex5.subtract(complex9);
      Complex complex17 = complex4.conjugate();
      Complex complex18 = complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = new Complex(3564.1, 1.0);
      Object object0 = complex2.INF.readResolve();
      Complex complex3 = complex0.ONE.divide(complex2);
      Complex complex4 = complex0.cos();
      Object object1 = complex4.ONE.readResolve();
      Object object2 = complex0.readResolve();
      Complex complex5 = complex2.I.sinh();
      boolean boolean0 = complex4.equals(object2);
      Complex complex6 = complex3.sqrt1z();
      double double0 = complex6.abs();
      int int0 = complex0.hashCode();
      double double1 = complex2.getReal();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex7.NaN.subtract(complex5);
      Complex complex9 = complex6.atan();
      Complex complex10 = complex9.ONE.atan();
      Complex complex11 = complex6.asin();
      Complex complex12 = complex3.sin();
      Complex complex13 = complex11.ZERO.createComplex((-400.0), (-400.0));
      Complex complex14 = complex4.multiply(complex3);
      Complex complex15 = complex10.pow(complex11);
      Complex complex16 = complex12.exp();
      Complex complex17 = complex15.log();
      double double2 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.ONE.createComplex((-1256.231610656917), (-2894.49280668672));
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex5.ONE.add(complex7);
      String string0 = complex4.toString();
      Complex complex9 = complex7.negate();
      Complex complex10 = complex9.ZERO.createComplex((-1738.3758392037905), (-1256.231610656917));
      Complex complex11 = complex5.multiply((-1.0));
      Complex complex12 = complex11.INF.createComplex(0.0, (-2867.3391143));
      Complex complex13 = complex5.tan();
      Complex complex14 = complex13.NaN.log();
      boolean boolean0 = complex11.equals(complex1);
      Complex complex15 = complex5.add(complex13);
      double double0 = complex6.abs();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-1424.0722994057985), (-1215.0984523186));
      Complex complex1 = complex0.I.atan();
      ComplexField complexField0 = complex1.ZERO.getField();
      String string0 = complex0.ONE.toString();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.INF.acos();
      Complex complex5 = complex3.asin();
      String string1 = complex5.ZERO.toString();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex1.divide(complex2);
      Object object0 = complex3.readResolve();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex3.cosh();
      boolean boolean0 = complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(4044.15305, (-1.0));
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = new Complex((-1.0), 0.0);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.ONE.asin();
      double double0 = complex2.abs();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex4.createComplex((-1.0), 1.0);
      double double1 = complex6.getImaginary();
      Object object0 = complex6.readResolve();
      Complex complex8 = Complex.ZERO;
      boolean boolean0 = complex5.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.ZERO.negate();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex0.atan();
      double double0 = complex0.abs();
      Complex complex3 = complex1.log();
      Complex complex4 = complex0.ONE.tan();
      try { 
        complex2.INF.nthRoot((-2971));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,971
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex0.I.sinh();
      double double0 = complex0.getImaginary();
      double double1 = complex0.getArgument();
      String string0 = complex0.toString();
      double double2 = complex0.getImaginary();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, 0.7853981633974483);
      boolean boolean0 = complex0.equals(complex5);
      Complex complex6 = complex1.INF.log();
      Object object0 = complex5.readResolve();
      try { 
        complex1.nthRoot((-1001));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,001
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.ZERO.multiply((-768.53));
      Complex complex4 = complex0.add(complex1);
      double double0 = complex4.getImaginary();
      try { 
        complex3.nthRoot((-3230));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,230
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-173.24), (-173.24));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex1.createComplex(0.0, Double.NaN);
      Complex complex4 = complex3.INF.createComplex(0.0, 805.0);
      Complex complex5 = complex1.negate();
      Complex complex6 = complex3.sqrt();
      ComplexField complexField0 = complex5.getField();
      Complex complex7 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
      Complex complex1 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex1);
      Object object0 = complex1.readResolve();
      boolean boolean1 = complex0.isInfinite();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.ONE.pow(complex0);
      int int0 = complex2.NaN.hashCode();
      Complex complex4 = complex2.cosh();
      double double1 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex0.I.createComplex(1714.0, 0.0);
      Complex complex4 = complex1.I.tanh();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex4.pow(complex1);
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex6.negate();
      String string0 = complex5.NaN.toString();
      Complex complex10 = complex5.multiply(0.0);
      Complex complex11 = complex10.ONE.atan();
      Complex complex12 = complex0.asin();
      Complex complex13 = complex11.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.ONE.conjugate();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex1.add(complex0);
      double double0 = complex3.ONE.abs();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex5.NaN.cosh();
      double double1 = complex2.INF.getArgument();
      Complex complex7 = complex6.ONE.add(complex4);
      double double2 = complex7.I.abs();
      Complex complex8 = complex7.ONE.sqrt();
      Complex complex9 = complex7.cos();
      Complex complex10 = complex4.multiply(complex5);
      Complex complex11 = complex6.tan();
      Object object1 = complex7.readResolve();
      String string0 = complex5.ONE.toString();
      Complex complex12 = complex2.conjugate();
      Complex complex13 = complex12.ONE.createComplex(1.0, 0.0);
      Complex complex14 = complex13.ONE.sqrt1z();
      double double3 = complex5.abs();
      Complex complex15 = complex6.exp();
      Complex complex16 = complex4.sqrt1z();
      double double4 = complex10.getArgument();
      Complex complex17 = complex12.pow(complex11);
      boolean boolean0 = complex13.isNaN();
      try { 
        complex13.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex0.sinh();
      String string0 = complex0.toString();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.INF.negate();
      double double0 = complex3.getArgument();
      Complex complex8 = complex4.cos();
      Complex complex9 = complex8.ZERO.divide(complex4);
      List<Complex> list0 = complex5.nthRoot(944679875);
      Complex complex10 = complex5.sqrt();
      Complex complex11 = complex3.divide(complex2);
      Complex complex12 = complex5.multiply(complex10);
      List<Complex> list1 = complex12.nthRoot(3092);
      Complex complex13 = complex1.atan();
      Complex complex14 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(13.07, (-3560.110527916865));
      String string0 = complex0.ZERO.toString();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.hashCode();
      List<Complex> list0 = complex0.INF.nthRoot(37);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex1.ONE.multiply((double) 37);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.ZERO.divide(complex2);
      Complex complex7 = complex6.NaN.cosh();
      boolean boolean0 = complex5.isNaN();
      Object object0 = complex5.readResolve();
      Complex complex8 = complex1.subtract(complex5);
      Complex complex9 = complex5.ONE.tanh();
      Complex complex10 = complex1.NaN.cosh();
      ComplexField complexField0 = complex9.getField();
      Object object1 = complex8.NaN.readResolve();
      Complex complex11 = complex5.pow(complex1);
      Complex complex12 = complex4.sinh();
      Complex complex13 = complex8.tanh();
      Complex complex14 = complex13.INF.negate();
      ComplexField complexField1 = complex1.getField();
      Complex complex15 = complex1.sinh();
      Complex complex16 = complex4.cos();
      ComplexField complexField2 = complex12.getField();
      Complex complex17 = complex16.ZERO.acos();
      Complex complex18 = complex13.createComplex((-1426.6757462881), 0.0);
      Complex complex19 = complex18.atan();
      Complex complex20 = complex16.sqrt1z();
      double double0 = complex5.getArgument();
      Complex complex21 = complex9.asin();
      boolean boolean1 = complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-732.698840802156), 862.8651558283683);
      Complex complex1 = complex0.INF.sqrt();
      double double0 = complex0.getArgument();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.ONE.divide(complex1);
      String string0 = complex2.INF.toString();
      Complex complex4 = complex0.I.sqrt();
      Complex complex5 = complex0.log();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.I.log();
      int int0 = complex0.hashCode();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex6.pow(complex0);
      String string1 = complex9.I.toString();
      Complex complex10 = complex9.divide(complex6);
      int int1 = complex0.hashCode();
      Complex complex11 = complex5.multiply((-732.698840802156));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(3.141592653589793, (-126.93054));
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.negate();
      List<Complex> list0 = complex1.I.nthRoot(1549);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-1253.1), (-1253.1));
      Complex complex1 = complex0.ZERO.sinh();
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.sqrt1z();
      Object object1 = complex2.INF.readResolve();
      Complex complex3 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex0.ONE.divide(complex2);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex1.I.multiply(complex4);
      int int0 = complex5.I.hashCode();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex6.ZERO.multiply(complex0);
      Complex complex8 = complex0.acos();
      Complex complex9 = complex8.NaN.divide(complex6);
      double double0 = complex0.getArgument();
      Complex complex10 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.pow(complex1);
      int int0 = complex2.I.hashCode();
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex2.I.sqrt();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex0.ONE.atan();
      Complex complex7 = complex0.atan();
      ComplexField complexField0 = complex7.getField();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex1.createComplex(2472.439, 2472.439);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.NaN.sinh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.I.cosh();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex0.I.subtract(complex5);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.ZERO.createComplex((-538.801), (-538.801));
      Complex complex9 = complex7.NaN.conjugate();
      Object object0 = complex1.readResolve();
      Complex complex10 = complex3.I.sqrt();
      Complex complex11 = complex1.I.tan();
      try { 
        complex11.NaN.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.divide(complex0);
      double double0 = complex1.abs();
      Complex complex6 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex7 = complex2.multiply(complex0);
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex2.INF.asin();
      double double0 = complex2.abs();
      Complex complex5 = complex4.NaN.conjugate();
      Object object0 = complex1.I.readResolve();
      double double1 = complex1.I.abs();
      double double2 = complex0.NaN.abs();
      double double3 = complex0.getArgument();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex2.multiply((-4047.6502353478));
      boolean boolean0 = complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-2470.5246386), 332.6896122);
      Complex complex1 = new Complex(1106.629, (-1560.863));
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.ONE.pow(complex1);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      double double0 = complex0.getReal();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex2.INF.multiply(complex0);
      String string0 = complex2.I.toString();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex0.ZERO.tanh();
      Complex complex6 = complex0.add(complex2);
      Complex complex7 = complex6.acos();
      Complex complex8 = complex2.INF.divide(complex5);
      Complex complex9 = complex7.NaN.asin();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex10 = complex6.pow(complex3);
      double double1 = complex1.abs();
      Complex complex11 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.INF.multiply(0.0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.NaN.cos();
      boolean boolean0 = complex3.isNaN();
      Complex complex6 = complex3.subtract(complex2);
      Complex complex7 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt1z();
      List<Complex> list0 = complex0.nthRoot(1268);
      Object object0 = complex1.readResolve();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex3.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.multiply((-1695.22));
      Complex complex3 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.sinh();
      Object object0 = complex3.INF.readResolve();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.log();
      boolean boolean0 = complex5.equals(complex0);
      Object object1 = complex0.readResolve();
      double double0 = complex2.getReal();
      Complex complex6 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.multiply(6.283185307179586);
      Complex complex4 = complex3.exp();
      double double0 = complex3.getReal();
      List<Complex> list0 = complex1.nthRoot(154);
      Complex complex5 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex1.NaN.sqrt();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex5.ZERO.atan();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex4.I.pow(complex1);
      int int0 = complex8.hashCode();
      Complex complex10 = complex1.ONE.conjugate();
      try { 
        complex4.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1.0), 0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ONE.asin();
      double double0 = complex1.abs();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex3.createComplex((-1.0), 1.0);
      double double1 = complex5.getImaginary();
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex1.I.sqrt1z();
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = complex4.I.tanh();
      Complex complex8 = complex4.conjugate();
      double double0 = complex4.abs();
      Complex complex9 = complex2.atan();
      Complex complex10 = complex4.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex4.NaN.createComplex(0.0, 0.0);
      Complex complex6 = complex0.conjugate();
      double double0 = complex0.getReal();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1.0E-6), (-1.0E-6));
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.sqrt();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex3 = complex2.cos();
      Complex complex4 = null;
      try { 
        complex2.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Object object0 = complex0.I.readResolve();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.INF.log();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex2.negate();
      try { 
        complex4.I.nthRoot((-1587));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,587
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.createComplex(Double.NEGATIVE_INFINITY, (-1342.091505724938));
      String string0 = complex0.toString();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex3.multiply(0.0);
      Complex complex7 = complex2.INF.subtract(complex1);
      Complex complex8 = complex2.negate();
      Complex complex9 = complex3.NaN.asin();
      Complex complex10 = complex3.INF.tan();
      double double0 = complex0.getArgument();
      Complex complex11 = complex1.acos();
      int int0 = complex2.hashCode();
      int int1 = complex4.hashCode();
      Complex complex12 = complex1.tanh();
      Complex complex13 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-3514.1658624462857), (-1105.11353));
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex1.equals(object0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.INF.nthRoot(147);
      Complex complex1 = complex0.createComplex((-4335.95292095245), 0.13333332538604736);
      Complex complex2 = complex1.INF.multiply(complex0);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(199.13715, 3551.169653699129);
      Complex complex1 = complex0.ONE.conjugate();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      List<Complex> list0 = complex0.nthRoot(7);
      Complex complex2 = complex0.multiply((double) 7);
      Complex complex3 = complex1.createComplex((-1604.8105551065), (-1604.8105551065));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-2470.5246386), 332.6896122);
      Complex complex1 = new Complex(1106.629, 1106.629);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.ONE.pow(complex1);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = new Complex((-431.818341200023), 0.0);
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt();
      int int0 = complex1.NaN.hashCode();
      int int1 = complex0.ZERO.hashCode();
      Complex complex2 = complex0.tan();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex2.pow(complex4);
      Complex complex6 = complex3.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.cos();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex3.conjugate();
      Object object0 = complex4.INF.readResolve();
      Complex complex5 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex0.sinh();
      boolean boolean0 = complex3.isInfinite();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.INF.divide(complex1);
      Complex complex7 = complex2.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      int int0 = complex0.I.hashCode();
      Complex complex2 = complex1.pow(complex0);
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex3 = complex2.cosh();
      ComplexField complexField1 = complex1.getField();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.createComplex(942.296460201316, 942.296460201316);
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex0.createComplex(942.296460201316, Double.POSITIVE_INFINITY);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = complex3.ONE.subtract(complex2);
      Object object1 = complex4.readResolve();
      Complex complex7 = complex0.ONE.add(complex4);
      double double0 = complex7.ONE.getArgument();
      Complex complex8 = complex7.INF.acos();
      String string0 = complex8.I.toString();
      boolean boolean0 = complex4.equals(object1);
      double double1 = complex4.abs();
      Complex complex9 = complex4.tan();
      Complex complex10 = complex2.sqrt1z();
      Complex complex11 = complex9.ONE.conjugate();
      String string1 = complex0.toString();
      String string2 = complex9.toString();
      boolean boolean1 = complex9.equals("(NaN, NaN)");
      Complex complex12 = complex10.multiply(complex4);
      Complex complex13 = complex4.ONE.tanh();
      String string3 = complex6.toString();
      Complex complex14 = complex7.conjugate();
      Complex complex15 = complex0.cosh();
      Object object2 = complex10.readResolve();
      double double2 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-2417.0785225027125), 0.0);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.multiply((-2417.0785225027125));
      Complex complex3 = complex1.acos();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex6.NaN.tan();
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex4.cos();
      int int0 = complex8.I.hashCode();
      Complex complex9 = complex4.ZERO.sin();
      Complex complex10 = complex9.acos();
      Complex complex11 = complex4.NaN.subtract(complex0);
      Object object0 = complex4.readResolve();
      boolean boolean1 = complex2.equals(object0);
      List<Complex> list0 = complex4.nthRoot(487);
      Complex complex12 = complex5.ZERO.sqrt1z();
      Complex complex13 = complex12.I.subtract(complex1);
      Complex complex14 = complex5.tan();
      Complex complex15 = complex1.subtract(complex6);
      double double0 = complex15.getArgument();
      Complex complex16 = complex6.atan();
      Complex complex17 = complex1.sqrt();
      Complex complex18 = complex17.multiply((-2417.0785225027125));
      Complex complex19 = complex15.tanh();
      Complex complex20 = complex0.sinh();
      Complex complex21 = complex20.negate();
      String string0 = complex21.ONE.toString();
      Complex complex22 = complex16.acos();
      Complex complex23 = complex4.cosh();
      Complex complex24 = complex23.I.sin();
      Complex complex25 = complex8.log();
      Complex complex26 = complex16.pow(complex9);
      Complex complex27 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.NaN.add(complex0);
      Complex complex6 = complex5.add(complex2);
      Complex complex7 = complex6.ZERO.tan();
      Complex complex8 = complex2.cos();
      double double0 = complex1.getImaginary();
      Complex complex9 = complex1.NaN.sqrt1z();
      double double1 = complex3.getReal();
      int int0 = complex2.hashCode();
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex10.add(complex8);
      Complex complex12 = complex8.sin();
      Complex complex13 = complex5.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex1.NaN.multiply(0.0);
      double double0 = complex0.I.getArgument();
      double double1 = complex1.ONE.getArgument();
      Complex complex5 = complex0.NaN.multiply(complex2);
      Complex complex6 = complex1.log();
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = complex2.ZERO.tanh();
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex9.acos();
      int int0 = complex10.INF.hashCode();
      double double2 = complex2.abs();
      Complex complex11 = complex0.NaN.log();
      Complex complex12 = complex11.ZERO.negate();
      Complex complex13 = complex9.exp();
      ComplexField complexField0 = complex2.getField();
      double double3 = complex13.abs();
      Complex complex14 = complex3.createComplex((-120.453), 6.283185307179586);
      Complex complex15 = complex13.exp();
      Complex complex16 = complex14.ONE.exp();
      Complex complex17 = complex11.exp();
      Complex complex18 = complex13.ONE.subtract(complex3);
      Complex complex19 = complex13.INF.tan();
      double double4 = complex0.getReal();
      Complex complex20 = complex12.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex1.ZERO.asin();
      Complex complex4 = complex0.log();
      double double0 = complex4.INF.abs();
      Complex complex5 = complex1.pow(complex0);
      double double1 = complex0.abs();
      Complex complex6 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.asin();
      String string0 = complex0.ZERO.toString();
      Complex complex2 = complex0.I.multiply(355.2675246691865);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex0.INF.conjugate();
      Complex complex5 = complex4.I.pow(complex0);
      Complex complex6 = complex4.INF.sinh();
      Complex complex7 = complex4.ONE.multiply(0.0);
      Complex complex8 = complex1.ONE.sinh();
      List<Complex> list0 = complex0.nthRoot(584);
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex9.ONE.conjugate();
      boolean boolean0 = complex1.isInfinite();
      Complex complex11 = complex9.ZERO.divide(complex4);
      Complex complex12 = complex7.sqrt1z();
      Complex complex13 = complex4.INF.multiply(complex1);
      Complex complex14 = complex9.NaN.cosh();
      double double0 = complex7.getReal();
      Complex complex15 = complex7.cosh();
      Complex complex16 = complex5.sinh();
      Complex complex17 = complex15.tan();
      Complex complex18 = Complex.ONE;
      boolean boolean1 = complex13.equals(complex18);
      Complex complex19 = complex5.sin();
      double double1 = complex19.INF.abs();
      String string1 = complex19.toString();
      double double2 = complex10.getReal();
      Complex complex20 = complex4.negate();
      Complex complex21 = complex17.tan();
      Complex complex22 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ZERO.cos();
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex3.ONE.pow(complex1);
      ComplexField complexField1 = complex4.getField();
      ComplexField complexField2 = complex0.getField();
      Complex complex5 = Complex.NaN;
      Complex complex6 = new Complex((-859.3660388031685), (-859.3660388031685));
      Complex complex7 = complex3.NaN.asin();
      Complex complex8 = complex1.add(complex6);
      Complex complex9 = complex8.NaN.createComplex(2.718281828459045, 2.718281828459045);
      boolean boolean0 = complex4.equals(complex6);
      double double0 = complex1.getReal();
      Complex complex10 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.log();
      double double0 = complex3.abs();
      Complex complex5 = complex3.atan();
      int int0 = complex1.hashCode();
      Complex complex6 = complex5.asin();
      String string0 = complex2.toString();
      Complex complex7 = complex0.subtract(complex4);
      Complex complex8 = complex0.divide(complex2);
      int int1 = complex5.hashCode();
      Complex complex9 = complex1.tanh();
      List<Complex> list0 = complex7.nthRoot(37);
      Complex complex10 = complex5.sinh();
      Complex complex11 = complex4.divide(complex2);
      String string1 = complex3.toString();
      Complex complex12 = complex9.multiply(0.0);
      Complex complex13 = complex7.exp();
      Complex complex14 = complex5.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex2.multiply(0.0);
      Complex complex4 = complex1.ONE.exp();
      Complex complex5 = complex4.ONE.sqrt();
      Object object0 = complex0.INF.readResolve();
      Object object1 = complex2.I.readResolve();
      Complex complex6 = complex1.I.multiply(complex0);
      Complex complex7 = complex1.INF.tan();
      int int0 = (-283);
      try { 
        complex0.nthRoot((-283));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -283
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
