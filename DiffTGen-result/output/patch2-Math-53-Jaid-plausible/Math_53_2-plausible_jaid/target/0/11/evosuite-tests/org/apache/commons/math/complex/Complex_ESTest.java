/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:08:20 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      double double0 = complex1.INF.abs();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.NaN.asin();
      int int0 = complex1.ZERO.hashCode();
      Complex complex4 = complex3.INF.subtract(complex2);
      boolean boolean0 = complex1.equals(complex2);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex1.pow(complex5);
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex6.ONE.cos();
      double double1 = complex9.INF.abs();
      double double2 = complex6.INF.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex10 = complex2.conjugate();
      Complex complex11 = complex0.divide(complex4);
      int int1 = (-3714);
      Complex complex12 = complex10.sin();
      Complex complex13 = complex7.multiply(Double.POSITIVE_INFINITY);
      try { 
        complex12.INF.nthRoot((-311));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -311
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.createComplex((-1976.7793724754), 0.0);
      Complex complex5 = complex1.createComplex(0.0, 0.0);
      Complex complex6 = complex1.I.createComplex(304.35929, 93.089213006);
      Complex complex7 = complex5.pow(complex1);
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex8.NaN.sqrt();
      Complex complex10 = complex9.ZERO.cos();
      int int0 = complex0.hashCode();
      int int1 = complex5.hashCode();
      Complex complex11 = complex7.sqrt();
      Complex complex12 = complex11.ONE.createComplex((-3236.4), 0.0);
      Complex complex13 = complex11.asin();
      Complex complex14 = complex6.conjugate();
      Complex complex15 = complex1.subtract(complex14);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-1872.05428));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.multiply(0.0);
      Complex complex3 = complex1.INF.sqrt1z();
      Complex complex4 = complex3.ONE.divide(complex2);
      Complex complex5 = complex1.ONE.cosh();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex6.multiply(complex0);
      Complex complex8 = complex0.acos();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex7.sin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(1119.2538, 1119.2538);
      Complex complex1 = complex0.tan();
      int int0 = 7;
      Complex complex2 = new Complex(7, 7);
      Complex complex3 = complex0.INF.pow(complex2);
      List<Complex> list0 = complex0.ONE.nthRoot(7);
      Complex complex4 = complex3.I.divide(complex0);
      int int1 = complex3.ZERO.hashCode();
      Complex complex5 = complex0.I.createComplex((-222.2322), 1119.2538);
      String string0 = complex2.ZERO.toString();
      Object object0 = complex3.ZERO.readResolve();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex3.createComplex(7, 1119.2538);
      ComplexField complexField0 = complex6.ZERO.getField();
      Complex complex7 = complex0.ZERO.sqrt1z();
      double double0 = complex6.getImaginary();
      Complex complex8 = complex5.cos();
      Complex complex9 = complex8.acos();
      boolean boolean1 = complex6.isNaN();
      try { 
        complex8.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(9.219544613762692E-9, 9.219544613762692E-9);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.createComplex(0.0, 101.864);
      Complex complex3 = complex1.INF.createComplex(9.219544613762692E-9, 0.0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.multiply(complex4);
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = complex4.I.divide(complex0);
      Complex complex9 = complex5.ZERO.pow(complex4);
      Complex complex10 = complex9.I.sinh();
      Complex complex11 = complex10.I.sqrt1z();
      Complex complex12 = complex1.log();
      Complex complex13 = complex0.cosh();
      Object object0 = complex12.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex14 = complex4.sqrt1z();
      Complex complex15 = complex14.pow(complex12);
      String string0 = complex15.NaN.toString();
      Complex complex16 = complex14.atan();
      Complex complex17 = complex12.INF.tan();
      Complex complex18 = complex0.sin();
      List<Complex> list0 = complex18.nthRoot(2525);
      Complex complex19 = complex15.cos();
      Complex complex20 = complex19.NaN.cosh();
      Complex complex21 = complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.NaN.conjugate();
      double double0 = complex0.getArgument();
      String string0 = complex0.toString();
      Complex complex3 = complex0.log();
      double double1 = complex0.abs();
      boolean boolean0 = complex3.isNaN();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tan();
      double double0 = 550.0;
      Complex complex2 = complex1.INF.multiply(550.0);
      Complex complex3 = complex0.createComplex((-86.943523166), (-86.943523166));
      try { 
        complex0.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-264.82180045964), 0.0);
      Complex complex1 = complex0.INF.atan();
      List<Complex> list0 = complex0.ZERO.nthRoot(7);
      Complex complex2 = complex0.INF.log();
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex0.getField();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.I.conjugate();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex3.sin();
      Complex complex7 = complex0.multiply((-430.2211));
      int int0 = complex3.hashCode();
      boolean boolean0 = complex3.isNaN();
      boolean boolean1 = complex0.equals(complex3);
      Object object0 = complex0.readResolve();
      Complex complex8 = complex0.multiply((-264.82180045964));
      Complex complex9 = complex8.negate();
      Complex complex10 = complex9.NaN.multiply(0.625);
      Complex complex11 = complex10.ZERO.atan();
      Complex complex12 = complex8.INF.asin();
      Complex complex13 = complex8.cosh();
      double double0 = complex10.abs();
      boolean boolean2 = complex7.equals(complex5);
      Complex complex14 = complex5.sqrt();
      Complex complex15 = Complex.NaN;
      Complex complex16 = complex0.multiply(complex15);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-2109.9067524512125), 405.19227222451974);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.createComplex((-2109.9067524512125), (-2109.9067524512125));
      Complex complex4 = complex2.cos();
      Complex complex5 = complex0.ONE.add(complex2);
      String string0 = complex0.toString();
      Object object0 = complex1.ONE.readResolve();
      Complex complex6 = complex1.ZERO.pow(complex5);
      Complex complex7 = complex2.createComplex((-2263.89055055), 0.0);
      Complex complex8 = complex1.pow(complex5);
      int int0 = complex5.hashCode();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex9.ZERO.sqrt1z();
      double double0 = complex8.I.getArgument();
      Complex complex11 = complex9.INF.subtract(complex5);
      Complex complex12 = complex2.cosh();
      Complex complex13 = complex8.NaN.subtract(complex11);
      Complex complex14 = complex5.sqrt();
      Complex complex15 = complex8.tan();
      int int1 = complex15.INF.hashCode();
      boolean boolean0 = complex2.equals(complex14);
      Complex complex16 = complex11.tan();
      Complex complex17 = complex16.NaN.asin();
      double double1 = complex6.getArgument();
      int int2 = complex9.hashCode();
      Complex complex18 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      String string0 = complex0.toString();
      Complex complex1 = complex0.sqrt1z();
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex0.ZERO.conjugate();
      double double0 = complex1.abs();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex4.ONE.log();
      Complex complex6 = complex3.subtract(complex1);
      Complex complex7 = complex4.atan();
      Complex complex8 = complex3.asin();
      Complex complex9 = complex8.NaN.sqrt();
      List<Complex> list0 = complex1.nthRoot(110);
      Complex complex10 = complex7.pow(complex1);
      double double1 = complex8.abs();
      Complex complex11 = complex4.multiply(complex9);
      Complex complex12 = complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(263.0, 263.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.negate();
      double double0 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex1.INF.tanh();
      Complex complex4 = complex0.negate();
      Object object1 = complex4.ZERO.readResolve();
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex1.tanh();
      Object object2 = complex1.readResolve();
      Complex complex8 = complex5.createComplex((-0.09088450866185192), (-1025.55624711075));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.INF.abs();
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.conjugate();
      double double1 = complex5.ONE.abs();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex0.add(complex6);
      boolean boolean1 = complex0.isInfinite();
      double double2 = complex1.abs();
      Complex complex8 = complex0.log();
      Complex complex9 = complex6.exp();
      Complex complex10 = complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(2.3841857910019882E-8, (-3979.4940076657));
      Complex complex1 = complex0.INF.tanh();
      double double0 = complex0.I.getArgument();
      Complex complex2 = complex1.ONE.multiply(complex0);
      int int0 = complex0.ZERO.hashCode();
      Complex complex3 = complex0.conjugate();
      int int1 = complex1.ZERO.hashCode();
      boolean boolean0 = complex1.isInfinite();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex0.sqrt1z();
      double double1 = complex6.NaN.abs();
      Object object0 = complex5.readResolve();
      Complex complex7 = complex3.multiply((-3979.4940076657));
      Complex complex8 = complex2.pow(complex3);
      Complex complex9 = complex8.I.sqrt();
      Complex complex10 = complex8.ONE.exp();
      int int2 = complex8.ZERO.hashCode();
      Complex complex11 = complex2.sqrt1z();
      String string0 = complex4.toString();
      double double2 = complex1.getReal();
      Complex complex12 = complex1.log();
      double double3 = complex12.INF.abs();
      Complex complex13 = complex0.atan();
      boolean boolean1 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(619.77634339314, (-1152.8196417562285));
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex4.NaN.sqrt1z();
      double double0 = complex6.ZERO.abs();
      double double1 = complex6.NaN.getArgument();
      Complex complex7 = complex6.NaN.conjugate();
      List<Complex> list0 = complex7.ONE.nthRoot(838);
      Complex complex8 = complex7.ONE.cosh();
      Complex complex9 = complex6.ONE.pow(complex8);
      double double2 = complex8.I.abs();
      Object object0 = complex0.readResolve();
      List<Complex> list1 = complex6.nthRoot(19);
      Complex complex10 = complex1.add(complex3);
      Complex complex11 = complex3.NaN.cosh();
      Complex complex12 = complex1.INF.log();
      List<Complex> list2 = complex0.INF.nthRoot(19);
      Complex complex13 = complex1.I.pow(complex2);
      String string0 = complex13.I.toString();
      String string1 = complex5.toString();
      boolean boolean0 = complex3.isInfinite();
      Complex complex14 = complex10.acos();
      Complex complex15 = complex5.sqrt();
      double double3 = complex15.NaN.getArgument();
      double double4 = complex0.abs();
      Complex complex16 = complex6.negate();
      Complex complex17 = complex3.cosh();
      Complex complex18 = complex1.createComplex(577.3784312111, (-770.303995));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = complex4.ZERO.sinh();
      Complex complex7 = complex4.subtract(complex0);
      Complex complex8 = complex0.INF.divide(complex2);
      Complex complex9 = complex8.negate();
      Complex complex10 = new Complex((-3366.1422654019), (-3366.1422654019));
      Complex complex11 = complex0.NaN.exp();
      Complex complex12 = complex10.ONE.conjugate();
      Complex complex13 = complex0.subtract(complex10);
      Complex complex14 = complex13.ZERO.tanh();
      Complex complex15 = complex10.cosh();
      Complex complex16 = complex2.atan();
      double double0 = complex8.ZERO.getArgument();
      Complex complex17 = complex11.ZERO.log();
      Complex complex18 = complex16.ZERO.atan();
      Complex complex19 = complex8.divide(complex13);
      Complex complex20 = complex10.acos();
      Complex complex21 = complex20.NaN.sinh();
      Complex complex22 = complex12.sinh();
      Complex complex23 = complex11.asin();
      Object object1 = complex15.readResolve();
      ComplexField complexField1 = complex12.getField();
      Complex complex24 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex2.NaN.conjugate();
      try { 
        complex2.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(2.356194490192345, 2.356194490192345);
      String string0 = complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex0.I.cosh();
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex0.ZERO.log();
      ComplexField complexField0 = complex6.I.getField();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex8.NaN.cos();
      Complex complex10 = complex4.I.tanh();
      Complex complex11 = complex8.sqrt();
      Complex complex12 = complex0.multiply(complex7);
      Complex complex13 = complex1.multiply(0.0);
      Complex complex14 = complex8.sinh();
      Complex complex15 = complex14.ONE.divide(complex5);
      Complex complex16 = complex6.multiply(complex4);
      ComplexField complexField1 = complex2.getField();
      double double0 = complex1.getReal();
      Complex complex17 = complex7.log();
      Complex complex18 = complex4.cos();
      Complex complex19 = complex12.sinh();
      Complex complex20 = complex19.add(complex12);
      Complex complex21 = complex16.multiply(0.0);
      Complex complex22 = complex21.NaN.cos();
      double double1 = complex2.getArgument();
      Complex complex23 = complex10.subtract(complex9);
      Complex complex24 = complex12.tan();
      Complex complex25 = complex24.I.sqrt();
      Complex complex26 = complex17.asin();
      double double2 = complex13.abs();
      Complex complex27 = complex26.acos();
      boolean boolean0 = complex14.isNaN();
      Complex complex28 = complex13.cos();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(10.0, 10.0);
      Complex complex1 = complex0.exp();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.I.negate();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.sqrt1z();
      double double0 = complex4.INF.getArgument();
      ComplexField complexField1 = complex1.getField();
      Complex complex5 = complex0.sqrt1z();
      double double1 = complex5.NaN.getArgument();
      Complex complex6 = complex0.ONE.tan();
      Complex complex7 = complex6.INF.sin();
      double double2 = complex0.getArgument();
      List<Complex> list0 = complex5.nthRoot(235);
      Complex complex8 = complex1.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt();
      try { 
        complex2.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      try { 
        complex0.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.I.sqrt();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.sqrt();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex0.ZERO.subtract(complex2);
      Object object1 = complex6.readResolve();
      double double0 = complex1.getImaginary();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex9.subtract(complex0);
      Complex complex11 = complex5.sin();
      Complex complex12 = complex0.pow(complex2);
      Complex complex13 = complex12.NaN.add(complex11);
      Complex complex14 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.negate();
      List<Complex> list0 = complex0.nthRoot(104);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = complex2.sin();
      ComplexField complexField0 = complex1.getField();
      Complex complex9 = complex1.sinh();
      boolean boolean0 = complex0.equals(complex6);
      Complex complex10 = complex8.subtract(complex4);
      Complex complex11 = complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex1.INF.multiply(0.0);
      Complex complex4 = complex1.ZERO.subtract(complex0);
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(1618.9714893131, 0.0);
      Complex complex1 = new Complex(0.0, 1039.603527493);
      Complex complex2 = complex1.I.multiply(0.0);
      Complex complex3 = complex0.I.pow(complex1);
      Complex complex4 = complex3.INF.add(complex0);
      List<Complex> list0 = complex4.ONE.nthRoot(31);
      Object object0 = complex0.readResolve();
      double double0 = complex1.getImaginary();
      boolean boolean0 = complex0.isNaN();
      String string0 = complex1.toString();
      Complex complex5 = complex3.INF.acos();
      Complex complex6 = complex3.tanh();
      double double1 = complex3.getArgument();
      Complex complex7 = complex2.multiply((-1752.6418));
      Complex complex8 = complex7.INF.sqrt1z();
      Complex complex9 = complex7.sqrt1z();
      int int0 = complex9.ZERO.hashCode();
      Complex complex10 = complex2.sin();
      Complex complex11 = complex7.ZERO.sqrt();
      Complex complex12 = complex4.cos();
      Complex complex13 = complex12.pow(complex7);
      Complex complex14 = complex8.cosh();
      Complex complex15 = complex4.sqrt();
      String string1 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.ONE.negate();
      List<Complex> list0 = complex1.nthRoot(1797);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.subtract(complex1);
      boolean boolean1 = complex0.isInfinite();
      double double0 = complex1.getArgument();
      boolean boolean2 = complex0.isNaN();
      Complex complex4 = complex3.multiply((-1994.791533538));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex1.ONE.exp();
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex1.add(complex5);
      Complex complex9 = complex7.I.asin();
      Complex complex10 = complex5.NaN.cos();
      List<Complex> list0 = complex0.I.nthRoot(1);
      double double0 = complex0.getArgument();
      Complex complex11 = complex5.atan();
      double double1 = complex8.ONE.getArgument();
      double double2 = complex0.getArgument();
      Complex complex12 = complex9.INF.add(complex8);
      Complex complex13 = complex1.ONE.add(complex11);
      double double3 = complex0.getArgument();
      Complex complex14 = complex1.tanh();
      int int0 = complex14.I.hashCode();
      Complex complex15 = complex9.conjugate();
      Complex complex16 = complex15.I.tanh();
      double double4 = complex0.getImaginary();
      Complex complex17 = complex7.sqrt();
      Complex complex18 = complex7.add(complex0);
      double double5 = complex18.getArgument();
      Object object0 = complex9.readResolve();
      boolean boolean0 = complex15.equals(object0);
      Complex complex19 = complex2.cosh();
      Complex complex20 = complex14.atan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.ZERO.tan();
      List<Complex> list0 = complex0.nthRoot(1);
      String string0 = complex1.toString();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex6.I.createComplex(1, 1);
      Complex complex9 = complex0.log();
      Complex complex10 = complex6.multiply(complex9);
      Complex complex11 = complex10.ZERO.cos();
      double double0 = complex7.getReal();
      Complex complex12 = complex6.INF.log();
      Complex complex13 = complex10.multiply(complex3);
      Complex complex14 = complex10.cos();
      boolean boolean0 = complex8.equals(complex11);
      Complex complex15 = complex4.multiply((double) 1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.INF.divide(complex0);
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex2.multiply((-2025.4473476208));
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex4.ZERO.exp();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex1.INF.sqrt1z();
      Complex complex10 = complex5.createComplex(1.0, (-2025.4473476208));
      Complex complex11 = complex4.sin();
      Complex complex12 = complex10.acos();
      double double0 = complex12.INF.abs();
      double double1 = complex3.getReal();
      ComplexField complexField0 = complex6.getField();
      Complex complex13 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(0.99, (-4264.386431));
      Complex complex1 = complex0.sinh();
      Object object0 = complex1.ONE.readResolve();
      ComplexField complexField0 = complex0.INF.getField();
      String string0 = complex1.toString();
      Complex complex2 = complex0.tanh();
      double double0 = complex0.getReal();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex3.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.ONE.asin();
      double double0 = complex1.I.abs();
      double double1 = complex0.getReal();
      boolean boolean0 = complex1.isInfinite();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = complex1.tan();
      Complex complex7 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 366.618598663);
      ComplexField complexField0 = complex0.getField();
      List<Complex> list0 = complex0.nthRoot(1);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex1.ZERO.subtract(complex0);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.INF.pow(complex0);
      Complex complex6 = complex3.add(complex0);
      Complex complex7 = complex1.log();
      Complex complex8 = complex0.INF.conjugate();
      Complex complex9 = complex0.ONE.negate();
      Complex complex10 = complex4.sqrt1z();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex11 = complex3.acos();
      double double0 = complex6.abs();
      Complex complex12 = complex0.atan();
      int int1 = complex1.hashCode();
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex0.acos();
      boolean boolean0 = complex2.equals(complex3);
      Complex complex4 = complex3.log();
      Complex complex5 = complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.atan();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex1.multiply(complex0);
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = complex5.log();
      Complex complex9 = complex8.INF.sqrt1z();
      Complex complex10 = complex7.ONE.negate();
      Complex complex11 = complex4.asin();
      Complex complex12 = complex11.I.exp();
      Complex complex13 = complex5.add(complex11);
      Complex complex14 = complex9.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = Complex.I;
      double double0 = complex1.ONE.abs();
      Complex complex2 = complex0.I.divide(complex1);
      List<Complex> list0 = complex2.ONE.nthRoot(66);
      Complex complex3 = complex0.INF.cosh();
      Complex complex4 = complex0.log();
      List<Complex> list1 = complex4.nthRoot(1);
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex2 = complex1.I.createComplex((-1.0), (-4854.7));
      Complex complex3 = complex1.INF.tan();
      double double0 = complex1.INF.getArgument();
      int int0 = complex0.hashCode();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.I.subtract(complex2);
      Complex complex6 = complex5.NaN.multiply(complex2);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.NaN.subtract(complex4);
      Complex complex9 = complex8.I.cos();
      Complex complex10 = complex4.multiply((-4854.7));
      List<Complex> list0 = complex4.nthRoot(192);
      Complex complex11 = complex4.multiply(0.0);
      Complex complex12 = complex4.sin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex9.pow(complex13);
      Complex complex15 = complex2.cosh();
      Complex complex16 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, (-1036.3472396));
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = Complex.INF;
      int int0 = complex4.NaN.hashCode();
      Complex complex5 = complex4.ONE.createComplex((-1036.3472396), 278.8);
      Complex complex6 = complex0.multiply(complex4);
      Object object0 = complex6.ZERO.readResolve();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex1.atan();
      double double0 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.add(complex1);
      double double0 = complex0.NaN.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.asin();
      boolean boolean0 = complex3.equals(complexField0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex1.ONE.pow(complex2);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.log();
      Complex complex9 = complex1.negate();
      Complex complex10 = complex7.sqrt1z();
      double double0 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.divide(complex1);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-73.19029365569));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.INF.createComplex(2.0, (-485.32406474515784));
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex1.pow(complex2);
      Complex complex8 = complex7.NaN.multiply(complex4);
      Complex complex9 = complex2.cosh();
      Complex complex10 = complex9.cos();
      String string0 = complex2.toString();
      int int0 = complex5.hashCode();
      double double0 = complex0.abs();
      double double1 = complex7.getImaginary();
      Complex complex11 = complex2.divide(complex5);
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex0.asin();
      Object object0 = complex1.I.readResolve();
      Complex complex5 = complex4.ZERO.multiply(complex1);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.INF.multiply(complex0);
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex1.sin();
      Complex complex10 = complex9.INF.exp();
      Complex complex11 = complex5.NaN.sqrt();
      Complex complex12 = complex4.exp();
      Complex complex13 = complex5.ZERO.sin();
      int int0 = 0;
      try { 
        complex12.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.I.exp();
      String string0 = complex2.NaN.toString();
      double double0 = complex2.ZERO.getArgument();
      boolean boolean0 = complex0.isNaN();
      double double1 = complex1.ZERO.abs();
      double double2 = complex0.getArgument();
      Complex complex4 = complex2.ZERO.cos();
      double double3 = complex0.INF.abs();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex1.NaN.cos();
      Complex complex7 = complex1.sin();
      List<Complex> list0 = complex4.nthRoot(17);
      Complex complex8 = complex0.exp();
      String string1 = complex2.toString();
      List<Complex> list1 = complex1.nthRoot(1);
      double double4 = complex2.abs();
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex8.cos();
      Complex complex11 = complex10.pow(complex0);
      Complex complex12 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.ONE.multiply(0.0);
      double double0 = complex4.ZERO.getArgument();
      double double1 = complex3.getReal();
      Complex complex5 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(3833.8, 3833.8);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ONE.asin();
      String string0 = complex3.NaN.toString();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex4.INF.multiply(3833.8);
      int int0 = complex2.hashCode();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex1.ZERO.add(complex3);
      Complex complex8 = complex6.NaN.subtract(complex1);
      double double0 = complex8.getArgument();
      Complex complex9 = complex8.ONE.negate();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex10 = complex2.pow(complex0);
      Complex complex11 = complex0.exp();
      Complex complex12 = complex6.tanh();
      Complex complex13 = complex12.tan();
      Complex complex14 = complex13.ONE.sin();
      Complex complex15 = complex12.multiply(complex0);
      Complex complex16 = complex15.pow(complex11);
      Complex complex17 = complex11.pow(complex16);
      Complex complex18 = complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.ZERO.exp();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.subtract(complex4);
      double double0 = complex2.NaN.abs();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex2.pow(complex7);
      Complex complex9 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex5.I.createComplex((-3438.3), (-3438.3));
      Complex complex7 = complex3.NaN.exp();
      Complex complex8 = complex7.I.pow(complex6);
      Complex complex9 = complex4.I.subtract(complex2);
      Object object0 = complex4.ONE.readResolve();
      Complex complex10 = complex0.ZERO.multiply(complex3);
      Complex complex11 = complex4.INF.conjugate();
      Complex complex12 = complex4.asin();
      Complex complex13 = complex3.ZERO.createComplex((-3438.3), 6.283185307179586);
      double double0 = complex12.I.getArgument();
      try { 
        complex1.nthRoot((-704));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -704
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.NaN.nthRoot(7);
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.pow(complex0);
      Complex complex4 = complex0.sqrt();
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.asin();
      int int0 = complex0.ONE.hashCode();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.conjugate();
      double double0 = complex0.abs();
      Complex complex4 = complex2.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.exp();
      boolean boolean0 = complex0.equals("rgx<");
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex2.tanh();
      double double0 = complex2.getImaginary();
      Complex complex5 = complex1.tanh();
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex0.multiply((-1693.9478575726014));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex0.asin();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      List<Complex> list0 = complex0.nthRoot(2931);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex0.createComplex(4.689275706245442E-7, 4.689275706245442E-7);
      Complex complex4 = complex0.NaN.tanh();
      Complex complex5 = complex1.ZERO.createComplex((-517.9168379), 4.689275706245442E-7);
      Complex complex6 = complex3.I.multiply((double) 1);
      List<Complex> list0 = complex3.ONE.nthRoot(1);
      List<Complex> list1 = complex6.INF.nthRoot(1111);
      Complex complex7 = complex3.subtract(complex2);
      Complex complex8 = complex7.INF.log();
      Complex complex9 = complex7.I.pow(complex2);
      double double0 = complex3.I.getArgument();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex10 = complex1.ZERO.log();
      Complex complex11 = complex10.ZERO.sin();
      double double1 = complex10.abs();
      int int0 = complex3.ZERO.hashCode();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex12 = complex0.NaN.conjugate();
      Object object0 = new Object();
      boolean boolean1 = complex1.equals(object0);
      Complex complex13 = complex0.asin();
      Complex complex14 = complex13.INF.exp();
      Complex complex15 = complex13.log();
      ComplexField complexField1 = complex15.NaN.getField();
      boolean boolean2 = complex6.equals(complex5);
      Complex complex16 = complex4.acos();
      Complex complex17 = complex6.sin();
      Complex complex18 = new Complex(1, 1530.9517916);
      Complex complex19 = complex2.multiply(complex18);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2460.3));
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.ZERO.sqrt();
      int int0 = complex1.ONE.hashCode();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.INF.divide(complex0);
      Complex complex7 = complex1.acos();
      boolean boolean0 = complex5.isNaN();
      boolean boolean1 = complex0.isInfinite();
      double double1 = complex1.abs();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex2.multiply(2805.5);
      Complex complex10 = complex0.asin();
      Complex complex11 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.I.add(complex3);
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex0.sinh();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.I.asin();
      Complex complex5 = complex1.createComplex(1.5707963267948966, 1.5707963267948966);
      Complex complex6 = new Complex((-1.0), 0.008333333333333333);
      Complex complex7 = complex0.divide(complex6);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex7.NaN.cos();
      Complex complex10 = complex3.tan();
      Complex complex11 = complex9.sqrt1z();
      String string0 = complex3.toString();
      Complex complex12 = complex5.log();
      Complex complex13 = complex12.NaN.exp();
      Complex complex14 = complex6.atan();
      Complex complex15 = complex6.createComplex((-2914.2), 0.008333333333333333);
      ComplexField complexField0 = complex5.getField();
      double double0 = complex4.getReal();
      Complex complex16 = complex7.sqrt1z();
      Complex complex17 = Complex.INF;
      Complex complex18 = complex1.multiply(complex17);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = new Complex((-4013.7155445721), (-1023.9976499873));
      Complex complex4 = complex0.ONE.divide(complex3);
      Complex complex5 = complex4.NaN.multiply(complex1);
      String string0 = complex5.I.toString();
      String string1 = complex1.I.toString();
      Complex complex6 = complex0.NaN.add(complex1);
      Object object0 = complex6.NaN.readResolve();
      Complex complex7 = complex6.acos();
      double double0 = complex0.abs();
      Complex complex8 = complex6.ZERO.negate();
      double double1 = complex8.INF.abs();
      Complex complex9 = complex1.ONE.subtract(complex3);
      boolean boolean0 = complex0.isInfinite();
      Complex complex10 = complex3.NaN.negate();
      double double2 = complex6.getArgument();
      Complex complex11 = complex4.INF.pow(complex5);
      Complex complex12 = complex1.I.tan();
      Complex complex13 = complex6.multiply(complex1);
      boolean boolean1 = complex8.isInfinite();
      Complex complex14 = complex13.createComplex(1.0, 0.0);
      Complex complex15 = complex13.ONE.asin();
      Complex complex16 = complex13.INF.exp();
      Complex complex17 = complex5.cosh();
      Complex complex18 = complex8.cosh();
      Complex complex19 = complex13.asin();
      Complex complex20 = complex3.multiply(complex11);
      Complex complex21 = complex1.sqrt1z();
      Complex complex22 = complex0.I.exp();
      Complex complex23 = complex13.multiply(0.0);
      boolean boolean2 = complex21.isNaN();
      Complex complex24 = complex6.pow(complex16);
      double double3 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex0.I.pow(complex1);
      Complex complex7 = complex6.ZERO.conjugate();
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex8.I.cosh();
      Complex complex10 = new Complex((-760.716403), (-760.716403));
      double double0 = complex3.abs();
      Complex complex11 = complex0.multiply(complex10);
      Complex complex12 = complex11.cos();
      Complex complex13 = complex11.ONE.createComplex((-760.716403), Double.NaN);
      String string0 = complex11.I.toString();
      Complex complex14 = complex11.atan();
      Complex complex15 = complex14.ONE.pow(complex5);
      Complex complex16 = complex14.INF.multiply(complex9);
      Complex complex17 = complex15.I.createComplex(0.0, 4127.568483035);
      Complex complex18 = complex15.sqrt1z();
      double double1 = complex11.getImaginary();
      Complex complex19 = complex4.sin();
      Complex complex20 = complex5.acos();
      Complex complex21 = complex20.NaN.sin();
      try { 
        complex12.nthRoot((-1506));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,506
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(660.84477, 660.84477);
      Complex complex1 = complex0.ZERO.conjugate();
      List<Complex> list0 = complex0.nthRoot(281);
      Complex complex2 = complex0.tan();
      Object object0 = complex2.I.readResolve();
      double double0 = complex1.getImaginary();
      boolean boolean0 = complex2.isInfinite();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.exp();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex1.ZERO.multiply(759.3094);
      int int0 = complex2.I.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.NaN.subtract(complex2);
      ComplexField complexField1 = complex0.getField();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex0.sqrt1z();
      double double0 = complex4.I.getArgument();
      Complex complex6 = complex5.INF.atan();
      Complex complex7 = complex4.createComplex(759.3094, 759.3094);
      Complex complex8 = complex5.acos();
      Complex complex9 = complex1.divide(complex8);
      Complex complex10 = complex7.INF.cos();
      Complex complex11 = complex0.negate();
      Complex complex12 = complex11.INF.multiply(complex2);
      Complex complex13 = complex8.atan();
      Complex complex14 = complex9.sqrt();
      Complex complex15 = complex6.tan();
      Complex complex16 = complex4.pow(complex8);
      Complex complex17 = complex12.sqrt1z();
      Complex complex18 = complex1.ZERO.atan();
      Complex complex19 = complex17.cos();
      boolean boolean1 = complex4.isNaN();
      Complex complex20 = complex7.acos();
      Complex complex21 = complex19.cosh();
      Complex complex22 = complex8.cosh();
      double double1 = complex10.abs();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex2.negate();
      int int0 = complex0.ZERO.hashCode();
      String string0 = complex0.NaN.toString();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.ZERO.multiply(0.0);
      Complex complex7 = complex0.createComplex(0.0, 3013.343734873272);
      String string1 = complex7.toString();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex6.subtract(complex0);
      Complex complex10 = complex9.I.log();
      Object object0 = complex0.readResolve();
      Complex complex11 = complex9.multiply(50.7706630093);
      double double1 = complex5.getReal();
      Complex complex12 = complex10.asin();
      Complex complex13 = complex4.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.I.divide(complex1);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex6.ZERO.sqrt1z();
      Complex complex8 = complex4.NaN.multiply((-583.324));
      Complex complex9 = complex5.add(complex0);
      Complex complex10 = complex0.NaN.atan();
      Complex complex11 = complex9.ONE.multiply(complex0);
      List<Complex> list0 = complex5.nthRoot(8388608);
      String string0 = complex5.toString();
      ComplexField complexField1 = complex0.ONE.getField();
      boolean boolean0 = complex8.isInfinite();
      double double0 = complex9.getArgument();
      boolean boolean1 = complex5.isNaN();
      double double1 = complex8.getArgument();
  }
}
