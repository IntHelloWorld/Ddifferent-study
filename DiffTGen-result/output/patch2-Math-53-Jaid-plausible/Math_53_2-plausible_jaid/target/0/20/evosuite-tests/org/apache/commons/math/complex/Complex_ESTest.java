/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:11:50 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      List<Complex> list0 = complex0.ZERO.nthRoot(1);
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex3.I.sqrt1z();
      List<Complex> list1 = complex0.nthRoot(1);
      Complex complex5 = complex1.INF.negate();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex1.isInfinite();
      Complex complex6 = complex1.INF.sinh();
      Complex complex7 = complex1.cos();
      int int0 = complex7.ONE.hashCode();
      List<Complex> list2 = complex0.nthRoot(1);
      String string0 = complex0.toString();
      Complex complex8 = complex1.createComplex(1, 1);
      Complex complex9 = complex0.pow(complex1);
      Complex complex10 = complex3.log();
      Complex complex11 = complex10.add(complex7);
      List<Complex> list3 = complex2.nthRoot(1);
      Complex complex12 = complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sin();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.NaN.add(complex2);
      Complex complex4 = complex3.I.add(complex2);
      int int0 = complex3.ONE.hashCode();
      List<Complex> list0 = complex0.NaN.nthRoot(67);
      Complex complex5 = complex4.I.acos();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex0.log();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex7.ONE.acos();
      ComplexField complexField1 = complex7.getField();
      Object object0 = complex4.readResolve();
      double double0 = complex5.getReal();
      boolean boolean1 = complex4.equals(complexField0);
      Complex complex9 = complex5.tanh();
      try { 
        complex0.nthRoot((-604));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -604
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(1229.1, 1229.1);
      Complex complex1 = complex0.log();
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex0.I.atan();
      Complex complex6 = complex2.NaN.cosh();
      Complex complex7 = complex6.ZERO.sqrt1z();
      double double1 = complex1.getImaginary();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex0.pow(complex8);
      Complex complex10 = complex9.ZERO.multiply(complex1);
      Complex complex11 = complex9.I.tan();
      List<Complex> list0 = complex6.nthRoot(343);
      Complex complex12 = complex2.cosh();
      Complex complex13 = complex0.exp();
      Complex complex14 = complex13.tan();
      Complex complex15 = complex4.negate();
      Complex complex16 = complex10.sqrt();
      Complex complex17 = complex0.cos();
      Complex complex18 = complex17.NaN.sinh();
      Complex complex19 = complex18.I.pow(complex9);
      int int0 = complex8.hashCode();
      Complex complex20 = complex11.cos();
      String string0 = complex8.toString();
      Complex complex21 = complex5.asin();
      Complex complex22 = complex10.cos();
      Complex complex23 = complex19.atan();
      String string1 = complex23.toString();
      double double2 = complex11.abs();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      double double0 = complex0.getReal();
      String string0 = complex1.NaN.toString();
      double double1 = complex0.getReal();
      Complex complex2 = complex0.I.add(complex1);
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex5.tan();
      int int0 = complex3.hashCode();
      double double2 = complex1.getReal();
      List<Complex> list0 = complex0.NaN.nthRoot(1047);
      Complex complex7 = complex3.I.subtract(complex5);
      Complex complex8 = complex3.INF.multiply(0.0);
      double double3 = complex1.NaN.getArgument();
      Complex complex9 = complex2.NaN.multiply(Double.NaN);
      Complex complex10 = complex0.tanh();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex4.isNaN();
      double double4 = complex0.getImaginary();
      Object object1 = new Object();
      boolean boolean1 = complex8.equals(object1);
      Complex complex11 = complex0.tanh();
      int int1 = complex11.hashCode();
      try { 
        complex5.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(2844.3567, 6.283185307179586);
      double double0 = complex0.I.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = new Complex((-4889.868281193535), (-4889.868281193535));
      Complex complex2 = complex0.multiply(complex1);
      boolean boolean1 = complex0.isInfinite();
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex1.NaN.cos();
      String string0 = complex0.toString();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex0.sqrt1z();
      String string1 = complex6.ONE.toString();
      Complex complex7 = complex6.tan();
      List<Complex> list0 = complex7.nthRoot(7);
      Complex complex8 = complex1.pow(complex0);
      Complex complex9 = complex5.sqrt1z();
      boolean boolean2 = complex6.isNaN();
      ComplexField complexField0 = complex9.getField();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex10.multiply(complex4);
      double double1 = complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.createComplex((-295.132800585679), 1723.077);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.pow(complex2);
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex0.conjugate();
      List<Complex> list0 = complex4.nthRoot(251);
      Complex complex5 = complex1.ONE.pow(complex0);
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex1.tanh();
      double double1 = complex1.getImaginary();
      Complex complex7 = complex6.ONE.sinh();
      boolean boolean0 = complex6.isNaN();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex8.ONE.multiply(complex5);
      Complex complex10 = complex8.INF.createComplex(Double.NaN, 10.0);
      Complex complex11 = complex8.createComplex(Double.NaN, 1600.0);
      Complex complex12 = complex11.I.tanh();
      Complex complex13 = complex8.cosh();
      boolean boolean1 = complex0.isInfinite();
      Object object1 = complex8.readResolve();
      boolean boolean2 = complex1.equals(object1);
      Object object2 = complex6.readResolve();
      Complex complex14 = complex2.sqrt();
      Complex complex15 = complex14.INF.multiply(0.0);
      boolean boolean3 = complex5.isNaN();
      Complex complex16 = complex3.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(6153.2921309978, 6153.2921309978);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex4.I.acos();
      Object object0 = complex2.ONE.readResolve();
      Complex complex6 = complex4.ZERO.subtract(complex0);
      Complex complex7 = complex6.INF.sinh();
      double double0 = complex3.INF.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex0.acos();
      boolean boolean0 = complex8.isInfinite();
      Complex complex9 = complex8.sin();
      Complex complex10 = complex9.INF.subtract(complex7);
      Complex complex11 = complex10.I.cosh();
      Complex complex12 = complex1.sin();
      Complex complex13 = complex12.NaN.log();
      Complex complex14 = Complex.I;
      Complex complex15 = complex13.ONE.subtract(complex11);
      Complex complex16 = complex13.INF.add(complex14);
      Complex complex17 = complex16.tanh();
      double double1 = complex17.ONE.getArgument();
      Complex complex18 = complex9.sqrt1z();
      Complex complex19 = complex18.acos();
      Complex complex20 = complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.createComplex(320.7678, (-4266.527));
      Complex complex3 = complex2.NaN.tanh();
      Object object0 = complex2.ONE.readResolve();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex1.INF.conjugate();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.NaN.divide(complex6);
      int int0 = complex5.ZERO.hashCode();
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex8.acos();
      Complex complex10 = complex8.I.exp();
      double double0 = complex2.getArgument();
      double double1 = complex4.getImaginary();
      Complex complex11 = complex0.cos();
      Complex complex12 = complex2.I.atan();
      Complex complex13 = complex0.divide(complex1);
      Complex complex14 = complex1.createComplex(320.7678, (-4266.527));
      Complex complex15 = complex2.INF.negate();
      String string0 = complex15.I.toString();
      ComplexField complexField0 = complex14.ZERO.getField();
      Complex complex16 = complex14.createComplex((-4266.527), Double.NaN);
      Complex complex17 = complex2.acos();
      Complex complex18 = complex2.sin();
      List<Complex> list0 = complex14.nthRoot(257);
      int int1 = complex11.hashCode();
      Complex complex19 = complex1.cos();
      Complex complex20 = complex6.pow(complex17);
      List<Complex> list1 = complex11.nthRoot(257);
      Complex complex21 = complex2.acos();
      Complex complex22 = complex0.cos();
      boolean boolean0 = complex13.isInfinite();
      Complex complex23 = complex5.multiply((-4266.527));
      Complex complex24 = Complex.NaN;
      Complex complex25 = complex17.multiply(complex24);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.multiply(6.283185307179586);
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex3.ONE.divide(complex1);
      Complex complex5 = complex4.INF.cosh();
      int int1 = 0;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 1.073741824E9);
      Complex complex2 = new Complex((-1.0), (-1.0));
      Complex complex3 = complex1.NaN.divide(complex2);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply(2542.040648777676);
      double double0 = complex1.ONE.abs();
      Complex complex2 = complex1.NaN.log();
      List<Complex> list0 = complex1.NaN.nthRoot(1);
      double double1 = complex0.getArgument();
      String string0 = complex0.toString();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.ZERO.tanh();
      double double2 = complex4.NaN.getArgument();
      Complex complex6 = complex2.ZERO.createComplex(0.0, Double.NaN);
      Complex complex7 = complex0.add(complex4);
      Complex complex8 = complex1.INF.add(complex5);
      Complex complex9 = complex7.ONE.cosh();
      String string1 = complex4.ZERO.toString();
      Object object0 = new Object();
      boolean boolean0 = complex3.equals(object0);
      int int0 = complex7.hashCode();
      Complex complex10 = complex4.NaN.subtract(complex5);
      boolean boolean1 = complex7.isNaN();
      Complex complex11 = complex5.cos();
      Complex complex12 = complex5.add(complex2);
      String string2 = complex7.toString();
      Complex complex13 = complex8.I.tanh();
      Complex complex14 = complex8.multiply(complex7);
      double double3 = complex8.abs();
      Complex complex15 = complex7.asin();
      boolean boolean2 = complex3.equals(complex5);
      Complex complex16 = complex14.ONE.negate();
      Object object1 = complex5.readResolve();
      Complex complex17 = complex14.asin();
      Complex complex18 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-1.0));
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-2455.04), (-1669.81799));
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.ZERO.divide(complex4);
      Complex complex6 = complex4.NaN.cosh();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex6.ONE.getArgument();
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex6.log();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-628.674039), (-628.674039));
      Complex complex1 = complex0.createComplex((-628.674039), (-628.674039));
      double double0 = complex0.NaN.abs();
      Complex complex2 = complex0.multiply(1.3245471311735498E-8);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.INF.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex0);
      List<Complex> list0 = complex2.nthRoot(2236);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.sin();
      Complex complex6 = complex4.I.cosh();
      Object object0 = complex6.ZERO.readResolve();
      Complex complex7 = complex6.negate();
      List<Complex> list0 = complex7.nthRoot(1);
      Complex complex8 = complex1.pow(complex4);
      ComplexField complexField0 = complex8.getField();
      int int0 = complex7.hashCode();
      Complex complex9 = complex3.add(complex4);
      Complex complex10 = complex5.sinh();
      Complex complex11 = complex9.multiply(complex5);
      Complex complex12 = complex9.add(complex0);
      double double0 = complex5.getImaginary();
      Complex complex13 = complex2.conjugate();
      Complex complex14 = complex13.INF.negate();
      Complex complex15 = complex1.asin();
      Complex complex16 = Complex.ZERO;
      boolean boolean1 = complex2.equals(complex16);
      Object object1 = complex9.readResolve();
      Complex complex17 = complex12.tan();
      Complex complex18 = Complex.INF;
      Complex complex19 = complex0.multiply(complex18);
      boolean boolean2 = complex11.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex0.multiply(4.503599627370496E15);
      Complex complex6 = complex2.multiply(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex0.INF.getField();
      double double0 = complex0.getArgument();
      double double1 = complex0.getImaginary();
      double double2 = complex2.abs();
      Object object0 = complex2.readResolve();
      Complex complex7 = complex3.add(complex0);
      double double3 = complex3.getImaginary();
      Complex complex8 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex1.ZERO.exp();
      Complex complex5 = complex1.INF.asin();
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex6.asin();
      boolean boolean0 = complex6.equals(complex5);
      Complex complex8 = complex0.asin();
      double double0 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getArgument();
      Complex complex1 = new Complex(1.5707963267948966, 1.5707963267948966);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.ONE.divide(complex2);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex5.I.tanh();
      Complex complex8 = complex5.NaN.subtract(complex1);
      Complex complex9 = complex5.NaN.log();
      int int0 = complex5.hashCode();
      Complex complex10 = complex2.negate();
      Complex complex11 = complex10.ZERO.conjugate();
      Complex complex12 = complex0.createComplex(1.5707963267948966, (-1642.3161));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.I.multiply((-543.49867713637));
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex4.acos();
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex3.add(complex7);
      Complex complex10 = complex6.exp();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      Complex complex11 = complex10.multiply((-0.2499999997677497));
      Complex complex12 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.I.negate();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ONE.cosh();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex2.ONE.sqrt1z();
      try { 
        complex2.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-1313.54086), 0.5);
      Object object0 = complex0.readResolve();
      Complex complex1 = new Complex(0.5, (-1313.54086));
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex0.INF.createComplex(0.1111111111111111, 0.1111111111111111);
      Complex complex8 = complex1.acos();
      Complex complex9 = complex8.I.log();
      List<Complex> list0 = complex9.ONE.nthRoot(2245);
      int int0 = complex8.hashCode();
      Complex complex10 = complex4.pow(complex0);
      ComplexField complexField0 = complex4.getField();
      Complex complex11 = complex6.multiply(complex1);
      Complex complex12 = complex6.add(complex1);
      Complex complex13 = complex10.conjugate();
      try { 
        complex10.nthRoot((-551));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -551
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.exp();
      String string0 = complex1.INF.toString();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.I.exp();
      boolean boolean0 = complex1.isInfinite();
      Complex complex4 = complex3.NaN.pow(complex1);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex4.NaN.atan();
      int int0 = complex6.NaN.hashCode();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex7 = complex2.tan();
      Complex complex8 = complex2.add(complex1);
      ComplexField complexField0 = complex7.ZERO.getField();
      Complex complex9 = complex3.sqrt1z();
      Complex complex10 = complex1.ONE.multiply(complex7);
      Complex complex11 = complex2.acos();
      Complex complex12 = complex1.negate();
      Complex complex13 = complex1.acos();
      Complex complex14 = complex12.NaN.multiply(complex2);
      boolean boolean1 = complex12.equals("");
      Complex complex15 = complex9.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex1.ZERO.tan();
      int int0 = complex2.ZERO.hashCode();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex0.ZERO.cosh();
      Complex complex6 = complex4.sqrt();
      ComplexField complexField0 = complex6.getField();
      Complex complex7 = complex2.INF.createComplex((-1.0), (-1.0));
      Complex complex8 = complex7.ONE.cosh();
      Complex complex9 = complex0.INF.divide(complex1);
      int int1 = complex1.I.hashCode();
      Complex complex10 = complex0.atan();
      String string0 = complex3.toString();
      String string1 = complex1.toString();
      Complex complex11 = complex2.log();
      Complex complex12 = complex7.subtract(complex1);
      Complex complex13 = complex7.tan();
      double double0 = complex1.getImaginary();
      Complex complex14 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex1.createComplex(130.842634726, 130.842634726);
      Complex complex5 = complex4.ZERO.createComplex(1203.7, 130.842634726);
      Complex complex6 = complex4.tan();
      Complex complex7 = complex6.INF.cosh();
      Complex complex8 = complex6.ONE.tanh();
      Complex complex9 = complex0.atan();
      Object object0 = complex1.readResolve();
      Complex complex10 = complex5.multiply(1203.7);
      double double0 = complex10.abs();
      int int0 = complex1.hashCode();
      boolean boolean0 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.add(complex0);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.equals(";3+>G85!t+9/Uk");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex0.multiply((-1331.43));
      Complex complex6 = complex5.sin();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex0.pow(complex1);
      double double0 = complex8.INF.abs();
      Complex complex9 = complex8.subtract(complex3);
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.INF.readResolve();
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex1.ZERO.acos();
      double double1 = complex3.I.abs();
      Complex complex4 = complex1.asin();
      int int0 = complex4.hashCode();
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.ONE.add(complex4);
      Complex complex7 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.tanh();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt();
      double double0 = complex0.getReal();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.cosh();
      double double1 = complex2.getReal();
      Complex complex3 = complex1.exp();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.divide(complex3);
      double double1 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.I.createComplex((-0.1666666567325592), (-593.497));
      Complex complex6 = complex4.cos();
      Complex complex7 = complex0.ZERO.multiply((-593.497));
      Complex complex8 = complex0.asin();
      Object object0 = complex1.readResolve();
      Complex complex9 = complex5.log();
      Complex complex10 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.pow(complex0);
      double double0 = complex0.getReal();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.cos();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(1268.62804285053, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.multiply(0.0);
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.I.subtract(complex0);
      ComplexField complexField0 = complex4.I.getField();
      Complex complex5 = complex0.NaN.subtract(complex1);
      Complex complex6 = complex5.NaN.multiply(complex4);
      ComplexField complexField1 = complex5.NaN.getField();
      Complex complex7 = complex0.INF.sinh();
      int int0 = complex0.hashCode();
      ComplexField complexField2 = complex0.getField();
      Complex complex8 = complex2.INF.createComplex(4.503599627370496E15, 0.0);
      Complex complex9 = complex0.tanh();
      int int1 = 69;
      List<Complex> list0 = complex9.nthRoot(69);
      Complex complex10 = complex9.INF.conjugate();
      try { 
        complex7.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-161.307), (-161.307));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);
      List<Complex> list0 = complex2.NaN.nthRoot(1022);
      Complex complex3 = complex0.cosh();
      double double0 = complex3.INF.abs();
      Complex complex4 = complex3.negate();
      boolean boolean0 = complex3.isInfinite();
      Complex complex5 = complex3.cos();
      int int0 = complex3.hashCode();
      Complex complex6 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.INF.toString();
      int int0 = complex0.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply((-4901.376603008));
      Complex complex2 = complex0.atan();
      double double0 = complex2.getImaginary();
      Complex complex3 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex0.negate();
      double double1 = complex5.getReal();
      Complex complex6 = complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.add(complex3);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex1.ONE.atan();
      Complex complex4 = complex0.createComplex((-2117.853949102831), (-2117.853949102831));
      Complex complex5 = complex4.sinh();
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-163.963047392), (-163.963047392));
      Complex complex1 = complex0.sinh();
      double double0 = complex1.getReal();
      double double1 = complex0.ONE.getArgument();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex1.isInfinite();
      Complex complex2 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.ONE.conjugate();
      String string0 = complex0.NaN.toString();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-88.03245141520696), (-88.03245141520696));
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-2186.543962), (-2186.543962));
      Complex complex1 = complex0.sin();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.I.toString();
      double double0 = complex0.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.sinh();
      Object object0 = complex4.readResolve();
      Object object1 = complex5.NaN.readResolve();
      List<Complex> list0 = complex0.nthRoot(713);
      double double0 = complex4.getArgument();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex6.createComplex(Double.NaN, 713);
      Complex complex8 = complex5.asin();
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex3.acos();
      Complex complex11 = complex6.sin();
      Complex complex12 = complex3.multiply(complex1);
      Complex complex13 = complex11.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(1072.363530090195);
      Complex complex2 = new Complex((-2491.524487), (-21.24626030492));
      Complex complex3 = complex0.I.pow(complex2);
      Complex complex4 = complex0.INF.acos();
      Complex complex5 = new Complex((-4.9E-324), 0.0);
      Complex complex6 = complex0.divide(complex5);
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex5.cos();
      Complex complex8 = complex7.log();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tan();
      double double0 = complex1.ZERO.getArgument();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.INF.tanh();
      int int0 = complex2.INF.hashCode();
      boolean boolean1 = complex0.isInfinite();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.asin();
      double double0 = complex1.getArgument();
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex4.pow(complex2);
      boolean boolean0 = complex1.isInfinite();
      double double1 = complex0.abs();
      Complex complex6 = complex2.add(complex1);
      Complex complex7 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(201.7, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-2943.0), (-2943.0));
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-2745.0), 1148.109647518);
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-3786.34979), (-3786.34979));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex0.sqrt1z();
      Object object0 = complex1.readResolve();
      Object object1 = complex1.ONE.readResolve();
      double double1 = complex0.INF.abs();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.ZERO.pow(complex2);
      Complex complex6 = complex1.multiply(Double.NaN);
      Complex complex7 = complex1.ZERO.sin();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex0.tanh();
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-829.51047065383), (-829.51047065383));
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.atan();
      int int0 = complex1.NaN.hashCode();
      double double0 = complex1.ONE.abs();
      double double1 = complex0.getImaginary();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex0.createComplex(2426.3, 0.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.2222222089767456, 0.0);
      Complex complex1 = complex0.ONE.createComplex(0.2222222089767456, 0.2222222089767456);
      Complex complex2 = complex0.ONE.createComplex(0.2222222089767456, 0.0);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.ONE.sin();
      int int0 = complex4.INF.hashCode();
      int int1 = complex4.ZERO.hashCode();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex3.INF.acos();
      Complex complex8 = complex3.ZERO.tan();
      Complex complex9 = complex2.ONE.subtract(complex0);
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getArgument();
      Complex complex10 = complex3.sin();
      String string0 = complex10.toString();
      double double1 = complex1.ZERO.abs();
      Complex complex11 = complex3.negate();
      boolean boolean0 = complex10.equals(complex0);
      Complex complex12 = complex2.tan();
      Complex complex13 = complex0.negate();
      Complex complex14 = complex3.divide(complex12);
      double double2 = complex1.getArgument();
      List<Complex> list0 = complex14.nthRoot(1736);
      Complex complex15 = complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cos();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex2.ZERO.add(complex3);
      Complex complex6 = complex5.ZERO.cosh();
      List<Complex> list0 = complex0.ZERO.nthRoot(1391);
      Complex complex7 = complex2.ONE.tan();
      Complex complex8 = complex1.createComplex(0.1538461446762085, 0.1538461446762085);
      Object object0 = complex2.readResolve();
      Complex complex9 = complex0.INF.asin();
      boolean boolean0 = complex3.equals(complex0);
      Complex complex10 = complex2.tanh();
      int int1 = complex0.hashCode();
      double double0 = complex1.getReal();
      double double1 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex0.multiply(40.19140625);
      Complex complex5 = complex1.ZERO.multiply(complex0);
      Complex complex6 = complex5.NaN.subtract(complex2);
      Complex complex7 = complex0.divide(complex1);
      double double0 = complex7.ZERO.abs();
      Complex complex8 = complex7.createComplex(0.0, 0.0);
      Complex complex9 = complex8.I.pow(complex4);
      Complex complex10 = complex4.INF.sinh();
      Complex complex11 = complex7.cos();
      Complex complex12 = complex11.tan();
      boolean boolean0 = complex1.isNaN();
      double double1 = complex1.getArgument();
      Complex complex13 = complex0.conjugate();
      Complex complex14 = complex8.createComplex(0.0, 40.19140625);
      Complex complex15 = complex14.ZERO.pow(complex9);
      boolean boolean1 = complex1.isNaN();
      Complex complex16 = complex2.cosh();
      String string0 = complex14.toString();
      Complex complex17 = complex12.sqrt1z();
      Complex complex18 = complex16.sinh();
      Complex complex19 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-0.2499999701976776), (-0.2499999701976776));
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      double double0 = complex1.ZERO.abs();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex0.INF.tan();
      double double1 = complex3.NaN.getArgument();
      Complex complex5 = complex3.NaN.multiply(0.0);
      List<Complex> list0 = complex3.I.nthRoot(7);
      double double2 = complex2.abs();
      boolean boolean0 = complex1.isNaN();
      Complex complex6 = complex1.asin();
      double double3 = complex2.INF.abs();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex1.ONE.multiply(complex4);
      Complex complex8 = complex6.I.multiply(2.479773539153719E-5);
      Complex complex9 = complex7.NaN.acos();
      Complex complex10 = complex0.NaN.sin();
      List<Complex> list1 = complex8.nthRoot(7);
      Complex complex11 = complex6.pow(complex2);
      Complex complex12 = complex11.conjugate();
      Complex complex13 = complex11.INF.divide(complex3);
      Complex complex14 = complex8.negate();
      Complex complex15 = complex0.divide(complex12);
      String string0 = complex15.NaN.toString();
      double double4 = complex11.getArgument();
      Complex complex16 = complex7.tan();
      boolean boolean1 = complex4.isInfinite();
      Complex complex17 = complex7.add(complex0);
      Complex complex18 = Complex.INF;
      boolean boolean2 = complex7.equals(complex18);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.NaN.asin();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex1.NaN.negate();
      List<Complex> list0 = complex0.ONE.nthRoot(101);
      Complex complex3 = complex1.NaN.negate();
      Object object0 = complex3.I.readResolve();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex4.ZERO.asin();
      double double1 = complex1.abs();
      Complex complex6 = complex3.pow(complex4);
      Complex complex7 = complex6.acos();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex3.pow(complex4);
      Complex complex10 = complex9.ZERO.acos();
      Complex complex11 = complex3.add(complex9);
      String string0 = complex1.toString();
      List<Complex> list1 = complex2.nthRoot(672);
      Complex complex12 = complex5.sqrt();
      Complex complex13 = complex5.tan();
      Complex complex14 = complex5.createComplex((-54.5718546), 672);
      Object object1 = complex14.readResolve();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex2.ZERO.exp();
      Complex complex6 = complex3.ONE.acos();
      Complex complex7 = complex0.add(complex2);
      Complex complex8 = complex7.divide(complex6);
      Object object0 = complex6.readResolve();
      Complex complex9 = complex1.I.sqrt1z();
      double double0 = complex7.getArgument();
      Complex complex10 = complex1.sin();
      Complex complex11 = complex10.atan();
      Complex complex12 = complex1.asin();
      Complex complex13 = complex2.NaN.multiply(complex10);
      boolean boolean0 = complex2.isInfinite();
      Complex complex14 = complex4.multiply(complex11);
      Complex complex15 = complex14.multiply(Double.NaN);
      Complex complex16 = complex3.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sinh();
      String string0 = complex0.INF.toString();
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.I.tan();
      Complex complex4 = complex2.ZERO.asin();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex2.ONE.add(complex7);
      Complex complex9 = complex8.NaN.tanh();
      Complex complex10 = complex9.INF.cos();
      Complex complex11 = complex7.I.cosh();
      Complex complex12 = complex2.sinh();
      Complex complex13 = complex12.NaN.cosh();
      try { 
        complex12.ONE.nthRoot((-3));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
