/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:11:51 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex1.sqrt1z();
      try { 
        complex0.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      double double0 = complex0.INF.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.I.sqrt1z();
      int int0 = complex3.hashCode();
      Complex complex5 = complex3.INF.atan();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex0.NaN.divide(complex1);
      Complex complex8 = complex7.negate();
      Complex complex9 = complex7.INF.sinh();
      int int1 = complex4.hashCode();
      double double1 = complex0.getArgument();
      Complex complex10 = complex1.INF.add(complex0);
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex0.asin();
      Complex complex13 = complex12.ZERO.exp();
      Complex complex14 = complex2.ZERO.asin();
      boolean boolean0 = complex1.isInfinite();
      Complex complex15 = complex11.sqrt1z();
      Complex complex16 = complex0.sin();
      double double2 = complex11.abs();
      double double3 = complex2.getImaginary();
      List<Complex> list0 = complex3.INF.nthRoot(1);
      Complex complex17 = complex11.sinh();
      Complex complex18 = complex0.sqrt();
      Complex complex19 = complex18.ZERO.log();
      double double4 = complex4.getArgument();
      try { 
        complex14.nthRoot((-1103));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,103
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.I.createComplex(2318.395053, 0.0);
      Complex complex4 = complex1.ZERO.createComplex(3440.0562039, 807.827980703);
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.divide(complex3);
      Complex complex7 = complex4.ZERO.atan();
      double double0 = complex7.INF.abs();
      Object object0 = complex7.I.readResolve();
      double double1 = complex0.abs();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex8.asin();
      Complex complex10 = complex7.conjugate();
      Complex complex11 = complex7.ONE.log();
      Complex complex12 = complex11.NaN.log();
      Complex complex13 = complex12.exp();
      double double2 = complex1.ONE.abs();
      Complex complex14 = complex8.divide(complex9);
      double double3 = complex7.getArgument();
      Complex complex15 = complex9.ONE.createComplex(539.604610653911, 0.0);
      Complex complex16 = complex15.ZERO.conjugate();
      Complex complex17 = complex1.asin();
      String string0 = complex3.toString();
      boolean boolean0 = complex0.equals(complex9);
      boolean boolean1 = complex10.isInfinite();
      Complex complex18 = complex5.pow(complex17);
      double double4 = complex10.getReal();
      Complex complex19 = complex14.atan();
      Complex complex20 = complex18.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex1.INF.cosh();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex4.ZERO.tanh();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex7.acos();
      ComplexField complexField0 = complex2.getField();
      Complex complex9 = complex6.createComplex(0.0, 0.0);
      int int0 = complex4.INF.hashCode();
      ComplexField complexField1 = complex7.getField();
      Complex complex10 = complex7.acos();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.ONE.acos();
      Complex complex13 = complex10.ONE.pow(complex11);
      Complex complex14 = complex2.subtract(complex1);
      Complex complex15 = complex2.log();
      Complex complex16 = complex15.NaN.pow(complex5);
      Object object1 = complex8.readResolve();
      Complex complex17 = complex6.tanh();
      Complex complex18 = complex17.INF.atan();
      String string0 = complex10.toString();
      Complex complex19 = complex5.sinh();
      Complex complex20 = complex19.ONE.asin();
      Complex complex21 = complex8.acos();
      Complex complex22 = complex7.asin();
      Complex complex23 = complex14.exp();
      Object object2 = complex4.readResolve();
      Complex complex24 = complex17.exp();
      Complex complex25 = complex14.cosh();
      Complex complex26 = complex3.subtract(complex23);
      double double0 = complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex1.ONE.subtract(complex2);
      Complex complex4 = complex2.conjugate();
      double double1 = complex2.INF.abs();
      Complex complex5 = complex4.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex6 = complex2.ONE.sin();
      double double2 = complex0.getReal();
      Complex complex7 = complex0.tan();
      double double3 = complex7.NaN.getArgument();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex0.ONE.cosh();
      int int0 = complex6.hashCode();
      int int1 = complex5.hashCode();
      double double4 = complex6.getArgument();
      double double5 = complex2.getReal();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      String string0 = complex1.ONE.toString();
      Complex complex2 = complex0.ZERO.multiply(370.0);
      Complex complex3 = complex0.multiply(1791.589975770572);
      boolean boolean0 = complex3.isInfinite();
      int int0 = complex2.hashCode();
      double double0 = complex0.ONE.getArgument();
      boolean boolean1 = complex3.isInfinite();
      Complex complex4 = complex0.I.divide(complex1);
      boolean boolean2 = complex3.equals(complex0);
      double double1 = complex3.getArgument();
      Complex complex5 = complex0.createComplex(0.7853981633974483, 0.7853981633974483);
      double double2 = complex2.getArgument();
      Complex complex6 = complex5.INF.tan();
      boolean boolean3 = complex1.isNaN();
      double double3 = complex5.getArgument();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex3.subtract(complex1);
      Complex complex9 = complex8.subtract(complex3);
      Complex complex10 = complex0.log();
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex6.add(complex11);
      Complex complex13 = complex6.asin();
      Complex complex14 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex0.NaN.asin();
      double double0 = complex2.NaN.abs();
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex2.ONE.multiply(complex3);
      Complex complex9 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.INF.multiply(complex5);
      Complex complex11 = complex7.acos();
      Complex complex12 = complex2.exp();
      Complex complex13 = complex0.subtract(complex12);
      int int0 = complex9.hashCode();
      Complex complex14 = complex11.cos();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.INF.sin();
      double double0 = complex0.abs();
      Complex complex2 = complex1.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0, 735.362003);
      Complex complex2 = complex0.NaN.multiply(complex1);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.atan();
      double double0 = complex0.getArgument();
      Complex complex4 = complex3.NaN.subtract(complex1);
      Complex complex5 = complex0.multiply(735.362003);
      Complex complex6 = complex5.ONE.subtract(complex4);
      ComplexField complexField0 = complex6.I.getField();
      Complex complex7 = complex1.atan();
      double double1 = complex2.getReal();
      Complex complex8 = complex5.multiply(complex3);
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, 545.3751177);
      Complex complex10 = complex8.NaN.multiply(complex9);
      String string0 = complex2.toString();
      Complex complex11 = complex0.negate();
      Object object1 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object1);
      Complex complex12 = complex0.atan();
      ComplexField complexField1 = complex5.getField();
      Complex complex13 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.ONE.multiply(1611.3648);
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex0.I.exp();
      Complex complex5 = complex0.cosh();
      String string0 = complex4.toString();
      Complex complex6 = complex5.cosh();
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex7 = complex5.NaN.add(complex0);
      double double0 = complex1.getArgument();
      double double1 = complex6.getImaginary();
      Complex complex8 = complex5.subtract(complex6);
      Complex complex9 = complex8.I.divide(complex2);
      Complex complex10 = complex8.pow(complex6);
      Complex complex11 = complex1.log();
      Complex complex12 = complex4.cos();
      Complex complex13 = complex12.INF.cosh();
      Complex complex14 = complex3.subtract(complex6);
      Complex complex15 = complex4.negate();
      Complex complex16 = complex12.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1445.6215833663805), (-1445.6215833663805));
      Complex complex1 = complex0.ZERO.createComplex((-4102.976779031458), (-1445.6215833663805));
      double double0 = complex1.I.abs();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex1.I.tan();
      List<Complex> list0 = complex0.NaN.nthRoot(3385);
      Complex complex4 = complex2.acos();
      int int0 = complex4.ZERO.hashCode();
      double double1 = complex3.ONE.abs();
      double double2 = complex0.getArgument();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.log();
      double double3 = complex7.getArgument();
      double double4 = complex3.getReal();
      Complex complex8 = complex5.conjugate();
      Complex complex9 = complex8.INF.conjugate();
      Complex complex10 = complex6.pow(complex0);
      Complex complex11 = complex10.INF.multiply(1.176342548272881E-8);
      Complex complex12 = complex6.sqrt1z();
      Complex complex13 = complex8.asin();
      Complex complex14 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex1.NaN.sqrt1z();
      boolean boolean0 = complex1.equals(complex2);
      Complex complex6 = complex1.I.sinh();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex3.tan();
      Complex complex9 = complex3.divide(complex2);
      double double0 = complex8.ZERO.getArgument();
      Complex complex10 = complex2.log();
      String string0 = complex2.toString();
      Complex complex11 = complex3.multiply((-2217.018004898248));
      Complex complex12 = complex6.sinh();
      Complex complex13 = complex6.acos();
      Complex complex14 = complex0.NaN.cosh();
      Complex complex15 = complex13.ZERO.asin();
      Complex complex16 = complex0.subtract(complex1);
      Complex complex17 = complex16.ZERO.tan();
      double double1 = complex3.getArgument();
      Complex complex18 = complex11.conjugate();
      Complex complex19 = complex17.tan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.ONE.multiply(complex1);
      Complex complex4 = complex3.add(complex0);
      int int0 = complex0.ZERO.hashCode();
      Complex complex5 = complex0.negate();
      double double0 = complex5.getImaginary();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex6.NaN.conjugate();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex8.asin();
      double double1 = complex1.getArgument();
      ComplexField complexField0 = complex3.getField();
      Complex complex10 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.acos();
      int int0 = complex0.ZERO.hashCode();
      try { 
        complex0.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      try { 
        complex0.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getArgument();
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1499.5300005162, 0.0);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.NaN.negate();
      Object object0 = complex2.readResolve();
      double double0 = complex0.INF.getArgument();
      Complex complex3 = complex1.I.negate();
      double double1 = complex0.getReal();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex1.I.exp();
      Complex complex6 = complex5.INF.subtract(complex4);
      Complex complex7 = complex1.negate();
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex7.ZERO.sin();
      Complex complex10 = complex9.NaN.tan();
      boolean boolean0 = complex7.isNaN();
      Complex complex11 = complex2.tanh();
      Complex complex12 = complex11.subtract(complex1);
      boolean boolean1 = complex11.isInfinite();
      double double2 = complex2.abs();
      Complex complex13 = complex10.INF.subtract(complex9);
      boolean boolean2 = complex5.isInfinite();
      Complex complex14 = complex5.negate();
      Complex complex15 = complex11.acos();
      double double3 = complex7.getArgument();
      Complex complex16 = complex14.add(complex4);
      Complex complex17 = complex8.multiply(complex10);
      Complex complex18 = complex11.createComplex(1499.5300005162, (-531.1603464808));
      Complex complex19 = complex14.exp();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.I.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex2.NaN.add(complex0);
      Complex complex6 = complex2.ZERO.exp();
      Complex complex7 = complex6.INF.sqrt1z();
      Complex complex8 = complex0.subtract(complex1);
      Complex complex9 = complex8.cos();
      Complex complex10 = complex8.ONE.cos();
      boolean boolean0 = complex8.isNaN();
      Complex complex11 = complex1.subtract(complex8);
      int int0 = complex1.hashCode();
      Complex complex12 = complex10.ZERO.divide(complex9);
      double double1 = complex10.getArgument();
      Complex complex13 = complex10.sqrt1z();
      Complex complex14 = complex8.tanh();
      Complex complex15 = complex14.ZERO.log();
      Complex complex16 = complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = new Complex((-1.0), (-1.0));
      int int0 = complex3.hashCode();
      Complex complex4 = complex3.INF.cosh();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex5.ZERO.conjugate();
      int int1 = complex5.ZERO.hashCode();
      Complex complex7 = complex0.subtract(complex3);
      String string0 = complex1.toString();
      Complex complex8 = complex0.tanh();
      List<Complex> list0 = complex7.nthRoot(646);
      Complex complex9 = complex4.subtract(complex8);
      Complex complex10 = complex3.cosh();
      boolean boolean0 = complex0.isNaN();
      Complex complex11 = complex10.conjugate();
      // Undeclared exception!
      complex10.ONE.nthRoot(5484);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.ONE.acos();
      int int0 = complex1.ONE.hashCode();
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.INF.add(complex0);
      Complex complex5 = complex4.ONE.acos();
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex6 = complex3.sqrt1z();
      String string0 = complex3.toString();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex2.ZERO.sqrt();
      Complex complex9 = complex7.ONE.sin();
      boolean boolean0 = complex0.isInfinite();
      double double1 = complex4.getArgument();
      String string1 = complex7.toString();
      Complex complex10 = complex2.exp();
      Complex complex11 = complex4.tan();
      boolean boolean1 = complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1551.0));
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.add(complex3);
      double double0 = complex3.getImaginary();
      double double1 = complex3.getImaginary();
      Complex complex5 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.ZERO.sin();
      Complex complex4 = complex3.conjugate();
      String string0 = complex4.ZERO.toString();
      double double0 = complex2.I.abs();
      Complex complex5 = complex2.I.multiply((-229.282));
      double double1 = complex5.abs();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex5.NaN.tan();
      boolean boolean0 = complex0.isNaN();
      String string1 = complex2.toString();
      double double2 = complex2.abs();
      boolean boolean1 = complex6.equals(complex5);
      Complex complex8 = complex1.asin();
      double double3 = complex4.getReal();
      Complex complex9 = complex4.negate();
      boolean boolean2 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      ComplexField complexField0 = complex1.INF.getField();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.divide(complex7);
      Complex complex9 = complex8.ZERO.sqrt();
      int int0 = complex6.hashCode();
      Complex complex10 = complex6.divide(complex2);
      String string0 = complex2.toString();
      Complex complex11 = complex5.multiply(4500.98398);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex1.ZERO.sin();
      int int0 = complex2.hashCode();
      int int1 = complex2.hashCode();
      Complex complex5 = complex1.ZERO.atan();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex1.exp();
      boolean boolean0 = complex1.isNaN();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex8.NaN.sinh();
      Complex complex10 = complex5.multiply((-2278.793059115631));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.I.exp();
      double double0 = complex0.getArgument();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex4 = complex2.negate();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.multiply(complex1);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex1.createComplex(7.549789948768648E-8, (-1156.3529));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.ONE.tan();
      ComplexField complexField0 = complex5.getField();
      Complex complex7 = complex2.NaN.atan();
      Complex complex8 = complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = complex1.tanh();
      double double0 = complex8.abs();
      Complex complex10 = complex5.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex0.ZERO.tanh();
      Complex complex5 = complex0.multiply((-1135.0));
      List<Complex> list0 = complex0.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-2026.55926894), (-2026.55926894));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.ONE.cos();
      String string0 = complex4.ONE.toString();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex5.ONE.pow(complex0);
      Complex complex7 = complex3.sin();
      double double0 = complex3.getImaginary();
      double double1 = complex2.getImaginary();
      Complex complex8 = complex3.ONE.conjugate();
      double double2 = complex1.getReal();
      Complex complex9 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(813.28, 813.28);
      try { 
        complex0.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.createComplex((-2300.70556349), 3.9736429850260626E-8);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex0.sqrt();
      double double0 = complex1.getArgument();
      int int0 = complex3.hashCode();
      Complex complex7 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.createComplex((-1599.78811496), 1814.810844803882);
      Complex complex3 = complex2.I.cos();
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex1.ONE.cos();
      Complex complex5 = complex0.log();
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex1.conjugate();
      double double0 = complex5.abs();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.tan();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.exp();
      int int0 = complex0.hashCode();
      double double0 = complex0.ZERO.getArgument();
      double double1 = complex1.INF.getArgument();
      int int1 = complex1.INF.hashCode();
      double double2 = complex0.getImaginary();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-0.1666666567325592));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      boolean boolean1 = complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(1385.53594, 539.714070658);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.multiply(1385.53594);
      Complex complex3 = complex0.INF.exp();
      Complex complex4 = complex2.I.acos();
      Complex complex5 = complex2.sinh();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex5.ONE.subtract(complex6);
      Complex complex8 = complex5.NaN.conjugate();
      Complex complex9 = complex0.ONE.subtract(complex1);
      Complex complex10 = complex2.multiply(539.714070658);
      boolean boolean0 = complex0.isInfinite();
      Complex complex11 = complex2.INF.acos();
      Complex complex12 = complex3.INF.asin();
      Complex complex13 = complex2.cosh();
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex3.getField();
      double double0 = complex9.getArgument();
      Complex complex14 = complex4.sqrt1z();
      Complex complex15 = complex6.divide(complex7);
      Complex complex16 = complex9.multiply(complex5);
      boolean boolean1 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex2 = complex0.createComplex((-293.0), (-293.0));
      Complex complex3 = complex0.asin();
      double double0 = complex1.ZERO.getArgument();
      double double1 = complex3.ZERO.abs();
      Object object0 = complex3.ONE.readResolve();
      int int0 = complex3.hashCode();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex4.INF.createComplex((-293.0), (-3172.123620284824));
      Complex complex6 = complex5.ONE.multiply(complex2);
      Complex complex7 = complex6.ZERO.sqrt();
      Complex complex8 = complex5.ZERO.multiply(complex3);
      Complex complex9 = complex0.cos();
      int int1 = complex9.NaN.hashCode();
      Complex complex10 = complex1.divide(complex2);
      Complex complex11 = complex2.cosh();
      String string0 = complex1.toString();
      Complex complex12 = complex1.divide(complex2);
      Complex complex13 = complex12.INF.createComplex(Double.NaN, Double.NaN);
      int int2 = complex13.ONE.hashCode();
      Complex complex14 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.acos();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.asin();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.tanh();
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.I.createComplex(0.0, 0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.NaN.multiply(complex0);
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex1.I.subtract(complex2);
      Complex complex6 = complex5.sin();
      Complex complex7 = complex2.ZERO.log();
      Complex complex8 = complex0.multiply(complex1);
      Complex complex9 = complex8.pow(complex5);
      double double0 = complex7.getReal();
      String string0 = complex1.toString();
      Complex complex10 = complex8.multiply(0.0);
      Complex complex11 = complex5.atan();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      try { 
        complex0.nthRoot((-2517));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,517
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.4199743416140259, 0.6299605249474366);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2084.848270682815), 1.0);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex0.sqrt();
      try { 
        complex0.nthRoot((-1684));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,684
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.pow(complex0);
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex4 = complex0.ONE.multiply(complex1);
      ComplexField complexField1 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.subtract(complex1);
      String string0 = complex0.INF.toString();
      Complex complex3 = complex0.conjugate();
      int int0 = complex3.INF.hashCode();
      boolean boolean0 = complex3.isInfinite();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex2.multiply(3.9736429850260626E-8);
      Complex complex7 = complex4.ONE.multiply(complex2);
      Complex complex8 = complex7.NaN.conjugate();
      Complex complex9 = complex6.INF.acos();
      Complex complex10 = complex5.multiply(complex1);
      Complex complex11 = complex6.tan();
      Complex complex12 = complex5.sin();
      double double0 = complex0.getArgument();
      Complex complex13 = complex1.tanh();
      double double1 = complex6.abs();
      Complex complex14 = complex4.negate();
      Complex complex15 = complex10.exp();
      Complex complex16 = complex1.ONE.createComplex(3.9736429850260626E-8, 3.9736429850260626E-8);
      Complex complex17 = complex9.createComplex(1703.98918, 3.9736429850260626E-8);
      Complex complex18 = complex3.add(complex13);
      Complex complex19 = complex12.sqrt1z();
      Complex complex20 = complex17.asin();
      double double2 = complex3.getArgument();
      double double3 = complex20.getReal();
      double double4 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-2664.2264629899), (-2664.2264629899));
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.exp();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(864.448038, 1.073741824E9);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.ONE.conjugate();
      List<Complex> list0 = complex0.nthRoot(288);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.multiply(864.448038);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(1.01, (-1.0));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex1.NaN.cosh();
      Complex complex4 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-3044.0571582048), (-3044.0571582048));
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.I.tan();
      Complex complex3 = complex1.ZERO.subtract(complex2);
      double double0 = complex0.NaN.getArgument();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex1.add(complex4);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.I.log();
      Complex complex5 = complex0.tan();
      ComplexField complexField0 = complex5.ONE.getField();
      double double0 = complex2.getImaginary();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.INF.cos();
      Complex complex8 = complex6.ZERO.sqrt1z();
      Complex complex9 = complex4.subtract(complex6);
      Complex complex10 = complex9.ZERO.sqrt1z();
      try { 
        complex7.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.ONE.sin();
      Complex complex5 = complex4.I.tanh();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex2.equals(complex0);
      double double0 = complex2.getImaginary();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.sinh();
      int int0 = complex7.hashCode();
      Complex complex8 = complex7.I.sin();
      double double1 = complex6.NaN.getArgument();
      double double2 = complex6.getArgument();
      Complex complex9 = complex6.subtract(complex0);
      Complex complex10 = complex9.multiply(Double.NaN);
      double double3 = complex0.getImaginary();
      boolean boolean2 = complex7.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(280.55, 280.55);
      List<Complex> list0 = complex0.nthRoot(2081);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(1226);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.tanh();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.sqrt();
      Object object0 = complex0.ONE.readResolve();
      Object object1 = complex1.INF.readResolve();
      Complex complex3 = complex1.NaN.sinh();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.nthRoot((-902));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -902
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.I.sin();
      double double0 = complex1.ONE.abs();
      double double1 = complex0.abs();
      Object object0 = complex0.readResolve();
      String string0 = complex2.toString();
      Complex complex3 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex1.INF.cos();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex1.ZERO.multiply(1006.0309654924315);
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex8 = complex2.INF.log();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex2.atan();
      String string0 = complex10.toString();
      String string1 = complex5.toString();
      Complex complex11 = complex7.tan();
      Complex complex12 = complex8.add(complex1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex1.ONE.log();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.I.pow(complex3);
      Complex complex6 = complex4.ZERO.sin();
      Complex complex7 = complex0.ZERO.cos();
      double double0 = complex0.getImaginary();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex8.NaN.asin();
      Complex complex10 = complex8.INF.negate();
      Complex complex11 = complex7.cosh();
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex10.divide(complex12);
      Complex complex14 = complex11.NaN.tan();
      Complex complex15 = complex0.asin();
      Complex complex16 = complex4.I.acos();
      Complex complex17 = complex10.conjugate();
      Complex complex18 = complex15.sinh();
      ComplexField complexField0 = complex18.I.getField();
      Complex complex19 = complex2.divide(complex3);
      boolean boolean0 = complex11.isNaN();
      Complex complex20 = complex6.exp();
      Complex complex21 = complex11.subtract(complex18);
      Complex complex22 = complex2.add(complex15);
      Complex complex23 = complex14.cos();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.asin();
      String string0 = complex1.INF.toString();
      Complex complex3 = complex1.I.add(complex0);
      double double0 = complex0.I.abs();
      double double1 = complex1.getArgument();
      Complex complex4 = complex0.conjugate();
      double double2 = complex4.NaN.getArgument();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex0.sinh();
      double double3 = complex2.getArgument();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex4.log();
      Complex complex9 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(1744.3079757058, 1744.3079757058);
      int int0 = complex0.NaN.hashCode();
      double double0 = complex0.abs();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex0.NaN.pow(complex1);
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex0.createComplex(1816.6988050720945, 1816.6988050720945);
      Complex complex8 = complex7.ONE.cosh();
      Complex complex9 = complex0.ZERO.tanh();
      Complex complex10 = complex8.tan();
      Complex complex11 = complex8.I.sqrt();
      Complex complex12 = complex0.negate();
      Complex complex13 = complex12.ONE.subtract(complex10);
      Complex complex14 = complex11.ZERO.atan();
      Complex complex15 = complex0.negate();
      int int1 = complex7.hashCode();
      Complex complex16 = complex15.INF.atan();
      ComplexField complexField0 = complex0.INF.getField();
      double double1 = complex7.abs();
      Complex complex17 = complex11.divide(complex15);
      double double2 = complex8.getArgument();
      Complex complex18 = complex11.subtract(complex12);
      Complex complex19 = complex18.I.createComplex(1816.6988050720945, (-988.96917646));
      Complex complex20 = complex18.NaN.tan();
      Complex complex21 = complex18.negate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex22 = complex8.conjugate();
      Complex complex23 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.ONE.toString();
      List<Complex> list0 = complex0.ZERO.nthRoot(753);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = (Complex)complex1.I.readResolve();
      Complex complex4 = complex0.ONE.acos();
      Complex complex5 = complex2.I.sinh();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.ZERO.acos();
      Complex complex8 = complex7.I.divide(complex2);
      Complex complex9 = complex1.ZERO.add(complex6);
      Complex complex10 = complex9.ONE.divide(complex4);
      Complex complex11 = complex10.NaN.createComplex(753, 0.0);
      boolean boolean0 = complex0.equals("SI(=PI}Le2e)$AP");
      Complex complex12 = complex1.add(complex2);
      Complex complex13 = complex2.divide(complex12);
      Complex complex14 = complex5.sinh();
      Complex complex15 = complex0.conjugate();
      Complex complex16 = complex15.ONE.acos();
      Complex complex17 = complex4.I.add(complex16);
      Complex complex18 = complex1.subtract(complex5);
      Complex complex19 = complex12.atan();
      Complex complex20 = complex4.add(complex19);
      Complex complex21 = complex18.atan();
      Complex complex22 = complex15.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.5);
      Complex complex1 = new Complex(0.5, 0.5);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.ONE.tan();
      Complex complex4 = complex3.ONE.pow(complex0);
      Complex complex5 = complex3.ONE.log();
      Complex complex6 = complex3.ONE.exp();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.toString();
      boolean boolean0 = complex0.isInfinite();
      String string1 = complex0.toString();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.multiply((-567.0));
      String string2 = complex1.toString();
      Complex complex3 = complex2.NaN.cosh();
      double double0 = complex2.I.abs();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex2.conjugate();
      double double1 = complex5.getImaginary();
      Complex complex7 = complex4.multiply((-1.0));
      Complex complex8 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      boolean boolean0 = complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex2.INF.multiply(complex1);
      Complex complex4 = complex3.NaN.divide(complex0);
      Complex complex5 = complex3.ONE.tan();
      List<Complex> list0 = complex0.nthRoot(7202);
      Object object0 = complex3.INF.readResolve();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex1.getReal();
      List<Complex> list1 = complex1.nthRoot(1);
      double double1 = complex3.getReal();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.ZERO.add(complex1);
      Complex complex8 = complex0.add(complex4);
      Complex complex9 = complex2.subtract(complex1);
  }
}
