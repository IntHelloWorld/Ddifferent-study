/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:11:56 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      double double0 = complex1.INF.getArgument();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.NaN.multiply(complex1);
      int int0 = complex0.hashCode();
      double double1 = complex1.getArgument();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex3.ONE.multiply(complex1);
      Complex complex6 = complex4.NaN.conjugate();
      Object object0 = complex6.INF.readResolve();
      Complex complex7 = complex5.ZERO.asin();
      Complex complex8 = complex6.I.tan();
      Complex complex9 = complex4.I.tanh();
      double double2 = complex3.getImaginary();
      Object object1 = complex4.readResolve();
      Complex complex10 = complex5.cosh();
      Complex complex11 = complex10.I.tan();
      Complex complex12 = complex1.sinh();
      Complex complex13 = complex8.sinh();
      ComplexField complexField0 = complex3.getField();
      String string0 = complex4.toString();
      ComplexField complexField1 = complex7.getField();
      Complex complex14 = complex9.cos();
      Complex complex15 = complex8.negate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = new Complex(2234.3, 2234.3);
      Complex complex5 = complex2.ZERO.add(complex4);
      Complex complex6 = complex5.cosh();
      Object object0 = complex2.NaN.readResolve();
      Complex complex7 = complex0.I.add(complex2);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex7.ZERO.pow(complex8);
      Complex complex10 = complex9.createComplex(2234.3, 2234.3);
      Complex complex11 = complex8.ONE.sinh();
      Complex complex12 = complex7.INF.sinh();
      Complex complex13 = complex0.asin();
      Complex complex14 = complex13.tan();
      String string1 = complex14.ONE.toString();
      Complex complex15 = complex0.subtract(complex13);
      int int0 = complex13.hashCode();
      Complex complex16 = complex0.cosh();
      Complex complex17 = complex16.conjugate();
      Complex complex18 = complex1.divide(complex12);
      Complex complex19 = complex8.cosh();
      try { 
        complex7.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.NaN.createComplex((-2756.608883587387), (-2756.608883587387));
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex3.log();
      Complex complex7 = complex6.INF.sin();
      int int0 = complex4.hashCode();
      Complex complex8 = complex0.ONE.conjugate();
      Complex complex9 = complex2.exp();
      ComplexField complexField0 = complex0.getField();
      Complex complex10 = complex0.NaN.sqrt1z();
      ComplexField complexField1 = complex7.getField();
      Complex complex11 = new Complex((-1726.97507), (-1726.97507));
      boolean boolean0 = complex6.equals(complex11);
      Complex complex12 = complex6.exp();
      Complex complex13 = complex2.cos();
      Complex complex14 = complex8.pow(complex3);
      Object object0 = complex2.readResolve();
      Complex complex15 = complex10.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1.1430250008909141E-8);
      Complex complex1 = complex0.ONE.createComplex(1.1430250008909141E-8, 1.1430250008909141E-8);
      double double0 = complex1.NaN.getArgument();
      int int0 = Integer.MAX_VALUE;
      Complex complex2 = complex1.conjugate();
      // Undeclared exception!
      complex0.nthRoot(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 0.0);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.NaN.subtract(complex0);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.ONE.cosh();
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex0.divide(complex6);
      Complex complex8 = complex6.INF.sinh();
      Complex complex9 = complex7.log();
      int int0 = complex0.NaN.hashCode();
      Complex complex10 = complex7.multiply((-20.0));
      Complex complex11 = complex0.ONE.createComplex(0.0, (-860.5457874));
      Complex complex12 = complex10.exp();
      double double0 = complex4.abs();
      Complex complex13 = complex6.pow(complex10);
      Complex complex14 = complex13.negate();
      List<Complex> list0 = complex13.INF.nthRoot(17);
      Complex complex15 = complex9.multiply(complex5);
      ComplexField complexField1 = complex4.getField();
      Complex complex16 = complex0.INF.log();
      boolean boolean0 = complex1.equals("");
      Complex complex17 = complex9.acos();
      Complex complex18 = complex13.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-3181.4), (-429.421790304026));
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1099.03289491);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex1.ZERO.add(complex2);
      double double0 = complex2.I.abs();
      Complex complex4 = complex0.I.sqrt1z();
      Complex complex5 = complex4.I.divide(complex2);
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.INF.sin();
      Complex complex9 = complex6.NaN.sqrt1z();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex10.ZERO.tan();
      Complex complex12 = complex6.I.sqrt1z();
      double double1 = complex6.abs();
      Complex complex13 = complex1.I.divide(complex2);
      Complex complex14 = complex6.pow(complex2);
      Complex complex15 = complex14.INF.log();
      Complex complex16 = complex15.INF.subtract(complex13);
      Complex complex17 = complex1.log();
      Complex complex18 = complex2.multiply(Double.POSITIVE_INFINITY);
      double double2 = complex18.getReal();
      Object object0 = complex13.readResolve();
      Complex complex19 = complex10.sin();
      Complex complex20 = complex2.tanh();
      Complex complex21 = complex20.NaN.sqrt1z();
      Complex complex22 = complex4.createComplex(3530.12, (-389.892189804));
      double double3 = complex18.getImaginary();
      Complex complex23 = complex11.add(complex2);
      Complex complex24 = complex15.cosh();
      Complex complex25 = complex4.add(complex9);
      double double4 = complex21.abs();
      Complex complex26 = complex9.asin();
      List<Complex> list0 = complex26.nthRoot(1038);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.ONE.multiply((-3988.2744713519));
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex2.ZERO.conjugate();
      Complex complex5 = complex2.INF.divide(complex0);
      Complex complex6 = complex2.INF.exp();
      try { 
        complex1.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-377.94156187), 2.0);
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(0.0, Double.NaN);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      Complex complex4 = complex1.I.acos();
      String string0 = complex4.NaN.toString();
      Complex complex5 = complex3.createComplex((-377.94156187), 2.0);
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex3.ZERO.cos();
      Object object0 = complex3.I.readResolve();
      Complex complex8 = complex0.divide(complex2);
      Complex complex9 = complex8.tanh();
      String string1 = complex2.toString();
      Complex complex10 = complex5.ZERO.createComplex(2.0, (-377.94156187));
      Complex complex11 = complex9.createComplex((-377.94156187), 3024.3);
      Complex complex12 = complex0.sinh();
      Complex complex13 = complex8.tanh();
      Object object1 = complex11.readResolve();
      int int0 = complex0.hashCode();
      Complex complex14 = complex9.negate();
      Complex complex15 = complex14.NaN.add(complex2);
      Complex complex16 = complex15.NaN.asin();
      Complex complex17 = complex14.createComplex(1179.9337796, 1347.78695);
      boolean boolean0 = complex7.isInfinite();
      Complex complex18 = complex5.pow(complex2);
      boolean boolean1 = complex11.isNaN();
      String string2 = complex4.toString();
      boolean boolean2 = complex18.isNaN();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.INF.exp();
      double double0 = complex2.INF.abs();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex2.I.pow(complex4);
      Complex complex6 = complex4.ZERO.tan();
      Object object0 = complex6.I.readResolve();
      double double1 = complex2.abs();
      Complex complex7 = complex0.atan();
      double double2 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      String string0 = complex0.NaN.toString();
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.ONE.sin();
      double double0 = complex2.abs();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex2.ONE.divide(complex0);
      Complex complex6 = complex5.NaN.multiply(Double.NaN);
      Complex complex7 = complex5.I.divide(complex2);
      Complex complex8 = complex6.ONE.tanh();
      Complex complex9 = complex6.ZERO.sinh();
      Complex complex10 = complex0.I.sqrt1z();
      Complex complex11 = complex10.acos();
      Complex complex12 = complex10.INF.asin();
      Complex complex13 = complex12.INF.negate();
      Complex complex14 = complex12.NaN.multiply(complex5);
      Complex complex15 = complex12.sin();
      Complex complex16 = complex2.cos();
      Complex complex17 = complex4.NaN.subtract(complex1);
      Complex complex18 = complex17.I.sqrt1z();
      double double1 = complex16.getImaginary();
      Complex complex19 = complex0.log();
      boolean boolean0 = complex4.equals(complex0);
      Complex complex20 = complex2.NaN.tan();
      Complex complex21 = complex16.log();
      Complex complex22 = complex2.sin();
      String string1 = complex22.toString();
      Complex complex23 = complex4.ZERO.atan();
      String string2 = complex2.toString();
      double double2 = complex4.getArgument();
      ComplexField complexField0 = complex4.getField();
      Complex complex24 = complex16.exp();
      boolean boolean1 = complex7.equals(complex5);
      Complex complex25 = complex9.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(2075.347410764396, 0.0);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.subtract(complex2);
      double double0 = complex3.getArgument();
      Complex complex4 = complex2.multiply(complex0);
      Complex complex5 = complex3.conjugate();
      double double1 = complex3.abs();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.divide(complex4);
      Complex complex8 = complex2.exp();
      Complex complex9 = Complex.I;
      Complex complex10 = complex5.add(complex9);
      Complex complex11 = complex10.INF.tanh();
      Complex complex12 = complex0.subtract(complex9);
      Complex complex13 = complex9.pow(complex12);
      Complex complex14 = complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.I.log();
      double double0 = complex2.ZERO.abs();
      double double1 = complex2.getArgument();
      Complex complex3 = complex1.I.createComplex((-232.609330848), 0.0);
      Complex complex4 = complex0.I.multiply(complex3);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.NaN.createComplex(0.0, (-232.609330848));
      int int0 = complex2.ZERO.hashCode();
      Complex complex8 = complex0.subtract(complex5);
      Complex complex9 = complex8.NaN.tan();
      Object object0 = complex8.INF.readResolve();
      double double2 = complex9.ZERO.getArgument();
      Object object1 = complex1.readResolve();
      Complex complex10 = complex5.createComplex(0.09090909090909091, (-232.609330848));
      ComplexField complexField0 = complex10.NaN.getField();
      Complex complex11 = complex2.cosh();
      boolean boolean0 = complex10.equals(complex1);
      Complex complex12 = complex1.tanh();
      Complex complex13 = complex7.sinh();
      Complex complex14 = complex9.atan();
      Complex complex15 = complex4.sqrt();
      Complex complex16 = complex15.ONE.tanh();
      Complex complex17 = complex7.acos();
      String string0 = complex7.toString();
      Complex complex18 = complex6.sinh();
      Complex complex19 = complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      String string0 = complex1.INF.toString();
      double double0 = complex0.INF.getArgument();
      double double1 = complex0.getReal();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.createComplex(6.283185307179586, (-1.0));
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex5.INF.divide(complex1);
      Complex complex7 = complex1.sin();
      List<Complex> list0 = complex4.nthRoot(1);
      Complex complex8 = complex0.ONE.add(complex4);
      Complex complex9 = complex7.sqrt();
      Complex complex10 = complex3.asin();
      Complex complex11 = complex3.tan();
      Object object0 = complex10.INF.readResolve();
      Complex complex12 = complex11.add(complex1);
      Complex complex13 = complex10.negate();
      List<Complex> list1 = complex13.ZERO.nthRoot(1);
      double double2 = complex13.getReal();
      Complex complex14 = complex4.createComplex(Double.NaN, 2051.0);
      Complex complex15 = complex9.tan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.INF.sqrt1z();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(1811.6422688921155, 1811.6422688921155);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = Complex.I;
      double double0 = complex3.NaN.getArgument();
      Complex complex4 = complex2.I.add(complex3);
      Complex complex5 = complex1.pow(complex3);
      Complex complex6 = complex2.ZERO.acos();
      String string0 = complex6.I.toString();
      ComplexField complexField0 = complex6.ZERO.getField();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex7 = complex3.cos();
      Complex complex8 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.INF.sqrt();
      List<Complex> list0 = complex0.I.nthRoot(3471);
      Complex complex4 = complex2.ONE.atan();
      String string0 = complex0.toString();
      Complex complex5 = complex1.I.sin();
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.ZERO.log();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex6.I.atan();
      Complex complex9 = complex8.ONE.asin();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex7.sqrt();
      double double0 = complex8.getImaginary();
      Complex complex12 = complex4.acos();
      int int0 = complex1.hashCode();
      Complex complex13 = complex8.sin();
      Complex complex14 = complex3.createComplex(0.19999998807907104, 3471);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.asin();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex3 = complex1.NaN.cosh();
      Complex complex4 = complex0.NaN.cos();
      Complex complex5 = complex0.ONE.subtract(complex1);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex4.pow(complex2);
      Complex complex8 = complex7.ZERO.negate();
      Complex complex9 = complex7.ONE.atan();
      double double0 = complex1.getImaginary();
      Complex complex10 = complex0.asin();
      Complex complex11 = complex6.multiply(Double.NaN);
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.ZERO.sqrt1z();
      Complex complex4 = complex0.tanh();
      double double0 = complex2.I.getArgument();
      double double1 = complex4.I.getArgument();
      int int0 = complex1.hashCode();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1570.56493272098));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.cos();
      List<Complex> list0 = complex0.nthRoot(211);
      double double0 = complex2.getReal();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex6.NaN.sinh();
      Complex complex8 = complex3.tanh();
      int int0 = complex7.hashCode();
      Complex complex9 = complex8.cos();
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.asin();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex3.INF.subtract(complex2);
      Complex complex5 = complex4.I.cosh();
      int int0 = complex3.INF.hashCode();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.NaN.multiply(complex0);
      String string0 = complex6.toString();
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex8.ONE.pow(complex2);
      Complex complex10 = complex8.sqrt1z();
      Object object1 = complex3.readResolve();
      Complex complex11 = complex8.ONE.conjugate();
      boolean boolean0 = complex3.equals(object1);
      Complex complex12 = complex10.atan();
      Complex complex13 = complex3.asin();
      Complex complex14 = complex6.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-3077.0), (-3077.0));
      Complex complex1 = Complex.NaN;
      double double0 = complex1.INF.getArgument();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex1.INF.add(complex0);
      Complex complex4 = complex1.NaN.createComplex((-3077.0), 780.9603675845825);
      Complex complex5 = complex4.ZERO.pow(complex3);
      double double1 = complex4.INF.abs();
      Complex complex6 = complex4.tan();
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex8.INF.exp();
      Complex complex10 = complex9.exp();
      Complex complex11 = complex1.INF.tanh();
      Complex complex12 = complex11.cos();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex13 = complex0.atan();
      Complex complex14 = complex7.sqrt();
      Complex complex15 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3032.31));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = complex1.cos();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex3.sinh();
      double double0 = complex0.abs();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.NaN.multiply(complex0);
      ComplexField complexField1 = complex6.ONE.getField();
      boolean boolean0 = complex5.isInfinite();
      Complex complex8 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      ComplexField complexField0 = complex1.I.getField();
      double double0 = complex0.abs();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      List<Complex> list0 = complex1.NaN.nthRoot(1025);
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.NaN.pow(complex0);
      double double0 = complex3.INF.getArgument();
      Complex complex4 = complex3.ONE.cos();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex5 = complex0.tanh();
      double double1 = complex0.getReal();
      Object object0 = complex1.readResolve();
      Complex complex6 = complex1.add(complex0);
      Complex complex7 = Complex.I;
      Complex complex8 = complex1.subtract(complex7);
      Complex complex9 = complex8.NaN.atan();
      Complex complex10 = complex6.negate();
      Complex complex11 = complex2.pow(complex3);
      int int0 = complex11.ONE.hashCode();
      Complex complex12 = complex11.I.acos();
      Complex complex13 = complex11.INF.multiply(complex8);
      double double2 = complex6.abs();
      Complex complex14 = complex11.divide(complex4);
      Complex complex15 = complex14.INF.divide(complex3);
      double double3 = complex15.getArgument();
      Complex complex16 = complex1.sqrt1z();
      Complex complex17 = complex16.acos();
      Complex complex18 = complex3.asin();
      boolean boolean0 = complex3.isNaN();
      double double4 = complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex1.NaN.createComplex(0.0, 6.283185307179586);
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex2.ZERO.tanh();
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = complex0.tan();
      int int0 = complex2.hashCode();
      Complex complex8 = complex0.multiply(0.16666666666745392);
      Complex complex9 = new Complex(0.0, 6.283185307179586);
      boolean boolean0 = complex4.equals(complex9);
      String string0 = complex1.toString();
      Complex complex10 = complex5.pow(complex6);
      Complex complex11 = complex7.negate();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-976.174), (-976.174));
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.ONE.add(complex2);
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex3.negate();
      double double0 = complex1.getReal();
      Complex complex7 = complex0.ZERO.sqrt1z();
      Complex complex8 = Complex.NaN;
      String string0 = complex3.INF.toString();
      Complex complex9 = complex1.multiply(complex8);
      Complex complex10 = complex0.ONE.add(complex6);
      Complex complex11 = complex7.INF.negate();
      Complex complex12 = new Complex(Double.NaN, (-66.286));
      Complex complex13 = complex7.pow(complex12);
      Complex complex14 = complex13.INF.atan();
      Complex complex15 = complex2.multiply(complex1);
      double double1 = complex6.getReal();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex0.multiply((-934.67));
      Complex complex4 = complex3.ZERO.subtract(complex1);
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = complex2.ONE.acos();
      Complex complex9 = complex8.I.exp();
      Complex complex10 = complex8.NaN.sqrt();
      Complex complex11 = complex10.ZERO.exp();
      Complex complex12 = complex7.I.cosh();
      Complex complex13 = complex5.ONE.negate();
      Complex complex14 = complex1.I.subtract(complex5);
      double double0 = complex14.INF.abs();
      Complex complex15 = complex5.INF.subtract(complex2);
      boolean boolean0 = complex5.isNaN();
      Complex complex16 = complex5.ONE.cosh();
      Object object0 = new Object();
      boolean boolean1 = complex0.equals(object0);
      Complex complex17 = complex6.atan();
      Complex complex18 = complex13.conjugate();
      boolean boolean2 = complex6.equals(complex0);
      Complex complex19 = complex18.divide(complex0);
      Complex complex20 = complex12.cos();
      Complex complex21 = complex20.I.divide(complex12);
      boolean boolean3 = complex2.equals("8");
      int int0 = complex2.hashCode();
      Complex complex22 = complex19.sqrt();
      Complex complex23 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.add(complex1);
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = complex1.multiply(511.42548603);
      double double0 = complex4.getReal();
      boolean boolean1 = complex1.isNaN();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.INF.conjugate();
      Complex complex8 = complex6.NaN.cosh();
      Complex complex9 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-990.3065481), (-990.3065481));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Object object0 = complex3.INF.readResolve();
      Complex complex4 = complex1.INF.negate();
      int int0 = complex0.INF.hashCode();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex5.I.multiply((-990.3065481));
      Complex complex7 = complex4.conjugate();
      double double0 = complex4.ZERO.getArgument();
      Complex complex8 = complex0.NaN.pow(complex4);
      Complex complex9 = complex4.INF.createComplex(1.2675934823758863E-8, 0.0);
      int int1 = complex9.ONE.hashCode();
      Complex complex10 = complex9.NaN.tanh();
      Complex complex11 = complex0.asin();
      Complex complex12 = complex1.sin();
      try { 
        complex0.INF.nthRoot((-2270));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,270
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ONE.atan();
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex4 = complex2.ZERO.divide(complex0);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex3.ZERO.pow(complex4);
      Complex complex7 = complex5.exp();
      boolean boolean1 = complex3.isNaN();
      Complex complex8 = complex1.multiply(0.0);
      ComplexField complexField1 = complex8.ONE.getField();
      List<Complex> list0 = complex0.nthRoot(1);
      double double0 = complex1.getReal();
      Complex complex9 = complex4.sqrt1z();
      Complex complex10 = complex2.tanh();
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex3.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.asin();
      double double0 = complex1.abs();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex0.atan();
      double double1 = complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-1189.94433676), (-1189.94433676));
      Complex complex1 = complex0.I.conjugate();
      Object object0 = complex0.ZERO.readResolve();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.ZERO.multiply((-1189.94433676));
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.conjugate();
      double double0 = complex4.getArgument();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex0.sqrt();
      String string0 = complex1.toString();
      Complex complex8 = complex4.multiply(139.33405607004);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.INF.multiply((-1.0));
      Complex complex2 = complex1.ZERO.pow(complex0);
      double double0 = complex0.abs();
      double double1 = complex0.getArgument();
      Complex complex3 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.asin();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex3.equals(complex0);
      Complex complex5 = complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = new Complex((-1049.40439), 738.069062);
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.NaN.createComplex((-3691.4790292958332), (-1049.40439));
      double double0 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.conjugate();
      double double0 = complex2.getImaginary();
      Complex complex3 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.I.divide(complex1);
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.cos();
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.createComplex(0.0, 80.88169);
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex2.I.cos();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex4.cosh();
      int int0 = complex3.hashCode();
      Complex complex7 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.tan();
      boolean boolean0 = complex4.isInfinite();
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex1.INF.negate();
      Complex complex4 = complex1.INF.asin();
      String string0 = complex1.toString();
      Complex complex5 = complex0.pow(complex1);
      double double0 = complex5.getImaginary();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex3.pow(complex0);
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.INF.multiply(complex2);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.NaN.atan();
      Complex complex6 = complex2.log();
      Complex complex7 = complex4.asin();
      Complex complex8 = complex4.atan();
      Complex complex9 = complex4.pow(complex5);
      Object object0 = complex3.readResolve();
      double double0 = complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex0.ONE.pow(complex1);
      Complex complex4 = complex3.ZERO.pow(complex0);
      int int0 = complex0.hashCode();
      double double0 = complex0.getArgument();
      Complex complex5 = complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.I.multiply(4558.978076);
      List<Complex> list0 = complex0.I.nthRoot(7);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.ONE.log();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.multiply(1764.0624913736594);
      Complex complex6 = complex5.divide(complex1);
      double double0 = complex4.abs();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex1.asin();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex7.exp();
      Complex complex11 = complex6.tan();
      Complex complex12 = complex4.createComplex(1764.0624913736594, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(1136.9289913304, (-1177.995182));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.I.sin();
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.ONE.sin();
      double double0 = complex5.ONE.abs();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex5.conjugate();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = new Complex(2941.657397434, 2941.657397434);
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex2.sqrt();
      String string0 = complex2.ONE.toString();
      Complex complex4 = complex2.createComplex(4264.326481, 4264.326481);
      boolean boolean1 = complex4.equals("(1.0, 0.0)");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(322.869048168255, 0.6666666269302368);
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex2.ONE.pow(complex0);
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex4 = complex0.ZERO.conjugate();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.ZERO.sqrt();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex5.sin();
      try { 
        complex5.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-1979.41), 98.856);
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply(0.0);
      Complex complex2 = Complex.ZERO;
      String string0 = complex0.INF.toString();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex2.tanh();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(862.0559296, 862.0559296);
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.ONE.tan();
      Complex complex4 = complex0.log();
      Complex complex5 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.add(complex0);
      double double0 = complex1.getArgument();
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex3.I.createComplex(Double.NaN, Double.NaN);
      Complex complex5 = complex1.tan();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      Complex complex1 = complex0.ZERO.atan();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.I.conjugate();
      double double0 = complex0.getArgument();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex4 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.INF.sinh();
      Complex complex5 = complex0.cosh();
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.NaN.multiply(complex0);
      Complex complex4 = new Complex((-383.81194448), 1662.1192472);
      Complex complex5 = complex3.ZERO.subtract(complex4);
      try { 
        complex5.I.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.NaN;
      double double0 = complex0.ONE.getArgument();
      Complex complex4 = complex3.I.cos();
      double double1 = complex2.ONE.getArgument();
      Complex complex5 = complex2.NaN.multiply(complex3);
      Complex complex6 = complex5.NaN.tanh();
      Complex complex7 = complex0.ONE.asin();
      Complex complex8 = complex7.I.createComplex(0.0, 0.0);
      try { 
        complex5.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.ZERO.nthRoot((-1680));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,680
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.sin();
      List<Complex> list0 = complex0.nthRoot(43);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.INF.add(complex0);
      double double0 = complex3.NaN.abs();
      Complex complex4 = complex1.I.sqrt();
      Complex complex5 = complex3.ONE.sqrt();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex0.INF.pow(complex6);
      Complex complex8 = complex6.ZERO.sqrt();
      double double1 = complex8.abs();
      boolean boolean0 = complex6.equals((Object) null);
      boolean boolean1 = complex0.isNaN();
      double double2 = complex6.getReal();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex6.divide(complex0);
      String string0 = complex1.toString();
      Complex complex11 = complex0.atan();
      List<Complex> list0 = complex7.nthRoot(3251);
      int int0 = complex11.hashCode();
      List<Complex> list1 = complex0.nthRoot(3251);
      Object object0 = new Object();
      boolean boolean2 = complex8.equals(object0);
      Complex complex12 = complex9.cosh();
      Complex complex13 = complex11.multiply((-537.541366054));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.I.cosh();
      Complex complex4 = complex2.ONE.negate();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex0.I.sqrt1z();
      Complex complex7 = complex5.NaN.multiply(complex1);
      Complex complex8 = complex0.sqrt();
      int int0 = complex8.I.hashCode();
      Complex complex9 = complex7.INF.acos();
      Complex complex10 = complex5.ONE.sinh();
      ComplexField complexField0 = complex5.getField();
      Complex complex11 = complex2.add(complex1);
      Complex complex12 = complex5.ZERO.exp();
      Complex complex13 = complex7.multiply(complex5);
      String string0 = complex4.toString();
      int int1 = complex1.ONE.hashCode();
      Complex complex14 = complex4.cos();
      Complex complex15 = complex7.ZERO.multiply(0.0);
      Complex complex16 = complex11.NaN.multiply(complex1);
      double double0 = complex13.getImaginary();
      ComplexField complexField1 = complex4.getField();
      Complex complex17 = complex13.log();
      Complex complex18 = complex14.createComplex(Double.NaN, Double.NaN);
      double double1 = complex14.getReal();
      Complex complex19 = complex3.add(complex7);
      Complex complex20 = complex11.add(complex9);
      Object object0 = complex15.readResolve();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = null;
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex2.NaN.conjugate();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.INF.sqrt1z();
      int int0 = complex0.hashCode();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.add(complex2);
      Complex complex7 = complex2.ZERO.atan();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex6.ONE.subtract(complex4);
      Complex complex10 = complex6.INF.pow(complex2);
      Complex complex11 = complex10.NaN.multiply(0.0);
      Complex complex12 = complex11.INF.tanh();
      Object object0 = complex10.ONE.readResolve();
      Complex complex13 = complex5.ONE.subtract(complex2);
      Complex complex14 = complex2.I.divide(complex5);
      double double0 = complex5.ZERO.getArgument();
      Complex complex15 = complex0.multiply((-493.904917575));
      Complex complex16 = complex4.conjugate();
      Complex complex17 = complex5.sinh();
      Complex complex18 = complex17.I.multiply((-1991.0675));
      Object object1 = complex2.readResolve();
      String string0 = complex8.toString();
      Complex complex19 = complex16.divide(complex14);
      List<Complex> list0 = complex2.nthRoot(547);
      Complex complex20 = new Complex((-5111.744), (-0.3058015757857271));
      Complex complex21 = complex10.subtract(complex20);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.NaN.sin();
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex0.I.multiply(complex1);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.INF.asin();
      Complex complex7 = Complex.I;
      Complex complex8 = complex5.ZERO.divide(complex1);
      Complex complex9 = complex5.divide(complex7);
      Complex complex10 = complex0.tan();
      int int1 = complex4.hashCode();
      Complex complex11 = complex10.I.subtract(complex4);
      Complex complex12 = complex0.divide(complex3);
      Complex complex13 = complex12.I.log();
      Complex complex14 = complex3.ONE.cos();
      Complex complex15 = complex12.atan();
      boolean boolean1 = complex4.isInfinite();
      Complex complex16 = complex0.multiply(complex15);
      List<Complex> list0 = complex6.nthRoot(1174);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.nthRoot(1835);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.ONE.sin();
      boolean boolean1 = complex1.equals(complex3);
      Complex complex5 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      String string0 = complex0.I.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex1.ZERO.createComplex(1.0, (-3760.37543158606));
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex6.INF.sqrt();
      double double1 = complex4.getReal();
      boolean boolean0 = complex4.isInfinite();
      Complex complex8 = complex4.log();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex9.tan();
      Complex complex11 = complex9.sin();
      ComplexField complexField1 = complex0.getField();
      Object object0 = complex7.readResolve();
      Complex complex12 = complex6.sinh();
      boolean boolean1 = complex12.isNaN();
      Complex complex13 = complex10.asin();
  }
}
