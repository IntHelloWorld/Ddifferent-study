/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:04:51 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.NaN.tan();
      Complex complex4 = complex2.ZERO.sin();
      double double0 = complex2.I.getArgument();
      Complex complex5 = complex2.exp();
      boolean boolean0 = complex1.equals(complex2);
      double double1 = complex2.INF.getArgument();
      Complex complex6 = complex4.NaN.tan();
      Complex complex7 = complex1.NaN.multiply(3.834E-20);
      Complex complex8 = complex4.cosh();
      Object object0 = complex1.readResolve();
      Complex complex9 = complex8.NaN.cos();
      Complex complex10 = complex0.subtract(complex4);
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex8.I.conjugate();
      Complex complex13 = complex11.multiply(complex10);
      double double2 = complex13.INF.getArgument();
      boolean boolean1 = complex8.equals(complex11);
      Complex complex14 = complex3.exp();
      Complex complex15 = complex7.I.add(complex0);
      Object object1 = complex3.readResolve();
      Complex complex16 = complex14.add(complex12);
      Complex complex17 = complex7.asin();
      Complex complex18 = complex10.ZERO.log();
      Complex complex19 = complex18.ONE.pow(complex7);
      Complex complex20 = complex1.multiply(3.834E-20);
      Complex complex21 = complex4.createComplex(3.834E-20, 0.7853981633974483);
      boolean boolean2 = complex12.equals(complex13);
      Complex complex22 = complex2.subtract(complex14);
      Complex complex23 = complex1.multiply(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1.0);
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex3.ONE.multiply(complex2);
      Complex complex6 = complex5.INF.pow(complex3);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-1990.23453), (-1990.23453));
      double double0 = complex0.ZERO.getArgument();
      double double1 = complex0.getImaginary();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex0.NaN.log();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex0.INF.log();
      Complex complex9 = complex6.NaN.multiply(1.0);
      Complex complex10 = complex6.sinh();
      Complex complex11 = complex10.ZERO.conjugate();
      double double2 = complex6.getArgument();
      boolean boolean0 = complex5.isNaN();
      Complex complex12 = complex6.pow(complex9);
      Complex complex13 = complex1.NaN.cos();
      double double3 = complex5.getArgument();
      boolean boolean1 = complex3.isInfinite();
      Complex complex14 = complex0.cos();
      String string0 = complex14.INF.toString();
      Complex complex15 = complex14.NaN.subtract(complex9);
      Complex complex16 = complex15.I.multiply((-2087.9972418362));
      Complex complex17 = complex9.acos();
      double double4 = complex17.abs();
      Complex complex18 = complex17.conjugate();
      Complex complex19 = complex10.multiply((-0.7853981633974483));
      Complex complex20 = complex19.acos();
      Complex complex21 = complex1.conjugate();
      Complex complex22 = complex21.ONE.tanh();
      int int0 = complex21.hashCode();
      Complex complex23 = complex2.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.ONE.exp();
      Complex complex5 = new Complex((-929.86360109), (-929.86360109));
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex1.I.sinh();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex8 = complex6.I.atan();
      Complex complex9 = complex1.NaN.log();
      List<Complex> list0 = complex9.ZERO.nthRoot(1);
      String string0 = complex6.ONE.toString();
      Complex complex10 = complex5.negate();
      boolean boolean0 = complex4.isInfinite();
      int int0 = complex6.hashCode();
      double double0 = complex10.INF.abs();
      int int1 = complex5.hashCode();
      Object object1 = complex10.readResolve();
      double double1 = complex0.getArgument();
      double double2 = complex1.abs();
      Complex complex11 = complex10.sin();
      Complex complex12 = complex4.pow(complex10);
      Complex complex13 = complex2.atan();
      Complex complex14 = complex10.log();
      Complex complex15 = complex14.NaN.asin();
      Complex complex16 = complex12.negate();
      Complex complex17 = complex16.negate();
      Complex complex18 = complex13.atan();
      double double3 = complex18.ZERO.getArgument();
      Complex complex19 = complex12.multiply(3186.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.I.createComplex(0.0, (-1879.51311585));
      Complex complex3 = complex2.NaN.negate();
      int int0 = complex0.hashCode();
      double double0 = complex1.ZERO.getArgument();
      Complex complex4 = complex0.I.atan();
      double double1 = complex0.getArgument();
      Complex complex5 = complex1.cosh();
      String string0 = complex5.ONE.toString();
      Complex complex6 = complex0.ZERO.multiply(0.0);
      boolean boolean0 = complex2.equals(complex0);
      ComplexField complexField0 = complex1.getField();
      ComplexField complexField1 = complex3.getField();
      Complex complex7 = complex5.negate();
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = complex0.ZERO.sinh();
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex0.log();
      List<Complex> list0 = complex0.ONE.nthRoot(2610);
      Complex complex4 = complex3.ONE.sinh();
      ComplexField complexField1 = complex4.ONE.getField();
      int int0 = complex0.hashCode();
      double double0 = complex0.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex5.INF.sqrt();
      Complex complex8 = complex0.add(complex5);
      Complex complex9 = complex6.ONE.exp();
      Complex complex10 = complex8.I.sin();
      Complex complex11 = complex6.ONE.acos();
      Complex complex12 = complex11.NaN.tan();
      Complex complex13 = complex5.add(complex0);
      Complex complex14 = complex6.tan();
      Complex complex15 = complex2.cos();
      Complex complex16 = complex12.I.acos();
      Complex complex17 = complex0.cos();
      Complex complex18 = complex5.sinh();
      Object object1 = complex10.readResolve();
      Complex complex19 = complex5.tanh();
      Complex complex20 = complex4.tan();
      Complex complex21 = complex12.add(complex17);
      Complex complex22 = complex2.sqrt1z();
      Complex complex23 = complex22.sqrt();
      // Undeclared exception!
      complex4.nthRoot(2610);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.ONE.negate();
      List<Complex> list0 = complex1.I.nthRoot(2757);
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex4.negate();
      double double0 = complex0.abs();
      Complex complex6 = complex3.ZERO.negate();
      Complex complex7 = complex0.INF.add(complex5);
      Complex complex8 = complex3.tan();
      Complex complex9 = complex5.asin();
      Complex complex10 = complex3.sqrt();
      Complex complex11 = complex10.ZERO.add(complex0);
      boolean boolean0 = complex9.equals("(1.0, 0.0)");
      Complex complex12 = complex1.asin();
      Complex complex13 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = new Complex(2.0, (-3247.662443836));
      boolean boolean0 = complex0.equals(complex5);
      Complex complex6 = complex4.pow(complex1);
      double double0 = complex6.abs();
      Complex complex7 = complex1.NaN.sinh();
      int int0 = complex7.I.hashCode();
      Complex complex8 = complex3.cos();
      int int1 = complex6.hashCode();
      Complex complex9 = complex3.cosh();
      ComplexField complexField0 = complex8.getField();
      Complex complex10 = complex0.sqrt1z();
      ComplexField complexField1 = complex10.ZERO.getField();
      Complex complex11 = complex3.sinh();
      double double1 = complex4.getArgument();
      Complex complex12 = complex11.pow(complex0);
      Complex complex13 = complex6.tanh();
      boolean boolean1 = complex11.isNaN();
      Complex complex14 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.INF.divide(complex0);
      String string0 = complex0.toString();
      Complex complex3 = complex1.sinh();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-2456.5535916015));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.multiply(complex0);
      Complex complex4 = complex2.ZERO.atan();
      Complex complex5 = complex4.ZERO.multiply((-2456.5535916015));
      ComplexField complexField0 = complex1.getField();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex1.divide(complex2);
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex1.sinh();
      ComplexField complexField1 = complex6.ONE.getField();
      Complex complex10 = complex7.multiply(0.0);
      Complex complex11 = complex7.sqrt();
      Complex complex12 = complex8.tan();
      Complex complex13 = complex6.sin();
      Complex complex14 = complex13.negate();
      double double0 = complex0.getImaginary();
      Object object0 = complex1.readResolve();
      int int0 = complex12.hashCode();
      Complex complex15 = new Complex(2.0, 2.0);
      Complex complex16 = complex7.divide(complex15);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(8.0, Double.NaN);
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.I.multiply(complex1);
      Complex complex4 = complex3.I.multiply(complex2);
      Complex complex5 = complex1.ZERO.add(complex2);
      Object object0 = complex5.ONE.readResolve();
      Complex complex6 = complex0.ONE.divide(complex1);
      Complex complex7 = complex6.INF.exp();
      Complex complex8 = complex6.ZERO.divide(complex7);
      Complex complex9 = complex7.I.asin();
      Object object1 = complex0.readResolve();
      Complex complex10 = complex6.conjugate();
      Complex complex11 = complex0.sin();
      Complex complex12 = complex9.sqrt1z();
      Complex complex13 = complex11.multiply(8.0);
      int int0 = complex9.ZERO.hashCode();
      Complex complex14 = complex11.pow(complex2);
      Complex complex15 = complex4.subtract(complex9);
      boolean boolean0 = complex0.isInfinite();
      int int1 = complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1510.3364549994), (-1510.3364549994));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.add(complex0);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.add(complex0);
      boolean boolean0 = complex1.equals(object0);
      Complex complex4 = complex0.NaN.sinh();
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = complex5.ONE.add(complex1);
      Complex complex7 = complex2.multiply((-1510.3364549994));
      Complex complex8 = complex2.ONE.sqrt();
      Complex complex9 = complex8.INF.acos();
      Complex complex10 = complex2.ZERO.cos();
      ComplexField complexField0 = complex5.ZERO.getField();
      boolean boolean1 = complex1.isNaN();
      Complex complex11 = complex1.NaN.atan();
      Complex complex12 = complex11.ZERO.conjugate();
      Complex complex13 = complex11.I.asin();
      double double0 = complex12.ZERO.getArgument();
      Complex complex14 = complex2.I.divide(complex6);
      ComplexField complexField1 = complex6.getField();
      Complex complex15 = complex6.sqrt();
      Complex complex16 = complex6.pow(complex12);
      Complex complex17 = complex2.log();
      Complex complex18 = complex10.divide(complex0);
      Complex complex19 = complex11.cos();
      boolean boolean2 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(Double.NEGATIVE_INFINITY);
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = complex1.log();
      Complex complex7 = complex6.ZERO.multiply(0.0);
      Complex complex8 = complex6.tan();
      Complex complex9 = complex8.multiply(Double.NEGATIVE_INFINITY);
      Complex complex10 = complex9.I.tan();
      Complex complex11 = complex4.NaN.multiply(0.0);
      ComplexField complexField0 = complex9.ONE.getField();
      int int0 = complex2.ONE.hashCode();
      Complex complex12 = complex6.tan();
      boolean boolean0 = complex8.equals(complex0);
      Object object0 = complex6.readResolve();
      double double0 = complex8.INF.getArgument();
      Complex complex13 = complex1.ONE.acos();
      try { 
        complex5.nthRoot((-680));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -680
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = new Complex((-1.0), 0.0);
      Complex complex3 = complex2.ONE.add(complex1);
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex0.NaN.subtract(complex2);
      Complex complex6 = complex3.createComplex(0.0, 0.0);
      Complex complex7 = complex1.sin();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex7.INF.subtract(complex0);
      Complex complex10 = complex9.sinh();
      double double0 = complex2.getReal();
      Complex complex11 = complex7.ZERO.multiply(0.0);
      Complex complex12 = complex8.pow(complex0);
      Complex complex13 = complex7.cos();
      double double1 = complex9.abs();
      Complex complex14 = complex9.divide(complex8);
      Complex complex15 = complex4.sqrt1z();
      Complex complex16 = complex3.exp();
      String string0 = complex13.toString();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(625.9325135825934, (-568.6017391));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex1.log();
      Complex complex4 = complex0.divide(complex1);
      boolean boolean0 = complex4.isNaN();
      Object object0 = complex4.readResolve();
      boolean boolean1 = complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(2397);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.NaN.add(complex0);
      double double0 = complex3.INF.getArgument();
      Complex complex5 = complex1.add(complex3);
      Complex complex6 = complex3.ZERO.tanh();
      Complex complex7 = complex6.I.add(complex3);
      Complex complex8 = complex2.multiply(complex3);
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex0.sqrt();
      Complex complex11 = complex4.pow(complex0);
      List<Complex> list1 = complex3.nthRoot(2397);
      double double1 = complex1.INF.abs();
      Complex complex12 = complex10.pow(complex2);
      Complex complex13 = complex12.NaN.sqrt1z();
      Complex complex14 = complex13.ZERO.tanh();
      Complex complex15 = complex12.NaN.tan();
      Complex complex16 = complex4.sqrt();
      Complex complex17 = complex16.I.negate();
      ComplexField complexField0 = complex0.getField();
      Complex complex18 = complex1.sinh();
      Complex complex19 = complex18.INF.acos();
      Complex complex20 = complex1.sqrt1z();
      Complex complex21 = complex1.tan();
      double double2 = complex21.NaN.abs();
      Complex complex22 = complex21.I.tan();
      Complex complex23 = complex21.multiply((double) 2397);
      Complex complex24 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      double double0 = complex1.I.abs();
      Complex complex3 = complex1.ZERO.exp();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex2.multiply(4246.0);
      Complex complex7 = complex1.ONE.conjugate();
      Complex complex8 = complex7.ONE.subtract(complex0);
      ComplexField complexField0 = complex1.getField();
      Complex complex9 = complex6.multiply(complex2);
      Complex complex10 = complex0.sin();
      double double1 = complex10.abs();
      Complex complex11 = complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ZERO.divide(complex0);
      ComplexField complexField0 = complex1.ZERO.getField();
      int int0 = 1;
      Complex complex3 = complex1.ZERO.atan();
      Complex complex4 = complex3.I.divide(complex0);
      Complex complex5 = null;
      try { 
        complex4.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cos();
      String string0 = complex0.I.toString();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.INF.multiply(Double.NaN);
      Complex complex4 = complex2.INF.tan();
      Complex complex5 = complex4.NaN.subtract(complex0);
      Complex complex6 = complex1.NaN.log();
      Complex complex7 = complex2.sqrt1z();
      double double0 = complex1.abs();
      Complex complex8 = complex4.multiply(complex1);
      Complex complex9 = complex8.multiply(complex5);
      double double1 = complex5.getImaginary();
      ComplexField complexField0 = complex0.getField();
      double double2 = complex4.getArgument();
      Complex complex10 = complex4.atan();
      Complex complex11 = complex6.cos();
      Complex complex12 = complex9.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex2.ONE.log();
      boolean boolean0 = complex1.equals(complex2);
      double double0 = complex2.abs();
      Complex complex6 = complex3.ZERO.subtract(complex2);
      Complex complex7 = complex3.ZERO.acos();
      double double1 = complex0.getImaginary();
      Complex complex8 = complex0.INF.cosh();
      Complex complex9 = complex1.I.pow(complex4);
      Complex complex10 = complex4.sqrt();
      Complex complex11 = complex2.cosh();
      Complex complex12 = complex11.ZERO.cosh();
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex0.multiply(complex13);
      Complex complex15 = complex3.sinh();
      Complex complex16 = complex3.pow(complex4);
      double double2 = complex16.ZERO.abs();
      Complex complex17 = complex0.cosh();
      Complex complex18 = complex13.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.NaN.negate();
      int int0 = complex0.hashCode();
      double double0 = complex1.ZERO.getArgument();
      Complex complex3 = complex0.I.atan();
      double double1 = complex0.getArgument();
      Complex complex4 = complex1.cosh();
      String string0 = complex4.ONE.toString();
      Complex complex5 = complex0.ZERO.multiply(0.0);
      boolean boolean0 = complex1.equals(complex0);
      ComplexField complexField0 = complex2.getField();
      Complex complex6 = complex4.negate();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ZERO.asin();
      ComplexField complexField0 = complex4.getField();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex5.cosh();
      boolean boolean0 = complex6.isNaN();
      Complex complex7 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      List<Complex> list1 = complex0.ZERO.nthRoot(1);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.ONE.sqrt1z();
      Object object0 = complex1.readResolve();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.subtract(complex3);
      Complex complex7 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.INF.createComplex(Double.NaN, 0.0);
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex1.I.createComplex(0.0, Double.NaN);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.createComplex(Double.NaN, Double.NaN);
      Complex complex6 = complex5.ZERO.createComplex(Double.NaN, 0.0);
      Complex complex7 = complex4.add(complex0);
      double double1 = complex4.getArgument();
      Complex complex8 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-2818.2963216867), (-2818.2963216867));
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex2.ONE.atan();
      String string0 = complex1.ZERO.toString();
      int int0 = complex0.ZERO.hashCode();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.ONE.sqrt();
      int int1 = complex6.I.hashCode();
      List<Complex> list0 = complex5.INF.nthRoot(7);
      Complex complex7 = complex5.acos();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex4.I.sinh();
      Complex complex10 = complex9.NaN.asin();
      Complex complex11 = complex8.ONE.conjugate();
      Object object0 = complex5.readResolve();
      Complex complex12 = complex1.sin();
      Complex complex13 = complex12.NaN.acos();
      Complex complex14 = Complex.I;
      Complex complex15 = complex14.subtract(complex4);
      Complex complex16 = complex7.pow(complex14);
      Complex complex17 = complex3.subtract(complex12);
      Complex complex18 = complex1.cosh();
      Complex complex19 = complex10.createComplex((-2818.2963216867), 136.9);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex0.readResolve();
      Complex complex1 = new Complex(304.7350604, 304.7350604);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex1.I.pow(complex3);
      double double0 = complex4.ONE.abs();
      Complex complex5 = complex2.createComplex(304.7350604, 575.3635462829);
      Complex complex6 = complex2.multiply(complex3);
      ComplexField complexField0 = complex6.getField();
      Complex complex7 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply(1.494140625);
      Complex complex2 = complex0.sqrt();
      double double0 = complex2.getReal();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex0.multiply(1.494140625);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(1012.235001, 1012.235001);
      Complex complex1 = complex0.negate();
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex3.INF.createComplex((-1207.379147177921), 5467.1906520103);
      double double0 = complex0.abs();
      Complex complex6 = complex2.log();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex7.I.sin();
      Complex complex9 = complex3.ONE.atan();
      Complex complex10 = complex6.NaN.tanh();
      Complex complex11 = complex1.pow(complex6);
      Complex complex12 = complex1.cosh();
      Complex complex13 = complex2.exp();
      Complex complex14 = complex13.I.asin();
      double double1 = complex11.getImaginary();
      Complex complex15 = complex5.cos();
      String string0 = complex15.I.toString();
      Complex complex16 = complex4.sqrt();
      Complex complex17 = null;
      try { 
        complex11.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex0.I.multiply(2195.756937473305);
      int int0 = complex1.ONE.hashCode();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex1.INF.asin();
      Complex complex6 = complex4.INF.cos();
      List<Complex> list0 = complex6.INF.nthRoot(2523);
      Complex complex7 = complex6.ONE.sinh();
      Complex complex8 = complex1.asin();
      boolean boolean0 = complex5.isInfinite();
      Complex complex9 = complex4.tanh();
      Complex complex10 = complex0.sin();
      Object object0 = complex10.NaN.readResolve();
      try { 
        complex9.nthRoot((-690));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -690
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.log();
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex0.log();
      ComplexField complexField0 = complex4.getField();
      Complex complex6 = complex3.exp();
      String string0 = complex6.toString();
      double double0 = complex6.getImaginary();
      Complex complex7 = complex6.sqrt();
      double double1 = complex7.abs();
      ComplexField complexField1 = complex0.getField();
      Complex complex8 = complex4.divide(complex3);
      Complex complex9 = complex0.subtract(complex6);
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex10.ZERO.conjugate();
      Complex complex12 = complex0.sin();
      Complex complex13 = new Complex(Double.NaN, Double.NaN);
      Complex complex14 = complex5.pow(complex13);
      Complex complex15 = complex1.atan();
      double double2 = complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex1.ZERO.negate();
      int int0 = complex3.ONE.hashCode();
      Complex complex5 = complex0.cos();
      double double0 = complex0.abs();
      boolean boolean0 = complex1.isInfinite();
      double double1 = complex2.abs();
      Complex complex6 = complex0.createComplex(0.0, 1.494140625);
      boolean boolean1 = complex5.isInfinite();
      Complex complex7 = complex0.createComplex(1.494140625, 1.494140625);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-1030.82562911), (-1030.82562911));
      Complex complex1 = complex0.multiply((-1030.82562911));
      Complex complex2 = complex1.divide(complex0);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(0.00500922868425965, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.add(complex3);
      double double0 = complex4.abs();
      Complex complex5 = complex4.divide(complex0);
      double double1 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.ZERO.sqrt();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.INF.cosh();
      double double0 = complex1.getReal();
      Object object0 = complex1.readResolve();
      Complex complex7 = complex1.subtract(complex5);
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex1.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex10 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.INF.sqrt();
      String string0 = complex1.toString();
      String string1 = complex1.toString();
      Complex complex4 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ZERO.pow(complex2);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(2911.291979, 2911.291979);
      Complex complex1 = complex0.tanh();
      String string0 = complex0.toString();
      Complex complex2 = complex1.ONE.exp();
      double double0 = complex1.abs();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex3 = complex2.INF.sin();
      Object object0 = complex2.readResolve();
      boolean boolean1 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      double double0 = complex0.getReal();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.multiply(671.284);
      Complex complex3 = complex2.INF.conjugate();
      int int0 = complex3.ZERO.hashCode();
      double double1 = complex2.I.abs();
      double double2 = complex2.ONE.getArgument();
      Complex complex4 = complex1.INF.tan();
      Complex complex5 = complex4.INF.subtract(complex3);
      Complex complex6 = complex2.ONE.sqrt1z();
      Complex complex7 = complex1.divide(complex0);
      Complex complex8 = complex3.add(complex0);
      Complex complex9 = complex6.createComplex(671.284, 2898.645695602448);
      double double3 = complex6.getImaginary();
      boolean boolean0 = complex0.isInfinite();
      String string0 = complex7.toString();
      Complex complex10 = complex8.divide(complex1);
      Complex complex11 = complex9.exp();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      double double0 = complex0.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex2.ONE.sqrt1z();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex1.ONE.pow(complex5);
      Complex complex8 = complex2.atan();
      Complex complex9 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.I.cosh();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.conjugate();
      ComplexField complexField0 = complex3.ONE.getField();
      ComplexField complexField1 = complex1.getField();
      Complex complex4 = complex1.createComplex(1307.6757335, 1307.6757335);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.asin();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.multiply((-412.79693498169837));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(53.216493, 0.0);
      Complex complex1 = complex0.acos();
      String string0 = complex1.INF.toString();
      Complex complex2 = complex0.multiply(0.0);
      Object object0 = complex2.INF.readResolve();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.cosh();
      boolean boolean0 = complex3.isNaN();
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = complex3.subtract(complex0);
      Complex complex7 = complex6.ONE.asin();
      double double0 = complex3.I.getArgument();
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex8.NaN.sinh();
      Complex complex10 = complex5.INF.subtract(complex8);
      ComplexField complexField0 = complex10.NaN.getField();
      Complex complex11 = complex3.exp();
      Complex complex12 = complex11.INF.tanh();
      Complex complex13 = complex1.I.sinh();
      String string1 = complex5.toString();
      Complex complex14 = complex3.conjugate();
      Complex complex15 = complex0.ZERO.divide(complex10);
      Complex complex16 = complex11.tan();
      Complex complex17 = complex5.cos();
      Complex complex18 = complex17.I.divide(complex7);
      Complex complex19 = complex10.asin();
      Complex complex20 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.multiply((-2534.2617717));
      boolean boolean0 = complex3.equals((Object) null);
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex3.ONE.acos();
      Complex complex6 = complex3.negate();
      double double0 = complex6.INF.getArgument();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex4.ONE.sin();
      Complex complex10 = complex0.sqrt();
      boolean boolean1 = complex4.isInfinite();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.NaN.abs();
      double double1 = (-1805.758);
      Complex complex1 = complex0.ONE.multiply((-1805.758));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.NaN.subtract(complex0);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.INF.divide(complex2);
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.ZERO.sqrt();
      Complex complex10 = complex9.I.acos();
      int int0 = (-3527);
      try { 
        complex1.nthRoot((-3527));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,527
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(929.0443162273439, 929.0443162273439);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.multiply(929.0443162273439);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.I.sinh();
      String string0 = complex2.toString();
      Complex complex4 = complex1.multiply(929.0443162273439);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = new Complex(0.036, 0.036);
      Complex complex4 = complex2.ZERO.pow(complex3);
      Object object0 = complex0.readResolve();
      Complex complex5 = complex1.createComplex(0.0, 0.0);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1686.39332475), (-1426.8707007268));
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.sinh();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.ZERO.sqrt();
      boolean boolean0 = complex3.equals(complex2);
      Complex complex5 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply(2.7553817452272217E-6);
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex2.NaN.asin();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex1.I.sqrt();
      Complex complex7 = complex6.INF.createComplex(0.0, 0.0);
      Complex complex8 = complex6.NaN.multiply(complex4);
      try { 
        complex8.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.acos();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = new Complex(0.0, (-1250.4369));
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex0.I.multiply(complex2);
      Complex complex5 = complex0.cosh();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex1.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.ZERO.multiply(0.0);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex3.tan();
      double double0 = complex3.INF.getArgument();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.INF.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      List<Complex> list0 = complex1.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = complex0.acos();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.conjugate();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex1.multiply(0.0);
      try { 
        complex0.nthRoot((-1989));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,989
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.sqrt1z();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.ONE.asin();
      Complex complex5 = complex4.ONE.createComplex(577.08793, 577.08793);
      Complex complex6 = complex3.ZERO.log();
      boolean boolean0 = complex2.equals(object0);
      Complex complex7 = complex2.ZERO.sqrt1z();
      Complex complex8 = complex7.INF.asin();
      Complex complex9 = complex8.ZERO.atan();
      double double0 = complex0.getArgument();
      double double1 = complex2.getReal();
      ComplexField complexField0 = complex0.getField();
      Complex complex10 = complex3.cosh();
      Complex complex11 = complex1.ZERO.add(complex3);
      Complex complex12 = complex3.I.cosh();
      Complex complex13 = complex9.add(complex10);
      Complex complex14 = complex0.atan();
      Complex complex15 = complex10.ZERO.asin();
      int int0 = complex1.hashCode();
      Complex complex16 = complex13.ONE.subtract(complex1);
      Complex complex17 = complex14.I.sqrt();
      try { 
        complex14.ZERO.nthRoot((-1316));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,316
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply((-873.47336));
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex4.sqrt();
      double double0 = complex5.NaN.abs();
      Complex complex6 = complex1.INF.tanh();
      Complex complex7 = complex4.NaN.sqrt();
      Complex complex8 = complex3.I.cos();
      Complex complex9 = complex0.NaN.log();
      List<Complex> list0 = complex0.nthRoot(251);
      boolean boolean0 = complex4.isInfinite();
      double double1 = complex2.abs();
      int int0 = complex1.hashCode();
      Complex complex10 = complex4.conjugate();
      Complex complex11 = complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.sin();
      String string0 = complex3.NaN.toString();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ONE.multiply(complex2);
      Complex complex7 = complex6.multiply(0.10526403784751892);
      Complex complex8 = complex3.ONE.add(complex5);
      Object object0 = complex5.INF.readResolve();
      Complex complex9 = complex5.ZERO.acos();
      Complex complex10 = complex5.add(complex1);
      Complex complex11 = complex2.NaN.negate();
      Complex complex12 = complex10.I.negate();
      Complex complex13 = complex2.cos();
      Complex complex14 = complex3.I.atan();
      Complex complex15 = complex1.INF.tan();
      double double0 = complex0.getArgument();
      Complex complex16 = complex3.INF.sqrt1z();
      Complex complex17 = complex16.ONE.sqrt();
      Complex complex18 = complex17.cosh();
      List<Complex> list0 = complex12.nthRoot(1);
      Complex complex19 = complex3.multiply(complex1);
      boolean boolean0 = complex3.equals(complex2);
      double double1 = complex19.abs();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(2046.0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.add(complex2);
      List<Complex> list0 = complex3.ONE.nthRoot(1);
      Complex complex4 = new Complex(2046.0, (-885.336));
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex3.NaN.divide(complex4);
      Complex complex7 = complex6.ONE.createComplex((-392.30348), (-392.30348));
      double double0 = complex3.getArgument();
      int int0 = complex3.hashCode();
      ComplexField complexField0 = complex6.getField();
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.INF.readResolve();
      double double0 = complex0.NaN.abs();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex2.ZERO.pow(complex1);
      double double1 = complex0.abs();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex0.add(complex1);
      try { 
        complex3.ZERO.nthRoot((-1058));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,058
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.equals("");
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-2238.0), 2718.35542);
      Complex complex1 = complex0.INF.cos();
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.ZERO.sinh();
      Complex complex4 = complex3.ONE.subtract(complex1);
      Complex complex5 = complex2.divide(complex0);
      Complex complex6 = complex5.ZERO.acos();
      Complex complex7 = complex0.conjugate();
      boolean boolean0 = complex7.isInfinite();
      double double0 = complex0.getReal();
      Complex complex8 = complex0.I.tanh();
      Complex complex9 = complex6.cos();
      double double1 = complex5.getImaginary();
      ComplexField complexField0 = complex7.getField();
      double double2 = complex9.getImaginary();
      Complex complex10 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.I.abs();
      double double1 = complex0.getReal();
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.divide(complex0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.INF.divide(complex2);
      List<Complex> list0 = complex0.nthRoot(37);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.ZERO.subtract(complex0);
      Complex complex6 = complex5.ONE.atan();
      Object object0 = complex6.NaN.readResolve();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex2.sqrt();
      Complex complex9 = complex4.sin();
      Complex complex10 = complex9.INF.negate();
      Complex complex11 = complex4.I.tanh();
      Complex complex12 = complex2.exp();
      Complex complex13 = complex12.INF.add(complex10);
      Complex complex14 = complex12.I.cos();
      double double2 = complex12.abs();
      ComplexField complexField0 = complex10.getField();
      try { 
        complex9.nthRoot((-3289));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,289
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
