/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:08:19 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-671.161), (-4099.728925905808));
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.I.createComplex((-671.161), (-671.161));
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex1.I.sqrt();
      Complex complex4 = complex1.pow(complex0);
      int int0 = complex0.ONE.hashCode();
      Complex complex5 = complex3.ZERO.add(complex2);
      Object object0 = complex0.ZERO.readResolve();
      int int1 = complex0.ONE.hashCode();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex0.conjugate();
      double double0 = complex7.NaN.getArgument();
      double double1 = complex7.NaN.abs();
      Complex complex8 = complex6.exp();
      Complex complex9 = complex1.divide(complex3);
      Complex complex10 = complex7.acos();
      Complex complex11 = complex10.NaN.asin();
      double double2 = complex10.abs();
      Object object1 = complex0.readResolve();
      Complex complex12 = complex8.cos();
      Complex complex13 = complex12.I.pow(complex11);
      int int2 = complex10.hashCode();
      Complex complex14 = complex8.cosh();
      Complex complex15 = complex14.NaN.sqrt1z();
      Complex complex16 = complex4.tanh();
      int int3 = complex2.hashCode();
      Complex complex17 = complex15.createComplex(Double.NaN, (-0.16624882440418567));
      double double3 = complex5.getImaginary();
      Complex complex18 = complex1.atan();
      Complex complex19 = complex18.sinh();
      Complex complex20 = complex18.conjugate();
      Complex complex21 = complex0.divide(complex12);
      Complex complex22 = complex20.pow(complex18);
      Complex complex23 = complex8.acos();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-825.7138016), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.createComplex((-1953.7699287053604), (-143.0));
      Complex complex3 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.sqrt1z();
      Object object0 = complex1.readResolve();
      boolean boolean1 = complex0.isInfinite();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.ONE.pow(complex1);
      Complex complex5 = complex3.ONE.sqrt();
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex7.ONE.cosh();
      double double1 = complex6.abs();
      Complex complex9 = complex0.sqrt1z();
      boolean boolean2 = complex0.equals(complex3);
      Complex complex10 = complex2.createComplex(Double.NaN, Double.NaN);
      Complex complex11 = complex10.ONE.divide(complex5);
      int int0 = complex11.hashCode();
      ComplexField complexField0 = complex11.INF.getField();
      Complex complex12 = complex10.atan();
      Complex complex13 = complex6.I.cos();
      Complex complex14 = complex3.add(complex10);
      Complex complex15 = complex14.ZERO.createComplex(Double.NaN, Double.NaN);
      Object object1 = new Object();
      boolean boolean3 = complex1.equals(object1);
      Complex complex16 = complex4.I.multiply(Double.NaN);
      Complex complex17 = complex9.cos();
      Complex complex18 = complex17.exp();
      Object object2 = complex4.readResolve();
      double double2 = complex2.getImaginary();
      Complex complex19 = complex6.tanh();
      Complex complex20 = complex15.add(complex9);
      Complex complex21 = complex14.createComplex(Double.NaN, Double.NaN);
      Complex complex22 = complex21.sin();
      boolean boolean4 = complex8.isInfinite();
      Complex complex23 = complex6.add(complex13);
      Complex complex24 = complex12.asin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.acos();
      try { 
        complex1.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.I.hashCode();
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-3377.29215065));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.INF.cosh();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex0.ZERO.tan();
      Complex complex5 = complex4.createComplex((-3377.29215065), (-3377.29215065));
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex4.NaN.subtract(complex2);
      Complex complex8 = complex4.ONE.exp();
      Complex complex9 = complex8.ONE.sqrt1z();
      Complex complex10 = complex0.ONE.cos();
      Object object0 = complex2.I.readResolve();
      Complex complex11 = complex2.ZERO.pow(complex3);
      Complex complex12 = complex0.log();
      double double0 = complex12.I.abs();
      Complex complex13 = complex12.I.multiply(complex2);
      Object object1 = complex13.readResolve();
      Complex complex14 = complex0.conjugate();
      Complex complex15 = complex12.atan();
      Complex complex16 = complex0.multiply((-3377.29215065));
      Complex complex17 = complex16.INF.multiply(0.0);
      Complex complex18 = complex17.NaN.asin();
      Complex complex19 = complex4.tanh();
      Complex complex20 = complex12.sqrt();
      double double1 = complex20.getImaginary();
      boolean boolean0 = complex5.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.ONE.multiply(complex0);
      double double0 = complex0.ZERO.abs();
      double double1 = complex0.ONE.getArgument();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex2.NaN.cos();
      Complex complex5 = complex2.divide(complex3);
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.INF.exp();
      double double2 = complex6.NaN.getArgument();
      boolean boolean1 = complex2.equals(complex6);
      Complex complex8 = complex6.asin();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex9.NaN.conjugate();
      Complex complex11 = complex10.ONE.exp();
      Complex complex12 = complex0.tan();
      Complex complex13 = complex3.acos();
      Complex complex14 = complex12.tan();
      double double3 = complex8.getImaginary();
      Complex complex15 = complex1.atan();
      Complex complex16 = complex0.asin();
      Complex complex17 = complex8.tan();
      Complex complex18 = complex8.asin();
      Complex complex19 = complex0.pow(complex0);
      double double4 = complex9.abs();
      Complex complex20 = complex18.log();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(4426.570430466497, 4426.570430466497);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.I.sin();
      String string0 = complex3.toString();
      double double0 = complex2.I.abs();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex2.INF.negate();
      Complex complex7 = complex1.multiply(4426.570430466497);
      double double1 = complex1.getImaginary();
      Complex complex8 = complex1.pow(complex0);
      Complex complex9 = complex8.sin();
      Complex complex10 = complex9.NaN.log();
      Complex complex11 = complex8.multiply(4426.570430466497);
      Complex complex12 = complex2.tan();
      Complex complex13 = complex12.ONE.tanh();
      try { 
        complex13.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.NaN.sqrt();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex2 = complex0.conjugate();
      Object object1 = complex2.readResolve();
      Object object2 = complex2.ONE.readResolve();
      Complex complex3 = complex0.INF.exp();
      ComplexField complexField1 = complex0.INF.getField();
      double double0 = complex0.getReal();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex5.ZERO.conjugate();
      double double1 = complex2.abs();
      String string0 = complex4.toString();
      Complex complex7 = complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = complex2.NaN.cos();
      Complex complex6 = complex0.I.conjugate();
      Complex complex7 = complex6.INF.add(complex1);
      Complex complex8 = complex0.acos();
      Complex complex9 = complex8.ONE.cos();
      boolean boolean1 = complex2.isInfinite();
      double double0 = complex2.getImaginary();
      Complex complex10 = complex5.sin();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex0.ONE.divide(complex11);
      Complex complex13 = complex10.ONE.pow(complex3);
      Complex complex14 = complex5.cos();
      Complex complex15 = complex9.ZERO.pow(complex5);
      Complex complex16 = complex0.acos();
      Complex complex17 = complex16.ZERO.pow(complex4);
      Complex complex18 = complex8.INF.conjugate();
      boolean boolean2 = complex10.isInfinite();
      Complex complex19 = complex9.cos();
      int int0 = complex19.NaN.hashCode();
      Object object0 = complex4.readResolve();
      Complex complex20 = complex19.multiply(Double.NaN);
      Complex complex21 = complex6.acos();
      Complex complex22 = complex2.cosh();
      Complex complex23 = complex22.NaN.subtract(complex14);
      double double1 = complex17.getImaginary();
      ComplexField complexField0 = complex4.getField();
      List<Complex> list0 = complex4.nthRoot(511);
      String string0 = complex2.toString();
      boolean boolean3 = complex9.equals(")");
      double double2 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.tanh();
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex2.ZERO.cosh();
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex4.INF.asin();
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex1.divide(complex0);
      Complex complex9 = complex0.I.conjugate();
      Complex complex10 = complex1.INF.divide(complex0);
      Complex complex11 = complex10.atan();
      Complex complex12 = complex7.I.createComplex(2570.66, 2.0);
      double double0 = complex7.getReal();
      double double1 = complex11.ONE.abs();
      boolean boolean0 = complex3.isNaN();
      Complex complex13 = complex11.I.cosh();
      Complex complex14 = complex8.asin();
      Complex complex15 = complex9.atan();
      Complex complex16 = complex14.sqrt1z();
      Complex complex17 = complex9.sqrt1z();
      String string0 = complex7.toString();
      Complex complex18 = complex9.cos();
      Complex complex19 = complex18.NaN.divide(complex11);
      String string1 = complex14.toString();
      int int0 = complex11.hashCode();
      String string2 = complex0.toString();
      Complex complex20 = complex15.sinh();
      Complex complex21 = complex3.sin();
      boolean boolean1 = complex17.isNaN();
      boolean boolean2 = complex6.isNaN();
      Complex complex22 = complex12.sqrt();
      String string3 = complex22.I.toString();
      Complex complex23 = complex0.sqrt1z();
      int int1 = complex19.hashCode();
      Complex complex24 = complex23.cosh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(419.481795935903, 419.481795935903);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.cosh();
      String string0 = complex0.toString();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.ZERO.createComplex((-4.503599627370496E15), (-4.503599627370496E15));
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.INF.divide(complex1);
      double double0 = complex3.getReal();
      Complex complex5 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-1470.026258022));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex0.I.divide(complex1);
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex2.getField();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.sqrt();
      double double0 = complex0.abs();
      boolean boolean0 = complex1.equals(complex0);
      boolean boolean1 = complex0.isInfinite();
      Complex complex5 = complex1.NaN.sin();
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex6 = complex5.ONE.tan();
      Complex complex7 = complex0.negate();
      String string0 = complex7.toString();
      double double1 = complex1.getArgument();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex4.sqrt1z();
      Complex complex10 = complex9.I.conjugate();
      Complex complex11 = complex7.negate();
      String string1 = complex11.INF.toString();
      double double2 = complex5.getReal();
      double double3 = complex9.getArgument();
      boolean boolean2 = complex4.isInfinite();
      Complex complex12 = complex11.multiply(complex6);
      Complex complex13 = complex7.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-976.4613), 0.058823529411764705);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.multiply(complex0);
      Complex complex4 = Complex.NaN;
      Object object0 = complex0.NaN.readResolve();
      Object object1 = complex2.NaN.readResolve();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex5.ONE.atan();
      Complex complex8 = complex0.pow(complex4);
      Complex complex9 = complex2.tan();
      Object object2 = complex4.readResolve();
      Complex complex10 = complex3.exp();
      Complex complex11 = complex0.NaN.createComplex(170.09969531, 0.0);
      Complex complex12 = complex10.INF.divide(complex6);
      int int0 = complex10.ZERO.hashCode();
      String string0 = complex2.NaN.toString();
      Complex complex13 = complex0.pow(complex1);
      Complex complex14 = complex13.NaN.multiply(207.03384320993);
      Complex complex15 = complex1.pow(complex3);
      Complex complex16 = complex7.atan();
      Complex complex17 = complex8.log();
      double double0 = complex7.getArgument();
      String string1 = complex17.ZERO.toString();
      Complex complex18 = complex9.tan();
      Complex complex19 = complex18.I.createComplex(0.0, 207.03384320993);
      Complex complex20 = complex12.multiply(complex17);
      Complex complex21 = complex20.atan();
      Complex complex22 = complex3.asin();
      double double1 = complex22.INF.abs();
      Complex complex23 = complex15.sinh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.INF.createComplex((-1162.803006938), Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.createComplex(0.2222222089767456, 3918.4494);
      Complex complex4 = complex3.NaN.conjugate();
      double double0 = complex0.getReal();
      Complex complex5 = complex1.ONE.sinh();
      double double1 = complex1.abs();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex3.sinh();
      Complex complex8 = complex4.sinh();
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex9.ONE.sqrt1z();
      Complex complex11 = complex10.ONE.conjugate();
      Complex complex12 = complex11.ZERO.pow(complex7);
      double double2 = complex11.ZERO.abs();
      Complex complex13 = complex11.ONE.acos();
      Complex complex14 = complex9.cosh();
      Complex complex15 = complex4.multiply(Double.NaN);
      Complex complex16 = complex0.createComplex(8.0, (-1127.23841561066));
      Complex complex17 = complex3.NaN.log();
      Complex complex18 = complex17.ONE.atan();
      Complex complex19 = complex7.sqrt();
      Complex complex20 = complex5.pow(complex7);
      Complex complex21 = complex15.sin();
      String string0 = complex21.toString();
      Complex complex22 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.multiply(complex3);
      int int0 = complex2.hashCode();
      Complex complex5 = complex0.multiply((-3223.409531839842));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(12.0, 12.0);
      Complex complex1 = complex0.I.asin();
      double double0 = complex1.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex2.ONE.tan();
      ComplexField complexField0 = complex5.ZERO.getField();
      Complex complex6 = complex5.atan();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.INF.multiply(complex7);
      String string0 = complex5.ONE.toString();
      Complex complex9 = complex1.add(complex0);
      Complex complex10 = complex9.exp();
      Complex complex11 = complex0.tan();
      Complex complex12 = complex11.ZERO.acos();
      Complex complex13 = complex2.acos();
      Complex complex14 = complex13.INF.exp();
      Complex complex15 = complex14.ZERO.sinh();
      int int0 = complex10.hashCode();
      double double1 = complex2.getReal();
      Complex complex16 = complex11.atan();
      Complex complex17 = complex13.conjugate();
      Complex complex18 = complex16.subtract(complex15);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.NaN.sin();
      int int0 = complex1.ONE.hashCode();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex3.log();
      Complex complex6 = complex5.I.cosh();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex4.createComplex(Double.NaN, Double.POSITIVE_INFINITY);
      double double1 = complex2.getReal();
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex9 = complex7.pow(complex2);
      Complex complex10 = complex9.ONE.atan();
      Complex complex11 = complex7.add(complex0);
      Complex complex12 = complex11.I.asin();
      Complex complex13 = complex4.atan();
      Complex complex14 = complex4.add(complex11);
      Complex complex15 = complex13.add(complex2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.I.pow(complex3);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex6.ZERO.pow(complex5);
      Complex complex8 = complex5.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = complex2.abs();
      Complex complex9 = complex3.NaN.multiply(complex7);
      Complex complex10 = new Complex(9.313225746154785E-10, (-1774.0));
      Complex complex11 = complex1.add(complex10);
      Complex complex12 = complex0.exp();
      Complex complex13 = complex4.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = new Complex(1592.9832, 1592.9832);
      Complex complex2 = complex0.ONE.divide(complex1);
      double double0 = complex0.getImaginary();
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1.0), (-1.0));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex2.INF.add(complex0);
      Complex complex6 = complex5.multiply(4146.0);
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex6.I.negate();
      Complex complex9 = complex2.sin();
      double double0 = complex9.getReal();
      Complex complex10 = complex6.sin();
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex11.log();
      Complex complex13 = complex12.INF.negate();
      Complex complex14 = complex6.divide(complex9);
      Complex complex15 = complex14.INF.add(complex1);
      Complex complex16 = complex14.sinh();
      Complex complex17 = complex6.conjugate();
      Complex complex18 = complex1.atan();
      Complex complex19 = complex1.tanh();
      Complex complex20 = complex4.sqrt();
      ComplexField complexField0 = complex2.getField();
      Complex complex21 = complex6.exp();
      Complex complex22 = complex5.negate();
      Complex complex23 = complex5.log();
      String string0 = complex16.toString();
      Complex complex24 = complex7.log();
      Complex complex25 = complex12.divide(complex18);
      Complex complex26 = complex20.acos();
      Complex complex27 = complex10.acos();
      Complex complex28 = complex24.negate();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(172.3287, 172.3287);
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.negate();
      double double0 = complex2.getArgument();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex7.createComplex(0.0, 0.0);
      Complex complex9 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(2453.174227638, 2453.174227638);
      Complex complex1 = complex0.sin();
      List<Complex> list0 = complex0.nthRoot(271);
      Complex complex2 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(2227.06487, 1408.10321);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex3.I.createComplex(1408.10321, 1408.10321);
      Complex complex5 = complex0.NaN.sinh();
      Complex complex6 = complex0.sqrt();
      double double0 = complex5.ZERO.abs();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex6.cosh();
      double double1 = complex8.I.abs();
      Complex complex9 = complex5.cosh();
      Complex complex10 = complex8.pow(complex2);
      Complex complex11 = complex8.add(complex4);
      Complex complex12 = complex11.ZERO.pow(complex2);
      double double2 = complex7.getReal();
      double double3 = complex9.getReal();
      Complex complex13 = complex11.sqrt1z();
      Complex complex14 = complex13.NaN.pow(complex4);
      Complex complex15 = complex4.tan();
      Complex complex16 = complex7.multiply(complex11);
      double double4 = complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-1852.552), 2417.85815);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.ONE;
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex3 = complex1.ZERO.multiply(complex2);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.ONE.divide(complex3);
      Complex complex6 = complex4.tan();
      Object object0 = complex0.readResolve();
      ComplexField complexField1 = complex2.getField();
      Complex complex7 = complex4.createComplex((-1384.18964048), (-1384.18964048));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.ONE.atan();
      String string0 = complex0.toString();
      double double0 = complex2.getArgument();
      boolean boolean1 = complex1.isNaN();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex1.log();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex7.log();
      Complex complex9 = complex0.ZERO.tan();
      Complex complex10 = complex8.ZERO.sin();
      Complex complex11 = complex5.asin();
      Complex complex12 = Complex.I;
      Complex complex13 = complex10.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(899.203175609, 0.0);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex2.NaN.multiply(0.041666666666621166);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex2.asin();
      double double0 = complex5.getImaginary();
      Complex complex8 = complex6.multiply(0.0);
      Complex complex9 = complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.createComplex(1.0, Double.NEGATIVE_INFINITY);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.subtract(complex2);
      List<Complex> list0 = complex0.nthRoot(3066);
      double double0 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.INF.pow(complex0);
      try { 
        complex0.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex2.divide(complex4);
      Complex complex7 = complex3.multiply(5699.69);
      Complex complex8 = complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(3.814697265625E-6, 0.0);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex1.ONE.sqrt1z();
      double double0 = complex0.getImaginary();
      double double1 = complex0.getArgument();
      Complex complex5 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.I.log();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      String string0 = complex1.I.toString();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex2.INF.acos();
      Complex complex5 = complex1.NaN.tan();
      Complex complex6 = complex2.pow(complex1);
      Complex complex7 = complex6.NaN.multiply((-982.0451));
      String string1 = complex6.toString();
      Complex complex8 = complex3.I.sqrt();
      double double0 = complex0.abs();
      Complex complex9 = complex3.cosh();
      Complex complex10 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2741.047131397), (-2741.047131397));
      Complex complex2 = complex0.divide(complex1);
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(7.549789948768648E-8, 7.549789948768648E-8);
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.NaN.pow(complex2);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex2.exp();
      boolean boolean0 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.cos();
      Object object0 = complex3.NaN.readResolve();
      Complex complex6 = complex5.I.exp();
      int int0 = (-1234);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.tan();
      Object object1 = complex2.I.readResolve();
      Complex complex9 = complex5.ZERO.acos();
      Complex complex10 = complex4.ZERO.subtract(complex7);
      try { 
        complex4.nthRoot((-1234));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,234
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex0.NaN.subtract(complex1);
      Complex complex4 = complex0.negate();
      double double0 = complex3.I.abs();
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex3.cos();
      Complex complex7 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.I.acos();
      Object object0 = complex0.NaN.readResolve();
      double double0 = complex0.getArgument();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.ONE.subtract(complex3);
      String string1 = complex0.toString();
      String string2 = complex0.toString();
      String string3 = complex3.toString();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex3.sin();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex5.divide(complex1);
      Complex complex9 = complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex3.createComplex(0.0, 0.0);
      Complex complex5 = complex3.ZERO.sin();
      ComplexField complexField0 = complex5.ZERO.getField();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex3.NaN.sqrt();
      int int0 = complex7.ZERO.hashCode();
      double double0 = complex0.getReal();
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex1.ONE.tanh();
      Complex complex10 = complex9.NaN.conjugate();
      Complex complex11 = complex9.sinh();
      ComplexField complexField1 = complex6.getField();
      Complex complex12 = complex1.sqrt1z();
      Complex complex13 = complex2.negate();
      Complex complex14 = complex13.tanh();
      try { 
        complex3.nthRoot((-419));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -419
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex1.INF.createComplex((-1826.8), 349.1319221951);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.acos();
      double double0 = complex1.getImaginary();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.NaN.add(complex3);
      Complex complex5 = complex0.ONE.sinh();
      double double0 = complex5.ONE.getArgument();
      Complex complex6 = complex4.NaN.pow(complex1);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.I.atan();
      Complex complex9 = complex8.ONE.subtract(complex1);
      Complex complex10 = complex0.I.divide(complex7);
      Complex complex11 = complex7.ZERO.negate();
      boolean boolean0 = complex3.isNaN();
      double double1 = complex7.getReal();
      boolean boolean1 = complex10.isInfinite();
      Complex complex12 = complex7.createComplex(0.5403023058681398, 0.5403023058681398);
      Complex complex13 = complex10.cosh();
      double double2 = complex12.abs();
      String string0 = complex4.toString();
      String string1 = complex7.toString();
      Complex complex14 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex2.I.cosh();
      double double0 = complex0.INF.getArgument();
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex2.I.add(complex4);
      Complex complex7 = complex5.INF.tanh();
      Object object0 = complex0.I.readResolve();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex1.I.negate();
      Object object1 = complex8.NaN.readResolve();
      Complex complex10 = complex8.INF.pow(complex5);
      Complex complex11 = complex1.INF.cosh();
      int int0 = complex8.ZERO.hashCode();
      Complex complex12 = complex0.createComplex(262, 262);
      List<Complex> list0 = complex1.nthRoot(262);
      double double1 = complex2.getReal();
      Complex complex13 = complex4.I.cos();
      Complex complex14 = complex4.conjugate();
      ComplexField complexField0 = complex5.getField();
      Complex complex15 = complex7.exp();
      Complex complex16 = complex9.exp();
      Complex complex17 = complex9.log();
      Complex complex18 = complex4.pow(complex15);
      boolean boolean0 = complex18.isInfinite();
      Complex complex19 = new Complex(0.7853981633974483, 1588.339);
      Complex complex20 = complex8.add(complex19);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.I.createComplex(0.0, 0.0);
      Object object0 = complex1.I.readResolve();
      double double0 = complex1.abs();
      Complex complex4 = complex1.sqrt();
      double double1 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex((-791.678570893), 1.9699272335463627E-8);
      Complex complex3 = complex1.ONE.pow(complex2);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex4.I.acos();
      String string0 = complex6.INF.toString();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex0.tanh();
      ComplexField complexField0 = complex8.getField();
      boolean boolean0 = complex0.isNaN();
      Complex complex9 = complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.NaN.cos();
      String string0 = complex0.toString();
      Object object0 = complex1.readResolve();
      Complex complex5 = complex4.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-1515.36306639), (-827.6790985829982));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = complex0.ZERO.atan();
      Complex complex5 = complex1.I.log();
      try { 
        complex0.nthRoot((-801));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -801
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      try { 
        complex0.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-1175.118105), (-1175.118105));
      Complex complex1 = complex0.INF.sin();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(1.5830993332061267E-10, 1.5830993332061267E-10);
      Complex complex1 = complex0.cosh();
      List<Complex> list0 = complex0.nthRoot(28);
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex1.getImaginary();
      Complex complex2 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex5.I.createComplex((-940.234626432), (-940.234626432));
      Complex complex7 = complex6.INF.sin();
      boolean boolean0 = complex5.equals(complex3);
      Complex complex8 = complex3.I.asin();
      Complex complex9 = complex8.NaN.sin();
      Complex complex10 = complex9.ONE.negate();
      Complex complex11 = complex2.sqrt();
      Complex complex12 = complex5.multiply(complex1);
      Complex complex13 = complex12.ONE.acos();
      Complex complex14 = complex2.pow(complex4);
      Complex complex15 = complex3.cosh();
      double double0 = complex9.getImaginary();
      String string0 = complex14.toString();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.I.conjugate();
      int int0 = complex2.ZERO.hashCode();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.multiply(682.0150238);
      List<Complex> list0 = complex0.nthRoot(497);
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex0.conjugate();
      int int0 = complex0.hashCode();
      String string0 = complex2.toString();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(2799.04, 0.5);
      Complex complex1 = complex0.NaN.tan();
      int int0 = complex0.ONE.hashCode();
      Complex complex2 = complex0.exp();
      double double0 = complex0.abs();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.I.divide(complex2);
      Complex complex5 = complex0.sqrt();
      double double1 = complex5.NaN.abs();
      Complex complex6 = complex1.multiply(complex2);
      String string0 = complex6.ONE.toString();
      Complex complex7 = complex6.ZERO.createComplex(2799.04, Double.NaN);
      double double2 = complex7.NaN.abs();
      List<Complex> list0 = complex0.INF.nthRoot(2312);
      List<Complex> list1 = complex1.INF.nthRoot(2311);
      Complex complex8 = complex1.divide(complex2);
      Complex complex9 = complex0.ONE.atan();
      Complex complex10 = complex8.conjugate();
      Complex complex11 = complex10.I.multiply((-0.761594155955765));
      Complex complex12 = complex10.I.conjugate();
      Complex complex13 = complex4.ONE.cosh();
      Complex complex14 = complex8.INF.asin();
      double double3 = complex3.abs();
      Complex complex15 = complex11.cosh();
      try { 
        complex10.nthRoot((-672));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -672
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex2.ZERO.asin();
      Complex complex6 = complex0.subtract(complex1);
      double double0 = complex0.getReal();
      Complex complex7 = complex0.log();
      double double1 = complex1.getImaginary();
      boolean boolean0 = complex2.isInfinite();
      Complex complex8 = complex7.INF.sqrt1z();
      Complex complex9 = complex0.INF.tanh();
      Complex complex10 = complex0.multiply((-1153.2));
      Complex complex11 = complex6.sqrt1z();
      int int0 = 0;
      try { 
        complex10.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Object object0 = complex1.ONE.readResolve();
      double double0 = complex1.ZERO.abs();
      try { 
        complex1.nthRoot((-1515));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,515
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.multiply(1647.312779076152);
      Complex complex3 = complex1.NaN.multiply(complex0);
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.NaN.sinh();
      Object object0 = complex4.INF.readResolve();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex6.ONE.log();
      Object object1 = complex6.readResolve();
      boolean boolean0 = complex3.equals(object1);
      Complex complex8 = complex3.conjugate();
      double double0 = complex3.getReal();
      Complex complex9 = complex8.ONE.sqrt1z();
      Complex complex10 = complex9.ONE.cosh();
      Complex complex11 = complex10.ZERO.divide(complex3);
      Complex complex12 = complex10.I.atan();
      double double1 = complex12.NaN.abs();
      Complex complex13 = complex8.I.divide(complex5);
      Complex complex14 = complex3.ZERO.divide(complex1);
      boolean boolean1 = complex8.equals((Object) null);
      Complex complex15 = complex6.sin();
      Complex complex16 = complex13.multiply(562.0);
      Complex complex17 = complex8.atan();
      Complex complex18 = complex17.INF.asin();
      Complex complex19 = complex17.sinh();
      Complex complex20 = complex2.divide(complex16);
      Complex complex21 = complex20.I.tanh();
      Complex complex22 = complex21.ZERO.negate();
      Complex complex23 = complex20.cos();
      Complex complex24 = complex19.sinh();
      Complex complex25 = complex19.sqrt1z();
      double double2 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.NaN.sqrt1z();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex3 = complex1.ZERO.sin();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex1.ONE.cos();
      Complex complex6 = complex4.NaN.multiply(Double.POSITIVE_INFINITY);
      String string0 = complex1.INF.toString();
      ComplexField complexField1 = complex3.ZERO.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex0.ONE.atan();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex2.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex8.INF.sinh();
      Complex complex11 = complex8.ZERO.conjugate();
      Complex complex12 = complex3.ZERO.multiply((-895.18));
      List<Complex> list0 = complex0.nthRoot(11);
      Complex complex13 = complex11.createComplex(11, 11);
      Complex complex14 = complex3.add(complex6);
      Complex complex15 = complex14.cos();
      double double0 = complex8.NaN.getArgument();
      Complex complex16 = complex10.divide(complex0);
      Complex complex17 = complex2.multiply(complex13);
      Complex complex18 = complex8.ONE.cos();
      Complex complex19 = complex8.NaN.add(complex12);
      Complex complex20 = complex12.pow(complex17);
      Complex complex21 = complex15.sqrt1z();
      Complex complex22 = complex10.cosh();
      double double1 = complex2.getImaginary();
      Complex complex23 = complex4.atan();
      Complex complex24 = complex14.atan();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.INF.cosh();
      boolean boolean0 = complex0.equals(complex1);
      double double0 = complex2.NaN.getArgument();
      Complex complex4 = complex0.INF.cos();
      Complex complex5 = complex1.negate();
      double double1 = complex5.ZERO.abs();
      Complex complex6 = complex4.ZERO.sinh();
      Complex complex7 = complex2.multiply(3523.65);
      Complex complex8 = complex1.exp();
      Complex complex9 = complex1.ZERO.pow(complex4);
      List<Complex> list0 = complex8.ZERO.nthRoot(1);
      Complex complex10 = Complex.NaN;
      double double2 = complex10.NaN.abs();
      Complex complex11 = complex8.add(complex10);
      Complex complex12 = complex0.sin();
      Complex complex13 = complex12.atan();
      double double3 = complex4.abs();
      Complex complex14 = complex13.cos();
      String string0 = complex7.toString();
      Complex complex15 = complex13.multiply(Double.NaN);
      Complex complex16 = complex14.multiply(5016.695269002797);
      Complex complex17 = complex16.INF.tan();
      Complex complex18 = complex11.exp();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.INF.exp();
      Complex complex4 = complex0.sqrt();
      Object object0 = complex2.I.readResolve();
      double double0 = complex0.abs();
      Complex complex5 = complex4.createComplex(6.0, 6.0);
      Complex complex6 = complex2.tan();
      Complex complex7 = complex6.I.multiply(1.0);
      Complex complex8 = complex1.multiply(1847.8405040433);
      Complex complex9 = complex8.negate();
      Complex complex10 = complex9.ONE.asin();
      Complex complex11 = complex10.negate();
      Complex complex12 = complex10.ZERO.sqrt1z();
      Complex complex13 = complex1.sqrt1z();
      Complex complex14 = complex9.atan();
      Complex complex15 = complex5.sin();
      double double1 = complex4.abs();
      boolean boolean0 = complex15.isInfinite();
      Complex complex16 = complex7.log();
      List<Complex> list0 = complex5.nthRoot(247);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex0.tan();
      double double0 = complex4.abs();
      Object object0 = complex0.NaN.readResolve();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex0.I.log();
      Complex complex7 = complex0.multiply(complex3);
      Complex complex8 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.exp();
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex0.createComplex((-199.362867), 2.0);
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex3.cos();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.ZERO.subtract(complex5);
      Complex complex7 = complex6.INF.acos();
      int int1 = complex3.ZERO.hashCode();
      Complex complex8 = complex2.subtract(complex0);
      Complex complex9 = complex8.ZERO.acos();
      Complex complex10 = complex0.INF.add(complex5);
      Object object0 = complex9.ONE.readResolve();
      Complex complex11 = complex9.ONE.cosh();
      List<Complex> list0 = complex9.I.nthRoot(132);
      Complex complex12 = complex1.sin();
      Complex complex13 = complex12.I.multiply(complex2);
      double double0 = complex1.abs();
      boolean boolean0 = complex8.isNaN();
      Complex complex14 = complex2.divide(complex9);
      Complex complex15 = complex8.I.cos();
      Complex complex16 = complex8.sqrt();
      Object object1 = complex1.readResolve();
      Complex complex17 = complex16.multiply(complex1);
      Complex complex18 = complex6.tan();
      Complex complex19 = complex16.sqrt1z();
      Complex complex20 = complex7.negate();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.add(complex1);
      double double0 = complex1.abs();
      Complex complex4 = complex1.atan();
      double double1 = complex4.ONE.getArgument();
      Complex complex5 = complex0.asin();
      double double2 = complex4.getReal();
      Complex complex6 = complex2.pow(complex0);
      Complex complex7 = complex4.add(complex6);
      Complex complex8 = complex1.INF.acos();
      try { 
        complex0.I.nthRoot((-269));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -269
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex2.ONE.subtract(complex0);
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex4 = complex1.INF.log();
      ComplexField complexField1 = complex0.getField();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.multiply(2.0);
      Complex complex7 = complex5.ZERO.tan();
      Complex complex8 = complex1.acos();
      boolean boolean0 = complex4.isInfinite();
      Complex complex9 = complex8.multiply((-0.2499999997677497));
      Complex complex10 = complex4.add(complex2);
      int int0 = complex3.ZERO.hashCode();
      Complex complex11 = complex8.ZERO.asin();
      Complex complex12 = complex8.pow(complex11);
      Complex complex13 = complex9.ZERO.cos();
      Complex complex14 = complex11.ONE.sqrt1z();
      Complex complex15 = complex8.multiply(0.0);
      boolean boolean1 = complex1.equals((Object) null);
      double double0 = complex9.getImaginary();
      double double1 = complex6.abs();
      Object object1 = complex8.readResolve();
      Complex complex16 = complex3.log();
      Object object2 = complex10.readResolve();
      Complex complex17 = complex0.asin();
  }
}
