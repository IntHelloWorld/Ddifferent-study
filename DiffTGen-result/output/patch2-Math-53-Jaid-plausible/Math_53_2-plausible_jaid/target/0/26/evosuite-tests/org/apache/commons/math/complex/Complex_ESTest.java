/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:15:18 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.ONE.createComplex(2226.05206924, 2226.05206924);
      double double0 = complex2.I.abs();
      double double1 = complex0.abs();
      String string0 = complex0.toString();
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex2.divide(complex1);
      boolean boolean0 = complex1.equals("IjSH");
      Complex complex6 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1129.4, 1129.4);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex2.ONE.exp();
      int int0 = complex0.ONE.hashCode();
      Complex complex6 = complex0.ONE.sqrt1z();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex6.asin();
      Complex complex9 = complex4.asin();
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex6.ONE.readResolve();
      Complex complex10 = complex4.createComplex(1129.4, (-2671.9746887));
      double double0 = complex4.ZERO.abs();
      Complex complex11 = complex3.divide(complex2);
      Complex complex12 = complex11.NaN.cosh();
      Complex complex13 = complex0.subtract(complex10);
      Complex complex14 = complex13.I.exp();
      Complex complex15 = complex14.ONE.exp();
      Complex complex16 = complex0.tanh();
      double double1 = complex2.abs();
      boolean boolean0 = complex7.isNaN();
      Complex complex17 = complex11.INF.divide(complex9);
      Complex complex18 = complex7.sqrt();
      Complex complex19 = complex3.ONE.multiply(1129.4);
      Complex complex20 = complex8.tanh();
      Complex complex21 = complex12.multiply(1129.4);
      Complex complex22 = complex20.INF.subtract(complex21);
      String string0 = complex21.NaN.toString();
      boolean boolean1 = complex11.equals(complex5);
      boolean boolean2 = complex20.equals(complex0);
      Complex complex23 = complex10.acos();
      Complex complex24 = complex5.tanh();
      Complex complex25 = complex20.multiply(0.8414709848078965);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(1665);
      Complex complex1 = new Complex(1665, (-3597.519));
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.sin();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex3.pow(complex1);
      try { 
        complex2.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt1z();
      double double0 = complex0.INF.abs();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex2.NaN.cosh();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.NaN.asin();
      int int0 = complex6.NaN.hashCode();
      Complex complex7 = complex6.NaN.subtract(complex5);
      double double1 = complex5.ONE.getArgument();
      Complex complex8 = complex1.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = complex0.NaN.acos();
      Complex complex10 = complex8.I.acos();
      double double2 = complex5.getImaginary();
      Complex complex11 = complex1.sqrt();
      double double3 = complex11.getReal();
      int int1 = complex0.hashCode();
      Complex complex12 = complex1.ONE.exp();
      ComplexField complexField0 = complex8.getField();
      Complex complex13 = complex0.exp();
      Complex complex14 = complex13.ONE.asin();
      Complex complex15 = complex5.exp();
      Complex complex16 = complex13.log();
      Object object0 = complex1.readResolve();
      Complex complex17 = complex14.multiply(1.0);
      Complex complex18 = complex14.sinh();
      double double4 = complex0.abs();
      boolean boolean0 = complex15.equals(complex12);
      String string0 = complex9.toString();
      Complex complex19 = complex10.divide(complex18);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.ONE.multiply(Double.NaN);
      List<Complex> list0 = complex2.ZERO.nthRoot(475);
      Complex complex4 = complex0.sin();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2.0, 2.0);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Object object0 = complex2.readResolve();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex0.log();
      Complex complex5 = complex2.I.multiply(1.0);
      Object object1 = complex4.readResolve();
      boolean boolean1 = complex1.equals(object1);
      Complex complex6 = complex4.pow(complex0);
      double double0 = complex6.NaN.getArgument();
      Complex complex7 = complex6.ZERO.cosh();
      Complex complex8 = complex4.exp();
      Complex complex9 = complex8.I.multiply(complex1);
      Complex complex10 = complex7.NaN.subtract(complex0);
      Complex complex11 = complex2.tan();
      Complex complex12 = complex4.exp();
      Complex complex13 = complex6.I.negate();
      List<Complex> list0 = complex11.nthRoot(17);
      Complex complex14 = complex4.conjugate();
      double double1 = complex6.I.abs();
      Complex complex15 = complex6.createComplex(17, 0.0);
      double double2 = complex6.getImaginary();
      Complex complex16 = complex15.multiply(complex7);
      Complex complex17 = complex6.tan();
      Complex complex18 = complex17.sin();
      Complex complex19 = complex0.sinh();
      Complex complex20 = complex14.conjugate();
      Complex complex21 = complex13.createComplex(17, 2.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex2 = complex1.INF.log();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.NaN.cosh();
      Complex complex4 = complex0.NaN.sinh();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex4.cosh();
      ComplexField complexField0 = complex5.ZERO.getField();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.INF.exp();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex8.I.conjugate();
      Complex complex10 = complex7.NaN.sin();
      double double1 = complex8.getArgument();
      Complex complex11 = complex8.I.exp();
      ComplexField complexField1 = complex4.getField();
      Object object1 = complex8.readResolve();
      Complex complex12 = complex7.createComplex(Double.POSITIVE_INFINITY, 1337.1763009515478);
      Complex complex13 = complex2.sqrt();
      int int0 = complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.abs();
      try { 
        complex0.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.createComplex(0.0, 0.0);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.INF.createComplex(1498.366310497052, 1498.366310497052);
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = complex2.multiply(0.0);
      Complex complex7 = complex4.acos();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex7.multiply(876.4);
      Complex complex10 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex0.ZERO.cosh();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex5 = complex0.log();
      Complex complex6 = complex0.subtract(complex5);
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex3.ONE.multiply(1469.8970927543091);
      double double0 = complex4.I.getArgument();
      Complex complex5 = complex4.negate();
      double double1 = complex0.ZERO.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = null;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(4190.353, 4190.353);
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex0.INF.tan();
      Complex complex5 = complex1.INF.subtract(complex0);
      int int0 = complex3.I.hashCode();
      Complex complex6 = complex0.I.pow(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex0.cos();
      Object object0 = complex1.ZERO.readResolve();
      int int1 = complex0.hashCode();
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex8.ONE.createComplex(4190.353, 1308.669191414986);
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex10.multiply(0.07842259109020233);
      Complex complex12 = complex10.NaN.cosh();
      String string0 = complex10.toString();
      boolean boolean1 = complex12.isNaN();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.cos();
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex1.createComplex(1.0, 1.0);
      Complex complex3 = complex1.ONE.multiply(complex2);
      Object object0 = complex2.INF.readResolve();
      Complex complex4 = complex2.ZERO.atan();
      Complex complex5 = complex4.INF.sqrt1z();
      boolean boolean0 = complex2.equals(complex0);
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex3.ONE.atan();
      double double0 = complex4.ZERO.abs();
      Complex complex5 = complex1.sin();
      double double1 = complex0.abs();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex5.log();
      Complex complex8 = complex7.ONE.acos();
      Complex complex9 = complex8.NaN.log();
      Complex complex10 = complex0.negate();
      Complex complex11 = complex6.tan();
      Complex complex12 = complex0.tanh();
      Complex complex13 = complex12.cos();
      Complex complex14 = complex11.acos();
      Complex complex15 = complex5.add(complex0);
      Complex complex16 = complex7.tan();
      Complex complex17 = complex12.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(893.0, 893.0);
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex1.conjugate();
      Object object1 = complex0.readResolve();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex4.createComplex(893.0, 2.0);
      Complex complex7 = complex5.asin();
      Complex complex8 = complex4.asin();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex6.tanh();
      ComplexField complexField0 = complex10.getField();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-3465.6), 0.167);
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-1016.12113), (-1016.12113));
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(3488.1607, 4650.12862924);
      Complex complex1 = complex0.NaN.exp();
      double double0 = complex0.getReal();
      Complex complex2 = Complex.INF;
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex2.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tan();
      List<Complex> list0 = complex1.ONE.nthRoot(733);
      Complex complex2 = complex0.INF.negate();
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ZERO.acos();
      boolean boolean0 = complex3.equals(complex0);
      Complex complex5 = complex2.log();
      try { 
        complex5.INF.nthRoot((-492));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -492
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.atan();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex3.ONE.negate();
      List<Complex> list0 = complex3.nthRoot(3461);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.I.multiply((-861.0));
      Complex complex8 = complex7.negate();
      Complex complex9 = complex2.ZERO.log();
      Complex complex10 = complex2.negate();
      Complex complex11 = complex10.ONE.subtract(complex6);
      Complex complex12 = complex11.I.acos();
      Complex complex13 = complex1.negate();
      double double0 = complex13.getArgument();
      Complex complex14 = complex2.pow(complex5);
      Complex complex15 = complex13.tan();
      Complex complex16 = complex15.log();
      Complex complex17 = complex6.ONE.multiply(complex7);
      Complex complex18 = complex17.NaN.tanh();
      Complex complex19 = complex1.pow(complex7);
      List<Complex> list1 = complex1.nthRoot(3461);
      boolean boolean0 = complex14.isNaN();
      ComplexField complexField1 = complex19.getField();
      Complex complex20 = complex9.exp();
      Complex complex21 = complex8.exp();
      Complex complex22 = complex8.log();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.subtract(complex1);
      List<Complex> list0 = complex0.nthRoot(112);
      Complex complex3 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex0.cos();
      double double0 = complex3.ONE.abs();
      int int0 = complex2.hashCode();
      Complex complex5 = complex2.INF.createComplex(1.0, 6.283185307179586);
      double double1 = complex3.getArgument();
      Complex complex6 = complex3.log();
      int int1 = complex6.ZERO.hashCode();
      Complex complex7 = complex3.ZERO.asin();
      double double2 = complex1.abs();
      Complex complex8 = complex1.log();
      int int2 = complex8.INF.hashCode();
      double double3 = complex5.getArgument();
      Complex complex9 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex((-0.33333333333333287), (-0.33333333333333287));
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex0.pow(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.ONE.atan();
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex7.divide(complex5);
      Complex complex9 = complex7.ZERO.tanh();
      Complex complex10 = complex8.add(complex0);
      Complex complex11 = complex5.multiply(complex0);
      Complex complex12 = complex9.sqrt();
      Complex complex13 = complex8.atan();
      Complex complex14 = complex9.negate();
      Complex complex15 = complex7.tanh();
      Complex complex16 = complex15.ZERO.divide(complex1);
      double double0 = complex1.getReal();
      Complex complex17 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.I.sqrt();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex2.multiply(complex0);
      List<Complex> list0 = complex4.I.nthRoot(465);
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex0.ZERO.cos();
      Complex complex7 = complex2.divide(complex5);
      Complex complex8 = complex5.asin();
      double double0 = complex8.getArgument();
      Complex complex9 = complex1.divide(complex2);
      ComplexField complexField0 = complex4.getField();
      Complex complex10 = complex6.acos();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex2.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2.3841857910019882E-8, 10.0);
      Complex complex2 = complex1.I.exp();
      double double0 = complex0.ZERO.getArgument();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex1.divide(complex3);
      Complex complex8 = complex7.I.sqrt();
      Complex complex9 = complex7.ZERO.conjugate();
      boolean boolean0 = complex2.isInfinite();
      Complex complex10 = complex7.negate();
      String string0 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.I.negate();
      List<Complex> list0 = complex0.INF.nthRoot(249);
      int int0 = complex0.hashCode();
      String string0 = complex0.toString();
      double double0 = complex0.INF.getArgument();
      Complex complex3 = complex2.createComplex(1.494140625, (-808.03084888));
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex2.NaN.sinh();
      Complex complex7 = complex4.log();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex7.I.tanh();
      Complex complex10 = complex9.I.conjugate();
      Complex complex11 = complex3.add(complex0);
      Complex complex12 = complex0.ONE.acos();
      Complex complex13 = complex3.ZERO.multiply(complex9);
      Complex complex14 = complex1.sinh();
      Complex complex15 = complex3.cos();
      Complex complex16 = complex3.exp();
      Complex complex17 = complex14.log();
      Complex complex18 = complex1.tanh();
      Complex complex19 = complex17.NaN.createComplex((-3467.1267432575737), (-1946.41));
      Complex complex20 = complex12.exp();
      Complex complex21 = complex3.tanh();
      Complex complex22 = complex14.tan();
      double double1 = complex20.getReal();
      Object object0 = complex0.readResolve();
      String string1 = complex17.toString();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(1956.0, 3198.95029648135);
      Complex complex1 = complex0.ZERO.cos();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.INF.tan();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.divide(complex2);
      double double0 = complex2.abs();
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex4.I.pow(complex2);
      Object object0 = complex5.ZERO.readResolve();
      Complex complex6 = complex3.ZERO.sqrt();
      Complex complex7 = complex1.ONE.tanh();
      Complex complex8 = complex3.divide(complex1);
      Complex complex9 = complex8.I.negate();
      Complex complex10 = complex1.sqrt();
      String string0 = complex9.toString();
      double double1 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.divide(complex0);
      Object object0 = complex3.I.readResolve();
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex0.I.add(complex1);
      Complex complex6 = complex4.NaN.multiply(3588.69796629058);
      List<Complex> list0 = complex4.ZERO.nthRoot(749);
      double double0 = complex3.abs();
      Complex complex7 = complex2.INF.multiply(complex3);
      Complex complex8 = complex1.tanh();
      Object object1 = complex8.readResolve();
      Object object2 = complex2.readResolve();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex9.ONE.acos();
      Complex complex11 = complex6.INF.conjugate();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex10.NaN.divide(complex8);
      Complex complex14 = complex10.NaN.multiply(complex12);
      Complex complex15 = complex10.I.asin();
      Complex complex16 = complex0.NaN.multiply(complex8);
      Complex complex17 = complex16.cos();
      int int0 = complex2.hashCode();
      Complex complex18 = complex9.sin();
      double double1 = complex18.I.getArgument();
      Complex complex19 = complex6.I.acos();
      boolean boolean0 = complex1.equals("");
      Complex complex20 = complex3.sqrt();
      Complex complex21 = complex20.NaN.divide(complex2);
      try { 
        complex6.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sinh();
      double double0 = complex1.abs();
      Complex complex2 = complex1.INF.exp();
      int int0 = complex1.INF.hashCode();
      String string0 = complex1.I.toString();
      Complex complex3 = complex0.log();
      ComplexField complexField0 = complex3.I.getField();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex3.NaN.multiply(4791.0948);
      ComplexField complexField1 = complex4.NaN.getField();
      Complex complex5 = complex3.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(412.37275, 412.37275);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.createComplex(412.37275, 412.37275);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex2.pow(complex3);
      Complex complex6 = complex3.divide(complex4);
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex1.log();
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex8.pow(complex0);
      Complex complex10 = complex1.add(complex8);
      Complex complex11 = Complex.INF;
      Complex complex12 = complex9.add(complex11);
      Complex complex13 = complex6.tan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.ONE.createComplex(2226.05206924, 2226.05206924);
      double double0 = complex2.I.abs();
      double double1 = complex0.abs();
      String string0 = complex0.toString();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.NaN.divide(complex3);
      Complex complex5 = complex2.divide(complex1);
      boolean boolean0 = complex1.equals("IStH");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.atan();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex2.I.acos();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex0.acos();
      double double0 = complex1.getArgument();
      Complex complex8 = complex2.multiply(complex7);
      Complex complex9 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.multiply((-2187.27382));
      Complex complex3 = complex1.ONE.createComplex(Double.NaN, (-1185.239817900145));
      Complex complex4 = complex3.INF.multiply(complex1);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      boolean boolean0 = complex2.isInfinite();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.NaN.multiply(complex0);
      Object object1 = complex3.readResolve();
      boolean boolean1 = complex1.equals(object1);
      Complex complex5 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1443.623));
      Complex complex1 = Complex.ONE;
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.multiply(0.0);
      Complex complex4 = complex3.ZERO.sin();
      double double0 = complex2.abs();
      Complex complex5 = complex1.ONE.sqrt1z();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex0.tanh();
      int int1 = complex2.hashCode();
      Complex complex7 = complex6.add(complex0);
      boolean boolean1 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(3346.9343866, 3346.9343866);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.ZERO.add(complex0);
      Complex complex4 = complex2.I.acos();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex2.subtract(complex5);
      Complex complex7 = complex1.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex0.sin();
      ComplexField complexField0 = complex2.getField();
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex6.NaN.log();
      Complex complex8 = complex2.ONE.divide(complex4);
      Complex complex9 = complex3.NaN.multiply((-2159.886));
      boolean boolean0 = complex2.isNaN();
      Complex complex10 = complex2.subtract(complex3);
      Complex complex11 = complex9.acos();
      Complex complex12 = complex6.add(complex0);
      Complex complex13 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.INF.subtract(complex1);
      Complex complex6 = complex5.ZERO.pow(complex2);
      double double0 = complex4.getArgument();
      Complex complex7 = complex2.multiply(Double.NaN);
      boolean boolean0 = complex1.isInfinite();
      Complex complex8 = complex4.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.multiply((-466.9));
      String string0 = complex1.NaN.toString();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(2.479773539153719E-5, 2.479773539153719E-5);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.I.createComplex((-751.7520622), 1.0);
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1295.227425, 1295.227425);
      Complex complex2 = complex1.I.sqrt();
      int int0 = complex2.I.hashCode();
      Complex complex3 = complex0.add(complex1);
      double double0 = complex3.INF.abs();
      Complex complex4 = complex2.ONE.add(complex3);
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex5.ONE.add(complex1);
      ComplexField complexField0 = complex5.getField();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-323.246), (-323.246));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.ONE.sin();
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex0.isInfinite();
      int int0 = complex2.hashCode();
      Complex complex4 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.ZERO.divide(complex1);
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex0.conjugate();
      List<Complex> list0 = complex4.nthRoot(1);
      Complex complex6 = complex0.createComplex(1, Double.POSITIVE_INFINITY);
      Complex complex7 = complex4.cos();
      Complex complex8 = complex4.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.atan();
      int int0 = complex3.I.hashCode();
      Complex complex4 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.INF.pow(complex0);
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex0.sinh();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.exp();
      int int0 = complex1.hashCode();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.acos();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = complex0.I.negate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ONE.getField();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex1.INF.subtract(complex2);
      Complex complex4 = complex0.asin();
      List<Complex> list0 = complex4.ONE.nthRoot(1);
      Complex complex5 = complex2.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = complex3.NaN.divide(complex2);
      Complex complex5 = complex1.cos();
      try { 
        complex2.nthRoot((-810));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -810
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex1.INF.pow(complex0);
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex6.NaN.divide(complex2);
      Complex complex8 = complex6.ONE.acos();
      Object object0 = complex2.readResolve();
      Complex complex9 = complex3.I.multiply((-1.0));
      boolean boolean0 = complex2.equals(object0);
      Complex complex10 = complex3.subtract(complex6);
      Complex complex11 = complex7.asin();
      Complex complex12 = complex11.divide(complex8);
      try { 
        complex5.nthRoot((-1798));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,798
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.49536728921867335, 0.49536728921867335);
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.INF.acos();
      Complex complex4 = complex2.ZERO.cos();
      Object object0 = complex0.NaN.readResolve();
      Object object1 = complex0.readResolve();
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = complex0.ZERO.asin();
      Complex complex7 = complex0.I.acos();
      Complex complex8 = complex1.multiply(4546.351355897824);
      Complex complex9 = complex0.exp();
      Complex complex10 = complex9.NaN.sqrt();
      Complex complex11 = complex0.ZERO.log();
      Complex complex12 = complex1.multiply(complex3);
      Complex complex13 = complex3.INF.acos();
      Complex complex14 = complex0.cosh();
      Object object2 = new Object();
      boolean boolean0 = complex6.equals(object2);
      Complex complex15 = complex12.multiply(complex10);
      Complex complex16 = complex5.add(complex6);
      List<Complex> list0 = complex12.nthRoot(7);
      double double1 = complex4.abs();
      Complex complex17 = complex9.negate();
      Complex complex18 = complex6.atan();
      String string0 = complex17.toString();
      Complex complex19 = complex14.tan();
      Complex complex20 = complex13.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.I.negate();
      List<Complex> list0 = complex0.INF.nthRoot(249);
      int int0 = complex0.hashCode();
      String string0 = complex0.toString();
      double double0 = complex0.INF.getArgument();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex2.NaN.sinh();
      Complex complex7 = complex4.log();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex7.I.tanh();
      Complex complex10 = complex9.I.conjugate();
      Complex complex11 = complex3.add(complex0);
      Complex complex12 = complex0.ONE.acos();
      Complex complex13 = complex3.ZERO.multiply(complex9);
      Complex complex14 = complex1.sinh();
      Complex complex15 = complex3.cos();
      Complex complex16 = complex3.exp();
      Complex complex17 = complex14.log();
      Complex complex18 = complex1.tanh();
      Complex complex19 = Complex.ONE;
      Complex complex20 = complex12.exp();
      Complex complex21 = complex3.tanh();
      Complex complex22 = complex14.tan();
      double double1 = complex20.getReal();
      Object object0 = complex21.readResolve();
      String string1 = complex17.toString();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      ComplexField complexField0 = complex1.getField();
      double double0 = complex1.getImaginary();
      try { 
        complex0.nthRoot((-984));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -984
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.conjugate();
      String string0 = complex2.ZERO.toString();
      Object object0 = complex1.readResolve();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex3.ONE.subtract(complex2);
      Complex complex6 = complex5.NaN.divide(complex3);
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex7 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(1129.4, 1129.4);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex2.ONE.exp();
      int int0 = complex0.ONE.hashCode();
      Complex complex6 = complex0.ONE.sqrt1z();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex6.asin();
      Complex complex9 = complex4.asin();
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex6.ONE.readResolve();
      Complex complex10 = complex4.createComplex(1129.4, (-2671.9746887));
      double double0 = complex4.ZERO.abs();
      Complex complex11 = complex3.divide(complex2);
      Complex complex12 = complex11.NaN.cosh();
      Complex complex13 = complex0.subtract(complex10);
      Complex complex14 = complex13.I.exp();
      Complex complex15 = complex14.ONE.exp();
      Complex complex16 = complex0.tanh();
      double double1 = complex2.abs();
      boolean boolean0 = complex7.isNaN();
      Complex complex17 = complex7.sqrt();
      Complex complex18 = complex3.ONE.multiply(1129.4);
      Complex complex19 = complex8.tanh();
      Complex complex20 = complex12.multiply(1129.4);
      Complex complex21 = complex19.INF.subtract(complex20);
      String string0 = complex20.NaN.toString();
      boolean boolean1 = complex11.equals(complex5);
      boolean boolean2 = complex19.equals(complex0);
      Complex complex22 = complex10.acos();
      Complex complex23 = complex5.tanh();
      Complex complex24 = complex19.multiply(0.8414709848078965);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.exp();
      double double0 = complex1.ZERO.getArgument();
      Complex complex2 = complex0.atan();
      int int0 = 1632;
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex3.I.atan();
      List<Complex> list0 = complex4.INF.nthRoot(1632);
      List<Complex> list1 = complex2.nthRoot(1632);
      Complex complex5 = complex2.ZERO.log();
      Complex complex6 = complex0.divide(complex2);
      try { 
        complex6.INF.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.INF.sqrt();
      String string0 = complex1.toString();
      Complex complex2 = complex1.INF.cos();
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.INF.cos();
      Complex complex5 = complex4.INF.tanh();
      String string1 = complex1.toString();
      List<Complex> list0 = complex3.nthRoot(661);
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex6.ONE.sqrt1z();
      Object object0 = complex6.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex8 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.nthRoot(7);
      boolean boolean0 = complex0.equals(list0);
      Complex complex1 = Complex.INF;
      ComplexField complexField0 = complex1.ONE.getField();
      boolean boolean1 = complex0.equals(complex1);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.multiply(1.0);
      Complex complex4 = complex1.ZERO.subtract(complex2);
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex1.INF.createComplex(3008.966566901, 7);
      Complex complex7 = complex2.I.add(complex1);
      int int0 = complex2.hashCode();
      Complex complex8 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex0.multiply((-1.0));
      String string0 = complex0.ZERO.toString();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.I.multiply(complex0);
      Complex complex6 = complex3.NaN.pow(complex1);
      Object object0 = complex3.readResolve();
      double double0 = complex0.getReal();
      Complex complex7 = complex4.ZERO.log();
      Object object1 = complex7.ONE.readResolve();
      Complex complex8 = complex3.ZERO.multiply(0.0);
      double double1 = complex3.getArgument();
      int int0 = complex4.hashCode();
      int int1 = complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex1.add(complex0);
  }
}
