/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:15:20 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-2783.5005932791), 26.159141749628695);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.ZERO.createComplex(26.159141749628695, (-2783.5005932791));
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex0.log();
      List<Complex> list0 = complex6.nthRoot(17);
      Complex complex7 = Complex.ZERO;
      double double0 = complex7.abs();
      Complex complex8 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-2783.5005932791), (-1996.0583763));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.ZERO.createComplex((-1996.0583763), (-2783.5005932791));
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex0.log();
      List<Complex> list0 = complex6.nthRoot(17);
      Complex complex7 = complex0.conjugate();
      double double0 = complex7.abs();
      Complex complex8 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.hashCode();
      int int1 = complex0.I.hashCode();
      Complex complex1 = complex0.NaN.acos();
      int int2 = complex0.ONE.hashCode();
      String string0 = complex0.toString();
      String string1 = complex0.toString();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.ONE.pow(complex4);
      Complex complex6 = complex1.ONE.atan();
      Complex complex7 = complex4.NaN.tanh();
      boolean boolean0 = complex2.isInfinite();
      Complex complex8 = complex0.subtract(complex2);
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex1.acos();
      double double0 = complex10.abs();
      Complex complex11 = complex4.tanh();
      try { 
        complex2.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(13.07, 13.07);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex0.ZERO.conjugate();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex2.log();
      Complex complex8 = complex0.multiply(complex7);
      Complex complex9 = complex6.sqrt1z();
      boolean boolean0 = complex0.isInfinite();
      Complex complex10 = complex4.multiply(13.07);
      Complex complex11 = complex1.sqrt();
      Complex complex12 = complex0.cos();
      Complex complex13 = complex12.ZERO.sqrt1z();
      Complex complex14 = complex3.sinh();
      Complex complex15 = complex3.I.pow(complex5);
      Complex complex16 = complex12.NaN.createComplex(0.0, 9.219544613762692E-9);
      Complex complex17 = complex16.I.sinh();
      Complex complex18 = complex1.NaN.pow(complex3);
      Complex complex19 = complex16.NaN.tan();
      Complex complex20 = complex10.asin();
      Complex complex21 = complex6.conjugate();
      Complex complex22 = complex4.add(complex11);
      Complex complex23 = complex7.multiply(complex3);
      Complex complex24 = complex23.INF.negate();
      double double0 = complex6.getReal();
      Complex complex25 = complex21.conjugate();
      Complex complex26 = complex1.cosh();
      ComplexField complexField0 = complex6.getField();
      Complex complex27 = complex18.divide(complex22);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex4.ONE.multiply(0.0);
      Complex complex6 = complex4.atan();
      Complex complex7 = complex1.I.tanh();
      Complex complex8 = complex0.I.cos();
      List<Complex> list0 = complex1.nthRoot(50);
      Complex complex9 = complex0.ZERO.asin();
      double double0 = complex9.NaN.getArgument();
      Complex complex10 = complex9.divide(complex6);
      Complex complex11 = complex10.INF.sqrt1z();
      try { 
        complex7.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex3.ZERO.pow(complex1);
      Complex complex5 = complex4.INF.divide(complex0);
      Complex complex6 = complex3.INF.pow(complex0);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex0.ZERO.subtract(complex7);
      Complex complex9 = complex3.ONE.acos();
      String string0 = complex0.toString();
      Complex complex10 = complex3.ONE.atan();
      Complex complex11 = complex10.I.cosh();
      Complex complex12 = complex6.acos();
      Complex complex13 = complex0.I.cos();
      String string1 = complex1.toString();
      Complex complex14 = complex6.sqrt();
      Complex complex15 = complex7.ONE.negate();
      Complex complex16 = complex14.sinh();
      Complex complex17 = complex14.I.tanh();
      Complex complex18 = complex8.negate();
      double double0 = complex13.getArgument();
      String string2 = complex8.toString();
      Complex complex19 = complex18.sqrt1z();
      Complex complex20 = complex9.sin();
      Complex complex21 = complex20.INF.sqrt1z();
      Complex complex22 = complex13.log();
      Complex complex23 = complex22.NaN.tan();
      Complex complex24 = complex17.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex3.ZERO.pow(complex1);
      Complex complex5 = complex4.INF.divide(complex0);
      Complex complex6 = complex3.INF.pow(complex0);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex0.ZERO.subtract(complex7);
      Complex complex9 = complex3.ONE.acos();
      String string0 = complex0.toString();
      Complex complex10 = complex3.ONE.atan();
      Complex complex11 = complex10.I.cosh();
      Complex complex12 = complex6.acos();
      Complex complex13 = complex0.I.cos();
      String string1 = complex1.toString();
      Complex complex14 = complex6.sqrt();
      Complex complex15 = complex7.ONE.negate();
      Complex complex16 = complex14.sinh();
      Complex complex17 = complex14.I.tanh();
      Complex complex18 = complex8.negate();
      double double0 = complex13.getArgument();
      Complex complex19 = complex18.sqrt1z();
      Complex complex20 = complex9.sin();
      Complex complex21 = complex20.INF.sqrt1z();
      Complex complex22 = complex13.log();
      Complex complex23 = complex22.NaN.tan();
      Complex complex24 = complex17.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex0.ZERO.createComplex((-2808.369), 0.0);
      Complex complex5 = complex4.INF.subtract(complex1);
      Complex complex6 = complex1.ONE.log();
      double double0 = complex6.INF.abs();
      ComplexField complexField0 = complex6.ZERO.getField();
      int int0 = complex1.I.hashCode();
      Complex complex7 = complex6.INF.sinh();
      List<Complex> list0 = complex7.INF.nthRoot(17);
      ComplexField complexField1 = complex0.getField();
      double double1 = complex0.abs();
      Complex complex8 = complex0.ZERO.tan();
      Object object0 = complex1.readResolve();
      Complex complex9 = complex6.multiply(complex1);
      Complex complex10 = complex9.cos();
      Complex complex11 = complex10.subtract(complex7);
      Complex complex12 = complex6.exp();
      Complex complex13 = complex12.INF.sqrt1z();
      Complex complex14 = complex0.atan();
      Complex complex15 = complex12.sqrt1z();
      int int1 = complex9.hashCode();
      double double2 = complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ONE.toString();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex4.INF.sqrt();
      List<Complex> list0 = complex5.NaN.nthRoot(666);
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex6.ZERO.asin();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex8.tan();
      String string1 = complex9.INF.toString();
      double double0 = complex8.getArgument();
      Complex complex10 = complex4.cosh();
      int int0 = complex10.INF.hashCode();
      Complex complex11 = complex10.ZERO.pow(complex0);
      String string2 = complex11.ONE.toString();
      Complex complex12 = complex10.sqrt();
      Complex complex13 = complex12.ONE.conjugate();
      Complex complex14 = complex4.I.sinh();
      Complex complex15 = complex12.ONE.sqrt1z();
      Complex complex16 = complex10.tan();
      Complex complex17 = complex4.acos();
      Complex complex18 = complex0.conjugate();
      Complex complex19 = complex18.ZERO.atan();
      Complex complex20 = complex3.sqrt();
      double double1 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.exp();
      boolean boolean0 = complex1.equals(complex0);
      double double0 = complex2.abs();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.ZERO.multiply(1.0);
      Complex complex5 = complex3.NaN.sin();
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex0.I.add(complex3);
      Complex complex8 = complex7.I.sqrt();
      try { 
        complex2.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.sin();
      int int0 = complex2.I.hashCode();
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex0.tan();
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex5 = complex0.createComplex(630.991, Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.NaN.conjugate();
      boolean boolean1 = complex2.isInfinite();
      boolean boolean2 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.cos();
      Object object0 = complex0.readResolve();
      double double1 = complex0.getArgument();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex5.INF.pow(complex0);
      Complex complex7 = complex0.multiply(complex3);
      Complex complex8 = complex3.exp();
      Complex complex9 = complex1.NaN.createComplex(0.7853981633974483, 494.476595986947);
      Complex complex10 = complex1.multiply((-0.12502530217170715));
      Complex complex11 = complex4.divide(complex2);
      Complex complex12 = complex7.multiply(complex1);
      boolean boolean1 = complex10.equals(complex5);
      double double2 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex1.ONE.add(complex3);
      double double1 = complex0.getArgument();
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.ZERO.log();
      double double0 = complex0.abs();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.I.multiply(complex0);
      Complex complex5 = complex3.I.add(complex2);
      Complex complex6 = complex2.ONE.tan();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.ONE.cosh();
      Complex complex9 = complex7.sqrt1z();
      Complex complex10 = complex0.sqrt();
      Complex complex11 = complex2.exp();
      Complex complex12 = complex0.negate();
      Complex complex13 = complex12.INF.conjugate();
      Complex complex14 = complex11.negate();
      Complex complex15 = complex6.asin();
      String string1 = complex15.ZERO.toString();
      Complex complex16 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      double double0 = complex0.abs();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.ONE.divide(complex0);
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.NaN.multiply(complex5);
      Complex complex7 = complex6.ONE.negate();
      Complex complex8 = complex0.createComplex((-2491.7090046200055), (-1545.95814));
      Complex complex9 = complex0.cos();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex7.ONE.multiply(complex10);
      ComplexField complexField0 = complex7.getField();
      boolean boolean0 = complex6.isNaN();
      Complex complex12 = complex8.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.I.atan();
      Complex complex7 = complex3.exp();
      Complex complex8 = complex7.ZERO.negate();
      Complex complex9 = complex0.I.log();
      Complex complex10 = complex0.tan();
      Complex complex11 = complex1.I.cosh();
      Complex complex12 = complex10.INF.asin();
      Complex complex13 = complex12.I.sinh();
      Complex complex14 = complex10.NaN.sqrt1z();
      double double0 = complex0.getReal();
      double double1 = complex3.abs();
      Complex complex15 = complex1.sinh();
      Complex complex16 = complex4.conjugate();
      Complex complex17 = complex0.negate();
      Complex complex18 = complex8.sqrt();
      double double2 = complex2.getArgument();
      int int0 = complex18.hashCode();
      Complex complex19 = complex10.tanh();
      List<Complex> list0 = complex14.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex1.ONE.multiply(complex2);
      Complex complex4 = complex0.INF.pow(complex1);
      double double0 = complex0.getImaginary();
      Complex complex5 = complex2.acos();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.ZERO.sin();
      double double1 = complex0.getReal();
      Complex complex2 = complex0.multiply(Double.NaN);
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex3.NaN.createComplex(Double.NaN, 0.0);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.acos();
      int int0 = complex2.hashCode();
      Complex complex7 = complex0.add(complex3);
      Complex complex8 = complex3.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.ONE.sqrt1z();
      double double0 = complex1.INF.abs();
      Complex complex5 = complex3.conjugate();
      List<Complex> list0 = complex5.INF.nthRoot(1266);
      Complex complex6 = complex2.NaN.divide(complex3);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.ONE.multiply(complex7);
      Complex complex9 = complex6.sinh();
      Complex complex10 = complex5.NaN.subtract(complex2);
      Complex complex11 = complex10.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex12 = complex10.cosh();
      int int0 = complex10.INF.hashCode();
      String string0 = complex3.toString();
      Complex complex13 = Complex.INF;
      Complex complex14 = complex3.subtract(complex13);
      double double1 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(1024.0, 1.9699272335463627E-8);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex1.ONE.atan();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.NaN.add(complex3);
      try { 
        complex4.ONE.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-1861.3969132737), 1.375);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.INF.sqrt1z();
      Complex complex8 = complex7.INF.divide(complex3);
      Complex complex9 = complex1.multiply(1.375);
      Complex complex10 = complex2.ZERO.add(complex0);
      Complex complex11 = complex10.ZERO.pow(complex6);
      Object object0 = complex6.readResolve();
      Complex complex12 = complex2.ONE.cosh();
      Complex complex13 = complex1.exp();
      Complex complex14 = complex0.acos();
      Complex complex15 = complex2.sin();
      Complex complex16 = complex15.exp();
      Complex complex17 = complex16.exp();
      Complex complex18 = complex15.NaN.tan();
      Complex complex19 = complex6.cosh();
      Complex complex20 = complex14.cos();
      Complex complex21 = complex3.conjugate();
      Complex complex22 = complex1.tanh();
      Complex complex23 = complex9.sqrt();
      Complex complex24 = complex3.tan();
      Complex complex25 = complex9.createComplex((-1861.3969132737), (-2503.57189602443));
      Complex complex26 = complex0.sqrt1z();
      Complex complex27 = complex26.tanh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = complex3.ZERO.subtract(complex0);
      Complex complex5 = complex1.ZERO.sqrt1z();
      Complex complex6 = complex0.I.cosh();
      double double0 = complex1.abs();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.INF.divide(complex4);
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex9 = complex7.ZERO.sqrt1z();
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex2.negate();
      Complex complex12 = complex5.tan();
      Complex complex13 = complex11.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-1022.1900372), (-1022.1900372));
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.sinh();
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.cosh();
      boolean boolean0 = complex1.equals("");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(1655.56936962, 1423.2);
      Complex complex1 = complex0.createComplex(1423.2, 1423.2);
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex1.NaN.sin();
      String string0 = complex0.toString();
      Complex complex4 = complex2.ONE.pow(complex0);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.ONE.sinh();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex7.INF.tanh();
      Complex complex10 = complex2.multiply(2.0);
      String string1 = complex7.ONE.toString();
      String string2 = complex1.toString();
      Complex complex11 = complex1.exp();
      Complex complex12 = complex1.cos();
      Complex complex13 = complex3.tan();
      boolean boolean0 = complex12.isNaN();
      Complex complex14 = complex3.INF.subtract(complex6);
      boolean boolean1 = complex12.isNaN();
      Complex complex15 = complex8.add(complex3);
      boolean boolean2 = complex4.equals(complex5);
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex2.ONE.multiply((-1.0));
      double double0 = complex1.ONE.getArgument();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.ONE.add(complex2);
      Complex complex6 = complex4.NaN.cosh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex3.log();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex8.ONE.log();
      Complex complex10 = complex4.exp();
      Complex complex11 = complex10.add(complex5);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      ComplexField complexField0 = complex0.NaN.getField();
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.I.subtract(complex3);
      Object object0 = complex0.I.readResolve();
      Complex complex5 = complex2.ONE.createComplex(0.0, 0.0);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.INF.cos();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex8.I.multiply(0.0);
      Complex complex10 = complex6.createComplex(0.0, 0.0);
      boolean boolean0 = complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(220.8851210883689, 220.8851210883689);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.I.negate();
      Complex complex4 = complex0.cosh();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex0.log();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.I.multiply(220.8851210883689);
      Complex complex9 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt1z();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex2 = complex0.asin();
      double double0 = complex2.ZERO.getArgument();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex0.tanh();
      boolean boolean0 = complex2.isInfinite();
      double double1 = complex0.getArgument();
      Complex complex6 = complex5.ZERO.conjugate();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex7.INF.createComplex((-228.56569), 2.384185791015625E-7);
      Object object0 = complex5.readResolve();
      Complex complex9 = complex7.asin();
      double double2 = complex0.getImaginary();
      Complex complex10 = complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.conjugate();
      boolean boolean0 = complex3.isNaN();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.sinh();
      List<Complex> list0 = complex1.nthRoot(811);
      Complex complex6 = new Complex(811, (-236.45076537));
      boolean boolean0 = complex1.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex0.I.multiply(1402.125769278);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex3.I.add(complex0);
      double double0 = complex3.ONE.getArgument();
      Complex complex6 = complex2.I.tan();
      Complex complex7 = complex6.INF.exp();
      Complex complex8 = complex6.INF.cos();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex0.acos();
      Complex complex11 = complex10.ZERO.multiply(complex1);
      String string0 = complex2.toString();
      Object object0 = complex3.readResolve();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex11.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex1.ONE.createComplex(0.058823529411764705, 0.0);
      double double0 = complex0.getArgument();
      double double1 = complex1.abs();
      Complex complex4 = complex0.INF.multiply(complex3);
      Complex complex5 = complex4.divide(complex3);
      Complex complex6 = complex0.INF.negate();
      List<Complex> list0 = complex2.nthRoot(97);
      Complex complex7 = complex2.tanh();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex6.isNaN();
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex4.sqrt();
      double double2 = complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-399.0), (-0.12502530217170715));
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.tan();
      int int0 = complex2.I.hashCode();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex0.sqrt1z();
      Object object1 = complex5.NaN.readResolve();
      Complex complex6 = complex3.ZERO.pow(complex4);
      Complex complex7 = complex3.divide(complex1);
      Complex complex8 = complex7.I.cosh();
      ComplexField complexField0 = complex8.INF.getField();
      Complex complex9 = complex7.sqrt1z();
      Complex complex10 = complex0.ONE.sqrt();
      ComplexField complexField1 = complex0.getField();
      double double0 = complex0.getImaginary();
      Complex complex11 = complex5.tan();
      double double1 = complex1.getImaginary();
      double double2 = complex0.getArgument();
      Complex complex12 = complex0.subtract(complex5);
      ComplexField complexField2 = complex4.getField();
      List<Complex> list0 = complex9.nthRoot(929);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(859.5940324184835, 859.5940324184835);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.I.tan();
      Complex complex4 = complex3.I.sin();
      List<Complex> list0 = complex0.nthRoot(1696);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(6.283185307179586);
      String string0 = complex1.ONE.toString();
      double double0 = complex0.getArgument();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex0.pow(complex2);
      double double1 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex1.I.acos();
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex1.NaN.multiply(complex0);
      double double0 = complex6.getArgument();
      Complex complex7 = complex1.log();
      Complex complex8 = complex3.log();
      Complex complex9 = complex8.ZERO.cosh();
      double double1 = complex7.getArgument();
      double double2 = complex7.abs();
      Complex complex10 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.ZERO.cosh();
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.sin();
      Object object0 = complex0.NaN.readResolve();
      try { 
        complex9.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.subtract(complex1);
      boolean boolean0 = complex1.isNaN();
      Object object0 = complex3.ONE.readResolve();
      Complex complex4 = complex3.ZERO.cos();
      List<Complex> list0 = complex0.INF.nthRoot(2702);
      boolean boolean1 = complex0.isInfinite();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex5.ZERO.cosh();
      Complex complex7 = complex1.pow(complex5);
      Complex complex8 = complex7.ONE.log();
      Complex complex9 = complex2.exp();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.multiply((-1126.82352267));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex2.INF.atan();
      Complex complex5 = complex2.INF.cos();
      Object object0 = complex0.INF.readResolve();
      double double0 = complex1.abs();
      double double1 = complex1.getImaginary();
      int int0 = complex0.hashCode();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex0.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex2.ONE.sin();
      int int0 = complex0.hashCode();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex0.createComplex((-3942.45), (-3942.45));
      Complex complex7 = complex5.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      ComplexField complexField0 = complex0.getField();
      String string1 = complex0.toString();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.subtract(complex1);
      double double0 = complex2.getImaginary();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.createComplex(Double.NaN, (-858.87193));
      Complex complex5 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-555.1741735770744), 1933.58);
      Complex complex1 = complex0.ZERO.acos();
      int int0 = complex1.I.hashCode();
      String string0 = complex1.INF.toString();
      Complex complex2 = complex0.sin();
      boolean boolean0 = complex2.isNaN();
      Complex complex3 = complex2.negate();
      double double0 = complex2.getImaginary();
      boolean boolean1 = complex1.equals(complex2);
      Complex complex4 = complex1.acos();
      Complex complex5 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-1635.2659423219309), 47.75);
      Complex complex1 = complex0.exp();
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex0.NaN.negate();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.ONE.acos();
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex3.createComplex((-1635.2659423219309), 6.283185307179586);
      Complex complex8 = complex1.subtract(complex7);
      List<Complex> list0 = complex2.nthRoot(242);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex3.NaN.sin();
      double double0 = complex2.ZERO.abs();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.NaN.divide(complex2);
      Complex complex7 = complex2.log();
      Complex complex8 = complex7.INF.divide(complex5);
      Complex complex9 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.multiply((-979.6079));
      Complex complex4 = complex3.log();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.cos();
      double double0 = complex0.getReal();
      Complex complex4 = complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.acos();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex3.I.add(complex0);
      try { 
        complex0.nthRoot((-524));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -524
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-624.8), 1.2675934823758863E-8);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex3.sqrt1z();
      double double0 = complex5.I.abs();
      Complex complex6 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.INF.negate();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex2.add(complex0);
      Complex complex6 = complex3.divide(complex2);
      Complex complex7 = complex6.ONE.cosh();
      Complex complex8 = complex6.tan();
      Complex complex9 = complex3.cosh();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex1.sqrt1z();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.INF.multiply(1054.2330730855);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.ONE.divide(complex3);
      Complex complex6 = complex3.add(complex0);
      Object object0 = complex3.readResolve();
      Complex complex7 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(9.220590270857665E-9);
      ComplexField complexField0 = complex1.ONE.getField();
      String string0 = complex1.toString();
      Complex complex2 = complex0.negate();
      ComplexField complexField1 = complex2.I.getField();
      Complex complex3 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.NaN.log();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex3 = complex0.I.atan();
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.multiply((-1761.375000478986));
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ONE.atan();
      double double0 = complex1.getArgument();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sin();
      int int0 = complex0.ONE.hashCode();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.ZERO.tan();
      Complex complex4 = complex2.multiply(1.5430806348152437);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex4.NaN.sin();
      Complex complex9 = complex6.multiply(complex7);
      Complex complex10 = complex0.I.exp();
      Complex complex11 = complex6.acos();
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-1635.2659423219309), 47.75);
      Complex complex1 = complex0.exp();
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex0.NaN.negate();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.ONE.acos();
      Complex complex5 = complex3.ZERO.exp();
      Complex complex6 = complex1.log();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex3.createComplex((-1635.2659423219309), 6.283185307179586);
      Complex complex9 = complex1.subtract(complex8);
      List<Complex> list0 = complex2.nthRoot(242);
      double double0 = complex5.abs();
      Complex complex10 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      List<Complex> list0 = complex0.ZERO.nthRoot(1);
      Complex complex1 = complex0.INF.sinh();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex2 = complex0.ONE.negate();
      double double0 = complex0.INF.abs();
      double double1 = complex0.getImaginary();
      Complex complex3 = complex0.tan();
      double double2 = complex1.INF.abs();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex1.NaN.sqrt();
      double double3 = complex5.I.abs();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex3.acos();
      Complex complex8 = complex3.ZERO.sinh();
      Complex complex9 = complex6.atan();
      Complex complex10 = complex3.cosh();
      Complex complex11 = complex1.asin();
      ComplexField complexField1 = complex0.getField();
      Complex complex12 = complex1.subtract(complex11);
      Complex complex13 = complex3.pow(complex6);
      Complex complex14 = complex1.sin();
      Complex complex15 = complex2.negate();
      Complex complex16 = complex5.sqrt();
      double double4 = complex14.getArgument();
      Complex complex17 = complex0.cos();
      Complex complex18 = complex13.sin();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(3480.214101647553, Double.NaN);
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.divide(complex4);
      String string0 = complex4.toString();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex5.I.multiply(3473.0);
      Complex complex8 = complex6.createComplex(Double.NaN, Double.NaN);
      Complex complex9 = complex8.NaN.sinh();
      Complex complex10 = complex3.NaN.add(complex2);
      Complex complex11 = complex3.I.add(complex1);
      Complex complex12 = complex2.I.cosh();
      Complex complex13 = complex5.log();
      List<Complex> list0 = complex5.nthRoot(2872);
      Complex complex14 = complex3.createComplex(Double.NaN, 2872);
      double double0 = complex2.abs();
      Complex complex15 = complex1.log();
      Complex complex16 = complex15.sinh();
      Object object0 = complex15.INF.readResolve();
      Complex complex17 = complex3.NaN.divide(complex2);
      Complex complex18 = complex14.cos();
      Complex complex19 = complex3.log();
      Complex complex20 = complex10.log();
      Complex complex21 = complex4.sin();
      Complex complex22 = complex20.I.tanh();
      ComplexField complexField0 = complex22.INF.getField();
      Complex complex23 = complex5.tanh();
      Complex complex24 = complex19.ZERO.sqrt();
      Complex complex25 = complex20.asin();
      double double1 = complex11.getReal();
      Complex complex26 = complex23.asin();
      double double2 = complex19.getImaginary();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.NaN.sinh();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.NaN.tanh();
      ComplexField complexField0 = complex1.NaN.getField();
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.ONE.sqrt();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.INF.sqrt1z();
      Complex complex7 = complex6.ONE.pow(complex5);
      double double1 = complex6.INF.abs();
      Complex complex8 = Complex.ONE;
      boolean boolean0 = complex5.equals(complex8);
      boolean boolean1 = complex5.isInfinite();
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex10.ONE.negate();
      Complex complex12 = complex11.ZERO.pow(complex10);
      boolean boolean2 = complex5.isNaN();
      double double2 = complex4.getReal();
      Complex complex13 = complex9.exp();
      String string0 = complex12.toString();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex0.ZERO.atan();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.INF.pow(complex0);
      int int0 = complex0.INF.hashCode();
      Complex complex7 = complex3.I.multiply(complex2);
      Complex complex8 = complex0.NaN.add(complex6);
      Complex complex9 = complex6.I.asin();
      Complex complex10 = complex1.NaN.negate();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex3.getReal();
      Complex complex11 = complex3.ONE.multiply(complex4);
      ComplexField complexField1 = complex4.getField();
      Complex complex12 = complex6.ZERO.atan();
      Object object0 = complex0.readResolve();
      Complex complex13 = complex10.NaN.createComplex(1761.5661182, (-1725.0));
      Complex complex14 = complex11.I.pow(complex5);
      boolean boolean0 = complex2.equals("org.apache.commons.math.complex.Complex");
      boolean boolean1 = complex1.equals(complex6);
      Complex complex15 = complex3.sqrt();
      Complex complex16 = complex8.sqrt1z();
      ComplexField complexField2 = complex15.I.getField();
      Complex complex17 = complex15.asin();
      Complex complex18 = complex15.acos();
      Complex complex19 = complex11.pow(complex10);
      double double1 = complex14.getReal();
      boolean boolean2 = complex16.isNaN();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.conjugate();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex0.tan();
      Object object0 = complex2.INF.readResolve();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.NaN.tanh();
      Complex complex5 = complex2.NaN.sinh();
      Complex complex6 = complex2.acos();
      double double0 = complex0.ZERO.getArgument();
      int int0 = complex3.hashCode();
      Complex complex7 = complex6.sqrt();
      Object object1 = complex0.readResolve();
      Complex complex8 = complex4.exp();
      Complex complex9 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, (-3083.0));
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.ZERO.sqrt1z();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex1.NaN.sqrt();
      Object object0 = complex2.INF.readResolve();
      Complex complex5 = complex2.NaN.cos();
      Object object1 = complex5.readResolve();
      Object object2 = complex5.NaN.readResolve();
      Complex complex6 = complex5.divide(complex3);
      Object object3 = complex1.NaN.readResolve();
      Complex complex7 = complex3.I.sqrt1z();
      Complex complex8 = complex1.I.atan();
      Complex complex9 = complex5.ZERO.exp();
      Complex complex10 = complex1.atan();
      Complex complex11 = complex8.ZERO.multiply(complex2);
      double double1 = complex10.I.getArgument();
      Complex complex12 = complex2.asin();
      Complex complex13 = complex3.sqrt1z();
      boolean boolean1 = complex10.isNaN();
      double double2 = complex8.getArgument();
      Complex complex14 = complex5.negate();
      Complex complex15 = complex0.multiply(complex2);
      Complex complex16 = complex15.acos();
      Complex complex17 = complex1.conjugate();
      Complex complex18 = complex10.tanh();
      try { 
        complex12.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
