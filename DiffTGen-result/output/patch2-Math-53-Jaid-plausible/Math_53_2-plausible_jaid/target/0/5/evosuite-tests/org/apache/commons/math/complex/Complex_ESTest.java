/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:04:49 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-174.3522842), Double.NaN);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.createComplex(4179.117992, 4179.117992);
      Complex complex3 = complex0.INF.divide(complex1);
      ComplexField complexField0 = complex3.I.getField();
      Complex complex4 = complex1.ZERO.multiply(complex3);
      String string0 = complex0.toString();
      Complex complex5 = complex1.sin();
      String string1 = complex1.toString();
      Complex complex6 = complex5.INF.createComplex(4179.117992, Double.NaN);
      List<Complex> list0 = complex3.nthRoot(453);
      ComplexField complexField1 = complex0.getField();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.INF.exp();
      Complex complex10 = complex3.cos();
      Complex complex11 = complex10.tan();
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = complex8.ONE.cos();
      Complex complex14 = complex12.createComplex((-4670.5079115), 1151.23913148045);
      Complex complex15 = complex8.divide(complex5);
      List<Complex> list1 = complex4.nthRoot(321);
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.multiply(complex1);
      double double0 = complex0.ONE.abs();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.ZERO.subtract(complex2);
      List<Complex> list0 = complex1.NaN.nthRoot(268);
      Complex complex5 = complex3.ONE.exp();
      double double1 = complex0.abs();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex2.exp();
      boolean boolean0 = complex2.isInfinite();
      Complex complex8 = complex7.cos();
      List<Complex> list1 = complex0.ONE.nthRoot(263);
      Complex complex9 = complex7.NaN.atan();
      Complex complex10 = complex0.createComplex(1.0, (-321.9605));
      int int0 = complex7.INF.hashCode();
      ComplexField complexField0 = complex0.getField();
      boolean boolean1 = complex8.equals(complex6);
      boolean boolean2 = complex2.isNaN();
      Object object0 = complex0.readResolve();
      Complex complex11 = complex4.sqrt();
      double double2 = complex8.abs();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      double double0 = complex1.ONE.getArgument();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.ZERO.acos();
      double double1 = complex0.INF.abs();
      Complex complex4 = complex1.I.divide(complex2);
      Complex complex5 = complex2.tan();
      Complex complex6 = complex5.ZERO.asin();
      double double2 = complex5.INF.abs();
      double double3 = complex2.INF.abs();
      Object object1 = complex5.readResolve();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex7.INF.cos();
      Object object2 = complex2.readResolve();
      Complex complex9 = complex7.multiply(0.0);
      Complex complex10 = complex2.tan();
      Object object3 = complex9.readResolve();
      Complex complex11 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-908.0), 3574.9956194);
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex0.ONE.subtract(complex1);
      Complex complex4 = complex0.ZERO.negate();
      double double0 = complex0.abs();
      Complex complex5 = complex1.ZERO.multiply(complex2);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex0.ZERO.tanh();
      Complex complex8 = complex3.ONE.tan();
      ComplexField complexField0 = complex7.INF.getField();
      int int0 = complex0.hashCode();
      double double1 = complex0.abs();
      Complex complex9 = complex0.pow(complex3);
      Complex complex10 = complex5.multiply(complex0);
      Complex complex11 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(0.5, 6.283185307179586);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex2.ZERO.subtract(complex3);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex5 = complex1.ONE.multiply(complex0);
      Complex complex6 = complex5.INF.exp();
      Complex complex7 = complex1.cosh();
      int int0 = complex7.INF.hashCode();
      Complex complex8 = complex7.ONE.sqrt1z();
      Complex complex9 = complex0.NaN.sqrt1z();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex9.ONE.multiply(complex10);
      Complex complex12 = complex0.atan();
      Complex complex13 = complex8.ZERO.tan();
      double double0 = complex0.abs();
      double double1 = complex12.getReal();
      Complex complex14 = complex1.divide(complex8);
      Complex complex15 = complex3.add(complex8);
      Complex complex16 = complex6.subtract(complex12);
      double double2 = complex4.getImaginary();
      Complex complex17 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ONE.createComplex(0.0, 0.0);
      Complex complex3 = complex2.NaN.createComplex(4.503599627370496E15, 0.0);
      Complex complex4 = complex0.createComplex(0.0, 4.503599627370496E15);
      double double0 = complex4.INF.getArgument();
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = complex5.divide(complex4);
      Complex complex7 = complex6.sqrt();
      String string0 = complex7.NaN.toString();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex5.acos();
      Complex complex10 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt();
      String string0 = complex1.ONE.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      double double0 = complex3.NaN.getArgument();
      Complex complex4 = complex3.sqrt();
      Object object0 = complex3.readResolve();
      Complex complex5 = complex2.ZERO.asin();
      Complex complex6 = complex5.sin();
      double double1 = complex5.I.abs();
      Complex complex7 = complex2.ZERO.acos();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex0.ZERO.tan();
      String string1 = complex8.INF.toString();
      Complex complex10 = complex8.INF.createComplex(1.0, 0.0);
      Complex complex11 = complex10.subtract(complex7);
      Complex complex12 = Complex.INF;
      Complex complex13 = complex11.NaN.subtract(complex12);
      Complex complex14 = complex1.pow(complex8);
      Complex complex15 = complex14.INF.asin();
      Complex complex16 = complex2.conjugate();
      Complex complex17 = new Complex(Double.POSITIVE_INFINITY, (-96.1205805824));
      Complex complex18 = complex16.ZERO.multiply(complex17);
      Complex complex19 = complex10.cosh();
      Complex complex20 = complex19.divide(complex0);
      Complex complex21 = complex20.ZERO.negate();
      double double2 = complex7.abs();
      double double3 = complex9.abs();
      Complex complex22 = complex2.cos();
      boolean boolean1 = complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.divide(complex3);
      Object object0 = new Object();
      boolean boolean0 = complex3.equals(object0);
      Complex complex5 = complex3.add(complex4);
      boolean boolean1 = complex5.isInfinite();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex4.multiply((-2019.738569979));
      Complex complex10 = complex6.log();
      Complex complex11 = complex3.acos();
      Complex complex12 = complex5.acos();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(2377.315000645352, 2377.315000645352);
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.conjugate();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex2.equals(object0);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex5.I.sin();
      double double1 = complex2.abs();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex1.asin();
      Complex complex11 = complex10.divide(complex0);
      Complex complex12 = complex11.ZERO.sqrt();
      Complex complex13 = complex0.multiply(2377.315000645352);
      Complex complex14 = complex13.ZERO.acos();
      Complex complex15 = complex14.I.atan();
      int int0 = complex14.hashCode();
      Complex complex16 = complex9.atan();
      double double2 = complex6.getImaginary();
      Complex complex17 = complex9.tanh();
      int int1 = complex17.INF.hashCode();
      Complex complex18 = complex17.ONE.sinh();
      List<Complex> list0 = complex4.nthRoot(195);
      Complex complex19 = complex13.tanh();
      Complex complex20 = complex3.acos();
      boolean boolean1 = complex11.isInfinite();
      Complex complex21 = complex5.atan();
      Complex complex22 = complex9.sqrt();
      Complex complex23 = complex13.cosh();
      Complex complex24 = complex14.acos();
      Complex complex25 = complex24.cos();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-286.0), (-286.0));
      double double0 = complex0.abs();
      double double1 = complex0.getArgument();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ONE.cosh();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex4.ZERO.sqrt1z();
      Complex complex7 = complex1.pow(complex2);
      Complex complex8 = complex3.atan();
      Complex complex9 = complex4.ONE.asin();
      Complex complex10 = complex8.INF.cosh();
      Complex complex11 = complex10.ONE.createComplex((-286.0), (-286.0));
      Complex complex12 = complex11.ONE.atan();
      String string0 = complex6.INF.toString();
      double double2 = complex1.abs();
      Complex complex13 = complex8.tanh();
      Complex complex14 = complex13.ZERO.negate();
      Complex complex15 = complex8.tan();
      Complex complex16 = complex4.ONE.asin();
      int int0 = complex5.hashCode();
      double double3 = complex6.getImaginary();
      double double4 = complex1.abs();
      Complex complex17 = complex6.add(complex11);
      Complex complex18 = complex13.exp();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex3.ONE.add(complex0);
      Complex complex5 = complex4.INF.negate();
      double double0 = complex0.INF.abs();
      Complex complex6 = complex4.ONE.conjugate();
      Complex complex7 = complex3.ONE.tanh();
      int int0 = complex1.ZERO.hashCode();
      List<Complex> list0 = complex0.nthRoot(841);
      Complex complex8 = complex3.NaN.atan();
      Object object0 = complex4.readResolve();
      Complex complex9 = complex3.multiply(Double.POSITIVE_INFINITY);
      double double1 = complex9.ZERO.getArgument();
      Complex complex10 = complex2.INF.conjugate();
      Complex complex11 = complex9.NaN.cosh();
      Complex complex12 = complex3.pow(complex0);
      Complex complex13 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex2.NaN.tan();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex1.INF.cos();
      double double0 = complex1.getArgument();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex2.ZERO.subtract(complex3);
      int int0 = complex5.hashCode();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex1.ZERO.exp();
      Complex complex9 = complex7.divide(complex2);
      Complex complex10 = complex9.I.divide(complex3);
      Complex complex11 = complex9.sqrt1z();
      double double1 = complex11.INF.abs();
      Complex complex12 = complex2.multiply(complex7);
      Complex complex13 = complex5.divide(complex6);
      ComplexField complexField0 = complex3.getField();
      Complex complex14 = complex12.divide(complex5);
      Complex complex15 = complex4.log();
      try { 
        complex13.nthRoot((-4921));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,921
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.tanh();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.ONE.sqrt1z();
      Complex complex4 = complex3.I.conjugate();
      int int0 = complex2.hashCode();
      Complex complex5 = complex2.log();
      Complex complex6 = complex5.I.createComplex(1854.514062511735, 1854.514062511735);
      Complex complex7 = complex0.exp();
      Complex complex8 = complex2.negate();
      double double0 = complex2.abs();
      Complex complex9 = complex2.add(complex1);
      Complex complex10 = complex9.log();
      Complex complex11 = complex5.conjugate();
      double double1 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.06666666666666667, (-991.192543));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex1.ONE.tan();
      Complex complex7 = complex6.INF.negate();
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex5.atan();
      Complex complex10 = complex2.conjugate();
      Complex complex11 = complex9.tanh();
      Complex complex12 = complex10.multiply((-238.8925581));
      Complex complex13 = complex9.divide(complex12);
      Object object0 = new Object();
      boolean boolean0 = complex12.equals(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.multiply((-395.657076607));
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex3 = complex1.I.asin();
      Complex complex4 = complex0.I.multiply(complex1);
      Complex complex5 = complex4.I.sqrt();
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex2.sinh();
      String string0 = complex6.I.toString();
      Complex complex7 = complex1.createComplex((-3143.0), 0.0);
      Object object0 = complex1.I.readResolve();
      Complex complex8 = complex4.asin();
      boolean boolean1 = complex3.equals(complex0);
      Complex complex9 = complex6.multiply(0.0);
      Complex complex10 = complex4.divide(complex0);
      Complex complex11 = complex4.atan();
      List<Complex> list0 = complex10.nthRoot(73);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1805.0), Double.NaN);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.createComplex((-1805.0), (-1805.0));
      Complex complex4 = complex0.I.sinh();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex2.I.asin();
      Complex complex7 = complex3.NaN.multiply(complex5);
      Complex complex8 = complex1.I.atan();
      Complex complex9 = complex2.negate();
      Complex complex10 = complex3.pow(complex0);
      Complex complex11 = complex10.INF.divide(complex6);
      boolean boolean0 = complex0.isInfinite();
      Complex complex12 = complex0.log();
      Complex complex13 = complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.atan();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex1.add(complex5);
      Complex complex8 = complex1.asin();
      Complex complex9 = complex2.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-1877.6824821393416), Double.NaN);
      Complex complex1 = complex0.INF.sqrt1z();
      int int0 = complex0.I.hashCode();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = new Complex(Double.NaN, (-1877.6824821393416));
      Complex complex5 = complex0.sin();
      boolean boolean0 = complex0.equals(complex4);
      double double0 = complex4.NaN.getArgument();
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex6.INF.createComplex(0.06666666666666667, 0.0);
      Complex complex8 = complex4.negate();
      Complex complex9 = complex8.pow(complex4);
      Complex complex10 = complex8.pow(complex0);
      Complex complex11 = complex10.I.log();
      Complex complex12 = complex10.ZERO.tan();
      Complex complex13 = complex8.createComplex((-1877.6824821393416), 2.0);
      Complex complex14 = complex13.ONE.asin();
      Complex complex15 = complex1.tanh();
      Object object0 = complex4.readResolve();
      boolean boolean1 = complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(737.0375203525531, 737.0375203525531);
      Complex complex1 = new Complex(2295.0, (-1.0));
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex2.ZERO.atan();
      Complex complex5 = complex3.ONE.multiply(complex0);
      Complex complex6 = complex1.ZERO.sqrt();
      Complex complex7 = complex2.multiply((-232.578889));
      Complex complex8 = complex7.I.cosh();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.subtract(complex1);
      List<Complex> list0 = complex1.ZERO.nthRoot(1);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = complex5.atan();
      double double0 = complex0.abs();
      Complex complex8 = complex5.negate();
      ComplexField complexField0 = complex8.INF.getField();
      ComplexField complexField1 = complex0.getField();
      Complex complex9 = complex3.exp();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex0.negate();
      boolean boolean0 = complex1.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex1.INF.createComplex(667.7603992, 266.7);
      Complex complex4 = new Complex(1472.6425, 1472.6425);
      Complex complex5 = complex3.exp();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex0.multiply(complex4);
      Complex complex8 = complex7.NaN.tan();
      Complex complex9 = complex4.pow(complex0);
      Complex complex10 = complex9.ONE.conjugate();
      Complex complex11 = complex0.I.tan();
      boolean boolean0 = complex9.equals(complex3);
      Object object0 = complex5.readResolve();
      Complex complex12 = complex9.exp();
      Complex complex13 = complex3.acos();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.atan();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.ZERO.multiply((-2435.40438208));
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.I.tanh();
      Complex complex6 = complex0.I.atan();
      Complex complex7 = complex2.ZERO.atan();
      Complex complex8 = complex7.ONE.subtract(complex1);
      Complex complex9 = complex1.sqrt1z();
      ComplexField complexField1 = complex2.INF.getField();
      Complex complex10 = complex7.I.sinh();
      Complex complex11 = complex1.I.exp();
      double double0 = complex8.getReal();
      Complex complex12 = complex9.ZERO.createComplex((-2435.40438208), 0.21460183660255172);
      boolean boolean0 = complex2.isInfinite();
      Complex complex13 = complex7.divide(complex9);
      boolean boolean1 = complex9.isNaN();
      Complex complex14 = complex4.multiply(complex2);
      double double1 = complex5.getImaginary();
      double double2 = complex13.getArgument();
      Complex complex15 = complex13.multiply(complex10);
      Complex complex16 = complex12.cos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.INF.pow(complex2);
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex0.multiply(1729.1274610435);
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = complex6.NaN.divide(complex1);
      double double0 = complex8.ONE.getArgument();
      Complex complex9 = complex6.atan();
      Complex complex10 = complex8.asin();
      Complex complex11 = complex10.sqrt();
      Complex complex12 = complex6.cos();
      Complex complex13 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.createComplex((-1245.337095), 2.718281828459045);
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.INF.tanh();
      Complex complex7 = complex6.createComplex((-1245.337095), (-1245.337095));
      Complex complex8 = complex5.sqrt();
      String string0 = complex2.toString();
      Complex complex9 = complex6.multiply((-1953.33988264));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.createComplex(0.0, 0.0);
      List<Complex> list0 = complex0.I.nthRoot(99);
      Complex complex2 = complex1.log();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ONE.multiply(complex1);
      Complex complex5 = complex3.divide(complex1);
      Complex complex6 = complex5.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-286.108795), 0.0);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex4.NaN.multiply(0.0);
      Complex complex6 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-59.0768), (-59.0768));
      String string0 = complex0.toString();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.cosh();
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.NaN.cosh();
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex5.ZERO.divide(complex2);
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex0.multiply((-59.0768));
      Complex complex9 = complex8.ZERO.conjugate();
      Complex complex10 = complex8.ONE.sin();
      Complex complex11 = complex10.ZERO.pow(complex7);
      Complex complex12 = complex2.ONE.exp();
      Complex complex13 = complex8.pow(complex2);
      Complex complex14 = complex13.cosh();
      Complex complex15 = complex8.acos();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.ONE.divide(complex3);
      Complex complex5 = complex3.INF.sqrt();
      Complex complex6 = complex0.ONE.multiply(complex3);
      Complex complex7 = complex0.atan();
      double double0 = complex2.getReal();
      Complex complex8 = complex3.negate();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex3.I.sin();
      double double1 = complex1.getImaginary();
      Complex complex11 = complex7.cosh();
      double double2 = complex2.abs();
      Complex complex12 = complex6.INF.cos();
      Complex complex13 = complex6.sqrt1z();
      Complex complex14 = complex13.NaN.conjugate();
      Complex complex15 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex3.INF.multiply(3.141592653589793);
      Complex complex6 = complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-390.1498126), (-161.6));
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.NaN.cos();
      double double0 = complex0.abs();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex3.ONE.conjugate();
      Complex complex7 = complex5.tan();
      int int0 = complex0.hashCode();
      Complex complex8 = complex3.acos();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex9.NaN.multiply(complex10);
      Complex complex12 = complex1.sinh();
      double double1 = complex12.I.abs();
      int int1 = complex1.hashCode();
      Complex complex13 = complex3.subtract(complex10);
      Complex complex14 = complex5.createComplex(0.0, 0.6931470632553101);
      boolean boolean0 = complex5.isNaN();
      double double2 = complex12.getArgument();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.INF.pow(complex2);
      ComplexField complexField0 = complex0.getField();
      double double0 = complex3.abs();
      Complex complex4 = complex0.createComplex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-31.0), (-31.0));
      Complex complex1 = complex0.ONE.negate();
      double double0 = complex1.ZERO.abs();
      Complex complex2 = complex0.I.createComplex((-31.0), 0.0);
      String string0 = complex0.ZERO.toString();
      List<Complex> list0 = complex0.NaN.nthRoot(216);
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex3.I.atan();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex0.INF.add(complex6);
      Complex complex8 = complex5.ONE.pow(complex2);
      Complex complex9 = complex0.asin();
      ComplexField complexField0 = complex9.getField();
      String string1 = complex2.toString();
      Complex complex10 = complex9.divide(complex0);
      double double1 = complex9.getReal();
      Complex complex11 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ONE.add(complex0);
      Complex complex4 = complex0.ONE.multiply((-1044.8));
      Complex complex5 = complex2.cosh();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex6 = complex1.INF.asin();
      Complex complex7 = complex3.divide(complex0);
      Object object0 = complex1.readResolve();
      int int0 = complex1.hashCode();
      Complex complex8 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.negate();
      List<Complex> list0 = complex0.INF.nthRoot(2983);
      double double0 = complex0.getReal();
      Complex complex3 = complex2.cosh();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex0.multiply(complex2);
      boolean boolean0 = complex3.isInfinite();
      Complex complex7 = complex6.tanh();
      Object object1 = complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.INF.sqrt1z();
      double double0 = complex4.getReal();
      Complex complex7 = complex3.sqrt1z();
      String string0 = complex7.toString();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex1.createComplex((-31.231731), 0.0);
      boolean boolean0 = complex2.isInfinite();
      Complex complex10 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex1.multiply((-2186.65391));
      List<Complex> list0 = complex4.nthRoot(1);
      Complex complex5 = complex4.cos();
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ZERO.sqrt();
      Object object0 = complex1.NaN.readResolve();
      double double0 = complex2.INF.abs();
      Complex complex3 = complex2.I.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.NaN.cosh();
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex1.multiply((-295.0));
      Complex complex6 = complex5.I.tan();
      Complex complex7 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex0.exp();
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex1);
      double double0 = complex1.INF.getArgument();
      Object object0 = new Object();
      boolean boolean1 = complex1.equals(object0);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(1523.0803306, 1523.0803306);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.atan();
      String string0 = complex3.I.toString();
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex2.pow(complex0);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt1z();
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      String string0 = complex0.toString();
      Complex complex3 = complex1.multiply(complex0);
      boolean boolean0 = complex3.equals(complex0);
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.ZERO.sqrt();
      Complex complex8 = complex2.add(complex6);
      Complex complex9 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.multiply(1481.67);
      Complex complex3 = complex2.asin();
      boolean boolean0 = complex3.isNaN();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-1517.338), (-2020.0));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply(3468.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.ONE.pow(complex2);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex2.sin();
      boolean boolean1 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.I.createComplex((-4417.35388378), (-4417.35388378));
      List<Complex> list0 = complex1.NaN.nthRoot(1);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-1457.835442), (-1457.835442));
      Complex complex1 = Complex.ZERO;
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex0.divide(complex1);
      try { 
        complex2.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.19999999999923582, Double.POSITIVE_INFINITY);
      double double0 = complex0.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex1.ONE.cosh();
      Complex complex7 = complex1.atan();
      boolean boolean0 = complex1.isNaN();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ZERO.divide(complex0);
      List<Complex> list0 = complex2.nthRoot(1);
      List<Complex> list1 = complex2.nthRoot(2229);
      Complex complex6 = complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-602.0), (-602.0));
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(634.7243501, 634.7243501);
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = new Complex((-0.16624882440418567), (-0.5));
      Complex complex5 = complex1.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.I.multiply((-0.0013888888689039883));
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex2.ONE.createComplex(0.0, 0.0);
      Complex complex6 = complex2.NaN.sinh();
      Complex complex7 = complex5.INF.conjugate();
      Complex complex8 = complex7.INF.negate();
      Complex complex9 = complex8.ONE.atan();
      Complex complex10 = complex9.createComplex((-7.800414592973399E-9), 0.0);
      Object object0 = complex2.readResolve();
      Complex complex11 = complex7.sinh();
      Complex complex12 = complex11.NaN.sinh();
      Complex complex13 = complex11.ONE.tan();
      Complex complex14 = complex13.ONE.tanh();
      Complex complex15 = complex2.cosh();
      Complex complex16 = complex1.conjugate();
      Complex complex17 = complex16.INF.cos();
      Complex complex18 = complex16.acos();
      Complex complex19 = complex5.createComplex((-0.0013888888689039883), Double.NaN);
      ComplexField complexField0 = complex2.NaN.getField();
      double double0 = complex19.getArgument();
      Complex complex20 = complex16.ONE.tan();
      boolean boolean0 = complex15.equals(complex7);
      Complex complex21 = complex0.sinh();
      double double1 = complex21.getArgument();
      Complex complex22 = complex21.negate();
      try { 
        complex2.nthRoot((-2853));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,853
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      try { 
        complex0.ZERO.nthRoot((-474));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -474
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Object object0 = complex1.NaN.readResolve();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex3.ONE.cosh();
      double double0 = complex0.getImaginary();
      List<Complex> list0 = complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.ONE.readResolve();
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.sqrt();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.ONE.cos();
      int int0 = complex0.hashCode();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.cosh();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sinh();
      ComplexField complexField0 = complex1.NaN.getField();
      String string0 = complex1.ZERO.toString();
      String string1 = complex1.toString();
      Complex complex2 = complex0.I.negate();
      double double0 = complex2.ZERO.getArgument();
      Complex complex3 = complex2.ZERO.tanh();
      ComplexField complexField1 = complex0.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex1.subtract(complex0);
      Complex complex8 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(2204.81114404202, (-3336.9664562413063));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = new Complex((-3336.9664562413063), (-1963.0));
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.ZERO.cos();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.INF.add(complex2);
      Complex complex7 = complex2.cosh();
      double double0 = complex7.abs();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.sqrt1z();
      String string0 = complex1.toString();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.NaN;
      boolean boolean0 = complex2.equals(complex3);
      Complex complex4 = complex2.negate();
      Complex complex5 = complex3.multiply(0.0);
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex2.I.tanh();
      double double0 = complex0.abs();
      double double1 = complex2.abs();
      Complex complex9 = complex5.INF.createComplex(2.0, Double.NaN);
      Complex complex10 = complex9.INF.negate();
      Complex complex11 = complex6.ONE.pow(complex3);
      boolean boolean1 = complex5.isNaN();
      Complex complex12 = complex2.negate();
      Complex complex13 = complex4.tan();
      ComplexField complexField0 = complex6.getField();
      Complex complex14 = complex4.pow(complex2);
      Complex complex15 = complex14.exp();
      double double2 = complex15.INF.getArgument();
      Complex complex16 = complex12.createComplex((-1168.00161), 0.0);
      Complex complex17 = complex16.NaN.conjugate();
      Object object0 = complex17.ZERO.readResolve();
      Complex complex18 = complex5.sqrt1z();
      boolean boolean2 = complex16.isInfinite();
      Complex complex19 = complex2.multiply(complex3);
      boolean boolean3 = complex12.equals(complex4);
      Complex complex20 = complex1.pow(complex8);
      Complex complex21 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.multiply(complex1);
      Object object0 = complex0.I.readResolve();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.createComplex(172.9494240701302, 172.9494240701302);
      boolean boolean0 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cosh();
      List<Complex> list0 = complex1.I.nthRoot(52);
      List<Complex> list1 = complex0.I.nthRoot(52);
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex0.I.exp();
      double double0 = complex0.getArgument();
      Complex complex6 = complex0.conjugate();
      int int1 = complex6.I.hashCode();
      Complex complex7 = complex5.log();
      double double1 = complex6.getImaginary();
      Complex complex8 = complex2.divide(complex7);
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex3.negate();
      Complex complex11 = complex6.asin();
      Complex complex12 = complex6.multiply((double) 52);
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(1032.0686765, 1553.6287184608684);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex3.INF.log();
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex7 = complex6.cos();
      double double0 = complex3.I.getArgument();
      Complex complex8 = complex1.pow(complex2);
      Complex complex9 = complex0.multiply(complex1);
      Complex complex10 = complex2.cosh();
      Complex complex11 = complex0.I.multiply((-2851.4574411));
      Complex complex12 = complex11.I.divide(complex2);
      Complex complex13 = complex12.ONE.exp();
      Complex complex14 = complex9.multiply(1090.449290768);
      Complex complex15 = complex14.ONE.createComplex((-442.4561821), 1553.6287184608684);
      double double1 = complex4.ZERO.abs();
      Complex complex16 = complex14.I.multiply((-2851.4574411));
      Object object0 = complex16.INF.readResolve();
      Complex complex17 = complex11.asin();
      Complex complex18 = complex0.conjugate();
      Complex complex19 = complex17.negate();
      Complex complex20 = complex8.cosh();
      Complex complex21 = complex8.tanh();
      double double2 = complex1.getReal();
      Complex complex22 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getImaginary();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex3.ONE.log();
      Object object0 = complex5.ZERO.readResolve();
      Complex complex6 = complex4.ZERO.sqrt1z();
      double double0 = complex0.getReal();
      Complex complex7 = complex0.multiply(1.0);
      Complex complex8 = complex7.INF.add(complex6);
      boolean boolean0 = complex0.isNaN();
      String string0 = complex3.toString();
      double double1 = complex1.getArgument();
      int int0 = complex3.hashCode();
      List<Complex> list0 = complex6.nthRoot(37);
      Complex complex9 = complex6.INF.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.INF.multiply(0.0);
      Object object1 = complex3.readResolve();
      Complex complex11 = complex6.cosh();
      Complex complex12 = complex11.NaN.sqrt1z();
      int int1 = complex12.ONE.hashCode();
      Complex complex13 = complex12.INF.log();
      Complex complex14 = complex3.exp();
      List<Complex> list1 = complex14.INF.nthRoot(37);
      ComplexField complexField1 = complex0.getField();
      double double2 = complex2.getImaginary();
      Complex complex15 = complex3.tanh();
      Complex complex16 = complex15.NaN.conjugate();
      Complex complex17 = complex5.acos();
      Complex complex18 = complex0.subtract(complex11);
      Complex complex19 = complex11.createComplex(Double.POSITIVE_INFINITY, 2859.460915160916);
      Complex complex20 = complex14.divide(complex18);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.I.sinh();
      List<Complex> list0 = complex2.nthRoot(37);
      Object object0 = complex0.ZERO.readResolve();
      double double0 = complex0.getReal();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex1.ONE.exp();
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex0.INF.sin();
      double double1 = complex6.I.abs();
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.atan();
      int int0 = complex2.hashCode();
      double double2 = complex8.ZERO.getArgument();
      double double3 = complex0.getReal();
      Object object1 = complex8.ONE.readResolve();
      boolean boolean0 = complex8.isInfinite();
      double double4 = complex8.getImaginary();
      boolean boolean1 = complex0.equals(object0);
      Complex complex9 = complex8.exp();
      Complex complex10 = complex7.ONE.add(complex0);
      Complex complex11 = complex9.INF.cosh();
      Complex complex12 = complex9.ONE.sin();
      double double5 = complex7.getArgument();
      int int1 = complex0.hashCode();
      List<Complex> list1 = complex8.nthRoot(2134);
      Complex complex13 = complex12.conjugate();
      Complex complex14 = complex4.cos();
      Complex complex15 = complex2.createComplex(26.846932, 1.0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.NaN.sqrt1z();
      Object object0 = complex2.readResolve();
      Complex complex4 = complex0.divide(complex1);
      double double0 = complex4.INF.getArgument();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex0.log();
      double double1 = complex5.abs();
      boolean boolean0 = complex5.isNaN();
      Complex complex7 = complex0.subtract(complex5);
      Complex complex8 = complex7.ZERO.sin();
      Object object1 = complex5.readResolve();
      boolean boolean1 = complex7.equals(object1);
      double double2 = complex3.getArgument();
      Complex complex9 = complex2.negate();
      double double3 = complex5.getArgument();
      Complex complex10 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex1.I.pow(complex0);
      Complex complex4 = complex1.ONE.sinh();
      Complex complex5 = complex4.I.sqrt();
      try { 
        complex1.nthRoot((-1205));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,205
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
