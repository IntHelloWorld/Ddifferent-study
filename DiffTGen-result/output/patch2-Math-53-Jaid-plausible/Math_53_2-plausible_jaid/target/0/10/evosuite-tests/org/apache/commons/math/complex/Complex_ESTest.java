/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 23:08:21 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.I.cos();
      double double0 = complex0.I.getArgument();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.INF.sin();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.sinh();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.I.multiply(1.5707963267948966);
      Complex complex9 = complex5.subtract(complex7);
      Complex complex10 = complex7.multiply(complex4);
      Complex complex11 = complex10.acos();
      double double1 = complex9.abs();
      Complex complex12 = complex6.add(complex9);
      Complex complex13 = complex9.ZERO.createComplex(1.5707963267948966, Double.NaN);
      Complex complex14 = complex6.I.sqrt1z();
      Complex complex15 = complex4.sqrt();
      Complex complex16 = complex15.ONE.tan();
      Object object1 = complex16.I.readResolve();
      String string0 = complex12.toString();
      Complex complex17 = new Complex(Double.NaN, 1.5707963267948966);
      Complex complex18 = complex17.INF.sqrt();
      int int0 = complex0.hashCode();
      Complex complex19 = complex6.cosh();
      ComplexField complexField0 = complex0.getField();
      double double2 = complex8.abs();
      Complex complex20 = complex1.sqrt();
      Complex complex21 = complex7.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-421.0), (-421.0));
      double double0 = complex0.INF.abs();
      Object object0 = complex0.INF.readResolve();
      Object object1 = complex0.readResolve();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.tan();
      double double1 = complex1.getReal();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex5.INF.add(complex1);
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex7.ZERO.log();
      Complex complex10 = complex4.INF.sqrt();
      ComplexField complexField0 = complex7.getField();
      Complex complex11 = complex4.atan();
      double double2 = complex4.getArgument();
      double double3 = complex4.getArgument();
      Complex complex12 = complex8.tanh();
      Complex complex13 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.createComplex((-327.025776930839), (-327.025776930839));
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex2.NaN.atan();
      double double0 = complex0.getImaginary();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex2 = complex1.NaN.atan();
      double double0 = complex1.ZERO.abs();
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex1.sqrt();
      double double1 = complex0.ZERO.getArgument();
      Complex complex5 = complex0.INF.subtract(complex1);
      boolean boolean0 = complex0.isInfinite();
      double double2 = complex1.INF.abs();
      double double3 = complex1.getImaginary();
      String string0 = complex1.ONE.toString();
      Complex complex6 = complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.multiply(complex4);
      Complex complex8 = complex0.NaN.atan();
      Complex complex9 = complex6.INF.sqrt1z();
      Complex complex10 = complex9.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex11 = complex1.INF.tanh();
      Complex complex12 = complex1.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex13 = complex5.divide(complex12);
      Complex complex14 = complex4.asin();
      Complex complex15 = complex12.multiply(Double.POSITIVE_INFINITY);
      Object object1 = complex7.readResolve();
      double double4 = complex9.getImaginary();
      double double5 = complex3.getArgument();
      Complex complex16 = complex1.add(complex3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex2 = complex1.NaN.atan();
      double double0 = complex1.ZERO.abs();
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex1.sqrt();
      double double1 = complex0.ZERO.getArgument();
      Complex complex5 = complex0.INF.subtract(complex1);
      double double2 = complex1.INF.abs();
      double double3 = complex1.getImaginary();
      String string0 = complex1.ONE.toString();
      Complex complex6 = complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.multiply(complex4);
      Complex complex8 = complex0.NaN.atan();
      Complex complex9 = complex6.INF.sqrt1z();
      Complex complex10 = complex9.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex11 = complex1.INF.tanh();
      Complex complex12 = complex1.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex13 = complex5.divide(complex12);
      Complex complex14 = complex12.multiply(Double.POSITIVE_INFINITY);
      Object object1 = complex7.readResolve();
      double double4 = complex9.getImaginary();
      double double5 = complex3.getArgument();
      Complex complex15 = complex1.add(complex3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.sin();
      boolean boolean0 = complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      Complex complex2 = complex0.ONE.conjugate();
      try { 
        complex0.INF.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-5361.99044), 5.650007086920087E-9);
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(1028.5820589425725, 1028.5820589425725);
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.I.add(complex1);
      Complex complex4 = complex3.ZERO.subtract(complex0);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.log();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex1.sqrt1z();
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex1.acos();
      double double0 = complex1.getArgument();
      Complex complex10 = complex2.sinh();
      double double1 = complex1.getArgument();
      try { 
        complex8.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.ONE.cos();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex4.ONE.atan();
      double double0 = complex0.abs();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.divide(complex0);
      Complex complex8 = complex0.ONE.cos();
      Complex complex9 = complex8.ZERO.sqrt1z();
      double double1 = complex2.abs();
      Complex complex10 = complex1.multiply(0.0);
      Complex complex11 = complex1.tanh();
      Object object0 = new Object();
      boolean boolean0 = complex2.equals(object0);
      int int0 = complex1.I.hashCode();
      Complex complex12 = complex1.sinh();
      boolean boolean1 = complex12.isNaN();
      Complex complex13 = complex10.ZERO.negate();
      boolean boolean2 = complex5.isInfinite();
      ComplexField complexField0 = complex10.getField();
      String string0 = complex11.toString();
      boolean boolean3 = complex3.isNaN();
      Complex complex14 = complex7.sqrt1z();
      Complex complex15 = complex14.tan();
      boolean boolean4 = complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 1.0;
      Complex complex0 = new Complex(1647.016, 1.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.acos();
      List<Complex> list0 = complex3.nthRoot(1476);
      double double1 = complex0.getImaginary();
      Complex complex4 = complex1.INF.negate();
      double double2 = complex1.I.abs();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.createComplex(1, 1);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.tan();
      String string0 = complex3.ZERO.toString();
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex5.INF.sqrt();
      Object object0 = complex6.INF.readResolve();
      boolean boolean0 = complex5.isInfinite();
      Complex complex8 = complex3.add(complex4);
      Complex complex9 = complex4.sinh();
      Object object1 = complex5.readResolve();
      Complex complex10 = complex8.multiply(complex2);
      Complex complex11 = complex0.tan();
      Complex complex12 = complex11.multiply((-2092.84014743346));
      Complex complex13 = complex3.log();
      Complex complex14 = complex13.createComplex((-1155.1595), (-3552.7758046994));
      Complex complex15 = complex3.exp();
      Complex complex16 = complex15.I.pow(complex14);
      Complex complex17 = complex11.ONE.tanh();
      Complex complex18 = complex3.sqrt();
      Complex complex19 = complex11.sqrt1z();
      Complex complex20 = complex14.subtract(complex0);
      Complex complex21 = complex19.tanh();
      Complex complex22 = complex21.sin();
      Complex complex23 = complex4.exp();
      boolean boolean1 = complex19.isInfinite();
      Complex complex24 = complex8.multiply(complex11);
      Complex complex25 = complex4.cosh();
      Complex complex26 = complex16.tan();
      Complex complex27 = complex21.atan();
      Complex complex28 = complex25.conjugate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(1178.272, 1178.272);
      Complex complex1 = complex0.sin();
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.ZERO.negate();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = complex2.INF.divide(complex5);
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex1.ONE.exp();
      Complex complex10 = complex2.sqrt1z();
      Complex complex11 = complex10.ZERO.sqrt();
      Complex complex12 = complex10.ZERO.multiply(1178.272);
      String string0 = complex10.toString();
      Complex complex13 = complex8.log();
      Complex complex14 = complex1.exp();
      Complex complex15 = complex3.subtract(complex10);
      ComplexField complexField0 = complex15.getField();
      Complex complex16 = complex13.subtract(complex10);
      Complex complex17 = complex15.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex3 = complex0.acos();
      String string0 = complex3.I.toString();
      List<Complex> list0 = complex3.nthRoot(3577);
      Complex complex4 = complex3.INF.pow(complex2);
      Complex complex5 = complex3.createComplex(3577, (-1143.968));
      double double0 = complex5.I.abs();
      ComplexField complexField0 = complex3.INF.getField();
      Complex complex6 = complex5.exp();
      double double1 = complex5.getArgument();
      Complex complex7 = complex2.INF.tan();
      Complex complex8 = complex2.INF.conjugate();
      List<Complex> list1 = complex2.nthRoot(3577);
      Complex complex9 = complex2.subtract(complex3);
      Complex complex10 = complex3.sqrt();
      Complex complex11 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.add(complex1);
      boolean boolean0 = complex0.isInfinite();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.cos();
      double double0 = complex1.abs();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.ONE.atan();
      double double1 = complex4.NaN.getArgument();
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex1.pow(complex4);
      String string0 = complex6.toString();
      Complex complex10 = complex7.tan();
      double double2 = complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.ONE.asin();
      Complex complex7 = complex2.conjugate();
      Object object0 = complex7.I.readResolve();
      Complex complex8 = complex6.I.createComplex((-3698.3586431831077), (-3698.3586431831077));
      Complex complex9 = complex8.INF.tanh();
      Complex complex10 = complex0.acos();
      Complex complex11 = complex2.asin();
      Complex complex12 = complex11.sinh();
      Complex complex13 = complex6.add(complex8);
      Complex complex14 = complex12.divide(complex11);
      String string0 = complex6.toString();
      Complex complex15 = complex9.cosh();
      int int0 = complex5.hashCode();
      Complex complex16 = complex6.tan();
      Complex complex17 = complex10.log();
      Complex complex18 = complex16.multiply(complex0);
      Complex complex19 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.createComplex((-4350.7), (-4350.7));
      Complex complex4 = complex1.ONE.divide(complex3);
      Complex complex5 = complex1.INF.log();
      Complex complex6 = complex0.ONE.sqrt();
      Complex complex7 = complex6.ONE.acos();
      double double0 = complex4.NaN.abs();
      String string0 = complex0.toString();
      Complex complex8 = complex1.multiply((-4350.7));
      Complex complex9 = complex8.I.sqrt();
      int int0 = complex8.hashCode();
      Complex complex10 = complex0.log();
      Object object0 = complex10.ZERO.readResolve();
      double double1 = complex3.getImaginary();
      double double2 = complex4.getReal();
      Complex complex11 = complex1.sin();
      Complex complex12 = complex11.ZERO.pow(complex10);
      Complex complex13 = complex3.add(complex2);
      ComplexField complexField0 = complex5.getField();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-1965.697), (-1965.697));
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.cos();
      double double0 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.ZERO.readResolve();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = null;
      double double0 = (-1.0);
      Complex complex2 = complex0.I.multiply((-1.0));
      Complex complex3 = complex2.negate();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-2596.5307), (-2596.5307));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex0.INF.sin();
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex3.INF.createComplex((-2596.5307), 281.9312320163432);
      Complex complex6 = complex0.NaN.negate();
      Complex complex7 = complex6.createComplex((-597.9), (-1.0));
      String string0 = complex0.toString();
      Complex complex8 = complex3.conjugate();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex4.multiply(281.9312320163432);
      Complex complex11 = complex8.pow(complex0);
      Object object0 = complex11.readResolve();
      Complex complex12 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.createComplex(Double.NaN, (-2397.0));
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex0.cosh();
      try { 
        complex4.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(180.843183149, 180.843183149);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.INF.negate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.sqrt1z();
      try { 
        complex4.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 680.0);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-559.3044241), 1256.8655515931787);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex1.asin();
      String string0 = complex6.toString();
      Complex complex7 = complex2.createComplex(1256.8655515931787, (-559.3044241));
      Complex complex8 = complex2.sqrt1z();
      List<Complex> list0 = complex5.nthRoot(2222);
      Complex complex9 = complex5.add(complex6);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.subtract(complex0);
      String string0 = complex1.toString();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex0.createComplex(3065.6, 3065.6);
      Complex complex5 = complex3.atan();
      Complex complex6 = complex5.I.sqrt1z();
      String string1 = complex6.toString();
      Complex complex7 = complex3.pow(complex4);
      Complex complex8 = complex6.pow(complex5);
      int int0 = complex8.hashCode();
      ComplexField complexField1 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex3.INF.sinh();
      double double0 = complex1.NaN.getArgument();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.acos();
      double double1 = complex4.getArgument();
      Complex complex7 = complex6.pow(complex2);
      boolean boolean0 = complex6.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Object object0 = complex0.readResolve();
      String string0 = complex0.toString();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.multiply(complex1);
      Complex complex4 = complex2.divide(complex0);
      double double0 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex0.ZERO.exp();
      Object object0 = complex0.I.readResolve();
      Complex complex5 = complex0.multiply(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-482.6073), 2560.348443374121);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex3.I.acos();
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex7.createComplex((-1.0), (-1.0));
      boolean boolean0 = complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.ONE;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      List<Complex> list0 = complex1.NaN.nthRoot(216);
      Complex complex2 = complex0.ZERO.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-870.0), (-870.0));
      Complex complex1 = complex0.ONE.conjugate();
      double double0 = complex0.getReal();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.NaN.exp();
      String string0 = complex4.I.toString();
      Complex complex6 = complex4.tan();
      double double1 = complex6.getArgument();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.INF.negate();
      ComplexField complexField0 = complex7.INF.getField();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex2.cos();
      boolean boolean0 = complex2.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.ZERO.divide(complex3);
      Complex complex5 = complex1.I.acos();
      Complex complex6 = complex5.ONE.add(complex4);
      Complex complex7 = complex2.ZERO.atan();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex8.ZERO.sin();
      Complex complex10 = complex9.tan();
      Complex complex11 = complex0.tanh();
      ComplexField complexField0 = complex11.NaN.getField();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex2.NaN.subtract(complex12);
      Complex complex14 = complex0.tanh();
      Complex complex15 = complex2.cos();
      Complex complex16 = complex8.multiply(1.0);
      Complex complex17 = complex16.multiply(complex5);
      Complex complex18 = complex16.log();
      Complex complex19 = complex5.asin();
      Complex complex20 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex3.NaN.asin();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex6.sin();
      boolean boolean0 = complex3.equals(object0);
      double double0 = complex6.getReal();
      double double1 = complex2.getReal();
      Complex complex8 = complex0.acos();
      double double2 = complex1.getImaginary();
      double double3 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.acos();
      boolean boolean1 = complex1.isNaN();
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex1.tan();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex3.ONE.subtract(complex0);
      Complex complex6 = complex3.INF.asin();
      Complex complex7 = complex3.ONE.createComplex(1302.7477676521, 0.0);
      Complex complex8 = complex3.cosh();
      double double0 = complex4.getArgument();
      double double1 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex1.pow(complex2);
      Complex complex6 = complex5.log();
      Object object0 = complex0.readResolve();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex2.sqrt();
      int int0 = complex6.hashCode();
      Complex complex7 = complex5.tanh();
      List<Complex> list0 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.multiply(0.167);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(1.7029898543501842E-8, 0.0);
      double double0 = complex0.getReal();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.ONE.tan();
      Object object0 = complex0.ONE.readResolve();
      Object object1 = complex2.ZERO.readResolve();
      double double1 = complex2.getArgument();
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.add(complex0);
      double double0 = complex0.abs();
      Complex complex3 = complex1.INF.sin();
      Complex complex4 = complex1.sqrt();
      double double1 = complex0.getReal();
      Complex complex5 = complex2.NaN.multiply(complex4);
      Complex complex6 = complex2.divide(complex1);
      Complex complex7 = complex1.negate();
      Complex complex8 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(2331.426324, (-433.0));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = new Complex(2728.0320364897, 4335.58);
      Complex complex4 = complex2.ONE.subtract(complex3);
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.createComplex((-1.0), (-1.0));
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex2.multiply((-1.0));
      Complex complex7 = complex2.cos();
      Complex complex8 = complex7.cos();
      Complex complex9 = complex6.multiply((-1.0));
      Complex complex10 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cos();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.ONE.tan();
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex1.ZERO.acos();
      Complex complex4 = complex0.asin();
      double double0 = complex3.I.getArgument();
      Object object0 = complex1.I.readResolve();
      int int0 = complex3.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex3.sqrt();
      double double1 = complex2.getImaginary();
      Complex complex6 = complex0.ZERO.tanh();
      boolean boolean1 = complex4.isNaN();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex4.negate();
      boolean boolean2 = complex3.isNaN();
      boolean boolean3 = complex1.isInfinite();
      Object object1 = new Object();
      boolean boolean4 = complex2.equals(object1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.acos();
      String string0 = complex0.NaN.toString();
      Complex complex3 = complex2.ONE.multiply(669.38572910992);
      Complex complex4 = complex3.I.negate();
      int int0 = complex2.hashCode();
      Complex complex5 = complex2.log();
      Complex complex6 = complex5.I.atan();
      Complex complex7 = complex2.subtract(complex0);
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex8.NaN.conjugate();
      Complex complex10 = complex4.cos();
      Complex complex11 = complex10.multiply(669.38572910992);
      double double0 = complex0.getReal();
      Complex complex12 = complex1.divide(complex6);
      boolean boolean0 = complex6.equals("(NaN, NaN)");
      Complex complex13 = complex2.divide(complex4);
      String string1 = complex6.toString();
      double double1 = complex8.getReal();
      List<Complex> list0 = complex7.nthRoot(1);
      Complex complex14 = complex3.sinh();
      boolean boolean1 = complex10.equals(complex14);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex4.INF.atan();
      Complex complex6 = complex5.INF.acos();
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = (-3285);
      double double0 = complex0.getArgument();
      try { 
        complex0.INF.nthRoot((-3285));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,285
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.negate();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.ONE.subtract(complex1);
      Complex complex4 = complex1.ONE.cos();
      Complex complex5 = complex1.ONE.atan();
      Complex complex6 = complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.I;
      Complex complex8 = complex2.I.subtract(complex7);
      Complex complex9 = complex8.INF.negate();
      Complex complex10 = complex8.ONE.sinh();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex2.isInfinite();
      boolean boolean1 = complex1.isInfinite();
      Complex complex11 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex1.NaN.sinh();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply(2001.8533928);
      Complex complex2 = complex1.I.pow(complex0);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.negate();
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ZERO.pow(complex1);
      String string0 = complex2.ZERO.toString();
      boolean boolean0 = complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(2106.6558, 2106.6558);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.I.sin();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.ZERO.add(complex1);
      Complex complex7 = complex6.ZERO.add(complex0);
      double double0 = complex0.abs();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex6.sqrt();
      boolean boolean0 = complex6.equals("INSUFFICIENT_DIMENSION");
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.NaN.multiply(0.5);
      List<Complex> list0 = complex3.nthRoot(199);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex3.ONE.pow(complex1);
      double double0 = complex0.getArgument();
      int int0 = complex0.hashCode();
      List<Complex> list0 = complex0.nthRoot(230);
      ComplexField complexField0 = complex1.getField();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = complex1.subtract(complex5);
      Complex complex8 = complex7.I.add(complex6);
      Complex complex9 = complex7.ONE.createComplex((-691.734), 230);
      Complex complex10 = complex8.ZERO.asin();
      Complex complex11 = complex6.sqrt();
      Complex complex12 = complex5.cos();
      Complex complex13 = complex3.acos();
      Complex complex14 = complex13.NaN.asin();
      Complex complex15 = complex5.I.log();
      Complex complex16 = complex15.NaN.sin();
      Complex complex17 = complex5.asin();
      Complex complex18 = complex17.log();
      Complex complex19 = complex5.exp();
      List<Complex> list1 = complex1.nthRoot(230);
      Complex complex20 = complex2.conjugate();
      double double1 = complex12.getImaginary();
      Complex complex21 = complex0.multiply(2673.859);
      boolean boolean0 = complex6.equals(complex20);
      boolean boolean1 = complex3.isNaN();
      ComplexField complexField1 = complex7.getField();
      boolean boolean2 = complex14.equals(complex11);
      Complex complex22 = complex9.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex1.INF.atan();
      double double0 = complex1.INF.getArgument();
      double double1 = complex1.ZERO.getArgument();
      double double2 = complex0.I.getArgument();
      Complex complex4 = complex0.INF.tan();
      Complex complex5 = complex4.ZERO.tanh();
      List<Complex> list0 = complex0.nthRoot(37);
      double double3 = complex0.getArgument();
      List<Complex> list1 = complex0.INF.nthRoot(37);
      double double4 = complex0.getArgument();
      Complex complex6 = complex4.sqrt();
      ComplexField complexField0 = complex1.ZERO.getField();
      Object object0 = complex6.ZERO.readResolve();
      Complex complex7 = complex6.add(complex4);
      int int0 = complex7.NaN.hashCode();
      Complex complex8 = complex3.add(complex7);
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex3.multiply(complex1);
      Complex complex11 = complex10.cos();
      ComplexField complexField1 = complex11.getField();
      Complex complex12 = complex9.divide(complex0);
      Complex complex13 = complex5.asin();
      Complex complex14 = complex13.acos();
      Complex complex15 = complex12.divide(complex10);
      String string0 = complex2.toString();
      Complex complex16 = complex3.sqrt1z();
      Complex complex17 = complex16.tan();
      double double5 = complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.I.divide(complex3);
      Complex complex5 = complex1.ONE.multiply(complex2);
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex1.NaN.tanh();
      ComplexField complexField0 = complex3.ZERO.getField();
      Object object0 = complex0.readResolve();
      Complex complex8 = complex2.cos();
      Complex complex9 = complex5.NaN.tan();
      int int0 = complex8.hashCode();
      double double1 = complex1.getReal();
      Complex complex10 = complex0.sin();
      ComplexField complexField1 = complex10.getField();
      Complex complex11 = complex2.subtract(complex3);
      Complex complex12 = complex0.sqrt1z();
      Object object1 = complex2.readResolve();
      Complex complex13 = complex5.sqrt();
      Complex complex14 = complex13.ZERO.multiply(1.0);
      Complex complex15 = complex6.negate();
      Complex complex16 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(0.6931470632553101, Double.NaN);
      Complex complex1 = complex0.atan();
      String string0 = complex0.toString();
      Complex complex2 = complex1.INF.multiply(Double.NaN);
      Complex complex3 = complex0.NaN.negate();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.ONE.subtract(complex4);
      Complex complex6 = complex2.createComplex((-428.7431733152726), 5102.06945375);
      Complex complex7 = complex0.cos();
      Object object0 = complex0.readResolve();
      Complex complex8 = complex0.NaN.cosh();
      Complex complex9 = complex7.NaN.add(complex1);
      boolean boolean0 = complex7.equals(object0);
      Complex complex10 = complex1.negate();
      Complex complex11 = complex10.I.conjugate();
      Complex complex12 = complex7.cos();
      Complex complex13 = complex6.negate();
      Complex complex14 = complex6.sin();
      Complex complex15 = complex6.conjugate();
      try { 
        complex10.nthRoot((-367));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -367
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.INF.multiply(complex0);
      Complex complex3 = complex0.multiply((-1611.14));
      Complex complex4 = new Complex((-1611.14), (-1611.14));
      double double0 = complex2.getArgument();
      Complex complex5 = complex3.add(complex4);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex0.NaN.subtract(complex6);
      Complex complex9 = complex3.sqrt1z();
      Complex complex10 = complex9.INF.multiply(complex4);
      Complex complex11 = complex1.negate();
      String string0 = complex4.ZERO.toString();
      double double1 = complex9.getReal();
      Complex complex12 = complex2.sinh();
      Complex complex13 = complex7.ZERO.multiply(complex0);
      Complex complex14 = complex4.divide(complex7);
      Complex complex15 = complex2.divide(complex3);
      double double2 = complex9.getArgument();
      Complex complex16 = complex0.atan();
      Complex complex17 = complex9.NaN.multiply(complex0);
      Complex complex18 = Complex.ONE;
      Complex complex19 = complex18.ZERO.add(complex12);
      Complex complex20 = complex19.ZERO.add(complex5);
      Complex complex21 = complex14.pow(complex18);
      Complex complex22 = complex9.log();
      Object object0 = complex0.readResolve();
      Complex complex23 = complex5.sin();
      Complex complex24 = complex21.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex0.ONE.atan();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex4.NaN.divide(complex1);
      Complex complex7 = complex5.createComplex(0.0, 0.0);
      Complex complex8 = complex7.INF.acos();
      Complex complex9 = complex7.NaN.divide(complex4);
      Complex complex10 = complex5.I.sqrt();
      Complex complex11 = complex10.ZERO.tan();
      double double0 = complex1.abs();
      Complex complex12 = complex0.asin();
      Complex complex13 = complex12.INF.cosh();
      Complex complex14 = complex12.conjugate();
      Complex complex15 = complex14.NaN.pow(complex4);
      Complex complex16 = complex12.negate();
      ComplexField complexField0 = complex16.getField();
      Complex complex17 = complex0.sinh();
      double double1 = complex17.ONE.getArgument();
      Complex complex18 = complex15.sqrt();
      ComplexField complexField1 = complex10.getField();
      Complex complex19 = complex10.negate();
      Complex complex20 = complex12.asin();
      Object object0 = complex0.readResolve();
      Complex complex21 = complex6.add(complex0);
      Complex complex22 = complex6.add(complex12);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.NaN.createComplex(1249.314634, 0.0);
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex4.ONE.subtract(complex3);
      Complex complex6 = complex5.I.divide(complex4);
      Complex complex7 = complex3.I.sqrt1z();
      double double0 = complex7.ONE.getArgument();
      Complex complex8 = complex7.ONE.divide(complex2);
      Complex complex9 = complex2.ZERO.tanh();
      Complex complex10 = complex0.createComplex(0.19999999999923582, (-472.7191668));
      String string0 = complex10.INF.toString();
      boolean boolean0 = complex10.isNaN();
      double double1 = complex1.abs();
      Complex complex11 = complex2.tan();
      boolean boolean1 = complex2.isNaN();
      ComplexField complexField0 = complex10.getField();
      Complex complex12 = complex0.divide(complex3);
      Complex complex13 = complex2.conjugate();
      double double2 = complex6.getArgument();
      try { 
        complex12.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex0.createComplex(92.94175089395814, (-3934.838));
      int int0 = complex3.hashCode();
      Complex complex6 = complex0.ONE.subtract(complex5);
      boolean boolean0 = complex4.equals(complex0);
      boolean boolean1 = complex2.isInfinite();
      Complex complex7 = complex2.sqrt1z();
      String string0 = complex7.I.toString();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex5.pow(complex6);
      Complex complex10 = complex9.INF.add(complex1);
      Complex complex11 = complex4.subtract(complex0);
      Complex complex12 = complex8.INF.cosh();
      Complex complex13 = complex9.divide(complex6);
      Complex complex14 = Complex.ONE;
      Complex complex15 = complex2.ONE.divide(complex14);
      Complex complex16 = complex11.sin();
      int int1 = complex8.hashCode();
      double double0 = complex7.abs();
      Complex complex17 = new Complex(1.5874010519681994, 650.753004);
      Complex complex18 = complex4.ONE.divide(complex17);
      Complex complex19 = complex12.sqrt();
      boolean boolean2 = complex16.isNaN();
      Complex complex20 = complex5.pow(complex7);
      Complex complex21 = complex18.multiply(0.008336750013465571);
      boolean boolean3 = complex7.isInfinite();
      Object object0 = complex6.readResolve();
  }
}
