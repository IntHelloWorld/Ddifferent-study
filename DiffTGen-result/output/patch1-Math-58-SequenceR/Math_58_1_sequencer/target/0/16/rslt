* EvoSuite 1.0.6
* Going to generate test cases for class: org.apache.commons.math.optimization.fitting.GaussianFitter
* Starting client
* Connecting to master process on port 10249
* Analyzing classpath: 
  - /home/hewitt/work/DiffTGen-master/output/patch1-Math-58-SequenceR/Math_58_1_sequencer/target/build/classes/all0.jar
  - /home/hewitt/work/DiffTGen-master/lib/myprinter.jar
  - /home/hewitt/work/DiffTGen-master/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.optimization.fitting.GaussianFitter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 92
  - Branch 67
  - Exception 0
  - MutationFactory 402
  - Output 6
  - Method 5
  - MethodNoException 5
  - CBranchFitnessFactory 67
* Using seed 1585462876047
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%][Progress:======>                       23%] [Cov:==>                                6%][Progress:======>                       23%] [Cov:===>                               10%][Progress:======>                       23%] [Cov:========>                          23%][Progress:=======>                      25%] [Cov:==========>                        29%][Progress:=======>                      25%] [Cov:===========>                       33%][Progress:=======>                      25%] [Cov:=============>                     38%][Progress:=======>                      25%] [Cov:==============>                    40%][Progress:=======>                      26%] [Cov:===>                               9%][Progress:=========>                    33%] [Cov:======>                            19%][Progress:==========>                   35%] [Cov:==========>                        31%][Progress:==========>                   35%] [Cov:===============>                   45%][Progress:==========>                   35%] [Cov:===================>               56%][Progress:==========>                   35%] [Cov:======================>            63%][Progress:==========>                   35%] [Cov:========================>          69%][Progress:==========>                   36%] [Cov:===>                               9%][Progress:==========>                   36%] [Cov:=====>                             17%][Progress:==========>                   36%] [Cov:==========>                        29%][Progress:==========>                   36%] [Cov:==============>                    42%][Progress:==========>                   36%] [Cov:=================>                 51%][Progress:==========>                   36%] [Cov:====================>              58%][Progress:==========>                   36%] [Cov:======================>            65%][Progress:===========>                  38%] [Cov:==>                                8%][Progress:===========>                  38%] [Cov:=====>                             16%][Progress:===========>                  38%] [Cov:==========>                        29%][Progress:===========>                  38%] [Cov:==============>                    42%][Progress:===========>                  38%] [Cov:================>                  46%][Progress:===========>                  38%] [Cov:=================>                 51%][Progress:===========>                  38%] [Cov:===================>               57%][Progress:============>                 40%] [Cov:=========>                         28%][Progress:============>                 40%] [Cov:=============>                     38%][Progress:============>                 40%] [Cov:================>                  47%][Progress:============>                 40%] [Cov:==================>                54%][Progress:============>                 40%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:===>                               9%][Progress:============>                 41%] [Cov:=====>                             17%][Progress:============>                 41%] [Cov:==========>                        29%][Progress:============>                 41%] [Cov:==============>                    42%][Progress:============>                 41%] [Cov:=================>                 51%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:==>                                8%][Progress:============>                 43%] [Cov:=====>                             16%][Progress:============>                 43%] [Cov:==========>                        29%][Progress:============>                 43%] [Cov:==============>                    42%][Progress:============>                 43%] [Cov:================>                  48%][Progress:============>                 43%] [Cov:===================>               55%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=======================>           67%][Progress:=============>                45%] [Cov:==>                                7%][Progress:=============>                45%] [Cov:====>                              14%][Progress:=============>                45%] [Cov:=========>                         26%][Progress:=============>                45%] [Cov:============>                      36%][Progress:=============>                45%] [Cov:===============>                   45%][Progress:=============>                45%] [Cov:=================>                 51%][Progress:=============>                45%] [Cov:===================>               55%][Progress:=============>                46%] [Cov:==>                                8%][Progress:=============>                46%] [Cov:=====>                             17%][Progress:=============>                46%] [Cov:==========>                        29%][Progress:=============>                46%] [Cov:==============>                    41%][Progress:=============>                46%] [Cov:=================>                 50%][Progress:=============>                46%] [Cov:===================>               57%][Progress:=============>                46%] [Cov:=====================>             62%][Progress:=============>                46%] [Cov:========================>          69%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:========>                          23%][Progress:===============>              50%] [Cov:===================>               57%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:=========>                         28%][Progress:===============>              51%] [Cov:====================>              58%][Progress:===============>              51%] [Cov:====================>              59%][Progress:===============>              51%] [Cov:======================>            63%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:=======================>           67%][Progress:===============>              51%] [Cov:==========================>        77%][Progress:===============>              53%] [Cov:=========================>         74%][Progress:===============>              53%] [Cov:==========================>        76%][Progress:===============>              53%] [Cov:==========================>        77%][Progress:================>             55%] [Cov:=========================>         74%][Progress:================>             55%] [Cov:==========================>        76%][Progress:================>             55%] [Cov:==========================>        77%][Progress:================>             55%] [Cov:==========================>        77%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        77%][Progress:=================>            58%] [Cov:===========================>       78%][Progress:=================>            58%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:==========================>        75%][Progress:==================>           60%] [Cov:==========================>        76%][Progress:==================>           60%] [Cov:============================>      81%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:===========================>       78%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      81%][Progress:==================>           63%] [Cov:============================>      81%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      81%][Progress:===================>          65%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      81%][Progress:====================>         68%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:=============================>     83%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:=============================>     83%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:=============================>     83%][Progress:======================>       76%] [Cov:=============================>     83%][Progress:=======================>      78%] [Cov:============================>      82%][Progress:=======================>      78%] [Cov:=============================>     83%][Progress:========================>     80%] [Cov:=============================>     83%][Progress:========================>     81%] [Cov:=============================>     83%][Progress:========================>     81%] [Cov:=============================>     83%][Progress:========================>     83%] [Cov:=============================>     83%][Progress:========================>     83%] [Cov:=============================>     83%][Progress:=========================>    85%] [Cov:=============================>     83%][Progress:=========================>    85%] [Cov:=============================>     83%][Progress:=========================>    86%] [Cov:=============================>     83%][Progress:==========================>   88%] [Cov:=============================>     83%][Progress:==========================>   88%] [Cov:=============================>     83%][Progress:==========================>   88%] [Cov:=============================>     83%][Progress:===========================>  90%] [Cov:=============================>     83%][Progress:===========================>  91%] [Cov:=============================>     83%][Progress:===========================>  93%] [Cov:=============================>     83%][Progress:============================> 95%] [Cov:=============================>     83%][Progress:============================> 95%] [Cov:=============================>     83%][Progress:============================> 96%] [Cov:=============================>     83%][Progress:============================> 96%] [Cov:=============================>     83%][Progress:=============================>98%] [Cov:=============================>     83%][Progress:==============================100%] [Cov:=============================>     83%][Progress:==============================100%] [Cov:=============================>     83%][Progress:==============================100%] [Cov:=============================>     83%][Progress:==============================100%] [Cov:=============================>     83%][Progress:==============================100%] [Cov:=============================>     83%]
* Search finished after 62s and 24 generations, 19285 statements, best individual has fitness: 59.09999999953173
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 85%
* Total number of goals: 92
* Number of covered goals: 78
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 94%
* Total number of goals: 67
* Number of covered goals: 63
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 402
* Number of covered goals: 358
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 17%
* Total number of goals: 6
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 80%
* Total number of goals: 5
* Number of covered goals: 4
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 94%
* Total number of goals: 67
* Number of covered goals: 63
* Generated 19 tests with total length 136
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Compiling and checking tests
[MASTER] 14:22:55.636 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 14:22:55.636 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
Well19937a well19937a0 = new Well19937a();
UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator((-2146738873), well19937a0);
MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, 2146298687, unitSphereRandomVectorGenerator0);
GaussianFitter gaussianFitter0 = new GaussianFitter(multiStartDifferentiableMultivariateVectorialOptimizer0);
double[] doubleArray0 = new double[7];
double[] doubleArray1 = gaussianFitter0.fit(doubleArray0);

* Writing JUnit test case 'GaussianFitter_ESTest' to evosuite-tests
* Done!

* Computation finished
