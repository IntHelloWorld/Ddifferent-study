* EvoSuite 1.0.6
* Going to generate test cases for class: org.apache.commons.math.optimization.fitting.GaussianFitter
* Starting client
* Connecting to master process on port 8383
* Analyzing classpath: 
  - /home/hewitt/work/DiffTGen-master/output/patch1-Math-58-SequenceR/Math_58_1_sequencer/target/build/classes/all0.jar
  - /home/hewitt/work/DiffTGen-master/lib/myprinter.jar
  - /home/hewitt/work/DiffTGen-master/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.optimization.fitting.GaussianFitter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 92
  - Branch 67
  - Exception 0
  - MutationFactory 402
  - Output 6
  - Method 5
  - MethodNoException 5
  - CBranchFitnessFactory 67
* Using seed 1585462750272
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%][Progress:===>                          10%] [Cov:>                                  0%][Progress:===>                          10%] [Cov:>                                  1%][Progress:===>                          10%] [Cov:====>                              13%][Progress:===>                          10%] [Cov:====>                              14%][Progress:===>                          10%] [Cov:=====>                             17%][Progress:======>                       21%] [Cov:==>                                8%][Progress:======>                       21%] [Cov:=====>                             15%][Progress:======>                       21%] [Cov:=========>                         27%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:===============>                   43%][Progress:======>                       23%] [Cov:================>                  47%][Progress:======>                       23%] [Cov:==================>                52%][Progress:=======>                      25%] [Cov:>                                  0%][Progress:=======>                      25%] [Cov:====>                              12%][Progress:=======>                      25%] [Cov:====>                              13%][Progress:=======>                      25%] [Cov:====>                              14%][Progress:=======>                      25%] [Cov:========>                          24%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:============>                      35%][Progress:=======>                      25%] [Cov:==============>                    40%][Progress:=======>                      25%] [Cov:===============>                   43%][Progress:=======>                      26%] [Cov:==>                                7%][Progress:=======>                      26%] [Cov:====>                              13%][Progress:=======>                      26%] [Cov:=========>                         26%][Progress:=======>                      26%] [Cov:============>                      36%][Progress:=======>                      26%] [Cov:===============>                   45%][Progress:=======>                      26%] [Cov:==================>                52%][Progress:=======>                      26%] [Cov:===================>               56%][Progress:========>                     28%] [Cov:>                                  0%][Progress:========>                     28%] [Cov:>                                  1%][Progress:========>                     28%] [Cov:====>                              13%][Progress:========>                     28%] [Cov:=====>                             17%][Progress:========>                     28%] [Cov:======>                            19%][Progress:========>                     28%] [Cov:=======>                           20%][Progress:========>                     28%] [Cov:=========>                         26%][Progress:========>                     28%] [Cov:===========>                       34%][Progress:========>                     28%] [Cov:================>                  46%][Progress:========>                     28%] [Cov:==================>                52%][Progress:========>                     28%] [Cov:===================>               56%][Progress:========>                     28%] [Cov:====================>              59%][Progress:=========>                    30%] [Cov:>                                  0%][Progress:=========>                    30%] [Cov:>                                  1%][Progress:=========>                    30%] [Cov:====>                              13%][Progress:=========>                    30%] [Cov:=====>                             15%][Progress:=========>                    30%] [Cov:========>                          25%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:=============>                     39%][Progress:=========>                    30%] [Cov:================>                  46%][Progress:=========>                    30%] [Cov:=================>                 49%][Progress:=========>                    30%] [Cov:=================>                 51%][Progress:=========>                    30%] [Cov:===================>               56%][Progress:=========>                    31%] [Cov:====>                              13%][Progress:=========>                    31%] [Cov:====>                              14%][Progress:=========>                    31%] [Cov:=====>                             17%][Progress:=========>                    31%] [Cov:========>                          25%][Progress:=========>                    31%] [Cov:============>                      36%][Progress:=========>                    31%] [Cov:==============>                    40%][Progress:=========>                    31%] [Cov:===============>                   45%][Progress:=========>                    31%] [Cov:=================>                 49%][Progress:=========>                    31%] [Cov:==================>                52%][Progress:=========>                    31%] [Cov:===================>               57%][Progress:=========>                    33%] [Cov:==>                                8%][Progress:=========>                    33%] [Cov:=====>                             15%][Progress:=========>                    33%] [Cov:=========>                         28%][Progress:=========>                    33%] [Cov:==============>                    40%][Progress:=========>                    33%] [Cov:===============>                   44%][Progress:=========>                    33%] [Cov:=================>                 49%][Progress:=========>                    33%] [Cov:==================>                54%][Progress:=========>                    33%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:>                                  1%][Progress:=============>                45%] [Cov:=>                                 3%][Progress:=============>                45%] [Cov:=====>                             15%][Progress:=============>                45%] [Cov:========>                          24%][Progress:=============>                45%] [Cov:=========>                         28%][Progress:=============>                45%] [Cov:==========>                        29%][Progress:=============>                45%] [Cov:=============>                     38%][Progress:=============>                45%] [Cov:================>                  46%][Progress:=============>                45%] [Cov:==================>                53%][Progress:=============>                45%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              59%][Progress:=============>                45%] [Cov:=======================>           67%][Progress:=============>                46%] [Cov:==>                                7%][Progress:=============>                46%] [Cov:=====>                             15%][Progress:=============>                46%] [Cov:=========>                         28%][Progress:=============>                46%] [Cov:=============>                     39%][Progress:=============>                46%] [Cov:================>                  48%][Progress:=============>                46%] [Cov:==================>                54%][Progress:=============>                46%] [Cov:====================>              59%][Progress:=============>                46%] [Cov:=====================>             60%][Progress:=============>                46%] [Cov:=======================>           66%][Progress:==============>               48%] [Cov:==>                                8%][Progress:==============>               48%] [Cov:=====>                             15%][Progress:==============>               48%] [Cov:=========>                         28%][Progress:==============>               48%] [Cov:=============>                     39%][Progress:==============>               48%] [Cov:================>                  48%][Progress:==============>               48%] [Cov:===================>               55%][Progress:==============>               48%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:=======================>           67%][Progress:===============>              50%] [Cov:=======>                           20%][Progress:===============>              50%] [Cov:========>                          25%][Progress:===============>              50%] [Cov:=========>                         26%][Progress:===============>              50%] [Cov:======================>            63%][Progress:===============>              50%] [Cov:======================>            64%][Progress:===============>              50%] [Cov:=======================>           66%][Progress:===============>              50%] [Cov:=======================>           67%][Progress:===============>              53%] [Cov:==========>                        29%][Progress:===============>              53%] [Cov:==================>                54%][Progress:===============>              53%] [Cov:===================>               55%][Progress:===============>              53%] [Cov:===================>               57%][Progress:===============>              53%] [Cov:======================>            64%][Progress:================>             55%] [Cov:================>                  48%][Progress:================>             55%] [Cov:===================>               55%][Progress:================>             55%] [Cov:===================>               56%][Progress:================>             55%] [Cov:===================>               57%][Progress:================>             55%] [Cov:=======================>           66%][Progress:================>             55%] [Cov:==========================>        76%][Progress:================>             56%] [Cov:=========================>         74%][Progress:================>             56%] [Cov:==========================>        75%][Progress:================>             56%] [Cov:==========================>        76%][Progress:=================>            58%] [Cov:==========================>        76%][Progress:=================>            58%] [Cov:==========================>        77%][Progress:=================>            58%] [Cov:==========================>        77%][Progress:==================>           60%] [Cov:========================>          69%][Progress:==================>           60%] [Cov:=========================>         73%][Progress:==================>           60%] [Cov:==========================>        76%][Progress:==================>           60%] [Cov:==========================>        77%][Progress:==================>           60%] [Cov:==========================>        77%][Progress:==================>           61%] [Cov:==========================>        76%][Progress:==================>           61%] [Cov:==========================>        77%][Progress:==================>           61%] [Cov:===========================>       78%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      81%][Progress:==================>           63%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          65%] [Cov:============================>      81%][Progress:===================>          65%] [Cov:============================>      81%][Progress:===================>          66%] [Cov:============================>      81%][Progress:====================>         68%] [Cov:============================>      81%][Progress:=====================>        70%] [Cov:============================>      81%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      81%][Progress:=====================>        73%] [Cov:============================>      82%][MASTER] 14:20:08.399 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer canUseFunctionalMocks=false, canBeMocked: true
[Progress:======================>       75%] [Cov:============================>      81%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      81%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:=======================>      78%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:=============================>     83%][Progress:=========================>    86%] [Cov:=============================>     83%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:=============================>     83%][Progress:===========================>  90%] [Cov:=============================>     83%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:=============================>     83%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:=============================>     83%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:=============================>     83%][Progress:============================> 96%] [Cov:=============================>     83%][Progress:=============================>98%] [Cov:=============================>     83%][Progress:=============================>98%] [Cov:=============================>     83%][Progress:=============================>98%] [Cov:=============================>     83%][Progress:==============================100%] [Cov:=============================>     83%][Progress:==============================100%] [Cov:=============================>     83%][Progress:==============================100%] [Cov:=============================>     83%]
* Search finished after 61s and 23 generations, 19474 statements, best individual has fitness: 55.04807692307692
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 87%
* Total number of goals: 92
* Number of covered goals: 80
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 94%
* Total number of goals: 67
* Number of covered goals: 63
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 402
* Number of covered goals: 362
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 17%
* Total number of goals: 6
* Number of covered goals: 1
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 80%
* Total number of goals: 5
* Number of covered goals: 4
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 94%
* Total number of goals: 67
* Number of covered goals: 63
* Generated 19 tests with total length 134
* Resulting test suite's coverage: 83% (average coverage for all fitness functions)
* Compiling and checking tests
[MASTER] 14:21:02.223 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 14:21:02.223 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator((-2680));
MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, 2142404452, unitSphereRandomVectorGenerator0);
GaussianFitter gaussianFitter0 = new GaussianFitter(multiStartDifferentiableMultivariateVectorialOptimizer0);
gaussianFitter0.addObservedPoint((double) 4208363204685324176L, (double) (-2680), (double) 2142404452);
gaussianFitter0.addObservedPoint(199.1828393928614, 199.1828393928614, (double) 4208363204685324176L);
WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-3525.634838678096), 2142404452, (-1.0));
gaussianFitter0.addObservedPoint(weightedObservedPoint0);
double[] doubleArray0 = gaussianFitter0.fit();

[MASTER] 14:21:07.705 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 14:21:07.707 [logback-1] WARN  JUnitAnalyzer - Failing test:
 double[] doubleArray0 = new double[9];
DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
Well19937a well19937a0 = new Well19937a((int[]) null);
GaussianRandomGenerator gaussianRandomGenerator0 = new GaussianRandomGenerator(well19937a0);
UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(10, gaussianRandomGenerator0);
MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, 2146367588, uncorrelatedRandomVectorGenerator0);
GaussianFitter gaussianFitter0 = new GaussianFitter(multiStartDifferentiableMultivariateVectorialOptimizer0);
double[] doubleArray1 = gaussianFitter0.fit(doubleArray0);

* Writing JUnit test case 'GaussianFitter_ESTest' to evosuite-tests
* Done!

* Computation finished
