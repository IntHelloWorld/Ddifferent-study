/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:50:56 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      long long0 = MathUtils.pow(0L, 0);
      int int0 = MathUtils.gcd(43, 0);
      long long1 = MathUtils.subAndCheck((long) 0, 2274L);
      double double1 = MathUtils.sign((double) (-2274L));
      boolean boolean0 = MathUtils.equals(3492.2660046, 1200.3958225, (double) 0);
      int int1 = MathUtils.hash(0.0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 43;
      intArray0[2] = 0;
      intArray0[3] = 43;
      intArray0[4] = 43;
      intArray0[5] = 0;
      intArray0[6] = 43;
      intArray0[7] = 0;
      intArray0[8] = 43;
      int int2 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 12;
      intArray0[2] = (-491);
      intArray0[3] = (-1027);
      intArray0[4] = 2603;
      intArray0[5] = Integer.MIN_VALUE;
      intArray0[6] = (-1641);
      intArray0[7] = 0;
      int[] intArray1 = new int[10];
      intArray1[0] = 0;
      intArray1[1] = Integer.MIN_VALUE;
      intArray1[2] = (-1641);
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = (-349);
      intArray1[6] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1027);
      doubleArray0[1] = (double) 12;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2603;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) Integer.MIN_VALUE;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,027 <= 12)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = 2885.1824492445;
      boolean boolean0 = MathUtils.equals(2885.1824492445, (-1348.659315));
      double double1 = MathUtils.log(2.2250738585072014E-308, (-550.759));
      int int0 = 0;
      float float0 = MathUtils.round(0.0F, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      String string0 = bigInteger1.toString(0);
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      // Undeclared exception!
      try { 
        bigInteger0.remainder(bigInteger2);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = 3814.14;
      double double1 = MathUtils.indicator(3814.14);
      int int0 = 20;
      int int1 = MathUtils.gcd(629, 20);
      double double2 = MathUtils.normalizeAngle(3814.14, 1.0);
      double[] doubleArray0 = null;
      double double3 = 0.0;
      double double4 = MathUtils.scalb(0.0, 1);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(908.939311282, 10.0);
      short short0 = (short) (-1212);
      short short1 = MathUtils.sign((short) (-1212));
      byte byte0 = MathUtils.sign((byte) (-7));
      int int0 = 31;
      int int1 = MathUtils.sign(31);
      long long0 = 6402373705728000L;
      try { 
        MathUtils.pow(6402373705728000L, (long) (byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (6,402,373,705,728,000^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = (-3916.82009438);
      int int0 = 2220;
      double double1 = MathUtils.scalb((-3916.82009438), 2220);
      long long0 = 0L;
      long long1 = (-235L);
      try { 
        MathUtils.pow(0L, (-235L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-235)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = 2819561105158720014L;
      long long1 = MathUtils.addAndCheck(0L, 2819561105158720014L);
      long long2 = (-1L);
      long long3 = MathUtils.mulAndCheck((-1L), (-1L));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2819561105158720014L;
      doubleArray0[1] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0L, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = MathUtils.sign(1L);
      double double0 = MathUtils.scalb(Double.POSITIVE_INFINITY, 4194304);
      double double1 = MathUtils.normalizeAngle(1L, (-2307.3102976218206));
      long long1 = MathUtils.pow(1L, 0L);
      double double2 = MathUtils.scalb((-2307.3102976218206), 4194304);
      int int0 = MathUtils.indicator(4194304);
      float float0 = MathUtils.sign(436.972F);
      double double3 = MathUtils.log((-898.0), 1.0F);
      long long2 = MathUtils.subAndCheck(2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 4194304);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.1102230246251565E-16;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 7.362128432435;
      doubleArray0[3] = (-74.112362081);
      doubleArray0[4] = 0.5;
      doubleArray0[5] = 211.50286563434;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.5;
      doubleArray1[1] = 211.50286563434;
      doubleArray1[2] = (-74.112362081);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      int int0 = MathUtils.lcm(0, 0);
      double double0 = MathUtils.scalb(0.5, 0);
      double double1 = MathUtils.cosh(0.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (211.503 > -74.112)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(0, (long) 0);
      long long0 = MathUtils.factorial(0);
      int int2 = MathUtils.mulAndCheck(1, 1);
      double double0 = MathUtils.indicator((double) 1L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = 1.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (1 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.304E19, 1.304E19, 1398.918);
      double double0 = MathUtils.indicator(1398.918);
      int int0 = MathUtils.compareTo((-2087.5949241436), 0.0, (-1609.42363384));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = MathUtils.sign(145);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int[] intArray0 = new int[3];
      intArray0[1] = 1;
      intArray0[2] = 1;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int[] intArray1 = new int[3];
      intArray1[1] = 1;
      intArray1[2] = 145;
      int int1 = MathUtils.distanceInf(intArray0, intArray1);
      float float0 = MathUtils.round((float) 1, 1, 1);
      int int2 = (-310);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-310));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -310
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 10;
      int int1 = MathUtils.sign(10);
      try { 
        MathUtils.pow((long) 1, (-3586L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-3,586)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      int int1 = MathUtils.subAndCheck(255, 0);
      long long0 = MathUtils.indicator((long) 255);
      boolean boolean0 = MathUtils.equals((-1.0), (double) 255, 4);
      long long1 = MathUtils.pow(1L, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      intArray0[1] = 255;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.round((double) 255, 0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1679.95403, 430.50300968078, 0.07490822288864472);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1679.95403;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = (-2043);
      int int1 = MathUtils.addAndCheck((-2043), (-2043));
      long long0 = MathUtils.gcd((long) (-4086), 1201L);
      long long1 = MathUtils.sign(1L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1201L;
      doubleArray0[3] = (double) 1201L;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = 2432902008176640000L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2432902008176640000L, 2432902008176640000L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 1.0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(11.0, 11.0, 11.0);
      long long0 = MathUtils.factorial(7);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.sign((short)6);
      long long1 = MathUtils.binomialCoefficient(7, (short)6);
      int[] intArray0 = new int[5];
      intArray0[0] = 7;
      intArray0[1] = (int) (short)6;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) (short)6;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 722;
      intArray0[1] = 5;
      intArray0[2] = (-1751);
      intArray0[3] = 1328;
      int[] intArray1 = new int[3];
      intArray1[0] = (-1751);
      intArray1[1] = 69;
      intArray1[2] = 5;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      long long0 = MathUtils.lcm((long) (short)0, 0L);
      double double0 = MathUtils.factorialLog(124);
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(0, (-319));
      double double1 = MathUtils.cosh(2145.876335452625);
      int int2 = 1366;
      int int3 = MathUtils.lcm(3039, 1366);
      double double2 = MathUtils.factorialDouble(319);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (-319);
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) 1366;
      doubleArray0[4] = 477.04466549258575;
      int int4 = MathUtils.hash(doubleArray0);
      int int5 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 319, 3039);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 3,039, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1.0), (-955.2), 0.0);
      int int0 = 0;
      long long0 = MathUtils.pow(0L, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long1 = MathUtils.gcd(9218868437227405312L, (long) 0);
      int int1 = MathUtils.addAndCheck((-3675), 131);
      byte byte0 = MathUtils.sign((byte)13);
      long long2 = MathUtils.sign((long) 0);
      int int2 = MathUtils.indicator(0);
      long long3 = MathUtils.indicator(0L);
      double double1 = MathUtils.scalb((-1.0), 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(2001.940439, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 1126);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1,126
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = MathUtils.compareTo(420.9883873598594, 420.9883873598594, 420.9883873598594);
      int int1 = MathUtils.pow(0, 0);
      double double0 = MathUtils.round((double) 1, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 420.9883873598594;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 420.9883873598594;
      doubleArray0[6] = (double) 1;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.addAndCheck(0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2719.94691984672);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-2,719.947 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.1102230246251565E-16;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator((-1208.0516F));
      double double1 = MathUtils.indicator((double) (-1.0F));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1226), (-1226));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,226
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-147.7339138317648);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1824.311565;
      doubleArray0[6] = 1631.59;
      doubleArray0[7] = 1995.30522247713;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.round(0.0, (-6036));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 0;
      int int1 = (-3066);
      int int2 = MathUtils.gcd(0, (-3066));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = 3814.14;
      double double1 = MathUtils.indicator(3814.14);
      int int0 = 20;
      int int1 = MathUtils.gcd(629, 20);
      double double2 = MathUtils.normalizeAngle(0.0, 1.0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      double double0 = MathUtils.log(6.283185307179586, 0.0);
      double double1 = MathUtils.sinh(Double.NEGATIVE_INFINITY);
      double double2 = MathUtils.indicator((-866.3));
      double double3 = MathUtils.round(Double.NEGATIVE_INFINITY, 1017, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-2070.421404917015);
      doubleArray0[3] = (-866.3);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-866.3);
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = (-866.3);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = 1275.6836171185585;
      boolean boolean0 = MathUtils.equalsIncludingNaN(3768.530883753329, 1275.6836171185585, 3768.530883753329);
      long long0 = 1L;
      long long1 = MathUtils.sign(1L);
      long long2 = MathUtils.mulAndCheck((-5318L), 0L);
      double double1 = MathUtils.sign((double) 0L);
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      long long3 = MathUtils.binomialCoefficient(1, 1);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1357));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,357
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = (-1679);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1679));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,679
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1558.765054124376;
      doubleArray0[1] = 742.2139;
      doubleArray0[2] = 0.125;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger3 = bigInteger1.abs();
      BigInteger bigInteger4 = bigInteger0.setBit(0);
      BigInteger bigInteger5 = bigInteger0.flipBit(0);
      BigInteger bigInteger6 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger7 = bigInteger0.gcd(bigInteger2);
      BigInteger bigInteger8 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger9 = MathUtils.pow(bigInteger0, bigInteger0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 5208.138364949);
      int int0 = MathUtils.hash(1.1102230246251565E-16);
      int int1 = 2738;
      int int2 = MathUtils.subAndCheck(0, 2738);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((byte)94, 162);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 94, k = 162
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathUtils.sinh((-79.71));
      boolean boolean0 = MathUtils.equals((-3407.01035), (-79.71));
      float float0 = MathUtils.sign(295.5049F);
      long long0 = 2420L;
      long long1 = MathUtils.indicator(2420L);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(866.922283112352, 866.922283112352);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1468), (-1468));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,468
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 5.650007086920087E-9;
      doubleArray0[2] = (-1609.7);
      doubleArray0[3] = 2991.537776;
      doubleArray0[4] = 5876.349706525199;
      doubleArray0[5] = 2.2250738585072014E-308;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm(629L, 0L);
      int int0 = (-3662);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0L, (-3662), (-3662));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -3,662, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      short short0 = bigInteger0.shortValueExact();
      int int0 = (-1);
      try { 
        MathUtils.pow(bigInteger0, (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = MathUtils.sign(1);
      float float0 = MathUtils.sign(Float.NaN);
      boolean boolean0 = MathUtils.equalsIncludingNaN(10.0, 10.0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float float0 = MathUtils.sign(986.63F);
      int int0 = MathUtils.indicator((-1971));
      MockRandom mockRandom0 = new MockRandom(0);
      BigInteger bigInteger0 = new BigInteger(157, 0, mockRandom0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      double double0 = MathUtils.normalizeAngle(157, (-1971));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1971);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      long long0 = MathUtils.subAndCheck((-115L), 3362L);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1153.005770250149;
      doubleArray0[1] = 1904.3456628;
      doubleArray0[2] = 13.07;
      doubleArray0[3] = 1881.221286;
      doubleArray0[4] = (-68.41602935362872);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-2910.424);
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1471.3802236138));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)58;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = MathUtils.sinh(6.283185307179586);
      int int0 = MathUtils.addAndCheck(0, 0);
      long long0 = MathUtils.gcd((long) 0, (long) 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 267.74489404101644;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      int int1 = MathUtils.hash(doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      int int2 = bigInteger1.intValueExact();
      BigInteger bigInteger2 = bigInteger1.min(bigInteger0);
      int int3 = bigInteger0.signum();
      BigInteger bigInteger3 = bigInteger0.andNot(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      long long1 = MathUtils.addAndCheck(355687428096000L, (-3848L));
      long long2 = MathUtils.pow(0L, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1, 1102.38740952257, 0.0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      double double1 = MathUtils.distance(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 4194304;
      // Undeclared exception!
      MathUtils.factorialLog(4194304);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 22;
      double double0 = MathUtils.binomialCoefficientLog(22, 22);
      long long0 = MathUtils.gcd((-2006L), (-2006L));
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-2006L), 22, 22);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 12;
      int int1 = MathUtils.lcm(12, 12);
      int int2 = MathUtils.hash((double[]) null);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      float float0 = MathUtils.indicator((float) 12);
      double double1 = MathUtils.binomialCoefficientDouble(1664, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 2, 2);
      byte byte0 = MathUtils.indicator((byte) (-120));
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (int) (byte) (-120);
      intArray0[3] = (int) (byte) (-120);
      double double0 = MathUtils.distance(intArray0, intArray0);
      byte byte1 = MathUtils.sign((byte) (-1));
      int int0 = MathUtils.pow((int) (byte) (-120), 31);
      double double1 = MathUtils.sinh(2);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 2, (double) (-120));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-22.06);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathUtils.sinh(1480.049817253005);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double1 = MathUtils.scalb(0.0, 230);
      boolean boolean1 = MathUtils.equals(1.1921056801463227E-8, 0.0);
      long long0 = MathUtils.addAndCheck((long) 230, (long) 230);
      float float0 = MathUtils.sign((float) 230);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.negate();
      String string0 = bigInteger0.toString(307);
      int int0 = bigInteger0.intValueExact();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      BigInteger bigInteger3 = bigInteger2.gcd(bigInteger1);
      int int1 = MathUtils.addAndCheck(230, 805);
      long long1 = bigInteger1.longValueExact();
      boolean boolean2 = MathUtils.equals(0.0, 2629.15);
      BigInteger bigInteger4 = bigInteger0.modPow(bigInteger1, bigInteger2);
      double double2 = MathUtils.scalb(0.0, 0);
      double double3 = MathUtils.indicator(1831.5503833);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-691.544032), 0.0);
      int int0 = MathUtils.mulAndCheck(938, 938);
      int int1 = MathUtils.addAndCheck(0, (-3020));
      int[] intArray0 = new int[8];
      intArray0[0] = (-3020);
      intArray0[1] = 938;
      intArray0[2] = (-3020);
      intArray0[3] = (-3020);
      intArray0[4] = 0;
      intArray0[5] = 879844;
      intArray0[6] = 0;
      intArray0[7] = (-3020);
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-3362.217051);
      MathUtils.checkOrder(doubleArray0);
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.lcm((-3133L), (-3212L));
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 176;
      intArray0[1] = 157;
      intArray0[2] = 258;
      intArray0[3] = 1731;
      intArray0[4] = 0;
      intArray0[5] = (-1529);
      intArray0[6] = 36;
      intArray0[7] = 3066;
      intArray0[8] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double2 = MathUtils.round((double) 0, 3066);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = (-5639);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 1323.5971, (-5639));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = bigInteger0.signum();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int int1 = bigInteger0.getLowestSetBit();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)9;
      doubleArray0[1] = (double) (byte)9;
      doubleArray0[2] = (double) (byte)9;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) (byte)9;
      doubleArray0[5] = (double) (byte)9;
      short short0 = bigInteger0.shortValueExact();
      doubleArray0[6] = (double) (byte)9;
      doubleArray0[7] = (double) 1;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (9 >= 9)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = MathUtils.hash(Double.NaN);
      long long0 = MathUtils.indicator((long) 2146959360);
      double double0 = MathUtils.log(0.0, 1.304E19);
      long long1 = MathUtils.addAndCheck((-3528L), 0L);
      int int1 = MathUtils.hash((double[]) null);
      long long2 = MathUtils.subAndCheck((long) 2146959360, (-3565L));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(244.46207, 2228.5043815015115, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 65);
      double double1 = MathUtils.log(14.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.equals((-3802.7), (double) 65, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = 1388.95;
      boolean boolean0 = MathUtils.equals(1388.95, 1388.95);
      int int0 = 8;
      int int1 = (-2115);
      try { 
        MathUtils.pow(8, (-2115));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (8^-2,115)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = MathUtils.indicator(2890L);
      int int0 = MathUtils.lcm(0, 0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2396);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 3674;
      int[] intArray1 = new int[7];
      intArray1[0] = 3674;
      intArray1[1] = (-2396);
      intArray1[2] = 3674;
      intArray1[3] = 0;
      intArray1[4] = (-2396);
      intArray1[5] = 0;
      intArray1[6] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(2044, 2044);
      double double0 = MathUtils.factorialDouble(0);
      int int1 = 0;
      int int2 = MathUtils.subAndCheck(0, 0);
      long long0 = MathUtils.lcm((long) 0, 811L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 65);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 65
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathUtils.sinh((-4699.77));
      long long0 = MathUtils.sign((-4400L));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("UNPARSEABLE_COMPLEX_NUMBER");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.UNPARSEABLE_COMPLEX_NUMBER
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-100.190422088672), (double) (byte)0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 146;
      int int1 = (-2256);
      long long0 = MathUtils.binomialCoefficient(146, (-2256));
      int int2 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = (-109L);
      long long2 = MathUtils.lcm(1L, (-109L));
      int int3 = 98;
      int int4 = 229;
      // Undeclared exception!
      try { 
        MathUtils.round(268.5269F, 98, 229);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 229, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(145, 835);
      long long0 = MathUtils.gcd(0L, (long) 835);
      long long1 = 1416L;
      long long2 = MathUtils.indicator(1416L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("bS[>1`O}J");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.bS[>1`O}J
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = MathUtils.scalb(1.304E19, 2595);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.not();
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.gcd((-1125L), 0L);
      boolean boolean0 = MathUtils.equals((-374.88), 0.0, (double) (-1125L));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = (-309.122532117);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-309.122532117), 0.0);
      int int0 = 0;
      double double1 = MathUtils.binomialCoefficientDouble(0, (byte)0);
      int int1 = MathUtils.hash((double) (byte)0);
      double double2 = MathUtils.cosh(1474.501716119);
      int int2 = 4965;
      int int3 = MathUtils.mulAndCheck((int) (byte)0, 4965);
      long long0 = MathUtils.sign((long) (byte)0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.divide(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 1050;
      int int1 = 1754;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1050, 1754);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1,050, k = 1,754
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-2437.0), (-2437.0));
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.log((byte)0, 0.0);
      long long0 = MathUtils.pow(0L, (int) (byte)0);
      int int0 = MathUtils.compareTo(0.0, (-1777.96), (byte)0);
      long long1 = MathUtils.binomialCoefficient(1, (byte)0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = 201.278949272153;
      doubleArray0[5] = (-1777.96);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      double double0 = MathUtils.factorialLog(1);
      int int1 = MathUtils.compareTo(1, Double.NEGATIVE_INFINITY, 0.0);
      long long0 = MathUtils.sign(0L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator((-3276.8F));
      double double2 = MathUtils.sinh(0.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      long long1 = MathUtils.mulAndCheck((long) 1, 2025L);
      double double3 = MathUtils.log(0L, 2025L);
      double double4 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.cosh((-491.208566627907));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-491.208566627907);
      doubleArray0[1] = 1.066939894697457E213;
      doubleArray0[2] = (-491.208566627907);
      doubleArray0[3] = 1.066939894697457E213;
      doubleArray0[4] = (-491.208566627907);
      doubleArray0[5] = 1.066939894697457E213;
      doubleArray0[6] = 1.066939894697457E213;
      doubleArray0[7] = 1.066939894697457E213;
      doubleArray0[8] = 1.066939894697457E213;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.mulAndCheck(199, 3314);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-297.71046793942304), (-297.71046793942304), (-297.71046793942304));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.19999954104423523;
      doubleArray0[1] = (-297.71046793942304);
      doubleArray0[2] = (-297.71046793942304);
      doubleArray0[3] = (-2085.86782802);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.compareTo((-297.71046793942304), (-2651.14495137), (-2085.86782802));
      int int1 = MathUtils.pow(1, (long) 1);
      byte byte0 = MathUtils.indicator((byte) (-73));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1937);
      intArray0[1] = 1312;
      intArray0[2] = 149;
      intArray0[3] = 0;
      intArray0[4] = 251;
      intArray0[5] = 61;
      intArray0[6] = 2197;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(4194304, (-2303));
      double double0 = MathUtils.sinh(0.13333332538604736);
      byte byte0 = MathUtils.indicator((byte)126);
      int int1 = MathUtils.hash((double) 4194304);
      // Undeclared exception!
      try { 
        MathUtils.factorial(191);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-302932621132653753L), (-2029L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 243;
      int int1 = 14;
      double double0 = MathUtils.binomialCoefficientLog(243, 14);
      int int2 = 0;
      double double1 = MathUtils.round(51.33001948953378, 0, 0);
      double double2 = (-539.2121694292566);
      int int3 = (-2632);
      // Undeclared exception!
      try { 
        MathUtils.round((-539.2121694292566), 0, (-2632));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2475.6425116568807, 2475.6425116568807, 1030);
      double double0 = MathUtils.binomialCoefficientLog(1030, 7);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = 40.01560583483866;
      doubleArray0[4] = (-3416.5818988107962);
      doubleArray0[5] = (double) 1030;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 1030;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.subAndCheck(1030, 0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (7 >= 7)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigInteger bigInteger3 = bigInteger1.subtract(bigInteger2);
      int int0 = bigInteger1.intValue();
      BigInteger bigInteger4 = bigInteger1.multiply(bigInteger2);
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger5 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger6 = bigInteger0.clearBit((byte)55);
      int int1 = bigInteger0.bitLength();
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, bigInteger0);
      int int2 = MathUtils.pow((int) (byte)55, 40320L);
      BigInteger bigInteger8 = MathUtils.pow(bigInteger3, 1039);
      int int3 = MathUtils.subAndCheck(3, 1032);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)55;
      doubleArray0[1] = (double) 1032;
      doubleArray0[2] = (double) (-839132159);
      doubleArray0[3] = (double) 1032;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (55 < 1,032)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = MathUtils.compareTo(1.5707963267948966, 1.5707963267948966, (-7.44321345601866E-11));
      int int1 = MathUtils.gcd((-298), (-544));
      double double0 = MathUtils.log((-1597.68), 199.195201095);
      double double1 = MathUtils.factorialDouble(0);
      int int2 = MathUtils.pow((-544), (long) 2);
      boolean boolean0 = MathUtils.equals(62.0, 199.195201095, 62.0);
      long long0 = MathUtils.binomialCoefficient(0, (-298));
      double double2 = MathUtils.scalb((-1858.0692), 15);
      int int3 = (-2992);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2992));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,992
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = MathUtils.cosh(917.3198865306923);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN(917.3198865306923, Double.POSITIVE_INFINITY, 1626.7);
      int int0 = MathUtils.indicator(21);
      double double1 = MathUtils.sign(917.3198865306923);
      int int1 = MathUtils.gcd(1, 1381);
      long long0 = MathUtils.indicator((long) 21);
      short short0 = (short)179;
      short short1 = MathUtils.indicator((short)179);
      double double2 = MathUtils.sinh(1);
      long long1 = MathUtils.factorial((short)1);
      double double3 = MathUtils.sign((double) 1);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = MathUtils.indicator(2489L);
      double double0 = MathUtils.sign((double) 1L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.304E19, (double) 1L, (double) 1L);
      long long1 = MathUtils.pow(0L, 0);
      double double1 = MathUtils.normalizeAngle((-929.42), (-929.42));
      long long2 = MathUtils.addAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 3094;
      int int1 = 15;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(3094, 15);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = MathUtils.lcm(197, 197);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, Double.NaN, 1874.381058145691);
      double double0 = MathUtils.log((-2897.1536285), (-2897.1536285));
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.gcd(120L, (-1679L));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = MathUtils.gcd((-612), (-612));
      int int1 = MathUtils.compareTo((-612), 612, (-612));
      int int2 = MathUtils.mulAndCheck((-1149), 0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-1), (-1), 612);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 48);
      long long0 = MathUtils.gcd((long) (byte) (-84), 1135L);
      long long1 = MathUtils.sign((-1084L));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((byte) (-84), (byte)0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -84, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      int int1 = MathUtils.subAndCheck(0, 3621);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = 17.0;
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(913.8602320883954, 17.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = MathUtils.lcm((-2064), (-2064));
      boolean boolean0 = MathUtils.equals(0.0, (-767.07), (double) (-2064));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(2.0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = 1.0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (1 < \u221E)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = MathUtils.gcd((-3795L), (-3795L));
      long long1 = MathUtils.lcm(3795L, 1188L);
      int int0 = MathUtils.lcm(66, 66);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = MathUtils.hash((double[]) null);
      double double0 = MathUtils.normalizeAngle(0, 0.0);
      double double1 = MathUtils.sinh(0);
      short short0 = MathUtils.indicator((short) (-461));
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      try { 
        MathUtils.pow((-200), (-1510L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-200^-1,510)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.10526403784751892;
      doubleArray0[1] = 1729.331402787203;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1796.5210774);
      doubleArray0[4] = (-545.1708);
      doubleArray0[5] = 2318.268585;
      doubleArray0[6] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0.105 < 1,729.331)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 16;
      int int1 = MathUtils.pow(16, 16);
      short short0 = MathUtils.indicator((short)1433);
      long long0 = MathUtils.gcd((-1568L), 20922789888000L);
      long long1 = MathUtils.factorial(0);
      long long2 = MathUtils.addAndCheck((-1568L), 1773L);
      int int2 = 13;
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1773L, 13, 19);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 19, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-7278142539171889152L), 1805L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-3341), (-3341));
      double double0 = MathUtils.round((double) (-3341), 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-3341), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -3,341, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.030589580535888672, 0.030589580535888672);
      double double1 = MathUtils.scalb(0.030589580535888672, 0);
      float float0 = MathUtils.indicator((float) 0);
      // Undeclared exception!
      try { 
        MathUtils.round(2.3841857910019882E-8, 0, 222);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      long long0 = MathUtils.factorial(0);
      int int1 = MathUtils.mulAndCheck(1, 1);
      double double0 = MathUtils.indicator((double) 1L);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      int int0 = MathUtils.indicator(0);
      double double0 = MathUtils.scalb(0.0F, 592);
      int[] intArray0 = new int[9];
      intArray0[0] = 75;
      intArray0[1] = 0;
      intArray0[2] = 592;
      intArray0[3] = 1;
      intArray0[4] = 592;
      intArray0[5] = 592;
      intArray0[6] = 2284;
      intArray0[7] = 1;
      intArray0[8] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.log(0, 1);
      long long0 = MathUtils.pow((long) 1, 3098L);
      double double3 = MathUtils.log(0.0F, 182.174);
      int int1 = MathUtils.mulAndCheck((-242), 75);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = MathUtils.sign(40320L);
      int int0 = MathUtils.compareTo((-3393.6), (-3393.6), 0.3333333134651184);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.3333333134651184;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      boolean boolean0 = MathUtils.equals(1.997844754509471E-9, 911.052298683);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 149);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      int int0 = MathUtils.indicator(0);
      double double0 = MathUtils.scalb(0.0F, 592);
      int[] intArray0 = new int[9];
      intArray0[0] = 75;
      intArray0[1] = 0;
      intArray0[2] = 592;
      intArray0[3] = 1;
      intArray0[4] = 592;
      intArray0[5] = 592;
      intArray0[6] = 2284;
      intArray0[7] = 1;
      intArray0[8] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.log(0, 1);
      double double3 = MathUtils.log(0.0F, 2284);
      int int1 = MathUtils.mulAndCheck((-242), 75);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.factorial(0);
      long long1 = MathUtils.sign((-4267615245585081135L));
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = MathUtils.hash(2.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1073741824;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (double) 1073741824;
      doubleArray0[3] = (double) 1073741824;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 2.0;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = (double) 1073741824;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.hash(2.0);
      long long0 = MathUtils.addAndCheck((long) 1073741824, (-300L));
      double double0 = MathUtils.scalb(0.0, 0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = MathUtils.compareTo(1.125, 0.5, 0.5);
      int int1 = MathUtils.gcd(1, (-607));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = 1.125;
      MathUtils.checkOrder(doubleArray0);
      float float0 = MathUtils.sign(4019.63F);
      int int2 = MathUtils.mulAndCheck((-1508), 1);
      long long0 = MathUtils.pow(1000L, 0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = (-1463);
      float float0 = MathUtils.round(38.0212F, (-1463), 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1463);
      intArray0[4] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((double) 0, 0.0036);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 3100);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 3,100
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.041666663879186654;
      doubleArray0[1] = 3602.0;
      doubleArray0[2] = 3.141592653589793;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 6;
      intArray0[1] = 0;
      intArray0[2] = 5;
      int int0 = 182;
      intArray0[3] = 182;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.factorialDouble(182);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-474));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -474
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)104);
      float float0 = MathUtils.round(0.0F, 0, 0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 5709, (-784));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -784, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (-2478.0);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-111), 13);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -111, k = 13
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = (-132);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-132));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -132
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 24;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 24, 24);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 1368.964, 0.0);
      int int1 = MathUtils.compareTo(0.0, 1368.964, (-1));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1368.964;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 1368.964;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1368.964;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 1.494140625, 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.7029898543501842E-8;
      doubleArray0[1] = (double) (-1);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      byte byte0 = MathUtils.sign((byte)113);
      long long0 = MathUtils.addAndCheck(0L, (long) 0);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(102, 102);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = MathUtils.indicator((-212.76587847017004));
      boolean boolean0 = MathUtils.equals((-212.76587847017004), (-254.3613989751904), 168.0919765363068);
      int int0 = 0;
      int int1 = (-2593);
      int int2 = MathUtils.subAndCheck(0, (-2593));
      int int3 = 2036;
      int int4 = MathUtils.indicator(2036);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-429));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -429
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3653.0223467;
      doubleArray0[2] = 482.40246544;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      long long0 = bigInteger1.longValue();
      BigInteger bigInteger2 = bigInteger1.xor(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.abs();
      BigInteger bigInteger4 = bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger5 = bigInteger0.gcd(bigInteger1);
      Object object0 = new Object();
      boolean boolean1 = bigInteger0.equals(object0);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 1335L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (3,653.022 >= 482.402)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      short short0 = MathUtils.indicator((short)4736);
      int int0 = MathUtils.pow((int) (short)1, (long) (short)4736);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (-2843);
      intArray0[3] = (int) (short)4736;
      intArray0[4] = 1;
      intArray0[5] = (int) (short)4736;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4736;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-2843);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.compareTo(0.0, (-2843), 4736);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int2 = bigInteger0.bitCount();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1594L);
      boolean boolean0 = MathUtils.equals(2.0, 0.0, 1);
      float float0 = MathUtils.sign((-151.62F));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = MathUtils.indicator((double) (-21));
      long long0 = MathUtils.mulAndCheck(17L, (long) (-924));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.sign(277.7331279);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2411.875011117, 6.283185307179586);
      short short0 = MathUtils.sign((short)620);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1130.21507), (double) 0, 13.807);
      byte byte0 = MathUtils.sign((byte)60);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-220);
      intArray0[1] = 476;
      intArray0[2] = 2635;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      int int0 = MathUtils.addAndCheck(812, 582);
      double double0 = MathUtils.factorialDouble(1394);
      long long0 = MathUtils.pow((-2547L), 0);
      byte byte0 = MathUtils.sign((byte)19);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.sinh((short)1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, (-924));
      double double0 = MathUtils.indicator((double) 0);
      int int1 = MathUtils.hash(1.0);
      long long0 = MathUtils.pow((long) (-924), (long) 924);
      long long1 = MathUtils.mulAndCheck(0L, (long) (-924));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-522L), (-522L));
      int int0 = MathUtils.gcd(0, 0);
      long long1 = MathUtils.addAndCheck((long) 0, 3937L);
      int int1 = MathUtils.indicator(0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 1, 111);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(4503599627370496L, 4503599627370496L);
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      long long2 = MathUtils.indicator((-3279L));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = MathUtils.compareTo(213.230211327363, (-2406.4), 1.1102230246251565E-16);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.16666666666666666;
      doubleArray0[1] = 1.25;
      doubleArray0[2] = (-2406.4);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1.25 >= -2,406.4)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-2.957007209750105E-8), (-855.18319729));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-855.18319729);
      doubleArray0[2] = (-855.18319729);
      doubleArray0[3] = (-855.18319729);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -855.183)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4795.18532003187;
      doubleArray0[1] = 4.662;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow(3, 3);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 4795.18532003187;
      doubleArray1[3] = (-1017.047050841539);
      doubleArray1[4] = 4795.18532003187;
      doubleArray1[5] = 16.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 419L);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(4116.11254419, 4116.11254419);
      float float0 = MathUtils.round((-1885.602F), 1718);
      long long0 = MathUtils.factorial(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.addAndCheck(1718, 1718);
      int int1 = MathUtils.sign(3436);
      double double2 = MathUtils.binomialCoefficientLog(1718, 1652);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathUtils.log((-1.0), (-1.0));
      float float0 = MathUtils.sign((-3545.201F));
      float float1 = MathUtils.sign((-3545.201F));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 5709, (-784));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -784, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)104);
      long long0 = MathUtils.lcm((-3155L), (-3155L));
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)104;
      intArray0[3] = 908;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long1 = MathUtils.indicator((-7278142539171889152L));
      int int1 = MathUtils.gcd(908, 1281);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1, 6.123233995736766E-17, (double) (-1L));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 908;
      doubleArray0[1] = 234.3951080684608;
      doubleArray0[2] = 823.4645;
      doubleArray0[3] = (double) 908;
      doubleArray0[4] = 0.0;
      int int2 = MathUtils.hash(doubleArray0);
      int int3 = MathUtils.pow(104, 104);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = MathUtils.cosh(1585.6);
      double double1 = 0.0;
      int int0 = MathUtils.compareTo(Double.POSITIVE_INFINITY, 0.0, (-854.08));
      double double2 = MathUtils.factorialDouble(63);
      boolean boolean0 = MathUtils.equals(0.08371849358081818, 1.9826083154044198E87, 72.0);
      double double3 = MathUtils.sign(0.0);
      int int1 = MathUtils.addAndCheck(1, 24);
      double double4 = (-1.0E-6);
      double double5 = MathUtils.scalb((-1.0E-6), 7);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 1, 0.0, 9.0);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) 63, 2.2250738585072014E-308, 742);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2129));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,129
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = (-2867);
      int int1 = MathUtils.sign((-2867));
      long long0 = (-2742L);
      long long1 = MathUtils.gcd((-2742L), (-860L));
      try { 
        MathUtils.pow(19, (-3211));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (19^-3,211)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 1538);
      int[] intArray0 = new int[8];
      intArray0[0] = 1538;
      intArray0[1] = 1538;
      intArray0[2] = 5073;
      intArray0[3] = 8;
      intArray0[4] = 0;
      intArray0[5] = 1538;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.normalizeAngle(2816.0, (-1228.9011568899932));
      int int2 = MathUtils.indicator(21);
      boolean boolean0 = MathUtils.equals((double) 0, (double) 21, (double) 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-767.0621);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = (double) 5073;
      doubleArray1[3] = (double) 1538;
      doubleArray1[4] = (double) 0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = MathUtils.gcd(2160, (-1052));
      double double0 = MathUtils.binomialCoefficientDouble(0, (-1052));
      long long0 = MathUtils.subAndCheck(3952090531849364496L, (-1333L));
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 4;
      intArray0[2] = (-1052);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 3952090531849365829L, (double) 3952090531849364496L, 206);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.modPow(bigInteger3, bigInteger3);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }
}
