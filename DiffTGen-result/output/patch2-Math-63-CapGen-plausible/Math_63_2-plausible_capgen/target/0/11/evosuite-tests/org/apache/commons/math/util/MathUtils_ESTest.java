/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:54:45 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = MathUtils.gcd(885, 188);
      int int1 = MathUtils.compareTo(626.4499160121171, 1, 626.4499160121171);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 626.4499160121171;
      doubleArray0[2] = 626.4499160121171;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 1371.204;
      doubleArray0[6] = (double) 188;
      doubleArray0[7] = (double) 885;
      doubleArray0[8] = (double) 188;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.binomialCoefficient(0, (-1083));
      double double0 = MathUtils.log(0.0, 1.0);
      float float0 = MathUtils.sign(Float.NaN);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 14);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 14
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = (-1578);
      int int1 = 0;
      int int2 = MathUtils.lcm((-1578), 0);
      int int3 = 3524;
      double double0 = MathUtils.factorialLog(3524);
      int int4 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0, (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = MathUtils.factorialLog(1343);
      long long0 = MathUtils.mulAndCheck((long) 1343, (long) 1343);
      int int0 = MathUtils.mulAndCheck(1343, 1343);
      int[] intArray0 = new int[7];
      intArray0[0] = 1803649;
      intArray0[1] = 1343;
      intArray0[2] = 1343;
      intArray0[3] = 1803649;
      intArray0[4] = 1803649;
      intArray0[5] = 1803649;
      intArray0[6] = 1803649;
      int[] intArray1 = new int[9];
      intArray1[0] = 1343;
      intArray1[1] = 1803649;
      intArray1[2] = 1803649;
      intArray1[3] = 1803649;
      intArray1[4] = 1343;
      intArray1[5] = 1803649;
      intArray1[6] = 1343;
      intArray1[7] = 1343;
      intArray1[8] = 1343;
      int int1 = MathUtils.distance1(intArray0, intArray1);
      int int2 = MathUtils.hash((double[]) null);
      long long1 = MathUtils.sign((long) 9011530);
      boolean boolean0 = MathUtils.equalsIncludingNaN(12.0, 3194.0, 1803649);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 2267;
      boolean boolean0 = MathUtils.equals((-1.0), (-3077.96105700795), 2267);
      double double0 = MathUtils.indicator((-3077.96105700795));
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = (-522);
      int int1 = MathUtils.indicator((-522));
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals(2879.00033308203, 2879.00033308203, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-189.09);
      doubleArray0[1] = (-4106.7);
      doubleArray0[2] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator((-1863.9393F));
      double double0 = MathUtils.round((-189.09), 0, 0);
      float float1 = MathUtils.round(0.0F, 0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (-190.0);
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = 0.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = (-1901L);
      try { 
        MathUtils.pow((-1901L), (-1901L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,901^-1,901)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        MathUtils.pow((-1070L), (-1070L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,070^-1,070)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0, (-274.135662663057));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 747;
      intArray0[1] = 57;
      intArray0[2] = (-1);
      intArray0[3] = (-3617);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.subAndCheck((-586), (-3103));
      double double0 = MathUtils.cosh(2.2250738585072014E-308);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.2250738585072014E-308;
      doubleArray0[1] = 2.2250738585072014E-308;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double3 = MathUtils.log((-586), 1.0);
      double double4 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2517);
      int int2 = MathUtils.mulAndCheck((-1), (-3103));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 3581;
      int int1 = MathUtils.pow((-157), 3581);
      short short0 = (short)226;
      short short1 = MathUtils.sign((short)226);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = MathUtils.cosh(81.7711222060986);
      double double1 = MathUtils.cosh(383.4);
      double double2 = MathUtils.sign(1.6124058532928218E166);
      int int0 = MathUtils.addAndCheck(1267, 116);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 116, (double) 1383, 1.6282352681534801E35);
      boolean boolean1 = MathUtils.equals(1.0, 383.4);
      boolean boolean2 = MathUtils.equals(0.0, 1.6124058532928218E166, 0.0);
      boolean boolean3 = MathUtils.equalsIncludingNaN(29.939436877906, 0.0);
      int int1 = MathUtils.indicator(116);
      long long0 = MathUtils.pow((-1L), 1267);
      double double3 = MathUtils.sinh((-2645.321861228911));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-13));
      int int0 = MathUtils.pow((int) (byte) (-13), 2289L);
      int int1 = 0;
      float float0 = MathUtils.round((-1389.8019F), 0);
      double double0 = (-1142.898677828767);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1142.898677828767), (double) 0, (-2678.12892531217));
      byte byte1 = (byte)73;
      byte byte2 = MathUtils.indicator((byte)73);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (byte)73, (double) (byte) (-1), (-1712));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = (-1464);
      int int1 = MathUtils.addAndCheck((-1464), (-1464));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1280.4701758322), (double) (-1464), (-0.2499999997677497));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2928);
      doubleArray0[1] = (-0.2499999997677497);
      doubleArray0[2] = (-0.2499999997677497);
      doubleArray0[3] = (-0.2499999997677497);
      doubleArray0[4] = (-1280.4701758322);
      doubleArray0[5] = (-0.2499999997677497);
      doubleArray0[6] = (double) (-2928);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (-0.25 >= -0.25)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1631, (-1660));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1660);
      doubleArray0[1] = (double) 1631;
      doubleArray0[2] = (double) (-1660);
      doubleArray0[3] = (double) 1631;
      doubleArray0[4] = (double) (-1660);
      doubleArray0[5] = (double) 1631;
      doubleArray0[6] = (double) 1631;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = 0;
      int int1 = 152;
      // Undeclared exception!
      try { 
        MathUtils.round((-542.1F), 0, 152);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 152, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = MathUtils.gcd((-9223372036854775808L), 3034L);
      int[] intArray0 = new int[7];
      intArray0[0] = 593;
      intArray0[1] = (-2290);
      intArray0[2] = 213;
      intArray0[3] = 110;
      intArray0[4] = 0;
      intArray0[5] = (-2810);
      intArray0[6] = 1326;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = 4503599627370495L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4503599627370495L, 4503599627370495L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = MathUtils.lcm(115, 1756);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 1756, 115);
      int int1 = (-1160);
      int int2 = MathUtils.gcd((-1160), 17);
      double double0 = MathUtils.cosh(1150.1001695571);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1756;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.subAndCheck((long) 1756, 826L);
      double double2 = MathUtils.factorialDouble(2307);
      int int3 = MathUtils.lcm(17, 1756);
      int int4 = (-503);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-503));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -503
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.mulAndCheck(0, 42);
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      long long0 = MathUtils.mulAndCheck((long) 0, (-1474L));
      int int1 = 4957;
      int int2 = MathUtils.gcd(0, 4957);
      BigInteger bigInteger0 = BigInteger.valueOf((-1474L));
      String string0 = "";
      // Undeclared exception!
      try { 
        bigInteger0.nextProbablePrime();
      } catch(ArithmeticException e) {
         //
         // start < 0: -1474
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      double double0 = MathUtils.sinh(0.0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = (-1331);
      int int1 = 16;
      int int2 = MathUtils.mulAndCheck((-1331), 16);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (-21296), (-2039.811647), (-1331));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = 61;
      // Undeclared exception!
      try { 
        MathUtils.round(758.247F, 61, 31);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 31, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = MathUtils.sign(0.0F);
      int int0 = 219;
      // Undeclared exception!
      try { 
        MathUtils.round(2073.131F, 219, 219);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 219, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, (double) 0, 1.304E19);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = MathUtils.sign((-451.2006454178017));
      int int0 = MathUtils.gcd(0, 0);
      double double1 = MathUtils.normalizeAngle(0.0, 1606.19);
      short short0 = MathUtils.sign((short) (-1673));
      long long0 = MathUtils.lcm((long) 0, (-2216L));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, (-1510.763213));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      try { 
        MathUtils.pow((BigInteger) null, (-4306L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-4,306)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2069.8);
      doubleArray0[1] = (-1537.839);
      doubleArray0[2] = 0.49999999999999994;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1513.302384725054;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1471.6));
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      int int0 = MathUtils.subAndCheck(0, 33);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-2069.8);
      doubleArray2[1] = (-1537.839);
      doubleArray2[2] = (-527.1016217966279);
      doubleArray2[3] = 858.6;
      doubleArray2[4] = 1214.1813512732;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = 0.49999999999999994;
      doubleArray2[7] = 0.49999999999999994;
      doubleArray2[8] = (-2069.8);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray2);
      int int1 = MathUtils.mulAndCheck(227, 227);
      int int2 = MathUtils.mulAndCheck((-2046), (-33));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1650.202564681;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2771.1526);
      doubleArray0[3] = 807.0754199;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 807.0754199;
      doubleArray1[1] = 1650.202564681;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.indicator((short)0);
      int int0 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.binomialCoefficientDouble((short)0, (-2503));
      int int1 = MathUtils.gcd((int) (short)1, (-527));
      byte byte0 = MathUtils.indicator((byte)33);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = 62;
      boolean boolean0 = bigInteger0.testBit(62);
      BigInteger bigInteger1 = null;
      float float0 = bigInteger0.floatValue();
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathUtils.round(1.625, 0, 0);
      double double1 = MathUtils.scalb(0.0, 0);
      int int0 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-60.08924210115);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 183.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-60.08924210115);
      doubleArray1[1] = (-60.08924210115);
      doubleArray1[2] = (-60.08924210115);
      doubleArray1[3] = 183.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 183.0;
      doubleArray1[6] = (-60.08924210115);
      doubleArray1[7] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
      int int0 = MathUtils.sign(1005);
      int int1 = MathUtils.gcd(1005, 1005);
      double double1 = MathUtils.scalb(0.0, 1715);
      double double2 = MathUtils.cosh(3.834E-20);
      byte byte0 = MathUtils.sign((byte)104);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte byte0 = (byte)92;
      byte byte1 = MathUtils.sign((byte)92);
      double double0 = MathUtils.normalizeAngle((-1479.01899142), (-152.564));
      int int0 = 0;
      float float0 = MathUtils.round((float) (byte)92, 0, (int) (byte)1);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = (-116.9215);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-116.9215), (-976.001033623));
      int int0 = 2957;
      int int1 = MathUtils.indicator(2957);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = (-4075);
      int int1 = MathUtils.subAndCheck((-4075), 0);
      double double0 = MathUtils.cosh(0);
      int int2 = MathUtils.pow(0, 2935890503282001226L);
      int int3 = 0;
      int int4 = (-2160);
      int int5 = MathUtils.subAndCheck(0, (-2160));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2935890503282001226L;
      doubleArray0[2] = (double) (-4075);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-4075);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-2160);
      doubleArray0[7] = (double) (-2160);
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.sign((-26L));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(2.9358905032820014E18, (double) 0, (-2160));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2427.3876016422028;
      doubleArray0[1] = 8.0E298;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.058823529411764705;
      doubleArray0[4] = 2290.0;
      doubleArray0[5] = 3.141592653589793;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 5.0;
      doubleArray0[8] = (-3225.715092221822);
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      double double1 = MathUtils.binomialCoefficientLog(2371, 0);
      long long1 = MathUtils.pow(120L, 2371);
      byte byte0 = MathUtils.indicator((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2371, 185);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.003, 0.0, 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.003;
      doubleArray0[1] = 0.003;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0.003 <= 0.003)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      short short0 = (short) (-1530);
      short short1 = MathUtils.indicator((short) (-1530));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1);
      double double0 = 1249.5128676;
      doubleArray0[1] = 1249.5128676;
      doubleArray0[2] = (double) (short) (-1530);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,249.513 >= -1,530)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1365);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (short)1365;
      doubleArray0[3] = (double) (short)1365;
      doubleArray0[4] = (double) (short)1365;
      doubleArray0[5] = (double) (short)1365;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.sign((-834));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = (-1667L);
      long long1 = MathUtils.addAndCheck((-3416L), (-1667L));
      int[] intArray0 = new int[2];
      intArray0[0] = 110;
      intArray0[1] = (-262);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = 1.1430250008909141E-8;
      double double1 = 2494.77660786;
      double double2 = MathUtils.normalizeAngle(1.1430250008909141E-8, 2494.77660786);
      double double3 = MathUtils.normalizeAngle(1210.3126616679, 110);
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((-9223372036854775808L), 6227020800L);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -9,223,372,036,854,775,808 + -6,227,020,800
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
      int int0 = MathUtils.lcm(0, 0);
      int int1 = MathUtils.hash((-679.15149));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-679.15149);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((double) 0, 0.0, 629);
      short short0 = MathUtils.sign((short)0);
      short short1 = MathUtils.sign((short) (-1274));
      short short2 = MathUtils.indicator((short) (-1122));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 643L);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = (-2427L);
      long long1 = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-2427L), (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -9,223,372,036,854,775,808 + -2,427
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      int int0 = MathUtils.pow(0, 0L);
      byte byte0 = MathUtils.sign((byte)86);
      long long0 = MathUtils.addAndCheck((long) (byte)1, 0L);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((float) 1, (-2217), (int) (byte)1);
      long long1 = MathUtils.pow(39916800L, 39916800L);
      int int1 = MathUtils.lcm((int) (byte)86, 1);
      boolean boolean1 = MathUtils.equals((double) (-2217), 988.587891491564, (double) (byte)1);
      float float1 = MathUtils.sign(1472.0F);
      long long2 = MathUtils.indicator((long) (-2217));
      long long3 = MathUtils.sign(2147483647L);
      long long4 = MathUtils.pow(2836L, 771);
      int[] intArray0 = new int[4];
      intArray0[0] = 86;
      intArray0[1] = 1;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 0.0, (-2072.511232735877));
      int int0 = MathUtils.gcd(958, 958);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 357;
      double double0 = MathUtils.factorialLog(357);
      // Undeclared exception!
      try { 
        MathUtils.factorial(357);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = MathUtils.sign(1.0F);
      long long0 = MathUtils.gcd((-456L), (-456L));
      int int0 = MathUtils.pow(117, 0L);
      int int1 = 89;
      int int2 = MathUtils.addAndCheck(1, 89);
      int int3 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 1);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(14);
      long long0 = MathUtils.subAndCheck(1573L, 0L);
      double double1 = MathUtils.cosh((-2991.2520080245076));
      long long1 = 0L;
      int int0 = MathUtils.pow(14, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, (double) 0L);
      int int1 = MathUtils.indicator((-1512));
      int int2 = (-3423);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-3423));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,423
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathUtils.cosh(2931.71828);
      long long0 = MathUtils.addAndCheck((-3159L), (-3159L));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-6318L);
      doubleArray0[1] = (double) (-6318L);
      doubleArray0[2] = 2931.71828;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 2931.71828;
      doubleArray0[7] = 2931.71828;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.pow(58, 9193070505571053912L);
      double double1 = MathUtils.log(2931.71828, 0.07692307692307693);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 259.4138556;
      doubleArray0[3] = 1663.3051747389;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-516.3158);
      doubleArray0[6] = 700.87;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-\u221E <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-89);
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-87);
      byte byte1 = (byte)0;
      byteArray0[5] = (byte)0;
      byte byte2 = (byte)48;
      byteArray0[6] = (byte)48;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.clearBit((byte)42);
      BigInteger bigInteger2 = BigInteger.valueOf((byte) (-87));
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (int) (byte)0);
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
      BigInteger bigInteger4 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger4, (int) (byte) (-87));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-87)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 66;
      double double0 = MathUtils.factorialDouble(66);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 66);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float float0 = (-823.0F);
      float float1 = MathUtils.indicator((-823.0F));
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = MathUtils.lcm(3725L, 3725L);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = 61;
      double double1 = MathUtils.binomialCoefficientLog(61, 61);
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 8.251545029714408E-9;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 9.140260083262505E-9;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-1805));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1,805)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = bigInteger0.bitLength();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.scalb((byte)0, (byte)15);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)15;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = 0.0;
      int int1 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.lcm(801L, (-2416L));
      double double1 = MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      short short0 = MathUtils.sign((short)2418);
      double double0 = MathUtils.round(Double.NaN, 0);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(Integer.MIN_VALUE, Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = (-416);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-416));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -416
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      float float0 = MathUtils.indicator((float) 0);
      int int1 = MathUtils.pow(0, 0);
      long long0 = MathUtils.lcm((long) 1, 0L);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 163.04578197009;
      doubleArray0[1] = (-1507.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 454.896760418379;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3.141592653589793;
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NaN);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte byte0 = (byte)1;
      byte byte1 = MathUtils.sign((byte)1);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = (-1186);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 0.0, (-1186));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 424.696788004;
      doubleArray0[1] = 3652.4901388518815;
      doubleArray0[2] = 1.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.shiftRight(12);
      double double1 = bigInteger0.doubleValue();
      BigInteger bigInteger2 = BigInteger.valueOf((-3769L));
      boolean boolean0 = bigInteger0.equals((Object) null);
      String string0 = bigInteger0.toString();
      BigInteger bigInteger3 = BigInteger.valueOf(4032L);
      BigInteger bigInteger4 = bigInteger0.setBit(327);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 0L);
      long long0 = MathUtils.gcd(0L, 0L);
      int int0 = MathUtils.indicator(0);
      short short0 = MathUtils.indicator((short)0);
      double double2 = MathUtils.sign(0.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(766, 327);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.cosh((-0.33333333333333287));
      double double1 = MathUtils.cosh((-158.6862981948597));
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)77);
      BigInteger bigInteger0 = BigInteger.TEN;
      double double0 = bigInteger0.doubleValue();
      BigInteger bigInteger1 = bigInteger0.flipBit(0);
      double double1 = bigInteger0.doubleValue();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger2, (long) (byte)77);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = (double) (byte)77;
      BigInteger bigInteger4 = BigInteger.valueOf((byte)1);
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) 0;
      BigInteger bigInteger5 = bigInteger0.max(bigInteger2);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (77 > 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2172.92615358);
      doubleArray0[1] = 2412.83459;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-147.24904952849087);
      doubleArray0[6] = 1.494140625;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.subAndCheck(0, 419);
      int int1 = MathUtils.addAndCheck(419, 419);
      int int2 = MathUtils.compareTo((-147.24904952849087), (-1796.483), 0.0);
      int int3 = MathUtils.indicator((-449));
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-449);
      doubleArray1[1] = 2412.83459;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = MathUtils.log(0.19999998807907104, 0.0);
      int int0 = (-3108);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-3108));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,108
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-2352L), (-361L));
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-361L), (-1744), (-1744));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(2157);
      int int0 = MathUtils.sign((-1332));
      double double1 = MathUtils.normalizeAngle(Double.POSITIVE_INFINITY, (-1332));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int int1 = MathUtils.sign(18);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0);
      double double2 = MathUtils.round((-3195.722185118483), 0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.0;
      int int0 = MathUtils.compareTo((-550.0), 0.0, 0.0);
      int int1 = (-1546);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1546), (-1546));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,546
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 243.34;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1961.57329038214);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.1102230246251565E-16;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 1466.918110764322;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 3813.975;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(0.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 249);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 249
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      short short0 = MathUtils.indicator((short)0);
      boolean boolean0 = MathUtils.equals(1846.856696977, 767.50094492, (-2.6033824355191673E-8));
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = 3;
      intArray0[5] = (int) (short)1;
      intArray0[6] = (int) (short)1;
      intArray0[7] = (int) (short)1;
      intArray0[8] = (int) (short)1;
      int[] intArray1 = new int[7];
      intArray1[0] = (int) (short)1;
      intArray1[1] = (int) (short)0;
      intArray1[2] = (int) (short)0;
      intArray1[3] = 3;
      intArray1[4] = 3;
      intArray1[5] = (int) (short)0;
      intArray1[6] = 3;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      int int0 = MathUtils.pow((-1374), 4254);
      long long0 = MathUtils.gcd(20922789888000L, (long) 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 4254;
      intArray0[1] = (-1374);
      intArray0[2] = 0;
      intArray0[3] = (-28);
      intArray0[4] = (-1374);
      intArray0[5] = 4254;
      intArray0[6] = 4254;
      intArray0[7] = (-1374);
      intArray0[8] = (-1374);
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathUtils.log(0.1818181574344635, (-387.92631));
      long long0 = MathUtils.lcm(0L, (-722L));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-204.352010598), (-204.352010598), (-204.352010598));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-204.352010598);
      doubleArray0[1] = (-204.352010598);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      long long0 = MathUtils.indicator(2903L);
      int int0 = (-3618);
      int int1 = MathUtils.pow((-3618), 66);
      // Undeclared exception!
      try { 
        MathUtils.equals((-0.25), 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.indicator(4149.81079971);
      float float0 = MathUtils.indicator(0.0F);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-53);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.abs();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) (byte)100);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, (double) (byte)100, (int) (byte)0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1030;
      intArray0[1] = 18;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.lcm(18, 18);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.normalizeAngle(18, 18);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.gcd((long) 0, 1702L);
      int int4 = MathUtils.gcd(0, 18);
      double double1 = MathUtils.sign(1.0);
      short short0 = MathUtils.sign((short) (-1089));
      byte byte0 = MathUtils.indicator((byte) (-48));
      int int5 = MathUtils.gcd(67, 0);
      int int6 = MathUtils.sign((-662));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double2 = MathUtils.binomialCoefficientLog(18, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 18.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      short short1 = MathUtils.sign((short) (byte) (-1));
      int int7 = MathUtils.distance1(intArray0, intArray0);
      double double3 = MathUtils.scalb((-662), 1101);
      double double4 = MathUtils.normalizeAngle(0, (-4270.0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = (-1509);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1509));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,509
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-3236));
      double double0 = MathUtils.sign((double) (short) (-3236));
      try { 
        MathUtils.pow(0L, (int) (short) (-3236));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-3,236)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-707), (-707));
      short short0 = MathUtils.indicator((short) (-692));
      float float0 = MathUtils.indicator((float) (-707));
      long long0 = MathUtils.addAndCheck(0L, (long) (short) (-692));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = MathUtils.pow(2807L, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.sign((float) 2807L);
      float float1 = MathUtils.round(Float.NaN, 1030, 0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-0.0013888888689039883);
      doubleArray0[2] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      short short0 = MathUtils.sign((short)66);
      int int0 = MathUtils.mulAndCheck((int) (short)1, 138);
      long long0 = MathUtils.binomialCoefficient(2880, 0);
      double double1 = MathUtils.sinh(138);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.mulAndCheck((long) (short)66, (long) 0);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      double double2 = MathUtils.distance1(doubleArray2, doubleArray2);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      String string0 = bigInteger0.toString(27);
      int int1 = bigInteger0.bitLength();
      short short1 = bigInteger0.shortValueExact();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (int) (short)1);
      int int2 = MathUtils.hash(doubleArray2);
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray2);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 303;
      long long0 = MathUtils.binomialCoefficient(303, 7);
      double double0 = MathUtils.factorialDouble(0);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathUtils.cosh(1131.425485992774);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 1131.425485992774;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 1131.425485992774;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        MathUtils.pow(0L, (-2680));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,680)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = MathUtils.round((-1563.768836735221), 8);
      short short0 = MathUtils.indicator((short)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)0, (double) (short)0, (-1994.6040919));
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1563.76883674), 20.0, 0.0);
      int int0 = MathUtils.lcm(0, 0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(49.2327691714, 49.2327691714, 340.18444411834);
      boolean boolean1 = MathUtils.equals((-2472.383799215977), 340.18444411834, (-2472.383799215977));
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      intArray0[1] = (-1654);
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)103);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)103;
      doubleArray0[2] = (double) (byte)103;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0);
      double double0 = MathUtils.sinh((-498.301));
      byte byte0 = MathUtils.indicator((byte)77);
      long long1 = MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = MathUtils.sign((-345.0));
      int int0 = MathUtils.pow(2274, 2274);
      int int1 = MathUtils.sign(2274);
      boolean boolean0 = MathUtils.equals((double) 2274, (-1.0), Double.NEGATIVE_INFINITY);
      float float0 = MathUtils.round((float) 0, 2274);
      double double1 = MathUtils.indicator((double) 0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-115));
      double double0 = MathUtils.indicator(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd(0L, 0L);
      int int0 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.normalizeAngle((-618.848073939), 0.0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 0L, 16, (-972));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      double double0 = MathUtils.factorialDouble(1500);
      byte byte0 = MathUtils.indicator((byte)48);
      double double1 = MathUtils.factorialLog(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = bigInteger0.toByteArray();
      boolean boolean0 = bigInteger0.testBit(0);
      BigInteger bigInteger1 = bigInteger0.abs();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.mulAndCheck((long) (byte)1, 0L);
      int int1 = MathUtils.pow((-1968), 3414L);
      byte byte1 = MathUtils.sign((byte)0);
      double double2 = MathUtils.binomialCoefficientLog((byte)48, (-605));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 2908;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2908, 12);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 0, 0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      long long1 = MathUtils.gcd(2085L, 1L);
      float float0 = MathUtils.sign((-745.8F));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 1221.894791781925, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.subAndCheck(0L, 87178291200L);
      int int0 = MathUtils.subAndCheck(12, 12);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-2615L), 1307674368000L);
      // Undeclared exception!
      try { 
        MathUtils.round((-6480.2953446), 221, 9);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1494, 1494);
      int int0 = MathUtils.lcm(1494, 6);
      double double1 = MathUtils.sinh(1.0);
      int int1 = MathUtils.pow((-327), (long) 6);
      int int2 = MathUtils.addAndCheck(1494, 1494);
      long long0 = MathUtils.mulAndCheck(0L, (long) 2988);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.pow((-2210L), 36L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(9, 9);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, 2551.359243270227, 6);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(4194304, 0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 1483;
      double double0 = MathUtils.round(865.58155369735, 1483);
      int int1 = (-1578);
      // Undeclared exception!
      try { 
        MathUtils.equals(865.58155369735, (double) 1483, (-1578));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = MathUtils.pow(2305L, 0);
      int int0 = MathUtils.compareTo(1L, 1L, 2305L);
      int int1 = MathUtils.pow(0, 0);
      double double0 = MathUtils.sinh(0);
      long long1 = MathUtils.factorial(1);
      int int2 = MathUtils.mulAndCheck(17, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 17;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = 0;
      intArray0[8] = 879;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      int int0 = 12;
      long long0 = MathUtils.factorial(12);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.mulAndCheck(0, 0);
      int int2 = 161;
      int int3 = MathUtils.lcm((-2740), 161);
      int int4 = MathUtils.pow(3414, (long) 161);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2562.486;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2740);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-2740);
      doubleArray0[6] = (double) (-2740);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not decreasing (-2,740 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = 825L;
      long long1 = MathUtils.mulAndCheck(825L, 825L);
      int int0 = (-750);
      int int1 = 52;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-750), 52);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -750, k = 52
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      float float0 = MathUtils.sign((float) 0L);
      long long1 = MathUtils.pow(0L, 0L);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1610;
      intArray0[2] = 234;
      int int0 = 4194304;
      intArray0[3] = 4194304;
      intArray0[4] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = 4194304;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-4183), 4194304);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -4,183, k = 4,194,304
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 15;
      long long0 = (-2147483648L);
      try { 
        MathUtils.pow(15, (-2147483648L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (15^-2,147,483,648)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = MathUtils.pow(217, (long) 217);
      double double0 = MathUtils.sinh(217);
      float float0 = MathUtils.round((float) 217, 0);
      try { 
        MathUtils.pow(217, (-833099239));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (217^-833,099,239)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 1302);
      int int1 = MathUtils.pow((-3006), (long) 1302);
      double double0 = MathUtils.round(0.10526403784751892, 1302);
      long long0 = MathUtils.lcm((long) 1302, 1227L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 532518L;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((float) 1302, 0);
      int int2 = MathUtils.indicator(94);
      int int3 = MathUtils.gcd((-550), (-385));
      int int4 = MathUtils.subAndCheck(0, 94);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      long long0 = MathUtils.sign((long) (short)0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) (short)0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(627.206608);
      int int1 = MathUtils.indicator(434);
      long long1 = MathUtils.mulAndCheck((long) (short)0, (long) 434);
      double double1 = MathUtils.round(0.0, (int) (short)0);
      int int2 = MathUtils.indicator(540);
      int int3 = MathUtils.hash(doubleArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 236);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 124;
      int int1 = MathUtils.pow(124, (long) 124);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("I");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.I
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      float float0 = MathUtils.indicator((-1138.8102F));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, 0.0, 792);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 792;
      doubleArray0[1] = (double) 792;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 10.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      float float1 = MathUtils.indicator((-2937.0F));
      double double1 = MathUtils.sinh(0);
      double double2 = MathUtils.cosh((-1248.10173377598));
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) (-1.0F);
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = (double) (-1.0F);
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 792;
      doubleArray2[5] = 10.0;
      doubleArray2[6] = 817.1817234960258;
      double double3 = MathUtils.distanceInf(doubleArray2, doubleArray2);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean1 = MathUtils.equals(Double.POSITIVE_INFINITY, 817.1817234960258, 3624);
      boolean boolean2 = MathUtils.equals(10.0, (-1.0), 792.0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(4220L, 1143L);
      int int0 = MathUtils.compareTo(3483.208, 5363L, 5363L);
      int int1 = (-2244);
      int int2 = MathUtils.lcm(0, (-2244));
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(3.141592653589793, (-1936.549926), (-1936.549926));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float float0 = MathUtils.indicator((-2546.84F));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float float0 = MathUtils.sign((-4730.3247F));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-4730.3247F);
      doubleArray0[1] = (double) (-4730.3247F);
      doubleArray0[2] = (-2507.4771706274855);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-4730.3247F);
      doubleArray0[6] = (double) (-1.0F);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-4,730.325 < -2,507.477)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = MathUtils.lcm((-669), (-298));
      // Undeclared exception!
      try { 
        MathUtils.round((-3618.6381784769883), 61, 21);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1357), (-1357));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,357
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3221.1116462258), (-2244.0799), 2558);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-3512299194304650054L), (long) 2558);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = MathUtils.lcm((-4267615245585081135L), (-4267615245585081135L));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
      long long1 = MathUtils.subAndCheck(1L, 0L);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = MathUtils.round(2298.686671488, 82);
      long long0 = MathUtils.gcd((long) 82, 39916800L);
      float float0 = MathUtils.indicator((float) 82);
      double double1 = MathUtils.sign(0.0);
      double double2 = MathUtils.factorialLog(82);
      double double3 = MathUtils.cosh(0.0);
      double double4 = MathUtils.sign((-4182.03453977319));
      float float1 = MathUtils.indicator((float) 2L);
      long long1 = MathUtils.addAndCheck(2L, 1072L);
      long long2 = MathUtils.sign(1072L);
      // Undeclared exception!
      try { 
        MathUtils.round(2298.686671488, 82, 82);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-579), 125);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -579, k = 125
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = (-2201);
      try { 
        MathUtils.pow((-2201), (long) (-2201));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,201^-2,201)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(3.141592653589793, (-1.0));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.sign(2056.48);
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.sign(0.0F);
      double double1 = MathUtils.factorialDouble(0);
      int int1 = MathUtils.pow(0, (long) 1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        MathUtils.pow((-365), (-365));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-365^-365)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(0, (-94));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1292.14733376244, (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = MathUtils.cosh(1414.7743531);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = MathUtils.hash(1395.367056967932);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1654789807);
      doubleArray0[1] = 1395.367056967932;
      doubleArray0[2] = 1395.367056967932;
      doubleArray0[3] = 1395.367056967932;
      doubleArray0[4] = 1395.367056967932;
      doubleArray0[5] = (-1529.1170133);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1395.367056967932);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = MathUtils.hash(3.141592653589793);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 340593891;
      doubleArray0[1] = (double) 340593891;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = (double) 340593891;
      doubleArray0[4] = (double) 340593891;
      doubleArray0[5] = (double) 340593891;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 15;
      intArray0[1] = 201;
      intArray0[2] = 0;
      intArray0[3] = 115;
      intArray0[4] = (-855);
      intArray0[5] = 132;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathUtils.sinh((-403.9112945));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, 1.0);
      int int0 = MathUtils.subAndCheck(6, 6);
      byte byte0 = MathUtils.indicator((byte)31);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(788);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = MathUtils.compareTo((-2476.977404427734), (-2476.977404427734), (-2476.977404427734));
      long long0 = MathUtils.subAndCheck(289L, (long) 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 289L;
      doubleArray0[2] = (double) 289L;
      doubleArray0[3] = (double) 289L;
      doubleArray0[4] = (double) 289L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("_#");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection._#
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(835.4461473558, 0.5);
      boolean boolean1 = MathUtils.equals(2.718281828459045, (-6.630269455098));
      boolean boolean2 = MathUtils.equals(0.5, (-6.630269455098));
      int int0 = MathUtils.pow(0, 0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float float0 = MathUtils.sign((-621.0F));
      int int0 = MathUtils.pow(0, (long) 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.binomialCoefficientDouble(1, (-1324));
      double double2 = MathUtils.sign(1.0);
      int int1 = MathUtils.sign(958);
      double double3 = MathUtils.normalizeAngle(1.0, (-1.0F));
      float float1 = MathUtils.round((float) 958, (-2205));
      double double4 = MathUtils.round(0.0, 165);
      long long0 = MathUtils.binomialCoefficient(31, (-1324));
      int int2 = MathUtils.mulAndCheck(2689, 663);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-145.80018), 1207.291119520613, Double.NaN);
      MathUtils.checkOrder(doubleArray0);
      float float2 = MathUtils.round(0.0F, 31);
      int int3 = MathUtils.lcm(1, 2);
      double double5 = MathUtils.normalizeAngle((-541.2915543200191), 0.0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = MathUtils.lcm(1020, 1020);
      float float0 = MathUtils.indicator((float) 1020);
      double double0 = MathUtils.scalb(1.0F, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (-9223372036854775808L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(2.2250738585072014E-308, 2.2250738585072014E-308);
      int[] intArray0 = new int[0];
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(2.2250738585072014E-308, 2.2250738585072014E-308, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4128.3780991;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte0 = (byte)2;
      byte byte1 = MathUtils.sign((byte)2);
      long long0 = MathUtils.pow((-848L), 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.remainder(bigInteger3);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = (-4321);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-4321));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,321
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = MathUtils.lcm(1993L, 1346L);
      double double0 = MathUtils.log(1993L, 0.0);
      int int0 = 0;
      double double1 = MathUtils.scalb(0.0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte byte0 = bigInteger0.byteValueExact();
      float float0 = bigInteger0.floatValue();
      double double2 = bigInteger0.doubleValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 214;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1099.5640180259559), 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1099.5640180259559);
      doubleArray0[1] = (-1099.5640180259559);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1099.5640180259559);
      doubleArray0[4] = (-1099.5640180259559);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm(2047L, 2047L);
      boolean boolean1 = MathUtils.equals(1423.319334528, 2460.62, 18);
  }
}
