/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:02:17 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      double double1 = MathUtils.log(0.0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 280.8853230418565;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, 280.8853230418565);
      int int0 = MathUtils.pow(2145265173, (long) 2145265173);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 68;
      int int1 = 0;
      long long0 = MathUtils.binomialCoefficient(68, 0);
      int int2 = MathUtils.compareTo(0.0, 0.0, 68);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 68);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 68
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      double double1 = MathUtils.indicator(Double.NaN);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = MathUtils.sign(15);
      boolean boolean0 = MathUtils.equals((double) 15, (double) 1, 15);
      int int1 = MathUtils.lcm(63, 1);
      // Undeclared exception!
      try { 
        MathUtils.lcm(63, 2145186874);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = MathUtils.pow(3584, 3584);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double double0 = MathUtils.cosh(0.0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.mulAndCheck((-18L), 0L);
      float float0 = MathUtils.indicator((float) (-18L));
      MathUtils.OrderDirection mathUtils_OrderDirection1 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection1, true);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      short short0 = (short)239;
      short short1 = MathUtils.indicator((short)239);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-536870853L), (-7278142539171889152L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 29;
      int int1 = MathUtils.pow(0, 29);
      int int2 = MathUtils.hash((double[]) null);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = MathUtils.pow((long) 0, 5648769086999809661L);
      long long1 = MathUtils.gcd((-1253L), (-3533L));
      int int3 = MathUtils.compareTo(1.073741824E9, 1597.744803, (-1253L));
      double double1 = MathUtils.cosh(0);
      long long2 = MathUtils.addAndCheck((long) 0, (-1253L));
      byte byte0 = (byte)125;
      byte byte1 = MathUtils.indicator((byte)125);
      double double2 = MathUtils.indicator(72.0);
      int int4 = 0;
      int int5 = MathUtils.gcd(429, 0);
      int int6 = MathUtils.compareTo(72.0, 1.0, 429);
      float float0 = MathUtils.round((float) 429, 0, 0);
      int int7 = MathUtils.sign((int) (byte)1);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = MathUtils.indicator(1635L);
      float float0 = MathUtils.round(1.0F, 7, 7);
      double double0 = MathUtils.sign((double) 1.0F);
      int int0 = MathUtils.subAndCheck(7, 7);
      long long1 = MathUtils.lcm((long) 7, 1L);
      double double1 = MathUtils.cosh(1210.8669253702);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 7;
      double double2 = MathUtils.distance(intArray0, intArray0);
      short short0 = MathUtils.indicator((short)20);
      long long2 = MathUtils.pow((long) 7, 7);
      int int1 = MathUtils.addAndCheck(7, 7);
      long long3 = MathUtils.pow((long) (short)1, (long) 7);
      double double3 = MathUtils.indicator(2327.7791473567);
      boolean boolean0 = MathUtils.equals((-1737.18861), (-683.549791289311), 24);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 2452.2749;
      doubleArray0[2] = (-1737.18861);
      doubleArray0[3] = (double) 7;
      doubleArray0[4] = 2327.7791473567;
      doubleArray0[5] = (double) 1635L;
      doubleArray0[6] = 1210.8669253702;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = MathUtils.hash((double[]) null);
      long long0 = MathUtils.gcd(2156L, (long) 993);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = MathUtils.log(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      int int0 = MathUtils.addAndCheck(0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.factorial(0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)55;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-6,469,420,353,306,836,425^-6,469,420,353,306,836,425)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1295.45247873);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 823.6;
      doubleArray0[3] = (-1457.097874124217);
      doubleArray0[4] = (-217.570809);
      doubleArray0[5] = 1104.37685686153;
      doubleArray0[6] = 87.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1295.45247873);
      doubleArray1[1] = 823.6;
      doubleArray1[2] = 823.6;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 823.6;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-389.20737);
      doubleArray0[1] = Double.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(Double.NaN, 1073.8796345978276, 1073.8796345978276);
      double double0 = MathUtils.cosh((-2172.156));
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double double2 = MathUtils.sign(1073.8796345978276);
      double double3 = MathUtils.binomialCoefficientLog(4194304, 4194304);
      int int0 = MathUtils.pow((-1051), 3);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2031.12013));
      long long0 = MathUtils.subAndCheck(0L, 455L);
      float float0 = MathUtils.indicator((float) 0L);
      long long1 = MathUtils.sign(6722166367014452318L);
      long long2 = MathUtils.pow(2140L, 2300);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) 0L, (double) 2300, 145);
      boolean boolean3 = MathUtils.equalsIncludingNaN(0.5000000000042687, (-2031.12013), (-2031.12013));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = MathUtils.indicator(4135.9189);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2976;
      intArray0[2] = 87;
      intArray0[3] = 175;
      intArray0[4] = 3218;
      intArray0[5] = (-2483);
      intArray0[6] = 2296;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.sign((float) 2976);
      double double1 = MathUtils.binomialCoefficientDouble(87, (-2683));
      int int1 = MathUtils.addAndCheck(1452, (-2483));
      double double2 = MathUtils.indicator(4135.9189);
      int int2 = MathUtils.subAndCheck((-4108), 51);
      long long0 = MathUtils.gcd(120L, 0L);
      long long1 = MathUtils.pow(3335L, 0L);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      int int0 = MathUtils.hash(1.0);
      long long0 = MathUtils.subAndCheck((-65L), (long) 1072693248);
      double double1 = MathUtils.indicator(296.311400818);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.375, 0.0, (double) (-1072693313L));
      double double2 = MathUtils.binomialCoefficientLog(3177, 544);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1072693313L);
      doubleArray0[1] = (double) (-1072693313L);
      doubleArray0[2] = (double) 1072693248;
      doubleArray0[3] = (double) 3177;
      doubleArray0[4] = (double) 0;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double3 = MathUtils.indicator(1.304E19);
      long long1 = MathUtils.factorial(0);
      float float0 = MathUtils.sign((float) (-65L));
      long long2 = MathUtils.addAndCheck((-387L), 0L);
      double double4 = MathUtils.indicator(296.311400818);
      int[] intArray0 = new int[4];
      intArray0[0] = 544;
      intArray0[1] = 0;
      intArray0[2] = 544;
      intArray0[3] = 1072693248;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = MathUtils.sign((-3668L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-3668L), 0.0, 0.0);
      boolean boolean1 = MathUtils.equals((double) (-1L), (-4961.0), 381);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4961.0);
      doubleArray0[2] = (-4961.0);
      doubleArray0[3] = 1071.2591698;
      double double0 = MathUtils.safeNorm(doubleArray0);
      byte byte0 = MathUtils.sign((byte)92);
      float float0 = MathUtils.round(0.0F, 0, (int) (byte)1);
      boolean boolean2 = MathUtils.equals((double) (byte)1, 0.0, (double) 0.0F);
      double double1 = MathUtils.sinh((-745.64));
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double3 = MathUtils.sign(7097.227501558661);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double4 = MathUtils.round(99.6981, 10);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1372.599), (-1372.599), 31);
      long long0 = MathUtils.pow((-4098L), 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1372.599);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 31;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 31;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (-4098L);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.compareTo(0.0, 1L, 405.72291);
      long long1 = MathUtils.lcm((-4098L), (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-195));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -195
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = (-4174L);
      int int0 = 0;
      long long1 = MathUtils.pow((-4174L), 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("fa(");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.fa(
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 236.12669724596;
      doubleArray0[1] = 2210.651324204544;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.2857142686843872;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd(0, 178);
      int int1 = MathUtils.hash((-291.24));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 0);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger2.setBit(0);
      BigInteger bigInteger4 = bigInteger1.subtract(bigInteger2);
      int int2 = bigInteger1.bitLength();
      String string0 = bigInteger1.toString();
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger5 = bigInteger1.shiftLeft(0);
      byte byte0 = bigInteger5.byteValueExact();
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, bigInteger1);
      int int3 = MathUtils.mulAndCheck(3098, 251);
      double double0 = MathUtils.indicator(0.2857142686843872);
      int int4 = MathUtils.pow(0, 0L);
      int int5 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.factorialLog(178);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger7 = MathUtils.pow(bigInteger5, 4294967295L);
      short short0 = MathUtils.indicator((short)5);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float float0 = MathUtils.indicator(1723.808F);
      long long0 = MathUtils.addAndCheck((-5075L), (-2915L));
      int[] intArray0 = new int[5];
      intArray0[0] = 10;
      intArray0[1] = 0;
      intArray0[2] = (-1515);
      intArray0[3] = 63;
      intArray0[4] = (-2487);
      double double0 = MathUtils.distance(intArray0, intArray0);
      float float1 = MathUtils.round(Float.NaN, 1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      int int0 = MathUtils.addAndCheck(2386, 2386);
      int[] intArray0 = new int[9];
      intArray0[0] = 2386;
      intArray0[2] = 2386;
      intArray0[3] = 4772;
      intArray0[4] = 4772;
      intArray0[5] = 4772;
      intArray0[6] = 2386;
      intArray0[7] = 4772;
      intArray0[8] = 4772;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, (-1820.688), 2386);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 556.74;
      doubleArray0[1] = (-593.9214563413012);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1784.456;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-3349.71);
      doubleArray0[6] = 3316.1189611636;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 2.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-593.9214563413012));
      int int0 = MathUtils.hash(doubleArray1);
      double double0 = MathUtils.cosh(1275.0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray1);
      float float0 = MathUtils.round(954.4F, 98);
      long long0 = MathUtils.lcm((-3067L), 488L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(6.283185307179586, 1275.0);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      byte byte0 = MathUtils.indicator((byte)56);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-372), (-372));
      try { 
        MathUtils.pow((long) (-744), (long) (-744));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-744^-744)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = MathUtils.round(1.0F, (-1118));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (-749.836553778);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) Float.NaN;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) 1.0F;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) Float.NaN;
      doubleArray1[2] = (-749.836553778);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) Float.NaN;
      doubleArray1[5] = (double) (-1118);
      doubleArray1[6] = (double) (-1118);
      doubleArray1[7] = 6.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      long long0 = MathUtils.subAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      int int0 = 94;
      // Undeclared exception!
      try { 
        MathUtils.factorial(94);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 9.219544613762692E-9;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.15;
      doubleArray0[4] = (-1693.17642);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)126);
      long long0 = MathUtils.subAndCheck((long) (byte)126, 0L);
      double double0 = MathUtils.factorialLog(3);
      long long1 = MathUtils.pow((-2087L), (int) (byte)1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)126;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      long long2 = MathUtils.addAndCheck((-2087L), (long) (byte)126);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.sign((-43.0));
      int int0 = MathUtils.hash(0.0);
      int int1 = 66;
      int int2 = MathUtils.gcd(66, 0);
      float float0 = MathUtils.round((-1527.8187F), 0);
      int int3 = MathUtils.indicator(66);
      int[] intArray0 = new int[6];
      intArray0[0] = 66;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 66;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.sign((double) 0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 2047L);
      int int0 = Integer.MIN_VALUE;
      try { 
        MathUtils.pow(0L, Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,147,483,648)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = (-3707);
      int int1 = MathUtils.addAndCheck((-3707), (-3707));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      try { 
        MathUtils.pow(3952090531849364496L, (-3707));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (3,952,090,531,849,364,496^-3,707)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 865;
      int int1 = MathUtils.indicator(865);
      long long0 = 24L;
      long long1 = MathUtils.subAndCheck(24L, (long) 865);
      double double0 = MathUtils.round((double) 24L, 865);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 69;
      boolean boolean0 = MathUtils.equalsIncludingNaN((-559.6595367932), 0.0, 69);
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = MathUtils.gcd(0, 0);
      double[] doubleArray0 = new double[13];
      doubleArray0[11] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.log(0.008333333333329196, 0.008333333333329196);
      boolean boolean0 = MathUtils.equals(669.357091074456, 0.0, 669.357091074456);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.bitLength();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 52);
      int int1 = MathUtils.pow(52, 5);
      int int2 = MathUtils.pow((-171), (long) 380204032);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-171);
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 52;
      doubleArray0[3] = 0.008333333333329196;
      doubleArray0[4] = (double) (-523931647);
      doubleArray0[5] = 1.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (52 >= 0.008)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2950;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 6;
      intArray0[5] = 905;
      intArray0[6] = 71;
      intArray0[7] = 1927;
      intArray0[8] = 3;
      int[] intArray1 = new int[7];
      intArray1[0] = 1927;
      intArray1[1] = 2950;
      intArray1[2] = 71;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 71;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientLog(0, (-401));
      long long0 = MathUtils.sign((long) (-401));
      int int2 = 2172;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2172, 75);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathUtils.round(3387.1108, 0, 0);
      float float0 = MathUtils.sign(1407.4967F);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[5] = 0;
      intArray0[7] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte byte0 = (byte)31;
      byte byte1 = MathUtils.indicator((byte)31);
      long long0 = MathUtils.addAndCheck((long) (byte)31, (long) (byte)31);
      int int0 = MathUtils.lcm(142, 142);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.setBit(730);
      BigInteger bigInteger2 = BigInteger.valueOf(0L);
      BigInteger bigInteger3 = BigInteger.TEN;
      BigInteger bigInteger4 = bigInteger0.xor(bigInteger3);
      try { 
        MathUtils.pow(bigInteger0, (-94L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-94)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(3358.4198735647, 3358.4198735647);
      int int0 = MathUtils.compareTo(2385.638239, 3358.4198735647, 2224.697878096746);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (double) 0, 2538);
      int int2 = MathUtils.indicator((-1065));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2224.697878096746;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.round((float) 0, 3024);
      boolean boolean2 = MathUtils.equalsIncludingNaN(2.0, 4389.60518094);
      boolean boolean3 = MathUtils.equals(0.0, 0.0, (-2365.765));
      long long0 = MathUtils.addAndCheck((long) (-1065), (long) (-1065));
      double double2 = MathUtils.sinh(0.0);
      float float1 = MathUtils.round((float) 0, (-1799));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-25.661372);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-296.92605326500393);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.SAFE_MIN;
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      double double3 = MathUtils.sinh(Double.NaN);
      int int0 = MathUtils.lcm(0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      double double4 = MathUtils.factorialLog(204);
      int[] intArray0 = new int[1];
      intArray0[0] = 204;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.factorial(0);
      double double5 = MathUtils.normalizeAngle((-0.16624879837036133), (-3.940510424527919E-20));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, 0.0, 96);
      double double6 = MathUtils.cosh(0);
      int int3 = MathUtils.subAndCheck(204, 0);
      double double7 = MathUtils.factorialDouble(724);
      double double8 = MathUtils.binomialCoefficientLog(1500, 1500);
      long long1 = MathUtils.pow((long) 204, 4208363204685324176L);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = MathUtils.compareTo((-4090.885888), (-4090.885888), (-4090.885888));
      long long0 = 2460L;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 2460L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1369.4436;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator((-663L));
      double double1 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equals(0.0, 1382.80422, 0.0);
      int int0 = 1638;
      int int1 = MathUtils.addAndCheck(11, 1638);
      boolean boolean1 = MathUtils.equals((-655.031105), 0.0);
      long long1 = MathUtils.indicator((long) 1638);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      try { 
        MathUtils.pow(11, (-663L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (11^-663)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(225, 225);
      int int1 = MathUtils.pow(225, 225);
      boolean boolean0 = MathUtils.equalsIncludingNaN(833.5543104151, 0.008333333333329196);
      byte byte0 = MathUtils.sign((byte) (-77));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, (-901L));
      byte byte0 = MathUtils.indicator((byte) (-8));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-901L);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-8);
      doubleArray0[3] = (double) (byte) (-8);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (byte) (-8);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((float) (byte) (-8), 18);
      boolean boolean0 = MathUtils.equals((double) (-901L), 1749.0, 9);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathUtils.cosh(3.834E-20);
      int int0 = MathUtils.addAndCheck(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(893.4946918115938, 0.0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(893.4946918115938, 1975.0, 0.0);
      boolean boolean3 = MathUtils.equals((-1491.39075340464), 0.0, 1.0);
      byte byte0 = MathUtils.sign((byte)31);
      long long0 = MathUtils.binomialCoefficient((byte)31, 24);
      int int1 = MathUtils.compareTo(360.551797428, 1457.251693, 0.0);
      int int2 = MathUtils.mulAndCheck(512, 512);
      byte byte1 = MathUtils.indicator((byte)1);
      int[] intArray0 = new int[3];
      intArray0[0] = 24;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = 512;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.sinh((byte)1);
      int int0 = MathUtils.subAndCheck(0, (-1674));
      long long0 = MathUtils.subAndCheck(0L, 0L);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((double) 0, (double) 0, (double) 0L);
      double double2 = MathUtils.round((double) 0, (int) (byte)1);
      short short0 = MathUtils.indicator((short)0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("|ZSqAa}$~z\"~i");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.|ZSqAa}$~z\"~i
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 91;
      double double0 = MathUtils.round((-890.0545567445), 91);
      float float0 = MathUtils.round((float) 91, 1361);
      int int1 = MathUtils.addAndCheck(91, (-5352));
      long long0 = MathUtils.pow((-474L), 1364L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-890.0545567445);
      doubleArray0[1] = (double) 1361;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 91;
      doubleArray0[4] = (-890.0545567445);
      doubleArray0[5] = (double) Float.NaN;
      doubleArray0[6] = (-890.0545567445);
      doubleArray0[7] = (double) (-5352);
      doubleArray0[8] = (double) (-474L);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.indicator((-890.0545567445));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 91, (-474.0), 0.0);
      double double3 = MathUtils.factorialDouble(129);
      int int2 = MathUtils.hash((-890.0545567445));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(92, 1361);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 92, k = 1,361
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 4.9E-324;
      doubleArray0[2] = 2.2250738585072014E-308;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3.141592653589793;
      doubleArray0[6] = (-2404.4);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-582.3494931659849));
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1436.2768), 2.4384203044354907E-8);
      int int0 = MathUtils.hash(0.0);
      double double1 = MathUtils.factorialLog(0);
      boolean boolean2 = MathUtils.equals(0.14285714285714285, 1.986821492305628E-8);
      int int1 = MathUtils.mulAndCheck(0, 3041);
      boolean boolean3 = MathUtils.equals(4.9E-324, 0.0, 3.0);
      boolean boolean4 = MathUtils.equals((-2404.4), 4.9E-324, 0.0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 2511;
      double double0 = MathUtils.factorialDouble(2511);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      double double1 = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = (-99);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-99), (-99));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -99
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float float0 = MathUtils.indicator((-1224.362F));
      float float1 = MathUtils.indicator(54.4103F);
      double double0 = MathUtils.normalizeAngle((-1224.362F), (-2195.360293));
      double double1 = MathUtils.indicator((double) (-1224.362F));
      short short0 = MathUtils.indicator((short)1698);
      int int0 = MathUtils.mulAndCheck((int) (short)1, 367);
      double double2 = MathUtils.sinh((-1224.362F));
      int int1 = 3166;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((short)1, 3166);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 3,166
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = MathUtils.indicator((-514));
      BigInteger bigInteger0 = BigInteger.ONE;
      int int1 = bigInteger0.bitLength();
      double double0 = bigInteger0.doubleValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.not();
      BigInteger bigInteger3 = bigInteger1.andNot(bigInteger0);
      BigInteger bigInteger4 = bigInteger1.min(bigInteger0);
      BigInteger bigInteger5 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, bigInteger0);
      int int2 = MathUtils.indicator(1024);
      double double1 = MathUtils.normalizeAngle(1946.72312, 1024);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-514);
      intArray0[3] = 1;
      intArray0[4] = (-514);
      long long0 = bigInteger0.longValueExact();
      intArray0[5] = (-1);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 52;
      int int1 = MathUtils.subAndCheck(52, 52);
      double double0 = MathUtils.normalizeAngle(0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-752.8898088417);
      doubleArray0[5] = (double) 52;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 2805.999608152151;
      int int2 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(3030L, 7910884519577875640L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals(0.0, (double) 0, 0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      long long0 = (-283L);
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.indicator((short)18);
      long long0 = MathUtils.sign((long) (short)1);
      int int0 = MathUtils.gcd((-1156), (int) (short)18);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, 0.333333333333333, 0.0);
      long long1 = MathUtils.gcd((long) (short)18, (long) (short)1);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2.0, 8.0, 8.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, (-725));
      int int0 = MathUtils.compareTo(0.0, (-3150.423683), (-725));
      double double1 = MathUtils.log(0.0, 0.0);
      boolean boolean0 = MathUtils.equals((-1746.08), (-1746.08));
      long long0 = MathUtils.lcm(3368L, 3368L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3368L;
      doubleArray0[1] = (double) 3368L;
      doubleArray0[2] = (double) (-725);
      doubleArray0[3] = (double) (-725);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) 3368L;
      doubleArray0[6] = (double) 3368L;
      doubleArray0[7] = (double) (-725);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double2 = MathUtils.round(0.0, 0, 0);
      int int1 = MathUtils.compareTo(3324.0, (-725.0), (-1212.10224257));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = MathUtils.round(0.1818181574344635, (-1155));
      double double1 = MathUtils.sign((double) (-1155));
      long long0 = (-7278142539171889152L);
      // Undeclared exception!
      try { 
        MathUtils.lcm(1501L, (-7278142539171889152L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = 2999L;
      long long1 = MathUtils.gcd(2999L, 2999L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2446.01, 2446.01);
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean1 = bigInteger0.testBit(21);
      long long2 = bigInteger0.longValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.mod(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.hash((-5691.63186713));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2011.4772;
      doubleArray0[1] = (double) 45967717;
      doubleArray0[2] = (double) 45967717;
      doubleArray0[3] = 0.074;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.round((double) 45967717, 32);
      float float0 = MathUtils.sign((-1221.5446F));
      float float1 = MathUtils.round(0.0F, 52);
      double double2 = MathUtils.log(10.0, 32);
      int int1 = MathUtils.pow(7, 52);
      // Undeclared exception!
      try { 
        MathUtils.round((-1.0F), 0, (-515));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -515, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = MathUtils.round((-2883.56337), (-1550));
      float float0 = MathUtils.indicator(0.0F);
      int int0 = MathUtils.mulAndCheck((-1550), (-1550));
      int int1 = MathUtils.gcd(2402500, 668);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.pow(0L, 0L);
      float float1 = MathUtils.round((float) 4, 141);
      double double1 = MathUtils.sign((double) 1.0F);
      long long1 = MathUtils.subAndCheck(0L, 0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2899.267257732;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 1.0F;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = MathUtils.pow(795L, 0L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 795L;
      doubleArray0[1] = (double) 795L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      try { 
        MathUtils.pow(58, (-580));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (58^-580)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-2542.26285));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = 23;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 23);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(10.0, 1834.4, 15.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1834.4;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.indicator(1834.4);
      int int0 = MathUtils.addAndCheck((-178), 0);
      double double2 = MathUtils.sign(1834.4);
      double double3 = MathUtils.cosh(1.0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 1736;
      int int1 = MathUtils.lcm(1736, 0);
      long long0 = 0L;
      long long1 = MathUtils.addAndCheck((long) 0, 0L);
      int int2 = MathUtils.pow(1269, 0L);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1, 2130, (-2412));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -2,412, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 137;
      long long0 = MathUtils.pow(3174L, 137);
      double double0 = MathUtils.log(0L, 1280.2);
      BigInteger bigInteger0 = MathUtils.pow((BigInteger) null, 0L);
      // Undeclared exception!
      try { 
        bigInteger0.compareTo((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.setBit(61);
      BigInteger bigInteger2 = bigInteger0.abs();
      BigInteger bigInteger3 = bigInteger0.flipBit(0);
      BigInteger bigInteger4 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 4772);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4772;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 4772;
      doubleArray1[1] = (double) 4772;
      doubleArray1[2] = (double) 4772;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      double double0 = MathUtils.factorialLog(0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 4772;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 61;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.compareTo(632.95729795347, 0.0, 4772.0);
      int int2 = MathUtils.compareTo(1.1102230246251565E-16, 786.4321099, 0.0);
      long long0 = MathUtils.addAndCheck((long) 4772, 40320L);
      int int3 = MathUtils.indicator(6);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(71, 71);
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(0, (-140));
      int int1 = MathUtils.compareTo((-963.0456), (-963.0456), 0.3);
      long long1 = MathUtils.pow((long) 71, 71);
      // Undeclared exception!
      try { 
        MathUtils.round(1020.29F, 0, (-5384));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -5,384, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      double double1 = MathUtils.log(0.0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 280.8853230418565;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = MathUtils.pow((-1560), 4194304);
      float float0 = MathUtils.sign(0.0F);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 4194304;
      doubleArray0[3] = (double) (-1560);
      doubleArray0[4] = (double) (-1560);
      doubleArray0[5] = (double) 0.0F;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-2467));
      int int0 = MathUtils.gcd((int) (short) (-2467), (int) (short) (-1));
      long long0 = MathUtils.lcm(0L, (long) (short) (-2467));
      byte byte0 = MathUtils.indicator((byte)122);
      double double0 = MathUtils.binomialCoefficientDouble(170, (short) (-2467));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 170);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0, 0);
      long long0 = MathUtils.indicator(0L);
      double double0 = MathUtils.factorialDouble(0);
      long long1 = MathUtils.gcd(0L, 1L);
      int[] intArray0 = new int[9];
      intArray0[0] = 1484;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 17;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 129.00131887772514;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (-550.79);
      doubleArray0[4] = (-342.064425228);
      doubleArray0[5] = (-1201.27450043);
      doubleArray0[6] = 2473.9553383;
      doubleArray0[7] = (-167.5526797757385);
      doubleArray0[8] = 3791.5;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (129.001 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.2250738585072014E-308;
      double double0 = 2119.1698354;
      doubleArray0[1] = 2119.1698354;
      doubleArray0[2] = 844.0;
      double double1 = 2.2250738585072014E-308;
      doubleArray0[3] = 2.2250738585072014E-308;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      long long1 = MathUtils.factorial(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 0L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.bitLength();
      long long2 = bigInteger0.longValueExact();
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = MathUtils.round((float) 1L, 0);
      byte byte0 = MathUtils.indicator((byte)10);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-157));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -157
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathUtils.log(1512.44711818884, 1512.44711818884);
      double double1 = MathUtils.indicator(0.0);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[1];
      int int0 = MathUtils.distance1(intArray0, intArray1);
      short short0 = MathUtils.indicator((short) (-15529));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, (-3090));
      short short0 = MathUtils.sign((short) (-1537));
      byte byte0 = MathUtils.indicator((byte)61);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (short) (-1537);
      doubleArray0[2] = (double) (-3090);
      doubleArray0[3] = (double) (byte)61;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (byte)61;
      doubleArray1[1] = (double) (short) (-1);
      doubleArray1[2] = (double) (-3090);
      doubleArray1[3] = (double) (-3090);
      doubleArray1[4] = (-1737.671403042);
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) (short) (-1);
      doubleArray1[7] = (double) (short) (-1537);
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      long long0 = MathUtils.gcd((long) (byte)0, (long) (byte)0);
      long long1 = MathUtils.subAndCheck((long) (byte)0, 0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = (-1162);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1162));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,162
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = MathUtils.sign(2693);
      double double0 = MathUtils.sign(0.0);
      long long0 = MathUtils.mulAndCheck((long) 1, (long) 2693);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.gcd((-1110L), 2693L);
      int int1 = MathUtils.gcd(1926, 1126);
      int int2 = MathUtils.hash((double) (-1110L));
      float float0 = MathUtils.sign((-714.11F));
      long long2 = MathUtils.sign((long) (-1064216576));
      int int3 = MathUtils.hash((double) (-1110L));
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int4 = MathUtils.gcd(1126, 1126);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 2, 888.222891327667);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-2935), (-2935));
      boolean boolean0 = MathUtils.equals((-1465.50052289343), (double) 0);
      int int1 = (-1399);
      double double0 = MathUtils.binomialCoefficientLog(7, (-1399));
      float float0 = MathUtils.round((float) (-2935), 0, 0);
      double double1 = MathUtils.round((double) (-2935), 0);
      int int2 = MathUtils.sign(0);
      boolean boolean1 = MathUtils.equals(0.0, Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2935), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,935, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0);
      long long0 = MathUtils.addAndCheck(77L, (long) 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2218.3273, 0.0);
      long long1 = MathUtils.subAndCheck((long) 0, 284L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 2218.3273;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-582.3748975784318);
      doubleArray0[5] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,218.327 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = MathUtils.indicator(1023);
      double double0 = MathUtils.round((-1.0), 1023, 1);
      boolean boolean0 = MathUtils.equals((-1.0), 0.0, 0.0);
      byte byte0 = MathUtils.indicator((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (byte)0, (-2090), 598);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 598, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      float float0 = MathUtils.indicator((-2362.04F));
      float float1 = MathUtils.sign((-1209.609F));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1209.609F);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.compareTo(Double.POSITIVE_INFINITY, 0.0, 174.7050420976873);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(1880L, 1880L);
      // Undeclared exception!
      try { 
        MathUtils.round(803.6F, (-1438), 127);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 127, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = 9218868437227405312L;
      long long1 = MathUtils.subAndCheck(9218868437227405312L, 9218868437227405312L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = 62;
      // Undeclared exception!
      try { 
        MathUtils.round((double) 9218868437227405312L, 62, 62);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      long long0 = MathUtils.indicator((-1114L));
      int int0 = MathUtils.subAndCheck(0, 220);
      boolean boolean1 = MathUtils.equalsIncludingNaN(9.220590270857665E-9, 0.0, 220);
      double double0 = MathUtils.cosh((-554.2906934));
      boolean boolean2 = MathUtils.equals(689.29878, (-1560.514), (double) (-1L));
      long long1 = MathUtils.indicator(0L);
      long long2 = MathUtils.addAndCheck((-1L), (-1L));
      double double1 = MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = MathUtils.pow((-3033), 8);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) (-3033);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd(40320L, (long) 8);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float float0 = MathUtils.indicator((-1989.1335F));
      int int0 = MathUtils.gcd(1096, 1096);
      int int1 = MathUtils.addAndCheck(1096, 1096);
      double double0 = MathUtils.binomialCoefficientLog(2192, 0);
      double double1 = MathUtils.sign((double) 0);
      int int2 = MathUtils.sign((-1576));
      float float1 = MathUtils.round(0.0F, 1296);
      float float2 = MathUtils.round(0.0F, 1030);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-8.0E298);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals(282.448422492, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 612.3605013585;
      doubleArray0[3] = 612.3605013585;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = MathUtils.sinh(3.834E-20);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      long long1 = MathUtils.mulAndCheck(1L, 0L);
      float float0 = MathUtils.sign((float) 0);
      long long2 = MathUtils.lcm((-2350L), 0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      short short0 = MathUtils.indicator((short)208);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)208;
      doubleArray0[2] = (double) (short)208;
      doubleArray0[3] = (double) (short)208;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-74);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-2240));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (119,641,162,913,939,638^-2,240)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = MathUtils.lcm(120L, 0L);
      double double0 = MathUtils.scalb(120L, 0);
      long long1 = MathUtils.indicator((long) 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1L, (double) 120L, 67);
      float float0 = MathUtils.round((float) 1L, 67);
      boolean boolean1 = MathUtils.equals((double) 67, 120.0);
      int int0 = MathUtils.pow((-1357), 0L);
      long long2 = MathUtils.pow(3750L, (long) 1);
      boolean boolean2 = MathUtils.equals((double) Float.NaN, 0.0, (double) 120L);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 67;
      long long0 = MathUtils.binomialCoefficient(67, 67);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("T#zRx?RC$Ga");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.T#zRx?RC$Ga
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2047.258;
      doubleArray0[3] = 1.4456468917292502E-16;
      doubleArray0[4] = (-1217.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (2,047.258 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 140;
      boolean boolean0 = MathUtils.equals(1609.0796541194, (-290.6527), 140);
      double double0 = MathUtils.scalb(0.0, 140);
      double double1 = MathUtils.sign(0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = bigInteger0.toString();
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger1 = BigInteger.ZERO;
      int int1 = bigInteger0.compareTo(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-372));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-372)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short short0 = MathUtils.indicator((short)2408);
      int int0 = MathUtils.addAndCheck((int) (short)2408, (int) (short)2408);
      int int1 = MathUtils.lcm(0, 10);
      try { 
        MathUtils.pow(10, (-548L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-548)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = MathUtils.sign(2755);
      double double0 = MathUtils.round((double) 2755, 13, 1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1025), 13);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,025, k = 13
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      int int0 = MathUtils.addAndCheck(20, 20);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(1157L, 975L);
      try { 
        MathUtils.pow(14, (-3007));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (14^-3,007)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      short short0 = MathUtils.sign((short)767);
      byte byte0 = MathUtils.sign((byte)0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.shiftRight((short)1);
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger2 = bigInteger0.setBit((byte)0);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 90);
      double double1 = MathUtils.normalizeAngle(0.0, (short)767);
      int int0 = MathUtils.addAndCheck((-144), 16);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-128), 0.0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = MathUtils.lcm((-1631), (-1631));
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.normalizeAngle((-1631), 0.058823529411764705);
      int int1 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.round((-1.0F), 3);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = MathUtils.hash(2.718281828459045);
      float float0 = MathUtils.indicator(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-888018845), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -888,018,845, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-1814.0);
      doubleArray0[0] = (-1814.0);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = Integer.MIN_VALUE;
      int int2 = MathUtils.subAndCheck((-1063495649), Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1063495649));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,063,495,649
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      short short0 = MathUtils.sign((short)98);
      long long0 = MathUtils.pow(362880L, (long) (short)98);
      float float0 = MathUtils.sign((float) (-1128));
      int int0 = MathUtils.subAndCheck((int) (short)98, 1625);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (-1527);
      doubleArray0[4] = (-6055.1310537);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1 >= -1,527)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = MathUtils.sign((-1656L));
      double double0 = MathUtils.scalb((-1656L), 11);
      int int0 = MathUtils.pow(11, 0);
      int int1 = MathUtils.mulAndCheck(0, 1);
      double double1 = MathUtils.binomialCoefficientDouble(212, 0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = bigInteger0.intValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-63));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -63
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      double double0 = MathUtils.indicator(1.304E19);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(3952090531849364496L, (-1626L));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = MathUtils.compareTo(123.23, 0.0, (-3052.227513336612));
      int int1 = MathUtils.pow(1, 4190L);
      int int2 = MathUtils.subAndCheck(1, 1);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 1, (-758.74), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 727.5065542259;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.sign(187);
      double double1 = MathUtils.indicator(0.0);
      double double2 = MathUtils.scalb(0.0, 1);
      boolean boolean0 = MathUtils.equals(0.0, (-3797.52));
      int int1 = MathUtils.subAndCheck(31, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 31, 0.0, 727.5065542259);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      double double3 = MathUtils.scalb((-2394.1683027010745), 0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2500));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,500
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1873.4839347;
      doubleArray0[1] = 0.6666666269302368;
      doubleArray0[2] = 4284.14172;
      doubleArray0[3] = (-795.43252);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 172);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 466.87046883;
      MathUtils.checkOrder(doubleArray0);
      int int0 = MathUtils.compareTo((-2165.665483), 0.0, 2.384185791015625E-7);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.normalizeAngle(1L, 1L);
      double double1 = MathUtils.scalb((-468.7), 44);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow(0, 0L);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = (-100);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-784.8075), (-784.8075), (-100));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = MathUtils.sign(4568);
      boolean boolean0 = MathUtils.equals(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 1);
      long long0 = MathUtils.sign((-2644281811660520851L));
      int int1 = MathUtils.indicator(0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1710.5400458833), 1204.446975334219, 0.0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-1166), 169);
      double double0 = MathUtils.sign((double) (-1166));
      int int1 = MathUtils.pow((-197054), (long) 169);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      String string0 = bigInteger0.toString();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0L);
      byte byte0 = MathUtils.indicator((byte) (-111));
      float float0 = MathUtils.indicator(0.0F);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = MathUtils.compareTo((-1474.2612248675173), (-1474.2612248675173), (-1474.2612248675173));
      int int1 = MathUtils.addAndCheck(0, (-1544));
      double double0 = MathUtils.indicator((-1474.2612248675173));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = MathUtils.compareTo((-6.032174644509064E-23), 1385.1854224326, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1385.1854224326;
      doubleArray0[1] = (-6.032174644509064E-23);
      doubleArray0[2] = 1385.1854224326;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = 1.0;
      int int0 = MathUtils.hash(1.0);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, (-95.0));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = MathUtils.compareTo((-4685.84969), 0.0, (-4130.82603243292));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-4685.84969);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = 12;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1), 12);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1, k = 12
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      int int0 = MathUtils.gcd((-911), (-911));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = MathUtils.gcd((-2469), 237);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-781L), 0L);
      int int0 = MathUtils.pow(0, (long) 0);
      double double0 = MathUtils.factorialLog(600);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 600;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 600;
      intArray0[7] = 0;
      intArray0[8] = 1;
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long1 = MathUtils.lcm(0L, (long) 1);
      double double2 = MathUtils.indicator((double) 0);
      double double3 = MathUtils.factorialDouble(346);
      long long2 = MathUtils.indicator((long) 600);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-5781));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -5,781
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(3911, 3656);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 110.6406780373;
      doubleArray0[1] = (double) 3656;
      doubleArray0[2] = (double) 3911;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 444;
      int int1 = MathUtils.sign(444);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      double double0 = (-2622.72081105719);
      doubleArray0[2] = (-2622.72081105719);
      doubleArray0[3] = (double) 444;
      doubleArray0[4] = (double) 444;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-2,622.721 < 444)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = MathUtils.log(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      int int0 = MathUtils.addAndCheck(0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-\u221E <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(6.283185307179586, 6.283185307179586);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = 6.283185307179586;
      doubleArray0[5] = 6.283185307179586;
      doubleArray0[6] = 6.283185307179586;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (6.283 >= 6.283)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 258.308627659712);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, 258.308627659712, (double) 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      int int0 = MathUtils.lcm(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0, (double) 0, (-866));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long long0 = MathUtils.sign((-964L));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.factorial(0);
      int int0 = MathUtils.indicator(0);
      long long1 = MathUtils.pow(1L, 1);
      int int1 = MathUtils.indicator(0);
      double double0 = MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 1660.0624);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = MathUtils.gcd(635, 635);
      long long0 = MathUtils.pow((long) 635, 783L);
      boolean boolean0 = MathUtils.equals((double) 635, (double) 901484751534404595L);
      double double0 = MathUtils.indicator((double) 635);
      int int1 = MathUtils.hash(1.0);
      long long1 = MathUtils.mulAndCheck(783L, (long) 635);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3593.48), (-3593.48), 0.0);
      double double0 = MathUtils.indicator((-3593.48));
      int int0 = MathUtils.compareTo((-3593.48), (-1.0), 0.19999998807907104);
      long long0 = MathUtils.subAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 10);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 10
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      try { 
        MathUtils.pow((-1203), (-1203));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,203^-1,203)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2453.0378017574317), (-3787.0), 0.14285714285714285);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = MathUtils.pow(66, (long) 66);
      long long0 = MathUtils.sign((long) 66);
      float float0 = MathUtils.sign((float) 1L);
      double double0 = MathUtils.scalb(137.5507805229824, 66);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 1678;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(3452, 1678);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(1325L, 1325L);
      int int0 = MathUtils.pow(497, 173);
      double double0 = MathUtils.log(1009257777, 1009257777);
      int int1 = MathUtils.hash((double) 1325L);
      int int2 = MathUtils.addAndCheck(1009257777, 1083487232);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1009257777;
      doubleArray0[1] = (double) 2092745009;
      doubleArray0[2] = (double) 173;
      doubleArray0[3] = (double) 1325L;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int3 = MathUtils.distance1(intArray0, intArray0);
      short short0 = MathUtils.indicator((short)1030);
      double double2 = MathUtils.indicator(1.0);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((-361.8456), 0.167);
      int int4 = MathUtils.compareTo(2008.49753436106, 211.5, 3498.1395048222985);
      boolean boolean1 = MathUtils.equalsIncludingNaN(2867.9310988, 2857.0, 3);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 556.74;
      doubleArray0[1] = (-593.9214563413012);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1784.456;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-3349.71);
      doubleArray0[6] = 3316.1189611636;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1784.456;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-593.9214563413012));
      int int0 = MathUtils.hash(doubleArray1);
      double double0 = MathUtils.cosh(1275.0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray1);
      float float0 = MathUtils.round(954.4F, 98);
      long long0 = MathUtils.lcm((long) 98, 488L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(6.283185307179586, 1275.0);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      byte byte0 = (byte)56;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-593.921 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      double double1 = MathUtils.normalizeAngle(0.3999999761581421, 0.0);
      float float0 = MathUtils.round(0.0F, 0);
      float float1 = MathUtils.sign(0.0F);
      int int0 = MathUtils.sign(1185);
      long long0 = MathUtils.lcm((long) 0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equals(0.0, (-356.8), 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2172.541850365882;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-356.8);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int int0 = 122;
      // Undeclared exception!
      try { 
        MathUtils.factorial(122);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 29;
      int int1 = MathUtils.pow(0, 29);
      double[] doubleArray0 = null;
      int int2 = MathUtils.hash((double[]) null);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = MathUtils.pow((long) 0, 5648769086999809661L);
      long long1 = MathUtils.gcd((-1253L), (-3533L));
      int int3 = MathUtils.compareTo(1.073741824E9, 1597.744803, (-1253L));
      double double1 = MathUtils.cosh(0);
      long long2 = MathUtils.addAndCheck((long) 0, (-1253L));
      byte byte0 = (byte)125;
      byte byte1 = MathUtils.indicator((byte)125);
      double double2 = MathUtils.indicator(72.0);
      int int4 = 0;
      int int5 = MathUtils.gcd(429, 0);
      int int6 = MathUtils.compareTo(72.0, 1.0, 429);
      float float0 = MathUtils.round((float) 429, 0, 0);
      int int7 = MathUtils.sign((int) (byte)1);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(67, (-1393));
      long long1 = MathUtils.pow((long) 67, 1956L);
      long long2 = MathUtils.pow((long) 67, 1956L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1755.71453, (-2.6033824355191673E-8), (double) (-7024785470647615535L));
      int int0 = MathUtils.pow(2703, 67);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1755.71453;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (-1393);
      doubleArray0[3] = (double) 2104426671;
      doubleArray0[4] = (-2.6033824355191673E-8);
      doubleArray0[5] = (double) (-7024785470647615535L);
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-900.180865793936));
      long long3 = MathUtils.lcm(0L, 895L);
      try { 
        MathUtils.pow(67, (-1393));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (67^-1,393)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-25.661372);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-296.92605326500393);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = 0;
      double double1 = MathUtils.round(3283.8072673, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      double double3 = MathUtils.sinh(Double.NaN);
      int int1 = MathUtils.lcm(0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      double double4 = MathUtils.factorialLog(204);
      int[] intArray0 = new int[1];
      intArray0[0] = 204;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      int int4 = 1105;
      // Undeclared exception!
      try { 
        MathUtils.factorial(1105);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = MathUtils.lcm(3584, 983);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3523072;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double double0 = MathUtils.cosh(0.49999999999999994);
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      float float0 = MathUtils.indicator((float) 0L);
      MathUtils.OrderDirection mathUtils_OrderDirection1 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection1, true);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }
}
