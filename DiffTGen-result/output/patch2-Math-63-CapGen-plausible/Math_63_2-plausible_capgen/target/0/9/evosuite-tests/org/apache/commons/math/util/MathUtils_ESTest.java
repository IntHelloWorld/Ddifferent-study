/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:54:53 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 74;
      intArray0[1] = 1206;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.indicator(0.0F);
      long long0 = MathUtils.subAndCheck(851L, 180L);
      long long1 = MathUtils.addAndCheck(0L, (-3979L));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 851L;
      doubleArray0[2] = (double) 671L;
      doubleArray0[3] = 2217.40112739265;
      doubleArray0[4] = (double) 0L;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int1 = MathUtils.addAndCheck((-357), 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.valueOf("INCREASING");
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.sinh(2108.4573854267687);
      long long2 = MathUtils.factorial(0);
      float float1 = MathUtils.sign((float) 851L);
      double double2 = MathUtils.binomialCoefficientLog(67, (-2078));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = MathUtils.round(1.1102230246251565E-16, 0);
      int int0 = MathUtils.mulAndCheck(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.1102230246251565E-16;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.sign(0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.scalb(0.0, 0);
      boolean boolean1 = MathUtils.equals(1.1102230246251565E-16, 1.1102230246251565E-16);
      byte byte0 = MathUtils.indicator((byte)0);
      float float0 = MathUtils.round((-419.0F), 1426, 0);
      int int2 = MathUtils.pow(0, 1426);
      long long0 = MathUtils.mulAndCheck(1899L, (long) (byte)0);
      long long1 = MathUtils.pow((long) 1426, 0L);
      long long2 = MathUtils.pow((long) 0, 1426);
      double double3 = MathUtils.factorialDouble((byte)1);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) 0, 0.0);
      long long3 = MathUtils.binomialCoefficient(0, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 1426;
      intArray0[4] = (int) (byte)0;
      int[] intArray1 = new int[3];
      intArray1[0] = 1426;
      intArray1[1] = 0;
      intArray1[2] = (int) (byte)0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(2108, 2108);
      double double1 = MathUtils.factorialDouble(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 82.99215101761114, 82.99215101761114);
      int int0 = MathUtils.compareTo(182.9990777, (-2699.09), 0.0);
      float float0 = MathUtils.indicator(826.4385F);
      int int1 = MathUtils.sign(1254);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2108;
      intArray0[2] = 2108;
      intArray0[3] = 1254;
      intArray0[4] = 0;
      intArray0[5] = 1254;
      intArray0[6] = 2108;
      double double2 = MathUtils.distance(intArray0, intArray0);
      int int2 = MathUtils.sign(0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigInteger bigInteger0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equals(13.0, 13.0);
      int int0 = MathUtils.pow(0, (long) 0);
      double double0 = MathUtils.factorialDouble(0);
      boolean boolean1 = MathUtils.equals((-3457.7318033), (double) 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.mulAndCheck((long) 1, (long) 0);
      boolean boolean2 = MathUtils.equals(2733.0, (-535.0), 1);
      boolean boolean3 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      float float0 = MathUtils.sign(0.0F);
      int int1 = MathUtils.sign((-1233));
      int int2 = MathUtils.hash((double) 0.0F);
      float float1 = MathUtils.sign(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("]=Pn`rc[:v>Gr2h%;");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.]=Pn`rc[:v>Gr2h%;
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 91;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 183;
      int[] intArray1 = new int[8];
      intArray1[0] = 91;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 91;
      intArray1[5] = 904;
      intArray1[6] = 0;
      intArray1[7] = 0;
      double double0 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short short0 = MathUtils.indicator((short)17);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      int int0 = 67;
      int int1 = MathUtils.sign(67);
      int int2 = MathUtils.compareTo((-252.46), 0.0F, 2751.0);
      float float1 = MathUtils.round(0.0F, 663, 6);
      double double0 = MathUtils.sign((double) 0);
      double double1 = MathUtils.factorialDouble(0);
      short short0 = MathUtils.sign((short) (-377));
      long long0 = MathUtils.pow(2804L, (long) 67);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1311.136488182, 1.0);
      double double2 = 6100.34844396;
      double double3 = MathUtils.normalizeAngle(0.0, 6100.34844396);
      int int3 = (-1130);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1130), 1140);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,130, k = 1,140
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-31L), (-31L));
      int int0 = 0;
      double double0 = MathUtils.scalb(961L, 0);
      double double1 = MathUtils.sinh(0);
      int int1 = 165;
      int int2 = MathUtils.addAndCheck(165, 165);
      float float0 = MathUtils.indicator((-2714.7737F));
      double double2 = MathUtils.round(0.0, 330);
      double double3 = MathUtils.scalb((-956.9), 5);
      long long1 = MathUtils.indicator((long) 0);
      int int3 = MathUtils.pow((-825), 165);
      long long2 = MathUtils.gcd((long) 1064428135, (long) (-825));
      float float1 = MathUtils.round((float) 1L, (-3970));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3970);
      doubleArray0[1] = (double) 330;
      doubleArray0[2] = (double) 5;
      int int4 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-1891L), (-4287L));
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      byte byte0 = MathUtils.indicator((byte)21);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) 8106717L;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (byte)21;
      doubleArray0[4] = 1.225743062930824E-8;
      doubleArray0[5] = (double) (byte)1;
      doubleArray0[6] = (-2186.4);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) (-1891L);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow((int) (byte)1, (int) (byte)21);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.binomialCoefficient(1214, 1);
      double double2 = MathUtils.scalb(0.0, (-1270));
      short short0 = MathUtils.sign((short) (-806));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = 9218868437227405312L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(9218868437227405312L, 9218868437227405312L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 10;
      intArray0[1] = 252;
      intArray0[2] = 0;
      intArray0[3] = 119;
      intArray0[4] = 0;
      intArray0[5] = 4124;
      intArray0[6] = 0;
      intArray0[7] = (-825);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.pow(0, 827);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, 0.0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-3664.689), (-1852.813));
      double double0 = MathUtils.sinh(0.0);
      int int0 = MathUtils.hash((-1852.813));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.clearBit(0);
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      long long1 = MathUtils.gcd((-2666L), (long) 1133419992);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1133419992;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1133419992;
      doubleArray0[4] = (double) 1133419992;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1133419992;
      doubleArray0[8] = (double) 2L;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = MathUtils.cosh((-861.375431667));
      int int0 = (-1094);
      int int1 = MathUtils.mulAndCheck((-1094), (-1094));
      long long0 = MathUtils.gcd(4505L, 4505L);
      long long1 = MathUtils.indicator(4505L);
      byte byte0 = (byte)83;
      byte byte1 = MathUtils.indicator((byte)83);
      double double1 = MathUtils.sign((double) 1L);
      long long2 = 4095L;
      long long3 = MathUtils.gcd((-3958705157555305932L), 4095L);
      // Undeclared exception!
      try { 
        MathUtils.round(2208.6353F, 2370, (int) (byte)83);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 83, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = MathUtils.pow(1705L, 67);
      int[] intArray0 = new int[2];
      intArray0[0] = 67;
      intArray0[1] = 67;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      int int0 = MathUtils.indicator(5446);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow((long) 5446, 479001600L);
      boolean boolean1 = MathUtils.equals(0.0, 2.2250738585072014E-308, 0.0);
      boolean boolean2 = MathUtils.equals(2.2250738585072014E-308, 2.2250738585072014E-308, 1760);
      boolean boolean3 = MathUtils.equals(1540.4866186104, 0.0, 47);
      float float0 = MathUtils.round((float) 479001600L, 1, 0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = (-1229);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1229));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,229
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1099.51082948193);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = (-338);
      int int1 = MathUtils.mulAndCheck(84, (-338));
      short short0 = MathUtils.indicator((short) (-1434));
      short short1 = MathUtils.sign((short)2104);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1434);
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (int) (short)2104;
      intArray0[4] = (int) (short) (-1);
      intArray0[5] = (int) (short)2104;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.sign((double) (short) (-1));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) (-338), 4159);
      int int3 = MathUtils.subAndCheck(0, (-1));
      double double2 = MathUtils.binomialCoefficientLog(0, (-338));
      // Undeclared exception!
      try { 
        MathUtils.round((double) 4159, (-1), 1111);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)65);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)65;
      doubleArray0[1] = (double) (byte)65;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd((-2149L), 6722166367014452318L);
      float float0 = MathUtils.sign((float) (byte)65);
      int int0 = MathUtils.lcm(0, (-736));
      int int1 = MathUtils.sign(0);
      double double1 = MathUtils.binomialCoefficientLog(1437, 1006);
      float float1 = MathUtils.sign((-1819.0F));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = 12.0;
      boolean boolean0 = MathUtils.equals(12.0, 3.834E-20);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-121.8689796);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1.0E-6));
      int int0 = MathUtils.mulAndCheck(2067, 13);
      int int1 = MathUtils.compareTo((-121.8689796), 0.0, (-121.8689796));
      int[] intArray0 = new int[2];
      intArray0[0] = 2067;
      intArray0[1] = 15;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int3 = MathUtils.lcm(15, 15);
      long long0 = MathUtils.pow((long) 26871, 1702L);
      double double1 = MathUtils.normalizeAngle(15, 1684.94586445386);
      long long1 = MathUtils.gcd(142807120558794481L, (long) 2067);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 15, 2242, 15);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 15, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1964);
      double double0 = MathUtils.indicator((double) (short)1);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((float) (short)1964, (int) (short)1, (int) (short)1);
      int int0 = MathUtils.sign((int) (short)1964);
      int int1 = MathUtils.pow((int) (short)1964, 1);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1964;
      intArray0[2] = (int) (short)1964;
      intArray0[3] = (-3354);
      intArray0[4] = 1;
      intArray0[5] = (int) (short)1;
      intArray0[6] = 1964;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(278L, 278L);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 45.27059;
      doubleArray0[1] = (double) 77284L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 278L;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 278L;
      doubleArray0[7] = (double) 77284L;
      int int1 = MathUtils.hash(doubleArray0);
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = (-752795285);
      intArray1[2] = (-752795285);
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = (-752795285);
      intArray1[7] = 0;
      intArray1[8] = 0;
      int[] intArray2 = new int[9];
      intArray2[0] = 0;
      intArray2[1] = (-752795285);
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray2[6] = 0;
      intArray2[7] = 0;
      intArray2[8] = 0;
      int int2 = MathUtils.distance1(intArray1, intArray2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = MathUtils.round(3032.8164F, 0);
      float float1 = MathUtils.indicator((-2716.8232F));
      long long0 = MathUtils.subAndCheck((long) 0, 3738L);
      byte byte0 = MathUtils.sign((byte)98);
      double double0 = MathUtils.log(3.834E-20, (-3738L));
      long long1 = MathUtils.addAndCheck((long) (byte)98, (-3738L));
      long long2 = MathUtils.subAndCheck((long) (byte)1, (long) 0);
      float float2 = MathUtils.round((-1.0F), (int) (byte)1);
      int int0 = MathUtils.compareTo((-2740.1400453), 3414.5851, 3645.0581);
      short short0 = MathUtils.sign((short) (byte)1);
      byte byte1 = MathUtils.sign((byte)1);
      boolean boolean0 = MathUtils.equals(Double.NaN, (double) 3033.0F, (double) (byte)1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (byte)98;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (-1.0F);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (98 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 425.2787361414949;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 425.2787361414949);
      short short0 = (short) (-878);
      short short1 = MathUtils.indicator((short) (-878));
      int int0 = MathUtils.sign((int) (short) (-878));
      double double2 = MathUtils.indicator(854.3793);
      int int1 = MathUtils.indicator((-1));
      int int2 = (-521);
      int int3 = MathUtils.lcm((-521), (-4350));
      double double3 = (-1390.64270536);
      int int4 = 2595;
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1390.64270536), (double) (-1), 2595);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = MathUtils.factorialLog(147);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = bigInteger0.intValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 709);
      short short0 = MathUtils.indicator((short) (-127));
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) (short) (-127);
      intArray0[5] = 0;
      intArray0[6] = 147;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 5;
      float float0 = MathUtils.round(0.0F, 5, 5);
      long long0 = MathUtils.pow(1315L, 1315L);
      long long1 = MathUtils.factorial(5);
      float float1 = MathUtils.indicator((-1123.4559F));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.sinh((-1.0F));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1.0F), 127.24873741875, 5);
      float float2 = MathUtils.indicator(0.0F);
      int int1 = MathUtils.lcm(5, 5);
      double double1 = MathUtils.round((double) 5, 5);
      // Undeclared exception!
      try { 
        MathUtils.round(1185.0F, 5, 110);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 110, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      double double0 = MathUtils.round(0.0, 3617);
      double double1 = MathUtils.sinh(1.0F);
      int int0 = MathUtils.compareTo(0.0, 1855.6531, 2859.10716);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0.0F;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int1 = MathUtils.subAndCheck((-1143), 0);
      long long0 = MathUtils.subAndCheck(0L, 1778L);
      int int2 = MathUtils.pow((-1), 2432902008176640000L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(40.93536632, (double) (-1143), 1);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 3617;
      doubleArray1[1] = 2859.10716;
      doubleArray1[2] = (double) 3617;
      doubleArray1[3] = (double) (-1143);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 1.0F;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) (-1);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)20);
      long long0 = MathUtils.binomialCoefficient((byte)20, (byte)1);
      int int0 = MathUtils.hash((-4921.331164187394));
      int int1 = MathUtils.compareTo(972.872398871, 127804195, 127804195);
      double double0 = MathUtils.cosh(0.5);
      float float0 = MathUtils.indicator(542.5F);
      long long1 = MathUtils.addAndCheck(20L, 0L);
      double double1 = MathUtils.cosh(0.0);
      int int2 = MathUtils.pow((int) (byte)20, (long) (byte)1);
      long long2 = MathUtils.gcd(20L, 0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4921.331164187394);
      doubleArray0[1] = (double) 127804195;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 20L;
      doubleArray0[4] = (double) (byte)20;
      doubleArray0[5] = (-4921.331164187394);
      doubleArray0[6] = 1.1276259652063807;
      doubleArray0[7] = (double) 20L;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (-2158));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,158)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 388.99159386;
      doubleArray0[1] = 7.549789948768648E-8;
      doubleArray0[2] = 3415.9722203;
      doubleArray0[3] = 2248.929151455;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-270.969);
      boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
      int int0 = MathUtils.sign(18);
      int int1 = MathUtils.hash(0.0);
      double double0 = MathUtils.log((-1.0), 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0, 910.056396757, 11);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float float0 = MathUtils.round(1514.0F, (-223));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-223);
      doubleArray0[1] = (double) 1514.0F;
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (double) 1514.0F;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.factorialLog(1742);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short short0 = (short)1023;
      short short1 = MathUtils.sign((short)1023);
      long long0 = MathUtils.pow((-7278142539171889152L), (long) (short)1);
      int int0 = 1030;
      int int1 = MathUtils.lcm(1030, (int) (short)1023);
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equals(0.0, 0.0, (double) 1053690);
      float float0 = MathUtils.round((float) (short)1023, (int) (short)1023);
      float float1 = MathUtils.indicator((float) 1053690);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-7278142539171889152L), (long) (short)1023);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      int int0 = MathUtils.subAndCheck(884, 884);
      double double1 = MathUtils.normalizeAngle(0.0, 1350.38414);
      long long0 = MathUtils.indicator((long) 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.1102230246251565E-16, 1350.884841043611, 0.0);
      int int1 = MathUtils.pow(0, 0);
      int int2 = MathUtils.mulAndCheck(0, 249);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1350.38414, 1350.38414, 1671);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1350.38414;
      doubleArray0[1] = (-2322.4);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      long long1 = MathUtils.mulAndCheck(441L, (-3120L));
      double double3 = MathUtils.factorialLog(1);
      long long2 = MathUtils.mulAndCheck(2235L, (-162L));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.indicator(13.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 13.0;
      doubleArray0[3] = 13.0;
      doubleArray0[4] = 13.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 13.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = (-7278142539171889152L);
      try { 
        MathUtils.pow(0L, (-7278142539171889152L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-7,278,142,539,171,889,152)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1303.6660884295597);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1182.7421265);
      doubleArray0[3] = (-389.25218822);
      int int0 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.sign((-2830.0F));
      int int1 = MathUtils.lcm(1213154469, 1213154469);
      // Undeclared exception!
      MathUtils.factorialLog(1213154469);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = (-825L);
      long long1 = MathUtils.subAndCheck(0L, (-825L));
      try { 
        MathUtils.pow(40320L, (-3561L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (40,320^-3,561)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = MathUtils.indicator((-1387L));
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        MathUtils.lcm(Integer.MIN_VALUE, Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow: gcd(-2,147,483,648, -2,147,483,648) is 2^31
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 177);
      boolean boolean1 = MathUtils.equals(835.566333, 3.141592653589793, 184);
      double double0 = MathUtils.normalizeAngle(184, (-763.3450062085701));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
      int int0 = (-2392);
      int int1 = MathUtils.gcd(10, (-2392));
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-2392), (-2392), (-2392));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -2,392, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = MathUtils.hash(1820.76845455392);
      long long0 = MathUtils.pow(4503599627370496L, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1820.76845455392;
      doubleArray0[1] = (double) (-1520675552);
      doubleArray0[2] = 1820.76845455392;
      doubleArray0[3] = (double) (-1520675552);
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = (double) 2L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = 1820.76845455392;
      doubleArray0[8] = 194.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1584.7544495420968);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-836.85727);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 688.915348;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1.304E19;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-1991), (-155));
      long long0 = MathUtils.sign(930L);
      int[] intArray0 = new int[9];
      intArray0[0] = (-155);
      intArray0[1] = (-155);
      intArray0[2] = (-1991);
      intArray0[3] = 0;
      intArray0[4] = (-155);
      intArray0[5] = (-155);
      intArray0[6] = (-155);
      intArray0[7] = (-1991);
      intArray0[8] = (-155);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (-369.8);
      int int1 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.sign((short)210);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1991), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,991, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 56;
      long long0 = MathUtils.binomialCoefficient(56, 0);
      double double0 = MathUtils.binomialCoefficientLog(61, 0);
      int int1 = MathUtils.indicator((-3697));
      boolean boolean0 = MathUtils.equalsIncludingNaN(1876.594812239036, 57.2957763671875, 0.041666666666666664);
      long long1 = MathUtils.sign(2147483648L);
      int int2 = MathUtils.hash(1572.4670144157408);
      double double1 = MathUtils.round(3.141592653589793, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = 3.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int3 = MathUtils.hash(0.6931470632553101);
      int int4 = MathUtils.hash(doubleArray0);
      long long2 = MathUtils.pow((-7278142539171889152L), 1L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int5 = MathUtils.gcd(0, (-3697));
      try { 
        MathUtils.pow(0, (-31980607));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-31,980,607)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathUtils.round((-1.5707963267948966), (-2444));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 7);
      int int0 = MathUtils.indicator((-2444));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(16, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(16, 1832);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 16, k = 1,832
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-356.95641639);
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-661.615);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long0 = 0L;
      long long1 = MathUtils.sign(0L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -356.956)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = (-4739);
      int int1 = (-973);
      int int2 = MathUtils.gcd((-4739), (-973));
      long long0 = MathUtils.gcd((long) (-4739), (long) (-973));
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(3986.0657288909, 3986.0657288909, 1210);
      int int0 = MathUtils.mulAndCheck(0, (-698));
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1007.276001066), 1.1102230246251565E-16);
      byte byte0 = MathUtils.sign((byte)15);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.log(1, 1);
      long long0 = MathUtils.sign(664L);
      int int1 = MathUtils.mulAndCheck(1, 1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1620);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1;
      intArray0[1] = 0;
      intArray0[2] = (int) (short)1620;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.lcm((long) (short)1620, 0L);
      double double0 = MathUtils.scalb((-4059.998536), 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-910.5729867279142), (-910.5729867279142));
      int int1 = MathUtils.lcm(2952, 2085);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2051640;
      doubleArray0[1] = (-4059.998536);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, doubleArray0);
      int int2 = MathUtils.mulAndCheck(0, 771);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      boolean boolean0 = MathUtils.equals(0.0, 0.016);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double0 = MathUtils.factorialLog(0);
      long long0 = MathUtils.subAndCheck((long) 0, (long) 0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 3361;
      intArray0[7] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-40), (-40));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -40
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      long long0 = MathUtils.factorial(0);
      int int0 = MathUtils.addAndCheck(92, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 92;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 92;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = MathUtils.pow((-300L), 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)63;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) (byte)52);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float float0 = 658.9943F;
      float float1 = MathUtils.round(658.9943F, 1219);
      double double0 = MathUtils.factorialLog(1219);
      // Undeclared exception!
      try { 
        MathUtils.round(1.0F, 1219, 1219);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,219, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = (-2578);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2578));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,578
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = MathUtils.indicator(52);
      float float0 = MathUtils.sign(3096.72F);
      int int1 = MathUtils.hash(0.0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = MathUtils.pow((-949), 2234L);
      int[] intArray0 = new int[8];
      intArray0[0] = (-949);
      intArray0[1] = (-906726247);
      intArray0[2] = (-949);
      intArray0[3] = (-906726247);
      intArray0[4] = (-906726247);
      intArray0[5] = (-949);
      intArray0[6] = (-949);
      intArray0[7] = (-949);
      int[] intArray1 = new int[4];
      intArray1[0] = (-949);
      intArray1[1] = (-906726247);
      intArray1[2] = 89;
      intArray1[3] = (-906726247);
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = MathUtils.round((-723.925F), 160);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 160;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (double) 160;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) 160;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1943.852909137147;
      doubleArray0[1] = 9.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 9.0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = MathUtils.gcd(1713L, 1713L);
      int int0 = (-909);
      try { 
        MathUtils.pow(0L, (-909));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-909)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-135.499);
      doubleArray1[1] = 0.19999954120254515;
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
      long long0 = MathUtils.indicator((-2203L));
      double double1 = MathUtils.sinh(0.19999954120254515);
      short short0 = MathUtils.sign((short)2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = (-1630.7336);
      int int0 = MathUtils.hash((-1630.7336));
      int int1 = 1665;
      // Undeclared exception!
      try { 
        MathUtils.factorial(1665);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.round(310.4575, 4622);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)34;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2104L);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = (-93.9);
      double double1 = MathUtils.sign((-93.9));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = MathUtils.hash(3098.95235038);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-623893191);
      doubleArray0[1] = (double) (-623893191);
      doubleArray0[2] = 3098.95235038;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-623893191);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.log((-623893191), (-6.23893191E8));
      double double1 = MathUtils.factorialDouble(2);
      double double2 = MathUtils.binomialCoefficientDouble(0, 0);
      int int1 = MathUtils.gcd((-623893191), 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-623,893,191 >= -623,893,191)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = MathUtils.sign(195);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 195;
      doubleArray0[1] = (double) 195;
      doubleArray0[2] = (double) 195;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 195;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.round(0.125, 0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = 49;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 49);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 49
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1843.32105016), (-493.89582), (-493.89582));
      long long0 = MathUtils.lcm(40320L, 40320L);
      double double0 = 1387.31894796;
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 40320L, (double) 40320L, 1387.31894796);
      double double1 = (-2753.1);
      double double2 = (-1047.866);
      double double3 = (-3381.5);
      int int0 = MathUtils.compareTo((-2753.1), (-1047.866), (-3381.5));
      try { 
        MathUtils.pow((-1), (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.sinh(2.2250738585072014E-308);
      long long0 = MathUtils.gcd(2785L, 2785L);
      MathUtils.checkOrder(doubleArray0);
      int int0 = 52;
      int int1 = MathUtils.pow(52, 6L);
      boolean boolean0 = MathUtils.equals(0.0, Double.NaN);
      boolean boolean1 = MathUtils.equals(578.0660136203036, 3156.8414, (double) 2785L);
      try { 
        MathUtils.pow(0, (long) (-1704226816));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,704,226,816)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = (-1797L);
      try { 
        MathUtils.pow((BigInteger) null, (-1797L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-1,797)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 3;
      double double0 = MathUtils.round((-1379.9470460932675), 3);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1379.9470460932675), (double) 3, (-1379.947));
      boolean boolean1 = MathUtils.equals(0.0, 0.0);
      float float0 = MathUtils.indicator(0.0F);
      double double1 = MathUtils.indicator((-1379.9470460932675));
      int int1 = 389;
      int int2 = MathUtils.pow(389, 389);
      int[] intArray0 = new int[2];
      intArray0[0] = 389;
      intArray0[1] = 1231396277;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      double double2 = 1.2958646899018938E-9;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1.2958646899018938E-9, (double) 1231396277, 1231396277);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = MathUtils.indicator((-1726.0348235615434));
      double double1 = MathUtils.cosh((-1.0));
      long long0 = MathUtils.pow(58L, 0L);
      int int0 = MathUtils.subAndCheck(0, 0);
      long long1 = MathUtils.addAndCheck(1L, 5648769086999809661L);
      float float0 = MathUtils.sign((float) 5648769086999809662L);
      int int1 = MathUtils.lcm(0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-11.9127), 2.0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-192.66), (-192.66), 0.5);
      byte byte0 = MathUtils.indicator((byte)115);
      short short0 = MathUtils.sign((short) (byte)115);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = (double) (byte)115;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) (short)1;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      float float0 = MathUtils.sign((float) 0);
      long long0 = MathUtils.gcd(5648769086999809661L, (long) 0);
      long long1 = MathUtils.pow(0L, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("PImJGP_.>$J S");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.PImJGP_.>$J S
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0.0F, (double) 0.0F);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      double double0 = MathUtils.safeNorm(doubleArray0);
      short short0 = (short)35;
      short short1 = MathUtils.sign((short)35);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = 0;
      double double2 = MathUtils.round((-3457.30541354896), 0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.longs((-968L));
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = MathUtils.gcd(3649, 0);
      int int1 = MathUtils.pow(3, 86);
      boolean boolean0 = MathUtils.equals((double) 3, (double) 86, 18);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 17;
      double double0 = MathUtils.factorialLog(17);
      long long0 = MathUtils.mulAndCheck((long) 17, (long) 17);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)77;
      byte byte0 = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (long) (byte) (-44));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (19,924^-44)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = MathUtils.pow(380L, 380L);
      short short0 = MathUtils.indicator((short)0);
      float float0 = MathUtils.round((float) (short)1, (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 19;
      int int1 = 68;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(19, 68);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 19, k = 68
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      short short0 = MathUtils.indicator((short)15);
      long long0 = MathUtils.binomialCoefficient(17, (short)15);
      double double0 = MathUtils.indicator(0.16666666666745392);
      long long1 = MathUtils.subAndCheck(850L, 0L);
      double double1 = MathUtils.sinh(1.304E19);
      long long2 = MathUtils.addAndCheck(850L, 850L);
      boolean boolean0 = MathUtils.equals((-1.0), Double.POSITIVE_INFINITY, 1657);
      int int0 = MathUtils.mulAndCheck(17, (int) (short)1);
      int int1 = MathUtils.indicator(126);
      long long3 = MathUtils.lcm((-2147483648L), 0L);
      int int2 = MathUtils.addAndCheck(0, (int) (short)15);
      long long4 = MathUtils.binomialCoefficient(17, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 126;
      intArray0[1] = 15;
      intArray0[2] = 17;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      double double2 = MathUtils.scalb(854.931168161, 1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      float float0 = MathUtils.indicator((float) (byte)0);
      long long0 = MathUtils.binomialCoefficient((byte)0, (-2429));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) (-2429);
      doubleArray0[5] = (double) (-2429);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = MathUtils.gcd(40320L, 40320L);
      byte byte0 = MathUtils.indicator((byte) (-42));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-56));
      int int0 = MathUtils.subAndCheck((int) (byte) (-1), (int) (byte) (-56));
      int int1 = MathUtils.indicator(19);
      double double0 = MathUtils.round((double) (byte) (-1), (int) (byte) (-1));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 19;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (byte) (-1);
      doubleArray1[1] = (double) 55;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) (byte) (-1);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 19;
      doubleArray1[6] = (double) 19;
      doubleArray1[7] = (double) 19;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (55 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = (-4361);
      int int1 = MathUtils.subAndCheck((-503), (-4361));
      int int2 = 67;
      int int3 = MathUtils.gcd(67, (-2456));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-503), 67);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -503, k = 67
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-896.795552148);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1052.858986;
      doubleArray0[3] = 2270.856936434395;
      doubleArray0[4] = 2.85040095144011776E17;
      doubleArray0[5] = 2264.785776585946;
      doubleArray0[6] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 4 and 5 are not strictly increasing (285,040,095,144,011,776 >= 2,264.786)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-54));
      try { 
        MathUtils.pow((int) (byte) (-1), (int) (byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double double1 = MathUtils.round((double) 0, 0);
      int int0 = MathUtils.hash(0.0);
      double double2 = MathUtils.indicator(1.0);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      byte byte0 = MathUtils.indicator((byte)0);
      int int0 = MathUtils.addAndCheck((int) (byte)0, (int) (byte)0);
      long long0 = MathUtils.subAndCheck((-1680L), (long) (byte)1);
      int int1 = (-180);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-180));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -180
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = (-449);
      int int1 = (-2368);
      int int2 = MathUtils.gcd((-449), (-2368));
      float float0 = MathUtils.round((float) (-2368), (-2368));
      float float1 = MathUtils.sign((float) 1);
      double double0 = MathUtils.log(Float.NaN, 452.57394981756);
      float float2 = MathUtils.round(Float.NaN, (-449), 1);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = MathUtils.indicator(9218868437227405312L);
      long long1 = MathUtils.gcd((-351L), 1L);
      double double0 = MathUtils.sign((double) 1L);
      double double1 = MathUtils.binomialCoefficientDouble(103, 0);
      double double2 = MathUtils.round((double) (-351L), (-355));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4010.14263;
      int int0 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2482), 1180956337);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,482, k = 1,180,956,337
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-76);
      intArray0[1] = 8;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-764.4881440301414), (-764.4881440301414), (-764.4881440301414));
      float float0 = MathUtils.round(0.0F, 0);
      int int0 = MathUtils.indicator(0);
      double double0 = MathUtils.log(0.0F, (-764.4881440301414));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.log(1, 1);
      int int1 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.binomialCoefficient(1, 1);
      float float1 = MathUtils.indicator(0.0F);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 29791;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = MathUtils.lcm(175, 175);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 175;
      doubleArray0[1] = (double) 175;
      doubleArray0[2] = (double) 175;
      doubleArray0[3] = (double) 175;
      doubleArray0[4] = (double) 175;
      doubleArray0[5] = (double) 175;
      doubleArray0[6] = (double) 175;
      doubleArray0[7] = (double) 175;
      doubleArray0[8] = (double) 175;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 175;
      doubleArray1[1] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialDouble(0);
      int[] intArray0 = new int[0];
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.sign(0.0);
      long long0 = MathUtils.gcd(0L, 0L);
      short short0 = MathUtils.indicator((short)3012);
      int int1 = 1714;
      int int2 = 11;
      int int3 = MathUtils.gcd(1714, 11);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-378.11616399341);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1.0;
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0L, (double) 0L, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.addAndCheck(0, 0);
      int int2 = (-2186);
      double double0 = MathUtils.scalb(0, (-2186));
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1197));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,197
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = MathUtils.sign((-5028));
      long long0 = MathUtils.sign((-3314L));
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-15);
      byteArray0[0] = (byte) (-15);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      long long1 = bigInteger0.longValueExact();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.doubles(0.0, (double) (-3314L));
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = MathUtils.sign(8);
      double double0 = MathUtils.factorialDouble(2009);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2204L);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(2493);
      double double1 = MathUtils.normalizeAngle(2493, 2493);
      int int0 = MathUtils.subAndCheck(9, 9);
      int int1 = MathUtils.subAndCheck(9, 0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-2509.039), (-2509.039), (-2587));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 1072);
      double double0 = MathUtils.factorialLog(1072);
      int int0 = MathUtils.lcm(8, 1361);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(4, 4);
      long long0 = MathUtils.lcm((long) 0, 4398046511103L);
      boolean boolean0 = MathUtils.equals((double) 4398046511103L, 0.0, 0.0);
      double double0 = MathUtils.factorialDouble(20);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 20;
      doubleArray0[1] = (double) 4398046511103L;
      doubleArray0[2] = (double) 20;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 20;
      doubleArray0[6] = 794.15;
      doubleArray0[7] = (double) 20;
      doubleArray0[8] = (double) 0;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1351));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,351
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1218.568515, (-2556.21187654), 4222);
      int int0 = MathUtils.mulAndCheck(3965, 4222);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.round(0.0, (-961), 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MathUtils.checkOrder(doubleArray0);
      long long0 = MathUtils.lcm(0L, 3256L);
      int int1 = MathUtils.compareTo(1021.3376803402, 0.0, (-1050.0));
      long long1 = MathUtils.subAndCheck(0L, (-1L));
      long long2 = MathUtils.gcd((long) 0, 1L);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int2 = MathUtils.mulAndCheck(0, 1623);
      double double1 = MathUtils.sinh(627.3517525398314);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long long0 = MathUtils.pow(2147483648L, 570);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 570, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 570, (-3071.01));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.compareTo(570, 570, 448.002666193);
      boolean boolean2 = MathUtils.equals(0.0, (-2189.4), 0.0);
      double double0 = MathUtils.log((-1232.160409), (-1581.1771));
      float float0 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1232.160409);
      doubleArray0[1] = (-1232.160409);
      doubleArray0[2] = (-1232.160409);
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = MathUtils.pow(4, 956L);
      double double0 = MathUtils.scalb(0, 217);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 956L;
      doubleArray0[3] = (double) 217;
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(771);
      double double1 = MathUtils.normalizeAngle(771, 0.0);
      boolean boolean0 = MathUtils.equals((double) 771, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      int int0 = MathUtils.subAndCheck(771, 9);
      double double2 = MathUtils.sinh(9);
      float float0 = MathUtils.round((float) 771, 0, 0);
      long long0 = MathUtils.lcm((long) 0, (long) 0);
      double double3 = MathUtils.sign(0.0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2826));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,826
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4.503599627370496E15;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 604.40063;
      doubleArray0[3] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (4,503,599,627,370,496 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathUtils.checkOrder(doubleArray0);
      double double0 = MathUtils.normalizeAngle(0.0, (-2964.2541234));
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2965.6634649887646);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-2964.2541234);
      doubleArray1[5] = (-2965.6634649887646);
      doubleArray1[6] = (-2965.6634649887646);
      doubleArray1[7] = 2.85040095144011776E17;
      doubleArray1[8] = (-2965.6634649887646);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathUtils.sign(0.008336750013465571);
      byte byte0 = MathUtils.indicator((byte)17);
      double double1 = MathUtils.log(1.1730463525082348E-7, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.008336750013465571;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 146.30186514027213;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(Double.NEGATIVE_INFINITY, (-1615.175));
      long long0 = MathUtils.pow((-4791L), 0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = MathUtils.hash((-1669.6883147054175));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float float0 = MathUtils.round((-1058.146F), 6);
      int int0 = MathUtils.compareTo((-1058.146F), 6, (-1058.146F));
      float float1 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) (-1058.146F);
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 6;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (6 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathUtils.sign((-908.7426897880572));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-908.7426897880572);
      doubleArray0[1] = (-908.7426897880572);
      doubleArray0[2] = (-908.7426897880572);
      doubleArray0[3] = (-908.7426897880572);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-908.7426897880572);
      doubleArray0[6] = (-1.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 4 and 5 are not increasing (-1 > -908.743)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-943));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -943
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-3786.41595);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(1562, 0);
      double double0 = MathUtils.sign(2115.5701343651795);
      int[] intArray0 = new int[9];
      intArray0[0] = 1562;
      intArray0[1] = 1562;
      intArray0[2] = 1562;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1562;
      intArray0[7] = 1562;
      intArray0[8] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.sign((-777L));
      int int2 = MathUtils.lcm((-3684), 0);
      long long1 = MathUtils.mulAndCheck((long) 0, (long) 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2115.5701343651795;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      double double1 = MathUtils.indicator(0.0);
      int int0 = MathUtils.addAndCheck(87, 21);
      long long0 = MathUtils.lcm(0L, (long) 87);
      double double2 = MathUtils.cosh(0L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(108, 87);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = MathUtils.lcm((-520), 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-520);
      intArray0[2] = 0;
      intArray0[3] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = MathUtils.lcm((-177), 8);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = MathUtils.factorialLog(6);
      long long0 = MathUtils.sign(4294967295L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 6.579251212010101;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (1 < 6.579)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-3055.999078581361);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = MathUtils.gcd((-3039), 0);
      int int1 = MathUtils.subAndCheck(182, 0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = (-7278142539171889152L);
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-7278142539171889152L), (-7278142539171889152L));
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -7,278,142,539,171,889,152 + -7,278,142,539,171,889,152
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 4194304);
      long long0 = MathUtils.pow((long) 4194304, (long) 4194304);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 4194304;
      doubleArray0[2] = (double) 0L;
      int int1 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.indicator((short)0);
      long long1 = MathUtils.addAndCheck((long) (-391089057), 4816L);
      int int2 = MathUtils.sign((int) (short)0);
      boolean boolean0 = MathUtils.equals(1287.0327979, (-1592.44997278), (double) (-391084241L));
      byte byte0 = MathUtils.indicator((byte)85);
      double double0 = MathUtils.indicator((double) (byte)85);
      double double1 = MathUtils.binomialCoefficientDouble(4194304, 2149);
      double double2 = MathUtils.factorialLog(2901);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(5252.636603, 589.2, 1195);
      long long0 = MathUtils.subAndCheck((long) 1195, 1L);
      long long1 = MathUtils.indicator(0L);
      long long2 = MathUtils.gcd(1239L, 5648769086999809661L);
      int[] intArray0 = new int[4];
      intArray0[0] = 1195;
      intArray0[1] = 1195;
      intArray0[2] = 0;
      intArray0[3] = 1195;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.pow((-1074), (long) 0);
      int int2 = MathUtils.pow(200, (long) 1195);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      boolean boolean1 = MathUtils.equals(0.0, 0.0);
      double double0 = 2441.602914156;
      double double1 = 0.0;
      int int0 = 681;
      boolean boolean2 = MathUtils.equals(2441.602914156, 0.0, 681);
      double double2 = MathUtils.cosh(3.141592653589793);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("hw45n|V;^hyZ<O");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.hw45n|V;^hyZ<O
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = MathUtils.indicator(6722166367014452318L);
      int int0 = MathUtils.addAndCheck(4194304, 4194304);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1L, (double) 8388608, 62.0);
      double double0 = MathUtils.scalb(8388608, 8388608);
      long long1 = MathUtils.subAndCheck(0L, 0L);
      int[] intArray0 = new int[3];
      intArray0[0] = 8388608;
      intArray0[1] = 8388608;
      intArray0[2] = 8388608;
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.indicator(8388608);
      long long2 = MathUtils.subAndCheck(6722166367014452318L, 1L);
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 6722166367014452317L;
      doubleArray1[2] = (double) 6722166367014452317L;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, doubleArray1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      float float0 = MathUtils.sign(1.0F);
      float float1 = MathUtils.indicator(1.0F);
      byte byte0 = (byte)117;
      byte byte1 = MathUtils.sign((byte)117);
      long long0 = MathUtils.sign((long) (byte)117);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.round((double) 1.0F, (-2463));
      int int0 = 0;
      int int1 = MathUtils.gcd((int) (byte)1, 0);
      int int2 = 2421;
      int int3 = MathUtils.gcd((int) (byte)117, 2421);
      float float2 = 0.0F;
      int int4 = 11;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (int) (byte)1, 11);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 11, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = MathUtils.sign(436L);
      long long1 = MathUtils.indicator(0L);
      int int0 = MathUtils.addAndCheck(1418, (-417));
      int[] intArray0 = new int[8];
      intArray0[0] = 1001;
      intArray0[1] = 0;
      intArray0[2] = 1418;
      intArray0[3] = (-417);
      intArray0[4] = 1418;
      intArray0[5] = 1001;
      intArray0[6] = (-1444);
      intArray0[7] = 1001;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      try { 
        MathUtils.pow((-417), (-1246));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-417^-1,246)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
