/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:02:14 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.Random;
import java.util.stream.DoubleStream;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      double double1 = MathUtils.TWO_PI;
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1594);
      intArray0[1] = 1925;
      intArray0[2] = (-1594);
      intArray0[3] = (-1594);
      intArray0[4] = (-1594);
      intArray0[5] = (-1594);
      intArray0[6] = (-1594);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1648, 1648);
      int int0 = 67;
      double double1 = MathUtils.binomialCoefficientDouble(2143109556, 67);
      long long0 = MathUtils.indicator((-1925L));
      int int1 = MathUtils.subAndCheck(6, 2765);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 157.97163;
      doubleArray0[2] = 1463.9;
      doubleArray0[3] = (double) (-2759);
      doubleArray0[4] = (double) (-1925L);
      doubleArray0[5] = (double) (-1925L);
      doubleArray0[6] = (double) (-2759);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.11764700710773468, 419.5, 3619.1295479);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1553, 0);
      double double1 = MathUtils.log(1.1102230246251565E-16, (-841.0));
      long long0 = MathUtils.sign(0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, (double) 1553, (double) 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(4);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 2076);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.EPSILON;
      int int0 = 0;
      int int1 = MathUtils.sign(0);
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.1102230246251565E-16, 1.1102230246251565E-16, 0.3999999761581421);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1433.75715;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 2185.3723979;
      doubleArray0[3] = Double.NaN;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 8.251545029714408E-9);
      int int0 = (-2075900858);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2075900858));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,075,900,858
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(39, 39);
      double double1 = MathUtils.log(0.0, (-1636.775));
      byte byte0 = MathUtils.sign((byte)24);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = 39;
      intArray0[2] = (int) (byte)1;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      short short0 = MathUtils.sign((short)4173);
      // Undeclared exception!
      MathUtils.factorialDouble(2147407184);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.round((-224.013F), 0, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 63);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 63
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = MathUtils.cosh(3303.0833);
      int[] intArray0 = new int[4];
      intArray0[0] = 10;
      intArray0[1] = (-199);
      intArray0[2] = 8;
      intArray0[3] = (-794);
      int[] intArray1 = new int[9];
      intArray1[0] = 2886;
      intArray1[1] = 10;
      intArray1[2] = 10;
      intArray1[3] = 2;
      intArray1[4] = 0;
      intArray1[5] = 8;
      intArray1[6] = (-199);
      intArray1[7] = (-199);
      intArray1[8] = 8;
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = (-0.16624882440418567);
      doubleArray0[5] = 3465.51331;
      doubleArray0[6] = (-2812.466633355);
      doubleArray0[7] = 532.5;
      doubleArray0[8] = (-356.457925484694);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 6.283185307179586;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 532.5;
      doubleArray1[3] = (-2812.466633355);
      doubleArray1[4] = (-356.457925484694);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1.304E19;
      doubleArray1[7] = 532.5;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(3395.1444845800306, (-2943.367054652));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 3395.1444845800306;
      doubleArray1[1] = 3395.1444845800306;
      doubleArray1[2] = 3395.1444845800306;
      doubleArray1[3] = 3395.1444845800306;
      doubleArray1[4] = 3395.1444845800306;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.sign((-192));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3392.2603);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      int int0 = MathUtils.hash(doubleArray0);
      try { 
        MathUtils.normalizeArray(doubleArray0, (-850086376));
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(1214, 0);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1214, (double) 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.scalb(1.1102230246251565E-16, 768);
      float float0 = MathUtils.round((-1.0F), 768, 0);
      long long0 = MathUtils.subAndCheck((long) 0, 0L);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = MathUtils.pow(1697L, 637);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.flipBit(637);
      BigInteger bigInteger2 = bigInteger1.shiftLeft(637);
      BigInteger bigInteger3 = bigInteger1.nextProbablePrime();
      BigInteger bigInteger4 = bigInteger0.modPow(bigInteger1, bigInteger1);
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.factorialDouble(162);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 637;
      doubleArray0[1] = 1.2296942187397695E289;
      doubleArray0[2] = (double) 637;
      doubleArray0[3] = (double) 637;
      doubleArray0[4] = (double) (short)10;
      doubleArray0[5] = (double) 8739340165976937505L;
      doubleArray0[6] = (double) 8739340165976937505L;
      doubleArray0[7] = (double) 637;
      double double1 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 637.0, (-2308.418475));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-1180), 0);
      long long0 = MathUtils.indicator(1489L);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      double double1 = MathUtils.sinh(1.304E19);
      int int1 = MathUtils.subAndCheck(3214, (-980));
      int int2 = MathUtils.compareTo(0.0, 1.304E19, 0.0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = (-3841);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-3841));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,841
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-722), (-722));
      int int1 = MathUtils.hash(0.0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-28);
      intArray0[1] = (int) (byte)53;
      intArray0[2] = 1380;
      int int2 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short short0 = (short) (-2079);
      short short1 = MathUtils.indicator((short) (-2079));
      // Undeclared exception!
      try { 
        MathUtils.factorial((short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 1971;
      float float0 = MathUtils.round(0.0F, 1971);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = (-3788);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-3788));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,788
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = MathUtils.gcd(40320L, (-4364L));
      long long1 = MathUtils.addAndCheck((-1990L), 40320L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      BigInteger bigInteger4 = bigInteger0.min(bigInteger3);
      int int0 = (-2804);
      // Undeclared exception!
      try { 
        bigInteger0.testBit((-2804));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1918);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-814);
      intArray0[4] = 694;
      int[] intArray1 = new int[5];
      intArray1[0] = 694;
      intArray1[1] = 0;
      intArray1[2] = 694;
      intArray1[3] = (-2538);
      intArray1[4] = (-1918);
      int int0 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-285.366224412829), 0.0, 57);
      double double0 = MathUtils.scalb(6.283185307179586, 0);
      int[] intArray0 = new int[7];
      intArray0[0] = 15;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 57;
      intArray0[4] = 57;
      intArray0[5] = 57;
      intArray0[6] = 0;
      int[] intArray1 = new int[1];
      intArray1[0] = 57;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = MathUtils.pow(16, 63);
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)1;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.factorialDouble(0);
      int int1 = (-2614);
      try { 
        MathUtils.pow((BigInteger) null, (-2614));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-2,614)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = MathUtils.scalb(698.0547920262866, 0);
      short short0 = MathUtils.indicator((short)0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      String string0 = bigInteger1.toString(84);
      float float0 = bigInteger1.floatValue();
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      int int0 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) (short)1);
      int int1 = MathUtils.indicator(1468);
      int int2 = MathUtils.gcd(1468, 0);
      int int3 = MathUtils.pow(66, 3316L);
      try { 
        MathUtils.pow(bigInteger1, (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = MathUtils.compareTo((-1888.1041854), 1.0E-6, 1.0E-6);
      double double0 = MathUtils.scalb(Double.NEGATIVE_INFINITY, (-1));
      long long0 = MathUtils.addAndCheck((-406L), 700L);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.sign(0.0);
      double double2 = MathUtils.indicator(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = null;
      BigInteger bigInteger1 = BigInteger.ZERO;
      String string0 = bigInteger1.toString();
      // Undeclared exception!
      try { 
        bigInteger0.remainder(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = MathUtils.sign((-320L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (-320L), (double) (-1L), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-4265.5882147499), (-4265.5882147499));
      BigInteger bigInteger0 = BigInteger.TEN;
      long long0 = (-561L);
      try { 
        MathUtils.pow(bigInteger0, (-561L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-561)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = MathUtils.sign(2147483647L);
      long long1 = MathUtils.subAndCheck(0L, 2147483647L);
      int int0 = MathUtils.gcd((-1647), (-1647));
      double double0 = MathUtils.round(0.0, 1647);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1647, 46);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = MathUtils.sign(62.0);
      float float0 = MathUtils.round(0.0F, (-373));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-373);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (-373);
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = 62.0;
      doubleArray0[5] = 62.0;
      doubleArray0[6] = (double) Float.NaN;
      doubleArray0[7] = (double) (-373);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = 0;
      int int1 = 127;
      int int2 = MathUtils.subAndCheck(0, 127);
      // Undeclared exception!
      try { 
        MathUtils.round((-225.872), 127, 127);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = MathUtils.hash((-72.14));
      // Undeclared exception!
      try { 
        MathUtils.equals((-2574.7315026278106), (double) 48059612, 48059612);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3829.951757;
      doubleArray0[1] = (-4864.0925703);
      doubleArray0[2] = (-3242.0);
      double double0 = MathUtils.safeNorm(doubleArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-109);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)44;
      byteArray0[2] = (byte)44;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-88);
      byte byte3 = (byte)13;
      byteArray0[7] = (byte)13;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.not();
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-7,854,229,368,948,217,843^-7,854,229,368,948,217,843)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.indicator(6.283185307179586);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = MathUtils.hash(481.3129814838884);
      double double0 = (-7.800414592973399E-9);
      double double1 = MathUtils.normalizeAngle(481.3129814838884, (-7.800414592973399E-9));
      int int1 = MathUtils.subAndCheck((-1197388321), (-1197388321));
      double double2 = MathUtils.round(0.0, 3161);
      int int2 = MathUtils.sign(3161);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 1);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.indicator((-1901.52673847244));
      int int0 = MathUtils.gcd((-562), (-1761));
      boolean boolean0 = MathUtils.equals((-1984.7874924255), (double) (-562));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, (-366L));
      long long1 = MathUtils.sign((-366L));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-2088.126727801), (-2088.126727801));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1823.4570177604776);
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.pow(424L, 2277);
      boolean boolean0 = MathUtils.equals((-609.3421), (-1127.959310277), 2277);
      long long1 = MathUtils.lcm((long) 2277, (-3712L));
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2677.959183726097);
      short short0 = MathUtils.sign((short) (-3225));
      boolean boolean1 = MathUtils.equals(1.0, (-1823.4570177604776));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.sign((-1023));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3400.545505929847;
      doubleArray0[1] = (double) (-1023);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short) (-118));
      long long0 = MathUtils.sign((long) (short) (-1));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2060.33;
      doubleArray0[1] = 1.4456468917292502E-16;
      doubleArray0[2] = (-142.0);
      doubleArray0[3] = 888.43534;
      doubleArray0[4] = (-1876.3754260161);
      doubleArray0[5] = (-1176.77);
      doubleArray0[6] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(Double.POSITIVE_INFINITY);
      int int1 = MathUtils.gcd(0, 2146435072);
      long long0 = MathUtils.binomialCoefficient(0, (-106));
      // Undeclared exception!
      try { 
        MathUtils.equals(Double.NEGATIVE_INFINITY, (-1.0), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = MathUtils.pow((-4035746434778044925L), 2291);
      int int0 = MathUtils.gcd(2291, 2291);
      int int1 = MathUtils.gcd(2291, 0);
      double double0 = MathUtils.factorialDouble(2291);
      double double1 = MathUtils.factorialLog(2291);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-3173.088983754907);
      doubleArray0[0] = (-3173.088983754907);
      doubleArray0[1] = (-715.060717);
      double double1 = 1.9868161777724352E-8;
      doubleArray0[2] = 1.9868161777724352E-8;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.9868161777724352E-8);
      int int0 = (-454);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-454), (-454));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -454, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(18, 6);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 2676L);
      long long1 = MathUtils.lcm(0L, 0L);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      long long2 = MathUtils.pow(0L, 572L);
      long long3 = MathUtils.factorial(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.304E19, 1.0, (double) 0);
      float float0 = MathUtils.sign(0.0F);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.304E19, (double) 1L, 1.0);
      int int0 = MathUtils.sign(617);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 2676L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(352L, 352L);
      long long1 = MathUtils.subAndCheck((-645L), 2147483648L);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = MathUtils.pow((-3731L), 39916800L);
      double double0 = MathUtils.sinh((-1441311496779893759L));
      int[] intArray0 = new int[7];
      intArray0[0] = 21;
      intArray0[1] = (-2013);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = 2025;
      intArray0[6] = (-2275);
      int[] intArray1 = new int[2];
      intArray1[0] = 2025;
      intArray1[1] = 21;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = 3147L;
      long long1 = 0L;
      long long2 = MathUtils.mulAndCheck(3147L, 0L);
      long long3 = (-7278142539171889152L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-7278142539171889152L), 3147L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-2615.4622726986), 0.0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(167L, 0L);
      int int0 = (-1082);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1082), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,082, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.375;
      doubleArray0[2] = 6.123233995736766E-17;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.375;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = 6.123233995736766E-17;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 6.123233995736766E-17;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      int int0 = 402;
      // Undeclared exception!
      try { 
        MathUtils.factorial(402);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)112);
      int int0 = MathUtils.subAndCheck((-2070), (-2070));
      int int1 = MathUtils.sign((-1789));
      int int2 = MathUtils.mulAndCheck(4194304, 258);
      int int3 = MathUtils.compareTo((-7.800414592973399E-9), 258, (-2070));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.subAndCheck((long) 4194304, (-2630L));
      int int4 = MathUtils.indicator((int) (byte)1);
      long long1 = MathUtils.pow(2052L, 4196934L);
      long long2 = MathUtils.subAndCheck(0L, (long) (byte)1);
      int int5 = MathUtils.pow((-3025), 1816);
      try { 
        MathUtils.pow((long) 965115777, (-2070));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (965,115,777^-2,070)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(744, 744);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-748.4), (double) 744);
      short short0 = MathUtils.indicator((short)499);
      int int1 = MathUtils.lcm((-405), (-56));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      int int0 = (-1594);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1594), (-1594));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,594
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 1193);
      int[] intArray0 = new int[4];
      intArray0[0] = 1193;
      intArray0[1] = 1193;
      intArray0[2] = 1193;
      intArray0[3] = 1193;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      short short0 = MathUtils.indicator((short) (-628));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 4266;
      int int1 = MathUtils.pow(4266, 4194304);
      double double0 = MathUtils.scalb(1.2246467991473532E-16, 4194304);
      int int2 = 0;
      long long0 = MathUtils.factorial(0);
      // Undeclared exception!
      try { 
        MathUtils.equals(2114.46107, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = MathUtils.lcm(2244, 2244);
      int int1 = MathUtils.indicator(2244);
      long long0 = MathUtils.factorial(0);
      int int2 = (-249);
      double double0 = MathUtils.round((double) 2244, (-249));
      long long1 = MathUtils.subAndCheck(355687428096000L, (long) 0);
      byte byte0 = (byte) (-91);
      byte byte1 = MathUtils.sign((byte) (-91));
      boolean boolean0 = MathUtils.equals((double) (byte) (-1), (-556.0));
      byte byte2 = MathUtils.indicator((byte) (-91));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-249), 2244);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -249, k = 2,244
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = MathUtils.gcd(20922789888000L, 0L);
      long long1 = MathUtils.gcd(0L, 641L);
      float float0 = MathUtils.indicator((float) 0L);
      int[] intArray0 = new int[3];
      intArray0[0] = (-134);
      intArray0[1] = 67;
      int int0 = (-89);
      intArray0[2] = (-89);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.cosh(0.0);
      float float1 = MathUtils.indicator((float) (-89));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-4726.24933), (double) 641L);
      float float2 = MathUtils.indicator(312.673F);
      long long2 = MathUtils.sign((long) 67);
      int int2 = (-279);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-134), (-279));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -134
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = MathUtils.pow(19, (long) 19);
      double double0 = MathUtils.indicator((double) 19);
      boolean boolean0 = MathUtils.equalsIncludingNaN(4576.919698, 0.0);
      int int1 = MathUtils.pow((-306639989), (long) 19);
      double double1 = MathUtils.factorialLog(0);
      double double2 = MathUtils.sign((double) 0);
      float float0 = MathUtils.sign((-1.0F));
      long long0 = MathUtils.pow((-71L), 4503599627370495L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3189309707946317449L;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) 464420851;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = 0.0;
      double double3 = MathUtils.safeNorm(doubleArray0);
      double double4 = MathUtils.safeNorm(doubleArray0);
      int int2 = MathUtils.pow(0, 1985L);
      long long1 = MathUtils.pow(2276L, 3413);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 340.0048622872;
      doubleArray0[1] = (-3717.976078096);
      doubleArray0[2] = 2102.244576;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd(0L, 0L);
      double double1 = 1.9699272335463627E-8;
      double double2 = MathUtils.log(340.0048622872, 1.9699272335463627E-8);
      int int0 = MathUtils.hash(doubleArray0);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((-3717.976078096), 2.404307984052299E-9, 55.0);
      long long1 = MathUtils.lcm((-1698L), (long) (-506319891));
      double double4 = 0.041666663879186654;
      // Undeclared exception!
      try { 
        MathUtils.equals(0.041666663879186654, 340.0048622872, (-506319891));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = (-2346.2213);
      int int0 = (-540);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-2346.2213), (-2346.2213), (-540));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.9999997615814209, 0.0, 88);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.9999997615814209);
      int int0 = MathUtils.pow(88, (long) 88);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1056, 1056);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-350L), 6402373705728000L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6402373705728000L;
      doubleArray0[1] = (double) (-350L);
      doubleArray0[2] = (double) (-2240830797004800000L);
      doubleArray0[3] = (double) (-350L);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int[] intArray0 = new int[5];
      intArray0[0] = (-74);
      intArray0[1] = 3861;
      intArray0[2] = 21;
      intArray0[3] = 170;
      intArray0[4] = (-478);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((-1.0), 0.0, 107);
      long long1 = MathUtils.sign(2370L);
      double double1 = MathUtils.round((double) 21, 18);
      double double2 = MathUtils.safeNorm(doubleArray0);
      double double3 = MathUtils.normalizeAngle(3861, 6.402373705728E15);
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      int int3 = MathUtils.pow(170, 0L);
      double double4 = MathUtils.sign((double) (-350L));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-498L), 0L);
      float float0 = MathUtils.indicator(1.0F);
      long long1 = MathUtils.pow(0L, 0);
      long long2 = MathUtils.pow(0L, 2604L);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1.0F, 0, (-493));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = MathUtils.round(0.9999997615814209, (-2496));
      float float0 = MathUtils.round(68.02F, 11);
      short short0 = MathUtils.indicator((short)937);
      double double1 = MathUtils.scalb((-2531.79854601), 0);
      double double2 = MathUtils.cosh(0.0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = MathUtils.sign(190);
      double double0 = MathUtils.round((double) 1, 190);
      double double1 = MathUtils.round((-8.0E298), 0, 1);
      double double2 = MathUtils.round((-8.0E298), 1);
      double double3 = MathUtils.sinh((-3014.393));
      BigInteger bigInteger0 = BigInteger.TEN;
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger1 = bigInteger0.clearBit(0);
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigInteger bigInteger3 = bigInteger2.modPow(bigInteger0, bigInteger1);
      // Undeclared exception!
      try { 
        bigInteger0.remainder(bigInteger2);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2403.82714405), (-2403.82714405));
      boolean boolean1 = MathUtils.equals(1.304E19, (-2403.82714405), 210);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(11, 712);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 11, k = 712
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3654.02068061717);
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-3869.80707);
      doubleArray0[3] = 1510.58627;
      doubleArray0[4] = (-3336.6448);
      doubleArray0[5] = (-843.47798);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, (-1623.5305632503357), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 201);
      double double1 = MathUtils.round(0.0, 63);
      long long0 = MathUtils.pow((long) 63, 452L);
      int int0 = MathUtils.sign((-3183));
      double double2 = MathUtils.sign((-3172.44));
      byte byte0 = MathUtils.sign((byte)0);
      long long1 = MathUtils.sign((long) 201);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3172.44);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (-3183);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-6658725451326689535L);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 1L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (0 > -3,183)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1864);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.indicator((double) 0);
      int int1 = MathUtils.subAndCheck(1583, 1583);
      float float0 = MathUtils.round(1008.9554F, 0);
      long long0 = MathUtils.pow((long) 0, 519L);
      float float1 = MathUtils.sign((float) 0);
      int int2 = MathUtils.indicator((-309));
      int int3 = MathUtils.lcm(20, (-1864));
      int int4 = MathUtils.indicator(0);
      double double1 = MathUtils.sign((double) (-1864));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 519L;
      doubleArray0[1] = (double) 1008.9554F;
      doubleArray0[2] = (double) (-1864);
      doubleArray0[3] = (double) (-1864);
      doubleArray0[4] = (double) 1008.9554F;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,008.955 >= -1,864)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = MathUtils.gcd(523, 523);
      long long0 = MathUtils.mulAndCheck((long) 523, (-2607L));
      double double0 = MathUtils.sign((double) 523);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 523, 523);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = MathUtils.lcm(2789L, 2789L);
      long long1 = MathUtils.subAndCheck(0L, 2789L);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = MathUtils.indicator((-1010L));
      int[] intArray0 = new int[7];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 9;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 180;
      intArray0[5] = 248;
      int int1 = 0;
      intArray0[6] = 0;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 248;
      doubleArray0[2] = (double) 248;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 248)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.pow(0L, 0L);
      int int0 = (-1303);
      int int1 = 0;
      int int2 = MathUtils.gcd((-1303), 0);
      double double0 = MathUtils.round((double) 0, 1303);
      double double1 = MathUtils.log(0L, 0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-1303);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1303;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.49999999999999994;
      doubleArray0[7] = Double.NaN;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-1,303 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = 2815.7612015;
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        MathUtils.round(2815.7612015, Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // Underflow
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = (-2659);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2659));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,659
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 1566);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 1566;
      doubleArray0[5] = (double) 1566;
      doubleArray0[6] = (double) 1566;
      doubleArray0[7] = (double) 1566;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.log((-501.69), (-501.69));
      long long1 = MathUtils.gcd((long) 1566, 0L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = MathUtils.indicator((-1319L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1319L);
      doubleArray0[2] = (double) (-1319L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1319L);
      doubleArray0[6] = (double) (-1319L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte) (-9));
      int int0 = MathUtils.indicator(0);
      int int1 = MathUtils.mulAndCheck((int) (byte) (-1), 0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-9);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-8,796,093,022,217^-8,796,093,022,217)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 49;
      int int1 = (-961);
      try { 
        MathUtils.pow(49, (-961));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (49^-961)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) (short)0;
      doubleArray0[8] = (double) (short)0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 1967L);
      float float0 = (-5463.3F);
      float float1 = MathUtils.indicator((-5463.3F));
      int int0 = (-78);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-78));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -78
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      short short0 = MathUtils.indicator((short)8);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = 140;
      int int3 = MathUtils.addAndCheck(140, (int) (short)1);
      long long0 = MathUtils.pow((-4267615245585081135L), 209);
      // Undeclared exception!
      try { 
        MathUtils.round(1322.304982, 0, (-3067));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.gcd((-195L), (-2L));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1322.2534358);
      doubleArray0[2] = (-356.010429);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 702.87);
      int int0 = 2;
      float float0 = MathUtils.round(0.0F, 2);
      int int1 = 0;
      float float1 = MathUtils.round((-1569.001F), 0);
      long long0 = MathUtils.pow((long) 0, 0L);
      int int2 = (-3634);
      try { 
        MathUtils.pow((-2769L), (-3634));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,769^-3,634)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 4194304;
      intArray0[0] = 4194304;
      intArray0[1] = 819;
      int int1 = 14;
      intArray0[2] = 14;
      int int2 = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-792);
      int int3 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, (-0.09088450866185192), (-0.09088450866185192));
      int int0 = MathUtils.addAndCheck((-2257), (-2257));
      try { 
        MathUtils.pow(0L, (-4514));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-4,514)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = MathUtils.compareTo((-2890.21), (-2890.21), 995.21019117);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 2109808496;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = MathUtils.sign(65);
      boolean boolean0 = MathUtils.equals(0.041666666666621166, 0.041666666666621166, 65);
      short short0 = MathUtils.sign((short)18);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.setBit(734);
      short short0 = bigInteger0.shortValueExact();
      boolean boolean0 = bigInteger0.isProbablePrime(0);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      boolean boolean1 = MathUtils.equals(2975.248821045, (-372.011601));
      short short1 = MathUtils.indicator((short)0);
      int int0 = MathUtils.pow((-2228), 0);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 1);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(720L, (-1896L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 720L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 720L;
      doubleArray0[3] = (double) 2616L;
      doubleArray0[4] = (double) 720L;
      doubleArray0[5] = (double) 2616L;
      doubleArray0[6] = (double) 720L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1090.2));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = MathUtils.compareTo(4316.08366749, 4316.08366749, 1322.265886);
      double double0 = MathUtils.cosh((-828.0));
      int int1 = 4194304;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-990), 4194304);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -990, k = 4,194,304
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2438.65117;
      doubleArray0[1] = 676.9529;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-827.512921);
      doubleArray0[4] = (-1454.9230684716867);
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 2063.2754719065447;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.subAndCheck(0L, 0L);
      short short0 = MathUtils.sign((short)0);
      long long1 = MathUtils.lcm(472L, 472L);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = MathUtils.indicator(83);
      int int1 = MathUtils.compareTo(1, 83, 1);
      long long0 = MathUtils.lcm((long) (-1), (-485L));
      boolean boolean0 = MathUtils.equals(1473.340195463795, (-1.0E-6));
      int[] intArray0 = new int[6];
      intArray0[0] = 83;
      intArray0[1] = 83;
      intArray0[2] = 83;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 1;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(1307674368000L, (-3512299194304650054L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-438.19620883), (-438.19620883), (-438.19620883));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-438.19620883);
      doubleArray0[1] = (-438.19620883);
      doubleArray0[2] = (-438.19620883);
      doubleArray0[3] = (-438.19620883);
      doubleArray0[4] = (-438.19620883);
      doubleArray0[5] = (-438.19620883);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1279.16751), (-3067.85), (-2649.3314117713));
      int int0 = MathUtils.subAndCheck(0, 0);
      long long0 = MathUtils.sign((long) 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (-3067.85);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.binomialCoefficientLog(4, 0);
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.addAndCheck(4, 4);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(0.008333333333333333, 954.22333, 0.0);
      int int2 = MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(2426, 2426);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.normalizeAngle(0.0, 0.0);
      long long0 = MathUtils.sign((long) 2426);
      long long1 = MathUtils.mulAndCheck((long) 2426, 4095L);
      long long2 = MathUtils.lcm(4095L, 4037L);
      int int1 = MathUtils.sign((-2252));
      long long3 = MathUtils.sign(479001600L);
      byte byte0 = MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(1874, 18);
      double double0 = MathUtils.scalb(18, 18);
      float float0 = MathUtils.sign((float) 1892);
      double double1 = MathUtils.log(0.0, (-6.663542893624021E-14));
      int int1 = MathUtils.mulAndCheck(18, 6);
      int int2 = MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      short short0 = MathUtils.indicator((short)152);
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(694, mockRandom0);
      DoubleStream doubleStream0 = mockRandom0.doubles(3453L);
      int int0 = mockRandom0.nextInt();
      mockRandom0.setSeed((short)152);
      BigInteger bigInteger2 = bigInteger1.gcd(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.shiftRight(1030);
      BigInteger bigInteger4 = BigInteger.valueOf(1517L);
      BigInteger bigInteger5 = bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, (int) (short)152);
      int int1 = MathUtils.mulAndCheck((int) (short)1, 1030);
      long long0 = MathUtils.addAndCheck(1517L, (-2491L));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathUtils.scalb(4576.9492, 237);
      double double1 = (-2185.3723979);
      double double2 = 21.566709137;
      double double3 = MathUtils.normalizeAngle((-2185.3723979), 21.566709137);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) 237, 9223372036854775807L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 10);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = MathUtils.scalb(4576.9492, 237);
      double double1 = MathUtils.normalizeAngle((-2185.3723979), 21.566709137);
      long long0 = MathUtils.mulAndCheck((long) 237, (long) 237);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 56169L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2185.3723979);
      doubleArray0[1] = 1.0108461574574718E75;
      doubleArray0[2] = (double) 56169L;
      doubleArray0[3] = 21.566709137;
      doubleArray0[4] = 647.0;
      doubleArray0[5] = 1.0108461574574718E75;
      doubleArray0[6] = (-2185.3723979);
      double double2 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathUtils.factorialLog(1113);
      long long0 = MathUtils.gcd((long) 1113, (long) 1113);
      double double1 = MathUtils.log(6698.914793551248, 1113);
      long long1 = MathUtils.pow(1113L, (long) 1113);
      double double2 = MathUtils.normalizeAngle((-3289.6433695306796), (-81321126377691751L));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = 6.283185307179586;
      double double1 = 3589.187542146875;
      int int0 = 4194304;
      // Undeclared exception!
      try { 
        MathUtils.equals(6.283185307179586, 3589.187542146875, 4194304);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-36));
      int int0 = MathUtils.gcd((int) (byte) (-1), (int) (byte) (-1));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("K_'Q)n");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.K_'Q)n
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathUtils.sinh(2566.54275);
      double double1 = MathUtils.round(Double.POSITIVE_INFINITY, (-4325), 1277);
      long long0 = MathUtils.indicator((long) 1277);
      long long1 = MathUtils.lcm(1L, 0L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double2 = MathUtils.sign(3460.5971);
      int int0 = MathUtils.compareTo(Double.POSITIVE_INFINITY, (-3336.480215), (-708.6514290237211));
      long long2 = MathUtils.lcm(0L, 0L);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1277;
      intArray0[2] = 1;
      intArray0[3] = (-4325);
      intArray0[4] = 4878;
      intArray0[5] = 1;
      intArray0[6] = 1277;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(3392.459727, 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3392.459727;
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.indicator((-65.493963));
      int int0 = MathUtils.subAndCheck(0, 0);
      double double3 = MathUtils.round((-1.0), 0);
      MathUtils.checkOrder(doubleArray0);
      double double4 = MathUtils.log(0.0, (-1.0));
      int int1 = 63;
      double double5 = MathUtils.binomialCoefficientLog(63, (-342));
      long long0 = MathUtils.addAndCheck((long) 0, (-605L));
      // Undeclared exception!
      try { 
        MathUtils.factorial(3028);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1L), (-1L));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, (-3826.168546929));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte byte0 = MathUtils.indicator((byte) (-108));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(39, 39);
      double double1 = MathUtils.log(0.0, (-1636.775));
      byte byte0 = MathUtils.sign((byte)24);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = 39;
      intArray0[2] = (int) (byte)1;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      short short0 = MathUtils.sign((short)4173);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.07490822288864472;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 83.497914;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (0.075 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1989.8326112;
      double double0 = 375.53874870064;
      doubleArray0[1] = 375.53874870064;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,989.833 >= 375.539)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-262.39056169);
      doubleArray0[3] = (-2053.0);
      doubleArray0[4] = (-238.2372304353);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = 283.0F;
      float float1 = MathUtils.sign(283.0F);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      short short0 = (short)1479;
      short short1 = MathUtils.sign((short)1479);
      int int0 = MathUtils.indicator((-1537));
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathUtils.round(2944.0674719758404, (-316));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2944.0674719758404;
      doubleArray0[3] = (-157.0513431645);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 2,944.067)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 16;
      intArray0[1] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.gcd(0, 6);
      int int1 = MathUtils.indicator((-40));
      int int2 = MathUtils.sign(1111);
      double double1 = MathUtils.normalizeAngle(0, (-1));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(302, 524);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 302, k = 524
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float float0 = MathUtils.round((-1.0F), 234);
      double double0 = MathUtils.scalb((-565.41), 234);
      int int0 = MathUtils.mulAndCheck((-2659), 10);
      double double1 = MathUtils.sinh(10);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, (-2786.0494015));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2786.0494015);
      doubleArray0[1] = (-2786.0494015);
      doubleArray0[2] = 98.557282246;
      doubleArray0[3] = (-2786.0494015);
      doubleArray0[4] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      double double1 = MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1105.300979;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (-4568.0);
      doubleArray0[5] = 12.0;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 0.074;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1,105.301)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = MathUtils.lcm(0, Integer.MIN_VALUE);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) Integer.MIN_VALUE;
      doubleArray0[4] = (double) Integer.MIN_VALUE;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.pow(40320L, 2L);
      float float0 = MathUtils.sign((float) 1625702400L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.2246467991473532E-16, 62.0);
      int int0 = 162;
      int int1 = MathUtils.addAndCheck(162, 162);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1625702400L;
      doubleArray0[1] = 1.2246467991473532E-16;
      doubleArray0[2] = (double) 324;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(162, (Random) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 413;
      intArray0[1] = 0;
      intArray0[2] = 51;
      intArray0[3] = 12;
      intArray0[4] = 0;
      intArray0[5] = 2066;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.sign((short)25);
      long long0 = MathUtils.gcd((long) 0, 0L);
      long long1 = MathUtils.lcm(2664L, (long) (short)1);
      long long2 = MathUtils.pow((-2260L), 413);
      byte byte0 = MathUtils.sign((byte)0);
      int int1 = MathUtils.lcm(2066, 51);
      long long3 = MathUtils.subAndCheck((long) 413, (long) 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      long long4 = MathUtils.binomialCoefficient(51, 0);
      short short1 = MathUtils.indicator((short)103);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.valueOf((-644L));
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) 105366);
      long long5 = MathUtils.subAndCheck((long) 0, (-1177L));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(375, 182);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = MathUtils.pow(138, 0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 138;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 138;
      doubleArray0[8] = (double) 138;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double0 = MathUtils.sinh(0.0);
      long long0 = MathUtils.indicator((long) 138);
      byte byte0 = MathUtils.indicator((byte)0);
      long long1 = MathUtils.gcd(1173L, 1L);
      float float0 = MathUtils.round((float) 1L, 2782);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 1113;
      boolean boolean0 = MathUtils.equalsIncludingNaN(1642.565, 1642.565, 1113);
      long long0 = (-2644281811660520851L);
      try { 
        MathUtils.pow((long) 1113, (-2644281811660520851L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,113^-2,644,281,811,660,520,851)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = MathUtils.indicator((-3320.455));
      double double1 = 0.0;
      double double2 = (-1833.380496);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-1833.380496), (-3320.455));
      short short0 = (short)48;
      short short1 = MathUtils.sign((short)48);
      int int0 = MathUtils.hash(0.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, (short)1);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      double double0 = MathUtils.binomialCoefficientDouble(1553, 0);
      double double1 = MathUtils.log(1.1102230246251565E-16, (-841.0));
      long long1 = MathUtils.sign(0L);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)69);
      float float0 = MathUtils.sign((-4748.4355F));
      double double0 = 1.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1468.1034353804), 1.0, (double) (-1.0F));
      double double1 = MathUtils.round(1.0, (-1220));
      int int0 = MathUtils.subAndCheck(0, (int) (byte)1);
      int int1 = MathUtils.sign(0);
      double double2 = MathUtils.indicator((double) (byte)1);
      int[] intArray0 = new int[0];
      double double3 = MathUtils.distance(intArray0, intArray0);
      int int2 = MathUtils.compareTo((-1.0F), 1410.6247528067, (-93.42727135));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      try { 
        MathUtils.pow((-1306), (long) (-1306));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,306^-1,306)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 340.0048622872;
      doubleArray0[1] = (-3717.976078096);
      doubleArray0[2] = 2102.244576;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = 0L;
      long long1 = MathUtils.gcd(0L, 0L);
      double double1 = 1.9699272335463627E-8;
      double double2 = MathUtils.EPSILON;
      int int0 = MathUtils.hash(1.1102230246251565E-16);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((-3717.976078096), 1.8686362177872269, 55.0);
      long long2 = MathUtils.lcm((-1698L), (long) 1017118720);
      double double4 = 0.041666663879186654;
      // Undeclared exception!
      try { 
        MathUtils.equals(0.041666663879186654, 340.0048622872, 1017118720);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      double double0 = MathUtils.log(0.0, (-0.1428571423679182));
      int int0 = MathUtils.subAndCheck((-2204), (-2204));
      int int1 = MathUtils.indicator(20);
      long long0 = MathUtils.sign((long) 20);
      long long1 = MathUtils.addAndCheck((long) 20, (long) 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      MathUtils.checkOrder(doubleArray0);
      long long2 = MathUtils.indicator((long) 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-2527.3605126);
      doubleArray0[2] = (-661.5123);
      doubleArray0[3] = (-2484.22);
      doubleArray0[4] = 1.2675934823758863E-8;
      doubleArray0[5] = 239.15070121;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.sign(0L);
      int int0 = MathUtils.compareTo((-1987.416783), (-2484.22), 3612.9893094209756);
      int int1 = MathUtils.addAndCheck(0, 0);
      int int2 = MathUtils.hash((-857.77));
      boolean boolean0 = MathUtils.equals((-2527.3605126), 1367.81865);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int[] intArray0 = new int[0];
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
  }
}
