/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:54:45 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 1468;
      int int1 = MathUtils.lcm(1468, 1468);
      double double0 = MathUtils.log(1468, 0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equals((double) 1468, 2.404307984052299E-9);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2427.73929;
      doubleArray0[1] = (double) 1468;
      doubleArray0[2] = (double) 1468;
      doubleArray0[3] = 2.404307984052299E-9;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (double) 1468;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = 2.404307984052299E-9;
      int int2 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(133, 1468);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 133, k = 1,468
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = 9193070505571053893L;
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(9193070505571053893L, 113236205062349959L);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 113,236,205,062,349,959 + 9,193,070,505,571,053,893
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 632;
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((-1.0), 1982.363916897371);
      long long0 = MathUtils.sign((long) 632);
      double double1 = MathUtils.log((-2053.87), 632);
      // Undeclared exception!
      MathUtils.factorialDouble(2147483615);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.sinh(2.2250738585072014E-308);
      int int0 = MathUtils.addAndCheck(2778, (-828));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2778;
      doubleArray0[1] = (double) 1950;
      doubleArray0[2] = (double) 1950;
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = 2.2250738585072014E-308;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 3.141592653589793;
      doubleArray0[7] = 2.2250738585072014E-308;
      doubleArray0[8] = 2.2250738585072014E-308;
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      long long0 = MathUtils.lcm(398L, 398L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 398L;
      doubleArray0[3] = (double) 1.0F;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(753.5902242291619, 753.5902242291619, 0.008336750013465571);
      int int0 = MathUtils.hash(0.008336750013465571);
      int int1 = MathUtils.subAndCheck((-1697889128), (-1697889128));
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1697889128);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.gcd(553L, (long) 0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.compareTo((-1964.51), (-1964.51), 2.3841857910019882E-8);
      int int1 = 0;
      long long0 = 0L;
      int int2 = MathUtils.pow(0, 0L);
      int int3 = MathUtils.gcd(9, 202);
      int int4 = MathUtils.gcd(202, 0);
      long long1 = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-9223372036854775808L), (long) 202);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.round(1442.5381F, 0, 0);
      int int1 = MathUtils.pow(0, 0);
      int int2 = (-1296);
      double double0 = MathUtils.scalb(1, (-1296));
      double double1 = MathUtils.log(25.4553, 1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2.3689546086131423E226);
      MathUtils.checkOrder(doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigInteger0.clearBit((-1296));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = MathUtils.lcm((-907), (-907));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2350.81891);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 6.283185307179586;
      doubleArray0[5] = 17.0;
      doubleArray0[6] = 193.1405583722;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 2487;
      double double0 = MathUtils.factorialLog(2487);
      int int1 = MathUtils.gcd((-1632), (-1632));
      float float0 = MathUtils.round((-173.7F), (-1632));
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-173.7F), Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // Underflow
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.lcm(12, 12);
      double double0 = MathUtils.sinh(12);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 81377.39570642984);
      boolean boolean1 = MathUtils.equals((double) 12, 0.0, 1380.138084593813);
      int[] intArray0 = new int[1];
      intArray0[0] = 12;
      double double1 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(12, 191);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 12, k = 191
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.round((-1546.0047197260694), 0, 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = 40320L;
      long long1 = MathUtils.pow(0L, 40320L);
      int int0 = 11;
      double double0 = MathUtils.binomialCoefficientDouble(11, 0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = MathUtils.gcd((-1496), 0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      boolean boolean0 = MathUtils.equals((double) 0L, 484.91679, 484.91679);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-204), (-204));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -204
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(17.0, 289.6669671828929, 289.6669671828929);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1503);
      intArray0[3] = 0;
      intArray0[4] = 3216;
      intArray0[5] = (-1178);
      intArray0[6] = (-2556);
      intArray0[7] = (-1263);
      intArray0[8] = (-61);
      int[] intArray1 = new int[2];
      intArray1[0] = 631;
      intArray1[1] = (-1263);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float float0 = MathUtils.round(2640.465F, 0);
      int int0 = MathUtils.hash(0.0);
      long long0 = MathUtils.pow((-721L), 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-721L);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (-721L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double0 = MathUtils.log(0.0, (-721L));
      int int1 = MathUtils.compareTo((-918.734451678), (-721.0), 0.5);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      double double0 = MathUtils.indicator(2349.25120154463);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = MathUtils.pow((-3999L), 0);
      short short0 = MathUtils.indicator((short)66);
      double double0 = MathUtils.normalizeAngle(10.0, 3322.8);
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      float float0 = MathUtils.round((-1433.584F), (int) (short)66);
      int int0 = MathUtils.mulAndCheck((int) (short)1, (int) (short)66);
      double double1 = 1.1102230246251565E-16;
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.1102230246251565E-16, 0.0);
      long long1 = MathUtils.gcd((-2986L), (-2986L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long2 = MathUtils.sign(1L);
      boolean boolean2 = MathUtils.equals((double[]) null, (double[]) null);
      double double2 = MathUtils.log((short)66, 1791.014413840622);
      byte byte0 = MathUtils.indicator((byte)0);
      double double3 = MathUtils.factorialLog((short)1);
      double double4 = MathUtils.cosh(1L);
      int int1 = MathUtils.lcm((int) (byte)0, (int) (byte)0);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 66, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = MathUtils.indicator(1.4456468917292502E-16);
      long long0 = MathUtils.binomialCoefficient(20, Integer.MIN_VALUE);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 3591.137, 20);
      double double1 = MathUtils.factorialLog(20);
      long long1 = MathUtils.pow((long) Integer.MIN_VALUE, 0L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(Integer.MIN_VALUE, 20);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(5053.935513177369, (-2158.3), 1027);
      double double0 = MathUtils.log(0.0, 0.0);
      long long0 = MathUtils.mulAndCheck(0L, 1L);
      double double1 = MathUtils.binomialCoefficientLog(1027, 1027);
      int int0 = MathUtils.pow(14, 1027);
      boolean boolean1 = MathUtils.equalsIncludingNaN(5053.935513177369, (double) 0L, 16);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.subAndCheck(978, 1027);
      byte byte0 = MathUtils.indicator((byte)88);
      double double2 = MathUtils.cosh(0.0);
      long long1 = MathUtils.mulAndCheck((-1241L), (-2867L));
      int[] intArray0 = new int[1];
      intArray0[0] = 16;
      double double3 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      double double4 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      int int0 = bigInteger0.intValueExact();
      BigInteger bigInteger1 = BigInteger.ZERO;
      long long0 = bigInteger1.longValue();
      BigInteger bigInteger2 = bigInteger1.subtract(bigInteger0);
      BigInteger bigInteger3 = bigInteger1.shiftLeft(5);
      BigInteger bigInteger4 = bigInteger1.add(bigInteger0);
      byte[] byteArray0 = bigInteger1.toByteArray();
      int int1 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger5 = BigInteger.valueOf((-286L));
      long long1 = 692L;
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 692L);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = MathUtils.round((-1413.203245804), 0);
      float float0 = MathUtils.round((float) 0, 0);
      int int0 = MathUtils.pow(169, 1639);
      long long0 = MathUtils.addAndCheck((-5034868814120038111L), (long) (-761685799));
      short short0 = MathUtils.sign((short)1602);
      byte byte0 = MathUtils.sign((byte)0);
      boolean boolean0 = MathUtils.equals((-1413.203245804), (-0.1428571423679182), (-626.2006309));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.valueOf(0);
      short short1 = bigInteger1.shortValueExact();
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      int int1 = bigInteger1.bitCount();
      boolean boolean1 = bigInteger1.testBit((byte)0);
      BigInteger bigInteger3 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger4 = bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 1694L);
      long long1 = MathUtils.addAndCheck(1062L, (long) 169);
      double double1 = MathUtils.cosh((-0.33333333333333287));
      long long2 = MathUtils.subAndCheck((-48L), (-1127L));
      float float1 = MathUtils.sign(1.0F);
      short short2 = MathUtils.sign((short)1);
      float float2 = MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = MathUtils.sign((-2297L));
      float float0 = MathUtils.sign((float) (-1L));
      int int0 = MathUtils.sign(0);
      double double0 = MathUtils.normalizeAngle((-1L), (-1.0F));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 2183.129125732526, (-732.0));
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-40));
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (byte) (-40), (double) (byte) (-1), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2539.0);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 3180.6817301129;
      doubleArray0[3] = (-1498.93);
      try { 
        MathUtils.normalizeArray(doubleArray0, 1.5);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4052.879347280197);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-131.56890996111);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      String string0 = bigInteger1.toString();
      int int0 = 378;
      BigInteger bigInteger2 = bigInteger0.shiftLeft(378);
      BigInteger bigInteger3 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = 40320L;
      try { 
        MathUtils.pow(40320L, (-1941L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (40,320^-1,941)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 20;
      int int1 = MathUtils.pow(20, 20);
      int int2 = MathUtils.gcd(0, 0);
      long long0 = MathUtils.lcm((long) 0, 7910884519577875640L);
      int int3 = MathUtils.pow(20, 0);
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double0 = MathUtils.binomialCoefficientDouble(0, (-946));
      double double1 = MathUtils.sign(0.0);
      double double2 = MathUtils.factorialDouble(0);
      float float0 = MathUtils.round((float) 20, 20, 0);
      boolean boolean2 = MathUtils.equals((double) 0, (double) 0, 0.0);
      int int4 = MathUtils.pow((-1931), 1156L);
      double double3 = MathUtils.scalb(364.14469151148484, 1);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-2413));
      long long0 = MathUtils.sign(14L);
      double double0 = MathUtils.sign((double) (short) (-2413));
      long long1 = MathUtils.indicator(0L);
      short short1 = MathUtils.indicator((short) (-1));
      boolean boolean0 = MathUtils.equals((double) (short) (-2413), (double) (short) (-2413), 616);
      double double1 = MathUtils.round(0.0, 0);
      long long2 = MathUtils.lcm(1751L, (-1204L));
      int int0 = MathUtils.compareTo((-1.0), 0.0, (short) (-1));
      boolean boolean1 = MathUtils.equals((-1.0), (-1423.37155288));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (-1423.37155288);
      doubleArray0[2] = (double) 14L;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 2108204L;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-33);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ONE;
      BigInteger bigInteger4 = bigInteger3.shiftLeft(4256);
      BigInteger bigInteger5 = bigInteger0.subtract(bigInteger3);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, bigInteger0);
      short short0 = (short)3025;
      short short1 = MathUtils.sign((short)3025);
      long long0 = MathUtils.subAndCheck(1L, 0L);
      long long1 = MathUtils.lcm((long) (short)3025, 0L);
      int int0 = MathUtils.sign(197);
      long long2 = MathUtils.sign((-2222L));
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-1324));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      int int0 = MathUtils.hash((double) (short)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)1, 5.0, 1.0);
      long long0 = MathUtils.mulAndCheck((-1138L), (long) (short)1);
      int int1 = MathUtils.pow((int) (short)1, (int) (short)0);
      double double0 = MathUtils.indicator((double) 0);
      double double1 = MathUtils.sinh(1756.833660296773);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 5.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (-1138L);
      doubleArray0[8] = 1756.833660296773;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (short)1);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (5 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(12, 481);
      short short0 = MathUtils.sign((short) (-292));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) (short) (-292);
      doubleArray0[2] = (double) 481;
      doubleArray0[3] = (double) 481;
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.subAndCheck((-2199), 0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-469);
      doubleArray1[1] = (double) (-2199);
      doubleArray1[2] = 3056.6863849892;
      doubleArray1[3] = (double) 481;
      doubleArray1[4] = (double) (short) (-1);
      doubleArray1[5] = (double) 12;
      doubleArray1[6] = (double) (short) (-1);
      doubleArray1[7] = (double) 12;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int[] intArray0 = new int[1];
      intArray0[0] = 1583;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = MathUtils.pow(5648769086999809661L, 0L);
      boolean boolean0 = MathUtils.equals((double) 5648769086999809661L, 277.0910616986);
      boolean boolean1 = MathUtils.equals((double) 1L, (double) 0L, 0.0);
      boolean boolean2 = MathUtils.equals((double) 1L, 0.0, 0.0);
      int int0 = MathUtils.compareTo(0.0, 0.0, 10.0);
      long long1 = MathUtils.gcd(407L, 5648769086999809661L);
      long long2 = MathUtils.pow((-1225L), 0L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1225L);
      doubleArray0[2] = 277.0910616986;
      doubleArray0[3] = 0.0;
      boolean boolean3 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      long long0 = MathUtils.gcd((-2147483648L), 106L);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1288L, 1288L);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-2228L), (-2644281811660520851L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(0, 0);
      float float0 = MathUtils.round((float) 0, 2997);
      long long0 = MathUtils.lcm((long) 0, 0L);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long1 = MathUtils.mulAndCheck(39916800L, (long) 0);
      float float1 = MathUtils.round((-977.6876F), 2997);
      float float2 = MathUtils.round((float) 0, 2997);
      int int2 = MathUtils.indicator(4);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long2 = MathUtils.pow((-1406L), 2361);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("INSUFFICIENT_DIMENSION");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.INSUFFICIENT_DIMENSION
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1928.9839211231813);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 380.67;
      doubleArray0[3] = 1062.32;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-560.3938230592678);
      doubleArray0[6] = (-269.4367622);
      doubleArray0[7] = 0.11111095942313305;
      doubleArray0[8] = (-2574.5599555107146);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-3560);
      intArray0[1] = 1422;
      intArray0[2] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.pow((-206), 0);
      int int2 = MathUtils.hash(338.61);
      long long0 = MathUtils.pow((long) (-3560), 67);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-3300.345204754), 0.0, (double) 1);
      int int3 = MathUtils.pow((-1121), 1422);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float float0 = MathUtils.sign(719.0F);
      short short0 = MathUtils.sign((short) (-2507));
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-2507);
      intArray0[1] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.factorial(0);
      long long1 = MathUtils.gcd((long) 0, (long) (short) (-2507));
      long long2 = MathUtils.sign(723L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.negate();
      int int1 = 0;
      // Undeclared exception!
      try { 
        bigInteger1.divideAndRemainder((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(11, (-14));
      long long0 = MathUtils.binomialCoefficient(468, 468);
      int int0 = 1870;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(11, 1870);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 11, k = 1,870
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(158.14043, 1.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 158.14043;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)26;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)26);
      int int0 = MathUtils.lcm(923, 3710);
      double double0 = MathUtils.round(464.984597, 0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = 2731.0;
      double double1 = MathUtils.normalizeAngle(2731.0, 2731.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-132.91724);
      doubleArray0[4] = 0.5;
      int int0 = MathUtils.hash(doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not decreasing (-132.917 < 0.5)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, (-2047));
      double double0 = MathUtils.sinh((-1.0));
      int int0 = (-694);
      int int1 = MathUtils.addAndCheck((-694), (-2047));
      int[] intArray0 = new int[0];
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      int int3 = MathUtils.addAndCheck(0, (-2990));
      int int4 = MathUtils.sign((-2990));
      int int5 = MathUtils.indicator((-1504));
      long long0 = MathUtils.subAndCheck(0L, 403L);
      int int6 = MathUtils.compareTo((-1504), 0.0, (-1));
      int int7 = MathUtils.subAndCheck((-528), 10);
      float float1 = MathUtils.indicator(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("Inexact result from rounding");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.Inexact result from rounding
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.abs();
      int int0 = 228;
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.shiftRight(228);
      long long0 = bigInteger3.longValue();
      boolean boolean0 = bigInteger3.isProbablePrime(228);
      BigInteger bigInteger4 = bigInteger0.gcd(bigInteger3);
      long long1 = (-9223372036854775808L);
      try { 
        MathUtils.pow(bigInteger0, (-9223372036854775808L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = (-2314);
      int int1 = MathUtils.indicator((-2314));
      double double0 = MathUtils.sinh((-1));
      int int2 = 0;
      long long0 = MathUtils.factorial(0);
      int int3 = MathUtils.compareTo((-2314), (-878.948), 0.097);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1.1752011936438014);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-4846.589984703948);
      doubleArray0[4] = (-1.1752011936438014);
      doubleArray0[5] = (-1.1752011936438014);
      boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 18);
      long long0 = MathUtils.pow((long) 18, 0);
      double double0 = MathUtils.log(0.0, 18);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 18;
      intArray0[2] = 18;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 18;
      doubleArray0[3] = (double) 18;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int2 = MathUtils.indicator(18);
      double double2 = MathUtils.sinh(0.0);
      double double3 = MathUtils.binomialCoefficientDouble(3008, 0);
      long long1 = MathUtils.pow((-1334L), (long) 1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(6.283185307179586, 3.834E-20, 89);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 89;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (double) 89;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = (double) 89;
      doubleArray0[6] = 6.283185307179586;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1846, 63);
      int int0 = MathUtils.mulAndCheck(63, 1846);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 63, 884.3304271753173, 2.2250738585072014E-308);
      double double1 = 16.0;
      int int1 = MathUtils.compareTo((-4644.72693786), 1846, 16.0);
      int[] intArray0 = new int[5];
      intArray0[0] = 116298;
      intArray0[1] = 116298;
      intArray0[2] = 116298;
      intArray0[3] = 1846;
      intArray0[4] = (-85);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.mulAndCheck(1307674368000L, (long) 116298);
      double double2 = MathUtils.sign(422.18012);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(116298, 116298);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1846, 63);
      int int0 = MathUtils.mulAndCheck(63, 1846);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 63, 884.3304271753173, 2.2250738585072014E-308);
      double double1 = 16.0;
      int int1 = MathUtils.compareTo((-4644.72693786), 1846, 16.0);
      int[] intArray0 = new int[5];
      intArray0[0] = 116298;
      intArray0[1] = 116298;
      intArray0[2] = 116298;
      intArray0[3] = 1846;
      intArray0[4] = (-85);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.sign(422.18012);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(116298, 116298);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.shiftRight(0);
      int int0 = bigInteger2.signum();
      BigInteger bigInteger3 = bigInteger1.gcd(bigInteger2);
      BigInteger bigInteger4 = bigInteger0.divide(bigInteger1);
      BigInteger bigInteger5 = bigInteger0.xor(bigInteger1);
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, bigInteger0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1193.1339097), (-1193.1339097));
      BigInteger bigInteger7 = bigInteger0.mod(bigInteger5);
      long long0 = MathUtils.pow(1961L, (long) 0);
      BigInteger bigInteger8 = BigInteger.valueOf(0);
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.factorialDouble((short)10);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-2785.77664), 1.01);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1193.1339097);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      int int0 = 118;
      int int1 = MathUtils.subAndCheck(118, 61);
      int int2 = MathUtils.indicator(61);
      short short0 = MathUtils.indicator((short)0);
      double double1 = MathUtils.cosh((short)0);
      long long0 = MathUtils.indicator((long) 61);
      double double2 = MathUtils.sign(0.0);
      int int3 = MathUtils.pow(2029, 118);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(61, 220);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 61, k = 220
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.sign(0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      double double0 = MathUtils.sinh(0L);
      int int0 = bigInteger0.intValue();
      int int1 = bigInteger0.intValueExact();
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 10.0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0L);
      BigInteger bigInteger3 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.modPow(bigInteger2, bigInteger3);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = MathUtils.sign((-64.0));
      int int0 = MathUtils.hash(0.0);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.07842259109020233);
      double double1 = MathUtils.sinh(0.0);
      int int0 = MathUtils.mulAndCheck(0, 0);
      byte byte0 = MathUtils.indicator((byte)123);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (byte)123;
      doubleArray0[8] = 0.07842259109020233;
      int int1 = MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 2630);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 136;
      int int1 = (-946);
      int int2 = MathUtils.addAndCheck(136, (-946));
      int[] intArray0 = new int[1];
      intArray0[0] = 136;
      int[] intArray1 = new int[8];
      intArray1[0] = (-946);
      intArray1[1] = (-810);
      intArray1[2] = (-810);
      intArray1[3] = 136;
      intArray1[4] = (-946);
      intArray1[5] = (-810);
      intArray1[6] = (-946);
      intArray1[7] = (-810);
      double double0 = MathUtils.distance(intArray0, intArray1);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-810));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -810
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = 3556.7883;
      boolean boolean0 = MathUtils.equalsIncludingNaN(3556.7883, 3556.7883, 3556.7883);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3556.7883;
      doubleArray0[1] = 3556.7883;
      doubleArray0[2] = 3556.7883;
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.sign(39916800L);
      int int0 = (-418);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-418));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -418
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = 5648769086999809661L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(5648769086999809661L, 5648769086999809661L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Random.setNextRandom(2482);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-497.605287771983), (-497.605287771983), (double) 2482);
      int[] intArray0 = new int[1];
      intArray0[0] = 2482;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(990, 990);
      long long0 = MathUtils.indicator((long) 990);
      int int0 = MathUtils.lcm(0, 990);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = MathUtils.gcd((-1534), 11);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2279));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,279
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = 9193070505571053912L;
      // Undeclared exception!
      try { 
        MathUtils.lcm(9193070505571053912L, 113236205062349959L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = MathUtils.cosh((-389.0777491));
      int int0 = MathUtils.hash((-389.0777491));
      double double1 = 0.0;
      int int1 = MathUtils.compareTo(4761.3150585, 73.9, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = MathUtils.indicator((-643.0));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathUtils.indicator((-2954.011));
      double double1 = MathUtils.cosh((-2954.011));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-5357.9479776178);
      doubleArray0[1] = 1235.58732954;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      byte byte0 = MathUtils.sign((byte) (-61));
      int int0 = MathUtils.compareTo(601.0, (byte) (-1), 0.19999999999923582);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-424.39558028), 1235.58732954);
      boolean boolean1 = MathUtils.equals((-5357.9479776178), (-1.0), 195.7577749);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 1339.9549517;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1038.5623);
      doubleArray0[5] = 751.653841323406;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.round(Double.POSITIVE_INFINITY, 0);
      float float0 = MathUtils.round(0.0F, 0, 0);
      double double2 = MathUtils.round(Double.POSITIVE_INFINITY, 0, (-1450));
      long long0 = MathUtils.factorial(0);
      float float1 = MathUtils.sign((float) (-1450));
      int[] intArray0 = new int[5];
      intArray0[0] = 67;
      intArray0[1] = 0;
      intArray0[2] = (-1450);
      intArray0[3] = 0;
      intArray0[4] = (-1450);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 52;
      intArray0[1] = 52;
      intArray0[2] = 1422;
      intArray0[3] = (-783);
      intArray0[4] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.normalizeAngle(52, 0.0);
      double double3 = MathUtils.indicator(0.0);
      float float0 = MathUtils.indicator((float) 52);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.7345175425633101;
      doubleArray0[1] = 1.7345175425633101;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-783);
      doubleArray0[5] = (double) (-783);
      double double4 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double5 = MathUtils.scalb((-783), (-404));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = MathUtils.indicator(552);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 552;
      doubleArray0[2] = (double) 552;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 552;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 552;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(1.0, 1223.649);
      int int1 = MathUtils.hash((-0.49999999999999994));
      double double1 = MathUtils.binomialCoefficientLog(552, 552);
      try { 
        MathUtils.pow(186L, (-4363));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (186^-4,363)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      long long0 = MathUtils.sign((-5034868814120038111L));
      int int0 = MathUtils.pow(0, 65);
      boolean boolean0 = MathUtils.equals((-2647.1817), (double) 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) (-5034868814120038111L);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1942.0);
      long long1 = MathUtils.indicator(5648769086999809661L);
      long long2 = MathUtils.pow((-5034868814120038111L), 0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = 121645100408832000L;
      long long1 = MathUtils.addAndCheck(121645100408832000L, 121645100408832000L);
      int int0 = (-1490);
      try { 
        MathUtils.pow(243290200817664000L, (-1490));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (243,290,200,817,664,000^-1,490)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-1153);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1153));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,153
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = MathUtils.sinh(50.01716459113);
      int[] intArray0 = new int[1];
      intArray0[0] = 2158;
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long0 = 0L;
      long long1 = MathUtils.pow((long) 2158, 0L);
      byte byte0 = MathUtils.indicator((byte)112);
      long long2 = MathUtils.mulAndCheck((long) (byte)1, (long) (byte)112);
      long long3 = MathUtils.pow(0L, (int) (byte)112);
      double double2 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 2158, 0.0);
      int int0 = MathUtils.pow(2158, (int) (byte)112);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double3 = MathUtils.scalb(0.0, (byte)1);
      int int1 = MathUtils.compareTo((-896.0), 2.637233517543113E21, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)112;
      doubleArray0[1] = (double) (byte)112;
      doubleArray0[2] = (double) (-1);
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(223.87, 1964.5, (-470.863885240911));
      float float0 = MathUtils.indicator((-1436.2134F));
      float float1 = MathUtils.round(0.0F, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1964.5;
      doubleArray0[1] = (double) 0.0F;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.sign((long) 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (1,964.5 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1850.455;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 120.3;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.factorial(0);
      long long1 = MathUtils.lcm((-7278142539171889152L), (-7278142539171889152L));
      boolean boolean1 = MathUtils.equals(1850.455, (-1649.264733013043));
      float float0 = MathUtils.indicator((float) 0);
      double double0 = MathUtils.scalb(1.0F, 0);
      byte byte0 = MathUtils.sign((byte)72);
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 487.21771257803, (-516.826));
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0, 781);
      int int0 = 19;
      long long0 = MathUtils.pow((long) 781, 19);
      long long1 = MathUtils.pow((long) 19, 19);
      int int1 = MathUtils.hash((-516.826));
      short short0 = (short)244;
      short short1 = MathUtils.indicator((short)244);
      double double0 = MathUtils.indicator((double) (short)244);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((short)1, 1305);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 1,305
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = MathUtils.hash(894.0);
      int int1 = MathUtils.indicator(1082912768);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1082912768;
      doubleArray0[2] = 894.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.cosh(1.082912768E9);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, Double.POSITIVE_INFINITY, (-3551));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(2443L, (-1386L));
      double double0 = MathUtils.cosh(2443L);
      double double1 = MathUtils.indicator(Double.NaN);
      double double2 = MathUtils.sinh((-1386L));
      double double3 = MathUtils.normalizeAngle(0.0, 0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 19);
      long long1 = MathUtils.pow(4294967295L, 19);
      double double4 = MathUtils.binomialCoefficientLog(150, 131);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (-1386L), (double) 150);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1386L);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double double5 = MathUtils.binomialCoefficientDouble(150, 131);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(556, (-4116));
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-4116), 556, 556);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = MathUtils.indicator((-3469));
      int int1 = MathUtils.hash(0.0);
      int int2 = MathUtils.sign(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2725.760086101753), 2922.71, 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1364.7845);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2429.311382273742));
      int int3 = 1030;
      int int4 = MathUtils.sign(1030);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = MathUtils.pow(3042, 1623);
      short short0 = MathUtils.sign((short)183);
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (int) (short)1, (int) (short)183);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 183, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 113;
      // Undeclared exception!
      try { 
        MathUtils.factorial(113);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float float0 = MathUtils.indicator(1.0F);
      long long0 = MathUtils.subAndCheck(1217L, 1217L);
      int int0 = MathUtils.sign(0);
      long long1 = MathUtils.pow(1307674368000L, 2345L);
      int int1 = MathUtils.addAndCheck(0, (-632));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 8;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 8);
      int int1 = 57;
      int int2 = MathUtils.gcd(57, 1224);
      double double0 = MathUtils.sinh(8);
      int int3 = 818;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(8, 818);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 8, k = 818
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = 2291L;
      int int0 = MathUtils.pow((-2968), 2291L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3377.3224), 2279.7395580514, (-3594.2741840161));
      long long1 = MathUtils.indicator(2291L);
      int int1 = MathUtils.indicator((-2968));
      double double0 = MathUtils.cosh(0.0);
      short short0 = MathUtils.sign((short)13);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1L, 179, 1150);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = MathUtils.pow(1741L, 13);
      int[] intArray0 = new int[2];
      intArray0[0] = 13;
      intArray0[1] = 13;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.log(1.125, 198.9776741648);
      boolean boolean0 = MathUtils.equals((double) 5739072903407178173L, 1.125);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 198.9776741648;
      doubleArray0[2] = 198.9776741648;
      doubleArray0[3] = 44.94019532444613;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = (double) 5739072903407178173L;
      doubleArray0[6] = 1.125;
      doubleArray0[7] = (double) 13;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 198.978)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 828;
      // Undeclared exception!
      try { 
        MathUtils.factorial(828);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1162.8342505);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1162.8342505);
      doubleArray1[1] = (-1162.8342505);
      doubleArray1[2] = 615.69595938;
      doubleArray1[3] = (-1162.8342505);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      int int0 = 0;
      double double0 = MathUtils.round(615.69595938, 0, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("vLfvJ5/@`");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.vLfvJ5/@`
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1204.452514);
      doubleArray0[1] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(0L, 0L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1948.113264918759, (double) 0L, 200.0);
      double double1 = MathUtils.cosh(13.0);
      double double2 = MathUtils.sinh(0.19999954104423523);
      double double3 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.signum();
      int int1 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.nextProbablePrime();
      BigInteger bigInteger3 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger4 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger5 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 6402373705728000L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 6402373705728000L, 3419.2137622501386, 0.0);
      int int2 = MathUtils.sign(1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = (-3213);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (-3213), (-3213));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = (-1082);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1082));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,082
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = (-2627);
      int int1 = 1673;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2627), 1673);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,627, k = 1,673
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 1.225743062930824E-8;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 10.0;
      doubleArray1[1] = 10.0;
      doubleArray1[2] = 1.225743062930824E-8;
      doubleArray1[3] = 10.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      int int0 = MathUtils.gcd(202, 2499);
      int[] intArray0 = new int[6];
      intArray0[0] = 202;
      intArray0[1] = 202;
      intArray0[2] = 2499;
      intArray0[3] = 1;
      intArray0[4] = 2499;
      intArray0[5] = 2499;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = 403.2840735235;
      boolean boolean0 = MathUtils.equalsIncludingNaN(403.2840735235, 1328.6, 1485);
      long long0 = MathUtils.factorial(0);
      long long1 = 1182L;
      long long2 = MathUtils.subAndCheck((long) 1485, 1182L);
      long long3 = MathUtils.indicator(1182L);
      float float0 = MathUtils.round((float) 1182L, 677);
      float float1 = MathUtils.round(Float.NaN, 677);
      double double1 = (-1731.551894385614);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1731.551894385614), (-1310.183154539));
      int int0 = MathUtils.subAndCheck(246, 677);
      try { 
        MathUtils.pow(2471, (long) (-431));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,471^-431)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-135), (-135));
      double double0 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = MathUtils.scalb(624.4, (-1462));
      long long0 = MathUtils.subAndCheck((-1509L), (-1509L));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0L, (-1222.4471), (-1462));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-671L), 2262L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1589.7424, (double) (-671L), 3190);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 450.0060986057539;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      long long0 = MathUtils.addAndCheck((long) (byte)0, (long) (byte)0);
      short short0 = MathUtils.indicator((short) (byte)0);
      int int0 = MathUtils.hash(450.0060986057539);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1633.169), 0.0, 1874);
      int int1 = (-1762);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1163516894), (-1762));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,163,516,894, k = -1,762
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(732L, 732L);
      int int0 = MathUtils.indicator(0);
      long long1 = MathUtils.pow((-732L), 0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-129);
      intArray0[1] = 366;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1272.3666896233901);
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.sign(1825.9425541);
      int int1 = 0;
      float float0 = MathUtils.round((float) (-1108348499), 0, 0);
      double double1 = MathUtils.sign((double) 0);
      try { 
        MathUtils.pow((-1108348499), (-1108348499));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,108,348,499^-1,108,348,499)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(2541);
      int[] intArray0 = new int[3];
      intArray0[0] = 2541;
      intArray0[1] = 2541;
      intArray0[2] = 2541;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-53);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.and(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 729);
      long long1 = MathUtils.mulAndCheck((long) 0, (long) (byte)4);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 2541);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 2,541
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = 832.92906;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (short)0;
      int int0 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = MathUtils.sign(14.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 14.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.sign(0.0);
      long long0 = (-2528L);
      long long1 = MathUtils.lcm((-2528L), (-2528L));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-331));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -331
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = MathUtils.sinh((-1.0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-646.0);
      doubleArray0[3] = 1197.631;
      doubleArray0[4] = 3583.8323893;
      doubleArray0[5] = 7.838106;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short) (-556));
      float float0 = MathUtils.round((float) (short) (-556), (int) (short) (-1));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = MathUtils.hash((-280.0));
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.indicator(0.0);
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.hash(doubleArray0);
      try { 
        MathUtils.pow((-1066303488), (-1066303488));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,066,303,488^-1,066,303,488)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)9);
      double double0 = MathUtils.sign((-199.522218798));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      float float0 = MathUtils.round((-797.0F), 0, 0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0, (double) (-798.0F), (-788));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int[] intArray0 = new int[1];
      intArray0[0] = 1583;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.cosh(0.0);
      int int1 = MathUtils.lcm(1583, 1583);
      int int2 = MathUtils.sign((-1));
      short short0 = MathUtils.indicator((short)246);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.flipBit(208);
      BigInteger bigInteger2 = bigInteger1.or(bigInteger0);
      BigInteger bigInteger3 = bigInteger1.shiftLeft(208);
      BigInteger bigInteger4 = bigInteger0.andNot(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 0);
      float float0 = MathUtils.sign(0.0F);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 1.304E19, (double) 0.0F);
      double double0 = MathUtils.indicator((double) 208);
      long long0 = MathUtils.indicator((-2012L));
      int int0 = MathUtils.addAndCheck(208, 208);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-2673), (-1621));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,673, k = -1,621
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte)17;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-1735));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (21,687,484,744,370,193^-1,735)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = bigInteger0.intValueExact();
      BigInteger bigInteger1 = BigInteger.ZERO;
      String string0 = bigInteger0.toString(52);
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.mulAndCheck((long) (byte)0, (long) (byte)0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = MathUtils.sign((-851));
      double double0 = MathUtils.cosh(767.72541);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-851), 594);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -851, k = 594
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = 835.14775;
      double double1 = MathUtils.log(835.14775, 205.40788976108016);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = 0;
      int int1 = MathUtils.pow(0, (long) 0);
      int int2 = MathUtils.gcd(1, 1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathUtils.round((-1088.14538460795), 104);
      double double1 = MathUtils.round(0.0, (-2074));
      long long0 = MathUtils.indicator(0L);
      int int0 = MathUtils.pow(294, 1L);
      int int1 = MathUtils.addAndCheck(294, 104);
      long long1 = MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-960.22607342), 0.0, 634.22678);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.pow(0, 0);
      long long0 = MathUtils.binomialCoefficient(1, (-1321));
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1L, 0, (-1321));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      float float0 = MathUtils.sign(Float.NaN);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)10;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      long long0 = bigInteger0.longValue();
      BigInteger bigInteger1 = bigInteger0.shiftRight(1285);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      int int1 = MathUtils.compareTo(0, (byte)17, -0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float1 = MathUtils.round((float) (byte)17, (-555));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float float0 = MathUtils.sign(2002.679F);
      byte byte0 = MathUtils.indicator((byte)9);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(327, 0);
      float float0 = MathUtils.round((float) 1L, (-1791));
      long long1 = MathUtils.mulAndCheck(1L, 1L);
      boolean boolean0 = MathUtils.equals(483.9635204, (double) (-1791), 327);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1791);
      doubleArray0[1] = 483.9635204;
      doubleArray0[2] = (double) 327;
      doubleArray0[3] = (double) 0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(1801.616F, 965, 965);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 965, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(815, 19);
      int int1 = MathUtils.compareTo(19, 815, 6.283185307179586);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 815;
      doubleArray0[2] = (-745.4718001);
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1982.363916897371;
      doubleArray0[1] = 1205.533583;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = 2133.0;
      doubleArray0[4] = 5563981.301319517;
      doubleArray0[5] = (-119.0370251185);
      doubleArray0[6] = (-1002.0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1088.2571512476704);
      double double0 = MathUtils.binomialCoefficientLog(467, 8);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 769.9;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 622.5;
      doubleArray0[3] = (-2160.977691);
      doubleArray0[4] = 2027.5701;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.3333333333332802;
      doubleArray0[7] = (-1248.6270854);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-628.94371065935);
      doubleArray0[1] = (-429.2735253057949);
      double double0 = 5274.367;
      doubleArray0[2] = 5274.367;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3.141592653589793;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.indicator(88);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      int int1 = MathUtils.sign(111);
      int int2 = MathUtils.mulAndCheck(111, 111);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double2 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (5,274.367 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = MathUtils.lcm(1468, 0);
      double double0 = MathUtils.log(0, 0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equals((double) 0, 2.404307984052299E-9);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2427.73929;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 2.404307984052299E-9;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = 2.404307984052299E-9;
      int int1 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.binomialCoefficient(133, 0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-3);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = bigInteger0.bitCount();
      byte[] byteArray1 = bigInteger0.toByteArray();
      try { 
        MathUtils.pow(bigInteger0, (long) (byte) (-36));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (203,255,896,146,173^-36)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(1976);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1976, 0.0, 2133);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 2133, (double) 1976);
      boolean boolean2 = MathUtils.equals(385.55571886, (double) 1976, (double) 2133);
      double double1 = MathUtils.factorialLog(228);
      long long0 = MathUtils.sign(2369L);
      boolean boolean3 = MathUtils.equals(1359.5097263, 0.0, Double.POSITIVE_INFINITY);
      double double2 = MathUtils.scalb(0.0, 1522);
      int int0 = MathUtils.pow(228, 228);
      short short0 = MathUtils.indicator((short)9);
      double double3 = MathUtils.round(2352.8713, 0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(171);
      int int0 = MathUtils.indicator(61);
      int int1 = MathUtils.addAndCheck((-221), 7);
      long long0 = MathUtils.sign((long) 171);
      long long1 = MathUtils.pow(0L, 0L);
      byte byte0 = MathUtils.indicator((byte)93);
      long long2 = MathUtils.lcm(1114L, (long) 7);
      int int2 = MathUtils.gcd((-1249), (int) (byte)93);
      int int3 = MathUtils.gcd(12, (-523));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.binomialCoefficient(233, (-2014));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.normalizeAngle(0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double2 = MathUtils.round(0.0, 67);
      int int1 = MathUtils.compareTo(3.141592653589793, 0.3333333333332802, Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-2644281811660520851L), 9223372036854775807L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double double0 = MathUtils.log(Double.POSITIVE_INFINITY, (-140.06899411339));
      byte byte0 = MathUtils.sign((byte)90);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)28;
      byteArray0[8] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) (byte)68);
  }
}
