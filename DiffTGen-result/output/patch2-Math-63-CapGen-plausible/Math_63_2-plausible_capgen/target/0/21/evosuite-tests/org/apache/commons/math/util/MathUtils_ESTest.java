/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:58:40 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.stream.LongStream;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[2];
      long long0 = MathUtils.pow((long) 33, (long) 33);
      intArray0[1] = 33;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.log(1290.2219011493, (-1147.60608268));
      short short0 = MathUtils.indicator((short) (-149));
      short short1 = MathUtils.indicator((short) (-149));
      short short2 = MathUtils.indicator((short) (-149));
      long long1 = MathUtils.pow((long) 0, 67);
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger1 = BigInteger.probablePrime(113, mockRandom0);
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      boolean boolean1 = MathUtils.equals(Double.POSITIVE_INFINITY, 396.8966473945183);
      double double1 = MathUtils.cosh(0);
      boolean boolean2 = MathUtils.equals((double) (short) (-1), 0.4342944622039795);
      short short3 = MathUtils.indicator((short)1);
      double double2 = MathUtils.binomialCoefficientLog(2115431653, 0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 12;
      int int0 = 0;
      intArray0[1] = 0;
      int int1 = 52;
      intArray0[2] = 52;
      int int2 = 760;
      intArray0[3] = 760;
      intArray0[4] = 61;
      intArray0[5] = (-2436);
      intArray0[6] = 3644;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.factorialDouble(0);
      long long0 = MathUtils.factorial(12);
      int int4 = 2;
      int int5 = MathUtils.gcd(2, (-303));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1328.1147474, 8.251545029714408E-9, 1623);
      double double0 = MathUtils.cosh(1623);
      int int0 = MathUtils.hash(0.0);
      double double1 = MathUtils.factorialLog(583);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.gcd(0, (-568));
      int int2 = MathUtils.addAndCheck(583, 1623);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2206;
      doubleArray0[1] = (double) 1623;
      doubleArray0[2] = 8.251545029714408E-9;
      doubleArray0[3] = (double) 1623;
      doubleArray0[4] = (double) (-568);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 568;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      double double2 = MathUtils.binomialCoefficientLog(2206, 1623);
      int int3 = MathUtils.gcd((-353), (-353));
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 3.834E-20, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = 2918L;
      long long1 = MathUtils.mulAndCheck(2918L, 2918L);
      byte byte0 = MathUtils.sign((byte)0);
      int int0 = MathUtils.addAndCheck(0, (int) (byte)0);
      float float0 = MathUtils.sign((float) (byte)0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 0.0F;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long2 = MathUtils.lcm((long) (byte)0, 8514724L);
      int int1 = MathUtils.pow(11, 8514724L);
      int int2 = MathUtils.mulAndCheck(4194304, 0);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.087, 1193.500622, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(6402373705728000L, 6402373705728000L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 121645100408832000L);
      long long1 = MathUtils.pow((-7278142539171889152L), 0);
      double double0 = MathUtils.sign((double) (-121645100408832000L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3507.795333), 6.283185307179586, (-1468.087));
      short short0 = MathUtils.indicator((short)0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (-1468.087);
      doubleArray0[3] = (-1468.087);
      doubleArray0[4] = (double) 0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((-1714.7373F), 3, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[1] = 60;
      intArray0[2] = 3;
      intArray0[3] = 152;
      intArray0[4] = (int) (short)1;
      intArray0[5] = (-846);
      intArray0[6] = (int) (short)0;
      intArray0[7] = 3;
      intArray0[8] = (int) (short)0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, (-4098));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-4098);
      doubleArray0[1] = (double) 0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd(3767L, 0L);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      short short0 = (short) (-1456);
      short short1 = MathUtils.indicator((short) (-1456));
      double double2 = MathUtils.factorialDouble(586);
      boolean boolean0 = MathUtils.equals(0.125, Double.POSITIVE_INFINITY, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 0, 0, (int) (short) (-1456));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      int int1 = MathUtils.hash(3013.0645093);
      int int2 = MathUtils.mulAndCheck(0, 0);
      byte byte0 = MathUtils.sign((byte)26);
      long long0 = MathUtils.binomialCoefficient(900, (byte)1);
      int int3 = MathUtils.pow(0, 3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)69;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 3123L);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = 765;
      int int1 = MathUtils.mulAndCheck(765, 765);
      long long0 = MathUtils.mulAndCheck((long) 765, (long) 765);
      // Undeclared exception!
      MathUtils.factorialDouble(585225);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(339, 339);
      double double1 = MathUtils.sign(1.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte byte0 = MathUtils.indicator((byte)13);
      long long0 = MathUtils.addAndCheck((long) (byte)1, (long) (byte)13);
      boolean boolean0 = MathUtils.equals(Double.NaN, (double) 339, (double) (byte)13);
      int int0 = MathUtils.gcd(246, 339);
      double double2 = MathUtils.sign(2481.97288657357);
      boolean boolean1 = MathUtils.equals((double) (byte)13, 1060.750271320024, 66);
      long long1 = MathUtils.gcd(1349L, 20922789888000L);
      float float0 = MathUtils.sign(340.95773F);
      byte byte1 = MathUtils.indicator((byte)48);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-575.52515827);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 961.975726;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2079.75);
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equals((-575.52515827), (-644.0), 512.8157790167046);
      long long0 = MathUtils.indicator(1L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-662.821443));
      int[] intArray0 = new int[6];
      intArray0[0] = (-3916);
      intArray0[1] = (-5478);
      intArray0[2] = 31;
      intArray0[3] = 0;
      intArray0[4] = 193;
      intArray0[5] = 11;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1392.82, 1392.82);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1392.82, 1392.82);
      int int0 = MathUtils.gcd(530, 530);
      long long0 = MathUtils.pow(0L, 530);
      int int1 = MathUtils.addAndCheck(530, 0);
      int int2 = MathUtils.lcm(3643, 530);
      float float0 = MathUtils.sign(481.0793F);
      double double0 = MathUtils.sinh(1930790);
      double double1 = MathUtils.scalb(0.0, (-2090));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = 573.2892560790357;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1930790;
      doubleArray0[4] = (double) 530;
      int int3 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1930790, 1690);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = MathUtils.round((-1769.0), 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1769.0);
      doubleArray0[2] = (-1769.0);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-1769.0);
      doubleArray0[5] = (double) 0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.factorial(0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.hash((double) 1);
      double double0 = MathUtils.factorialLog(21);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2326.8291457137434), (-2326.8291457137434), (double) 21);
      int int2 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 21;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1072693248;
      intArray0[5] = 1072693248;
      intArray0[6] = (-4839);
      intArray0[7] = 21;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(0, 0);
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 368.92);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      double double1 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.sign((float) 1);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int2 = bigInteger0.intValueExact();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.valueOf(6L);
      int int3 = bigInteger0.signum();
      boolean boolean1 = bigInteger1.testBit(10);
      boolean boolean2 = bigInteger0.isProbablePrime(1);
      // Undeclared exception!
      try { 
        bigInteger1.modInverse(bigInteger2);
      } catch(ArithmeticException e) {
         //
         // BigInteger not invertible.
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.factorial(0);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 1469L);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      double double1 = MathUtils.binomialCoefficientDouble(1014, 0);
      double double2 = MathUtils.scalb((-521.29384767), 0);
      double double3 = MathUtils.normalizeAngle((-521.29384767), (-521.29384767));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-521.29384767);
      doubleArray0[1] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm(0L, (long) 1014);
      boolean boolean1 = MathUtils.equals((-521.29384767), (-1382.37682561086));
      int int0 = MathUtils.hash((double) 0);
      double double4 = MathUtils.round((-521.29384767), (-1868), 0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = 556L;
      long long1 = (-7278142539171889152L);
      // Undeclared exception!
      try { 
        MathUtils.lcm(556L, (-7278142539171889152L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((double) 0, (double) 0);
      int int1 = 4194304;
      float float0 = MathUtils.round((float) 0, 4194304);
      long long0 = 6L;
      long long1 = MathUtils.subAndCheck(6L, 4208363204685324176L);
      float float1 = MathUtils.indicator((-526.932F));
      double double0 = MathUtils.binomialCoefficientDouble(4194304, 0);
      long long2 = MathUtils.binomialCoefficient(4194304, 0);
      double double1 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-1879);
      intArray0[0] = (-1879);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double double2 = MathUtils.normalizeAngle((-218.2979518164844), (-1879));
      long long0 = MathUtils.mulAndCheck((long) (-1879), (long) (-1879));
      int int1 = 221;
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-1879), (-1879), 221);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 221, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float float0 = MathUtils.round(54.7F, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = MathUtils.scalb((-1.0), (-2816));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-2816);
      doubleArray0[2] = 1912.81623127629;
      double double1 = (-3053.1746400273655);
      doubleArray0[3] = (-3053.1746400273655);
      doubleArray0[4] = (-6.441148769597133E-232);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (double) (-2816);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-2,816 <= 1,912.816)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 361;
      double double0 = MathUtils.round(Double.POSITIVE_INFINITY, 1800, 361);
      long long0 = (-2870L);
      long long1 = MathUtils.mulAndCheck((-2870L), (long) 1800);
      int int1 = MathUtils.pow(63, 88);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long2 = MathUtils.sign((-5166000L));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 361;
      doubleArray0[1] = (-496.535);
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) (-2870L);
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = (double) 1800;
      doubleArray0[6] = (double) 1078929921;
      doubleArray0[7] = (double) 1078929921;
      doubleArray0[8] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, (double) 1078929921, 1800);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (361 >= -496.535)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      byte byte1 = MathUtils.indicator((byte)27);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.indicator((int) (byte)27);
      double double0 = MathUtils.log((-1317.3), 0.1538461446762085);
      float float0 = MathUtils.round((float) (byte)1, 1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)1;
      MathUtils.checkOrder(doubleArray0);
      int int1 = MathUtils.sign(1);
      long long0 = MathUtils.sign(2147483647L);
      int int2 = MathUtils.compareTo(0.0, 2695.07, 2025.7635083);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-195.7085);
      doubleArray0[1] = 1.625;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1045.1);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-77.3319674072194);
      doubleArray0[6] = 6.283185307179586;
      doubleArray0[7] = (-1180.3);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(121645100408832000L, 121645100408832000L);
      long long1 = MathUtils.mulAndCheck(2548L, 0L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-682.9413137429));
      double double0 = MathUtils.scalb(1.2393345855018391E-8, (-506));
      double double1 = MathUtils.cosh(Double.NEGATIVE_INFINITY);
      byte byte0 = MathUtils.indicator((byte) (-32));
      int int0 = MathUtils.mulAndCheck((int) (byte) (-32), 61);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (0.446 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      int int0 = bigInteger1.intValueExact();
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger1.or(bigInteger2);
      BigInteger bigInteger4 = bigInteger1.modPow(bigInteger0, bigInteger2);
      BigInteger bigInteger5 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger6 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.sign(3952090531849364496L);
      long long1 = MathUtils.lcm(1L, 1L);
      double double0 = MathUtils.sign(0.0);
      double double1 = MathUtils.log(1L, 1293.0981071127);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1293.0981071127;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 3952090531849364496L;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 3952090531849364496L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 10.0);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 10.0;
      doubleArray2[1] = 1293.0981071127;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = 10.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (double) 1;
      doubleArray2[8] = (double) 3952090531849364496L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      double double0 = MathUtils.binomialCoefficientDouble(66, (-930));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      short short0 = (short)2399;
      short short1 = MathUtils.sign((short)2399);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)2399;
      int int0 = (-1493);
      intArray0[2] = (-1493);
      int[] intArray1 = new int[1];
      intArray1[0] = (-1493);
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)5);
      short short0 = MathUtils.indicator((short) (-426));
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = MathUtils.gcd(218, 218);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0L, (int) (byte)5, (int) (short) (-426));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -426, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = MathUtils.gcd(1784L, 1784L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2183L);
      float float0 = MathUtils.round(0.0F, 0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = MathUtils.gcd(4503599627370496L, (-3512299194304650054L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = MathUtils.gcd(0, (-35));
      double double0 = MathUtils.normalizeAngle(35, 637.963741);
      double double1 = MathUtils.round((double) 0, 35);
      float float0 = MathUtils.round(1.0F, 0, 0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      int int0 = MathUtils.pow(0, 15);
      int int1 = MathUtils.gcd((-488), 0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = MathUtils.pow(302L, 302L);
      double double0 = MathUtils.sinh(0L);
      int int0 = 1030;
      // Undeclared exception!
      try { 
        MathUtils.round((-2357.430273983), (-137), 1030);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      long long0 = MathUtils.sign(39916800L);
      double double0 = MathUtils.sinh(0.08713622391223907);
      long long1 = MathUtils.mulAndCheck(39916800L, 4095L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("2p]#p/Wr&d|{~8fX1");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.2p]#p/Wr&d|{~8fX1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1.304E19, Double.NaN, Double.NaN);
      int int0 = 1025;
      long long0 = MathUtils.binomialCoefficient(1025, 1025);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1025;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (1 < 1,025)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      double double0 = 2.2250738585072014E-308;
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.subAndCheck(2026L, 2026L);
      double double1 = MathUtils.binomialCoefficientDouble(1030, 1030);
      int int0 = MathUtils.addAndCheck((-2720), 1030);
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.subAndCheck(222, (-1690));
      double double3 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.indicator((float) 222);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (-1924.0), (double) 0L);
      int int2 = MathUtils.subAndCheck(756, 3549);
      double double4 = MathUtils.safeNorm(doubleArray0);
      double double5 = MathUtils.indicator(Double.POSITIVE_INFINITY);
      double double6 = MathUtils.factorialDouble(1030);
      int int3 = 640;
      // Undeclared exception!
      try { 
        MathUtils.round((float) 2026L, (-1666), 640);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 640, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float float0 = MathUtils.indicator(3072.8123F);
      double double0 = MathUtils.factorialLog(173);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 722.0155118736014;
      doubleArray0[1] = (double) 3072.8123F;
      doubleArray0[2] = 722.0155118736014;
      doubleArray0[3] = 722.0155118736014;
      doubleArray0[4] = (double) 173;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = (double) 173;
      doubleArray0[7] = 722.0155118736014;
      doubleArray0[8] = (double) 173;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, doubleArray0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3816);
      intArray0[1] = 204;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.pow((-210L), 452L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 204;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) (-3816);
      doubleArray0[4] = (double) (-3816);
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 452L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (204 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = MathUtils.log(0.5, (-26.0479234874737));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.log(649.405451257, 0.0);
      boolean boolean0 = MathUtils.equals(Double.NaN, 0.0, 3.834E-20);
      long long0 = MathUtils.indicator(2L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = (-4014);
      int int1 = 354;
      int int2 = MathUtils.pow((-4014), 354);
      int int3 = (-1143);
      try { 
        MathUtils.pow((-1143), (long) (-1143));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,143^-1,143)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = null;
      try { 
        MathUtils.pow((-2112846813), (long) (-2112846813));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,112,846,813^-2,112,846,813)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 368;
      intArray0[1] = 364;
      intArray0[2] = 39;
      intArray0[3] = 1030;
      intArray0[4] = 1013;
      intArray0[5] = 351;
      intArray0[6] = 222;
      intArray0[7] = (-3075);
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.indicator((-2174));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 39, (double) 351, 465.971);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 368;
      doubleArray0[1] = (double) 1013;
      doubleArray0[2] = (double) 364;
      doubleArray0[3] = (double) 364;
      doubleArray0[4] = (double) (-3075);
      doubleArray0[5] = (double) (-3075);
      doubleArray0[6] = (double) 39;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,013 >= 364)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-9218868437227405313L), 0L);
      long long1 = MathUtils.pow(34L, 2147483648L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN((-4302.39746165), (double) (-9218868437227405313L), 0.0);
      long long2 = MathUtils.indicator(0L);
      int int0 = (-1015);
      int int1 = MathUtils.sign((-1015));
      int int2 = (-1305);
      double double0 = MathUtils.binomialCoefficientLog(8, (-1305));
      long long3 = MathUtils.addAndCheck(0L, 0L);
      double double1 = MathUtils.sign((double) 0L);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1305));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,305
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.scalb(865.0976, 780);
      boolean boolean0 = MathUtils.equals(865.0976, 3.145894820876798E-6);
      int int0 = MathUtils.hash((double[]) null);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double1 = MathUtils.normalizeAngle(0.0, 0.0);
      long long0 = MathUtils.subAndCheck((-4582L), (-467L));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      long long1 = MathUtils.lcm(0L, (-633L));
      long long2 = MathUtils.addAndCheck((-633L), (-3183605296591799669L));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-2281), (-2281));
      long long0 = MathUtils.subAndCheck((-4213L), (long) (-4562));
      int int1 = MathUtils.indicator(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-2281), 1354.686, 1);
      int int2 = MathUtils.hash(0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-4213L);
      doubleArray0[3] = (double) 349L;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) (-4562);
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float float0 = MathUtils.indicator((-2460.0F));
      long long0 = MathUtils.gcd(0L, (-314L));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 0.0;
      double double0 = (-2462.0);
      doubleArray0[4] = (-2462.0);
      doubleArray0[5] = (-2968.882);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (3.142 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = MathUtils.sign((-1.0F));
      long long0 = MathUtils.indicator((-63L));
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.304E19, (-363.899995398688), 1333);
      long long1 = MathUtils.mulAndCheck((-1L), (long) 1333);
      double double0 = MathUtils.indicator((double) (-63L));
      int int0 = MathUtils.mulAndCheck(4194304, 150);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3327.4369006), 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = (-200L);
      long long1 = MathUtils.pow((-200L), 0L);
      double double0 = 820.77664421923;
      boolean boolean0 = MathUtils.equalsIncludingNaN((-327.3300596), 820.77664421923);
      int int0 = 0;
      double double1 = MathUtils.binomialCoefficientLog(0, (-3686));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 3977.3479640387486;
      doubleArray0[3] = (double) (-200L);
      double double2 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1707.23959;
      doubleArray0[1] = (-3724.674121384);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.2393345855018391E-8;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 200.2834;
      doubleArray0[8] = (-989.98693112);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.subAndCheck((-924L), 3326L);
      long long1 = MathUtils.subAndCheck((-1859L), (-1369L));
      int int0 = MathUtils.indicator(1741);
      boolean boolean0 = MathUtils.equals(3.141592653589793, 1707.23959, 2557);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      long long0 = MathUtils.sign(0L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = 646;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 646, 646);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        MathUtils.pow(2766, (-719));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,766^-719)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      double double0 = MathUtils.normalizeAngle(777.5, (-1851.994));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 777.5;
      doubleArray0[1] = 4.503599627370496E15;
      doubleArray0[2] = (-1848.8714584010672);
      doubleArray0[3] = (-1848.8714584010672);
      doubleArray0[4] = 777.5;
      doubleArray0[5] = (-1848.8714584010672);
      doubleArray0[6] = 777.5;
      doubleArray0[7] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (4,503,599,627,370,496 > -1,848.871)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 4291, 2416);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = (-3641.00588858088);
      int int0 = (-347);
      // Undeclared exception!
      try { 
        MathUtils.equals((-3641.00588858088), (-3641.00588858088), (-347));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 9;
      int int1 = MathUtils.pow(9, (long) 9);
      float float0 = MathUtils.indicator((-1970.805F));
      // Undeclared exception!
      try { 
        MathUtils.factorial(387420489);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3039.5573931173);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-3039.5573931173);
      doubleArray1[1] = (-3039.5573931173);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      double double0 = MathUtils.normalizeAngle((-2658.499845113434), 0.031);
      int int0 = (-871);
      int int1 = MathUtils.addAndCheck((-871), (-871));
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray1, 0.0);
      int int2 = 0;
      double double1 = MathUtils.factorialDouble(0);
      try { 
        MathUtils.pow((long) 0, (long) (-871));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-871)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = MathUtils.lcm(0, (-77));
      // Undeclared exception!
      try { 
        MathUtils.round((double) 0, (-481), (-481));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = MathUtils.factorialLog(201);
      int[] intArray0 = new int[4];
      intArray0[0] = 201;
      intArray0[1] = 201;
      intArray0[2] = 201;
      intArray0[3] = 201;
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.indicator(201);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 868.5352921004645;
      doubleArray0[2] = 6.283185307179586;
      int int1 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.gcd((-1L), (-1015L));
      double double2 = MathUtils.log(0.0, 0.0);
      float float0 = MathUtils.indicator((float) (-1015L));
      long long1 = MathUtils.pow(20922789888000L, 201);
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double4 = MathUtils.sign(1.304E19);
      int int2 = MathUtils.hash((-5524.3923143947));
      double double5 = MathUtils.indicator(Double.NaN);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long2 = MathUtils.pow((long) 201, 989L);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)45;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-2231L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-264,023,048,147^-2,231)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 0;
      double double1 = MathUtils.round(0.0, 0);
      boolean boolean0 = MathUtils.equals(2833.73153109, (double) 0);
      short short0 = MathUtils.sign((short)924);
      int int1 = 92;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(92, (short)924);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 92, k = 924
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 4);
      long long0 = MathUtils.gcd((long) 4, (-905L));
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean1 = MathUtils.equals((double) (-905L), 9.0);
      long long1 = MathUtils.mulAndCheck((-4743L), 0L);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, Double.NEGATIVE_INFINITY, 188);
      double double0 = MathUtils.binomialCoefficientLog(1076, 1076);
      double double1 = MathUtils.normalizeAngle(6.283185307179586, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(1072);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      // Undeclared exception!
      try { 
        MathUtils.factorial(1072);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = MathUtils.factorial(13);
      int int0 = MathUtils.compareTo(0.0, 2.0, 13);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 133;
      int int1 = (-1075);
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 133, (-1075));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,075, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      short short0 = (short) (-2654);
      short short1 = MathUtils.sign((short) (-2654));
      long long0 = (-743L);
      long long1 = 931L;
      long long2 = MathUtils.mulAndCheck((-743L), 931L);
      int int0 = MathUtils.pow((int) (short) (-1), 582L);
      double double0 = MathUtils.indicator(0.0);
      double double1 = 0.0;
      double double2 = MathUtils.indicator(0.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((short) (-1), (short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      int int0 = MathUtils.sign(0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1614.943242728);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 8.251545029714408E-9;
      doubleArray0[4] = (double) 0;
      int int1 = MathUtils.hash(doubleArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)66;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2420.37363, 2420.37363);
      int int0 = MathUtils.hash((-577.3292067206128));
      int int1 = 1797;
      long long0 = MathUtils.binomialCoefficient(1797, (-140501092));
      // Undeclared exception!
      try { 
        MathUtils.round(611.992F, 1797, 205);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 205, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(0L, 6402373705728000L);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, (-5432.720694069762));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = 0.01745329052209854;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.01745329052209854);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 86;
      intArray0[2] = 0;
      intArray0[3] = 1737;
      intArray0[4] = (-2866);
      intArray0[5] = (-607);
      intArray0[6] = 0;
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = (-2866);
      intArray1[2] = 0;
      intArray1[3] = (-2866);
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 86;
      intArray1[7] = 1737;
      int int0 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1024;
      intArray0[1] = 1025;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.sign((long) 1025);
      int int1 = MathUtils.gcd(1025, 1024);
      int int2 = MathUtils.mulAndCheck(2145961689, 0);
      int[] intArray1 = new int[5];
      intArray1[0] = 1609;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 1024;
      intArray1[4] = 2145961689;
      int[] intArray2 = new int[3];
      intArray2[0] = 1024;
      intArray2[1] = 1025;
      intArray2[2] = 1609;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray1, intArray2);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(3184, 0);
      int int0 = MathUtils.mulAndCheck(0, 256);
      double double0 = MathUtils.binomialCoefficientDouble(42, 0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 3184;
      intArray0[2] = 3184;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 42;
      intArray0[6] = (-220);
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float float0 = MathUtils.sign((-2278.8032F));
      double double0 = MathUtils.binomialCoefficientDouble(870, 870);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1555.4781;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      short short0 = (short)1435;
      short short1 = MathUtils.indicator((short)1435);
      int int0 = (-1175);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1175));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,175
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-2850.5));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-4093));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,093
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0L);
      long long0 = MathUtils.pow(0L, 1);
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger0 = new BigInteger(0, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(1);
      LongStream longStream0 = mockRandom0.longs(0L);
      long long1 = (-1550L);
      try { 
        MathUtils.pow(bigInteger0, (-1550L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,550)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = MathUtils.hash(3649.06667);
      double double0 = (-1.0);
      double double1 = MathUtils.log(11.0, (-1.0));
      // Undeclared exception!
      try { 
        MathUtils.round((-365.742698442333), 1648195938);
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger3);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      int int0 = MathUtils.hash((double) (byte)51);
      long long0 = MathUtils.lcm((long) 1078558720, (long) (byte)51);
      float float0 = MathUtils.round(0.0F, 1078558720, 0);
      double double0 = MathUtils.normalizeAngle((-1097.0), (-1097.0));
      long long1 = MathUtils.pow(0L, 55006494720L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (byte)51;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 55006494720L;
      doubleArray0[8] = 0.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2595;
      intArray0[1] = 166;
      intArray0[2] = 5643;
      intArray0[3] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      byte byte0 = MathUtils.indicator((byte)3);
      short short0 = MathUtils.indicator((short) (-2095));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)3;
      doubleArray0[1] = (double) 5643;
      doubleArray0[2] = (-3283.19);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.cosh((-3283.19));
      byte byte1 = MathUtils.indicator((byte)20);
      long long0 = MathUtils.subAndCheck((long) 166, (long) (byte)1);
      int int1 = MathUtils.addAndCheck(18, 0);
      double double2 = MathUtils.factorialDouble(0);
      long long1 = MathUtils.pow(0L, 0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      long long0 = MathUtils.pow((long) 0, 121645100408832000L);
      long long1 = MathUtils.subAndCheck(3726L, 121645100408832000L);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, (-3979L));
      short short0 = MathUtils.indicator((short)155);
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.pow(0, 2935890503282001226L);
      long long1 = MathUtils.addAndCheck(2935890503282001226L, (long) (short)1);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 2935890503282001226L, (double) (short)155, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      long long0 = bigInteger0.longValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = bigInteger1.floatValue();
      BigInteger bigInteger2 = bigInteger1.subtract(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.add(bigInteger1);
      float float1 = MathUtils.indicator((float) 0L);
      BigInteger bigInteger4 = BigInteger.valueOf((-437L));
      int int0 = 67;
      BigInteger bigInteger5 = bigInteger0.nextProbablePrime();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger6 = BigInteger.probablePrime(67, mockRandom0);
      long long1 = MathUtils.pow(116L, 67);
      double double0 = MathUtils.cosh(0L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("a+a<}(Hl9K");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.a+a<}(Hl9K
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 63;
      float float0 = MathUtils.round(0.0F, 63);
      int int1 = 48;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 63, 48);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 48, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.sign((double) 0);
      boolean boolean0 = MathUtils.equals(0.0, (double) 0, 2594.29159);
      int int1 = 1533;
      long long0 = MathUtils.pow((long) 0, 1533);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-294.846214531);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      double double1 = MathUtils.factorialDouble(0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = MathUtils.sign((-928.8366104));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MIN_VALUE;
      intArray0[1] = 0;
      intArray0[2] = 2861;
      intArray0[3] = 2080;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.pow(40320L, 1450);
      int int1 = MathUtils.gcd((-1927), 2080);
      int int2 = MathUtils.sign(Integer.MIN_VALUE);
      float float0 = MathUtils.round((float) 2861, 157, 1);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-8);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 1450);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(654, 654);
      byte byte0 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1186.208987902858);
      doubleArray0[3] = (-1822.8);
      doubleArray0[4] = (-1536.621089);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-167.0);
      doubleArray0[7] = 1407.0261;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = (-2992);
      int int1 = 0;
      int int2 = MathUtils.mulAndCheck((-2992), 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-2992), (double) (-2992), 12);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2992), (-3470));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,992
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      boolean boolean1 = bigInteger0.equals(object0);
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-49);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigInteger bigInteger3 = bigInteger0.modPow(bigInteger1, bigInteger2);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 9);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = (-1805);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1805));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,805
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 15;
      boolean boolean0 = MathUtils.equalsIncludingNaN(4.9E-324, 4.9E-324, 15);
      int int1 = (-1244);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 15, (-1244), 15);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = MathUtils.indicator(3484L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 3484L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 3484L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator(1611.4962F);
      int int0 = MathUtils.compareTo(3484.0, (-349.0), 3.145894820876798E-6);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long1 = MathUtils.binomialCoefficient(1, (-2841));
      double double2 = MathUtils.round((double) 1L, 1);
      long long2 = MathUtils.pow((-461L), 129);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = bigInteger1.multiply(bigInteger2);
      boolean boolean0 = bigInteger1.testBit(0);
      BigInteger bigInteger4 = bigInteger0.divide(bigInteger1);
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 1333);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 0, 1060);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,060, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-210.523), 62.0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-1903));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-4,059,648^-1,903)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-82));
      float float0 = MathUtils.sign((float) (byte) (-82));
      long long0 = MathUtils.sign(3563L);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte) (-82);
      intArray0[2] = (int) (byte) (-82);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = MathUtils.lcm(2563, 2563);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.1102230246251565E-16;
      doubleArray0[1] = (double) 2563;
      doubleArray0[2] = (double) 2563;
      doubleArray0[3] = (double) 2563;
      doubleArray0[4] = (-1851.3);
      doubleArray0[5] = (double) 2563;
      doubleArray0[6] = (double) 2563;
      doubleArray0[7] = (double) 2563;
      doubleArray0[8] = (double) 2563;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-451.666186);
      doubleArray0[1] = (-715.9987794638);
      doubleArray0[2] = (-1807.09836867);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2078.48765);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
      long long0 = MathUtils.pow(534L, 534L);
      double double1 = MathUtils.cosh(0.0);
      int int0 = 2916;
      int int1 = MathUtils.indicator(2916);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 534L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 278L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 278L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      int int2 = MathUtils.sign(1);
      boolean boolean1 = MathUtils.equals((double) 1, 0.0, (-589.8375));
      int int3 = MathUtils.subAndCheck(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(2501.311179, 1.1102230246251565E-16, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(6, 6);
      int int0 = MathUtils.indicator(0);
      long long0 = MathUtils.subAndCheck(0L, (-3438L));
      double double1 = MathUtils.round((double) 1, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 3438L;
      doubleArray0[3] = (double) 1;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2025.17);
      doubleArray0[1] = (-2360.0502842315);
      doubleArray0[2] = (-1681.2290522);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2.957007209750105E-8);
      doubleArray0[5] = 491.3153882579;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = MathUtils.indicator((-2034.2052413));
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = 1.304E19;
      // Undeclared exception!
      try { 
        MathUtils.equals(1.304E19, (-2034.2052413), (-2773));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float float0 = MathUtils.sign((-1666.57F));
      int int0 = MathUtils.hash((double) (-1.0F));
      float float1 = MathUtils.sign((-1666.57F));
      boolean boolean0 = MathUtils.equals((-1549.156037146714), (double) (-1.0F));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = (-1125);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1279.9923, (-4091.28655344), (-1125));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(2087, (-1323));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 764;
      doubleArray0[1] = (double) 2087;
      doubleArray0[2] = (double) 2087;
      doubleArray0[3] = (double) 764;
      doubleArray0[4] = (double) 764;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      long long0 = MathUtils.gcd(1458L, (long) (-1323));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 6444.395;
      doubleArray0[2] = (-612.5715);
      doubleArray0[3] = (-1013.7064449908935);
      try { 
        MathUtils.normalizeArray(doubleArray0, (-4193.0));
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-527.393246));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      float float0 = MathUtils.indicator((-1807.4114F));
      // Undeclared exception!
      try { 
        MathUtils.lcm(2286, 4194304);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1133.7), (-1133.7), (-1133.7));
      boolean boolean1 = MathUtils.equals((-1133.7), (-1133.7));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1133.7);
      doubleArray0[1] = (-1133.7);
      double double0 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,133.7 <= -1,133.7)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      short short0 = MathUtils.sign((short)2229);
      float float0 = MathUtils.indicator((float) (short)2229);
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(0, 0);
      int int2 = MathUtils.subAndCheck(1269, 2844);
      int int3 = MathUtils.hash((double) 1.0F);
      byte byte0 = (byte)95;
      byte byte1 = MathUtils.sign((byte)95);
      double double0 = MathUtils.sinh((-1575));
      double double1 = MathUtils.scalb(0, (short)1);
      long long0 = MathUtils.mulAndCheck((long) (short)1, 331L);
      float float1 = MathUtils.round(136.816F, (int) (short)1);
      double double2 = MathUtils.scalb(1269, 1090);
      try { 
        MathUtils.pow((-4246L), (-1575));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-4,246^-1,575)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = (-3265L);
      long long1 = MathUtils.pow((-3265L), 1460);
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.round(248.6753329, (int) (short)1);
      double double1 = MathUtils.round(248.6753329, (int) (short)0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-3027));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,027
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = MathUtils.indicator(1202.6823459);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ONE;
      BigInteger bigInteger4 = bigInteger0.abs();
      BigInteger bigInteger5 = bigInteger0.multiply(bigInteger3);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = MathUtils.sign(2541.4836F);
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0);
      double double0 = MathUtils.cosh(0.0F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1359L, 5040L);
      long long1 = 0L;
      long long2 = MathUtils.pow(1L, 0L);
      float float0 = MathUtils.indicator(937.0F);
      float float1 = MathUtils.indicator(763.46F);
      long long3 = MathUtils.sign(0L);
      int int0 = (-27);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-27));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -27
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = MathUtils.pow((-1498), 4095L);
      int int1 = MathUtils.indicator((-2305));
      byte byte0 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.log(0.167, (byte)1);
      long long0 = MathUtils.sign((long) (byte)0);
      int int2 = MathUtils.compareTo(0L, 2211.06954326145, 0.0);
      int int3 = MathUtils.pow(0, 159);
      int int4 = MathUtils.indicator((-1498));
      long long1 = MathUtils.subAndCheck((long) (-1), 4398046511103L);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-417.941844014), (-417.941844014));
      long long0 = MathUtils.mulAndCheck(5040L, 5040L);
      int int0 = 1100;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(74, 1100);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 74, k = 1,100
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(1307674368000L, 4208363204685324176L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = MathUtils.hash((-736.2666565074236));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.sign(3628800L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1435));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,435
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 39;
      int int1 = MathUtils.sign(39);
      long long0 = (-1282L);
      try { 
        MathUtils.pow((-1282L), (-1282L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,282^-1,282)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      try { 
        MathUtils.pow((-3113L), (-3113L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,113^-3,113)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 4194304;
      intArray0[1] = 207;
      intArray0[2] = 14;
      intArray0[3] = 3;
      intArray0[4] = 815;
      intArray0[5] = 1084;
      intArray0[6] = (-543);
      intArray0[7] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.cosh(2.2250738585072014E-308);
      double double2 = MathUtils.cosh((-3153.0));
      int int0 = MathUtils.lcm((-2578), 1084);
      float float0 = MathUtils.indicator((float) 14);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-543);
      int int1 = MathUtils.hash(doubleArray0);
      double double3 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(92.0283953902331, 0.0, 1.986821492305628E-8);
      int int0 = 277;
      double double0 = MathUtils.factorialDouble(277);
      long long0 = MathUtils.lcm((long) 277, 0L);
      double double1 = MathUtils.binomialCoefficientDouble(277, 277);
      double double2 = MathUtils.log(2441.2818, 92.0283953902331);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.pow(0L, 1385L);
      int int1 = 12;
      int int2 = (-4433);
      long long2 = MathUtils.binomialCoefficient(12, (-4433));
      double double3 = MathUtils.sinh((-2057.5811));
      long long3 = MathUtils.subAndCheck(0L, 0L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1031.85336488666);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int3 = MathUtils.sign(776);
      byte byte0 = MathUtils.indicator((byte) (-6));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (\u221E >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)110);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-642.41909680731), (-642.41909680731), (double) (byte)1);
      int int0 = MathUtils.subAndCheck((int) (byte)1, (int) (byte)1);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("@rOi:Hb\"8gDj4d");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.@rOi:Hb\"8gDj4d
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(18);
      int int0 = MathUtils.sign(18);
      int int1 = MathUtils.pow(1, 250);
      long long0 = MathUtils.indicator((long) 250);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = (-1924.3887182);
      int int0 = 13;
      double double1 = MathUtils.scalb((-1924.3887182), 13);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1.57645923794944E7), (double) 13);
      double double2 = (-2364.5579824);
      int int1 = 792;
      boolean boolean1 = MathUtils.equals((-2364.5579824), (-1924.3887182), 792);
      boolean boolean2 = MathUtils.equals((double) 792, (double) 792);
      String string0 = "U9\"H";
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("U9\"H");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.U9\"H
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.normalizeAngle(3037.48597868663, 0.087);
      int int0 = (-951);
      int int1 = (-259);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (-951), (-259));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(689.567192519, 6206.48339304152);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6206.203892222677;
      doubleArray0[1] = 689.567192519;
      doubleArray0[2] = 6206.203892222677;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = (-1094);
      int int1 = (-3808);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1094), (-3808));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,094
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 50;
      intArray0[1] = (-2741);
      intArray0[2] = 2767;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 160;
      intArray0[6] = 0;
      intArray0[7] = 1;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.gcd(0L, (long) 160);
      long long1 = MathUtils.mulAndCheck(160L, (-2424L));
      double double1 = MathUtils.indicator(0.5);
      double double2 = MathUtils.round((-1737.0741015021813), 0, 1);
      int int0 = MathUtils.pow(0, 0L);
      int int1 = MathUtils.sign((-2741));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 160L;
      doubleArray0[2] = (double) 160L;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1737.0741015021813);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = MathUtils.sign(43);
      int int1 = MathUtils.compareTo((-505.5696416618), (-505.5696416618), 43);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-505.5696416618);
      doubleArray0[4] = (double) 1;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int2 = MathUtils.gcd(1, (-3913));
      byte byte0 = MathUtils.sign((byte) (-68));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }
}
