/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:58:37 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      short short0 = MathUtils.sign((short)236);
      long long0 = MathUtils.gcd((-967L), (long) (short)236);
      boolean boolean0 = MathUtils.equals((double) 1L, (double) 1L);
      long long1 = MathUtils.pow((long) (short)1, 72);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.negate();
      BigInteger bigInteger2 = BigInteger.TEN;
      boolean boolean1 = bigInteger2.equals("$iZ*ZPHytz=sNo(Qqt");
      BigInteger bigInteger3 = bigInteger0.shiftLeft((short)236);
      BigInteger bigInteger4 = bigInteger0.subtract(bigInteger2);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 72);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      int int1 = MathUtils.lcm((-3944), (-3944));
      double double1 = MathUtils.binomialCoefficientLog(2146739028, (-3944));
      int int2 = MathUtils.addAndCheck(3944, (-3944));
      int int3 = MathUtils.hash(doubleArray0);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger2, 31);
      double double2 = MathUtils.factorialDouble(3944);
      // Undeclared exception!
      MathUtils.factorialLog(2146739028);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 302.04;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom(230);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)7;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger1);
      int int0 = mockRandom0.nextInt(230);
      BigInteger bigInteger2 = BigInteger.probablePrime(230, mockRandom0);
      long long0 = (-2379L);
      try { 
        MathUtils.pow(bigInteger0, (-2379L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,379)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = 0.0;
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
      float float0 = 1678.5713F;
      float float1 = MathUtils.round(1678.5713F, 66, 0);
      float float2 = MathUtils.round(3672.62F, 66);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals(433.953055, (-249.370099347392));
      int int1 = MathUtils.indicator(0);
      float float3 = MathUtils.indicator((-1.0F));
      int int2 = MathUtils.lcm(1, 0);
      int int3 = MathUtils.pow(103, (long) 103);
      int int4 = MathUtils.compareTo((-1.0), 1660.94112219229, 0);
      long long1 = MathUtils.sign(1307674368000L);
      int int5 = MathUtils.hash((double) 66);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 0.0, (-1));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float float0 = MathUtils.indicator(1118.9474F);
      int int0 = MathUtils.subAndCheck(0, 18);
      int[] intArray0 = new int[7];
      intArray0[0] = 61;
      intArray0[1] = (-18);
      intArray0[2] = 18;
      intArray0[3] = 18;
      intArray0[4] = 0;
      intArray0[5] = (-18);
      intArray0[6] = 18;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.factorialLog(0);
      double double1 = MathUtils.round(393.34898785, 0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-18);
      doubleArray0[1] = (double) 0;
      double double2 = 425.9;
      doubleArray0[2] = 425.9;
      doubleArray0[3] = (double) 18;
      doubleArray0[4] = 393.34898785;
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double4 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 2.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("d&*/<^\"4L0M`y");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.d&*_/<^\"4L0M`y
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.round((-2608.645F), 0);
      float float1 = MathUtils.round((-737.24F), 0, 0);
      double double0 = MathUtils.factorialLog(0);
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1100), (-2049));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,100
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = (-1236);
      float float0 = MathUtils.round((-1.0F), (-1236));
      long long0 = (-4075L);
      long long1 = MathUtils.gcd((long) (-1236), (-4075L));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (-4075L);
      doubleArray0[3] = (double) (-4075L);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1236);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (1 > -4,075)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float float0 = MathUtils.indicator((-1.0F));
      int[] intArray0 = new int[6];
      intArray0[0] = 219;
      intArray0[1] = 4200;
      intArray0[2] = (-2186);
      intArray0[3] = 63;
      intArray0[4] = 115;
      intArray0[5] = 1924;
      int[] intArray1 = new int[8];
      intArray1[0] = 2111;
      intArray1[1] = (-2186);
      intArray1[2] = 4200;
      intArray1[3] = 115;
      intArray1[4] = 4200;
      intArray1[5] = (-2186);
      intArray1[6] = 63;
      intArray1[7] = (-2186);
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
      float float1 = MathUtils.round((float) 1924, 115);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2111;
      doubleArray0[1] = (double) (-2186);
      doubleArray0[2] = (-1262.99);
      doubleArray0[3] = (double) (-2186);
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) 63;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.log(Double.POSITIVE_INFINITY, 0.0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 166;
      int int1 = MathUtils.pow(4586, 166);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 166;
      doubleArray0[2] = 599.99;
      doubleArray0[3] = (double) 4586;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not strictly increasing (4,586 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      long long0 = MathUtils.pow(4607182418800017408L, 834);
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = bigInteger0.toString();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 834;
      doubleArray0[3] = (double) 4607182418800017408L;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 4607182418800017408L;
      doubleArray0[7] = (double) 4607182418800017408L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.sign(834);
      float float1 = MathUtils.round((float) 0L, 834);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.33333333333333287);
      doubleArray0[1] = 180.907;
      doubleArray0[2] = 2645.17450282339;
      int int0 = MathUtils.hash(doubleArray0);
      short short0 = (short) (-3592);
      short short1 = MathUtils.sign((short) (-3592));
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.binomialCoefficient(13, 0);
      long long1 = MathUtils.binomialCoefficient(204, 0);
      int int0 = MathUtils.gcd((-38), 204);
      boolean boolean0 = MathUtils.equals(0.0, (double) 1L);
      double double1 = MathUtils.binomialCoefficientLog(1312, 0);
      short short0 = MathUtils.sign((short)2596);
      long long2 = MathUtils.subAndCheck((long) 1312, (long) 0);
      double double2 = MathUtils.sign((double) 1L);
      boolean boolean1 = MathUtils.equals(0.0, (double) 2, 3301.43760148);
      long long3 = MathUtils.addAndCheck(0L, 1609L);
      float float0 = MathUtils.indicator(2398.4326F);
      double double3 = MathUtils.sinh(1312L);
      short short1 = MathUtils.indicator((short)1);
      double double4 = MathUtils.sinh(0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
      int int1 = MathUtils.sign(0);
      float float1 = MathUtils.round((float) 0, (int) (short)1);
      double double5 = MathUtils.indicator(1.0);
      long long4 = MathUtils.mulAndCheck(0L, (-2030L));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      long long2 = MathUtils.addAndCheck(0L, 0L);
      double double1 = MathUtils.indicator(1.304E19);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, Double.NaN, 223);
      double double2 = MathUtils.indicator((double) 0L);
      long long3 = 810L;
      long long4 = MathUtils.gcd(810L, 0L);
      int int0 = 6;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 6);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = MathUtils.indicator(1057L);
      long long1 = MathUtils.pow(20922789888000L, 1270);
      double double0 = MathUtils.round((double) 1270, 1270);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 20922789888000L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 20922789888000L;
      doubleArray0[3] = (double) 20922789888000L;
      doubleArray0[4] = (double) 1057L;
      doubleArray0[5] = (double) 0L;
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(2300, 43);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2744.1464882055957, (double) 43);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      short short0 = (short)14;
      short short1 = MathUtils.sign((short)14);
      float float0 = MathUtils.indicator((float) (short)14);
      float float1 = MathUtils.sign((float) (short)1);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, 0.0, 3.141592653589793);
      int int0 = MathUtils.lcm((int) (short)14, (int) (short)1);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("Inexact result from rounding");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.Inexact result from rounding
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = -0.0;
      boolean boolean0 = MathUtils.equals(-0.0, (-1107.89961877));
      int int0 = 0;
      int int1 = (-1347);
      double double1 = MathUtils.binomialCoefficientLog(0, (-1347));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 92);
      int int0 = MathUtils.mulAndCheck(0, 92);
      float float0 = MathUtils.sign((float) 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      int int1 = MathUtils.pow(0, (long) 92);
      double double1 = MathUtils.sinh(0.0);
      double double2 = MathUtils.log(0.0, 3.141592653589793);
      float float1 = MathUtils.indicator((float) 0);
      double double3 = MathUtils.round(0.1428571343421936, (-4440));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 92;
      double double4 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow((long) 0, 40320L);
      double double5 = MathUtils.scalb(0.0, 4);
      double double6 = MathUtils.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.1428571343421936;
      doubleArray1[1] = (double) 40320L;
      doubleArray1[2] = (double) (-4440);
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 3.141592653589793;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 3.141592653589793;
      doubleArray1[8] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (40,320 >= -4,440)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = MathUtils.factorial(3);
      int int0 = MathUtils.mulAndCheck(157, 3);
      short short0 = MathUtils.sign((short)9);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-1056), (-1056));
      short short0 = MathUtils.sign((short) (-1454));
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      float float0 = MathUtils.round((float) (byte)0, (-2740));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (int) (short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-924);
      intArray0[1] = 217;
      intArray0[2] = (-2809);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.round((-2715.26039871724), 217);
      int int1 = MathUtils.lcm(31, 217);
      long long0 = MathUtils.pow(0L, 4607182418800017408L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 217;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 31;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 31);
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (-879));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-879)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = 0.5;
      int int0 = MathUtils.compareTo((-4.9E-324), 0.0, 0.5);
      long long0 = 0L;
      long long1 = (-1208L);
      try { 
        MathUtils.pow(0L, (-1208L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,208)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 7;
      int int1 = MathUtils.subAndCheck(7, 7);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-9223372036854775808L), (long) 7);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 235);
      double double1 = MathUtils.binomialCoefficientDouble(235, (-2745));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2745);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-2745);
      doubleArray0[3] = (double) 235;
      doubleArray0[4] = (double) (-2745);
      int int0 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.indicator((short) (-1924));
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck((long) 235, (long) (-2745));
      byte byte0 = MathUtils.sign((byte)86);
      boolean boolean1 = MathUtils.equals(1.0, (double) 235, (double) (short) (-1924));
      double double2 = MathUtils.cosh((-645075L));
      long long1 = MathUtils.indicator((-669L));
      double double3 = MathUtils.scalb(235, (byte)86);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      int int0 = MathUtils.lcm(0, 0);
      int int1 = MathUtils.sign(0);
      double double1 = MathUtils.factorialLog(0);
      int int2 = MathUtils.lcm(0, 2693);
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
      short short0 = MathUtils.indicator((short)0);
      int int3 = MathUtils.pow(0, 0);
      double double2 = MathUtils.sign(3.9736429850260626E-8);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, (-411.9623103308), 1.304E19);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (short)0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = (-2147483648L);
      long long1 = MathUtils.gcd((-2147483648L), 7910884519577875640L);
      double double0 = Double.POSITIVE_INFINITY;
      int int0 = 1795;
      double double1 = MathUtils.scalb(Double.POSITIVE_INFINITY, 1795);
      int[] intArray0 = new int[3];
      intArray0[0] = 1795;
      intArray0[1] = 1795;
      intArray0[2] = 1795;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.binomialCoefficientLog(1795, 1795);
      // Undeclared exception!
      try { 
        MathUtils.round((-4540.6865F), 0, 1795);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,795, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = (-1805);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1805));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,805
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = MathUtils.sign(222);
      int int1 = MathUtils.hash((double) 222);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 222;
      doubleArray0[1] = (-1497.5034653636826);
      doubleArray0[2] = (double) 1080803328;
      doubleArray0[3] = (double) 1080803328;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 222;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 222;
      doubleArray0[8] = (double) 222;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-99^-99)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(26, 26);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 26;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = (double) 26;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 26;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign((float) 26);
      int[] intArray0 = new int[6];
      intArray0[0] = 26;
      intArray0[1] = 26;
      intArray0[2] = 0;
      intArray0[3] = 26;
      intArray0[4] = 26;
      intArray0[5] = 26;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = MathUtils.indicator((-967L));
      byte byte0 = MathUtils.indicator((byte)12);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)12;
      doubleArray0[1] = 3369.964;
      doubleArray0[2] = (double) (-1L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(3369.9855135142643, 3369.964, (int) (byte)12);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2825));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,825
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2950.91679734314, Double.NaN, Double.NaN);
      long long0 = MathUtils.indicator((-376L));
      int int0 = MathUtils.pow(13, 13);
      double double0 = MathUtils.round((double) (-1692154371), 13);
      float float0 = MathUtils.indicator((float) (-1692154371));
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(66, (-474));
      byte byte0 = MathUtils.sign((byte)0);
      short short0 = MathUtils.sign((short) (byte)0);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign((-3483.843F));
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow((-2678L), (int) (byte)0);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.mulAndCheck(1552, (-647));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigInteger0.clearBit((-2546));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = (-1081);
      int int1 = 394;
      int int2 = MathUtils.mulAndCheck((-1081), 394);
      long long0 = 4398046511103L;
      long long1 = MathUtils.lcm(4398046511103L, (long) (-1081));
      int int3 = 12;
      int int4 = MathUtils.lcm(394, 12);
      boolean boolean0 = MathUtils.equals(274.9710565294, (double) 2364);
      boolean boolean1 = MathUtils.equals((double) (-1081), (-1146.3), 2745.200129773733);
      double double0 = MathUtils.normalizeAngle(2745.200129773733, 2364);
      int int5 = (-1431);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-425914), (-1431), 1581);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,581, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 55.0;
      doubleArray0[1] = 2172.344144897;
      doubleArray0[2] = (-1706.3187964418);
      doubleArray0[3] = 362.92095;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = 0;
      float float0 = MathUtils.round((float) 1010453436, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(927.9292, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      int int0 = MathUtils.compareTo(Double.NEGATIVE_INFINITY, (-2769.79444994), Double.NEGATIVE_INFINITY);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double double2 = 0.0;
      double double3 = 0.0;
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      float float0 = MathUtils.sign(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1), (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck(2174L, 362880L);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 734;
      boolean boolean0 = MathUtils.equals(1.1430250008909141E-8, (-1808.551242605512), 734);
      float float0 = MathUtils.round((float) 734, 734);
      float float1 = (-3858.8F);
      float float2 = MathUtils.sign((-3858.8F));
      long long0 = MathUtils.indicator((long) 734);
      int int1 = MathUtils.mulAndCheck(734, (-3403));
      float float3 = 1843.863F;
      int int2 = 8;
      // Undeclared exception!
      try { 
        MathUtils.round(1843.863F, 8, 734);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 734, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(147, (-5470));
      long long0 = MathUtils.mulAndCheck((long) 147, 0L);
      long long1 = MathUtils.indicator(0L);
      long long2 = MathUtils.addAndCheck(101L, 0L);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = MathUtils.hash(0.10526403784751892);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (-1078267243), (double) (-1078267243), (-1078267243));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = 6.283185307179586;
      boolean boolean0 = MathUtils.equals(6.283185307179586, 125.244, 125.244);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 125.244;
      doubleArray0[2] = (-1736.2);
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = 6.283185307179586;
      doubleArray0[5] = 125.244;
      doubleArray0[6] = 125.244;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator((-1.0F));
      byte byte0 = (byte) (-30);
      byte byte1 = MathUtils.indicator((byte) (-30));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("NOT_POSITIVE_NUMBER_OF_SAMPLES");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.NOT_POSITIVE_NUMBER_OF_SAMPLES
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.6931470632553101;
      doubleArray0[2] = 3025.91;
      doubleArray0[3] = (-1101.3265935684);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm(2567L, 2567L);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.6931470632553101;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 2567L;
      doubleArray1[3] = 0.6931470632553101;
      doubleArray1[4] = (double) 2567L;
      doubleArray1[5] = 0.6931470632553101;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (-555);
      doubleArray0[2] = (double) (-555);
      doubleArray0[4] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = 0.2222222089767456;
      doubleArray1[2] = (double) 844;
      doubleArray1[4] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      long long1 = MathUtils.lcm(165L, 165L);
      int int0 = MathUtils.compareTo(165L, 0L, 9.219544613762692E-9);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 547.9291472315566;
      doubleArray0[1] = 9.219544613762692E-9;
      doubleArray0[2] = (double) 165L;
      doubleArray0[3] = (double) 165L;
      doubleArray0[4] = (-2067.4969759);
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 165L;
      doubleArray0[7] = (-2558.630634);
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte byte0 = (byte)121;
      byte byte1 = MathUtils.indicator((byte)121);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = 0.0;
      double double1 = 675.1606620798768;
      double double2 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 675.1606620798768, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = MathUtils.pow(0, 0);
      int int3 = 1218;
      int int4 = MathUtils.gcd(1218, 2766);
      int int5 = MathUtils.compareTo(780.399559956147, (-3.940510424527919E-20), 2766);
      try { 
        MathUtils.pow(0, (-984L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-984)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.sign(0L);
      int int0 = (-2831);
      long long2 = 9223372036854775807L;
      int int1 = MathUtils.pow((-2831), 9223372036854775807L);
      // Undeclared exception!
      try { 
        MathUtils.equals(2614.9, (double) 9223372036854775807L, (-350454767));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = MathUtils.gcd((-2987), 163);
      double double0 = MathUtils.factorialLog(163);
      double double1 = MathUtils.round((double) (-2987), 163);
      long long0 = MathUtils.indicator(1216L);
      long long1 = MathUtils.sign(1216L);
      long long2 = MathUtils.indicator(2816L);
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1908.0742), 0.0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-2987);
      intArray0[1] = 163;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = (-2987);
      intArray0[5] = 1;
      double double3 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double4 = MathUtils.binomialCoefficientLog(0, (-2987));
      long long3 = MathUtils.mulAndCheck((long) (-2987), (-248L));
      float float0 = MathUtils.round((float) (-2987), (-2317));
      long long4 = MathUtils.sign((long) 0);
      short short0 = MathUtils.indicator((short)32043);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = MathUtils.sign((-2963));
      int int1 = MathUtils.hash((-1724.9476588));
      boolean boolean0 = MathUtils.equals(0.49999999999999994, (double) (-1));
      int int2 = MathUtils.addAndCheck(224, 1669);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-5811L), (-5811L));
      int[] intArray0 = new int[9];
      intArray0[0] = (-1516);
      intArray0[1] = (-1345);
      intArray0[2] = 3179;
      intArray0[3] = (-399);
      intArray0[4] = 0;
      intArray0[5] = 1166;
      intArray0[6] = 0;
      intArray0[7] = 14;
      intArray0[8] = 1030;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.hash((double) (-1516));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3179;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1345));
      int int1 = MathUtils.gcd(0, 0);
      double double1 = MathUtils.binomialCoefficientLog(0, (-1596));
      double double2 = MathUtils.factorialLog(0);
      long long1 = MathUtils.pow((long) 1166, 0);
      int int2 = MathUtils.subAndCheck(2363, (-755));
      int int3 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("=");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.=
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1179.471626687;
      doubleArray0[1] = (-1637.5911);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.304E19;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd(2147483647L, 1307674368000L);
      byte byte0 = MathUtils.indicator((byte)18);
      int int0 = MathUtils.compareTo(1.304E19, (-819.44658), 1.304E19);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 126;
      intArray0[2] = 109;
      intArray0[3] = 0;
      intArray0[4] = 271;
      intArray0[5] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.hash(0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 109;
      doubleArray0[3] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 109)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3012.3);
      doubleArray0[1] = 62.19469855521;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 62.19469855521;
      doubleArray1[1] = 62.19469855521;
      doubleArray1[2] = 62.19469855521;
      doubleArray1[3] = (-3012.3);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      long long0 = MathUtils.indicator((-302932621132653753L));
      int int0 = (-1101);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1101), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,101, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-4488.1901913248), (-4488.1901913248), (-4488.1901913248));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean1 = MathUtils.equalsIncludingNaN((-4488.1901913248), 314.1576);
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.sign(1);
      long long0 = MathUtils.pow((long) 1, 0L);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      short short1 = MathUtils.indicator((short)19);
      long long0 = MathUtils.subAndCheck((long) (short)1, (-2650L));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = MathUtils.sign(3128);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = MathUtils.hash(0.625);
      long long1 = MathUtils.mulAndCheck((long) 1071906816, 0L);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 17;
      int int1 = MathUtils.indicator(17);
      int int2 = 5;
      int int3 = MathUtils.pow(5, (long) 1);
      double double0 = (-1454.7849);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1454.7849), (double) 5);
      long long0 = MathUtils.mulAndCheck((long) 17, (long) 5);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) 5, 4607182418800017408L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = MathUtils.indicator(1.304E19);
      float float0 = MathUtils.sign((-118.0F));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-118.0F);
      doubleArray0[1] = (double) (-118.0F);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (-1.0F);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-118 < 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-3009.6513503818237), (-177.4), (-177.4));
      int int0 = MathUtils.mulAndCheck(0, 0);
      long long0 = MathUtils.pow((-1513L), 6L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 6L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-4.9E-324);
      doubleArray0[3] = (double) (-1513L);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-3009.6513503818237);
      doubleArray0[6] = (-3009.6513503818237);
      doubleArray0[7] = (-3009.6513503818237);
      doubleArray0[8] = (double) 6L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 1.1102230246251565E-16;
      doubleArray0[0] = 1.1102230246251565E-16;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      int int0 = (-1449);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1449));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,449
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float float0 = MathUtils.indicator((-1.0F));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1.0F);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 981.572808852);
      boolean boolean0 = MathUtils.equalsIncludingNaN(552.548, 981.572808852, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(552.548, 863.9932921495, 1.570796251296997);
      int int0 = MathUtils.hash((-1.0));
      MathUtils.checkOrder(doubleArray1);
      boolean boolean2 = MathUtils.equals(doubleArray1, doubleArray0);
      int int1 = MathUtils.compareTo(552.548, 0.0, (-1074790400));
      try { 
        MathUtils.pow(1, (-1074790400));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1,074,790,400)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-1289L), (-1289L));
      double double0 = MathUtils.normalizeAngle(1882.02174467224, (-1289L));
      double double1 = MathUtils.log((-2578L), (-1290.986835453451));
      long long1 = MathUtils.pow(1510L, 35);
      double double2 = MathUtils.factorialDouble(35);
      boolean boolean0 = MathUtils.equals((-188.26521), (-401.071945500823));
      long long2 = MathUtils.sign((-1996L));
      double double3 = MathUtils.factorialDouble(115);
      int int0 = MathUtils.addAndCheck(115, 115);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-5184), 35);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -5,184, k = 35
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      short short0 = (short) (-1806);
      short short1 = MathUtils.sign((short) (-1806));
      long long0 = 20922789888000L;
      long long1 = MathUtils.addAndCheck((long) (short) (-1), 20922789888000L);
      int int0 = MathUtils.addAndCheck(0, 164);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-3203));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,203
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = 0.0;
      int int0 = MathUtils.compareTo(0.0, 0.0, 447.49026158274);
      int int1 = 0;
      long long0 = MathUtils.pow(92L, 0);
      float float0 = MathUtils.round(0.0F, 0, 0);
      double double1 = MathUtils.sinh((-2761.74));
      int int2 = 1161;
      float float1 = MathUtils.round((float) 1L, 1161);
      long long1 = MathUtils.pow(92L, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("Rg/\"p}L +<{TB~|xn");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.Rg/\"p}L +<{TB~|xn
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = MathUtils.round(1.9699272335463627E-8, 12);
      long long0 = MathUtils.pow((long) 12, 0);
      long long1 = MathUtils.pow(0L, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf(")g2AYaA3Lwwf]");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.)g2AYaA3Lwwf]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, (-1077));
      int[] intArray0 = new int[6];
      intArray0[0] = (-1077);
      intArray0[1] = 0;
      intArray0[2] = (-1077);
      intArray0[3] = 0;
      intArray0[4] = (-1077);
      intArray0[5] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      int int0 = MathUtils.addAndCheck(0, 83);
      int int1 = MathUtils.gcd(83, 0);
      long long0 = MathUtils.lcm(2047L, (long) 83);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 2138.210171489;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2047L;
      doubleArray0[5] = (double) 0.0F;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 2,138.21)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)13);
      long long0 = MathUtils.gcd((long) (byte)1, 31L);
      double double0 = MathUtils.sign((-1.0));
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)13;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)1;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float float0 = MathUtils.indicator(726.0F);
      double double0 = MathUtils.scalb(1.0F, (-3067));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1.0F, 0.0, (double) 1.0F);
      double double1 = MathUtils.scalb((-1.7168146928204135), (-3067));
      byte byte0 = MathUtils.indicator((byte)0);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 2490.3631945426714);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = MathUtils.gcd(1500, 1500);
      int int1 = MathUtils.indicator(0);
      double double0 = MathUtils.round((double) 1500, 1500);
      int int2 = MathUtils.subAndCheck(0, 68);
      long long0 = MathUtils.pow((long) 1500, (long) 68);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[8];
      intArray1[0] = (-68);
      intArray1[1] = 1500;
      intArray1[2] = 0;
      intArray1[3] = (-779);
      intArray1[4] = 0;
      intArray1[5] = 1500;
      intArray1[6] = 1500;
      intArray1[7] = 0;
      int int3 = MathUtils.distance1(intArray0, intArray1);
      int int4 = MathUtils.mulAndCheck(641, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2513, 521);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = MathUtils.sinh(Double.NaN);
      double double1 = MathUtils.sinh(Double.NaN);
      int[] intArray0 = new int[2];
      intArray0[0] = 4574;
      intArray0[1] = 249;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1122.683976807;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-502.26);
      doubleArray0[4] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(1.176342548272881E-8, 0.01745329052209854, 18);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.round((-1616.4), 257);
      long long0 = MathUtils.pow((long) 257, 257);
      float float0 = MathUtils.round((float) 7224395485941924097L, 0);
      byte byte0 = MathUtils.indicator((byte)6);
      double double1 = MathUtils.scalb(1847.4835631278222, (byte)6);
      double double2 = MathUtils.sign(921.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = MathUtils.indicator((-253.786643736941));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1641));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,641
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = MathUtils.lcm(31, 31);
      int int1 = MathUtils.mulAndCheck(31, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      double double0 = bigInteger0.doubleValue();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.flipBit(0);
      BigInteger bigInteger3 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger4 = bigInteger1.clearBit(430);
      BigInteger bigInteger5 = bigInteger1.flipBit(0);
      BigInteger bigInteger6 = bigInteger0.modInverse(bigInteger1);
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-552.48906634406), (double) 31);
      int int2 = MathUtils.pow((-1494), (long) 430);
      BigInteger bigInteger8 = MathUtils.pow(bigInteger4, 24L);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.2958646899018938E-9;
      try { 
        MathUtils.normalizeArray(doubleArray0, 3.834E-20);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = (-1074);
      int int1 = MathUtils.pow((-1074), 1483L);
      long long0 = MathUtils.lcm((long) (-1074), (long) 0);
      long long1 = MathUtils.addAndCheck((long) (-1074), (long) (-1074));
      double double0 = MathUtils.log(1483L, 0.0);
      double double1 = 1976.3743511;
      int int2 = MathUtils.compareTo((-1074), 0L, 1976.3743511);
      int int3 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, Double.NEGATIVE_INFINITY, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      int int1 = MathUtils.hash((double) 1);
      int int2 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.factorialDouble(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.08713622391223907;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int3 = MathUtils.pow(0, (long) 0);
      double double1 = MathUtils.scalb(0.0, 4024);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = 2883L;
      long long1 = MathUtils.mulAndCheck(2883L, 0L);
      try { 
        MathUtils.pow(0, (long) (-1392));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,392)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = MathUtils.gcd(1417, 1417);
      byte byte0 = MathUtils.sign((byte)2);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.shiftRight((-1548));
      BigInteger bigInteger4 = bigInteger0.or(bigInteger3);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 190);
      int int1 = MathUtils.addAndCheck((-1548), 1417);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      short short0 = (short) (-946);
      short short1 = MathUtils.sign((short) (-946));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((short) (-1), (short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        MathUtils.pow((-1L), (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-76.33976910504), (-76.33976910504));
      int int0 = 12;
      double double1 = MathUtils.binomialCoefficientDouble(12, 12);
      double double2 = MathUtils.binomialCoefficientDouble(12, 0);
      int int1 = (-1852);
      int int2 = (-1253);
      int int3 = MathUtils.lcm((-1852), (-1253));
      float float0 = MathUtils.round(1831.0F, 2320556);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 380, (-1852));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,852, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      int int0 = MathUtils.gcd(11, (-1681));
      double double1 = MathUtils.normalizeAngle(0.0, 0.0);
      float float0 = MathUtils.sign((float) 1);
      byte byte0 = MathUtils.indicator((byte)83);
      int int1 = MathUtils.gcd(0, 338);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)68);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)68;
      doubleArray0[2] = (double) (byte)68;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = (double) (byte)1;
      doubleArray0[6] = (double) (byte)68;
      doubleArray0[7] = (double) (byte)68;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (68 >= 68)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      short short0 = MathUtils.indicator((short)820);
      long long0 = MathUtils.gcd((-2001L), (-2001L));
      int int0 = MathUtils.lcm((int) (short)820, (int) (short)820);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) 2001L;
      doubleArray0[3] = (double) (-2001L);
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 820;
      doubleArray0[7] = 13.07;
      doubleArray0[8] = 0.16666666666745392;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = (-253L);
      long long1 = (-1805L);
      try { 
        MathUtils.pow((-253L), (-1805L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-253^-1,805)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = 0.0;
      double double1 = MathUtils.cosh(0.0);
      int int0 = 2281;
      // Undeclared exception!
      try { 
        MathUtils.factorial(2281);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      short short0 = MathUtils.sign((short)4808);
      int int0 = 1883;
      // Undeclared exception!
      try { 
        MathUtils.factorial(1883);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.clearBit(31);
      BigInteger bigInteger2 = bigInteger1.flipBit(31);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 1413L);
      BigInteger bigInteger4 = bigInteger1.flipBit(227);
      int int0 = MathUtils.hash((double) 1413L);
      BigInteger bigInteger5 = bigInteger3.and(bigInteger1);
      long long0 = MathUtils.gcd(177L, (long) 1083577344);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger3, 31);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1413L, (double) 1413L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 177L;
      doubleArray0[1] = (double) 3L;
      doubleArray0[2] = (double) 227;
      doubleArray0[3] = (double) 3L;
      doubleArray0[4] = (double) 3L;
      doubleArray0[5] = (double) 31;
      doubleArray0[6] = (-3.940510424527919E-20);
      double double0 = MathUtils.safeNorm(doubleArray0);
      BigInteger bigInteger7 = MathUtils.pow(bigInteger5, 1083577344);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.mulAndCheck((-489L), (-489L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      int[] intArray0 = new int[8];
      intArray0[0] = 805;
      intArray0[1] = 687;
      intArray0[2] = 285;
      intArray0[3] = 15;
      intArray0[4] = Integer.MIN_VALUE;
      intArray0[5] = 67;
      intArray0[6] = 1220;
      intArray0[7] = 2850;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      long long1 = MathUtils.gcd((-9223372036854775808L), 4503599627370496L);
      boolean boolean0 = MathUtils.equals(1406.50103, (double) 0L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-9223372036854775808L);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.binomialCoefficientLog(1498, 1498);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2699), 1500);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,699, k = 1,500
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      long long2 = MathUtils.addAndCheck(0L, 0L);
      double double0 = MathUtils.indicator(1.304E19);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, Double.NaN, 223);
      double double1 = MathUtils.indicator((double) 0L);
      long long3 = MathUtils.gcd(810L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 6);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, (-4083));
      double double1 = MathUtils.indicator((-3297.6082174393));
      long long0 = MathUtils.gcd(9193070505571053912L, (-945L));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 469L);
      double double0 = MathUtils.log(446.36583416255, 446.36583416255);
      short short0 = MathUtils.sign((short)1561);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.indicator(2447.50269);
      float float0 = MathUtils.sign((-1.0F));
      double double2 = MathUtils.binomialCoefficientDouble(0, (-2499));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 0, 153);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.modPow(bigInteger1, bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      long long1 = MathUtils.binomialCoefficient(1041, 1041);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = MathUtils.lcm(1566L, 0L);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 4935.19902253563);
      short short0 = MathUtils.indicator((short)3932);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(812, 2004);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 812, k = 2,004
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        MathUtils.pow(529L, (-956));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (529^-956)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      int int0 = MathUtils.indicator((-61));
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0, (double) (-1));
      byte byte0 = MathUtils.sign((byte)112);
      int int1 = MathUtils.indicator(124);
      double double0 = MathUtils.indicator(1077.89576822);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = MathUtils.sign(1040L);
      int int0 = MathUtils.compareTo(1040L, 0.0, 0.0);
      boolean boolean0 = MathUtils.equals(0.0, 10.21826665);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0L);
      double double0 = MathUtils.normalizeAngle(1L, 10.0);
      double double1 = MathUtils.scalb(1040L, 1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1072.39833);
      doubleArray0[1] = (-1394.25554712298);
      doubleArray0[2] = (-1835.28976);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(0.07842259109020233, (-1835.28976), (-1394.25554712298));
      boolean boolean1 = MathUtils.equals(0.0, 1698.7079416244121);
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = 0L;
      int int0 = 19;
      long long1 = MathUtils.pow(0L, 19);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 19);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(17, 1763);
      int[] intArray0 = new int[7];
      intArray0[0] = 1763;
      intArray0[1] = (-1746);
      intArray0[2] = 17;
      intArray0[3] = 1763;
      intArray0[4] = 17;
      intArray0[5] = 17;
      intArray0[6] = 17;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.sign((-412L));
      long long1 = MathUtils.gcd(608L, 39916800L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1763;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-3916.795724));
      byte byte0 = MathUtils.indicator((byte) (-119));
      int int1 = MathUtils.subAndCheck(1763, 1652);
      long long2 = MathUtils.indicator((-2079L));
      long long3 = MathUtils.indicator(2047L);
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = MathUtils.sign((-808L));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-808L);
      doubleArray0[3] = (double) (-1L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((-1.0F), 1841, 7);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      byte byte0 = MathUtils.indicator((byte) (-18));
      byte byte1 = MathUtils.sign((byte)89);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-18);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      String string0 = bigInteger0.toString();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1082.6461626941;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.mulAndCheck(1569, 1569);
      long long0 = MathUtils.sign((-5034868814120038111L));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      float float0 = MathUtils.indicator(Float.NaN);
      MathUtils.OrderDirection mathUtils_OrderDirection1 = MathUtils.OrderDirection.valueOf("INCREASING");
      double double1 = MathUtils.sinh(117.492215917265);
      long long1 = MathUtils.gcd((long) 1569, (-5034868814120038111L));
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1L);
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(8, 8);
      int int1 = MathUtils.gcd(16, 8);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 16;
      doubleArray0[5] = (double) 16;
      doubleArray0[6] = (double) 8;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck((long) 16, (-247L));
      boolean boolean1 = MathUtils.equalsIncludingNaN((-2856.179481201866), 8.0, 3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((-1.0), 50, 50);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-71));
      double double0 = MathUtils.sinh((byte) (-1));
      int int0 = MathUtils.mulAndCheck((-355), (int) (byte) (-1));
      short short0 = MathUtils.sign((short) (-818));
      // Undeclared exception!
      try { 
        MathUtils.round(3.834E-20, (-355), (-355));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-737.76481505), (-737.76481505), (-737.76481505));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.sign((-898.43335F));
      int int0 = MathUtils.mulAndCheck(19, 1071);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      short short0 = MathUtils.indicator((short)471);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(419L, 1271L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 419L);
      float float0 = MathUtils.round(0.0F, 295, 0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
      double double0 = MathUtils.sinh(0L);
      long long1 = MathUtils.mulAndCheck(0L, (-489L));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(243, 243);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.indicator(0L);
      long long1 = MathUtils.gcd((-3958705157555305932L), (-3958705157555305932L));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3958705157555305932L;
      doubleArray0[1] = (double) 0L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (3,958,705,157,555,306,000 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      float float0 = (-2784.4805F);
      int int0 = 0;
      int int1 = (-4794);
      // Undeclared exception!
      try { 
        MathUtils.round((-2784.4805F), 0, (-4794));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -4,794, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.9999997615814209);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = MathUtils.pow(2948L, 1019);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 2948L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, (-822.218255), 0.0);
      double double0 = MathUtils.cosh(6.283185307179586);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 267.7467614837482;
      doubleArray0[3] = 267.7467614837482;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (6.283 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      short short0 = (short) (-1338);
      short short1 = MathUtils.indicator((short) (-1338));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("COLUMN_INDEX_OUT_OF_RANGE");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.COLUMN_INDEX_OUT_OF_RANGE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)29);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)29;
      doubleArray0[2] = (double) (byte)29;
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.sinh(1309.4);
      long long0 = MathUtils.indicator(1683L);
      long long1 = MathUtils.lcm((long) (byte)29, 1645L);
      int int1 = 33;
      int int2 = MathUtils.gcd(33, 549);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long2 = MathUtils.indicator((-2086L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int3 = (-247);
      // Undeclared exception!
      try { 
        bigInteger0.clearBit((-247));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, (-1205L));
      long long1 = MathUtils.indicator(0L);
      boolean boolean0 = MathUtils.equals((double) 1205L, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float float0 = MathUtils.sign((-1.0F));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = 1855.72845;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      String string0 = bigInteger1.toString(18);
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger1.modPow(bigInteger2, bigInteger0);
      BigInteger bigInteger4 = bigInteger0.and(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 2301);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-86.8633693));
      long long0 = MathUtils.pow((-1891L), 31);
      double double0 = MathUtils.cosh((-336.13461096));
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-86.8633693);
      doubleArray2[1] = 4.790454515350735E145;
      doubleArray2[2] = (double) (-1.0F);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 31;
      doubleArray2[5] = (double) (-1.0F);
      doubleArray2[6] = (-336.13461096);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray2);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1.0), (-998.5263715861));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 6;
      int int1 = MathUtils.pow(6, 6);
      int int2 = MathUtils.subAndCheck(6, 6);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("D");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.D
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte)10;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) (byte)10);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2836));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,836
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 379;
      double double0 = MathUtils.binomialCoefficientDouble(379, 379);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 379;
      doubleArray0[1] = (-991.9517540185441);
      doubleArray0[2] = 2408.1880478;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator((float) 379);
      byte byte0 = MathUtils.indicator((byte)0);
      int int1 = MathUtils.hash((-442.6007));
      double double2 = MathUtils.scalb(1.0F, 379);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 379.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.2313126936373275E114, (double) (byte)1, 1922.50112493143);
      int int2 = MathUtils.hash((double) 1.0F);
      double double3 = MathUtils.factorialLog(1887);
      int int3 = MathUtils.gcd(180, 1887);
      long long0 = MathUtils.pow((long) 1887, 0L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1209941299), (-1209941299));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,209,941,299
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
