/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:50:53 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = MathUtils.log(1.1921056801463227E-8, 1.1921056801463227E-8);
      float float0 = MathUtils.sign(0.0F);
      double double1 = MathUtils.factorialLog(107);
      int int0 = MathUtils.pow(107, 107);
      long long0 = MathUtils.lcm((-2029L), (-2029L));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 396.24881705179166;
      doubleArray0[1] = (double) 2029L;
      doubleArray0[2] = (-2381.9768772724738);
      doubleArray0[3] = (-2050.03);
      double double2 = MathUtils.safeNorm(doubleArray0);
      double double3 = MathUtils.round(0.0, (-620144141));
      boolean boolean0 = MathUtils.equalsIncludingNaN(396.24881705179166, (-1874.83), 107);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(779, 626);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      short short0 = MathUtils.indicator((short)8);
      double double0 = MathUtils.round(653.492174, 0, (int) (short)1);
      long long0 = MathUtils.gcd((-1572L), (long) (short)8);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)7;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 81);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = MathUtils.log(367.1863478, 5.650007086920087E-9);
      long long0 = MathUtils.mulAndCheck((-3113L), (-3113L));
      int int0 = MathUtils.compareTo(0.0, 1.1102230246251565E-16, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-17.44555982772378);
      doubleArray0[1] = 5.650007086920087E-9;
      doubleArray0[2] = 5.650007086920087E-9;
      doubleArray0[3] = (-3.2157177034546547);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-3.2157177034546547);
      doubleArray0[6] = 1.1102230246251565E-16;
      doubleArray0[7] = 55.5;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1716.9798;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (-3.2157177034546547);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) (-1);
      doubleArray1[6] = (-3.2157177034546547);
      doubleArray1[7] = 5.650007086920087E-9;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      long long1 = MathUtils.lcm(9690769L, (-344L));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = MathUtils.lcm(4294967295L, (-3461L));
      int int0 = (-517);
      float float0 = MathUtils.indicator((float) 14864881807995L);
      float float1 = MathUtils.sign((float) 4294967295L);
      long long1 = MathUtils.indicator(0L);
      float float2 = MathUtils.indicator(1.0F);
      int int1 = MathUtils.pow((-517), 0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.008336750013465571;
      doubleArray1[1] = (double) 1L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      short short0 = MathUtils.sign((short)0);
      double double0 = MathUtils.round(0.008336750013465571, 1);
      int int2 = MathUtils.pow(0, 3);
      int int3 = MathUtils.compareTo(1.0F, 0.0, 0.625);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.shiftRight(1);
      double double1 = bigInteger1.doubleValue();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = 2819561105158720014L;
      long long1 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(2819561105158720014L, 9223372036854775807L);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 2,819,561,105,158,720,014 + 9,223,372,036,854,775,807
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = MathUtils.lcm(4294967295L, (-3461L));
      int int0 = (-517);
      float float0 = MathUtils.indicator((float) 14864881807995L);
      float float1 = MathUtils.sign((float) 4294967295L);
      long long1 = MathUtils.indicator(0L);
      float float2 = MathUtils.indicator(1.0F);
      int int1 = MathUtils.pow((-517), 0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.008336750013465571;
      doubleArray1[1] = (double) 1L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      short short0 = MathUtils.sign((short)0);
      double double0 = MathUtils.round(0.008336750013465571, 1);
      int int2 = MathUtils.pow(0, 3);
      int int3 = MathUtils.compareTo(1.0F, 0.0, 0.625);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.shiftRight(1);
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.0;
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.scalb((-1386.069965), 8);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(1073741855, 1073741855);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 573;
      double double0 = MathUtils.scalb(1057.1, 573);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-694L), (-2670L));
      int int0 = (-401);
      int int1 = MathUtils.pow((-401), 293L);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 293L, (-401), (-401));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -401, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 4.503599627370496E15;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.cosh(Double.NEGATIVE_INFINITY);
      int int0 = 21;
      double double1 = MathUtils.factorialDouble(21);
      try { 
        MathUtils.normalizeArray(doubleArray0, (-870.6905429204));
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3529.75875);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.1818181574344635);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3529.75875), 192.7993, (-3529.75875));
      int int0 = MathUtils.sign(0);
      long long0 = MathUtils.lcm(0L, (-2909L));
      float float0 = MathUtils.round((float) 0, 0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = MathUtils.sign(3260L);
      short short0 = (short) (-306);
      short short1 = MathUtils.sign((short) (-306));
      byte byte0 = MathUtils.sign((byte) (-6));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1L, 0.0, (double) (byte) (-6));
      short short2 = (short)1922;
      short short3 = MathUtils.indicator((short)1922);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      double double2 = MathUtils.round(1.0, (int) (byte) (-1));
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        MathUtils.round((-1184.0), Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // Underflow
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 3007;
      float float0 = MathUtils.round(935.755F, 3007);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1279.233915;
      double double0 = (-1202.2855);
      doubleArray0[1] = (-1202.2855);
      doubleArray0[2] = 1.5;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1522.8395763702094;
      double double1 = MathUtils.safeNorm(doubleArray0);
      byte byte0 = (byte)25;
      byte byte1 = MathUtils.sign((byte)25);
      int int0 = MathUtils.gcd(69, (int) (byte)1);
      long long0 = MathUtils.mulAndCheck(1118L, (-1143L));
      int int1 = MathUtils.sign((-3490));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,279.234 >= -1,202.285)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
      double double0 = MathUtils.round(0.0, 0);
      short short0 = (short)254;
      short short1 = MathUtils.sign((short)254);
      int int0 = MathUtils.gcd(4194304, (int) (short)254);
      byte byte0 = MathUtils.sign((byte)0);
      int int1 = MathUtils.pow(70, 70);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)254;
      intArray0[1] = 4194304;
      intArray0[2] = (int) (short)1;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = 4194304;
      int int2 = 17;
      intArray0[6] = 17;
      intArray0[7] = 0;
      intArray0[8] = (int) (byte)0;
      int[] intArray1 = new int[5];
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = (int) (short)254;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1207);
      intArray0[1] = 0;
      intArray0[2] = 93;
      intArray0[3] = 3247;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.gcd((long) 93, (long) 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.log(0.0, 93);
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
      boolean boolean0 = MathUtils.equals((-611.86438), 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 93;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-611.86438);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = -0.0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 3247;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = -0.0;
      doubleArray1[5] = 170.422815321;
      doubleArray1[6] = (double) 3247;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0);
      double double0 = MathUtils.round((-171.09326767352331), 0, 0);
      float float0 = MathUtils.sign((float) 1L);
      int int0 = MathUtils.lcm(0, 0);
      double double1 = MathUtils.cosh(0L);
      double double2 = MathUtils.cosh(8.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-675.2507189456);
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = 1490.479161252178;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.mulAndCheck((-3552L), (-3552L));
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 3.141592653589793);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-51));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (byte) (-51);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte) (-51);
      doubleArray0[4] = (double) (byte) (-51);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck((long) (byte) (-1), 0L);
      int int0 = MathUtils.mulAndCheck((int) (byte) (-51), (int) (byte) (-51));
      int int1 = MathUtils.lcm(20, 20);
      int int2 = MathUtils.mulAndCheck((int) (byte) (-1), 36);
      float float0 = MathUtils.indicator(542.6149F);
      byte byte1 = MathUtils.indicator((byte)0);
      float float1 = MathUtils.round((float) 0L, 20);
      double double1 = MathUtils.log((-51.0), 0.0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = MathUtils.round((-2692.5), 0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(496, 496);
      double double0 = MathUtils.log(496, 496);
      int int1 = MathUtils.compareTo(992, 1.0, 1.1102230246251565E-16);
      float float0 = MathUtils.indicator((float) 1);
      byte byte0 = (byte)48;
      byte byte1 = MathUtils.indicator((byte)48);
      byte byte2 = MathUtils.indicator((byte)1);
      double double1 = MathUtils.binomialCoefficientLog(7, 1);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = MathUtils.indicator(39916800L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 39916800L;
      MathUtils.checkOrder(doubleArray0);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 555;
      intArray0[0] = 555;
      intArray0[1] = (-2900);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.scalb(555, 4194304);
      int int2 = MathUtils.indicator(555);
      long long0 = MathUtils.subAndCheck((long) 555, 1181L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      long long1 = bigInteger0.longValue();
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double double1 = (-1763.1503629871092);
      doubleArray0[2] = (-1763.1503629871092);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.normalizeAngle((byte)0, 1978.742);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = 0;
      int int1 = 8;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 8);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 8
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      short short0 = (short) (-3698);
      short short1 = MathUtils.sign((short) (-3698));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-3698);
      doubleArray0[1] = (double) (short) (-3698);
      doubleArray0[2] = (double) (short) (-3698);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-672.7), 0.0, (double) (short) (-1));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, (-2968.0), 2234);
      long long0 = MathUtils.sign((long) 2234);
      int[] intArray0 = new int[9];
      intArray0[0] = 933;
      intArray0[1] = 2234;
      intArray0[2] = 2234;
      intArray0[3] = 224;
      intArray0[4] = 2234;
      intArray0[5] = 2234;
      intArray0[6] = Integer.MIN_VALUE;
      intArray0[7] = 2234;
      intArray0[8] = 2234;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.scalb(2234, 193);
      boolean boolean1 = MathUtils.equals((double) 2234, (double) 2234, 1641);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(125, 246);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 125, k = 246
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3913);
      intArray0[1] = 1631;
      intArray0[2] = 0;
      intArray0[3] = 796;
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 1631;
      intArray1[2] = (-3913);
      intArray1[3] = (-3913);
      intArray1[4] = 1631;
      intArray1[5] = 796;
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-909.13);
      doubleArray0[3] = (-127.94876069);
      doubleArray0[4] = 3053.319197;
      doubleArray0[5] = (-688.1182508686);
      doubleArray0[6] = Double.NaN;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.cosh(0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-188.7394);
      doubleArray1[5] = (double) 0;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.sinh(1.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.1752011936438014;
      doubleArray0[3] = (-568.1252459906418);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1069;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.gcd((long) 0, (long) 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, 0.5, 595.57906154286);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0L, 595.57906154286, 595.57906154286);
      long long1 = MathUtils.addAndCheck((-1500L), (-2149L));
      float float0 = MathUtils.round(0.0F, 1069);
      int int1 = MathUtils.subAndCheck(0, 1069);
      boolean boolean2 = MathUtils.equals((double) (-1500L), 0.0, (double) (-2149L));
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.cosh(0);
      int[] intArray1 = new int[3];
      intArray1[0] = 1069;
      intArray1[1] = 0;
      intArray1[2] = 0;
      int[] intArray2 = new int[5];
      intArray2[0] = 0;
      intArray2[1] = (-1069);
      intArray2[2] = 1069;
      intArray2[3] = 31;
      intArray2[4] = 0;
      int int2 = MathUtils.distance1(intArray1, intArray2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-627.8070581), (-627.8070581), 2.2250738585072014E-308);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-627.8070581);
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = (-627.8070581);
      doubleArray0[3] = (-627.8070581);
      doubleArray0[4] = (-627.8070581);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2.2250738585072014E-308;
      doubleArray0[7] = 2.2250738585072014E-308;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(1846.7049722152099, 1.3245471311735498E-8);
      int int0 = 815;
      int int1 = MathUtils.indicator(815);
      boolean boolean3 = MathUtils.equalsIncludingNaN((double) 1, (-627.8070581), 5);
      boolean boolean4 = MathUtils.equals((-627.8070581), 0.0, 11);
      double double0 = MathUtils.round(2.2250738585072014E-308, 11, 1);
      int int2 = MathUtils.sign(947);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= -627.807)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      long long1 = MathUtils.factorial(0);
      short short0 = MathUtils.indicator((short)0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.round(0.0, (int) (short)0, (int) (short)1);
      double double1 = MathUtils.scalb(0, (short)1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(0, (-129));
      int[] intArray0 = new int[0];
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equals(0.0, (double) 0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-2627), 0);
      double double0 = MathUtils.sign((double) (-2627));
      double double1 = MathUtils.normalizeAngle((-1880.6), 0);
      int int1 = MathUtils.addAndCheck(3335, 0);
      double double2 = MathUtils.cosh(4201.197);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.9275931533036328);
      doubleArray0[1] = (-1.9275931533036328);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-4642.5270385735);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 3335;
      double double3 = MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = (-257);
      int int1 = MathUtils.sign((-257));
      short short0 = MathUtils.sign((short)0);
      short short1 = MathUtils.indicator((short)0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (int) (short)0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialLog(0);
      double double1 = 1465.4;
      double double2 = MathUtils.sinh(1465.4);
      int int1 = 1890;
      int int2 = 26;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1890, 26);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = MathUtils.sign((-257));
      short short0 = MathUtils.sign((short)0);
      short short1 = MathUtils.indicator((short)0);
      long long0 = MathUtils.indicator((long) (-257));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-122);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int1 = bigInteger0.intValue();
      boolean boolean0 = bigInteger0.testBit((byte)107);
      // Undeclared exception!
      try { 
        MathUtils.pow(bigInteger0, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      int int1 = MathUtils.pow(0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 2926;
      intArray1[4] = 1;
      int int2 = MathUtils.distance1(intArray0, intArray1);
      double double0 = MathUtils.indicator((double) 1);
      float float0 = MathUtils.round((float) 2926, 10);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1917;
      intArray0[1] = (-1623);
      intArray0[2] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.round(0.0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1917;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 1917;
      doubleArray0[3] = (double) (-1623);
      doubleArray0[4] = (double) (-1623);
      doubleArray0[5] = 1.633123935319537E16;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) (-1623);
      doubleArray0[8] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-335.75139125091), (-44.242742398), 2113.57511068);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2113.57511068;
      doubleArray0[1] = (-44.242742398);
      doubleArray0[2] = (-335.75139125091);
      doubleArray0[3] = (-335.75139125091);
      doubleArray0[4] = (-335.75139125091);
      doubleArray0[5] = (-335.75139125091);
      doubleArray0[6] = 2113.57511068;
      doubleArray0[7] = 2113.57511068;
      doubleArray0[8] = (-335.75139125091);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-335.75139125091);
      doubleArray1[1] = 2113.57511068;
      doubleArray1[2] = (-335.75139125091);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      short short0 = MathUtils.indicator((short)338);
      long long0 = MathUtils.pow((-5001L), (long) (short)1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = MathUtils.compareTo(1999.6695340377998, 0.0, 0.0);
      long long0 = MathUtils.gcd((long) 1, 0L);
      int int1 = MathUtils.indicator(1);
      int int2 = MathUtils.hash(0.0);
      int int3 = MathUtils.subAndCheck(1, 1);
      float float0 = MathUtils.sign((float) 1L);
      double double0 = 2791.4185333467954;
      boolean boolean0 = MathUtils.equals(2791.4185333467954, (double) 1, (double) 0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1610));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,610
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      float float0 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)1;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.gcd(0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-3259), (-3259));
      float float0 = MathUtils.sign(1940.6625F);
      long long0 = MathUtils.addAndCheck((-1693L), (long) (-6518));
      byte byte0 = MathUtils.indicator((byte) (-1));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-3259), (double) (-6518), 0.0);
      float float1 = MathUtils.indicator((float) (byte) (-1));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-8211L);
      doubleArray0[1] = (double) (-1693L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.sign(133);
      int int2 = MathUtils.addAndCheck(0, (-240));
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      try { 
        MathUtils.pow(0L, (-3259));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-3,259)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 21);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = MathUtils.pow(720L, 0);
      long long1 = MathUtils.subAndCheck((-134L), (-302932621132653753L));
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int1 = MathUtils.sign(0);
      int int2 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (-302932621132653753L), 753.166, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathUtils.sinh((-853.5107330616371));
      boolean boolean0 = MathUtils.equals(113.0, (-853.5107330616371));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 113.0;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-853.5107330616371);
      doubleArray0[3] = (-853.5107330616371);
      doubleArray0[4] = (-853.5107330616371);
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte byte0 = (byte) (-31);
      byte byte1 = MathUtils.sign((byte) (-31));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-31);
      doubleArray0[1] = (double) (byte) (-31);
      double double0 = (-1485.4619489566);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1485.4619489566));
      double double1 = 62.0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (byte) (-31), 62.0, (int) (byte) (-1));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = MathUtils.hash((-3502.5167952894));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.or(bigInteger1);
      boolean boolean0 = bigInteger0.testBit((byte)0);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, (int) (byte)51);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)51;
      doubleArray0[1] = (-3502.5167952894);
      doubleArray0[2] = (double) (byte)123;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (-3502.5167952894);
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) (byte)123;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.binomialCoefficientDouble((byte)0, (-1692));
      float float0 = MathUtils.indicator((float) (byte)123);
      long long0 = MathUtils.subAndCheck(0L, (long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte byte0 = (byte) (-31);
      byte byte1 = MathUtils.sign((byte) (-31));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-31);
      doubleArray0[1] = (double) (byte) (-31);
      doubleArray0[2] = (double) (byte) (-31);
      doubleArray0[3] = (double) (byte) (-1);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.pow(120L, 3834L);
      long long1 = 0L;
      long long2 = MathUtils.pow(3834L, 0L);
      double double1 = MathUtils.round((-31.0), (int) (byte) (-31));
      int int0 = 0;
      long long3 = MathUtils.binomialCoefficient(0, (byte) (-31));
      float float0 = MathUtils.sign((-50.77F));
      double double2 = MathUtils.indicator(0.0);
      int int1 = (-39);
      double double3 = MathUtils.binomialCoefficientLog(0, (-39));
      long long4 = MathUtils.gcd((-2644281811660520851L), (-26L));
      int int2 = MathUtils.mulAndCheck(0, (int) (byte) (-1));
      double double4 = MathUtils.cosh(0L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1561.214));
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (-39), (int) (byte) (-31));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float float0 = MathUtils.sign(271.8F);
      int int0 = MathUtils.addAndCheck((-2580), 722);
      int int1 = MathUtils.pow((-3175), 0);
      int int2 = MathUtils.sign(0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-1820L), (-1820L));
      float float0 = MathUtils.round((float) (-1820L), 3408);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3640L);
      doubleArray0[1] = (double) 3408;
      doubleArray0[2] = (double) (-3640L);
      doubleArray0[3] = (double) 3408;
      doubleArray0[4] = (double) (-3640L);
      doubleArray0[5] = (double) (-3640L);
      doubleArray0[6] = (double) (-3640L);
      doubleArray0[7] = (double) (-1820L);
      doubleArray0[8] = (double) Float.NaN;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int int0 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-567996129), 3408);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(896);
      float float0 = MathUtils.sign((float) 896);
      float float1 = MathUtils.round(1.0F, (-918), 0);
      int int0 = MathUtils.mulAndCheck(1, (-918));
      int[] intArray0 = new int[9];
      intArray0[0] = (-2422);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = 1;
      intArray0[8] = (-918);
      int[] intArray1 = new int[5];
      intArray1[0] = (-918);
      intArray1[1] = (-918);
      intArray1[2] = 896;
      intArray1[3] = 896;
      intArray1[4] = 896;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 538;
      double double0 = MathUtils.factorialLog(538);
      long long0 = MathUtils.sign((long) 538);
      int int1 = 65;
      try { 
        MathUtils.pow(65, (-1584L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (65^-1,584)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(1025, 1025);
      float float0 = MathUtils.sign((float) 1050625);
      int[] intArray0 = new int[8];
      intArray0[0] = 1050625;
      intArray0[1] = 1025;
      intArray0[2] = (-2052);
      intArray0[3] = 1025;
      intArray0[4] = 1050625;
      intArray0[5] = 1025;
      intArray0[6] = 1025;
      intArray0[7] = 1050625;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 0;
      try { 
        MathUtils.pow(0, (-1711L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,711)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = MathUtils.subAndCheck(0, 0);
      int int3 = 895;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 895);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.09090909090909091;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = 3000;
      int int1 = MathUtils.lcm(3000, 3000);
      // Undeclared exception!
      try { 
        MathUtils.lcm(4607182418800017408L, (long) 3000);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, (double) 0L, 10);
      long long1 = MathUtils.binomialCoefficient(121, 121);
      long long2 = MathUtils.binomialCoefficient(0, (-827));
      double double0 = MathUtils.factorialLog(0);
      long long3 = MathUtils.subAndCheck(0L, 720L);
      long long4 = 1393L;
      long long5 = MathUtils.sign(1393L);
      long long6 = MathUtils.sign((-652L));
      double double1 = MathUtils.normalizeAngle(720L, 1255.405598);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0, (double) 1L);
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double3 = MathUtils.factorialDouble(119);
      int int0 = 0;
      long long7 = MathUtils.factorial(0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      long long0 = MathUtils.binomialCoefficient(412, 412);
      float float1 = MathUtils.sign((-1.0F));
      int int0 = MathUtils.mulAndCheck(412, 412);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-774));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-774)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float float0 = MathUtils.round((-812.0F), 0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-812.0F), (double) (-813.0F), 0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      double double0 = bigInteger0.doubleValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double1 = MathUtils.cosh(0.0);
      int int0 = bigInteger0.compareTo(bigInteger1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 10.0;
      int int1 = bigInteger0.intValue();
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 10.0;
      doubleArray0[4] = 0.0;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double2 = MathUtils.binomialCoefficientDouble(215, (-1415));
      int[] intArray0 = new int[5];
      intArray0[0] = 10;
      intArray0[1] = 215;
      intArray0[2] = (-659);
      intArray0[3] = (-3123);
      intArray0[4] = (-1415);
      int int2 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = MathUtils.pow(65, 141L);
      double double0 = MathUtils.binomialCoefficientLog(229, (-1239));
      boolean boolean0 = MathUtils.equalsIncludingNaN(2211.601768, (-1198.0), 409.0);
      int int1 = MathUtils.compareTo(229, (-1.0), 3294198.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      MathUtils.checkOrder(doubleArray0);
      short short0 = MathUtils.indicator((short) (-1131));
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (-2905.243003), (-2905.243003));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float float0 = MathUtils.indicator(1050.8214F);
      double double0 = MathUtils.indicator((double) 1.0F);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.indicator((short) (-2506));
      long long0 = MathUtils.sign(529L);
      int int0 = MathUtils.lcm((int) (short) (-2506), (-1848));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.addAndCheck((int) (short) (-1), 1);
      long long1 = MathUtils.gcd(0L, 1L);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte) (-122);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 619);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = MathUtils.sign(1389L);
      long long1 = MathUtils.pow(2856L, 1389L);
      double double0 = MathUtils.factorialDouble(506);
      double double1 = MathUtils.factorialDouble(506);
      int int0 = MathUtils.gcd((-2019), (-2019));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 506;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) 2019;
      doubleArray0[4] = (double) 506;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) (-2019);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = (-1319);
      intArray0[2] = (-1319);
      intArray0[3] = 13;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-363.993727);
      doubleArray0[1] = 3677.102;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int int0 = (-22);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-22));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -22
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = MathUtils.scalb((-543.0), (-1472));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1472);
      doubleArray0[1] = (-1.3430040799989576E176);
      doubleArray0[2] = (-1.3430040799989576E176);
      doubleArray0[3] = (-1.3430040799989576E176);
      doubleArray0[4] = (-1.3430040799989576E176);
      doubleArray0[5] = (-1.3430040799989576E176);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-235.782371517892));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(854L, 854L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-10);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1708L);
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger1);
      double double0 = bigInteger0.doubleValue();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      short short0 = MathUtils.sign((short) (byte) (-10));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("RandomKeyMutation works only with RandomKeys, not {0}");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.RandomKeyMutation works only with RandomKeys, not {0}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = MathUtils.sign(293L);
      int int0 = MathUtils.gcd((-1), (-1));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-714.824822200284), (-714.824822200284));
      double double0 = MathUtils.sign((-714.824822200284));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = (-67.60316661);
      double double1 = MathUtils.normalizeAngle((-67.60316661), (-67.60316661));
      int int0 = (-248);
      int int1 = 381;
      int int2 = MathUtils.mulAndCheck((-248), 381);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte byte0 = bigInteger0.byteValueExact();
      int int3 = bigInteger0.getLowestSetBit();
      try { 
        MathUtils.pow(bigInteger0, (long) (-248));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-248)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.7553817452272217E-6, 903.122029229552);
      BigInteger bigInteger0 = null;
      long long0 = 629L;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 629L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float float0 = MathUtils.round(Float.NaN, 57);
      boolean boolean0 = MathUtils.equals((-580.46244088), (-1496.423), 8.251545029714408E-9);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)49;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean1 = bigInteger0.isProbablePrime(1917);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 235);
      double double0 = MathUtils.indicator(1.073741824E9);
      int int0 = MathUtils.addAndCheck(0, (int) (byte)111);
      long long0 = MathUtils.lcm(3952090531849364496L, 3952090531849364496L);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)111;
      intArray0[1] = 1917;
      intArray0[2] = (int) (byte)49;
      intArray0[3] = 57;
      intArray0[4] = 57;
      intArray0[5] = 57;
      intArray0[6] = 235;
      intArray0[7] = 111;
      intArray0[8] = (int) (byte)0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.hash((double) 235);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) (byte)49;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      long long0 = MathUtils.gcd(0L, 0L);
      double double1 = MathUtils.factorialLog(2502);
      int int0 = MathUtils.lcm(2502, 1582);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-681);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-681));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -681
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = MathUtils.pow(7910884519577875640L, 7910884519577875640L);
      float float0 = MathUtils.indicator((float) 0L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 1.986821492305628E-8;
      doubleArray0[2] = (-500.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3926.21313958);
      doubleArray0[7] = 3049.962922189652;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (3.142 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = MathUtils.pow(9218868437227405312L, 0L);
      int int0 = MathUtils.compareTo((-2742.384024), (-2742.384024), 1.1102230246251565E-16);
      boolean boolean0 = MathUtils.equals(2.3841857910019882E-8, 0.0, (double) 0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-520);
      intArray0[1] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2973.114635533756);
      doubleArray0[1] = (-1290.219780824038);
      double double0 = 1793.84;
      doubleArray0[2] = 1793.84;
      doubleArray0[3] = 2195.58611353213;
      doubleArray0[4] = (-1704.30420030634);
      double double1 = 0.0;
      doubleArray0[5] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.addAndCheck(0L, (long) (-506621257));
      int int1 = 17;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-506621257), 17);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -506,621,257, k = 17
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = (-410);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-410), (-410));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -410
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = (-1357);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 2800.7492618, (-1357));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(21.0, 2.2250738585072014E-308, (-4477));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger0 = BigInteger.valueOf((-546L));
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1775);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1775;
      doubleArray0[1] = (double) (-546L);
      doubleArray0[2] = (double) 1775;
      int int0 = bigInteger0.bitCount();
      doubleArray0[3] = (double) 1775;
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((short) (-546), (-1243));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -546
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(154, 154);
      int int0 = MathUtils.pow(154, 154);
      long long0 = MathUtils.indicator((long) 154);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 1L);
      boolean boolean1 = MathUtils.equals(2999.015, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = MathUtils.sinh(1.01);
      int int0 = MathUtils.sign(0);
      long long0 = MathUtils.indicator((long) 0);
      double double1 = MathUtils.log(0.0, 1L);
      float float0 = MathUtils.indicator((-110.11F));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = MathUtils.sinh((-1692.0906054523261));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0);
      int int0 = MathUtils.pow(0, 4294967295L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 4294967295L;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 4294967295L;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) 4294967295L;
      doubleArray1[4] = (double) 0.0F;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-68));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("org.apache.commons.math.util.MathUtils");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.org.apache.commons.math.util.MathUtils
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(10, 10);
      short short0 = MathUtils.indicator((short) (-1));
      long long0 = MathUtils.mulAndCheck((long) 10, (long) (short) (-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      int int1 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      short short1 = MathUtils.sign((short)1896);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)1;
      intArray0[1] = 4;
      intArray0[2] = 0;
      intArray0[3] = 10;
      int[] intArray1 = new int[8];
      intArray1[0] = 4;
      intArray1[1] = (int) (short)1896;
      intArray1[2] = (int) (short)1896;
      intArray1[3] = (int) (short)1896;
      intArray1[4] = (int) (short) (-1);
      intArray1[5] = 0;
      intArray1[6] = (int) (short)1;
      intArray1[7] = (int) (short) (-1);
      int int2 = MathUtils.distance1(intArray0, intArray1);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, (short)1896);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.sign(0.0);
      int int0 = 4194304;
      int int1 = MathUtils.mulAndCheck(4194304, 12);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 50331648, (double) 50331648, 3.141592653589793);
      long long0 = MathUtils.addAndCheck((long) 4194304, (-1773L));
      double double2 = (-1262.71571873526);
      boolean boolean1 = MathUtils.equals((double) (-1773L), (double) 4194304, (-1262.71571873526));
      double double3 = MathUtils.round((double) 4194304, 406);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-111);
      byte byte0 = (byte)68;
      byteArray0[2] = (byte)68;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      boolean boolean2 = bigInteger1.isProbablePrime(3972);
      int int2 = bigInteger1.bitCount();
      try { 
        MathUtils.pow(bigInteger0, bigInteger1);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-28,348)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = 7910884519577875640L;
      int int0 = MathUtils.pow((-2794), 7910884519577875640L);
      double double0 = MathUtils.normalizeAngle(0.19999954120254515, 0.19999954120254515);
      long long1 = (-1495L);
      long long2 = MathUtils.subAndCheck((long) 0, (-1495L));
      boolean boolean0 = MathUtils.equals(1.7029898543501842E-8, 1.7029898543501842E-8, (double) 7910884519577875640L);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1080L, 1080L);
      boolean boolean0 = MathUtils.equals((double) 1080L, (double) 1166400L, 450);
      byte byte0 = MathUtils.sign((byte) (-53));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.sign((short) (byte) (-53));
      long long1 = MathUtils.pow((long) (short) (-1), 6);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)88);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.1102230246251565E-16, (double) (byte)1, (int) (byte)1);
      long long0 = MathUtils.gcd((long) (byte)1, 4607182418800017408L);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(225.97471233925, 225.97471233925, 356.814201);
      double double0 = MathUtils.scalb(225.97471233925, 215);
      double double1 = MathUtils.sinh(2.2250738585072014E-308);
      double double2 = MathUtils.indicator((-1118.0));
      long long0 = MathUtils.indicator((long) 215);
      int int0 = MathUtils.sign(235);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 225.97471233925;
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = (double) 235;
      doubleArray0[3] = (double) 235;
      doubleArray0[4] = 225.97471233925;
      doubleArray0[5] = (double) 1;
      double double3 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 215);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 215
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = MathUtils.indicator(1054L);
      long long1 = MathUtils.sign(40320L);
      boolean boolean0 = MathUtils.equals((double) 1L, 1137.7239174685, 2766);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)21;
      byte byte0 = (byte)101;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-48);
      byte byte1 = (byte)111;
      byteArray0[5] = (byte)111;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = BigInteger.valueOf(3292L);
      int int0 = bigInteger0.bitCount();
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-138,446,562,078,609^-138,446,562,078,609)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(2482.809811801304, 2482.809811801304);
      double double1 = MathUtils.log(2482.809811801304, 2482.809811801304);
      byte byte0 = MathUtils.sign((byte)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(331.2505666451651, (double) (byte)0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 2356;
      int int1 = MathUtils.pow(2356, 6402373705728000L);
      long long0 = MathUtils.gcd((-1618L), (long) 2356);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("kL|hx{;^");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.kL|hx{;^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = MathUtils.round(10.0, (-2599));
      int int0 = MathUtils.gcd((-502), 0);
      long long0 = MathUtils.gcd((long) (-502), (long) (-502));
      short short0 = MathUtils.sign((short)2318);
      boolean boolean0 = MathUtils.equalsIncludingNaN(10.0, (-555.722));
      boolean boolean1 = MathUtils.equals(0.0, (double) (short)1, (double) (short)1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = bigInteger1.negate();
      BigInteger bigInteger4 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger5 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger6 = null;
      try {
        bigInteger6 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      double double0 = 1893.7696322;
      doubleArray0[1] = 1893.7696322;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte0 = (byte)17;
      byte byte1 = MathUtils.indicator((byte)17);
      long long0 = MathUtils.subAndCheck((-1691L), (long) (byte)17);
      int int0 = 0;
      double double3 = MathUtils.scalb(1893.7696322, 0);
      long long1 = MathUtils.sign((-2894L));
      long long2 = MathUtils.addAndCheck((long) (byte)1, (-457L));
      int int1 = (-320);
      int int2 = MathUtils.sign((-320));
      try { 
        MathUtils.pow(2, (-1858));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2^-1,858)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 31;
      int int1 = 0;
      int int2 = MathUtils.mulAndCheck(31, 0);
      long long0 = MathUtils.addAndCheck((long) 0, 22L);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      long long1 = MathUtils.pow((long) 31, 31);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 22L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1166.0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = MathUtils.gcd(438, 106);
      float float0 = MathUtils.round((-1.0F), 52);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, (-4344.0), 0.0);
      double double0 = MathUtils.round(632.6, 7, 0);
      int int0 = MathUtils.gcd(139, 0);
      double double1 = MathUtils.sign((double) 139);
      int int1 = MathUtils.hash((double[]) null);
      long long0 = MathUtils.addAndCheck(6402373705728000L, (long) 0);
      long long1 = MathUtils.pow(6402373705728000L, 1662);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2032.0);
      doubleArray0[1] = (-335.1012852);
      doubleArray0[2] = 534.837634596;
      doubleArray0[3] = 4454.38;
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash((-1292.705164402347));
      double double0 = MathUtils.binomialCoefficientDouble(846, 846);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = MathUtils.cosh(2.4384203044354907E-8);
      long long0 = MathUtils.pow((-863L), 0);
      long long1 = MathUtils.sign((-2644281811660520851L));
      int int0 = MathUtils.lcm(0, 0);
      short short0 = MathUtils.sign((short) (-795));
      int int1 = MathUtils.indicator((-2924));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(2913, 2915);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2915;
      doubleArray0[1] = (double) 2915;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)4);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 2915, 2913, 641);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 641, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-3775L), (-3775L));
      int int0 = MathUtils.gcd(0, 53);
      double double0 = MathUtils.scalb(2343.4083, 53);
      boolean boolean0 = MathUtils.equals((double) 0, 3.145894820876798E-6, 1780.810126965948);
      try { 
        MathUtils.pow((-1335L), (-3022));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,335^-3,022)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4607182418800017408L, (-2968L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      try { 
        MathUtils.pow(0L, (-1784));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,784)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float float0 = MathUtils.sign((-1.0F));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 11);
      int int0 = (-2180);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (-2180), 11);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long long0 = 0L;
      int int0 = MathUtils.pow(6, 0L);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-6419);
      intArray0[0] = (-6419);
      intArray0[1] = 1949;
      int[] intArray1 = new int[6];
      intArray1[0] = (-6419);
      intArray1[1] = 1949;
      intArray1[2] = 1949;
      intArray1[3] = 1949;
      intArray1[4] = 1949;
      int int1 = 52;
      intArray1[5] = 52;
      int int2 = MathUtils.distanceInf(intArray0, intArray1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-6419), 52);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -6,419, k = 52
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = 192.23939287988262;
      int int0 = 1;
      boolean boolean0 = MathUtils.equalsIncludingNaN(192.23939287988262, 192.23939287988262, 1);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf(",S-W6*2");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.,S-W6*2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(44, 0);
      double double1 = MathUtils.normalizeAngle(0, 0.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      byte byte0 = MathUtils.indicator((byte) (-34));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = MathUtils.pow(973L, 165);
      double double0 = MathUtils.binomialCoefficientLog(165, 42);
      long long1 = MathUtils.pow((-836L), (long) 42);
      int int0 = MathUtils.hash((double) 3296650548676829597L);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 3242;
      int int1 = MathUtils.addAndCheck(17, 3242);
      byte byte0 = MathUtils.indicator((byte) (-10));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-10);
      doubleArray0[3] = (double) 17;
      doubleArray0[4] = (double) (byte) (-1);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = null;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.not();
      // Undeclared exception!
      try { 
        bigInteger1.mod((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        MathUtils.pow(0L, (-4734L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-4,734)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1100.424471636841);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1726.98379671);
      doubleArray0[3] = (-2197.571342048021);
      doubleArray0[4] = (-2466.6);
      doubleArray0[5] = (-1.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,100.424 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathUtils.cosh((-8.699911069));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-8.699911069);
      doubleArray0[1] = 3199.137363377;
      doubleArray0[2] = (-8.699911069);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-8.7 <= 3,199.137)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-790L), 0L);
      int int0 = MathUtils.subAndCheck(121, 121);
      int int1 = MathUtils.compareTo(121, (-1111.87), (-790L));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = MathUtils.lcm((long) 0, (long) 0);
      long long1 = 121645100408832000L;
      long long2 = MathUtils.addAndCheck(0L, 121645100408832000L);
      float float0 = 0.0F;
      int int1 = 546;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 0, 546);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 546, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = (-3604);
      int int1 = MathUtils.sign((-3604));
      int int2 = (-334);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-334));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -334
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte byte0 = (byte)96;
      byte byte1 = MathUtils.indicator((byte)96);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)96;
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = (double) (byte)1;
      doubleArray0[6] = (double) (byte)1;
      doubleArray0[7] = (double) (byte)96;
      doubleArray0[8] = (double) (byte)1;
      double double0 = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1043;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int1 = (-2075);
      intArray0[3] = (-2075);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1333.30998, (double) (-2075));
      double[] doubleArray0 = null;
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double0 = MathUtils.indicator((double) 1043);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = MathUtils.sign((-465L));
      double double0 = MathUtils.factorialDouble(932);
      int[] intArray0 = new int[6];
      intArray0[0] = 932;
      intArray0[1] = 932;
      intArray0[2] = 932;
      intArray0[3] = 932;
      intArray0[4] = 932;
      intArray0[5] = 932;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm((long) 0, (long) 0);
      byte byte0 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Object object0 = new Object();
      boolean boolean1 = bigInteger0.equals(object0);
      BigInteger bigInteger1 = bigInteger0.abs();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 583);
      double double1 = MathUtils.normalizeAngle(583, 0);
      int int0 = MathUtils.hash(0.0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = MathUtils.sign((-2014));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("tT4r");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.tT4r
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-569.17), 0.0, (-569.17));
      // Undeclared exception!
      try { 
        MathUtils.round(1128.821F, 21, 21);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 21, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = MathUtils.lcm(1339L, 0L);
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.sign((double) 0);
      short short0 = MathUtils.indicator((short) (-740));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(1966L, 252L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 252L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long1 = MathUtils.subAndCheck(2218L, 252L);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(61, 61);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.1818181574344635;
      doubleArray0[1] = (double) 122;
      doubleArray0[2] = (double) 122;
      doubleArray0[3] = (double) 122;
      doubleArray0[4] = (double) 61;
      doubleArray0[5] = (double) 61;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (122 >= 122)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2061.0461272282);
      doubleArray0[2] = (-828.0);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1355.78136562, 2815.72);
      double double0 = MathUtils.indicator(1355.78136562);
      double double1 = MathUtils.factorialLog(0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1355.78136562;
      doubleArray0[1] = 2815.72;
      doubleArray0[2] = 2815.72;
      doubleArray0[3] = 1309.104236581;
      doubleArray0[4] = 1355.78136562;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      double double0 = MathUtils.binomialCoefficientLog(590, 590);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, (-2040L));
      double double0 = MathUtils.factorialDouble(63);
      int int0 = MathUtils.sign(63);
      double double1 = MathUtils.sign(1405.62805);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2416;
      intArray0[1] = 7;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.round((double) 2416, 7);
      long long0 = MathUtils.pow((long) 7, (long) 7);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = MathUtils.indicator((-923));
      double double0 = MathUtils.factorialDouble(0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (-923);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = 4294967295L;
      long long1 = MathUtils.lcm(4294967295L, (-3461L));
      int int0 = (-517);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-517));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -517
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = MathUtils.log(1.1921056801463227E-8, 1.1921056801463227E-8);
      float float0 = MathUtils.sign(0.0F);
      double double1 = MathUtils.factorialLog(107);
      int int0 = MathUtils.compareTo((-2381.9768772724738), 396.24881705179166, Double.POSITIVE_INFINITY);
      long long0 = MathUtils.lcm((-2029L), (-2029L));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 396.24881705179166;
      doubleArray0[1] = (double) 2029L;
      doubleArray0[2] = (-2381.9768772724738);
      doubleArray0[3] = (-2050.03);
      double double2 = MathUtils.safeNorm(doubleArray0);
      double double3 = MathUtils.round(0.0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(396.24881705179166, (-1874.83), 107);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(779, 613);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 1893.7696322;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte)17);
      long long0 = MathUtils.subAndCheck((-1691L), (long) (byte)17);
      double double2 = MathUtils.scalb(1893.7696322, 0);
      long long1 = MathUtils.sign((-2894L));
      long long2 = MathUtils.addAndCheck((long) (byte)1, (-457L));
      int int0 = MathUtils.sign(1346);
      try { 
        MathUtils.pow(2, (-1858));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2^-1,858)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      long long0 = MathUtils.lcm((long) 1, 4398046511103L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4398046511103L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.factorialLog(0);
      int int1 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 52;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-1116731362);
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      int int3 = MathUtils.lcm(1604, (-2505));
      double double2 = MathUtils.cosh(0.0);
      long long1 = MathUtils.gcd((long) 52, (long) (-1116731362));
      // Undeclared exception!
      try { 
        MathUtils.factorial(55);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = MathUtils.compareTo(1799.705, 1799.705, 1799.705);
      double double0 = MathUtils.factorialLog(0);
      double double1 = MathUtils.binomialCoefficientDouble(2218, 0);
      boolean boolean0 = MathUtils.equals(1.0, (double) 0, 566.652262489);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2218;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int1 = 0;
      int int2 = MathUtils.mulAndCheck(2218, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 2218);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 2,218
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      long long0 = MathUtils.indicator((-1839L));
      int int0 = MathUtils.sign(0);
      boolean boolean0 = MathUtils.equals((double) 0, 829.1);
      float float0 = MathUtils.round((float) 0, 0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-357.7673319);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-830.996);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) 1.0F;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (0 > -830.996)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3382.8243039713;
      doubleArray0[1] = 722.271541287237;
      doubleArray0[2] = 6.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 3382.8243039713;
      doubleArray1[1] = 722.271541287237;
      double double0 = MathUtils.distance1(doubleArray1, doubleArray1);
      double double1 = MathUtils.round(6.0, 3, 3);
      long long0 = MathUtils.pow((long) 3, 0);
      long long1 = MathUtils.sign((long) 3);
      short short0 = MathUtils.indicator((short)0);
      long long2 = MathUtils.sign((-1092L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long3 = MathUtils.mulAndCheck((long) (short)1, (long) 3);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-549L), (-549L));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-549L);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) (-549L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equals((double) (-549L), (-549.0), (-549.0));
      int[] intArray0 = new int[8];
      intArray0[0] = 186;
      intArray0[1] = 13;
      intArray0[2] = 122;
      intArray0[3] = (-889);
      intArray0[4] = 124;
      intArray0[5] = 94;
      intArray0[6] = (-2069);
      intArray0[7] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.normalizeAngle(0.0, 0L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-889), 13);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -889, k = 13
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
