/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:02:18 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.stream.DoubleStream;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = MathUtils.round(131.29966, 18);
      double double1 = MathUtils.scalb((-960.841), 18);
      double double2 = MathUtils.cosh((-1415.5348722186357));
      long long0 = MathUtils.subAndCheck((long) 18, (long) 18);
      long long1 = MathUtils.gcd(1566L, (long) 18);
      long long2 = MathUtils.lcm((-253L), 2L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 506L;
      double double3 = MathUtils.safeNorm(doubleArray0);
      double double4 = MathUtils.indicator((-209.749));
      long long3 = MathUtils.mulAndCheck(506L, 1566L);
      int int0 = MathUtils.lcm(18, 18);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.16666666666745392, 0.16666666666745392);
      int int0 = MathUtils.gcd(159, 159);
      int int1 = MathUtils.mulAndCheck(1622, 159);
      // Undeclared exception!
      MathUtils.factorialLog(257898);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-104L), 720L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 720L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 5061.491364408676;
      doubleArray0[3] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 6.283)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      short short0 = MathUtils.indicator((short)21);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      int int1 = MathUtils.gcd(2868, 0);
      int int2 = MathUtils.subAndCheck(2868, 507);
      long long0 = MathUtils.pow(0L, 0L);
      int int3 = MathUtils.compareTo(507, (-477.0), 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom((-2675L));
      BigInteger bigInteger1 = BigInteger.probablePrime(1469, mockRandom0);
      int int4 = bigInteger0.signum();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      long long1 = MathUtils.lcm(0L, (long) 2868);
      int int5 = MathUtils.indicator((-2625));
      float float0 = MathUtils.round((-1356.0F), 477);
      double double0 = MathUtils.normalizeAngle(0.0, 1.0);
      float float1 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 507;
      doubleArray0[3] = 0.1818181574344635;
      doubleArray0[4] = (double) (-1);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (507 >= 0.182)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      int int1 = MathUtils.gcd(2868, 0);
      int int2 = MathUtils.subAndCheck(2868, 507);
      long long0 = 0L;
      long long1 = MathUtils.pow(0L, 0L);
      int int3 = MathUtils.compareTo(507, (-477.0), 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom((-2675L));
      BigInteger bigInteger1 = BigInteger.probablePrime(1469, mockRandom0);
      int int4 = bigInteger0.signum();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      long long2 = MathUtils.lcm(0L, (long) 2868);
      int int5 = (-2625);
      int int6 = MathUtils.indicator((-2625));
      float float0 = MathUtils.round((-1356.0F), 477);
      double double0 = MathUtils.normalizeAngle(0.0, 1.0);
      float float1 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 507;
      doubleArray0[3] = 0.1818181574344635;
      doubleArray0[4] = (double) (-1);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (507 >= 0.182)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      long long1 = MathUtils.sign(0L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = (-1419.74F);
      float float1 = MathUtils.indicator((-1419.74F));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("Inexact result from rounding");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.Inexact result from rounding
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      short short0 = MathUtils.sign((short)1226);
      long long0 = MathUtils.pow(3628800L, (int) (short)1);
      int int0 = MathUtils.pow(0, (int) (short)1);
      byte byte0 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.scalb(3628800L, 0);
      float float0 = MathUtils.sign((float) 0);
      double double1 = MathUtils.cosh((byte)0);
      boolean boolean0 = MathUtils.equals((double) 3628800L, 0.0, (double) 3628800L);
      int int1 = MathUtils.mulAndCheck((-1266), 61);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3628800L;
      doubleArray0[1] = 3628800.0;
      doubleArray0[2] = (double) (-77226);
      double double2 = MathUtils.safeNorm(doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0.0F, (double) (byte)1, (double) 3628800L);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1266);
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)1;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      float float1 = MathUtils.round((float) (-1266), 0);
      float float2 = MathUtils.sign((float) (byte)1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1164);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2263.1909270548);
      doubleArray0[1] = 1.225743062930824E-8;
      doubleArray0[2] = (-1466.2404);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 20.0;
      doubleArray0[6] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= -1,466.24)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 0);
      boolean boolean0 = MathUtils.equals(0.0, 3206.13);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 714.1759568, 0.0);
      double double1 = MathUtils.round(Double.NaN, 2080, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-266.887685837693);
      doubleArray0[1] = (-4438.811);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.3333333134651184;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-266.887685837693);
      doubleArray1[3] = 4726.291291759484;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = (double) 2080;
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = 0.0;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      int int0 = MathUtils.sign(0);
      long long0 = MathUtils.indicator((long) 2080);
      short short0 = MathUtils.indicator((short) (-395));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      long long0 = MathUtils.gcd(1253L, 0L);
      double double1 = MathUtils.scalb(1253L, 0);
      long long1 = MathUtils.addAndCheck(2721L, (long) 0);
      long long2 = MathUtils.pow(0L, 1253L);
      int int0 = MathUtils.sign((-74));
      MockRandom mockRandom0 = new MockRandom(142L);
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((-74), mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = MathUtils.indicator(2793L);
      BigInteger bigInteger0 = BigInteger.ONE;
      double double0 = bigInteger0.doubleValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2550L);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      int[] intArray0 = new int[5];
      int int0 = 633;
      intArray0[0] = 633;
      intArray0[1] = 0;
      intArray0[2] = (-31);
      intArray0[3] = 0;
      intArray0[4] = (-274);
      int[] intArray1 = new int[1];
      intArray1[0] = (-274);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.0;
      double double2 = (-864.086512751);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, (-864.086512751));
      long long0 = 0L;
      long long1 = MathUtils.subAndCheck(0L, 0L);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      int int0 = MathUtils.subAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.subAndCheck((-1964L), 0L);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = MathUtils.hash((-118.882024));
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-728290797), (-728290797));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = MathUtils.pow(1765, 343);
      double double0 = MathUtils.sinh((-1524.747143138229));
      // Undeclared exception!
      try { 
        MathUtils.round(254.65, 2104948749);
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.25;
      doubleArray0[1] = (-374.233867056025);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-374.233867056025);
      doubleArray1[1] = (-374.233867056025);
      doubleArray1[2] = (-374.233867056025);
      doubleArray1[3] = (-374.233867056025);
      doubleArray1[4] = 0.25;
      doubleArray1[5] = (-374.233867056025);
      doubleArray1[6] = 0.25;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, doubleArray1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 11.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 2705.880791414474;
      doubleArray0[3] = 210.0;
      doubleArray0[4] = 1583.9365;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 5
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-834.0);
      doubleArray0[1] = 1.5830993332061267E-10;
      doubleArray0[2] = (-856.9358051);
      doubleArray0[3] = 0.5;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.5830993332061267E-10);
      boolean boolean0 = MathUtils.equals(1.5830993332061267E-10, 1.5830993332061267E-10);
      int int0 = MathUtils.addAndCheck(308, 1261);
      long long0 = MathUtils.binomialCoefficient(1261, 1261);
      boolean boolean1 = MathUtils.equals(1.2675934823758863E-8, (double) 1569, 2.2250738585072014E-308);
      double double0 = MathUtils.factorialDouble(1569);
      int int1 = MathUtils.lcm(112, 1261);
      int int2 = MathUtils.pow(2181, (long) 1261);
      double double1 = MathUtils.round((double) (-1244802923), 308);
      float float0 = MathUtils.sign(15.681F);
      long long1 = MathUtils.gcd(1L, 4487L);
      // Undeclared exception!
      try { 
        MathUtils.round((-3977.78221606084), 0, (-2745));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float float0 = MathUtils.round(Float.NaN, 0);
      int int0 = 92;
      int int1 = MathUtils.subAndCheck(92, 0);
      float float1 = MathUtils.sign((float) 92);
      long long0 = MathUtils.lcm(9218868437227405312L, 9218868437227405312L);
      double double0 = MathUtils.binomialCoefficientLog(92, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 9218868437227405312L;
      doubleArray0[2] = (double) 92;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1879.1284803548;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 9218868437227405312L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (9,218,868,437,227,405,300 >= 92)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = MathUtils.gcd((-1L), 39916800L);
      int int0 = 0;
      try { 
        MathUtils.pow(0, (-1124L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,124)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = (-150);
      int int1 = MathUtils.lcm((-150), (-150));
      int int2 = MathUtils.pow(150, (long) 150);
      double double0 = MathUtils.round((double) 150, (-150));
      int int3 = MathUtils.pow((-150), (long) 0);
      double double1 = MathUtils.binomialCoefficientDouble(1407, (-150));
      int int4 = MathUtils.indicator(150);
      long long0 = MathUtils.sign((long) 150);
      long long1 = MathUtils.pow(20922789888000L, 0L);
      int int5 = (-503);
      long long2 = 862L;
      MockRandom mockRandom0 = new MockRandom(862L);
      DoubleStream doubleStream0 = mockRandom0.doubles((long) 0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((-503), 0, mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1437));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,437
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.3999999761581421, 1.176342548272881E-8);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = MathUtils.indicator((-2610.950274411));
      int int0 = 0;
      int int1 = MathUtils.sign(0);
      double double1 = MathUtils.round((-424.125), 0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-425.0);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2280.68594154;
      doubleArray0[3] = (-425.0);
      doubleArray0[4] = (-2610.950274411);
      doubleArray0[5] = 816.383;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-424.125);
      doubleArray0[8] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      double double1 = MathUtils.indicator(0.0);
      int int0 = MathUtils.subAndCheck(0, 0);
      double double2 = MathUtils.binomialCoefficientLog(0, 0);
      int int1 = MathUtils.addAndCheck(0, 0);
      short short0 = MathUtils.sign((short)1631);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) (short)1631, (int) (short)1);
      int int2 = MathUtils.compareTo(1.986821492305628E-8, Double.NaN, (-830.02));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-698.955287648297);
      doubleArray0[6] = (double) (short)1631;
      doubleArray0[7] = 1.986821492305628E-8;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 994.2836268;
      doubleArray1[1] = 0.09090909090909091;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = 197L;
      int int0 = 32;
      long long1 = MathUtils.pow(197L, 32);
      long long2 = (-1314L);
      try { 
        MathUtils.pow((-1314L), (-2968537448437307519L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,314^-2,968,537,448,437,307,519)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = MathUtils.indicator(30);
      int int1 = MathUtils.pow(1, 30);
      int int2 = MathUtils.gcd(1, 30);
      int int3 = 20;
      long long0 = MathUtils.binomialCoefficient(20, 13);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(1, 4);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 4
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1055.8745393), 2286.35);
      long long0 = MathUtils.pow(40320L, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2286.35;
      doubleArray0[1] = 2286.78004411954;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-905.2277057075);
      doubleArray0[4] = (double) 40320L;
      doubleArray0[5] = (double) 40320L;
      doubleArray0[6] = (double) 40320L;
      doubleArray0[7] = (double) 0;
      int int0 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.factorialLog(1);
      double double2 = MathUtils.binomialCoefficientDouble(1, (-869762433));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = (-2160L);
      long long1 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        MathUtils.lcm((-2160L), 9223372036854775807L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = MathUtils.lcm(29L, 29L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 29L, 0.0, 0.0);
      float float0 = MathUtils.round((float) 29L, 226);
      double double0 = MathUtils.normalizeAngle(Float.NaN, 29L);
      double double1 = MathUtils.sinh(0.0);
      long long1 = MathUtils.gcd((long) 226, 29L);
      int int0 = MathUtils.lcm(0, (-1909));
      int int1 = MathUtils.hash((double) 226);
      int int2 = MathUtils.sign(0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0, 55);
      long long2 = MathUtils.lcm(1L, 842L);
      float float1 = MathUtils.indicator((float) 0);
      int int3 = MathUtils.subAndCheck(55, 1080836096);
      int int4 = MathUtils.lcm(1080836096, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1080836041), (-1080836041));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,080,836,041
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = MathUtils.indicator((-967));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-967);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-967);
      doubleArray0[5] = (double) (-967);
      doubleArray0[6] = 10.0;
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) (-1);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      long long0 = MathUtils.lcm((-1784L), (-2444L));
      double double0 = MathUtils.round(0.0, 233);
      float float0 = MathUtils.round(1.0F, 233);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = 362880L;
      long long1 = MathUtils.lcm((-88L), 362880L);
      int int0 = 190;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1955, 190);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = MathUtils.sign(2);
      double double0 = MathUtils.binomialCoefficientDouble(202, 2);
      int int1 = MathUtils.sign(1572);
      int int2 = MathUtils.gcd(20, (-3));
      int int3 = MathUtils.addAndCheck((-1124), (-2147481978));
      int int4 = MathUtils.gcd((-2147483102), (-2146995027));
      float float0 = MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 239;
      int int1 = 111;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(239, 111);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = MathUtils.round(0.5000000000042687, (-855));
      double double1 = MathUtils.log(0.0, (-855));
      try { 
        MathUtils.normalizeArray((double[]) null, Double.NaN);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2428.1250617, 2428.1250617);
      double double0 = MathUtils.normalizeAngle(3.834E-20, 2428.1250617);
      int int0 = MathUtils.pow(0, 0);
      double double1 = MathUtils.round(148.4, (-981));
      int int1 = MathUtils.hash(3294198.0);
      long long0 = MathUtils.mulAndCheck(0L, (-5034868814120038111L));
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (double) (-981), (double) 1);
      int int2 = MathUtils.mulAndCheck((-981), 1);
      short short0 = MathUtils.indicator((short)0);
      byte byte0 = MathUtils.sign((byte)15);
      // Undeclared exception!
      try { 
        MathUtils.round((-58.5015F), 8, 1033);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,033, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      int int0 = MathUtils.compareTo(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.normalizeAngle(0, (-1.0));
      double double2 = MathUtils.factorialDouble(0);
      double double3 = MathUtils.binomialCoefficientLog(0, 0);
      int int1 = (-4215);
      double double4 = MathUtils.scalb((-1019.7181711348766), (-4215));
      boolean boolean1 = MathUtils.equals(Double.POSITIVE_INFINITY, (-1.0), 0.0);
      double double5 = MathUtils.scalb((-914.287408), (-2932));
      double double6 = MathUtils.factorialDouble(2425);
      try { 
        MathUtils.pow(2193, (-3284L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,193^-3,284)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = MathUtils.sign((-4210L));
      short short0 = MathUtils.indicator((short) (-457));
      boolean boolean0 = MathUtils.equals(1.2246467991473532E-16, 1609.628533782, (double) (short) (-457));
      boolean boolean1 = MathUtils.equals(1609.628533782, 1609.628533782, 258);
      long long1 = MathUtils.subAndCheck((-4210L), (long) (short) (-1));
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-457);
      intArray0[1] = 0;
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = 258;
      intArray0[4] = (int) (short) (-1);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)83;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-4795L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (508,755^-4,795)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1343.1708721215);
      doubleArray0[1] = (-1744.2470068794755);
      doubleArray0[2] = 2691.0962741;
      doubleArray0[3] = 373.72085;
      doubleArray0[4] = (-485.9372172346422);
      doubleArray0[5] = 5226.94329;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 373.72085;
      doubleArray1[1] = (-1744.2470068794755);
      doubleArray1[2] = (-1744.2470068794755);
      doubleArray1[3] = (-1744.2470068794755);
      doubleArray1[4] = 7.549789948768648E-8;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.sign(2.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 2.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 0.08713622391223907;
      doubleArray1[7] = 2.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = MathUtils.log(200.5634, 2.4384203044354907E-8);
      boolean boolean0 = MathUtils.equals((-2744.186041931344), 2.4384203044354907E-8, 8);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 8;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      BigInteger bigInteger4 = bigInteger3.gcd(bigInteger0);
      float float0 = bigInteger3.floatValue();
      BigInteger bigInteger5 = bigInteger3.subtract(bigInteger0);
      float float1 = bigInteger0.floatValue();
      int int0 = bigInteger0.intValue();
      BigInteger bigInteger6 = bigInteger0.min(bigInteger3);
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, bigInteger0);
      int int1 = MathUtils.mulAndCheck(8, 3422);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) 3422, 9193070505571053912L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft((byte)0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathUtils.sign((-2991.0));
      short short0 = MathUtils.indicator((short)17);
      int int0 = MathUtils.hash((-1.0));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1074790400);
      doubleArray0[1] = (double) (short)17;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (-2991.0);
      doubleArray0[4] = (double) (short)17;
      doubleArray0[5] = (-680.630391851);
      doubleArray0[6] = (-2991.0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 2948;
      intArray0[2] = 2784;
      intArray0[3] = 0;
      intArray0[4] = (-964);
      intArray0[5] = 78;
      int[] intArray1 = new int[9];
      intArray1[0] = 78;
      intArray1[1] = (-964);
      intArray1[2] = 0;
      intArray1[3] = (-1896);
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = (-964);
      intArray1[8] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (-537.995);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator(1512L);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = (-621);
      int int2 = MathUtils.gcd((-621), (-621));
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-537.995);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      long long0 = 0L;
      long long1 = MathUtils.sign(0L);
      int int0 = (-726);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-726));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -726
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = (-569L);
      long long1 = MathUtils.indicator((-569L));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-569L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long2 = MathUtils.pow((-1L), 0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1299));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,299
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 4991;
      int int1 = 6;
      int int2 = MathUtils.pow(4991, 6);
      long long0 = MathUtils.addAndCheck(0L, (long) 6);
      try { 
        MathUtils.pow(4991, (-2147483648L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4,991^-2,147,483,648)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 857;
      double double0 = MathUtils.binomialCoefficientLog(857, 857);
      double double1 = MathUtils.scalb(0.0, 857);
      float float0 = MathUtils.sign((float) 857);
      int int1 = MathUtils.indicator(3435);
      double double2 = MathUtils.normalizeAngle((-827.742595116417), 0.0);
      int int2 = (-1854);
      double double3 = MathUtils.round(13.07, (-1854), 1);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = (-884);
      try { 
        MathUtils.pow((-884), (-884));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-884^-884)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = MathUtils.log(0.6366197723675814, 0.6366197723675814);
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      float float0 = MathUtils.sign((float) (short)0);
      double double1 = MathUtils.indicator((double) (short)0);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, (-3946.0133));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.0;
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.gcd(0L, (long) 1073741855);
      boolean boolean0 = MathUtils.equals(0.0, 2.0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte)0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1073741855;
      intArray0[1] = (int) (byte)1;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double3 = MathUtils.cosh((-650.925175));
      double double4 = MathUtils.cosh(1073741855);
      int int2 = MathUtils.gcd(0, 1073741855);
      long long1 = MathUtils.binomialCoefficient(1, (byte)1);
      int int3 = MathUtils.mulAndCheck(0, 250);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.andNot(bigInteger0);
      BigInteger bigInteger3 = bigInteger1.negate();
      BigInteger bigInteger4 = bigInteger0.modPow(bigInteger1, bigInteger1);
      long long2 = bigInteger0.longValue();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 1L);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = MathUtils.pow((-1800L), 2206);
      double double0 = MathUtils.sign((double) 0L);
      long long1 = MathUtils.gcd(0L, (long) 2206);
      int int0 = MathUtils.subAndCheck(0, 2206);
      double double1 = MathUtils.scalb(0.0, (-2870));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2206L;
      doubleArray0[1] = (double) (-1800L);
      doubleArray0[2] = (double) (-2870);
      doubleArray0[3] = (double) 2206L;
      doubleArray0[4] = 1.1730463525082348E-7;
      doubleArray0[5] = (double) (-2870);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly decreasing (-2,870 <= 2,206)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)44;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1889);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 507;
      intArray0[2] = 19;
      intArray0[3] = 0;
      intArray0[4] = 113;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.sign((-2755));
      int int1 = MathUtils.compareTo(113, 1.1921056801463227E-8, 507);
      // Undeclared exception!
      try { 
        MathUtils.lcm((long) 507, 9218868437227405312L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = MathUtils.pow(64L, 0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1329);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 92;
      int[] intArray1 = new int[5];
      intArray1[0] = (-1329);
      intArray1[1] = 0;
      intArray1[2] = (-1329);
      intArray1[3] = 92;
      intArray1[4] = (-1329);
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-3057.6930132059), 0.0, (-3057.6930132059));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3057.6930132059);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3057.6930132059);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3057.6930132059);
      doubleArray0[7] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.sign((-1492));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = MathUtils.lcm(3151L, (-1599L));
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-801.01), 0.0, (-801.01));
      long long0 = MathUtils.sign(0L);
      int int0 = MathUtils.compareTo(42.0, 0.0, 0L);
      int int1 = MathUtils.gcd(1, 3640);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 1, 3640);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = (-390L);
      long long1 = MathUtils.addAndCheck((-390L), (-390L));
      int int0 = 2097;
      // Undeclared exception!
      try { 
        MathUtils.factorial(2097);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = (-352);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-352));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -352
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = (-2420);
      try { 
        MathUtils.pow(bigInteger0, (-2420));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,420)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-262.6662920117);
      doubleArray0[2] = (-1147.838706);
      doubleArray0[3] = (-484.253815776094);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 3392.530681475);
      double double0 = MathUtils.cosh(3.141592653589793);
      boolean boolean0 = MathUtils.equals((-262.6662920117), (-2920.953));
      byte byte0 = MathUtils.sign((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(3392.530681475, 0.07490822288864472, (-1770));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = MathUtils.indicator(Double.NaN);
      double double1 = MathUtils.indicator(Double.NaN);
      double double2 = MathUtils.sign(Double.NaN);
      int int0 = MathUtils.compareTo(Double.NaN, Double.NaN, Double.NaN);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 447.2172582762;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 1;
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator(1.0F);
      int int1 = MathUtils.lcm(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-566), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -566, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 121.7316262;
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = MathUtils.factorialLog(1714);
      int[] intArray0 = new int[3];
      intArray0[0] = 1714;
      intArray0[1] = 1714;
      intArray0[2] = 1714;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-2549.37685));
      int int1 = MathUtils.hash((double[]) null);
      double double1 = MathUtils.round((-2549.37685), 1731);
      int int2 = MathUtils.hash((double[]) null);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1261.737443), (double) 0, (double) 1714);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) 1714, (-2549.37685));
      int int3 = MathUtils.compareTo(0, 0.058823529411764705, (-34.591));
      double double2 = MathUtils.sign((double) 1714);
      boolean boolean3 = MathUtils.equalsIncludingNaN((double) (-1), (double) 1714, 1714);
      float float0 = MathUtils.indicator((float) 1731);
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(9223372036854775807L, (-551L));
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 551 + 9,223,372,036,854,775,807
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(681.1763, 681.1763);
      int int0 = (-531);
      int int1 = MathUtils.addAndCheck((-531), 0);
      int int2 = 0;
      double double1 = MathUtils.round((-759.6759619463684), (-521), 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-531);
      doubleArray0[1] = (-759.6759619463684);
      doubleArray0[2] = (double) 0;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double3 = MathUtils.cosh(0.0);
      int int3 = (-376);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-521), (-376));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -521, k = -376
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck((-421L), 2108L);
      double double1 = MathUtils.round((double) 1687L, 0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.addAndCheck(0L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.equals((-0.49999999999999994), (double) 0L, (-218));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 28;
      long long0 = MathUtils.pow(0L, 28);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.shiftRight(0);
      BigInteger bigInteger3 = bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = MathUtils.sign(3766);
      int[] intArray0 = new int[6];
      intArray0[0] = 3766;
      intArray0[1] = 3766;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 3766;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      byte byte0 = MathUtils.indicator((byte)30);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.scalb(0, (-398));
      long long0 = MathUtils.lcm(0L, (long) 0);
      double double1 = MathUtils.factorialDouble(17);
      float float0 = MathUtils.sign((float) 3766);
      int int4 = MathUtils.indicator(4074);
      long long1 = MathUtils.addAndCheck((-1389L), 0L);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = MathUtils.indicator(9193070505571053912L);
      boolean boolean0 = MathUtils.equals(3.834E-20, (double) 9193070505571053912L, (-3857.4333007369));
      byte byte0 = (byte)83;
      byte byte1 = MathUtils.indicator((byte)83);
      long long1 = MathUtils.sign(9193070505571053912L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3034.28);
      doubleArray0[1] = 538.0;
      doubleArray0[2] = 1516.359107399692;
      doubleArray0[3] = (-2078.920242809);
      doubleArray0[4] = 5169.946;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1787.172566767;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-256.8220309205), 0.11111095942313305);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.11111095942313305;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2147;
      intArray0[2] = 121;
      intArray0[3] = 1880;
      intArray0[4] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      short short0 = MathUtils.indicator((short) (-2599));
      // Undeclared exception!
      try { 
        MathUtils.round(10.0, 0, (-684));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = 1473L;
      long long1 = MathUtils.addAndCheck(1473L, (-812L));
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 661L, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 158;
      intArray0[1] = 0;
      intArray0[2] = (-1512);
      intArray0[3] = (-1008);
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.log((-3600.327201195028), (-3600.327201195028));
      int int0 = MathUtils.compareTo(Double.NaN, (-3600.327201195028), (-56.9693045941608));
      long long0 = MathUtils.subAndCheck((long) 1, 1720L);
      double double1 = 0.0;
      double double2 = MathUtils.sinh(0.0);
      double double3 = (-2924.991735506);
      double double4 = MathUtils.indicator((-2924.991735506));
      long long1 = MathUtils.mulAndCheck(1720L, 1547L);
      int int1 = 269;
      float float0 = MathUtils.round((float) (-1719L), 269, 1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(1, 269);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 269
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = MathUtils.hash((-1676.61212651));
      float float0 = MathUtils.sign(Float.NaN);
      long long0 = MathUtils.lcm(1562L, 1562L);
      // Undeclared exception!
      try { 
        MathUtils.round(4324.3850211, 216, (-126));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      short short0 = (short) (-2509);
      short short1 = MathUtils.indicator((short) (-2509));
      int int0 = 0;
      float float0 = MathUtils.round(6447.2314F, 0, 0);
      int int1 = 0;
      try { 
        MathUtils.pow(0, (long) (short) (-2509));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,509)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-775L), 0L);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-5769.811104154), 314.4465183563);
      int int0 = MathUtils.hash((-1292.48523447289));
      short short0 = MathUtils.indicator((short) (-212));
      int int1 = MathUtils.hash((-0.2499999997677497));
      double double0 = MathUtils.indicator(314.4465183563);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.pow(546, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, (double) 546, 1.986821492305628E-8);
      double[] doubleArray0 = null;
      int int1 = MathUtils.hash((double[]) null);
      byte byte0 = MathUtils.indicator((byte) (-60));
      int int2 = 0;
      float float0 = MathUtils.round(0.0F, 546, 0);
      long long0 = MathUtils.pow((-302932621132653753L), 0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.binomialCoefficientDouble(2638, 2638);
      int int0 = MathUtils.compareTo(1.0, 2351.0287703111, 1.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 2351.0287703111;
      doubleArray0[4] = (double) 2638;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck((long) 2638, (-1906L));
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2638);
      int int1 = MathUtils.sign(0);
      double double2 = MathUtils.sinh((-1467.95));
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 2351.0287703111;
      doubleArray2[1] = 2351.0287703111;
      doubleArray2[2] = 2351.0287703111;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 2351.0287703111;
      doubleArray2[5] = 2351.0287703111;
      doubleArray2[6] = 0.0;
      double double3 = MathUtils.distance1(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = 10.0;
      doubleArray0[7] = (double) (short)1;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(1753L, 1753L);
      double double0 = MathUtils.normalizeAngle(1753L, 0.0);
      int int0 = 21;
      double double1 = MathUtils.binomialCoefficientDouble(21, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 3506L;
      doubleArray0[3] = (double) 3506L;
      doubleArray0[4] = (double) 3506L;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-4269.7834);
      doubleArray0[8] = (-0.0087007031045232);
      int int1 = MathUtils.hash(doubleArray0);
      short short0 = (short)2076;
      short short1 = MathUtils.sign((short)2076);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 4 and 5 are not increasing (3,506 > 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = MathUtils.gcd(6402373705728000L, 6402373705728000L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 6402373705728000L;
      doubleArray0[1] = (double) 6402373705728000L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double double0 = MathUtils.sign(903.5986019061);
      long long1 = MathUtils.sign(6402373705728000L);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      short short0 = MathUtils.indicator((short)38);
      short short1 = MathUtils.sign((short)19);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.round(819.564658281, (-99));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = 1473;
      boolean boolean0 = MathUtils.equals((-272.1), (-272.1), 1473);
      boolean boolean1 = MathUtils.equals((double) 1473, 0.0, 2496.6104671551325);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int1 = MathUtils.mulAndCheck(1473, 2042);
      int int2 = (-585);
      int int3 = MathUtils.indicator((-585));
      long long0 = 3628800L;
      long long1 = MathUtils.mulAndCheck(0L, 3628800L);
      try { 
        MathUtils.pow(2042, (long) (-585));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,042^-585)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-229.60636638), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = MathUtils.lcm((-585), (-2456));
      short short0 = MathUtils.sign((short) (-2389));
      int int1 = MathUtils.addAndCheck((int) (short) (-2389), (int) (short) (-1));
      boolean boolean0 = MathUtils.equals((double) (short) (-2389), (double) (short) (-1), 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1436760;
      doubleArray0[1] = (double) (-2390);
      doubleArray0[2] = 2198.1755938;
      doubleArray0[3] = (double) (-2390);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,436,760 >= -2,390)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = (-901);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-901), (-901));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -901
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = MathUtils.gcd((-679), (-679));
      boolean boolean0 = MathUtils.equals(0.875, (double) (-679), 0.875);
      int[] intArray0 = new int[4];
      intArray0[0] = (-679);
      intArray0[1] = (-679);
      intArray0[2] = (-679);
      intArray0[3] = 679;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.7553817452272217E-6;
      MathUtils.checkOrder(doubleArray0);
      double double0 = MathUtils.factorialLog(0);
      boolean boolean0 = MathUtils.equals((double) 0, (-1324.54425));
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      long long1 = 2935890503282001226L;
      long long2 = 0L;
      long long3 = MathUtils.pow(2935890503282001226L, 0L);
      long long4 = 0L;
      long long5 = MathUtils.addAndCheck(0L, 1L);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.pow(1957, 2057L);
      int int2 = 10;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 10);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 10
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(10.0, 10.0);
      long long0 = MathUtils.lcm(0L, 0L);
      int int0 = MathUtils.hash((-1036.711734959));
      long long1 = MathUtils.lcm(0L, 0L);
      int int1 = MathUtils.compareTo(0.0, 0L, 10.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.19999999999923582;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 0.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int2 = MathUtils.hash((-107.4));
      int int3 = MathUtils.hash(doubleArray0);
      int int4 = MathUtils.pow(250, 0L);
      int[] intArray0 = new int[0];
      int int5 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = 133;
      float float0 = MathUtils.round((-81.4781F), 133);
      long long0 = MathUtils.indicator((-4639L));
      int int1 = MathUtils.pow(133, 133);
      try { 
        MathUtils.pow(2023996597, (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,023,996,597^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 61);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 61
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(0.0);
      double double1 = MathUtils.factorialLog(981);
      float float0 = MathUtils.indicator((float) 0);
      double double2 = MathUtils.round(1.3245471311735498E-8, 981);
      float float1 = MathUtils.indicator(2075.976F);
      int int1 = MathUtils.addAndCheck(0, 26);
      double double3 = MathUtils.normalizeAngle(4614.491726738, 702.22);
      int int2 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((-1758.2331), 0, 6187);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1291);
      intArray0[1] = 0;
      intArray0[2] = 19;
      intArray0[3] = 63;
      intArray0[4] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.lcm(0L, (long) 19);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.sinh(0L);
      int int1 = MathUtils.addAndCheck(0, (-1291));
      long long1 = MathUtils.sign((long) 19);
      boolean boolean0 = MathUtils.equals(0.016, Double.NEGATIVE_INFINITY, 0.0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long long0 = MathUtils.indicator((-1527L));
      double double0 = MathUtils.EPSILON;
      double double1 = MathUtils.sinh(1.1102230246251565E-16);
      double double2 = MathUtils.sign(5.551115123125783E-17);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.1102230246251565E-16;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 5.551115123125783E-17;
      doubleArray0[4] = 5.551115123125783E-17;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = MathUtils.pow(525L, 525L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1494097597869139965L;
      doubleArray0[1] = (-3776.2358431);
      doubleArray0[2] = (double) 525L;
      doubleArray0[3] = (double) 1494097597869139965L;
      doubleArray0[4] = (double) 1494097597869139965L;
      doubleArray0[5] = (double) 1494097597869139965L;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 1494097597869139965L;
      doubleArray0[8] = (double) 1494097597869139965L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(1494097597869139965L, 525L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.log(0.0, 1L);
      double double1 = MathUtils.factorialDouble(158);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 0.0;
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = MathUtils.sinh((-2411.900394513364));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 1030;
      // Undeclared exception!
      try { 
        MathUtils.round((-895.42255F), 1030, 1030);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,030, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = MathUtils.sign((-69.95679363559));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-69.95679363559);
      doubleArray0[2] = (-69.95679363559);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-69.95679363559);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-69.95679363559);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int int0 = (-457);
      try { 
        MathUtils.pow(1825L, (-457));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,825^-457)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = MathUtils.lcm(3151L, (-1599L));
      short short0 = MathUtils.indicator((short)2);
      boolean boolean0 = MathUtils.equals(0.5, 1.304E19);
      double double0 = MathUtils.sign((-642.41619));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, (-3082.57217876686), 1991.15532737437);
      // Undeclared exception!
      try { 
        MathUtils.round((-4210.7F), (-705), (-705));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -705, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3101.8998852);
      doubleArray0[2] = (-92.0604297321);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-4108.95431841);
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.scalb(1.304E19, 175);
      try { 
        MathUtils.pow((-3431L), (-527));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,431^-527)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(235, 235);
      long long0 = MathUtils.pow(9218868437227405312L, 55225);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.divide(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      short short0 = MathUtils.sign((short)19);
      short short1 = MathUtils.sign((short) (-1920));
      float float0 = MathUtils.sign((float) (short) (-1920));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1.0F), 0.0, (int) (short)19);
      int int1 = MathUtils.indicator((int) (short) (-1920));
      int int2 = MathUtils.mulAndCheck((int) (short)19, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (short) (-1920);
      doubleArray0[6] = (double) (short)1;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int3 = MathUtils.addAndCheck(0, 0);
      float float1 = MathUtils.indicator((float) (short)19);
      long long0 = MathUtils.pow((long) (short) (-1920), (long) (short)1);
      double double1 = MathUtils.scalb(0.0, (-1));
      double double2 = MathUtils.cosh(662.5904);
      boolean boolean1 = MathUtils.equals((double) 0, Double.NaN, 160);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, (-1064L));
      int int0 = MathUtils.mulAndCheck(20, 20);
      long long1 = MathUtils.binomialCoefficient(20, 20);
      float float0 = MathUtils.round(0.0F, 20);
      boolean boolean0 = MathUtils.equals(222.371582136, (double) 20, 1568);
      int int1 = MathUtils.pow(1568, 400);
      long long2 = MathUtils.sign(2266L);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      int int0 = MathUtils.hash((double) (short)0);
      long long0 = MathUtils.lcm((long) (short)0, (long) (short)0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(328);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = MathUtils.compareTo((-1786.633), (-1786.633), (-1786.633));
      double double0 = MathUtils.factorialDouble(0);
      long long0 = MathUtils.factorial(0);
      long long1 = MathUtils.pow(0L, 1L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = MathUtils.indicator(0.0F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(512.0, 512.0, 1.304E19);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2773.566190638047);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.13333332538604736);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
      float float0 = MathUtils.sign(1.0F);
      short short0 = MathUtils.sign((short) (-989));
      double double2 = MathUtils.scalb(2733.8541, 139);
      double double3 = MathUtils.normalizeAngle(139, 0.0);
      int int0 = MathUtils.addAndCheck((int) (short) (-1), (int) (short) (-989));
      short short1 = MathUtils.sign((short)784);
      double double4 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-295), (-755));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -295
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1104.654847), (-409.7019047074));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (-5636.89822032);
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = (-2458.4712);
      doubleArray0[4] = (-0.49999999999999994);
      doubleArray0[5] = 299.09;
      doubleArray0[6] = 3586.5733947;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (\u221E >= -5,636.898)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = MathUtils.sign(61);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 61;
      doubleArray0[1] = (double) 61;
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.round((float) 1, 61);
      float float1 = MathUtils.sign((float) 1);
      try { 
        MathUtils.pow((-279L), (-898L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-279^-898)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathUtils.log(1523.285809094235, 0.0);
      int int0 = MathUtils.pow(252, 252);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, (double) 252, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = MathUtils.indicator(402);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 402, 0.0, 2657);
      int int1 = MathUtils.lcm(1, 2657);
      float float0 = MathUtils.sign((float) 1);
      float float1 = MathUtils.sign((float) 402);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = MathUtils.sign(189);
      int int1 = MathUtils.indicator(122);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("<:3oFu*tNp8r;N0i");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.<:3oFu*tNp8r;N0i
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      long long0 = MathUtils.addAndCheck(0L, 0L);
      int int0 = MathUtils.indicator((-1035));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1035);
      intArray0[1] = (-1035);
      intArray0[2] = (-1035);
      intArray0[3] = (-1);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1410.60925193579;
      doubleArray0[2] = 825.418004;
      doubleArray0[3] = (-3123.05451293);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,410.609 >= 825.418)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = 4503599627370496L;
      long long1 = (-1209L);
      try { 
        MathUtils.pow(4503599627370496L, (-1209L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4,503,599,627,370,496^-1,209)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double double0 = MathUtils.scalb(1360.6283, 628);
      int int0 = MathUtils.sign(0);
      short short0 = MathUtils.sign((short) (-1147));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) 628;
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (short) (-1));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = MathUtils.pow(2118L, 4294967295L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2118L;
      doubleArray0[1] = (double) 2118L;
      doubleArray0[2] = (double) 2118L;
      doubleArray0[3] = (double) 4294967295L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger1.xor(bigInteger2);
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0L);
      int int0 = (-4632);
      double double0 = MathUtils.scalb(0.0, (-4632));
      double double1 = MathUtils.cosh(0.0);
      // Undeclared exception!
      try { 
        MathUtils.round(1.0, (-4632), (-4632));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = MathUtils.pow(173, 173);
      byte byte0 = MathUtils.sign((byte)9);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)9;
      doubleArray0[1] = (double) (byte)9;
      doubleArray0[2] = (double) (byte)1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (9 <= 9)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(522L, 362880L);
      float float0 = MathUtils.round(0.0F, 0);
      try { 
        MathUtils.pow(0, (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double double0 = MathUtils.log(1406.1, 1406.1);
      double double1 = MathUtils.sign(1406.1);
      int int0 = MathUtils.addAndCheck((-1976), 1768);
      int int1 = MathUtils.mulAndCheck((-1976), (-1976));
      int int2 = MathUtils.subAndCheck((-208), 224);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = MathUtils.indicator(402);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 402, 0.0, 2657);
      int int1 = MathUtils.lcm(1, (-311));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 219;
      intArray0[0] = 219;
      intArray0[1] = 182;
      int int1 = 0;
      intArray0[2] = 0;
      int int2 = 0;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = (-9218868437227405313L);
      long long1 = MathUtils.subAndCheck(993L, (-9218868437227405313L));
      boolean boolean0 = MathUtils.equals((-1199.6), (double) 9218868437227406306L, (-51.372551));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 993L;
      doubleArray0[1] = (double) 993L;
      double double0 = 1971.1642857784698;
      doubleArray0[2] = 1971.1642857784698;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = (-1);
      int int1 = MathUtils.addAndCheck((-1), (-1));
      double double2 = MathUtils.cosh(0.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("W-q)Y{xx");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.W-q)Y{xx
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = MathUtils.gcd(1104, 1104);
      double double0 = MathUtils.binomialCoefficientDouble(1560, 1560);
      int int1 = MathUtils.subAndCheck(1560, (-284));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-4867.244931), (double) 1104);
      int int2 = MathUtils.lcm(135, 1104);
      int int3 = MathUtils.subAndCheck((-2623), (-284));
      long long0 = MathUtils.binomialCoefficient(0, (-1472));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long long0 = MathUtils.indicator(9193070505571053912L);
      long long1 = MathUtils.addAndCheck(9193070505571053912L, 1249L);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      short short0 = MathUtils.sign((short)0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 9193070505571053912L;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 1249L;
      doubleArray0[8] = (double) 1249L;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.normalizeAngle(0.0, (short)0);
      int int0 = MathUtils.lcm(0, 1025);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(2, (-1604));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1604);
      doubleArray0[1] = (double) (-1604);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (-1604);
      doubleArray0[4] = (double) 2;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(0, 0);
      int int2 = MathUtils.addAndCheck(0, 0);
      int int3 = MathUtils.gcd(0, 0);
      int int4 = MathUtils.indicator(0);
      // Undeclared exception!
      try { 
        MathUtils.equals(1439.23, (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.sign((-88.28124F));
      byte byte0 = MathUtils.sign((byte) (-96));
      int int0 = MathUtils.compareTo((-1.0F), (-1.0), 0.2);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-96);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (-1.0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2837.953066));
      int int1 = MathUtils.indicator(0);
      long long0 = MathUtils.gcd(4398046511103L, (-2369L));
      long long1 = MathUtils.subAndCheck(2047L, 122L);
      long long2 = MathUtils.indicator(0L);
      int int2 = MathUtils.mulAndCheck(0, 193);
      BigInteger bigInteger0 = BigInteger.ONE;
      long long3 = bigInteger0.longValue();
      int int3 = bigInteger0.intValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 4398046511103L);
      int int4 = MathUtils.compareTo(2047L, 0.0, (-88.28124F));
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1169));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,169
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      double double0 = MathUtils.sign(0.0);
      float float1 = MathUtils.sign(0.0F);
      byte byte0 = (byte)76;
      byte byte1 = MathUtils.sign((byte)76);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0.0F;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.cosh(6.283185307179586);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger("R<)Ug7H~2:fdx{14C", 1435);
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }
}
