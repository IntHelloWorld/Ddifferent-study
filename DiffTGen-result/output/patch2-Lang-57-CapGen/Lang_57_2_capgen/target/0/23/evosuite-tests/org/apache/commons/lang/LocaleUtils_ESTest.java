/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:16:32 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("yaR#bJ^f5'jWB]R.|41");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: yaR#bJ^f5'jWB]R.|41
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("ar");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("9E!1G6e");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 9E!1G6e
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("1");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 1
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = new Locale(",S%h=&Hv1l ID(\"sm%", "i0dDg", "i0dDg");
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("en");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage((String) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List list0 = LocaleUtils.availableLocaleList();
      Locale locale0 = new Locale("", "1", "1");
      String[] stringArray0 = Locale.getISOLanguages();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale1 = Locale.GERMAN;
      String string0 = locale1.getDisplayCountry(locale0);
      Object object0 = locale1.clone();
      Locale.setDefault(locale_Category0, locale1);
      String string1 = locale0.getDisplayScript();
      String string2 = locale0.getDisplayVariant();
      List list2 = LocaleUtils.localeLookupList(locale0, locale0);
      List list3 = LocaleUtils.countriesByLanguage("6!%WV*C8o8-c{~<");
      List list4 = LocaleUtils.countriesByLanguage("6!%WV*C8o8-c{~<");
      List list5 = LocaleUtils.languagesByCountry((String) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      String string0 = locale0.getDisplayName();
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      List list1 = LocaleUtils.localeLookupList(locale0);
      Locale locale1 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      Locale locale2 = locale0.stripExtensions();
      String string1 = locale0.getDisplayVariant(locale1);
      String string2 = locale0.getDisplayName(locale1);
      String[] stringArray0 = Locale.getISOCountries();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale3 = Locale.JAPANESE;
      String[] stringArray1 = Locale.getISOLanguages();
      String string3 = locale3.getDisplayName();
      Locale.setDefault(locale3);
      Locale.setDefault(locale_Category0, locale1);
      List list2 = LocaleUtils.languagesByCountry("?h*_~=:I}us$Z");
      List list3 = LocaleUtils.availableLocaleList();
      List list4 = LocaleUtils.localeLookupList(locale0);
      List list5 = LocaleUtils.availableLocaleList();
      List list6 = LocaleUtils.countriesByLanguage("<6SDUv");
      List list7 = LocaleUtils.languagesByCountry("");
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      List list8 = LocaleUtils.countriesByLanguage("QZsu");
      List list9 = LocaleUtils.countriesByLanguage("fran\u00E7ais");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      String string0 = locale0.getDisplayName();
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      List list1 = LocaleUtils.localeLookupList(locale0);
      Locale locale1 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      Locale locale2 = locale0.stripExtensions();
      String string1 = locale0.getDisplayVariant(locale1);
      String string2 = locale0.getDisplayName(locale1);
      String[] stringArray0 = Locale.getISOCountries();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale3 = Locale.JAPANESE;
      String[] stringArray1 = Locale.getISOLanguages();
      String string3 = locale3.getDisplayName();
      Locale.setDefault(locale3);
      Locale.setDefault(locale_Category0, locale1);
      List list2 = LocaleUtils.languagesByCountry("?h*_~=:I}us$Z");
      Set set1 = LocaleUtils.availableLocaleSet();
      LocaleUtils localeUtils0 = new LocaleUtils();
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("fran\u00E7ais");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: fran\u00E7ais
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.JAPAN;
      List list0 = LocaleUtils.localeLookupList(locale0, locale1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("x{9 i=V.E[_K.<k$0\"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: x{9 i=V.E[_K.<k$0\"
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("z. ?YE.OZeMn]+ \u0003|");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: z. ?YE.OZeMn]+ \u0003|
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("Vt\"X(");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: Vt\"X(
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
  }
}
