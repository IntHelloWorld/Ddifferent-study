/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:13:06 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("ja");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("aO");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: aO
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("f$gAa&!");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: f$gAa&!
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = new Locale(";qs8zw]''<\"V7#WEE#)", ";qs8zw]''<\"V7#WEE#)", "90zkwVqGB]{|");
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List list0 = LocaleUtils.availableLocaleList();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      List list0 = LocaleUtils.countriesByLanguage((String) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.ENGLISH;
      String string0 = locale1.getDisplayScript();
      String string1 = locale0.getDisplayVariant(locale1);
      String string2 = locale0.getDisplayScript();
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      List list1 = LocaleUtils.localeLookupList(locale0, locale0);
      List list2 = LocaleUtils.localeLookupList(locale1);
      List list3 = LocaleUtils.languagesByCountry("");
      List list4 = LocaleUtils.countriesByLanguage("");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list5 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      Locale locale2 = Locale.lookup(linkedList0, list5);
      Object object0 = linkedList0.clone();
      List list6 = LocaleUtils.countriesByLanguage("th");
      List list7 = LocaleUtils.localeLookupList(locale1, locale1);
      List list8 = LocaleUtils.localeLookupList(locale0, locale1);
      List list9 = LocaleUtils.localeLookupList(locale1, locale0);
      List list10 = LocaleUtils.localeLookupList((Locale) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry("");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = new Locale("", "{1_K>B~", ">!}{6u]:aU~ q5}SJ");
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("org.apache.commons.lang.LocaleUtils");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: org.apache.commons.lang.LocaleUtils
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("z?m>qm6;");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: z?m>qm6;
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("~pX7F[<*C!\"-a,(:y");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ~pX7F[<*C!\"-a,(:y
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale(" k1: ");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format:  k1: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      Locale locale0 = Locale.KOREA;
      boolean boolean0 = locale0.hasExtensions();
      boolean boolean1 = LocaleUtils.isAvailableLocale(locale0);
      List list0 = LocaleUtils.languagesByCountry((String) null);
  }
}
