/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:13:08 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("ja");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("z]w%:)0aX_{\"ZnPYX;-");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: z]w%:)0aX_{\"ZnPYX;-
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("fJ_5\"fB");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: fJ_5\"fB
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List list0 = LocaleUtils.availableLocaleList();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      String[] stringArray0 = Locale.getISOLanguages();
      String string0 = locale0.toLanguageTag();
      Object object0 = locale0.clone();
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      Object object1 = locale0.clone();
      List list0 = LocaleUtils.localeLookupList(locale0);
      List list1 = LocaleUtils.countriesByLanguage("ja");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = null;
      String string1 = null;
      LocaleUtils localeUtils0 = new LocaleUtils();
      Locale locale0 = Locale.ITALIAN;
      List list0 = LocaleUtils.localeLookupList(locale0);
      List list1 = LocaleUtils.countriesByLanguage((String) null);
      Locale locale1 = LocaleUtils.toLocale((String) null);
      String string2 = "";
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("ko");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry("");
      List list1 = LocaleUtils.languagesByCountry((String) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("ko");
      Locale locale1 = Locale.TAIWAN;
      String string0 = locale0.getDisplayScript(locale1);
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("ms", (Map<String, List<String>>) null);
      List<Locale.LanguageRange> list1 = Locale.LanguageRange.mapEquivalents(list0, (Map<String, List<String>>) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list2 = Locale.filterTags(list1, (Collection<String>) linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list3 = Locale.filterTags(list1, (Collection<String>) list2, locale_FilteringMode0);
      List list4 = LocaleUtils.countriesByLanguage("ko");
      List list5 = LocaleUtils.languagesByCountry("ko");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry("{pak/Daxw3]0zU\"fz");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = new Locale("", "2x6;TwrbO_r3L/7", "org.apache.commons.lang.LocaleUtils");
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("{pak/Daxw3]0zU\"fz");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: {pak/Daxw3]0zU\"fz
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale(" =^M}[)55");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format:  =^M}[)55
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("hu]%9");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: hu]%9
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("ko");
      Locale locale1 = Locale.TAIWAN;
      List list0 = LocaleUtils.localeLookupList(locale1, locale0);
  }
}
