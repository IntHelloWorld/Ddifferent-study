/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:14:55 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("zh-CN");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: zh-CN
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("$E_WE1");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: $E_WE1
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage((String) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List list0 = LocaleUtils.availableLocaleList();
      List list1 = LocaleUtils.languagesByCountry("JP");
      List list2 = LocaleUtils.availableLocaleList();
      Locale locale0 = Locale.US;
      String string0 = locale0.getDisplayVariant();
      List list3 = LocaleUtils.localeLookupList(locale0);
      List list4 = LocaleUtils.countriesByLanguage("");
      String string1 = locale0.getDisplayCountry();
      List list5 = LocaleUtils.availableLocaleList();
      List list6 = LocaleUtils.localeLookupList(locale0);
      String string2 = locale0.getDisplayCountry(locale0);
      List list7 = LocaleUtils.countriesByLanguage("");
      List list8 = LocaleUtils.localeLookupList(locale0, locale0);
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      List list0 = LocaleUtils.localeLookupList(locale0);
      List list1 = LocaleUtils.countriesByLanguage("");
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list2 = LocaleUtils.localeLookupList(locale0, locale0);
      List list3 = LocaleUtils.languagesByCountry("");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry((String) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = new Locale("org.apache.commons.lang.LocaleUtils", "", "d_|5H3~uOJ8Zwwv@gJG");
      List list0 = LocaleUtils.localeLookupList(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      List list0 = LocaleUtils.localeLookupList(locale0);
      List list1 = LocaleUtils.countriesByLanguage("");
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list2 = LocaleUtils.localeLookupList(locale0, locale0);
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
      List list3 = LocaleUtils.languagesByCountry("");
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("1N~Fa");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 1N~Fa
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("hyy]L,O`Wh$");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: hyy]L,O`Wh$
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("|:Q?B0W~$-");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: |:Q?B0W~$-
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("vE:)cE!]~ p=, Syc$?");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: vE:)cE!]~ p=, Syc$?
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("sr");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null);
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
      List list1 = LocaleUtils.languagesByCountry("");
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list2 = LocaleUtils.languagesByCountry("");
      List list3 = LocaleUtils.countriesByLanguage("be");
  }
}
