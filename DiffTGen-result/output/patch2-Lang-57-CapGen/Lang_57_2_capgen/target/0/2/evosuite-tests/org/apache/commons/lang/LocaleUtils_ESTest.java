/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:13:05 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ja-JP");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ja-JP
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("a&");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: a&
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale(">a~BelY");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: >a~BelY
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("xz')^");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: xz')^
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage((String) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry("");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry((String) null);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = Locale.ITALIAN;
      String string0 = locale1.getDisplayLanguage();
      String string1 = locale1.getDisplayLanguage();
      String string2 = locale0.getDisplayName(locale1);
      String string3 = locale0.getDisplayLanguage();
      Set<Character> set0 = locale0.getExtensionKeys();
      String string4 = locale0.getDisplayVariant();
      Locale locale2 = locale0.stripExtensions();
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      boolean boolean1 = LocaleUtils.isAvailableLocale(locale0);
      List list1 = LocaleUtils.availableLocaleList();
      List list2 = LocaleUtils.countriesByLanguage("");
      List list3 = LocaleUtils.availableLocaleList();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Locale locale0 = LocaleUtils.toLocale("en");
      Locale locale1 = LocaleUtils.toLocale("en");
      String string0 = locale1.getDisplayLanguage(locale0);
      Locale locale2 = Locale.forLanguageTag("<");
      Set set1 = LocaleUtils.availableLocaleSet();
      String string1 = locale1.getScript();
      List list0 = LocaleUtils.availableLocaleList();
      List list1 = LocaleUtils.languagesByCountry("en");
      List list2 = LocaleUtils.countriesByLanguage("en");
      Locale locale3 = Locale.SIMPLIFIED_CHINESE;
      String string2 = locale2.getDisplayVariant(locale0);
      List list3 = LocaleUtils.localeLookupList(locale1, locale3);
      String string3 = locale3.getDisplayCountry();
      String string4 = locale3.getDisplayCountry(locale2);
      Locale locale4 = LocaleUtils.toLocale("en");
      List list4 = LocaleUtils.localeLookupList(locale4);
      Set set2 = LocaleUtils.availableLocaleSet();
      Locale locale5 = LocaleUtils.toLocale("vi");
      List list5 = LocaleUtils.languagesByCountry("");
      List list6 = LocaleUtils.localeLookupList(locale0, locale0);
      List list7 = LocaleUtils.availableLocaleList();
      List list8 = LocaleUtils.countriesByLanguage("mk");
      List list9 = LocaleUtils.languagesByCountry("English");
      List list10 = LocaleUtils.localeLookupList(locale4, locale2);
      List list11 = LocaleUtils.localeLookupList(locale0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = new Locale("oZqyH", "oZqyH", "oZqyH");
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("org.apache.commons.lang.LocaleUtils");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: org.apache.commons.lang.LocaleUtils
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("z}N5h&T5QW!)=0uD");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: z}N5h&T5QW!)=0uD
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("c78/;#U");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: c78/;#U
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
  }
}
