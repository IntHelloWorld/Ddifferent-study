/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:18:08 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("ja");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("zh");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("Z<m*;{k");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: Z<m*;{k
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = new Locale("", "", "X");
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      List list0 = LocaleUtils.localeLookupList((Locale) null, locale0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("pl");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage((String) null);
      List list1 = LocaleUtils.languagesByCountry((String) null);
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("Invalid locale format: ");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: Invalid locale format: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("org.apache.commons.lang.LocaleUtils");
      List list1 = LocaleUtils.languagesByCountry("");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List list0 = LocaleUtils.availableLocaleList();
      LocaleUtils localeUtils0 = new LocaleUtils();
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.PRC;
      List list1 = LocaleUtils.localeLookupList(locale0, locale1);
      Locale locale2 = LocaleUtils.toLocale((String) null);
      Locale locale3 = Locale.UK;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale3);
      List list2 = LocaleUtils.languagesByCountry("Ot]fkBm(@Gd.");
      Locale locale4 = Locale.UK;
      Set<String> set0 = locale4.getUnicodeLocaleKeys();
      List list3 = LocaleUtils.localeLookupList(locale4, locale4);
      Set set1 = LocaleUtils.availableLocaleSet();
      List list4 = LocaleUtils.localeLookupList((Locale) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list5 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Set set2 = LocaleUtils.availableLocaleSet();
      Locale locale5 = Locale.PRC;
      boolean boolean1 = LocaleUtils.isAvailableLocale(locale5);
      List list6 = LocaleUtils.localeLookupList(locale4, locale5);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("org.apache.commons.lang.LocaleUtils");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: org.apache.commons.lang.LocaleUtils
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("h)5Gp]^ zu5");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: h)5Gp]^ zu5
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("j}8@]XHRh,C");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: j}8@]XHRh,C
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("?;Uc<");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ?;Uc<
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("\u82F1\u6587");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: \u82F1\u6587
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("<");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: <
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }
}
