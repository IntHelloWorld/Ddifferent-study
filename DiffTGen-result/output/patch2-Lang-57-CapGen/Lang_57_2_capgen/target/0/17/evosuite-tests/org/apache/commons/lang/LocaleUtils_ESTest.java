/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:16:33 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("azGO^c$T");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: azGO^c$T
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("Rnve+rh");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: Rnve+rh
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = new Locale("Invalid locale format: ");
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = new Locale("l78=", "", "l78=");
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List list0 = LocaleUtils.availableLocaleList();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage((String) null);
      List list1 = LocaleUtils.languagesByCountry((String) null);
      List list2 = LocaleUtils.languagesByCountry("org.apache.commons.lang.LocaleUtils");
      List list3 = LocaleUtils.countriesByLanguage("lt");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("da");
      Set<Character> set0 = locale0.getExtensionKeys();
      String string0 = locale0.getDisplayName(locale0);
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      String string1 = locale0.getDisplayCountry(locale1);
      Locale.setDefault(locale0);
      Locale locale2 = Locale.ITALY;
      boolean boolean0 = locale1.hasExtensions();
      List list0 = LocaleUtils.localeLookupList(locale0, locale2);
      Locale.setDefault(locale0);
      boolean boolean1 = locale1.hasExtensions();
      List list1 = LocaleUtils.languagesByCountry("&8*`8+m;X[Z&e");
      List list2 = LocaleUtils.countriesByLanguage("");
      Set set1 = LocaleUtils.availableLocaleSet();
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("B");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: B
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("'W@4R&BF9J{(<B[!b");
      String string0 = "Invalid locale format: ";
      Locale locale0 = new Locale("Invalid locale format: ");
      Locale locale1 = Locale.CHINESE;
      String string1 = locale1.getDisplayScript(locale0);
      String string2 = locale1.getDisplayVariant();
      String string3 = locale0.getDisplayVariant(locale1);
      String[] stringArray0 = Locale.getISOLanguages();
      List list1 = LocaleUtils.localeLookupList(locale0, locale0);
      List list2 = LocaleUtils.languagesByCountry("");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry("W%TIY(AR#Tp$");
      Locale locale0 = LocaleUtils.toLocale("ja");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode1);
      List list3 = LocaleUtils.countriesByLanguage("ja");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry("z|,|%aO\"Fx.ne");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = new Locale("l78=", "", "l78=");
      List list0 = LocaleUtils.localeLookupList(locale0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("h1");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: h1
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("}G|Z{Y\"i t");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: }G|Z{Y\"i t
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale(",G?(r");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ,G?(r
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("z|,|%aO\"Fx.ne");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: z|,|%aO\"Fx.ne
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.UK;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
  }
}
