/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:17:31 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.stream.Stream;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("saorN\"H4");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: saorN\"H4
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("7'}P(3d");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 7'}P(3d
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("ms");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List list0 = LocaleUtils.availableLocaleList();
      List list1 = LocaleUtils.countriesByLanguage((String) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list0 = LocaleUtils.languagesByCountry("nB.- ^=*`");
      List list1 = LocaleUtils.languagesByCountry("a");
      List list2 = LocaleUtils.countriesByLanguage(".9&1miA=^H");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry("");
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("oW50m2G(=m/i!G");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: oW50m2G(=m/i!G
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      List list0 = LocaleUtils.localeLookupList(locale0, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = new Locale("org.apache.commons.lang.LocaleUtils", "org.apache.commons.lang.LocaleUtils", "org.apache.commons.lang.LocaleUtils");
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("lv");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("d");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: d
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("b1e&Y");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: b1e&Y
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("u");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: u
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("~VBJh/DH &6x,]J");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ~VBJh/DH &6x,]J
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null);
      Locale locale0 = Locale.ITALIAN;
      String string0 = locale0.getDisplayCountry((Locale) null);
      String[] stringArray0 = Locale.getISOCountries();
      String string1 = locale0.getDisplayCountry();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Stream<Locale.LanguageRange> stream0 = linkedList0.parallelStream();
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2);
      boolean boolean0 = linkedList0.add((Locale.LanguageRange) null);
      List<Locale> list4 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list3);
      List<Locale> list5 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list4);
      String string2 = locale0.getScript();
      List list6 = LocaleUtils.localeLookupList(locale0, (Locale) null);
      List list7 = LocaleUtils.availableLocaleList();
      List list8 = LocaleUtils.localeLookupList(locale0, (Locale) null);
      boolean boolean1 = LocaleUtils.isAvailableLocale((Locale) null);
      List list9 = LocaleUtils.countriesByLanguage("");
      Set set0 = LocaleUtils.availableLocaleSet();
      boolean boolean2 = LocaleUtils.isAvailableLocale(locale0);
      List list10 = LocaleUtils.availableLocaleList();
      boolean boolean3 = LocaleUtils.isAvailableLocale(locale0);
      boolean boolean4 = LocaleUtils.isAvailableLocale(locale0);
      List list11 = LocaleUtils.availableLocaleList();
      LocaleUtils localeUtils0 = new LocaleUtils();
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("~VBJh/DH &6x,]J");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ~VBJh/DH &6x,]J
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      List list0 = LocaleUtils.languagesByCountry("nB.- ^=*`");
      List list1 = LocaleUtils.languagesByCountry("a");
      List list2 = LocaleUtils.languagesByCountry((String) null);
  }
}
