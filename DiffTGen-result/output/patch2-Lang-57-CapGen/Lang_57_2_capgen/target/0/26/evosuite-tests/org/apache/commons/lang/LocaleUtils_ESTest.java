/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 05:18:07 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("anglais (Canada)");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: anglais (Canada)
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("IC\"M&eO");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: IC\"M&eO
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List list0 = LocaleUtils.availableLocaleList();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("no");
      Locale locale0 = LocaleUtils.toLocale("no");
      boolean boolean0 = locale0.hasExtensions();
      List list1 = LocaleUtils.localeLookupList(locale0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      Object object0 = locale0.clone();
      String string0 = locale0.getExtension('M');
      String string1 = locale0.getDisplayScript();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("ca");
      List list1 = LocaleUtils.languagesByCountry("es");
      Locale locale0 = LocaleUtils.toLocale("ca");
      List<Locale.LanguageRange> list2 = Locale.LanguageRange.parse("es");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list3 = Locale.LanguageRange.mapEquivalents(list2, hashMap0);
      List<Locale.LanguageRange> list4 = Locale.LanguageRange.mapEquivalents(list3, hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list5 = Locale.filterTags(list2, (Collection<String>) linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list6 = Locale.filterTags(list4, (Collection<String>) list5, locale_FilteringMode0);
      Object object0 = locale0.clone();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage((String) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("JP");
      List list1 = LocaleUtils.languagesByCountry("JP");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      Object object0 = locale0.clone();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      Locale.setDefault(locale0);
      List list1 = LocaleUtils.countriesByLanguage("<i,|qUpV");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List list3 = LocaleUtils.languagesByCountry("_p _I9Xl#");
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      String[] stringArray0 = Locale.getISOCountries();
      List list4 = LocaleUtils.localeLookupList(locale0, locale0);
      List list5 = LocaleUtils.localeLookupList(locale0, locale0);
      List list6 = LocaleUtils.localeLookupList(locale0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry("es");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Locale locale1 = new Locale("l7", "l7", "l7");
      List list0 = LocaleUtils.localeLookupList(locale0, locale1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = new Locale("l7", "l7", "l7");
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      List list0 = LocaleUtils.localeLookupList((Locale) null, locale0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("s}+P|D0Jl;lf");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: s}+P|D0Jl;lf
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("z6E9kcBL*Q");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: z6E9kcBL*Q
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("|#6Iilrb.=ckTBZ");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: |#6Iilrb.=ckTBZ
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
      List list0 = LocaleUtils.languagesByCountry((String) null);
      Locale locale1 = LocaleUtils.toLocale((String) null);
      Locale locale2 = Locale.PRC;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Set<String> set0 = locale2.getUnicodeLocaleAttributes();
      Set<String> set1 = locale2.getUnicodeLocaleKeys();
      List list1 = LocaleUtils.localeLookupList(locale2);
      Locale locale3 = Locale.KOREAN;
      String string0 = locale3.getScript();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("it-IT");
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: it-IT
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
  }
}
