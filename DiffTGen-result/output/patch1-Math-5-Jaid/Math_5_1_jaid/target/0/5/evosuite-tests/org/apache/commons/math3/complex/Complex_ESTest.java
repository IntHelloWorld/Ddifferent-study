/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 01:42:30 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      int int0 = complex0.NaN.hashCode();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex2.NaN.acos();
      List<Complex> list0 = complex2.INF.nthRoot(1780);
      Complex complex4 = complex2.tan();
      List<Complex> list1 = complex1.INF.nthRoot(1780);
      Complex complex5 = complex2.NaN.sin();
      Complex complex6 = complex0.subtract(complex1);
      int int1 = complex6.hashCode();
      Complex complex7 = complex6.multiply(complex2);
      double double0 = complex1.abs();
      double double1 = complex6.getReal();
      double double2 = complex4.getArgument();
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex8.NaN.atan();
      Complex complex10 = complex7.conjugate();
      Complex complex11 = complex7.log();
      double double3 = complex11.NaN.getArgument();
      ComplexField complexField0 = complex11.getField();
      Complex complex12 = complex4.sinh();
      Complex complex13 = complex0.acos();
      double double4 = complex10.getImaginary();
      Complex complex14 = complex13.sqrt();
      Complex complex15 = complex4.ZERO.sqrt1z();
      Complex complex16 = complex10.sinh();
      double double5 = complex12.getImaginary();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-3.130508064738312E-14));
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.ZERO.pow((-3.130508064738312E-14));
      Complex complex3 = complex2.ZERO.reciprocal();
      ComplexField complexField0 = complex3.INF.getField();
      Complex complex4 = complex2.NaN.log();
      Complex complex5 = complex4.I.sqrt();
      int int0 = complex3.ONE.hashCode();
      Complex complex6 = complex0.acos();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.NaN.log();
      double double0 = complex8.I.abs();
      Complex complex9 = complex3.reciprocal();
      Complex complex10 = complex9.INF.subtract(complex6);
      Complex complex11 = complex7.createComplex((-3.130508064738312E-14), (-3.130508064738312E-14));
      String string0 = complex3.toString();
      double double1 = complex11.getImaginary();
      Complex complex12 = complex7.negate();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1204.0511);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.atan();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.INF.multiply((-1273));
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex2.cos();
      double double1 = complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.INF.log();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.INF.divide(complex0);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex2.exp();
      double double0 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.sin();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex4 = complex1.subtract((-1431.2));
      Complex complex5 = complex4.add(1339.8055406);
      ComplexField complexField0 = complex1.getField();
      List<Complex> list0 = complex1.nthRoot(5);
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex6.ZERO.multiply(complex5);
      Complex complex8 = complex0.atan();
      Complex complex9 = complex6.INF.divide((double) 5);
      Complex complex10 = complex0.ZERO.exp();
      Object object0 = complex2.readResolve();
      boolean boolean1 = complex0.equals(object0);
      Complex complex11 = complex0.sin();
      Complex complex12 = complex0.negate();
      Complex complex13 = complex5.multiply(5);
      Complex complex14 = complex13.ONE.asin();
      Complex complex15 = complex11.subtract((double) 5);
      Complex complex16 = complex14.sin();
      Complex complex17 = complex13.multiply(1339.8055406);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      ComplexField complexField0 = complex0.ZERO.getField();
      String string1 = complex0.toString();
      Complex complex1 = Complex.valueOf(2483.3116733);
      Complex complex2 = complex0.INF.subtract(0.0);
      double double0 = complex2.getArgument();
      Complex complex3 = complex2.I.add(complex0);
      boolean boolean0 = complex0.equals("(NaN, NaN)");
      boolean boolean1 = complex0.equals("(NaN, NaN)");
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4260.14061757285), 425.739826);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.add((-4260.14061757285));
      List<Complex> list0 = complex1.I.nthRoot(1989);
      Object object0 = complex1.readResolve();
      Complex complex2 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.multiply((-624.93007462));
      Complex complex2 = complex0.I.createComplex((-1.0), (-624.93007462));
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.NaN.divide(complex0);
      Complex complex5 = complex4.ONE.multiply((-624.93007462));
      double double0 = complex4.INF.abs();
      double double1 = complex3.I.abs();
      String string0 = complex4.ZERO.toString();
      Complex complex6 = complex0.ONE.multiply(1178);
      Complex complex7 = complex4.ONE.atan();
      Complex complex8 = complex4.ZERO.add((-624.93007462));
      Complex complex9 = complex7.ONE.tanh();
      Complex complex10 = complex9.ONE.multiply(1178);
      Complex complex11 = complex1.tan();
      Complex complex12 = complex3.sqrt1z();
      Complex complex13 = complex12.INF.sqrt1z();
      double double2 = complex11.getArgument();
      boolean boolean0 = complex2.isNaN();
      double double3 = complex2.getImaginary();
      double double4 = complex5.getReal();
      int int0 = complex5.hashCode();
      Complex complex14 = complex11.subtract((-624.93007462));
      Complex complex15 = complex14.ZERO.sin();
      Complex complex16 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-2.0), (-3249.67344371));
      Complex complex1 = complex0.add((-2.0));
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex1.ZERO.pow(0.0);
      Complex complex4 = complex3.ONE.add(complex1);
      Complex complex5 = complex3.ONE.sqrt();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex1.ONE.add((-3249.67344371));
      Complex complex8 = complex6.INF.atan();
      double double0 = complex1.abs();
      Complex complex9 = complex4.multiply(complex1);
      Complex complex10 = complex0.subtract(3249.6759054948866);
      boolean boolean0 = complex8.isInfinite();
      Complex complex11 = complex4.negate();
      Object object0 = complex9.readResolve();
      Complex complex12 = complex2.sinh();
      Object object1 = complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1225.751, (-693.49982769411));
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.subtract((-1453.66737378147));
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = complex3.ZERO.pow(complex2);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex2.multiply(1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-4437.7160052));
      List<Complex> list0 = complex0.INF.nthRoot(1);
      Complex complex1 = complex0.I.asin();
      double double0 = complex0.INF.abs();
      double double1 = complex1.ZERO.getArgument();
      Complex complex2 = complex0.ONE.multiply(3.627172425759641E-305);
      Complex complex3 = complex2.ONE.atan();
      int int0 = complex2.ZERO.hashCode();
      Complex complex4 = complex0.divide(1380.4);
      Complex complex5 = complex4.ONE.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex4.divide(complex1);
      Complex complex8 = complex2.pow(1380.4);
      Complex complex9 = complex3.sin();
      double double2 = complex0.abs();
      Complex complex10 = complex3.pow(complex2);
      Complex complex11 = complex10.INF.subtract(0.0);
      Complex complex12 = complex1.acos();
      double double3 = complex1.I.getArgument();
      Object object0 = new Object();
      Complex complex13 = complex12.I.pow(complex3);
      boolean boolean0 = complex12.equals(object0);
      Complex complex14 = complex12.subtract((-1.9115659590156936E-8));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex3.ZERO.subtract(complex0);
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex1.exp();
      Complex complex8 = complex6.sqrt();
      Complex complex9 = complex2.multiply(272.417341251441);
      int int0 = 0;
      ComplexField complexField0 = complex8.ZERO.getField();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-689.9669047), (-689.9669047));
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex2.ZERO.divide((-1153.2170917));
      Complex complex5 = complex1.acos();
      Object object0 = complex5.readResolve();
      Complex complex6 = complex5.I.createComplex((-1153.2170917), Double.NaN);
      int int1 = complex1.hashCode();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex7.divide(complex0);
      Complex complex9 = complex1.acos();
      Complex complex10 = complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-148.03209426), 20.0);
      Complex complex1 = complex0.add((-148.03209426));
      Complex complex2 = complex0.ONE.multiply((-1714.531350085444));
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex0.ONE.negate();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.INF.multiply((-1));
      Complex complex6 = complex0.divide(complex3);
      Complex complex7 = complex3.INF.acos();
      Complex complex8 = complex6.ONE.pow((-148.03209426));
      int int1 = complex6.NaN.hashCode();
      String string0 = complex1.toString();
      Complex complex9 = complex4.reciprocal();
      Complex complex10 = complex5.atan();
      Complex complex11 = complex7.asin();
      Complex complex12 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.ZERO.multiply(complex4);
      Complex complex7 = complex0.I.pow(0.0);
      Complex complex8 = complex2.pow(0.0);
      double double0 = complex8.I.abs();
      String string0 = complex8.toString();
      Complex complex9 = complex0.cos();
      boolean boolean0 = complex4.isNaN();
      Complex complex10 = complex7.subtract((-1401.1796));
      Complex complex11 = complex5.multiply(0);
      int int0 = complex11.ZERO.hashCode();
      Complex complex12 = complex4.ONE.divide(complex3);
      Complex complex13 = complex8.atan();
      Complex complex14 = complex13.sqrt();
      boolean boolean1 = complex8.isInfinite();
      double double1 = complex6.abs();
      double double2 = complex8.getArgument();
      Complex complex15 = complex2.cos();
      Complex complex16 = complex3.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = (-1.0);
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.conjugate();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.ZERO.add((-1.0));
      Complex complex3 = complex2.INF.divide((-1.0));
      Complex complex4 = complex3.INF.divide((-1.0));
      Complex complex5 = complex3.ZERO.tan();
      Complex complex6 = complex2.ZERO.multiply(complex5);
      double double0 = complex0.abs();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex1.divide(1029.57259);
      List<Complex> list0 = complex0.nthRoot(1995);
      Complex complex10 = complex2.negate();
      Complex complex11 = Complex.valueOf(1.4352697002457768E131);
      Complex complex12 = complex1.ONE.divide(complex5);
      Complex complex13 = complex0.negate();
      Complex complex14 = Complex.valueOf((-870.0));
      Complex complex15 = complex14.tanh();
      Complex complex16 = complex9.add(complex13);
      List<Complex> list1 = complex7.nthRoot(1995);
      boolean boolean0 = complex12.isNaN();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(2039.900920062055, 1234.3876902899);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = Complex.valueOf(1234.3876902899, 0.0);
      double double0 = complex2.ONE.abs();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex2.ONE.tanh();
      Complex complex6 = Complex.valueOf(793.0);
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex4.ZERO.acos();
      Complex complex9 = complex8.ONE.log();
      Complex complex10 = complex4.NaN.multiply((-1504.1542283259));
      Complex complex11 = complex4.ZERO.sqrt1z();
      Complex complex12 = complex11.INF.exp();
      boolean boolean0 = complex2.isNaN();
      Complex complex13 = complex4.tanh();
      Complex complex14 = complex13.ONE.negate();
      double double1 = complex10.getImaginary();
      Complex complex15 = complex4.sin();
      double double2 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-317.2930392261));
      Complex complex1 = complex0.subtract(6.283185307179586);
      Complex complex2 = complex1.NaN.subtract((-317.2930392261));
      Complex complex3 = Complex.valueOf((-197.19196843398274), 2814.0);
      Complex complex4 = complex1.ZERO.subtract((-317.2930392261));
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex4.ONE.subtract(1.3703391844683932E-8);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex4.tan();
      Complex complex10 = complex9.NaN.sqrt1z();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.2618366811281002E-7));
      double double0 = complex0.getArgument();
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.pow((-1.2618366811281002E-7));
      Complex complex3 = Complex.valueOf(0.0);
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex3.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.multiply((-480));
      Complex complex3 = complex2.I.multiply((double) (-480));
      double double0 = complex0.getArgument();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex1.sqrt1z();
      try { 
        complex4.nthRoot((-480));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -480
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = complex1.ZERO.subtract((-1.0));
      Complex complex3 = complex0.I.add(559.62944);
      Complex complex4 = complex0.NaN.tan();
      Complex complex5 = complex4.NaN.asin();
      Object object0 = complex0.INF.readResolve();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.ONE.tanh();
      Complex complex8 = complex0.tan();
      double double0 = complex0.abs();
      Complex complex9 = complex0.multiply(complex6);
      Complex complex10 = complex2.reciprocal();
      Complex complex11 = complex2.log();
      Complex complex12 = complex6.sin();
      Complex complex13 = complex10.sinh();
      Complex complex14 = Complex.valueOf((-612.0), Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2814.7, (-486.996));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.I.add(0.0);
      Object object0 = complex1.ZERO.readResolve();
      Complex complex3 = complex1.pow(2814.7);
      Complex complex4 = complex2.subtract(2814.7);
      Complex complex5 = complex4.I.add(complex0);
      Complex complex6 = complex5.I.tanh();
      ComplexField complexField0 = complex5.INF.getField();
      int int0 = complex0.I.hashCode();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex3.asin();
      Complex complex9 = Complex.valueOf(0.0);
      Object object1 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1286.0));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.subtract((-1286.0));
      Object object0 = complex1.readResolve();
      Complex complex3 = complex0.sinh();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex2.pow(complex4);
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex3.reciprocal();
      ComplexField complexField0 = complex7.ZERO.getField();
      Complex complex8 = complex1.ONE.divide((-1.0));
      List<Complex> list0 = complex8.NaN.nthRoot(809);
      Complex complex9 = complex2.asin();
      Complex complex10 = complex9.ZERO.asin();
      Complex complex11 = complex9.asin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.multiply(24);
      Complex complex3 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex2.add(0.0);
      Complex complex5 = complex4.NaN.divide(1.042139023692827E22);
      double double0 = complex3.I.abs();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex6.ONE.divide(1.573691633515306E-8);
      ComplexField complexField0 = complex7.ONE.getField();
      double double1 = complex0.getReal();
      double double2 = complex1.abs();
      double double3 = complex3.abs();
      Complex complex8 = complex5.divide(complex2);
      double double4 = complex0.abs();
      Object object0 = complex0.readResolve();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex6.sinh();
      Complex complex11 = Complex.valueOf(0.0);
      boolean boolean0 = complex8.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      int int0 = 0;
      Complex complex1 = complex0.multiply(0);
      double double0 = complex1.abs();
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex2.ZERO.subtract(20.0);
      Complex complex4 = complex1.NaN.multiply(complex0);
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex4.multiply(1.09828519821167);
      Complex complex7 = complex4.I.asin();
      Complex complex8 = complex1.conjugate();
      double double1 = complex4.INF.abs();
      Complex complex9 = complex1.add(complex0);
      Complex complex10 = complex9.cosh();
      Complex complex11 = complex1.pow(1.09828519821167);
      Complex complex12 = complex4.negate();
      Complex complex13 = complex12.ONE.multiply(Double.NaN);
      Complex complex14 = complex6.add(1.09828519821167);
      int int1 = 1;
      try { 
        complex12.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-2072.00319569));
      Complex complex1 = complex0.ONE.multiply(1161.307095190169);
      Complex complex2 = Complex.valueOf((-2072.00319569), 700.907876);
      Complex complex3 = new Complex((-716.1390139311), (-1759.3728));
      Complex complex4 = complex3.INF.subtract((-2.3995994000400915E-10));
      Complex complex5 = complex0.INF.add(complex3);
      Complex complex6 = complex0.multiply(1791);
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex5.multiply(674.194);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex1.multiply((-3893));
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex2.cos();
      Complex complex7 = Complex.valueOf((-115.54929922944));
      Complex complex8 = complex4.pow(complex7);
      Complex complex9 = complex4.divide(complex5);
      Complex complex10 = complex2.asin();
      Complex complex11 = complex9.reciprocal();
      Complex complex12 = complex9.multiply(0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(4831.680822495685);
      Complex complex1 = complex0.createComplex((-3009.1947), 4831.680822495685);
      double double0 = complex1.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.subtract(2.127815616846823);
      Complex complex3 = complex2.I.multiply(0.0);
      ComplexField complexField1 = complex3.getField();
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex1.add(Double.NaN);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3169.713130456), (-3169.713130456));
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex3.INF.divide((-3169.713130456));
      Complex complex5 = complex2.NaN.sin();
      String string0 = complex5.ZERO.toString();
      Complex complex6 = complex0.tan();
      double double0 = complex6.getArgument();
      Complex complex7 = complex3.I.cos();
      Complex complex8 = complex2.ZERO.log();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.ZERO.sqrt1z();
      Complex complex11 = complex10.INF.acos();
      boolean boolean0 = complex1.equals(complex4);
      Complex complex12 = complex0.acos();
      Complex complex13 = complex3.divide(complex9);
      Complex complex14 = complex2.sin();
      Complex complex15 = complex14.I.tan();
      int int0 = complex9.hashCode();
      Complex complex16 = complex0.negate();
      Complex complex17 = Complex.valueOf(126.44149, (-1.5707963267948966));
      Complex complex18 = complex7.add((-261.022006048552));
      Complex complex19 = complex3.createComplex(126.44149, 0.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex0.I.pow(0.0);
      int int0 = complex0.I.hashCode();
      int int1 = complex0.hashCode();
      Complex complex5 = complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);
      try { 
        complex5.nthRoot((-1470));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,470
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 3362.801778);
      Complex complex1 = complex0.cos();
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.INF.divide(complex2);
      Complex complex5 = complex0.NaN.pow(complex4);
      String string0 = complex5.toString();
      Complex complex6 = complex3.multiply((-1201));
      Object object0 = complex6.ONE.readResolve();
      Complex complex7 = complex1.INF.log();
      Complex complex8 = complex2.add(0.0);
      double double1 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ONE.divide(1.0);
      Complex complex3 = complex0.INF.add(1.0);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = complex5.subtract(1.0);
      Complex complex7 = complex5.I.pow(complex2);
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex4.I.cosh();
      Complex complex9 = complex4.pow(complex2);
      Complex complex10 = complex5.NaN.cosh();
      boolean boolean1 = complex4.isInfinite();
      Complex complex11 = complex7.pow(complex5);
      try { 
        complex11.ZERO.nthRoot((-816));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -816
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-1661.82307073));
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex0.NaN.pow(1001.7086444);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.ONE.divide(complex0);
      Complex complex6 = complex4.log();
      Complex complex7 = complex4.createComplex((-1661.82307073), (-1661.82307073));
      Complex complex8 = complex5.divide(1001.7086444);
      Complex complex9 = complex3.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.subtract(Double.POSITIVE_INFINITY);
      ComplexField complexField1 = complex1.NaN.getField();
      Complex complex3 = complex0.multiply((-694.18744459433));
      Complex complex4 = complex3.ZERO.divide((-694.18744459433));
      Complex complex5 = complex4.ZERO.subtract((-694.18744459433));
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex0.createComplex(0.0, 0.0);
      Complex complex8 = complex7.ZERO.subtract(complex4);
      Complex complex9 = complex8.I.log();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-1447.45302643), (-1447.45302643));
      int int0 = complex0.ZERO.hashCode();
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.sin();
      List<Complex> list0 = complex1.NaN.nthRoot(1406);
      Complex complex5 = complex4.ONE.log();
      Complex complex6 = complex4.INF.sqrt();
      ComplexField complexField0 = complex4.getField();
      Complex complex7 = complex0.add(complex1);
      double double1 = complex5.getImaginary();
      Complex complex8 = complex0.ONE.log();
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex5.add(complex0);
      Complex complex11 = complex4.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(1798.5, 1798.5);
      Complex complex1 = complex0.divide(8.98079409878202E234);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.multiply(165);
      Complex complex4 = Complex.valueOf(0.0, Double.NaN);
      Complex complex5 = complex3.ONE.sin();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex1.pow(complex2);
      Complex complex8 = complex4.subtract(0.0);
      Complex complex9 = Complex.valueOf((-1543.8), 8.98079409878202E234);
      Complex complex10 = complex4.divide(0.0);
      Complex complex11 = complex9.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.084495133765657E196), (-9.084495133765657E196));
      double double0 = complex0.NaN.abs();
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.createComplex(2743.58422754366, (-9.084495133765657E196));
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex4.asin();
      double double1 = complex3.NaN.getArgument();
      ComplexField complexField0 = complex0.getField();
      String string0 = complex2.toString();
      Complex complex6 = complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1788.42);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.sinh();
      ComplexField complexField1 = complex2.I.getField();
      Complex complex5 = complex3.INF.tanh();
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex0.ZERO.sinh();
      Complex complex8 = complex2.ONE.sqrt();
      Complex complex9 = complex2.multiply((-1776.112055233));
      boolean boolean0 = complex2.isInfinite();
      String string0 = complex9.I.toString();
      Complex complex10 = complex2.log();
      Complex complex11 = complex10.cos();
      Complex complex12 = complex11.ZERO.sqrt1z();
      Complex complex13 = complex10.ONE.negate();
      Complex complex14 = complex9.sin();
      double double0 = complex10.getImaginary();
      double double1 = complex6.abs();
      double double2 = complex9.getArgument();
      double double3 = complex10.getImaginary();
      Complex complex15 = complex11.pow((-863.1043));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(5144.564412875355);
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex2.divide((-3651.7));
      Complex complex5 = complex0.createComplex((-3651.7), (-3651.7));
      Object object0 = complex4.readResolve();
      Complex complex6 = complex5.sinh();
      Object object1 = new Object();
      boolean boolean0 = complex6.equals(object1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.ONE.divide(complex2);
      Complex complex6 = complex4.I.acos();
      Complex complex7 = complex4.I.asin();
      Complex complex8 = complex7.NaN.sinh();
      Complex complex9 = complex0.divide(complex2);
      Complex complex10 = complex2.exp();
      double double0 = complex10.abs();
      double double1 = complex2.getArgument();
      Complex complex11 = complex3.add(553.90252077045);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex3.divide(1844.196);
      Complex complex5 = Complex.valueOf(3438.848254195, 0.0);
      String string0 = complex2.toString();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-2124.141));
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = new Complex(2276.37536);
      double double1 = complex2.I.getArgument();
      ComplexField complexField0 = complex2.ONE.getField();
      double double2 = complex2.INF.getArgument();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.ONE.add(complex1);
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex5.pow(0.0);
      Complex complex9 = complex7.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(1105);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.INF.sinh();
      int int0 = complex3.hashCode();
      Complex complex4 = complex3.ONE.divide((double) 1105);
      double double0 = complex0.getArgument();
      Complex complex5 = complex0.I.tan();
      Complex complex6 = complex5.NaN.sqrt1z();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex0.INF.subtract(complex1);
      Complex complex9 = complex0.multiply((double) 1105);
      double double1 = complex9.getArgument();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex10.ONE.subtract(complex1);
      Complex complex12 = complex11.atan();
      Complex complex13 = complex1.negate();
      Complex complex14 = complex5.atan();
      boolean boolean0 = complex3.equals(complex0);
      boolean boolean1 = complex12.isInfinite();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ZERO.divide(complex0);
      double double0 = complex0.getImaginary();
      double double1 = complex1.getImaginary();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.sqrt();
      ComplexField complexField0 = complex5.getField();
      Complex complex7 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.tanh();
      double double0 = complex1.ONE.getArgument();
      Complex complex3 = complex2.ZERO.add(complex1);
      String string0 = complex2.toString();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex1.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.reciprocal();
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex0.conjugate();
      double double1 = complex1.abs();
      Complex complex6 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(1201.8007575447496, 1201.8007575447496);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(1027.6424282368, 2.484237749027735E-8);
      Complex complex1 = complex0.pow(1412.5);
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex2.I.log();
      Complex complex7 = complex5.ONE.sqrt1z();
      Complex complex8 = complex1.add(complex2);
      boolean boolean0 = complex1.isNaN();
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.add(2.0);
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.I.pow(770.525019);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex0.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2455.818);
      int int0 = complex0.I.hashCode();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.pow(2.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-2244.8750593082));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.subtract(0.0);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.ONE.sqrt1z();
      boolean boolean0 = complex6.isInfinite();
      double double0 = complex2.abs();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(279.595810984318);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex0.sinh();
      double double0 = complex1.getImaginary();
      Complex complex4 = Complex.valueOf((-2004.505413405), 0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(3214.36703565, 3214.36703565);
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex0.multiply(complex1);
      double double0 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.multiply(0.7853981633974483);
      Complex complex3 = complex1.ONE.multiply((-556.12400312));
      Complex complex4 = complex1.ZERO.acos();
      Complex complex5 = complex0.INF.subtract(complex1);
      Complex complex6 = complex5.ZERO.sinh();
      Complex complex7 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double double0 = (-4906.4877986512);
      Complex complex0 = new Complex((-4906.4877986512));
      Complex complex1 = complex0.createComplex((-1418.48909), (-1418.48909));
      Complex complex2 = complex0.divide((-1418.48909));
      try { 
        complex2.I.nthRoot((-2352));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,352
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2756.1788497);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.NaN.pow((-20.0));
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex2.ONE.cosh();
      Complex complex5 = Complex.valueOf(714.4451);
      Complex complex6 = complex1.ONE.add(complex0);
      Complex complex7 = complex1.I.divide(2756.1788497);
      double double0 = complex0.getImaginary();
      Complex complex8 = complex1.asin();
      double double1 = complex0.getArgument();
      int int0 = complex0.hashCode();
      Complex complex9 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-483.133746), Double.NaN);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.ZERO.conjugate();
      String string0 = complex1.NaN.toString();
      Complex complex3 = complex1.pow(Double.NaN);
      Complex complex4 = complex3.ZERO.multiply((-2067));
      Complex complex5 = complex4.I.add(0.0);
      String string1 = complex4.I.toString();
      Complex complex6 = complex0.add((-483.133746));
      Complex complex7 = complex0.cosh();
      double double0 = complex7.INF.getArgument();
      String string2 = complex7.INF.toString();
      Complex complex8 = complex1.INF.sinh();
      Complex complex9 = complex8.INF.divide(0.0);
      Complex complex10 = complex9.ZERO.acos();
      Complex complex11 = complex0.ZERO.sin();
      Complex complex12 = complex11.pow(0.0);
      Complex complex13 = complex2.multiply(0);
      Complex complex14 = complex1.sqrt();
      Complex complex15 = complex14.I.log();
      Object object0 = complex1.readResolve();
      double double1 = complex11.getReal();
      String string3 = complex5.toString();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.ZERO.divide(0.0);
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex2.NaN.atan();
      String string0 = complex0.toString();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.subtract(1798.866673);
      Complex complex6 = complex4.exp();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex7.asin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.atan();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.negate();
      Object object0 = complex0.ONE.readResolve();
      try { 
        complex0.INF.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double double0 = (-5079.017315);
      Complex complex0 = new Complex((-5079.017315), (-5079.017315));
      double double1 = 0.0;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex0.exp();
      Complex complex5 = Complex.valueOf(1326.7662789424, 0.0);
      Complex complex6 = complex2.multiply(complex4);
      Complex complex7 = complex6.ZERO.pow(1.6247460842132568);
      String string0 = complex4.toString();
      Complex complex8 = new Complex(0.0);
      int int0 = 0;
      try { 
        complex8.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(1.8356062677502141E202);
      Complex complex1 = complex0.INF.pow(707.837982316);
      Complex complex2 = complex0.negate();
      try { 
        complex2.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.divide(complex1);
      double double0 = complex0.getReal();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.conjugate();
      double double0 = complex1.getReal();
      Complex complex3 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = Complex.valueOf(0.0, (-1763.5840598577));
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.subtract((-2538.8606757639));
      Complex complex3 = complex2.I.reciprocal();
      double double0 = complex3.I.abs();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex7.divide(complex4);
      Complex complex9 = complex3.createComplex((-2538.8606757639), 0.0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.atan();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.6075552701950073, 0.6075552701950073);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.add(0.6075552701950073);
      Complex complex4 = Complex.valueOf(0.6075552701950073);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex0.conjugate();
      ComplexField complexField0 = complex0.getField();
      String string0 = complex0.ONE.toString();
      Complex complex7 = Complex.valueOf(0.6075552701950073);
      Complex complex8 = complex7.I.pow(0.6075552701950073);
      Complex complex9 = complex4.exp();
      Complex complex10 = complex1.asin();
      Complex complex11 = complex10.acos();
      Complex complex12 = complex5.pow(0.6075552701950073);
      Complex complex13 = complex0.createComplex(0.6075552701950073, 0.6075552701950073);
      try { 
        complex4.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply((-1866));
      Complex complex3 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex1.NaN.add((-876.3425575));
      Complex complex6 = Complex.valueOf((-2433.8805376471305), 0.0);
      double double0 = complex2.getImaginary();
      Complex complex7 = complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2742.771), 536.3507486);
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2137.95207235, 2137.95207235);
      Complex complex1 = new Complex(2137.95207235);
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.asin();
      boolean boolean0 = complex0.equals(complex4);
      Complex complex6 = complex1.cos();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex1.pow(20.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-1428.2421440152), (-1428.2421440152));
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.add((-1428.2421440152));
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex1.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.INF.divide(28.1912726667);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = Complex.valueOf(28.1912726667);
      Complex complex8 = complex0.createComplex((-1428.2421440152), (-1428.2421440152));
      Complex complex9 = Complex.valueOf((-1428.2421440152));
      Complex complex10 = complex2.reciprocal();
      Complex complex11 = complex4.sinh();
      Complex complex12 = complex3.createComplex((-1877.152825819), 0.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-3447.4505008255), (-3447.4505008255));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex1.NaN.tanh();
      Complex complex4 = complex3.NaN.add(complex2);
      Complex complex5 = complex2.ZERO.log();
      Complex complex6 = complex5.ONE.atan();
      Complex complex7 = complex3.INF.tan();
      Complex complex8 = complex7.ZERO.sin();
      String string0 = complex0.toString();
      Complex complex9 = complex0.cosh();
      boolean boolean0 = complex0.isNaN();
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex9.multiply(complex0);
      Complex complex12 = complex10.tanh();
      Complex complex13 = complex2.add(complex12);
      Complex complex14 = complex0.pow(complex11);
      Complex complex15 = complex1.cos();
      Complex complex16 = complex8.createComplex((-3447.4505008255), (-3447.4505008255));
      double double0 = complex9.getArgument();
      double double1 = complex2.getReal();
      Complex complex17 = Complex.valueOf(9.491963841853199);
      Complex complex18 = complex16.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.add(0.0);
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = complex7.add((-1.564440844355254E-7));
      Complex complex10 = Complex.valueOf((-1.564440844355254E-7));
      Complex complex11 = complex10.log();
      Complex complex12 = complex3.tan();
      Complex complex13 = Complex.valueOf(0.0, 0.0);
      Complex complex14 = complex0.NaN.cosh();
      Complex complex15 = complex5.I.pow(6.496772856703278E-221);
      Complex complex16 = complex1.createComplex(0.0, (-1078.0));
      Complex complex17 = complex12.createComplex(6.496772856703278E-221, 0.0);
      Complex complex18 = complex7.asin();
      Complex complex19 = complex5.sin();
      Complex complex20 = complex0.tanh();
      Complex complex21 = complex8.reciprocal();
      Complex complex22 = complex12.multiply((-1883.707074915));
      String string0 = complex15.toString();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-2525.55278), (-286.1137));
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex2.ZERO.divide((-286.1137));
      Complex complex5 = complex0.ZERO.tanh();
      int int0 = complex0.NaN.hashCode();
      Complex complex6 = complex0.I.pow(complex1);
      Complex complex7 = complex6.ZERO.pow((-1698.772841343));
      Complex complex8 = complex0.cos();
      Complex complex9 = complex0.NaN.pow(complex8);
      Object object0 = complex0.readResolve();
      String string0 = complex0.toString();
      Complex complex10 = complex0.negate();
      Complex complex11 = complex10.sqrt();
      String string1 = complex10.NaN.toString();
      List<Complex> list0 = complex10.ONE.nthRoot(1984);
      Complex complex12 = complex11.divide(complex0);
      Complex complex13 = complex10.asin();
      Complex complex14 = complex13.INF.sqrt();
      Complex complex15 = complex1.exp();
      double double0 = complex15.abs();
      Complex complex16 = complex15.ZERO.multiply(6.283185307179586);
      Complex complex17 = complex7.sin();
      Complex complex18 = complex1.atan();
      boolean boolean0 = complex8.isInfinite();
      boolean boolean1 = complex0.equals((Object) null);
      Complex complex19 = complex1.sqrt1z();
      Complex complex20 = complex10.multiply(1984);
      Complex complex21 = complex19.createComplex(6.283185307179586, (-1698.772841343));
      Complex complex22 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.multiply(1);
      List<Complex> list0 = complex1.I.nthRoot(103);
      Complex complex4 = complex1.INF.conjugate();
      Complex complex5 = complex0.INF.divide(complex1);
      Complex complex6 = complex5.INF.pow((double) 1);
      Complex complex7 = complex0.ZERO.sin();
      Complex complex8 = complex7.divide(complex1);
      Complex complex9 = complex2.I.asin();
      Complex complex10 = complex9.INF.cos();
      Complex complex11 = complex9.tanh();
      Complex complex12 = complex11.ZERO.pow(complex0);
      Complex complex13 = complex0.acos();
      double double0 = complex13.ONE.getArgument();
      Complex complex14 = complex13.I.negate();
      Complex complex15 = complex2.add((double) 103);
      Object object0 = new Object();
      boolean boolean0 = complex2.equals(object0);
      Complex complex16 = complex1.tan();
      Complex complex17 = complex6.reciprocal();
      double double1 = complex14.getReal();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(1524.92012);
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex0.multiply(1524.92012);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ONE.conjugate();
      double double1 = complex4.abs();
      Complex complex6 = complex4.I.tanh();
      Complex complex7 = complex6.INF.multiply(2384);
      Complex complex8 = complex4.ONE.reciprocal();
      Complex complex9 = complex6.subtract(Double.NaN);
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex10.INF.add(1524.92012);
      Complex complex12 = complex4.NaN.add(complex2);
      Complex complex13 = complex12.ONE.divide(complex8);
      Complex complex14 = complex13.NaN.sin();
      Complex complex15 = complex14.ONE.multiply(0.0);
      Complex complex16 = complex4.multiply(1524.92012);
      int int0 = complex16.NaN.hashCode();
      Object object0 = complex16.readResolve();
      Complex complex17 = complex1.exp();
      List<Complex> list0 = complex17.INF.nthRoot(311);
      Object object1 = complex2.readResolve();
      Complex complex18 = complex11.negate();
      Complex complex19 = complex3.divide(Double.NaN);
      Complex complex20 = complex16.log();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(2.0653935146671156E-8, (-20.0));
      Complex complex3 = complex2.NaN.divide(0.0);
      Complex complex4 = complex3.NaN.subtract(complex2);
      Complex complex5 = complex1.cosh();
      Complex complex6 = Complex.valueOf(0.0, 3176.926536478671);
      Complex complex7 = complex0.divide(complex5);
      int int0 = complex5.hashCode();
      Complex complex8 = complex6.divide(complex0);
      Complex complex9 = complex5.add(169.37193714);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(1.9299691540987203E36, 1.9299691540987203E36);
      Complex complex1 = Complex.INF;
      String string0 = complex1.toString();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.NaN.pow((-1456.181));
      Complex complex4 = complex1.pow(complex0);
      double double0 = complex3.ZERO.getArgument();
      double double1 = complex1.NaN.getArgument();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex2.add(complex3);
      double double2 = complex5.getReal();
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex7.ZERO.subtract(1.9299691540987203E36);
      Complex complex9 = complex8.INF.sinh();
      Complex complex10 = complex7.conjugate();
      Complex complex11 = complex10.tan();
      Complex complex12 = complex10.ZERO.atan();
      Complex complex13 = complex2.subtract(1.3606464059428694E-8);
      Complex complex14 = complex2.INF.createComplex(0.0, (-548.4));
      boolean boolean0 = complex4.isInfinite();
      Complex complex15 = complex4.cosh();
      int int0 = complex15.ONE.hashCode();
      Complex complex16 = complex15.INF.tanh();
      Complex complex17 = complex6.sqrt1z();
      List<Complex> list0 = complex17.NaN.nthRoot(40);
      Complex complex18 = complex17.divide(complex4);
      Complex complex19 = Complex.valueOf(0.0);
      Complex complex20 = complex17.sin();
      double double3 = complex19.abs();
      boolean boolean1 = complex13.isInfinite();
      Complex complex21 = complex8.atan();
  }
}
