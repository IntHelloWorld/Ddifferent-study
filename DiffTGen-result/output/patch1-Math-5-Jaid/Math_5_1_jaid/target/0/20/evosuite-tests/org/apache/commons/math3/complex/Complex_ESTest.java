/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 01:49:24 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.41421356237309515, 0.41421356237309515);
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.NaN.multiply(complex3);
      double double0 = complex2.getArgument();
      Complex complex5 = complex2.NaN.cosh();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex1.INF.divide(complex6);
      Complex complex8 = complex5.subtract(complex0);
      Complex complex9 = complex2.I.divide(complex1);
      Complex complex10 = complex0.multiply(complex1);
      Complex complex11 = complex10.I.exp();
      Complex complex12 = complex11.INF.reciprocal();
      Complex complex13 = Complex.valueOf((-1469.4682), 2673.0);
      Complex complex14 = Complex.valueOf(0.41421356237309515);
      Complex complex15 = complex14.ONE.exp();
      Complex complex16 = complex0.divide((-1.0));
      ComplexField complexField0 = complex16.ZERO.getField();
      Complex complex17 = complex0.acos();
      double double1 = complex17.NaN.abs();
      Complex complex18 = complex1.pow((-1.0));
      Complex complex19 = complex0.subtract(complex14);
      Complex complex20 = complex18.sin();
      Complex complex21 = complex5.conjugate();
      Complex complex22 = complex14.atan();
      Complex complex23 = Complex.valueOf((-1469.4682));
      Complex complex24 = complex8.asin();
      Complex complex25 = complex18.negate();
      Complex complex26 = complex15.asin();
      Complex complex27 = complex11.atan();
      Complex complex28 = complex13.log();
      Complex complex29 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.055420567281602E-8);
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.ZERO.atan();
      String string0 = complex0.toString();
      Complex complex3 = complex1.NaN.divide(0.0);
      Complex complex4 = complex1.atan();
      int int0 = complex1.hashCode();
      Complex complex5 = complex4.add(1.0);
      Complex complex6 = Complex.valueOf((-1072.849));
      Complex complex7 = complex1.sinh();
      boolean boolean0 = complex4.isInfinite();
      Complex complex8 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.65688196961235E66);
      Complex complex1 = complex0.INF.multiply((-1591));
      Complex complex2 = Complex.valueOf(6.65688196961235E66, 0.0);
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = complex1.ZERO.divide(complex2);
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = complex2.ZERO.multiply(complex1);
      double double0 = complex2.ONE.getArgument();
      Complex complex7 = Complex.valueOf(0.0, 6.65688196961235E66);
      Complex complex8 = complex7.divide(complex6);
      Complex complex9 = complex8.I.acos();
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex10 = complex0.sqrt();
      Complex complex11 = complex10.ONE.reciprocal();
      Complex complex12 = complex1.subtract(complex6);
      boolean boolean0 = complex6.isNaN();
      Complex complex13 = complex9.conjugate();
      double double1 = complex8.abs();
      Complex complex14 = complex11.multiply(6.65688196961235E66);
      Complex complex15 = complex11.conjugate();
      double double2 = complex5.getArgument();
      Complex complex16 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = new Complex((-2927.9688997));
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex2.INF.sinh();
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex2.ZERO.subtract(complex1);
      Complex complex7 = complex1.ONE.multiply(complex4);
      Complex complex8 = complex2.INF.log();
      Complex complex9 = Complex.valueOf(20.0);
      Complex complex10 = complex7.ZERO.add(complex1);
      Object object0 = complex8.readResolve();
      Object object1 = complex8.I.readResolve();
      Object object2 = complex0.readResolve();
      Complex complex11 = complex2.divide(complex7);
      boolean boolean0 = complex1.isNaN();
      Complex complex12 = complex2.cosh();
      ComplexField complexField0 = complex0.getField();
      Complex complex13 = complex12.createComplex((-2927.9688997), 20.0);
      Complex complex14 = complex6.asin();
      Complex complex15 = complex13.cosh();
      double double0 = complex13.getArgument();
      Complex complex16 = complex13.ONE.atan();
      Complex complex17 = complex15.cosh();
      Complex complex18 = complex13.multiply((-517));
      Complex complex19 = complex17.negate();
      Complex complex20 = complex17.cos();
      Complex complex21 = complex9.subtract((-2927.9688997));
      Complex complex22 = Complex.valueOf(20.0);
      Complex complex23 = complex14.exp();
      Complex complex24 = complex0.multiply((-517));
      Complex complex25 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2582.17, 0.0);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.NaN.conjugate();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex5 = complex2.multiply(0.0);
      ComplexField complexField1 = complex5.getField();
      Complex complex6 = complex0.INF.negate();
      ComplexField complexField2 = complex6.getField();
      double double0 = complex1.ZERO.abs();
      Complex complex7 = complex5.exp();
      List<Complex> list0 = complex7.nthRoot(517);
      Complex complex8 = complex1.exp();
      Complex complex9 = complex1.pow((-2.62524392470767E-310));
      Complex complex10 = complex1.multiply(2.0);
      double double1 = complex5.getReal();
      Complex complex11 = complex10.createComplex(0.0, 0.0);
      Complex complex12 = Complex.valueOf(0.0, (-1372.9345666814));
      Complex complex13 = complex12.INF.divide(Double.NaN);
      Complex complex14 = complex13.INF.pow(2582.17);
      double double2 = complex0.getImaginary();
      Complex complex15 = complex12.pow(complex3);
      boolean boolean0 = complex10.isNaN();
      Complex complex16 = complex8.sin();
      Complex complex17 = complex0.acos();
      Complex complex18 = complex1.sqrt();
      Complex complex19 = complex6.multiply(complex1);
      Complex complex20 = complex16.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 1105.43626);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-2305.445523599);
      Complex complex0 = new Complex((-2305.445523599));
      String string0 = complex0.I.toString();
      Complex complex1 = new Complex((-2305.445523599));
      Complex complex2 = complex0.multiply(complex1);
      int int0 = 3771;
      List<Complex> list0 = complex0.I.nthRoot(3771);
      // Undeclared exception!
      complex1.I.nthRoot(3771);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(1803.2057724149915, 2.0);
      Complex complex1 = complex0.sinh();
      double double0 = complex0.I.getArgument();
      Complex complex2 = complex0.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.valueOf(1.5707963267948966);
      boolean boolean0 = complex3.isNaN();
      boolean boolean1 = complex2.equals(complex0);
      Complex complex5 = complex2.add(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.6840562544109314E72));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex0.reciprocal();
      double double0 = complex0.abs();
      Complex complex6 = complex0.ZERO.conjugate();
      Complex complex7 = complex3.divide(complex5);
      Complex complex8 = complex1.negate();
      Complex complex9 = complex6.sqrt1z();
      Complex complex10 = complex5.INF.multiply(complex6);
      Complex complex11 = complex1.atan();
      Complex complex12 = complex6.ZERO.conjugate();
      double double1 = complex3.abs();
      Complex complex13 = complex5.NaN.pow(complex6);
      Complex complex14 = complex7.subtract((-1530.5615297390145));
      Complex complex15 = complex5.multiply((-4315));
      Complex complex16 = complex1.multiply(1533.222701525);
      Complex complex17 = complex16.asin();
      Complex complex18 = complex8.asin();
      Complex complex19 = complex10.multiply((-255));
      Complex complex20 = complex13.cosh();
      Complex complex21 = complex18.tan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.I.log();
      Complex complex4 = complex0.sqrt();
      double double0 = complex3.NaN.getArgument();
      Complex complex5 = complex0.ZERO.divide(0.0);
      try { 
        complex3.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2894.2786394045), (-20.0));
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      Complex complex2 = complex0.NaN.negate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.pow((-20.0));
      Complex complex4 = complex3.NaN.reciprocal();
      boolean boolean1 = complex3.isNaN();
      List<Complex> list0 = complex4.NaN.nthRoot(850);
      ComplexField complexField0 = complex3.getField();
      Complex complex5 = complex2.acos();
      double double0 = complex4.getImaginary();
      Complex complex6 = complex4.pow(complex5);
      String string0 = complex3.toString();
      Complex complex7 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4875.315034485582));
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.pow(2.2823266983032227);
      Complex complex4 = complex3.I.sqrt();
      Object object0 = complex0.readResolve();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex2.conjugate();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex7.I.pow(complex8);
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex10.divide(0.0);
      Object object1 = complex8.readResolve();
      Complex complex12 = complex8.cosh();
      Complex complex13 = complex7.pow(0.0);
      double double1 = complex8.abs();
      Complex complex14 = complex7.log();
      Complex complex15 = complex11.multiply(Double.NaN);
      Complex complex16 = complex5.createComplex(2.2823266983032227, Double.NaN);
      Complex complex17 = complex16.INF.subtract((-1.0));
      Complex complex18 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(344.0, (-3471.1855));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.conjugate();
      double double0 = complex1.getArgument();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.subtract(complex3);
      Object object0 = complex5.ONE.readResolve();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex0.NaN.multiply(0);
      Complex complex8 = complex7.ONE.subtract(complex0);
      double double1 = complex1.getImaginary();
      ComplexField complexField0 = complex3.getField();
      int int0 = complex4.hashCode();
      Complex complex9 = complex8.NaN.subtract((-3471.1855));
      double double2 = complex9.getArgument();
      Complex complex10 = complex5.subtract(0.0);
      Complex complex11 = complex10.NaN.divide(90.79387094);
      Complex complex12 = complex8.sin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.pow(complex0);
      Complex complex4 = complex3.NaN.cosh();
      Object object0 = complex0.readResolve();
      Complex complex5 = Complex.valueOf(3.047601928063002E193, 3.047601928063002E193);
      Complex complex6 = complex5.NaN.pow(1311.4741455417);
      ComplexField complexField0 = complex5.getField();
      Complex complex7 = complex1.I.cos();
      Object object1 = complex7.ONE.readResolve();
      Complex complex8 = complex7.ZERO.negate();
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex8.NaN.pow(complex0);
      Complex complex11 = complex7.ONE.exp();
      Complex complex12 = complex7.ZERO.cosh();
      Complex complex13 = complex12.conjugate();
      boolean boolean0 = complex0.equals(object0);
      Object object2 = complex1.readResolve();
      Complex complex14 = complex0.multiply(complex5);
      Complex complex15 = complex3.sqrt1z();
      Complex complex16 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex17 = complex15.asin();
      Complex complex18 = complex3.cos();
      double double0 = complex12.getReal();
      Complex complex19 = complex15.negate();
      Complex complex20 = complex11.divide(complex7);
      Complex complex21 = complex6.atan();
      Complex complex22 = Complex.valueOf(1311.4741455417);
      ComplexField complexField1 = complex0.getField();
      double double1 = complex12.getImaginary();
      Complex complex23 = complex0.multiply(1311.4741455417);
      int int0 = complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(812.1420615486);
      Complex complex1 = complex0.createComplex(812.1420615486, (-1341.426689385));
      Complex complex2 = complex1.pow((-212.8942437811));
      Complex complex3 = complex0.NaN.pow((-2855.473));
      Complex complex4 = complex0.exp();
      double double0 = complex4.I.abs();
      List<Complex> list0 = complex4.INF.nthRoot(9);
      Complex complex5 = complex4.ONE.multiply(complex0);
      Complex complex6 = Complex.valueOf(Double.NaN, (-782.0080222883));
      Complex complex7 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.I.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(Double.NaN, 1151.116716685);
      int int0 = complex0.ZERO.hashCode();
      double double0 = complex1.abs();
      Complex complex2 = complex1.NaN.sinh();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex4.multiply(1151.116716685);
      Complex complex6 = complex5.ZERO.asin();
      boolean boolean0 = complex0.isNaN();
      String string0 = complex1.toString();
      boolean boolean1 = complex4.isNaN();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex8.ONE.asin();
      Complex complex10 = complex8.NaN.sinh();
      ComplexField complexField1 = complex1.getField();
      double double1 = complex3.getImaginary();
      Complex complex11 = complex0.INF.subtract(complex9);
      Complex complex12 = complex6.cosh();
      Complex complex13 = complex8.reciprocal();
      boolean boolean2 = complex8.isInfinite();
      Complex complex14 = complex6.sinh();
      Complex complex15 = complex8.subtract(complex11);
      Complex complex16 = complex13.negate();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1612.9), (-1612.9));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex0.NaN.multiply(complex1);
      Complex complex5 = Complex.valueOf((-1612.9), (-1612.9));
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex1.divide(0.0);
      Complex complex8 = complex0.exp();
      Complex complex9 = complex8.ZERO.divide(complex4);
      Complex complex10 = complex9.I.acos();
      Complex complex11 = complex0.asin();
      Complex complex12 = complex1.I.sin();
      Complex complex13 = complex1.negate();
      Complex complex14 = complex1.sqrt();
      Complex complex15 = complex2.ONE.conjugate();
      Complex complex16 = complex1.tanh();
      Complex complex17 = complex16.ZERO.tan();
      Object object0 = complex12.readResolve();
      Complex complex18 = complex14.conjugate();
      boolean boolean0 = complex16.equals(object0);
      Object object1 = complex4.readResolve();
      Complex complex19 = complex3.add(complex16);
      Complex complex20 = Complex.valueOf((-1612.9), (-1612.9));
      Complex complex21 = complex14.tanh();
      boolean boolean1 = complex13.equals(complex11);
      Complex complex22 = complex6.asin();
      int int0 = complex9.hashCode();
      Complex complex23 = complex6.cosh();
      boolean boolean2 = complex15.isInfinite();
      Complex complex24 = Complex.valueOf((-1.315295870404327E-8));
      Complex complex25 = complex19.multiply((-1568.66));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.ZERO.sqrt1z();
      Complex complex4 = complex0.add(6.283185307179586);
      Complex complex5 = complex1.multiply(668.2616018524);
      String string1 = complex0.ONE.toString();
      Complex complex6 = complex5.INF.atan();
      boolean boolean1 = complex0.equals(complex1);
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex7.tan();
      ComplexField complexField0 = complex6.getField();
      Complex complex9 = complex6.divide(6.283185307179586);
      Complex complex10 = complex9.INF.exp();
      Complex complex11 = complex4.exp();
      boolean boolean2 = complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-580.96), 4718.58);
      List<Complex> list0 = complex0.I.nthRoot(37);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex2.createComplex(Double.POSITIVE_INFINITY, 1080.0);
      Complex complex4 = complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex2.NaN.exp();
      Complex complex5 = complex2.ZERO.exp();
      Complex complex6 = complex5.ONE.subtract(complex2);
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex7.ONE.multiply((-221));
      Complex complex9 = complex4.ZERO.createComplex((-1485.8713481), (-3392.61278));
      Complex complex10 = complex0.reciprocal();
      double double0 = complex4.ZERO.getArgument();
      Object object0 = complex8.readResolve();
      Complex complex11 = complex9.pow((-3392.61278));
      Complex complex12 = complex2.sin();
      Complex complex13 = complex8.negate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2252.53823775646);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex0.pow(2252.53823775646);
      Complex complex4 = complex3.NaN.add(complex2);
      Complex complex5 = complex2.INF.createComplex(0.0, 0.0);
      Complex complex6 = complex5.NaN.negate();
      Complex complex7 = complex6.divide(complex1);
      String string0 = complex0.toString();
      double double0 = complex2.getArgument();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex0.multiply(1.0);
      Complex complex10 = complex9.I.subtract((-2173.4));
      double double1 = complex9.NaN.getArgument();
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex11.INF.subtract(complex2);
      Complex complex13 = complex11.INF.negate();
      Complex complex14 = complex1.atan();
      Complex complex15 = Complex.INF;
      Complex complex16 = complex15.NaN.acos();
      Complex complex17 = complex6.multiply(complex15);
      double double2 = complex10.getReal();
      Complex complex18 = Complex.valueOf(1911.14863624695, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 2922.3);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2922.64031, 2922.64031);
      Complex complex1 = complex0.I.subtract(2922.64031);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.ZERO.multiply((-91.89142391));
      Complex complex4 = complex0.INF.asin();
      ComplexField complexField0 = complex4.ZERO.getField();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex2.exp();
      double double0 = complex2.getImaginary();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.tanh();
      double double1 = complex8.NaN.abs();
      Complex complex9 = complex8.ONE.sqrt();
      double double2 = complex2.getImaginary();
      double double3 = complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(671.03883063889);
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex2.multiply((-2019));
      boolean boolean0 = complex0.equals(complex2);
      Complex complex7 = complex5.multiply((-2019));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = (-1.0);
      Complex complex1 = new Complex((-1325.28298641164), (-1.0));
      double double1 = complex1.ZERO.abs();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex2.ONE.sinh();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex0.I.multiply((-1325.28298641164));
      try { 
        complex2.nthRoot((-52));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -52
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.pow(0.7853981633974483);
      String string0 = complex2.toString();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex3.multiply(1156.6349779);
      Complex complex6 = complex5.NaN.sqrt1z();
      double double1 = complex2.getImaginary();
      Complex complex7 = complex5.divide(complex2);
      double double2 = complex7.getImaginary();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex8.NaN.log();
      Complex complex10 = complex9.atan();
      String string1 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.subtract(214.44646);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex5.ONE.add(792.25);
      boolean boolean0 = complex1.equals(complex4);
      Complex complex7 = complex5.subtract(complex4);
      int int0 = 0;
      try { 
        complex7.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.add(1.1933437776279623E-7);
      double double0 = complex2.getArgument();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.pow(complex1);
      Complex complex7 = complex0.createComplex(1.1933437776279623E-7, 2283.0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.subtract(2158.94859725838);
      Complex complex2 = complex1.ONE.divide((-3070.30877));
      Complex complex3 = complex2.ZERO.acos();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.multiply((-3.5821668044872306E-285));
      boolean boolean0 = complex4.isInfinite();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.subtract(0.0);
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex3.acos();
      double double1 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(440.45925190957917, 1364.7821777709);
      Complex complex2 = complex1.I.acos();
      String string0 = complex0.toString();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.NaN.pow(0.375);
      Complex complex5 = Complex.valueOf(1364.7821777709, 20.0);
      Object object0 = complex5.I.readResolve();
      Complex complex6 = complex5.ONE.tan();
      List<Complex> list0 = complex5.nthRoot(421);
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex0.divide(0.0);
      Complex complex9 = complex1.tanh();
      Complex complex10 = Complex.valueOf((double) 421);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.createComplex(1382.357928, 0.0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2876.78081), (-2876.78081));
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-388.4732667604), (-388.4732667604));
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.pow(6.283185307179586);
      Complex complex3 = complex2.NaN.createComplex(0.0, (-388.4732667604));
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex2.I.multiply(6.283185307179586);
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.INF.sqrt1z();
      boolean boolean0 = complex2.equals((Object) null);
      Complex complex9 = complex0.log();
      Complex complex10 = Complex.I;
      double double0 = complex10.ZERO.abs();
      boolean boolean1 = complex7.equals(complex10);
      Complex complex11 = complex9.add(complex2);
      Complex complex12 = complex11.ZERO.multiply(1117);
      Complex complex13 = complex1.sinh();
      Complex complex14 = complex1.multiply(complex10);
      Complex complex15 = complex4.add((-1191.1726062099056));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-465.7942), (-465.7942));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.66496216365));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.log();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex1.createComplex(0.27193373441696167, (-2631.1));
      Complex complex6 = Complex.valueOf(1933.02552574358, (-2631.1));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(747.23258, 0.0);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.createComplex((-3975.4476937204076), 747.23258);
      String string0 = complex1.I.toString();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.NaN.tanh();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex0.multiply(1346);
      Complex complex6 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex2.NaN.subtract(0.0);
      Complex complex4 = complex2.I.divide(339.47522);
      Complex complex5 = complex0.ONE.add(complex1);
      Complex complex6 = complex1.ONE.asin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.add(complex0);
      Complex complex9 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ONE.add((-2228.16));
      Complex complex3 = complex0.add((-1511.2606913));
      Complex complex4 = complex2.divide(complex1);
      Object object0 = complex4.ZERO.readResolve();
      Object object1 = complex0.INF.readResolve();
      Complex complex5 = complex3.add(complex1);
      String string0 = complex5.I.toString();
      Complex complex6 = complex5.I.cos();
      Object object2 = complex5.INF.readResolve();
      Complex complex7 = complex6.ONE.divide(complex0);
      Complex complex8 = complex5.cos();
      Complex complex9 = complex5.INF.divide((-1511.2606913));
      Object object3 = complex9.ONE.readResolve();
      Complex complex10 = complex9.subtract(complex8);
      String string1 = complex1.toString();
      Complex complex11 = complex5.ONE.sin();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY, (-867.403415885163));
      Complex complex13 = Complex.valueOf(20.0, (-1511.2606913));
      Complex complex14 = complex6.I.subtract(complex13);
      Complex complex15 = complex14.ZERO.pow(complex7);
      Complex complex16 = complex15.NaN.conjugate();
      Complex complex17 = complex6.createComplex(Double.POSITIVE_INFINITY, 2.1525406805994896E-208);
      Complex complex18 = complex6.divide(2.1525406805994896E-208);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.multiply(350.9363034682);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.ONE.add(complex3);
      Complex complex5 = complex0.pow(350.9363034682);
      Complex complex6 = complex5.tan();
      Complex complex7 = Complex.valueOf((-2925.707310386), (-734.6924473));
      Object object0 = complex0.readResolve();
      Complex complex8 = complex5.acos();
      Complex complex9 = complex8.ZERO.createComplex((-2925.707310386), (-2925.707310386));
      boolean boolean0 = complex7.isNaN();
      Complex complex10 = complex7.divide((-734.6924473));
      double double0 = complex5.getArgument();
      Complex complex11 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex12 = complex6.reciprocal();
      double double1 = complex9.getReal();
      Complex complex13 = Complex.valueOf(350.9363034682, 0.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.ZERO.hashCode();
      double double0 = 0.0;
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.NaN.pow((-901.385658379));
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex4.INF.atan();
      boolean boolean0 = complex1.isNaN();
      try { 
        complex1.nthRoot((-526));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -526
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.I.pow((-20.0));
      Object object0 = complex1.I.readResolve();
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex0.createComplex((-61.06591863), (-20.0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.sinh();
      int int0 = complex2.NaN.hashCode();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex4.ZERO.add((-560.232658469721));
      String string0 = complex1.I.toString();
      Complex complex7 = complex4.multiply((-231));
      Complex complex8 = complex2.pow(complex4);
      double double0 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.2906712010774655E-8));
      Complex complex1 = complex0.multiply((-3676));
      Complex complex2 = Complex.valueOf((-1.2906712010774655E-8), (double) (-3676));
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex2.INF.add(complex0);
      Complex complex5 = complex1.multiply(1);
      Complex complex6 = complex0.negate();
      Complex complex7 = complex5.acos();
      Complex complex8 = complex3.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex0.cosh();
      int int0 = complex7.NaN.hashCode();
      Complex complex8 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(153.0);
      double double0 = complex0.I.abs();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex1.INF.conjugate();
      List<Complex> list0 = complex2.ONE.nthRoot(17);
      Complex complex5 = complex0.pow(703.0);
      Complex complex6 = complex2.tan();
      Complex complex7 = complex5.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex1.INF.subtract(complex0);
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      Complex complex5 = Complex.valueOf((-652.34341141524), (-652.34341141524));
      Complex complex6 = complex5.conjugate();
      int int0 = complex1.hashCode();
      double double0 = complex1.getImaginary();
      Complex complex7 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(1117);
      double double0 = complex1.INF.getArgument();
      double double1 = complex0.getImaginary();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.pow(complex0);
      double double2 = complex3.getReal();
      double double3 = complex0.getReal();
      Complex complex4 = complex3.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.divide((-2094.1401));
      Complex complex2 = complex1.I.sqrt();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex3 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.createComplex((-1463.91599445), 20.0);
      ComplexField complexField0 = complex2.getField();
      Complex complex5 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.ZERO.acos();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.NaN.tan();
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.createComplex(920.2274822872, 737.0087520089174);
      double double0 = complex0.NaN.abs();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.INF.add(complex1);
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.ZERO.log();
      Complex complex5 = complex2.ONE.sin();
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex6.cos();
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex2.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-1193.876));
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.NaN.cos();
      int int0 = complex0.hashCode();
      Complex complex3 = Complex.valueOf((-1193.876));
      Object object0 = complex0.readResolve();
      Complex complex4 = complex1.multiply(2.0);
      Complex complex5 = complex4.NaN.add(complex2);
      Complex complex6 = complex2.divide(complex0);
      Object object1 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.subtract(1.0);
      String string0 = complex0.toString();
      double double0 = complex0.INF.getArgument();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.cos();
      double double1 = complex0.getReal();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.subtract(6.283185307179586);
      Complex complex6 = complex5.I.negate();
      int int0 = complex4.hashCode();
      double double2 = complex2.getReal();
      Complex complex7 = complex1.exp();
      int int1 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract((-2061.851724005292));
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.createComplex(0.0, 0.0);
      Complex complex5 = Complex.valueOf((-2061.851724005292));
      int int0 = complex5.ZERO.hashCode();
      Complex complex6 = complex2.divide(complex3);
      Complex complex7 = complex2.multiply(1);
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(237.9774110535);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.595453077213505E-8));
      boolean boolean0 = complex0.isNaN();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(421.17417678, 2.0);
      Complex complex1 = complex0.pow((-1.1345515834332824E-7));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = Complex.valueOf((-1.0), (-1.0));
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = complex1.ONE.pow((-1.0));
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex5.I.divide(complex2);
      Complex complex7 = complex0.pow((-1.0));
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      String string0 = complex0.NaN.toString();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex0.atan();
      try { 
        complex4.nthRoot((-1200));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,200
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.negate();
      String string0 = complex0.ONE.toString();
      Object object0 = complex0.NaN.readResolve();
      Complex complex3 = complex2.divide(0.17020416259765625);
      Complex complex4 = complex2.acos();
      Complex complex5 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.ZERO.subtract(1353.468601);
      Complex complex3 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.divide(complex1);
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2574.1249712, 2574.1249712);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.pow(2574.1249712);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = Complex.valueOf(20.0, 0.6435998678207397);
      Complex complex4 = complex0.sin();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex1.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = complex1.exp();
      double double1 = complex1.getImaginary();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(958.488);
      double double0 = complex0.abs();
      ComplexField complexField0 = complex0.getField();
      String string0 = complex0.toString();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.acos();
      Complex complex6 = Complex.valueOf((-1815.844617100618));
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex2.subtract(0.0);
      boolean boolean0 = complex4.equals(complex8);
      Complex complex9 = complex8.add(0.0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.divide(611.34518454);
      Object object0 = complex0.I.readResolve();
      Complex complex2 = complex0.INF.multiply((-193.7707));
      Complex complex3 = complex0.tanh();
      double double0 = complex0.abs();
      boolean boolean0 = complex1.isInfinite();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.ZERO.subtract(complex0);
      Complex complex7 = Complex.I;
      Complex complex8 = complex1.pow(complex7);
      Complex complex9 = complex6.add(complex4);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = Complex.valueOf((-310.0));
      double double0 = complex0.abs();
      Complex complex4 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2049.277022280887, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.INF.subtract(complex1);
      double double0 = complex2.getImaginary();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex3.ONE.acos();
      double double1 = complex0.getArgument();
      Complex complex6 = complex3.divide(2049.277022280887);
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex6.NaN.cosh();
      Complex complex9 = complex3.createComplex(0.0, 4114.64);
      Complex complex10 = complex0.multiply((-0.8912375225664517));
      ComplexField complexField0 = complex1.getField();
      double double2 = complex9.getImaginary();
      double double3 = complex4.getArgument();
      Complex complex11 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1855.653);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.I.createComplex((-694.43753596), 0.0);
      Complex complex5 = complex0.multiply(1855.653);
      double double0 = complex5.abs();
      Complex complex6 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1441.0);
      Complex complex1 = new Complex((-1653.668476069148), (-2149.1864015935653));
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.subtract(complex0);
      double double0 = complex2.INF.abs();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex3.INF.exp();
      int int0 = (-4550);
      try { 
        complex2.nthRoot((-4550));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,550
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.NaN.reciprocal();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex4 = complex0.INF.negate();
      Complex complex5 = complex0.NaN.sqrt();
      Complex complex6 = complex1.add(Double.NaN);
      Complex complex7 = complex6.reciprocal();
      int int0 = 0;
      Complex complex8 = complex7.ZERO.log();
      Complex complex9 = complex8.ONE.pow(0.0);
      Complex complex10 = complex8.reciprocal();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-220.3426393495));
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.divide(complex1);
      String string0 = complex0.toString();
      Complex complex4 = complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.ONE.sin();
      Complex complex5 = complex0.divide(complex2);
      double double0 = complex5.getArgument();
      Complex complex6 = complex4.pow(Double.NaN);
      Complex complex7 = complex5.cos();
      Complex complex8 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex0.atan();
      boolean boolean0 = complex0.equals(complex1);
      boolean boolean1 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.multiply((-2515));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex3.sin();
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex0.NaN.divide((-987.49931));
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.NaN.pow((-987.49931));
      Complex complex7 = complex1.pow(0.0);
      double double0 = complex1.getImaginary();
      Complex complex8 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex1.I.tanh();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex0.ZERO.cos();
      Complex complex8 = complex6.NaN.sinh();
      Complex complex9 = complex6.INF.negate();
      Complex complex10 = complex9.NaN.conjugate();
      Complex complex11 = complex0.INF.add(complex4);
      Complex complex12 = complex11.ONE.cosh();
      Complex complex13 = complex5.log();
      Complex complex14 = complex0.I.multiply(0);
      double double0 = complex14.ZERO.abs();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex15 = complex7.INF.pow(complex14);
      Complex complex16 = complex7.INF.reciprocal();
      Complex complex17 = complex13.ONE.negate();
      boolean boolean1 = complex14.equals(complex5);
      Complex complex18 = complex6.createComplex(6.283185307179586, 0);
      double double1 = complex5.abs();
      Object object0 = complex1.readResolve();
      double double2 = complex7.abs();
      Complex complex19 = complex18.log();
      Complex complex20 = complex19.sin();
      Complex complex21 = complex6.sqrt();
      String string0 = complex21.toString();
      Complex complex22 = complex4.reciprocal();
      Complex complex23 = complex13.pow(complex3);
      Complex complex24 = complex15.add(complex8);
      Complex complex25 = complex24.pow(1.4780692924846082E197);
      Complex complex26 = complex16.sinh();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex0.add((-20.288743499));
      Complex complex5 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      double double0 = complex2.ZERO.abs();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex0.INF.divide(complex1);
      Object object0 = complex6.NaN.readResolve();
      Complex complex7 = complex3.multiply(0);
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(94.4337, 94.4337);
      String string0 = complex0.toString();
      Complex complex1 = complex0.ONE.log();
      double double0 = complex0.abs();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex1.divide(complex4);
      Complex complex7 = complex5.createComplex(94.4337, 133.54941928507216);
      Complex complex8 = complex5.ONE.add(complex2);
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex1.add(complex5);
      double double1 = complex0.getArgument();
      Complex complex11 = complex10.I.log();
      Complex complex12 = Complex.valueOf(94.4337, 1.0);
      Complex complex13 = complex4.subtract(complex5);
      Complex complex14 = complex6.divide(complex10);
      Complex complex15 = complex14.NaN.add(94.4337);
      boolean boolean0 = complex12.equals((Object) null);
      Complex complex16 = complex3.add(complex7);
      Complex complex17 = complex13.pow(94.4337);
      Complex complex18 = complex1.subtract(complex4);
      Complex complex19 = complex1.multiply(7);
      ComplexField complexField0 = complex6.getField();
      Complex complex20 = complex3.sin();
      String string1 = complex20.ONE.toString();
      Complex complex21 = complex1.I.acos();
      Complex complex22 = complex3.divide((-3357.7344));
      Complex complex23 = complex10.multiply(complex17);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(620.49823, 620.49823);
      double double0 = complex1.I.getArgument();
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex((-2450.586676535715), 1.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.subtract(complex1);
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex0.subtract((-3114.2));
      String string0 = complex1.ZERO.toString();
      Complex complex5 = complex4.ZERO.multiply((-3114.2));
      ComplexField complexField1 = complex4.getField();
      Complex complex6 = complex0.subtract(complex4);
      Complex complex7 = complex6.ZERO.add(1238.448092676);
      Complex complex8 = complex7.INF.reciprocal();
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex2.cos();
      Complex complex11 = complex6.add((-380.308));
      Complex complex12 = complex4.acos();
      Complex complex13 = complex7.reciprocal();
      Complex complex14 = Complex.valueOf(3.6508464654683645E118);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2.0433926409457167E-7));
      Complex complex1 = new Complex((-1761.824));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex1.ONE.createComplex(0.0, 0.0);
      List<Complex> list0 = complex0.I.nthRoot(1322);
      Complex complex5 = complex1.log();
      String string0 = complex5.INF.toString();
      Complex complex6 = complex1.divide(complex2);
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex2.NaN.conjugate();
      Complex complex9 = complex5.multiply(complex1);
      List<Complex> list1 = complex2.nthRoot(37);
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex10.ZERO.subtract((-1761.824));
      Complex complex12 = complex11.INF.pow((-1761.824));
      Complex complex13 = complex10.sqrt1z();
      Complex complex14 = complex9.cos();
      Complex complex15 = complex11.reciprocal();
      boolean boolean0 = complex10.equals("(Infinity, Infinity)");
      Complex complex16 = complex13.multiply(3063.45709408);
      Complex complex17 = complex8.multiply((-1761.824));
      Complex complex18 = complex5.negate();
      Complex complex19 = complex9.divide((-1236.4445605));
      Object object0 = complex19.NaN.readResolve();
      Complex complex20 = complex5.divide(complex0);
      Complex complex21 = complex5.multiply(37);
      Complex complex22 = complex21.NaN.multiply(0.0);
      Complex complex23 = complex9.multiply((-1761.824));
      Complex complex24 = complex17.sinh();
      Complex complex25 = complex10.reciprocal();
  }
}
