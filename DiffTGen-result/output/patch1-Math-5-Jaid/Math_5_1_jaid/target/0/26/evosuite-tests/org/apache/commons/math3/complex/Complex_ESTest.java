/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 01:53:04 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(2203.2);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex1.ZERO.exp();
      Complex complex5 = complex2.ONE.reciprocal();
      String string0 = complex4.ONE.toString();
      Complex complex6 = complex0.I.sin();
      Complex complex7 = complex1.ONE.multiply(Double.NaN);
      Complex complex8 = complex4.I.atan();
      List<Complex> list0 = complex0.nthRoot(1);
      double double0 = complex0.getArgument();
      double double1 = complex1.getImaginary();
      Complex complex9 = Complex.valueOf(1908.09537643791);
      Complex complex10 = complex9.sqrt();
      String string1 = complex0.toString();
      Object object0 = complex10.ZERO.readResolve();
      Complex complex11 = complex0.INF.multiply(complex10);
      Complex complex12 = complex11.ZERO.sin();
      List<Complex> list1 = complex2.nthRoot(3072);
      Object object1 = complex8.readResolve();
      Complex complex13 = complex4.multiply(complex3);
      Complex complex14 = complex2.ZERO.subtract(complex12);
      Complex complex15 = complex13.INF.multiply(1);
      Complex complex16 = complex13.subtract(complex8);
      boolean boolean0 = complex11.isInfinite();
      Complex complex17 = complex4.tanh();
      Complex complex18 = complex17.divide(complex9);
      Complex complex19 = complex18.I.divide(0.0);
      Complex complex20 = complex12.multiply((double) 1);
      Complex complex21 = complex4.multiply(complex17);
      Complex complex22 = Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex0.NaN.exp();
      Object object0 = complex4.I.readResolve();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex1.tan();
      Complex complex7 = Complex.valueOf(0.0, 364.287481899131);
      Complex complex8 = complex2.sqrt();
      Complex complex9 = complex8.ONE.createComplex(364.287481899131, 1621.012);
      Complex complex10 = complex1.createComplex(0.0, 1805.5535422);
      Complex complex11 = complex2.conjugate();
      String string0 = complex11.toString();
      Complex complex12 = complex10.sin();
      Complex complex13 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-2.4220822960064277E-9));
      Complex complex1 = complex0.sin();
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.I.createComplex(0.0, (-20.0));
      Complex complex4 = complex2.I.createComplex((-918.8239295), 661);
      Complex complex5 = complex1.ONE.asin();
      Complex complex6 = complex5.I.asin();
      List<Complex> list0 = complex0.nthRoot(661);
      String string0 = complex1.NaN.toString();
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = complex4.negate();
      Complex complex9 = complex6.multiply(complex5);
      int int0 = complex7.I.hashCode();
      Complex complex10 = complex1.I.atan();
      Complex complex11 = complex7.exp();
      ComplexField complexField0 = complex11.getField();
      Complex complex12 = complex6.conjugate();
      Complex complex13 = complex6.atan();
      Complex complex14 = complex4.cosh();
      Complex complex15 = complex12.acos();
      Complex complex16 = complex15.createComplex((-1.0), 0.0);
      Complex complex17 = complex11.asin();
      double double1 = complex0.abs();
      Complex complex18 = Complex.valueOf((-937.160263053));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.92909364037955E-9, 1.92909364037955E-9);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.acos();
      String string0 = complex3.ZERO.toString();
      Complex complex4 = Complex.valueOf(1.92909364037955E-9, 2676.57668761458);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex0.cos();
      ComplexField complexField0 = complex4.I.getField();
      Complex complex7 = complex3.asin();
      double double0 = complex0.abs();
      Complex complex8 = complex3.I.cosh();
      String string1 = complex4.INF.toString();
      Complex complex9 = complex4.pow(0.0);
      double double1 = complex7.abs();
      Complex complex10 = complex0.subtract(complex9);
      Complex complex11 = complex4.negate();
      Complex complex12 = complex11.multiply((-1513));
      Complex complex13 = complex8.asin();
      Complex complex14 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex1.NaN.sinh();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex0.multiply(17);
      Complex complex7 = complex6.ONE.pow(complex4);
      Complex complex8 = Complex.valueOf((-2.7897360297480367E104), 0.0);
      Complex complex9 = complex8.multiply(complex5);
      Complex complex10 = complex9.add(0.5220900774002075);
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex13 = complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.subtract(Double.NaN);
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex4.I.negate();
      double double0 = complex1.NaN.getArgument();
      Complex complex7 = complex0.I.multiply(9.390740355567705E62);
      double double1 = complex7.I.abs();
      Complex complex8 = complex0.I.log();
      Complex complex9 = complex8.ONE.createComplex(9.390740355567705E62, Double.NaN);
      ComplexField complexField0 = complex0.NaN.getField();
      double double2 = complex0.getImaginary();
      ComplexField complexField1 = complex0.getField();
      Complex complex10 = complex1.add(0.0);
      boolean boolean0 = complex10.isNaN();
      List<Complex> list0 = complex9.nthRoot(37);
      Complex complex11 = Complex.valueOf(1190.50025);
      Complex complex12 = complex11.ZERO.reciprocal();
      Complex complex13 = complex12.INF.asin();
      Complex complex14 = complex1.asin();
      Complex complex15 = complex14.multiply(complex1);
      Complex complex16 = Complex.valueOf((-20.0));
      Complex complex17 = complex16.NaN.cos();
      Complex complex18 = Complex.valueOf(0.0);
      Complex complex19 = complex17.NaN.asin();
      boolean boolean1 = complex14.isNaN();
      List<Complex> list1 = complex12.nthRoot(37);
      Complex complex20 = complex1.subtract(complex19);
      Complex complex21 = complex13.pow((double) 37);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.NaN.hashCode();
      try { 
        complex0.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(769.00486754);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.I.multiply((-3751));
      double double0 = complex1.getArgument();
      double double1 = complex1.INF.abs();
      Complex complex3 = complex0.I.tan();
      Object object0 = complex0.NaN.readResolve();
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex0.subtract(769.00486754);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.NaN.log();
      Complex complex8 = complex7.NaN.conjugate();
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex0.subtract(complex6);
      Complex complex11 = complex6.negate();
      Complex complex12 = complex7.add(769.00486754);
      Complex complex13 = complex11.NaN.multiply(complex10);
      Complex complex14 = complex11.ZERO.cosh();
      Complex complex15 = complex12.tan();
      double double2 = complex15.NaN.abs();
      Complex complex16 = complex12.multiply(5471);
      Complex complex17 = complex16.sqrt();
      Complex complex18 = complex11.cosh();
      Complex complex19 = complex18.ONE.pow((double) (-3751));
      Complex complex20 = complex17.reciprocal();
      // Undeclared exception!
      complex2.nthRoot(5471);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.718281828459045, 2.718281828459045);
      Complex complex1 = new Complex(1.2791850600366742E-9);
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, 1.2791850600366742E-9);
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex2.ONE.divide(complex1);
      Complex complex5 = complex0.subtract(complex1);
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex5.createComplex(0.0, Double.POSITIVE_INFINITY);
      double double0 = complex4.getReal();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex4.sqrt1z();
      boolean boolean0 = complex2.isNaN();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex2.add(0.0);
      Complex complex11 = complex8.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.pow(2.3296151161193848);
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex3.ZERO.sqrt();
      ComplexField complexField0 = complex2.NaN.getField();
      double double0 = complex2.getArgument();
      Complex complex6 = complex3.ONE.exp();
      Object object0 = complex2.readResolve();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex5.subtract(Double.NaN);
      Complex complex9 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = (-779.0);
      Complex complex0 = Complex.valueOf((-1.6332083257987747E-10), (-779.0));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex1.createComplex((-1.6332083257987747E-10), (-2219.895346611));
      double double1 = complex4.NaN.getArgument();
      int int0 = 483;
      List<Complex> list0 = complex1.NaN.nthRoot(483);
      try { 
        complex1.NaN.nthRoot((-832));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -832
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.06703783571720123, (-1.0));
      Complex complex1 = complex0.tanh();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex1.add(3324.6252029);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.NaN.multiply((-1));
      String string0 = complex0.toString();
      Complex complex4 = complex2.ZERO.multiply((double) (-1));
      double double1 = (-925.97922662681);
      Complex complex5 = Complex.valueOf((-925.97922662681));
      double double2 = complex0.getImaginary();
      Complex complex6 = complex0.multiply(complex3);
      double double3 = 0.0;
      Complex complex7 = complex6.NaN.createComplex(0.0, Double.NaN);
      try { 
        complex7.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1064911705560668E176, 2.1064911705560668E176);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.INF.multiply(2.1064911705560668E176);
      List<Complex> list0 = complex2.I.nthRoot(1);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex1.multiply(608.0296722);
      String string0 = complex3.NaN.toString();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex3.negate();
      ComplexField complexField0 = complex5.I.getField();
      Complex complex6 = complex5.subtract(608.0296722);
      Complex complex7 = Complex.ONE;
      boolean boolean0 = complex2.equals(complex7);
      Complex complex8 = complex4.createComplex(608.0296722, (-288.7001160252));
      Complex complex9 = complex6.divide(608.0296722);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.pow(complex1);
      double double1 = complex2.I.abs();
      Complex complex3 = complex1.NaN.sin();
      String string0 = complex3.ONE.toString();
      double double2 = complex0.getImaginary();
      Complex complex4 = complex1.I.createComplex(0.0, Double.NaN);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.NaN.sqrt1z();
      double double3 = complex6.ONE.getArgument();
      String string1 = complex5.toString();
      int int0 = complex0.hashCode();
      Complex complex7 = complex1.sin();
      boolean boolean0 = complex2.isNaN();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.exp();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ONE.add(Double.NaN);
      Complex complex4 = complex3.ZERO.conjugate();
      double double0 = complex1.NaN.abs();
      Complex complex5 = complex4.NaN.divide(Double.NaN);
      Complex complex6 = complex1.I.conjugate();
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = Complex.valueOf(1.3683509995845583E-8);
      Complex complex9 = complex1.multiply(785);
      double double1 = complex9.getArgument();
      Complex complex10 = complex4.add((double) 785);
      Complex complex11 = complex10.negate();
      double double2 = complex0.NaN.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex12 = complex10.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-825.388375340506), (-825.388375340506));
      Complex complex1 = new Complex((-825.388375340506), (-825.388375340506));
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex2.INF.multiply((-3126));
      Complex complex5 = complex0.subtract(4.3791842770430786E-218);
      boolean boolean0 = complex5.isInfinite();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex5.I.divide(complex4);
      Complex complex8 = complex7.ONE.tanh();
      Complex complex9 = Complex.valueOf((-648.74661));
      boolean boolean1 = complex6.isNaN();
      ComplexField complexField0 = complex9.getField();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.equals((Object) null);
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.ONE.divide((-670.089931));
      Complex complex4 = complex1.NaN.pow((-2896.3179897));
      Object object0 = complex0.INF.readResolve();
      Complex complex5 = complex2.pow(6.283185307179586);
      Complex complex6 = complex0.ZERO.pow(775.0);
      Complex complex7 = complex3.tan();
      boolean boolean1 = complex0.isNaN();
      double double0 = complex1.getImaginary();
      boolean boolean2 = complex1.equals(complex0);
      double double1 = complex3.getReal();
      Complex complex8 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(243.453363678459, (-2638.6651457));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.INF.multiply(243.453363678459);
      Complex complex5 = complex4.I.subtract((-1092.0));
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex1.divide(complex7);
      double double0 = complex3.abs();
      double double1 = complex7.getImaginary();
      Complex complex9 = complex0.pow(6.283185307179586);
      Complex complex10 = complex9.I.acos();
      double double2 = complex9.abs();
      Complex complex11 = complex6.subtract(243.453363678459);
      Complex complex12 = complex6.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex0.subtract(0.0);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex3 = complex2.ZERO.createComplex(0.0, 0.0);
      Complex complex4 = complex3.NaN.multiply(832);
      Complex complex5 = complex3.divide(complex0);
      String string0 = complex2.toString();
      Complex complex6 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(802.0, 802.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.createComplex(802.0, 802.0);
      Complex complex4 = complex2.acos();
      Complex complex5 = complex4.ZERO.multiply(complex2);
      Complex complex6 = complex2.cos();
      Complex complex7 = complex3.subtract(0.0);
      Complex complex8 = complex7.ONE.conjugate();
      int int0 = complex2.I.hashCode();
      Complex complex9 = complex5.negate();
      double double0 = complex9.ONE.getArgument();
      Complex complex10 = complex2.acos();
      Complex complex11 = complex3.I.cosh();
      Complex complex12 = complex3.atan();
      Complex complex13 = complex9.subtract(802.0);
      Complex complex14 = complex3.multiply((-100.549));
      Complex complex15 = complex0.exp();
      Object object0 = new Object();
      boolean boolean0 = complex3.equals(object0);
      Complex complex16 = complex12.reciprocal();
      Complex complex17 = complex2.I.cos();
      double double1 = complex6.getArgument();
      double double2 = complex3.getReal();
      Complex complex18 = complex1.subtract(complex8);
      Complex complex19 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(53.870418701);
      Complex complex1 = complex0.NaN.tanh();
      List<Complex> list0 = complex0.nthRoot(37);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.tan();
      double double0 = complex3.getImaginary();
      Complex complex4 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(976.6199554286);
      Complex complex1 = new Complex(976.6199554286);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.I.cos();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.atan();
      boolean boolean0 = complex4.isNaN();
      Complex complex5 = complex3.add(complex4);
      Complex complex6 = complex0.subtract(complex4);
      Complex complex7 = complex0.sinh();
      Complex complex8 = Complex.valueOf(976.6199554286);
      Complex complex9 = complex8.pow(976.6199554286);
      Complex complex10 = complex5.divide(976.6199554286);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 689.48742934);
      Complex complex1 = complex0.sqrt1z();
      Object object0 = complex1.ONE.readResolve();
      boolean boolean0 = complex1.equals((Object) null);
      Complex complex2 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-427.21908428806074));
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = Complex.valueOf(Double.NaN, (-427.21908428806074));
      Complex complex2 = complex0.createComplex(1678.1237352635026, 1678.1237352635026);
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex2.ZERO.log();
      String string0 = complex5.NaN.toString();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.ZERO.subtract(1678.1237352635026);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex4.multiply(7);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = (-943.014963);
      Complex complex0 = new Complex((-943.014963));
      double double1 = (-2559.182155316);
      try { 
        complex0.ONE.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = Complex.valueOf((-2795.61153));
      double double0 = complex0.abs();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex4.ONE.subtract(2.637223243713379);
      Complex complex6 = complex3.ONE.tanh();
      Complex complex7 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.INF.asin();
      Complex complex9 = complex7.NaN.pow((-2905.11));
      Complex complex10 = complex7.NaN.exp();
      List<Complex> list0 = complex7.NaN.nthRoot(722);
      Complex complex11 = complex7.ONE.multiply(complex1);
      double double1 = complex0.getImaginary();
      Complex complex12 = complex0.sin();
      String string0 = complex7.toString();
      Complex complex13 = complex12.pow((double) 722);
      Object object0 = complex13.INF.readResolve();
      Complex complex14 = complex0.conjugate();
      Complex complex15 = complex14.ONE.cos();
      List<Complex> list1 = complex14.ZERO.nthRoot(1892);
      Complex complex16 = complex1.NaN.exp();
      Complex complex17 = complex16.ONE.conjugate();
      boolean boolean0 = complex1.isInfinite();
      Complex complex18 = complex1.tanh();
      Complex complex19 = complex16.multiply(complex13);
      Complex complex20 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = new Complex((-1109.1795964), 3230.0);
      Complex complex4 = complex0.I.divide(complex3);
      Complex complex5 = complex0.pow(complex2);
      double double0 = complex1.getArgument();
      boolean boolean0 = complex4.equals(complex1);
      Complex complex6 = complex2.exp();
      Complex complex7 = complex4.divide(complex3);
      double double1 = complex3.ZERO.abs();
      boolean boolean1 = complex5.isInfinite();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex7.divide(Double.NaN);
      Complex complex10 = Complex.valueOf((-1109.1795964));
      Complex complex11 = complex7.I.sin();
      Complex complex12 = complex7.ONE.log();
      List<Complex> list0 = complex8.nthRoot(37);
      Complex complex13 = complex1.sqrt();
      Complex complex14 = complex13.pow(complex9);
      Complex complex15 = complex14.INF.tanh();
      Complex complex16 = complex6.createComplex(2518.403982382175, 2143.91);
      Complex complex17 = complex16.tan();
      Complex complex18 = complex10.sqrt1z();
      Complex complex19 = complex1.subtract(0.0);
      Complex complex20 = complex5.cos();
      Complex complex21 = complex5.createComplex(37, 0.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.NaN, 1.7896699905395508);
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex2.ZERO.multiply(Double.NaN);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex1.I.acos();
      Complex complex8 = complex7.cos();
      Complex complex9 = complex8.INF.sinh();
      ComplexField complexField0 = complex0.getField();
      Complex complex10 = complex0.negate();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      Complex complex12 = complex11.divide((-1098.570429971369));
      List<Complex> list0 = complex12.ZERO.nthRoot(224);
      Complex complex13 = complex10.I.sqrt1z();
      Complex complex14 = complex11.divide(Double.NaN);
      Complex complex15 = complex10.reciprocal();
      Complex complex16 = Complex.valueOf((double) 224);
      Complex complex17 = complex0.log();
      String string0 = complex17.I.toString();
      Complex complex18 = complex14.I.add(complex1);
      Complex complex19 = complex10.sqrt();
      Complex complex20 = complex14.sqrt();
      Complex complex21 = complex13.sqrt();
      Complex complex22 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(3094.268689305);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex4.NaN.tan();
      Complex complex7 = complex4.ZERO.createComplex(0.0, 3094.268689305);
      Complex complex8 = complex7.NaN.createComplex(3094.268689305, 0.0);
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex9.divide((-744.30606));
      Complex complex11 = complex9.ZERO.tan();
      Complex complex12 = complex11.NaN.cos();
      Complex complex13 = complex2.add(3094.268689305);
      Complex complex14 = Complex.valueOf(3094.268689305, (-744.30606));
      Object object0 = complex2.readResolve();
      int int0 = complex12.NaN.hashCode();
      boolean boolean0 = complex9.equals(object0);
      Complex complex15 = complex1.acos();
      Complex complex16 = complex12.cos();
      Complex complex17 = complex7.cos();
      Complex complex18 = Complex.valueOf((-20.0), 3046.212);
      Complex complex19 = complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.INF.createComplex(0.0, 0.0);
      Complex complex4 = complex0.divide(complex1);
      ComplexField complexField0 = complex4.I.getField();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex3.acos();
      Complex complex8 = complex1.I.exp();
      ComplexField complexField1 = complex3.getField();
      Complex complex9 = complex7.pow(0.0);
      Complex complex10 = complex9.divide(complex0);
      Complex complex11 = complex8.divide(complex6);
      double double0 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.3424576100819801E-291), (-1.3424576100819801E-291));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.I.add((-1.3424576100819801E-291));
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex3 = complex2.INF.createComplex((-397.97), 595.70963238414);
      Complex complex4 = complex2.I.log();
      Complex complex5 = complex0.I.log();
      Complex complex6 = Complex.valueOf((-1.3424576100819801E-291), Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.multiply(0.0);
      Complex complex8 = complex1.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2736636153072213E-90);
      Complex complex1 = complex0.exp();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.I.pow(0.0);
      int int0 = complex3.I.hashCode();
      Complex complex4 = complex0.I.createComplex(0.0, 3865.6282571);
      Complex complex5 = complex2.ZERO.tanh();
      int int1 = complex1.INF.hashCode();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.pow(complex1);
      double double0 = complex6.NaN.getArgument();
      Complex complex8 = complex5.I.multiply(3865.6282571);
      Complex complex9 = complex8.I.reciprocal();
      Complex complex10 = complex2.tanh();
      Complex complex11 = complex5.INF.multiply(0);
      Complex complex12 = complex10.subtract(complex4);
      Complex complex13 = complex5.log();
      Complex complex14 = complex13.INF.pow(complex10);
      Complex complex15 = complex4.tan();
      Complex complex16 = complex5.createComplex(0.0, 0.0);
      Complex complex17 = complex1.sin();
      Complex complex18 = complex12.exp();
      Complex complex19 = complex12.atan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.I.add(complex0);
      Complex complex5 = complex0.pow(0.0);
      Complex complex6 = complex5.I.sinh();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex6.reciprocal();
      double double0 = complex2.ONE.getArgument();
      Complex complex9 = complex6.INF.reciprocal();
      Complex complex10 = complex2.divide(0.0);
      Complex complex11 = complex8.ONE.tan();
      Complex complex12 = complex10.add(complex0);
      Complex complex13 = complex1.subtract(complex8);
      Complex complex14 = complex6.reciprocal();
      Complex complex15 = complex8.divide(0.0);
      Object object0 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = 1784.8748794579774;
      Complex complex0 = Complex.valueOf(1784.8748794579774);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex1.ONE.sqrt1z();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.6409968137741089, (-1532.2933202));
      Complex complex1 = Complex.valueOf(0.6409968137741089, (-1532.2933202));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex3.INF.sinh();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-441.1331856852), (-441.1331856852));
      Complex complex1 = complex0.log();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex1.NaN.tan();
      int int0 = (-2175);
      try { 
        complex1.I.nthRoot((-2175));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,175
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2669.871766869, 2669.871766869);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.INF.subtract(complex1);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.sqrt1z();
      double double1 = complex3.getImaginary();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex1.subtract((-2669.871673231546));
      Complex complex5 = complex0.exp();
      double double2 = complex1.abs();
      double double3 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-533.159869), (-533.159869));
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.ONE.subtract((-533.159869));
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex2.ZERO.reciprocal();
      Complex complex5 = complex1.ONE.sqrt();
      Complex complex6 = complex0.pow((-533.159869));
      Complex complex7 = complex6.INF.multiply(complex0);
      double double0 = complex6.I.getArgument();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex6.INF.createComplex((-8.16), (-8.16));
      Complex complex10 = complex9.NaN.reciprocal();
      Complex complex11 = complex0.I.multiply(complex9);
      Complex complex12 = complex9.INF.multiply((-20.0));
      Complex complex13 = complex0.pow(140.9);
      Complex complex14 = Complex.valueOf((-467.053695638693), 3456.987067573296);
      int int0 = complex10.hashCode();
      double double1 = complex14.getImaginary();
      Complex complex15 = complex13.subtract((-8.16));
      boolean boolean0 = complex6.isNaN();
      Complex complex16 = complex15.multiply(7);
      Complex complex17 = complex15.I.pow(complex13);
      Complex complex18 = complex9.multiply(140.9);
      Complex complex19 = complex15.exp();
      Complex complex20 = complex14.subtract(complex7);
      Complex complex21 = complex15.add(complex6);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-1673.5589845055), (-1673.5589845055));
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex2.NaN.subtract((-1673.5589845055));
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.ONE.pow(complex1);
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex4.pow((-1673.5589845055));
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex4.sin();
      boolean boolean0 = complex1.isInfinite();
      Complex complex10 = complex7.subtract((-1673.5589845055));
      Complex complex11 = Complex.valueOf((-1673.5589845055));
      Complex complex12 = complex7.createComplex((-1673.5589845055), 1.0);
      Complex complex13 = complex5.multiply(1.0);
      double double0 = complex11.getArgument();
      Complex complex14 = complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(2021.986720329428, 2021.986720329428);
      Object object0 = complex0.ONE.readResolve();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex0.INF.subtract(complex1);
      int int0 = complex0.hashCode();
      Complex complex3 = complex1.add(2021.986720329428);
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(2.596038639954304E-167, 2.596038639954304E-167);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.INF.tanh();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex2.createComplex(2.596038639954304E-167, 2.596038639954304E-167);
      List<Complex> list0 = complex2.nthRoot(2723);
      Complex complex6 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 0.0;
      Complex complex1 = Complex.valueOf((-248.8), 0.0);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.ZERO.exp();
      try { 
        complex0.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-4041.238919416616), (-4041.238919416616));
      Complex complex1 = complex0.INF.createComplex((-4041.238919416616), 0.0);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex3.log();
      double double0 = complex3.getImaginary();
      Complex complex5 = complex3.I.multiply((-4187.99808));
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1.1622881889343262);
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex1.ONE.add(complex0);
      Complex complex4 = complex1.exp();
      Complex complex5 = complex3.ZERO.reciprocal();
      int int0 = complex1.hashCode();
      Complex complex6 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1.1701113164306871E-7));
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.INF.multiply(complex3);
      Complex complex5 = complex0.add(complex1);
      double double0 = complex5.ZERO.abs();
      Complex complex6 = complex3.pow((-1.1701113164306871E-7));
      boolean boolean0 = complex4.isInfinite();
      int int0 = complex4.hashCode();
      Complex complex7 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, (-20.0));
      Complex complex2 = complex0.divide(complex1);
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex1.createComplex((-6.830955860192377E-8), (-6.830955860192377E-8));
      Complex complex6 = complex4.INF.pow(complex5);
      Complex complex7 = complex5.asin();
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex7.acos();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(4136);
      ComplexField complexField0 = complex1.ONE.getField();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex0.I.divide((-4.1291070428848755E-76));
      Complex complex7 = complex3.add(complex0);
      Complex complex8 = complex3.add(0.0);
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 929.0);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.ONE.cosh();
      double double0 = complex0.ZERO.abs();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.NaN.multiply(2313);
      Complex complex5 = complex0.multiply(complex3);
      List<Complex> list0 = complex3.nthRoot(2313);
      Complex complex6 = complex3.log();
      Complex complex7 = complex6.INF.multiply(complex0);
      Complex complex8 = complex1.NaN.subtract(39.2);
      String string0 = complex6.toString();
      Complex complex9 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.NaN.createComplex(0.0, 1.9722862688653467E192);
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.cos();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      double double0 = complex7.getImaginary();
      Complex complex8 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.atan();
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.add(3361.943896268642);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(3622.4937314, 3622.4937314);
      Complex complex1 = complex0.ONE.multiply((-2107));
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex1.tanh();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.INF.divide((-774.547122));
      Complex complex4 = complex2.multiply(1428.85);
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex6.I.subtract(complex0);
      Complex complex8 = complex2.ONE.pow(complex5);
      Complex complex9 = complex0.multiply((-3214.0718104732314));
      double double0 = complex6.getReal();
      Complex complex10 = new Complex(3931.327);
      Object object1 = complex10.ONE.readResolve();
      Complex complex11 = complex2.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.NaN.log();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex2.log();
      Complex complex6 = complex0.NaN.acos();
      Complex complex7 = complex6.ZERO.createComplex(1.11298006674538E-7, 0.0);
      Complex complex8 = complex0.ONE.conjugate();
      Complex complex9 = complex2.subtract(0.46914875507354736);
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.multiply((-496));
      Complex complex2 = complex1.ONE.multiply((double) (-496));
      Complex complex3 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.subtract(5.5906456251308664E-8);
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ONE.subtract(5.5906456251308664E-8);
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.INF.divide(2183.13);
      Complex complex7 = complex5.I.divide(0.0);
      Complex complex8 = complex0.ONE.acos();
      Complex complex9 = complex1.tan();
      Complex complex10 = complex9.negate();
      Complex complex11 = complex0.I.add(complex8);
      Complex complex12 = complex10.multiply(20.0);
      Complex complex13 = complex8.multiply(complex12);
      Complex complex14 = complex1.reciprocal();
      Complex complex15 = Complex.valueOf(0.0);
      Complex complex16 = complex11.multiply(0.42353010177612305);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2192575931549072);
      Complex complex1 = complex0.createComplex(1.2192575931549072, 1.2192575931549072);
      Complex complex2 = complex0.INF.divide(1.2192575931549072);
      Complex complex3 = complex1.divide(1.2192575931549072);
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex3.pow((-1299.95739399));
      Complex complex8 = complex1.negate();
      Complex complex9 = complex8.atan();
      Complex complex10 = complex7.acos();
      Complex complex11 = complex2.sqrt1z();
      Complex complex12 = complex1.INF.divide(complex11);
      Complex complex13 = complex11.ONE.acos();
      double double0 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      String string0 = complex1.I.toString();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex0.divide(577.265646421);
      Complex complex5 = complex4.atan();
      double double0 = complex2.NaN.abs();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex2.I.multiply((-1.3961804471714283E-8));
      ComplexField complexField0 = complex2.getField();
      Complex complex8 = complex3.pow(0.0);
      Complex complex9 = complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1999.1510769, 1999.1510769);
      Complex complex1 = complex0.I.pow((-1.0));
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex2.ONE.divide(complex1);
      double double0 = complex3.I.abs();
      Complex complex4 = complex3.I.createComplex((-560.114), (-560.114));
      double double1 = complex0.abs();
      double double2 = complex2.getImaginary();
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.subtract((-1.0));
      List<Complex> list0 = complex0.I.nthRoot(2725);
      Complex complex2 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2607.551101233361);
      Complex complex1 = Complex.ONE;
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2869.018046), (-2869.018046));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.atan();
      List<Complex> list0 = complex0.nthRoot(3062);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.NaN.asin();
      int int0 = (-1);
      Complex complex4 = complex3.ONE.multiply((-1));
      boolean boolean0 = complex0.isNaN();
      int int1 = 0;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-238.55381463));
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.I.pow(complex1);
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.ZERO.negate();
      boolean boolean0 = complex2.isNaN();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex2.divide(complex3);
      Complex complex8 = complex2.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.add(complex0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.subtract(2084.0664831);
      Complex complex2 = complex0.createComplex((-2869.4385763387), (-2869.4385763387));
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex2.ZERO.pow((-2869.4385763387));
      boolean boolean0 = complex2.isNaN();
      Complex complex7 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf((-1353.0377));
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.divide((-1353.0377));
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex2.multiply(0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-918.9));
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1099.397341569, 1099.397341569);
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.multiply(1379);
      Complex complex6 = complex5.multiply(1379);
      Complex complex7 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex0.sin();
      boolean boolean0 = complex3.equals(")");
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.equals((Object) null);
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.divide((-670.089931));
      Complex complex4 = complex1.NaN.pow(832.788166912546);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex0.ZERO.pow(775.0);
      Complex complex7 = complex3.tan();
      boolean boolean1 = complex0.isNaN();
      double double0 = complex1.getImaginary();
      boolean boolean2 = complex1.equals(complex0);
      double double1 = complex3.getReal();
      Complex complex8 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex1.divide(0.0);
      Complex complex4 = complex3.NaN.add(complex1);
      Complex complex5 = complex0.I.sqrt();
      Complex complex6 = complex0.NaN.sin();
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = complex5.INF.tanh();
      Complex complex9 = complex0.createComplex(0.0, 0.0);
      double double0 = complex9.I.abs();
      Complex complex10 = complex5.createComplex(0.0, 0.0);
      String string0 = complex0.I.toString();
      Complex complex11 = complex4.ZERO.sin();
      Complex complex12 = complex9.ONE.tan();
      Complex complex13 = complex10.ONE.cos();
      double double1 = complex0.getImaginary();
      String string1 = complex1.NaN.toString();
      Complex complex14 = complex10.add(complex0);
      Complex complex15 = complex4.add(complex5);
      String string2 = complex0.toString();
      Complex complex16 = complex5.NaN.tan();
      Complex complex17 = complex16.NaN.pow(complex0);
      Complex complex18 = complex4.subtract(complex0);
      boolean boolean0 = complex4.isNaN();
      Complex complex19 = complex5.sqrt1z();
      String string3 = complex5.toString();
      ComplexField complexField0 = complex4.getField();
      int int0 = complex9.hashCode();
      Complex complex20 = complex18.add(complex3);
      Complex complex21 = Complex.valueOf((-2300.21021417423));
      Complex complex22 = complex17.acos();
      Complex complex23 = complex15.subtract(complex19);
      Complex complex24 = complex18.acos();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex0.divide((double) 938);
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex2.NaN.add((double) 938);
      Complex complex6 = complex5.ONE.atan();
      Complex complex7 = complex0.I.tanh();
      String string0 = complex2.I.toString();
      Complex complex8 = complex2.NaN.sqrt1z();
      String string1 = complex8.INF.toString();
      Complex complex9 = complex3.INF.subtract(complex0);
      List<Complex> list0 = complex0.nthRoot(938);
      Object object0 = complex2.readResolve();
      Complex complex10 = Complex.valueOf((double) 938, (-1842.005));
      Complex complex11 = Complex.valueOf(899.0, (-1842.005));
      Complex complex12 = complex0.createComplex(2266.395, 938);
      ComplexField complexField0 = complex3.getField();
      Complex complex13 = complex4.atan();
      Complex complex14 = complex5.createComplex(1.0, (-1842.005));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.multiply(0.0);
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.tan();
      Complex complex6 = Complex.valueOf((-3863.741));
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = complex7.tan();
      List<Complex> list0 = complex1.ZERO.nthRoot(1);
      double double0 = complex1.getArgument();
      Complex complex9 = complex1.sinh();
      double double1 = complex9.ZERO.abs();
      Complex complex10 = complex0.negate();
      Complex complex11 = complex10.ONE.log();
      Complex complex12 = complex1.sqrt1z();
      Complex complex13 = Complex.ZERO;
      Complex complex14 = complex12.INF.subtract(3.347954541376715E-8);
      Complex complex15 = complex13.NaN.createComplex(0.0, 1.5707963267948966);
      boolean boolean0 = complex4.equals(complex13);
      Complex complex16 = complex12.multiply(complex5);
      Complex complex17 = Complex.valueOf(1302.5861443029862);
      Complex complex18 = complex17.NaN.sinh();
      Complex complex19 = complex15.conjugate();
      Complex complex20 = complex12.conjugate();
      Complex complex21 = complex14.add(0.0);
      double double2 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex1.ZERO.sqrt();
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex1.divide(complex2);
      Complex complex7 = complex2.INF.asin();
      Complex complex8 = complex6.I.multiply(complex5);
      Complex complex9 = complex4.acos();
      boolean boolean0 = complex2.isInfinite();
      Complex complex10 = complex8.multiply((-4.220866994206517E-8));
      Complex complex11 = complex1.multiply(2325.73010101949);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ZERO.tanh();
      double double0 = complex3.ONE.getArgument();
      Complex complex4 = complex2.add(1.637852737426943E-248);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex3.ONE.createComplex(0.0, (-858.2));
      double double1 = complex7.I.abs();
      Complex complex9 = complex4.subtract(1.637852737426943E-248);
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex10.ZERO.divide(3521.33);
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex6.subtract(complex12);
      Complex complex14 = Complex.valueOf(1.0, (-433.2287231617));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.multiply(4058);
      double double0 = complex1.getImaginary();
      Complex complex2 = Complex.valueOf((-118.24676038076), (-118.24676038076));
      Complex complex3 = complex1.I.exp();
      Complex complex4 = complex2.I.multiply(complex1);
      Complex complex5 = complex2.ONE.negate();
      Complex complex6 = complex2.divide(0.0);
      Complex complex7 = complex0.acos();
      Complex complex8 = complex0.ZERO.multiply(complex1);
      ComplexField complexField0 = complex2.getField();
      List<Complex> list0 = complex0.nthRoot(4058);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.ONE.createComplex(6042.8594, (-4.30610076666344E-131));
      Complex complex3 = complex1.INF.createComplex((-1.689060694498032E-8), (-1.689060694498032E-8));
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.3723714351654053);
      Complex complex1 = complex0.I.add(0.0);
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.pow(complex3);
      int int0 = complex4.NaN.hashCode();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex3.log();
      Complex complex7 = complex4.ONE.subtract(0.0);
      Complex complex8 = complex6.subtract(complex4);
      Complex complex9 = complex8.I.sqrt1z();
      String string0 = complex6.ZERO.toString();
      Complex complex10 = complex0.INF.subtract(complex4);
      Complex complex11 = complex0.multiply(0);
      Complex complex12 = complex0.sinh();
      Complex complex13 = complex3.tanh();
      Complex complex14 = complex13.I.sqrt1z();
      Complex complex15 = complex4.cosh();
      Complex complex16 = complex15.acos();
      Complex complex17 = complex3.tan();
      Complex complex18 = complex0.subtract(complex15);
      Complex complex19 = complex17.divide(complex18);
      Complex complex20 = complex1.reciprocal();
  }
}
