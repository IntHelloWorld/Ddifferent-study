/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 01:49:33 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1266158.2475504833, 1266158.2475504833);
      Complex complex1 = complex0.multiply(8.711129287069315E-8);
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex2.INF.sqrt();
      boolean boolean0 = complex0.equals("");
      Complex complex5 = complex0.subtract(0.6186635494232178);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex5.acos();
      Complex complex8 = Complex.valueOf(0.6186635494232178, 0.6186635494232178);
      Complex complex9 = complex0.subtract(0.6186635494232178);
      Complex complex10 = complex7.NaN.log();
      Complex complex11 = complex7.add(complex0);
      Complex complex12 = complex11.multiply(8.711129287069315E-8);
      Complex complex13 = complex11.pow(1266158.2475504833);
      Complex complex14 = complex11.subtract((-999.0));
      Complex complex15 = complex6.acos();
      Complex complex16 = Complex.INF;
      Complex complex17 = complex7.I.divide(complex16);
      Complex complex18 = complex14.exp();
      Complex complex19 = complex6.sinh();
      Complex complex20 = complex13.multiply(8.711129287069315E-8);
      Complex complex21 = complex0.cosh();
      Object object0 = complex21.INF.readResolve();
      Object object1 = complex9.readResolve();
      Complex complex22 = Complex.valueOf((-999.0));
      Complex complex23 = complex10.reciprocal();
      Complex complex24 = Complex.valueOf(2.0);
      Complex complex25 = complex16.negate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-9.6450947911));
      List<Complex> list0 = complex0.ONE.nthRoot(174);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex0.ZERO.cosh();
      Complex complex6 = complex1.subtract(complex4);
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex8.ONE.divide((double) 174);
      Complex complex11 = complex0.createComplex(1.0, 174);
      Complex complex12 = Complex.valueOf(1764.324582711942, Double.POSITIVE_INFINITY);
      Complex complex13 = complex11.ONE.sin();
      int int0 = complex11.hashCode();
      Complex complex14 = complex11.cos();
      boolean boolean0 = complex4.equals(complex5);
      int int1 = complex9.hashCode();
      Complex complex15 = complex0.atan();
      int int2 = complex9.ONE.hashCode();
      Complex complex16 = complex6.subtract(0.0);
      Object object0 = complex8.readResolve();
      ComplexField complexField0 = complex9.getField();
      Complex complex17 = complex3.multiply(1901);
      ComplexField complexField1 = complex15.getField();
      Complex complex18 = complex11.log();
      Complex complex19 = complex5.cosh();
      Complex complex20 = complex1.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1610.933099);
      Complex complex1 = complex0.multiply((-2607.3962502069926));
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex3.I.sin();
      List<Complex> list0 = complex3.ZERO.nthRoot(178);
      Complex complex6 = complex2.subtract(complex0);
      Complex complex7 = complex3.ONE.sqrt();
      Complex complex8 = complex0.ONE.tanh();
      boolean boolean0 = complex3.isInfinite();
      Complex complex9 = complex2.cos();
      Complex complex10 = complex8.asin();
      List<Complex> list1 = complex6.ONE.nthRoot(1);
      List<Complex> list2 = complex6.nthRoot(650);
      Complex complex11 = complex8.NaN.subtract(complex5);
      Complex complex12 = Complex.valueOf((-2607.3962502069926));
      String string0 = complex9.INF.toString();
      Complex complex13 = complex0.pow(complex12);
      Complex complex14 = complex8.sinh();
      Complex complex15 = complex9.sqrt();
      Complex complex16 = Complex.valueOf(0.0);
      double double0 = complex0.getReal();
      Complex complex17 = complex9.multiply(1.651944637298584);
      Complex complex18 = complex17.I.cosh();
      Complex complex19 = complex6.pow(complex4);
      Complex complex20 = complex1.divide(1090.53847763);
      Complex complex21 = complex4.sin();
      int int0 = complex13.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-2623.7));
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.pow((-2623.7));
      Complex complex2 = new Complex((-2623.7));
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.ZERO.sinh();
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex5.exp();
      Complex complex7 = complex1.INF.cosh();
      Complex complex8 = complex4.INF.acos();
      Object object1 = complex2.I.readResolve();
      double double0 = complex2.getImaginary();
      Complex complex9 = complex2.cos();
      Complex complex10 = complex3.cos();
      Complex complex11 = complex1.sin();
      int int0 = complex1.hashCode();
      double double1 = complex10.getArgument();
      Complex complex12 = complex5.cosh();
      Complex complex13 = complex1.negate();
      Complex complex14 = complex13.pow(complex4);
      Complex complex15 = complex11.divide(complex9);
      double double2 = complex12.getArgument();
      Complex complex16 = complex9.asin();
      Complex complex17 = complex6.subtract(0.0);
      Complex complex18 = complex17.reciprocal();
      Complex complex19 = complex6.sqrt1z();
      List<Complex> list0 = complex18.nthRoot(2468);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex4.reciprocal();
      String string0 = complex6.toString();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex5.sqrt1z();
      try { 
        complex6.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.ONE.log();
      Complex complex5 = complex0.INF.asin();
      Complex complex6 = complex5.NaN.cos();
      double double0 = complex1.ZERO.abs();
      Complex complex7 = Complex.valueOf(2.1377905661197194E-104, 0.0);
      double double1 = complex0.getReal();
      Complex complex8 = complex3.I.multiply(2.1377905661197194E-104);
      String string0 = complex8.toString();
      Complex complex9 = complex2.negate();
      int int0 = complex0.hashCode();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex3.subtract(complex2);
      Complex complex12 = complex0.tanh();
      double double2 = complex3.getImaginary();
      Complex complex13 = complex7.add((-0.8813735870195429));
      double double3 = complex5.getImaginary();
      Complex complex14 = complex3.tanh();
      Complex complex15 = complex14.negate();
      Complex complex16 = Complex.valueOf(1.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-3828.296133551887));
      Complex complex1 = complex0.NaN.add((-3828.296133551887));
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex2.INF.add((-3828.296133551887));
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex0.multiply((-3828.296133551887));
      int int1 = complex5.ZERO.hashCode();
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = complex6.I.multiply(0);
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex0.divide(complex8);
      Complex complex10 = complex3.asin();
      Complex complex11 = complex2.sqrt1z();
      boolean boolean0 = complex2.equals(complex10);
      Complex complex12 = complex3.exp();
      Complex complex13 = complex8.exp();
      Complex complex14 = complex11.add(complex8);
      double double0 = complex14.getImaginary();
      Complex complex15 = Complex.NaN;
      Complex complex16 = complex1.add(complex15);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, Double.NaN);
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex1.I.pow(0.0);
      Complex complex4 = complex3.conjugate();
      boolean boolean0 = complex0.equals(complex1);
      boolean boolean1 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex0.NaN.negate();
      Complex complex4 = complex2.I.cos();
      double double0 = complex0.ONE.getArgument();
      double double1 = complex0.getImaginary();
      Complex complex5 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.NaN.sinh();
      int int0 = complex6.ONE.hashCode();
      Complex complex7 = Complex.valueOf(409.092);
      Complex complex8 = complex1.ZERO.atan();
      Complex complex9 = complex8.NaN.sin();
      Complex complex10 = complex5.ONE.sqrt();
      Complex complex11 = complex5.sin();
      Complex complex12 = complex11.ZERO.reciprocal();
      Object object0 = complex1.readResolve();
      Complex complex13 = complex10.ZERO.subtract(complex6);
      Complex complex14 = Complex.ZERO;
      Complex complex15 = complex4.ZERO.add(complex14);
      Complex complex16 = complex2.add(complex5);
      Complex complex17 = complex5.ZERO.cos();
      Complex complex18 = complex17.I.pow(complex0);
      Complex complex19 = complex18.NaN.subtract(6.283185307179586);
      Object object1 = complex18.INF.readResolve();
      Complex complex20 = complex16.ONE.sin();
      Complex complex21 = complex2.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex22 = complex21.ZERO.createComplex(Double.POSITIVE_INFINITY, 0.0);
      double double2 = complex10.getArgument();
      Complex complex23 = complex21.sqrt1z();
      Complex complex24 = Complex.valueOf(0.0, 0.0);
      Complex complex25 = complex4.asin();
      Complex complex26 = complex24.negate();
      double double3 = complex24.abs();
      double double4 = complex4.abs();
      double double5 = complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.INF.multiply(complex1);
      double double0 = complex3.I.getArgument();
      Object object0 = new Object();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.INF.add(0.0);
      int int0 = complex5.ZERO.hashCode();
      Complex complex6 = complex0.NaN.pow((-1519.9));
      int int1 = complex6.INF.hashCode();
      Complex complex7 = complex6.I.tan();
      Complex complex8 = complex7.ONE.acos();
      boolean boolean0 = complex0.equals(object0);
      boolean boolean1 = complex0.isInfinite();
      Complex complex9 = complex5.sin();
      Complex complex10 = complex0.asin();
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex2.cosh();
      Complex complex13 = complex3.multiply(351);
      Complex complex14 = complex0.pow(0.0);
      Complex complex15 = complex14.ONE.negate();
      Complex complex16 = complex15.ZERO.acos();
      boolean boolean2 = complex1.isInfinite();
      Complex complex17 = complex1.multiply(0.0);
      double double1 = complex17.getReal();
      Complex complex18 = complex3.divide(complex0);
      Complex complex19 = complex5.createComplex((-1389.0), (-1519.9));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.I.tan();
      List<Complex> list0 = complex0.NaN.nthRoot(1081);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.I.add(complex2);
      Complex complex4 = complex3.I.multiply(0.0);
      Complex complex5 = complex3.NaN.pow(complex0);
      Complex complex6 = complex5.INF.pow(complex1);
      Complex complex7 = Complex.valueOf((-3.4552363953199905E138), (-3.4552363953199905E138));
      Complex complex8 = complex7.INF.createComplex(1081, 0.0);
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex0.cos();
      double double1 = complex9.I.abs();
      Complex complex11 = complex10.ONE.sinh();
      Complex complex12 = complex11.I.divide(complex5);
      Complex complex13 = complex7.pow(0.0);
      Complex complex14 = complex8.ZERO.sqrt1z();
      Complex complex15 = Complex.valueOf((-1490.4036300877453));
      double double2 = complex7.INF.getArgument();
      Complex complex16 = complex9.sqrt1z();
      Complex complex17 = complex16.NaN.add(complex3);
      Complex complex18 = complex7.ZERO.add(complex15);
      String string0 = complex16.ONE.toString();
      Complex complex19 = complex10.pow(complex8);
      Complex complex20 = Complex.INF;
      boolean boolean0 = complex9.equals(complex20);
      Complex complex21 = complex0.log();
      Complex complex22 = complex7.sin();
      double double3 = complex9.getImaginary();
      int int0 = complex15.hashCode();
      String string1 = complex13.toString();
      Complex complex23 = Complex.valueOf(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex0.ONE.getField();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.I.divide(complex1);
      Object object0 = complex1.readResolve();
      Complex complex4 = complex1.INF.sinh();
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex0.log();
      ComplexField complexField1 = complex5.I.getField();
      Complex complex6 = complex1.cos();
      ComplexField complexField2 = complex4.getField();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex1.ONE.multiply(0.0);
      Complex complex9 = complex8.cos();
      Complex complex10 = complex3.sqrt1z();
      boolean boolean1 = complex1.isInfinite();
      Complex complex11 = complex0.tanh();
      Complex complex12 = complex3.sinh();
      Complex complex13 = complex1.log();
      Complex complex14 = complex3.pow(complex5);
      boolean boolean2 = complex12.isInfinite();
      Complex complex15 = complex12.ZERO.multiply(0.0);
      Complex complex16 = complex15.INF.log();
      Complex complex17 = complex0.cos();
      int int1 = complex12.hashCode();
      Complex complex18 = complex4.tanh();
      Complex complex19 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-1286.84713), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.NaN.subtract(complex0);
      boolean boolean0 = complex1.isInfinite();
      double double0 = complex1.getArgument();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex1.ZERO.add(0.0);
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.I.reciprocal();
      Complex complex8 = complex4.NaN.conjugate();
      Complex complex9 = complex8.ZERO.asin();
      Complex complex10 = complex4.ZERO.exp();
      Complex complex11 = complex10.I.reciprocal();
      Complex complex12 = complex4.exp();
      String string0 = complex10.ONE.toString();
      Complex complex13 = complex0.ONE.cos();
      Complex complex14 = complex1.INF.sin();
      Complex complex15 = complex12.tan();
      int int0 = complex1.hashCode();
      double double1 = complex15.I.getArgument();
      boolean boolean1 = complex0.isNaN();
      Complex complex16 = complex1.INF.tanh();
      Complex complex17 = complex4.exp();
      Complex complex18 = complex17.INF.sinh();
      boolean boolean2 = complex1.isNaN();
      Complex complex19 = complex0.add(0.5495203733444214);
      Complex complex20 = complex10.sinh();
      Complex complex21 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(3002.8529);
      Complex complex1 = complex0.I.sin();
      double double0 = complex1.I.abs();
      Complex complex2 = complex0.NaN.reciprocal();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1935.12684762);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.exp();
      List<Complex> list0 = complex2.I.nthRoot(1348);
      double double0 = complex2.getReal();
      Complex complex3 = complex1.sin();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-4921.984389125));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.subtract((-4921.984389125));
      Complex complex3 = complex1.cosh();
      Complex complex4 = Complex.valueOf((-4921.984389125), 0.0);
      Complex complex5 = complex4.ZERO.sinh();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex6.ONE.exp();
      List<Complex> list0 = complex6.nthRoot(339);
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex5.isInfinite();
      double double0 = complex4.getImaginary();
      int int0 = complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 5.82391923137467E-8;
      Complex complex1 = new Complex(5.82391923137467E-8, (-20.0));
      Complex complex2 = complex1.log();
      try { 
        complex1.ONE.nthRoot((-430));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -430
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1332.1670932));
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.cos();
      double double0 = complex1.abs();
      Complex complex3 = complex0.multiply((-1332.1670932));
      boolean boolean0 = complex1.isInfinite();
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = complex4.multiply(3775.910713308921);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(420.602224872, 820.5271615179837);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.ONE.negate();
      List<Complex> list0 = complex1.ZERO.nthRoot(2106);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ZERO.pow(6.283185307179586);
      double double0 = complex0.abs();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.subtract(6.283185307179586);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = complex0.multiply(complex4);
      Complex complex8 = complex7.I.acos();
      Complex complex9 = complex3.add(complex0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.ZERO.nthRoot(37);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex3.I.multiply(Double.POSITIVE_INFINITY);
      double double0 = 6.283185307179586;
      Complex complex5 = Complex.valueOf(6.283185307179586);
      Complex complex6 = complex1.ONE.exp();
      ComplexField complexField0 = complex1.getField();
      int int0 = (-2552);
      try { 
        complex0.nthRoot((-2552));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,552
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 1655.3454770262);
      Complex complex1 = complex0.ZERO.createComplex(0.0, 893.117);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.ONE.log();
      Complex complex4 = complex2.ZERO.sin();
      Complex complex5 = complex4.NaN.multiply(complex0);
      Object object0 = complex2.ZERO.readResolve();
      Complex complex6 = complex0.add(complex2);
      String string0 = complex4.toString();
      ComplexField complexField0 = complex6.getField();
      Complex complex7 = complex0.negate();
      Complex complex8 = Complex.valueOf((-8.194157257980706E-9), (-8.194157257980706E-9));
      Complex complex9 = complex4.multiply((-563));
      Complex complex10 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.INF.sqrt();
      List<Complex> list0 = complex1.I.nthRoot(4461);
      Complex complex3 = complex0.I.tan();
      double double0 = 5.6257755605305175E-204;
      Complex complex4 = complex1.ZERO.pow(5.6257755605305175E-204);
      Complex complex5 = complex0.ONE.cos();
      Complex complex6 = complex5.INF.multiply(4461);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.sinh();
      Complex complex9 = Complex.valueOf(0.0);
      Object object0 = complex7.ONE.readResolve();
      Complex complex10 = complex1.add(complex2);
      Object object1 = complex10.INF.readResolve();
      Complex complex11 = complex0.sin();
      // Undeclared exception!
      complex0.I.nthRoot(723);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.divide((-466.052));
      double double0 = complex3.ZERO.getArgument();
      Complex complex4 = Complex.valueOf(888.0892253);
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex1.ONE.createComplex((-466.052), (-466.052));
      Complex complex7 = complex6.ZERO.atan();
      Complex complex8 = complex6.NaN.exp();
      boolean boolean0 = complex0.isInfinite();
      Complex complex9 = complex0.cosh();
      double double1 = complex9.ZERO.abs();
      boolean boolean1 = complex3.isNaN();
      Complex complex10 = complex8.atan();
      Complex complex11 = complex10.I.divide((-466.052));
      Complex complex12 = Complex.NaN;
      boolean boolean2 = complex2.equals(complex12);
      Complex complex13 = Complex.valueOf(0.0);
      Complex complex14 = complex7.subtract(complex0);
      Complex complex15 = complex14.INF.asin();
      Complex complex16 = complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex1.INF.asin();
      Complex complex4 = complex1.I.sinh();
      Complex complex5 = complex0.NaN.subtract(0.0);
      Complex complex6 = complex1.subtract((-36.139));
      Complex complex7 = complex0.I.acos();
      Complex complex8 = complex7.divide(0.0);
      Complex complex9 = complex0.tan();
      Complex complex10 = complex9.INF.log();
      Complex complex11 = complex1.cosh();
      boolean boolean0 = complex5.equals("*0+");
      Complex complex12 = complex8.multiply(0.0);
      Complex complex13 = complex4.divide(1243.41);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.multiply(complex2);
      String string0 = complex0.toString();
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex4.ONE.tan();
      Complex complex8 = complex3.subtract(2.0051635097366476E34);
      Complex complex9 = complex8.INF.add(complex0);
      Complex complex10 = complex3.subtract(2.0051635097366476E34);
      Complex complex11 = Complex.valueOf(2.0051635097366476E34);
      Complex complex12 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex1.createComplex(270.6, 270.6);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = complex4.ZERO.sinh();
      Complex complex7 = complex5.ZERO.cosh();
      Complex complex8 = complex7.NaN.tanh();
      Complex complex9 = complex7.sin();
      Complex complex10 = complex5.ONE.atan();
      double double0 = complex1.abs();
      Complex complex11 = complex3.NaN.cos();
      boolean boolean1 = complex1.isNaN();
      String string0 = complex3.toString();
      boolean boolean2 = complex11.isInfinite();
      Complex complex12 = complex2.acos();
      Complex complex13 = Complex.valueOf((-2.6489990728664908E-8), 270.6);
      double double1 = complex0.abs();
      Complex complex14 = complex2.NaN.acos();
      Complex complex15 = complex2.sin();
      Complex complex16 = complex15.sinh();
      String string1 = complex12.toString();
      Complex complex17 = complex15.cosh();
      Complex complex18 = complex4.conjugate();
      Object object0 = complex4.readResolve();
      boolean boolean3 = complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(2.1836166619192508E256, 0.0);
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.ZERO.subtract(2.1836166619192508E256);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex2.ONE.acos();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex0.NaN.negate();
      Complex complex7 = complex6.pow(complex2);
      Complex complex8 = complex7.INF.createComplex(0.0, 2.1836166619192508E256);
      Complex complex9 = complex0.ZERO.atan();
      double double0 = complex0.getReal();
      Complex complex10 = complex2.tanh();
      Complex complex11 = complex7.exp();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(1349.7867703247, 8.711129287069315E-8);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.createComplex(8.711129287069315E-8, (-1269.58));
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.INF.divide(complex2);
      Complex complex5 = new Complex(0.0, 1349.7867703247);
      Complex complex6 = complex0.NaN.createComplex((-1269.58), 0.0);
      Complex complex7 = complex3.pow(complex5);
      Complex complex8 = complex3.subtract(complex5);
      Complex complex9 = complex2.add(complex4);
      Complex complex10 = complex9.NaN.add(complex6);
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(105.5229237778, 0.0);
      Complex complex1 = complex0.INF.reciprocal();
      double double0 = complex1.INF.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex2.createComplex(Double.NaN, 105.5229237778);
      Complex complex7 = complex6.createComplex(734.283, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1646.807608985943), (-1646.807608985943));
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.NaN.acos();
      Complex complex4 = complex3.I.sqrt();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-5.5957016861703E-8));
      Complex complex1 = complex0.add((-1156.21847359292));
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex1.NaN.multiply((-1167.0));
      Complex complex4 = complex1.ZERO.pow((-1167.0));
      Complex complex5 = complex4.ZERO.pow((-1167.0));
      Complex complex6 = complex4.log();
      Complex complex7 = complex3.tanh();
      String string0 = complex1.toString();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex8.multiply(914);
      double double0 = complex2.getReal();
      Complex complex10 = complex8.sin();
      Object object0 = complex5.readResolve();
      Complex complex11 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.log();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex3.ONE.add(0.0);
      Complex complex6 = complex2.asin();
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex4.INF.asin();
      Complex complex6 = complex3.I.negate();
      Complex complex7 = complex2.ONE.cos();
      Complex complex8 = complex2.I.sqrt1z();
      Complex complex9 = complex0.multiply(667);
      Complex complex10 = complex9.INF.multiply(Double.NaN);
      Complex complex11 = complex2.add(272.387464);
      Complex complex12 = complex0.negate();
      double double1 = complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3294.2177, (-4030.373884173615));
      Complex complex1 = complex0.NaN.sin();
      String string0 = complex0.toString();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex3.multiply(974.51);
      double double0 = complex5.NaN.abs();
      Complex complex6 = complex0.createComplex(3.206311849028311E12, 1494.4242116895);
      Complex complex7 = complex2.log();
      Complex complex8 = complex7.ZERO.atan();
      Complex complex9 = complex8.ONE.sqrt();
      double double1 = complex0.abs();
      Complex complex10 = complex1.subtract(complex6);
      String string1 = complex10.toString();
      String string2 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.INF.add(1.71390848833098E-15);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ZERO.subtract((-2.4090696463777446E241));
      int int0 = complex4.INF.hashCode();
      Complex complex5 = Complex.valueOf((-2.4090696463777446E241));
      Complex complex6 = complex3.subtract(0.0);
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex2.I.sinh();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex2.add(1.71390848833098E-15);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex0.ZERO.cos();
      Complex complex4 = complex1.ZERO.add(complex0);
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex0.asin();
      String string0 = complex6.ZERO.toString();
      Complex complex7 = complex6.divide((-4658.302052256));
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex6.sin();
      Complex complex10 = complex9.INF.tan();
      double double0 = complex1.getArgument();
      boolean boolean1 = complex9.isInfinite();
      Complex complex11 = complex2.I.subtract(complex7);
      double double1 = complex7.getArgument();
      Complex complex12 = complex2.subtract((-1170.794208008424));
      boolean boolean2 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(2694.711493693076, (-722.67905911482));
      double double0 = complex2.I.abs();
      Complex complex3 = complex2.ZERO.createComplex(246.29909, 2694.711493693076);
      Complex complex4 = complex3.I.divide(complex1);
      Complex complex5 = Complex.valueOf((-852.05666150275), 2694.711493693076);
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex7.INF.pow(20.0);
      Complex complex9 = complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 817.447403);
      Complex complex2 = complex0.I.add(complex1);
      int int0 = complex0.ZERO.hashCode();
      Complex complex3 = complex0.I.pow(212.11371);
      double double0 = complex0.getReal();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex3.createComplex(817.447403, 817.447403);
      Object object0 = new Object();
      boolean boolean0 = complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.NaN.subtract(complex1);
      ComplexField complexField0 = complex2.getField();
      Complex complex4 = complex1.ZERO.pow(complex2);
      Complex complex5 = complex0.multiply(complex1);
      double double0 = complex0.NaN.abs();
      Complex complex6 = complex1.divide(1200.14144221);
      Complex complex7 = complex0.cosh();
      double double1 = complex0.abs();
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(367.9501097782, 367.9501097782);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.INF.sqrt();
      Complex complex4 = complex3.multiply(complex0);
      int int0 = complex4.hashCode();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = complex5.log();
      Complex complex9 = complex5.cosh();
      Complex complex10 = complex0.sinh();
      boolean boolean0 = complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.multiply(370);
      int int0 = complex0.ONE.hashCode();
      Complex complex2 = complex1.I.createComplex(0.0, 6.283185307179586);
      Complex complex3 = complex2.ONE.divide(0.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.pow(7885.0516650706);
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.INF.multiply(370);
      int int1 = complex6.hashCode();
      Complex complex8 = complex3.pow(complex1);
      Complex complex9 = complex8.acos();
      Complex complex10 = complex1.subtract((-1372.1228378));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex0.ZERO.acos();
      Complex complex4 = complex0.divide(3371.391688);
      Complex complex5 = complex1.log();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex1.subtract((-1.1356287358852729E-8));
      Complex complex8 = complex0.multiply(complex3);
      Complex complex9 = complex1.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3388.178013));
      Complex complex2 = complex0.multiply((-1.6850976862319495E-9));
      Complex complex3 = complex1.I.exp();
      List<Complex> list0 = complex1.nthRoot(1250);
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = Complex.valueOf(0.0, 2.0);
      Complex complex6 = complex1.multiply((-993));
      ComplexField complexField0 = complex6.NaN.getField();
      String string0 = complex0.toString();
      double double0 = complex3.getArgument();
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = (-293.4);
      Complex complex0 = new Complex((-293.4));
      double double1 = 2621.925941;
      Complex complex1 = complex0.I.multiply(2621.925941);
      try { 
        complex0.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.ONE.nthRoot(1);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = new Complex(1.1886897087097168, 1.1886897087097168);
      Complex complex4 = complex0.multiply(complex3);
      boolean boolean0 = complex3.equals(complex4);
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex4.I.acos();
      Complex complex7 = complex3.INF.sinh();
      Complex complex8 = complex3.add(0.0);
      Complex complex9 = complex4.multiply(1.2978930473327637);
      Complex complex10 = complex4.add(complex3);
      double double0 = complex0.abs();
      Complex complex11 = complex1.acos();
      Complex complex12 = Complex.valueOf((-1.3946383592553814E-8), 1.1886897087097168);
      boolean boolean1 = complex4.equals("");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply(complex0);
      Object object0 = complex0.INF.readResolve();
      Complex complex3 = complex2.ONE.createComplex((-4605.43878), (-4605.43878));
      Complex complex4 = complex0.atan();
      String string0 = complex4.INF.toString();
      Complex complex5 = complex0.multiply((-1791.7421621306));
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex3.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.subtract(4.572185635487065E147);
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex1.ZERO.cos();
      double double0 = complex3.ZERO.abs();
      String string0 = complex1.NaN.toString();
      Complex complex4 = complex0.I.acos();
      Complex complex5 = complex0.ONE.acos();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.multiply(2664);
      Complex complex9 = complex3.multiply((-2451));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = new Complex(0.440646231174469);
      Complex complex2 = complex1.NaN.subtract((-1541.7));
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex0.multiply(complex4);
      Object object1 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-3.855478664503271E21));
      Complex complex1 = complex0.NaN.conjugate();
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.sinh();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.NaN.add(complex4);
      Object object0 = complex3.I.readResolve();
      Complex complex6 = complex0.negate();
      Complex complex7 = Complex.valueOf((-3.855478664503271E21));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.8609623908996582, 1.8609623908996582);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.pow(complex0);
      double double0 = complex3.I.getArgument();
      Complex complex5 = complex3.add((-3879.6374892346));
      String string0 = complex4.toString();
      String string1 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.47197247068667E-43, 7.47197247068667E-43);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.I.subtract(7.47197247068667E-43);
      String string0 = complex0.toString();
      Complex complex2 = Complex.valueOf(7.47197247068667E-43, 7.47197247068667E-43);
      Complex complex3 = complex2.ZERO.divide(7.47197247068667E-43);
      Complex complex4 = complex0.subtract(complex2);
      Object object0 = complex2.readResolve();
      Complex complex5 = complex4.NaN.cos();
      ComplexField complexField1 = complex4.getField();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex6 = complex0.divide((double) 1);
      Complex complex7 = complex2.createComplex(7.47197247068667E-43, 7.47197247068667E-43);
      Complex complex8 = complex4.log();
      Complex complex9 = complex6.sqrt1z();
      Complex complex10 = complex3.conjugate();
      Complex complex11 = Complex.I;
      Complex complex12 = complex3.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.I.tan();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.ONE.multiply(0.0);
      double double1 = complex3.getReal();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex1.sqrt();
      double double2 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.asin();
      String string0 = complex2.ZERO.toString();
      String string1 = complex1.toString();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex0.tanh();
      Object object0 = complex0.readResolve();
      double double0 = complex0.getArgument();
      Complex complex6 = Complex.valueOf(1.5707963267948966);
      boolean boolean1 = complex3.isNaN();
      Complex complex7 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.multiply(1);
      int int0 = complex0.INF.hashCode();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.ONE.multiply(0.0);
      Complex complex5 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      double double0 = complex0.INF.getArgument();
      double double1 = complex0.getArgument();
      int int0 = complex0.ZERO.hashCode();
      try { 
        complex0.NaN.nthRoot((-190));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -190
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-653.43936886759), (-653.43936886759));
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = complex1.INF.pow(0.0);
      Complex complex3 = complex2.ZERO.multiply(0.0);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.multiply(1824);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(986.57731917);
      List<Complex> list0 = complex0.NaN.nthRoot(189);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex0.subtract((-1.005004229646318E-7));
      Complex complex5 = complex4.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.multiply((-908.3));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.ZERO.add((-908.3));
      double double0 = complex0.getImaginary();
      Complex complex4 = complex1.ZERO.subtract((-908.3));
      Complex complex5 = complex2.exp();
      Complex complex6 = complex3.pow(0.0);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex2.add(complex7);
      Complex complex9 = complex6.add(3944.2885230952324);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(2199.0, 3571.0081967951855);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf(3571.0081967951855);
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex0.reciprocal();
      double double0 = complex5.I.abs();
      boolean boolean0 = complex4.isNaN();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex5.multiply((-1030));
      Complex complex9 = complex4.reciprocal();
      Complex complex10 = complex9.NaN.cosh();
      double double1 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(2794.25622);
      Complex complex1 = complex0.reciprocal();
      Object object0 = complex0.NaN.readResolve();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex1.sqrt();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double double0 = 20.0;
      Complex complex0 = new Complex(20.0);
      double double1 = 0.0;
      Complex complex1 = new Complex(20.0, 0.0);
      double double2 = 0.0;
      Complex complex2 = complex1.I.add(0.0);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex0.I.subtract(complex1);
      int int0 = 1;
      List<Complex> list0 = complex5.ONE.nthRoot(1);
      Complex complex6 = complex5.I.pow(complex0);
      try { 
        complex6.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.I.subtract(complex1);
      int int0 = 0;
      try { 
        complex0.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.multiply(complex1);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      List<Complex> list0 = complex0.ZERO.nthRoot(1);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.subtract(2.1628672925745152E-105);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.NaN.tan();
      try { 
        complex2.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.ZERO.divide(0.0);
      Complex complex2 = complex0.sin();
      String string1 = complex1.I.toString();
      Complex complex3 = complex2.I.acos();
      Complex complex4 = Complex.valueOf(6.283185307179586);
      boolean boolean0 = complex0.equals(complex1);
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      int int0 = complex1.hashCode();
      double double0 = complex1.getReal();
      Complex complex2 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(1.2840254306793213, 1.2840254306793213);
      List<Complex> list0 = complex0.INF.nthRoot(1);
      Complex complex1 = complex0.INF.tan();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.hashCode();
      try { 
        complex0.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.cos();
      Complex complex4 = Complex.valueOf(1130.7580058416452, 1130.7580058416452);
      Complex complex5 = complex1.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 0.0);
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(7.283163019991001E-164, 7.283163019991001E-164);
      Complex complex1 = complex0.reciprocal();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex3.ONE.divide(1970.798959338);
      List<Complex> list0 = complex4.INF.nthRoot(7);
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-257.713056), (-257.713056));
      Complex complex2 = complex1.INF.divide((-257.713056));
      Complex complex3 = complex0.createComplex(479.25594364197, 479.25594364197);
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.equals("{0} values have been added before statistic is configured");
      Complex complex1 = complex0.subtract(6.283185307179586);
      Complex complex2 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex0.ZERO.asin();
      String string0 = complex4.ZERO.toString();
      Complex complex5 = complex0.ZERO.sqrt1z();
      Complex complex6 = complex0.ZERO.createComplex(Double.NaN, Double.NaN);
      Complex complex7 = complex0.atan();
      ComplexField complexField0 = complex7.ONE.getField();
      Complex complex8 = complex7.exp();
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex9.ZERO.subtract(Double.NaN);
      Complex complex11 = complex6.negate();
      Complex complex12 = complex11.ONE.sqrt1z();
      Object object0 = complex12.readResolve();
      Complex complex13 = complex11.NaN.acos();
      Complex complex14 = complex7.createComplex(Double.NaN, Double.NaN);
      Complex complex15 = complex14.ZERO.add(Double.NaN);
      Complex complex16 = complex8.INF.sqrt1z();
      Complex complex17 = complex6.conjugate();
      int int0 = complex17.ONE.hashCode();
      Complex complex18 = complex17.add(complex6);
      Complex complex19 = complex8.exp();
      ComplexField complexField1 = complex11.I.getField();
      Complex complex20 = complex3.divide(Double.NaN);
      Complex complex21 = complex20.ONE.pow(Double.NaN);
      String string1 = complex11.toString();
      Complex complex22 = Complex.valueOf((-802.049983), (-1313.0));
      Complex complex23 = complex4.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(401.194349714689);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.tanh();
      double double0 = complex1.INF.getArgument();
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.INF.multiply(401.194349714689);
      Complex complex7 = complex5.ZERO.tan();
      Complex complex8 = complex7.I.multiply(255.948901078);
      Complex complex9 = complex7.I.add(complex0);
      Complex complex10 = complex6.ONE.divide(complex0);
      boolean boolean0 = complex2.equals(complex5);
      Complex complex11 = complex0.pow(0.0);
      Complex complex12 = complex11.subtract(0.0);
      Complex complex13 = complex5.tan();
      Complex complex14 = complex2.asin();
      Complex complex15 = complex3.tan();
      Object object0 = complex10.ZERO.readResolve();
      Complex complex16 = complex1.pow(0.0);
      Complex complex17 = complex16.ONE.exp();
      Complex complex18 = complex10.NaN.conjugate();
      Complex complex19 = complex17.NaN.cosh();
      Complex complex20 = complex10.cosh();
      double double1 = complex7.getArgument();
      Complex complex21 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.ZERO.cosh();
      Object object0 = complex2.I.readResolve();
      double double0 = complex1.INF.getArgument();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex3.log();
      Object object1 = complex3.I.readResolve();
      Complex complex8 = complex7.INF.atan();
      Object object2 = complex6.readResolve();
      Complex complex9 = complex7.createComplex(0.5278670787811279, 0.7853981633974483);
      Complex complex10 = complex7.reciprocal();
      Complex complex11 = complex10.negate();
      Complex complex12 = complex10.ONE.tan();
      Complex complex13 = complex5.exp();
      Complex complex14 = complex8.I.multiply(complex11);
      Complex complex15 = complex13.INF.asin();
      int int0 = complex15.I.hashCode();
      Complex complex16 = complex5.cosh();
      Complex complex17 = complex11.sin();
      Complex complex18 = complex7.NaN.conjugate();
      int int1 = complex7.ONE.hashCode();
      Complex complex19 = complex13.add(0.7853981633974483);
      Complex complex20 = complex19.sinh();
      double double1 = complex7.getReal();
      Complex complex21 = complex8.asin();
      Complex complex22 = complex19.cos();
      boolean boolean0 = complex8.isInfinite();
      Complex complex23 = complex4.multiply((-1791));
      Complex complex24 = complex4.multiply((-1791));
      Complex complex25 = complex24.log();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(2.5411510467529297, 2.5411510467529297);
      Complex complex1 = complex0.createComplex(2.5411510467529297, 0.0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(3782.000725, 3782.000725);
      Complex complex1 = complex0.NaN.add(3782.000725);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.multiply((-1.6040513288090055E-287));
      Complex complex4 = complex2.I.add(0.0);
      Complex complex5 = complex2.I.subtract(Double.NaN);
      int int0 = complex5.INF.hashCode();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex2.subtract(complex7);
      Complex complex10 = complex1.subtract(complex6);
      Complex complex11 = complex10.I.divide((-12.87081965393));
      Complex complex12 = complex10.tanh();
      List<Complex> list0 = complex8.nthRoot(4025);
      Complex complex13 = complex8.pow(846.0944);
      Complex complex14 = complex6.sqrt();
      Complex complex15 = Complex.valueOf((-1.6040513288090055E-287), 3782.000725);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(2.6209850274990846E-218);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex3.asin();
      Object object0 = complex5.ZERO.readResolve();
      Complex complex6 = Complex.valueOf(0.0, 2.6209850274990846E-218);
      Complex complex7 = Complex.valueOf(2.0, 2.0);
      double double0 = complex0.getImaginary();
      Complex complex8 = complex7.NaN.add(complex6);
      Complex complex9 = complex6.ONE.add(2.0);
      Complex complex10 = complex1.ZERO.tan();
      double double1 = complex7.abs();
      Complex complex11 = complex1.pow(complex6);
      Complex complex12 = complex11.ZERO.pow(2.6209850274990846E-218);
      Complex complex13 = complex7.ONE.subtract(0.0);
      Complex complex14 = complex11.I.sqrt();
      Complex complex15 = complex6.sqrt1z();
      Complex complex16 = complex7.sqrt();
      Complex complex17 = complex16.I.pow(Double.POSITIVE_INFINITY);
      Complex complex18 = complex16.ONE.sqrt1z();
      Complex complex19 = Complex.valueOf(0.0, 0.0);
      Complex complex20 = complex3.subtract(Double.POSITIVE_INFINITY);
      Complex complex21 = complex20.log();
      Complex complex22 = complex19.multiply(1522.389767548674);
      boolean boolean0 = complex2.isInfinite();
      Complex complex23 = complex4.acos();
      Complex complex24 = complex10.sin();
      Complex complex25 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.equals(" }3gt*ws>t;-");
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(2447.872969616);
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.I.subtract(complex3);
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex5.INF.pow(complex3);
      Complex complex7 = complex4.INF.divide(complex0);
      Complex complex8 = complex0.createComplex(2447.872969616, 1920.959878651811);
      Complex complex9 = complex1.subtract(complex0);
      boolean boolean0 = complex0.equals(complex2);
      Complex complex10 = complex8.log();
      Complex complex11 = complex10.I.acos();
      Complex complex12 = complex10.asin();
      Complex complex13 = complex0.divide(complex3);
      Complex complex14 = complex13.atan();
      Complex complex15 = complex4.sqrt1z();
      Complex complex16 = Complex.valueOf((-870.62501834186));
      boolean boolean1 = complex3.isNaN();
      Complex complex17 = complex9.acos();
      boolean boolean2 = complex1.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1079.6), 1126.93548928);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.cosh();
      int int0 = complex2.ZERO.hashCode();
      Complex complex3 = Complex.valueOf(2.4920010566711426, (-7021.1406));
      Complex complex4 = complex2.add(complex0);
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex2.pow(complex4);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex3.cosh();
      String string0 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tan();
      double double0 = complex0.INF.abs();
      double double1 = complex0.abs();
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex0.I.exp();
      Complex complex4 = complex2.INF.atan();
      double double2 = complex4.abs();
      Complex complex5 = complex2.INF.negate();
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex0.pow(complex2);
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex11.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex13 = complex10.NaN.add(complex2);
      Complex complex14 = complex11.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex15 = complex10.negate();
      Complex complex16 = complex15.I.sqrt();
      Complex complex17 = Complex.valueOf((-1373.333231067261), (-1373.333231067261));
      Complex complex18 = complex15.asin();
      Complex complex19 = Complex.valueOf(0.0);
      boolean boolean0 = complex10.equals(complex18);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex0.NaN.sinh();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = Complex.valueOf((-1430.9847238));
      Complex complex6 = complex5.createComplex(0.0, 1.0572423934936523);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex3.exp();
      Complex complex9 = complex8.INF.sinh();
      Complex complex10 = complex7.I.sin();
      Complex complex11 = complex5.acos();
      Complex complex12 = complex11.I.createComplex(1.0572423934936523, Double.NaN);
      Complex complex13 = complex7.sqrt();
      Complex complex14 = complex2.asin();
      Complex complex15 = complex11.ONE.cos();
      Complex complex16 = complex3.conjugate();
      Complex complex17 = complex12.multiply(1397);
      Object object0 = complex12.INF.readResolve();
      Complex complex18 = complex10.negate();
      Complex complex19 = complex0.negate();
      Complex complex20 = complex12.I.tanh();
      Object object1 = complex13.readResolve();
      Complex complex21 = complex10.tan();
      Complex complex22 = complex12.divide(complex0);
  }
}
