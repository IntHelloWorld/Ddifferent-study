/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 01:49:33 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(333.796);
      Complex complex1 = complex0.ONE.createComplex(0.0, 3720.4479712505);
      int int0 = complex0.ZERO.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.ZERO.multiply(0.0);
      Complex complex3 = complex2.ONE.add(complex0);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.multiply(1);
      Complex complex7 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(743.9, 86.06569626);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(0.0, 86.06569626);
      Complex complex3 = Complex.valueOf((-1791.33076347), 162.2449584343376);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex0.divide(complex3);
      Complex complex7 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-1002.0));
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = new Complex((-1002.0), 2778.975056381111);
      Complex complex2 = complex1.I.pow((-1002.0));
      Complex complex3 = Complex.valueOf(0.11081436276435852);
      ComplexField complexField1 = complex1.I.getField();
      Complex complex4 = complex1.I.divide(complex0);
      Complex complex5 = complex0.pow(complex1);
      List<Complex> list0 = complex5.ONE.nthRoot(1);
      Complex complex6 = complex0.ONE.exp();
      Complex complex7 = complex6.log();
      Object object0 = complex7.INF.readResolve();
      Complex complex8 = Complex.valueOf((-1002.0), 2778.975056381111);
      Complex complex9 = complex0.acos();
      boolean boolean0 = complex7.isNaN();
      Complex complex10 = complex7.cosh();
      Complex complex11 = complex9.tanh();
      Complex complex12 = Complex.valueOf(2778.975056381111, 2778.975056381111);
      Complex complex13 = complex11.INF.createComplex(3167.59, 1226.6131182);
      Complex complex14 = complex8.cosh();
      Complex complex15 = Complex.NaN;
      Complex complex16 = complex14.add(complex15);
      Complex complex17 = complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1678.071707912944);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = Complex.valueOf(1678.071707912944, 0.0);
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex0.multiply(complex3);
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex3.NaN.acos();
      Complex complex7 = complex5.NaN.conjugate();
      Complex complex8 = Complex.valueOf(1678.071707912944, (-4839.68766));
      boolean boolean0 = complex4.isInfinite();
      double double0 = complex4.getArgument();
      List<Complex> list0 = complex5.INF.nthRoot(22);
      Complex complex9 = complex8.add(6.283185307179586);
      double double1 = complex4.getImaginary();
      Complex complex10 = Complex.valueOf(1678.071707912944, (-1.0));
      Complex complex11 = complex10.NaN.cosh();
      Complex complex12 = complex10.NaN.multiply(complex5);
      boolean boolean1 = complex10.equals(complex8);
      double double2 = complex12.getArgument();
      Complex complex13 = complex9.subtract((-208.60883332));
      Complex complex14 = complex12.tan();
      Complex complex15 = complex5.tan();
      double double3 = complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.INF.divide((-77.45665007311));
      String string1 = complex0.NaN.toString();
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex1.ZERO.negate();
      Complex complex5 = complex4.I.tan();
      ComplexField complexField0 = complex5.ONE.getField();
      Complex complex6 = complex0.log();
      Complex complex7 = complex2.subtract((-77.45665007311));
      Complex complex8 = complex2.multiply(0.0);
      Complex complex9 = complex8.I.sinh();
      Object object0 = complex2.readResolve();
      Complex complex10 = complex0.multiply(2870);
      List<Complex> list0 = complex10.ONE.nthRoot(2870);
      Object object1 = complex6.readResolve();
      double double1 = complex9.INF.abs();
      Complex complex11 = complex4.atan();
      // Undeclared exception!
      complex11.nthRoot(2870);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      double double0 = complex0.ZERO.getArgument();
      double double1 = complex0.getReal();
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex2.ONE.add(20.0);
      Complex complex5 = complex4.ONE.subtract(complex0);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex1.ZERO.log();
      Complex complex8 = complex6.INF.multiply(complex0);
      double double2 = complex0.NaN.getArgument();
      Complex complex9 = complex0.log();
      Complex complex10 = complex1.conjugate();
      boolean boolean0 = complex9.isInfinite();
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex2.tanh();
      double double3 = complex8.getArgument();
      Complex complex13 = complex5.cosh();
      Complex complex14 = complex3.subtract(0.0);
      Complex complex15 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.ZERO.pow((-1.0));
      Complex complex3 = complex0.ZERO.subtract(complex2);
      List<Complex> list0 = complex0.I.nthRoot(2448);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex4.ZERO.acos();
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex5.ONE.subtract((-1733.0));
      Complex complex9 = complex4.pow(complex2);
      Complex complex10 = complex9.pow(complex4);
      Complex complex11 = complex1.divide((-1.0));
      Complex complex12 = complex2.NaN.sinh();
      Complex complex13 = complex10.ZERO.multiply(2448);
      Complex complex14 = complex10.cosh();
      Complex complex15 = complex4.sqrt();
      Complex complex16 = complex6.INF.reciprocal();
      Complex complex17 = complex5.multiply((-1156.2));
      double double0 = complex2.abs();
      Complex complex18 = complex9.divide(complex1);
      Complex complex19 = complex0.subtract(Double.NaN);
      int int0 = complex10.hashCode();
      Complex complex20 = complex6.cos();
      Complex complex21 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.I.hashCode();
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex1.acos();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex0.multiply(Double.NaN);
      Object object1 = complex4.INF.readResolve();
      Complex complex5 = complex4.ONE.add((-1.0));
      Complex complex6 = complex0.negate();
      ComplexField complexField0 = complex6.INF.getField();
      Complex complex7 = complex1.pow(complex3);
      Complex complex8 = complex7.I.pow(Double.NaN);
      Complex complex9 = complex7.I.reciprocal();
      Complex complex10 = complex1.multiply((-1269));
      Complex complex11 = new Complex(Double.NaN, 3172.25037);
      Complex complex12 = complex10.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.791018095971047E-10, 2.791018095971047E-10);
      Complex complex1 = complex0.createComplex(2.791018095971047E-10, 2.791018095971047E-10);
      Complex complex2 = complex1.INF.createComplex(2.791018095971047E-10, 9.219544613762692E-9);
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex1.multiply(2.0);
      boolean boolean0 = complex1.equals(complex3);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex4.ZERO.multiply(0);
      boolean boolean1 = complex2.isInfinite();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex4.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 1156.42093;
      Complex complex0 = Complex.valueOf(1156.42093);
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex3.NaN.add(complex0);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex2.asin();
      double double0 = complex1.ONE.abs();
      int int0 = complex6.hashCode();
      Complex complex7 = complex2.ONE.subtract(2824.5949846711);
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex8.conjugate();
      boolean boolean0 = complex2.equals(complex3);
      Complex complex10 = complex3.log();
      Complex complex11 = complex0.tanh();
      Complex complex12 = complex1.subtract(0.0);
      int int1 = complex0.hashCode();
      String string0 = complex9.toString();
      Complex complex13 = complex10.reciprocal();
      int int2 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-895.0), (-895.0));
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1.2075364784547675E-189);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.INF.multiply(1.879528650772233E-12);
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex1.NaN.divide(complex0);
      Complex complex5 = complex1.exp();
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex1.NaN.sqrt();
      Complex complex8 = complex5.INF.subtract((-1.0));
      Complex complex9 = complex6.I.divide(complex5);
      double double0 = complex4.getReal();
      Complex complex10 = complex1.atan();
      String string0 = complex10.INF.toString();
      Complex complex11 = complex9.multiply(complex5);
      Complex complex12 = complex11.tan();
      Complex complex13 = complex10.NaN.cos();
      Object object0 = complex9.INF.readResolve();
      boolean boolean0 = complex12.isInfinite();
      Complex complex14 = complex0.atan();
      Complex complex15 = complex11.I.add(complex8);
      Complex complex16 = complex7.add(1.879528650772233E-12);
      Complex complex17 = complex2.sqrt1z();
      double double1 = complex8.abs();
      Complex complex18 = complex12.tan();
      Complex complex19 = complex10.exp();
      Complex complex20 = complex2.tanh();
      Complex complex21 = complex5.multiply(complex4);
      Complex complex22 = complex18.tanh();
      Complex complex23 = complex22.NaN.add(Double.NaN);
      double double2 = complex5.getReal();
      Complex complex24 = complex21.add(complex1);
      Complex complex25 = complex16.asin();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex3.ONE.divide(1.7778112039716255E-8);
      Complex complex6 = complex2.I.subtract(complex0);
      Complex complex7 = complex6.ONE.multiply(complex0);
      Complex complex8 = complex7.ZERO.acos();
      List<Complex> list0 = complex2.I.nthRoot(3671);
      Complex complex9 = complex2.ONE.divide(0.0);
      Complex complex10 = complex1.asin();
      double double0 = complex0.getReal();
      double double1 = complex0.abs();
      Complex complex11 = complex1.ZERO.negate();
      Complex complex12 = complex1.negate();
      Complex complex13 = Complex.valueOf(2.6761388778686523, (-1.2930091396008281E-8));
      Complex complex14 = complex1.multiply(complex0);
      ComplexField complexField0 = complex1.getField();
      boolean boolean0 = complex10.isNaN();
      Complex complex15 = complex0.I.createComplex((-1.2930091396008281E-8), 2.2254737134350224E-8);
      Complex complex16 = Complex.I;
      ComplexField complexField1 = complex16.INF.getField();
      boolean boolean1 = complex1.equals(complex16);
      Complex complex17 = complex12.exp();
      Complex complex18 = Complex.valueOf((-1.2930091396008281E-8));
      Complex complex19 = complex1.exp();
      Complex complex20 = complex19.createComplex(2.2254737134350224E-8, 4534.4229263);
      Complex complex21 = Complex.valueOf(4534.4229263, (-1.2930091396008281E-8));
      Complex complex22 = complex3.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.exp();
      List<Complex> list0 = complex1.ONE.nthRoot(1118);
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.subtract(83.5981694673817);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex2.ONE.subtract(2706.2083513246);
      Complex complex6 = complex2.sin();
      Complex complex7 = complex4.multiply(0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex3.I.negate();
      int int0 = complex0.hashCode();
      Complex complex5 = complex1.NaN.divide(6.283185307179586);
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.ZERO.atan();
      List<Complex> list0 = complex2.INF.nthRoot(437);
      Complex complex8 = complex1.negate();
      Complex complex9 = complex8.multiply(complex2);
      Complex complex10 = complex9.ZERO.multiply(6.283185307179586);
      boolean boolean0 = complex1.isInfinite();
      Complex complex11 = complex4.exp();
      Complex complex12 = complex9.asin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-6.883499809714189E297), (-6.883499809714189E297));
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf((-6.883499809714189E297));
      Complex complex3 = complex1.divide(0.0);
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex3.INF.sqrt();
      Complex complex6 = complex1.log();
      Complex complex7 = Complex.valueOf(537.8943719075064, (-2945.85222492715));
      double double0 = complex0.getArgument();
      Complex complex8 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.ONE.readResolve();
      double double0 = complex0.getArgument();
      double double1 = complex0.getReal();
      Complex complex1 = complex0.log();
      int int0 = complex1.INF.hashCode();
      int int1 = complex1.ONE.hashCode();
      double double2 = complex1.abs();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex0.ZERO.tan();
      String string0 = complex2.ONE.toString();
      Complex complex4 = complex2.subtract(0.0);
      Complex complex5 = complex2.NaN.acos();
      Complex complex6 = complex2.exp();
      int int2 = complex2.hashCode();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex7.negate();
      Complex complex10 = complex7.acos();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      Complex complex12 = complex7.sqrt1z();
      Complex complex13 = complex9.divide((double) 0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      Complex complex1 = null;
      try { 
        complex0.ZERO.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex1.I.pow(complex0);
      boolean boolean0 = complex0.equals(complexField0);
      int int0 = complex4.NaN.hashCode();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex1.ZERO.log();
      double double0 = complex1.getArgument();
      Complex complex7 = complex4.add(complex1);
      double double1 = complex5.getReal();
      Complex complex8 = complex5.negate();
      Complex complex9 = complex5.tan();
      Complex complex10 = complex0.subtract(0.0);
      Complex complex11 = complex0.ONE.acos();
      Complex complex12 = complex5.asin();
      Complex complex13 = complex12.ZERO.pow(complex11);
      Complex complex14 = complex10.divide((-873.1380159));
      Complex complex15 = complex14.ZERO.tan();
      boolean boolean1 = complex2.isNaN();
      boolean boolean2 = complex0.equals(complex14);
      List<Complex> list0 = complex6.nthRoot(1335);
      Complex complex16 = complex8.acos();
      Complex complex17 = complex2.createComplex((-666.8), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-1663.6778024));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.multiply(complex1);
      double double0 = complex0.getImaginary();
      String string0 = complex0.ONE.toString();
      int int0 = complex1.hashCode();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.asin();
      double double1 = complex1.getReal();
      Complex complex6 = complex0.NaN.subtract(complex2);
      Complex complex7 = complex1.NaN.cos();
      Complex complex8 = complex4.subtract(complex0);
      Complex complex9 = complex0.NaN.reciprocal();
      Complex complex10 = complex0.conjugate();
      boolean boolean0 = complex3.equals("(1.0, 0.0)");
      Complex complex11 = complex4.sqrt1z();
      double double2 = complex10.getReal();
      Complex complex12 = complex10.add(0.0);
      Complex complex13 = complex8.createComplex((-1663.6778024), 0.0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-1543.0), Double.NaN);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.cos();
      try { 
        complex2.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.3455801602048414E-30));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex3.I.multiply((-1.3455801602048414E-30));
      Complex complex5 = complex2.I.cos();
      Complex complex6 = complex0.NaN.add((-1.3455801602048414E-30));
      Complex complex7 = complex6.NaN.add(complex2);
      Complex complex8 = Complex.valueOf(20.0, 20.0);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex9.I.asin();
      Complex complex11 = complex10.NaN.sqrt();
      Complex complex12 = complex9.INF.sinh();
      Complex complex13 = complex11.ZERO.cos();
      Object object0 = complex13.I.readResolve();
      Complex complex14 = complex10.ZERO.createComplex((-2535.093331), 667.3723);
      Complex complex15 = complex0.ONE.sqrt();
      Complex complex16 = complex0.conjugate();
      Complex complex17 = complex9.reciprocal();
      Complex complex18 = complex9.add(0.0);
      Complex complex19 = complex18.NaN.add((-2535.093331));
      Complex complex20 = complex18.pow(complex12);
      Complex complex21 = complex9.pow(complex13);
      Complex complex22 = complex13.sin();
      Complex complex23 = complex9.sinh();
      Complex complex24 = complex8.subtract(20.0);
      Complex complex25 = new Complex(0.0);
      Complex complex26 = complex11.multiply(complex25);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2812.45373100282));
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex3.INF.multiply(2558.8976754513);
      Complex complex5 = complex0.negate();
      boolean boolean1 = complex5.isNaN();
      Complex complex6 = Complex.valueOf((-2812.45373100282), 2.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(4361.6866, 4361.6866);
      double double0 = complex1.abs();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.ZERO.pow(complex1);
      Complex complex4 = complex0.INF.multiply(complex1);
      Object object0 = complex4.I.readResolve();
      int int0 = complex0.hashCode();
      Object object1 = new Object();
      boolean boolean0 = complex0.equals(object1);
      List<Complex> list0 = complex2.nthRoot(7);
      Complex complex5 = complex1.acos();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1107.986719003231));
      boolean boolean0 = complex1.equals(complex0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex1.conjugate();
      double double0 = complex3.abs();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex8.multiply(1107.986719003231);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 650.63145);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.NaN.cos();
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = Complex.valueOf(0.0);
      try { 
        complex6.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf((-1.0));
      Complex complex3 = null;
      try { 
        complex2.NaN.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(2347.85, 2347.85);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.pow(2347.85);
      Complex complex3 = Complex.valueOf(2347.85, (-74.0));
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex1.NaN.sinh();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex6 = Complex.valueOf((-74.0));
      Complex complex7 = complex2.add(complex6);
      Object object0 = complex3.readResolve();
      boolean boolean1 = complex6.equals(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex0.ONE.pow(0.0);
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = complex3.INF.pow(0.0);
      Complex complex8 = new Complex(0.0, 0.0);
      Complex complex9 = complex6.pow(complex8);
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex5.acos();
      Complex complex12 = complex2.INF.add(0.0);
      Complex complex13 = complex10.multiply(0.0);
      double double0 = complex5.getReal();
      Object object0 = complex2.ZERO.readResolve();
      String string0 = complex13.toString();
      Object object1 = complex3.readResolve();
      Complex complex14 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3386.63, (-2429.849951241461));
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.NaN.sqrt();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex3.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.INF.reciprocal();
      double double0 = complex0.I.getArgument();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.I.add(0.0);
      Complex complex5 = Complex.valueOf(0.0, 1374.3);
      Complex complex6 = complex3.divide(complex5);
      Complex complex7 = complex5.createComplex(0.0, 1374.3);
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.multiply(1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3373.499373739498, 3373.499373739498);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.I.tan();
      Complex complex4 = complex2.NaN.cosh();
      double double0 = complex0.abs();
      Complex complex5 = complex0.NaN.asin();
      Complex complex6 = Complex.valueOf(3373.499373739498);
      Complex complex7 = complex1.add(complex4);
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ZERO.pow(complex1);
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.INF.multiply(complex1);
      Complex complex5 = Complex.valueOf((-273.7), (-1127.42450279157));
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex7.INF.divide(complex3);
      double double0 = complex7.getArgument();
      double double1 = complex7.abs();
      ComplexField complexField0 = complex5.getField();
      Complex complex9 = complex5.subtract(0.0);
      Complex complex10 = complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = Complex.ZERO;
      int int0 = complex3.ONE.hashCode();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex5.divide(complex3);
      Complex complex7 = complex3.pow(complex5);
      String string0 = complex0.toString();
      Complex complex8 = Complex.valueOf(1.0);
      Complex complex9 = complex7.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, (-667.05657990544));
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1181.7001888, (-1394.9602955020537));
      Complex complex1 = complex0.I.pow((-1394.9602955020537));
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex2.divide(1329.541);
      Complex complex5 = complex0.NaN.pow(complex2);
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.NaN.tan();
      Complex complex8 = complex2.NaN.cos();
      Complex complex9 = complex7.I.conjugate();
      Complex complex10 = complex9.I.divide(1329.541);
      Complex complex11 = complex0.subtract(complex6);
      Complex complex12 = complex2.exp();
      Complex complex13 = complex9.reciprocal();
      Complex complex14 = complex11.divide(1181.7001888);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3270.441486546939), (-2968.55973030172));
      Complex complex1 = complex0.NaN.conjugate();
      double double0 = complex1.I.getArgument();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.valueOf((-3270.441486546939), (-2968.55973030172));
      String string0 = complex4.toString();
      Complex complex6 = complex2.ZERO.cos();
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = complex4.sin();
      Complex complex9 = complex3.add(complex5);
      Complex complex10 = complex0.ZERO.multiply(1.5707963267948966);
      Complex complex11 = complex9.NaN.log();
      int int0 = complex2.hashCode();
      Complex complex12 = complex1.add(complex4);
      boolean boolean0 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(1651.5963);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.I.pow(complex0);
      double double0 = complex1.ONE.getArgument();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.conjugate();
      boolean boolean1 = complex0.isNaN();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.INF.subtract(0.0);
      Complex complex7 = complex3.atan();
      Complex complex8 = complex0.asin();
      String string0 = complex1.toString();
      Complex complex9 = complex4.conjugate();
      boolean boolean2 = complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-5.448044533034374E-10));
      Complex complex1 = new Complex((-5.448044533034374E-10), (-249.0));
      Complex complex2 = complex0.I.add(complex1);
      Object object0 = complex0.INF.readResolve();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.multiply(complex1);
      int int0 = complex4.NaN.hashCode();
      Complex complex5 = complex2.tanh();
      double double0 = complex0.getImaginary();
      List<Complex> list0 = complex5.nthRoot(624);
      Complex complex6 = complex1.sqrt();
      String string0 = complex6.I.toString();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex7.ZERO.multiply((-1227));
      Complex complex9 = Complex.valueOf((-249.0));
      Complex complex10 = complex7.NaN.subtract((-249.0));
      int int1 = complex1.hashCode();
      Complex complex11 = complex2.tan();
      Complex complex12 = complex0.pow(2681.53);
      List<Complex> list1 = complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(504.8413140904291);
      Complex complex1 = complex0.pow(0.0);
      boolean boolean0 = complex0.equals(complex1);
      double double0 = complex0.getImaginary();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex0.tan();
      boolean boolean1 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5675.9216064609);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.divide(1901.462);
      List<Complex> list0 = complex3.nthRoot(376);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(3373.499373739498);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.I.tan();
      Complex complex4 = complex2.NaN.cosh();
      double double0 = complex0.abs();
      Complex complex5 = complex0.NaN.asin();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex1.add(complex4);
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      int int0 = complex1.hashCode();
      Complex complex3 = complex0.NaN.add(0.0);
      Complex complex4 = complex2.I.reciprocal();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.ONE.reciprocal();
      boolean boolean0 = complex2.isNaN();
      Complex complex7 = complex3.sin();
      Complex complex8 = complex7.ZERO.multiply(286);
      Complex complex9 = complex4.subtract(0.0);
      Complex complex10 = complex9.ONE.conjugate();
      Complex complex11 = complex2.subtract(complex7);
      Complex complex12 = complex2.tan();
      Complex complex13 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(931.4774);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex0.I.divide(complex1);
      Complex complex5 = complex4.ZERO.atan();
      String string0 = complex4.I.toString();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      boolean boolean1 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(1477);
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.I.cosh();
      Complex complex4 = complex0.divide(1.8178532123565674);
      String string0 = complex4.toString();
      Complex complex5 = complex0.negate();
      double double0 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.ONE.pow(0.0);
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex4.ONE.add(0.0);
      double double0 = complex0.getArgument();
      Complex complex6 = complex0.multiply(complex2);
      Complex complex7 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.6669275760650635);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex2.NaN.createComplex(0.6669275760650635, 0.0);
      Complex complex4 = complex2.I.sqrt1z();
      Complex complex5 = complex2.INF.divide(complex0);
      double double0 = complex1.ONE.getArgument();
      Object object0 = complex1.ONE.readResolve();
      boolean boolean0 = complex0.equals("Q/PWxUI<g tVb6Lp8");
      Object object1 = complex1.readResolve();
      Complex complex6 = complex1.multiply(0.6669275760650635);
      Complex complex7 = complex6.NaN.tan();
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex6.createComplex(0.0, 0.6669275760650635);
      Complex complex10 = complex8.NaN.cos();
      Complex complex11 = complex3.cosh();
      Complex complex12 = complex2.pow(complex0);
      Complex complex13 = complex4.sinh();
      double double1 = complex2.getImaginary();
      double double2 = complex6.getArgument();
      double double3 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2181.719787343), 0.5920095443725586);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex2.INF.createComplex((-2749.21324), (-1750.7463));
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.I.add(complex2);
      Complex complex6 = complex0.INF.divide((-1947.1210620676));
      Complex complex7 = complex6.I.log();
      ComplexField complexField0 = complex7.getField();
      Complex complex8 = complex0.multiply(6.283185307179586);
      boolean boolean0 = complex2.isNaN();
      Complex complex9 = complex2.add((-1947.1210620676));
      Object object0 = complex4.readResolve();
      int int0 = complex9.hashCode();
      Complex complex10 = complex9.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = new Complex(1175.0, 1175.0);
      Complex complex3 = complex2.NaN.divide(1175.0);
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.NaN.add(1175.0);
      Complex complex6 = complex0.NaN.sqrt1z();
      double double0 = complex4.I.getArgument();
      boolean boolean0 = complex2.isInfinite();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex4.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      double double1 = complex0.getImaginary();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex2.NaN.multiply(complex3);
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1395.25841534));
      Complex complex7 = complex6.pow(0.0);
      Complex complex8 = complex1.ONE.exp();
      Complex complex9 = complex8.INF.createComplex(Double.NaN, 241.212509120395);
      Complex complex10 = complex2.acos();
      Complex complex11 = complex10.ONE.createComplex((-1665.0234921348), (-1395.25841534));
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex12.asin();
      Complex complex14 = complex2.divide(complex11);
      boolean boolean0 = complex12.isInfinite();
      Object object0 = complex12.readResolve();
      double double2 = complex6.getImaginary();
      Complex complex15 = complex10.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-1694.91422468858), 0.0);
      Complex complex1 = complex0.ZERO.add((-1694.91422468858));
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex1.NaN.exp();
      Complex complex5 = complex3.I.add(complex1);
      Complex complex6 = complex3.ONE.asin();
      double double0 = complex6.I.abs();
      Complex complex7 = complex6.ZERO.multiply(complex1);
      Complex complex8 = complex3.NaN.atan();
      Complex complex9 = complex8.I.divide(complex3);
      Complex complex10 = complex9.INF.sin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex11 = Complex.valueOf((-4820.37038160329));
      Complex complex12 = complex11.ONE.cos();
      Complex complex13 = complex11.ZERO.multiply(1);
      Complex complex14 = complex13.ZERO.conjugate();
      Complex complex15 = complex1.multiply(0.0);
      Complex complex16 = complex15.divide(complex11);
      Complex complex17 = complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(129.7559598, 129.7559598);
      Complex complex1 = complex0.divide((-2980.8483));
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex1.I.sqrt();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ZERO.multiply(complex0);
      Complex complex6 = complex0.pow(complex4);
      Complex complex7 = complex0.pow(complex4);
      Complex complex8 = complex7.I.acos();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex1.subtract(complex5);
      int int0 = complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(1195.45240362721, 0.500420093536377);
      Complex complex1 = complex0.ONE.tan();
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.NaN.divide(2.0);
      Complex complex4 = complex3.INF.divide(complex1);
      Complex complex5 = complex2.I.sqrt();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex0.ZERO.tan();
      Complex complex8 = Complex.valueOf(1187.81956);
      ComplexField complexField0 = complex8.NaN.getField();
      Complex complex9 = complex2.divide(Double.NaN);
      Complex complex10 = complex9.tan();
      String string0 = complex8.NaN.toString();
      double double1 = complex1.getImaginary();
      Complex complex11 = complex8.createComplex(Double.POSITIVE_INFINITY, 1187.81956);
      Complex complex12 = Complex.valueOf(2701.08638472, Double.NaN);
      Complex complex13 = Complex.ZERO;
      Complex complex14 = complex0.subtract(complex13);
      double double2 = complex2.getArgument();
      Complex complex15 = complex12.tanh();
      Complex complex16 = complex7.tan();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.pow(Double.NaN);
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex0.multiply(Double.NaN);
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = new Complex(0.45994341373443604, 0.45994341373443604);
      boolean boolean0 = complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.add(4318.815);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ONE.abs();
      double double1 = complex0.I.abs();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.ONE.log();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = new Complex(1.0, 1.0);
      Complex complex8 = complex0.multiply(complex7);
      double double2 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      ComplexField complexField0 = complex1.ONE.getField();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(1.5707963267948966, 4359.86784171);
      Complex complex4 = complex0.NaN.reciprocal();
      Complex complex5 = complex4.NaN.log();
      double double1 = complex2.ZERO.abs();
      int int0 = complex3.NaN.hashCode();
      Complex complex6 = complex1.INF.sqrt1z();
      double double2 = complex1.getImaginary();
      Complex complex7 = complex2.subtract(complex1);
      Complex complex8 = complex7.NaN.negate();
      Complex complex9 = Complex.valueOf(-0.0, 1.5707963267948966);
      Complex complex10 = Complex.valueOf((-3175.21370961), 0.0);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2167.9369536425475);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2113.2326693);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.ONE.multiply((-2516));
      Complex complex3 = complex0.ONE.add(20.0);
      Complex complex4 = complex3.ONE.add(complex0);
      Complex complex5 = complex4.INF.subtract(20.0);
      Complex complex6 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.INF.conjugate();
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex0.ONE.tanh();
      Complex complex5 = Complex.valueOf((-1.178234251477505E-7), 0.0);
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = complex5.ONE.pow(complex6);
      Complex complex8 = complex0.exp();
      Complex complex9 = complex6.negate();
      Complex complex10 = complex0.atan();
      double double0 = complex0.getReal();
      double double1 = complex5.abs();
      Complex complex11 = complex0.pow(0.0);
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = complex4.multiply(complex7);
      Complex complex14 = complex7.ZERO.divide(1.178234251477505E-7);
      try { 
        complex14.INF.nthRoot((-1487));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,487
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-735.6753684));
      Complex complex1 = complex0.INF.subtract(1.389719009399414);
      Complex complex2 = complex1.INF.pow((-1523.065547390454));
      double double0 = complex0.ZERO.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.multiply(1.389719009399414);
      Complex complex4 = complex3.I.reciprocal();
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4431.16), 2504.5);
      Complex complex1 = complex0.divide(6.283185307179586);
      boolean boolean0 = complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.ZERO.cosh();
      Complex complex4 = complex1.ONE.log();
      Complex complex5 = complex2.NaN.pow(complex1);
      Complex complex6 = complex1.multiply((-1716));
      String string0 = complex2.toString();
      double double0 = complex1.getArgument();
      int int0 = complex6.hashCode();
      ComplexField complexField0 = complex4.getField();
      try { 
        complex5.nthRoot((-1716));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,716
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.add(0.0);
      Complex complex2 = complex0.INF.cosh();
      double double0 = complex2.abs();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex5 = complex1.I.sinh();
      Complex complex6 = complex5.NaN.divide(complex0);
      Complex complex7 = Complex.valueOf(0.0, (-20.0));
      Complex complex8 = complex1.INF.sqrt1z();
      Complex complex9 = complex5.sin();
      Complex complex10 = complex5.ZERO.multiply(complex9);
      Complex complex11 = complex5.NaN.atan();
      int int0 = complex9.NaN.hashCode();
      Complex complex12 = complex5.ONE.asin();
      try { 
        complex12.I.nthRoot((-1042));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,042
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      double double0 = complex0.getReal();
      Complex complex2 = Complex.valueOf((-1347.152480064));
      Complex complex3 = complex0.I.multiply((-2040));
      Complex complex4 = complex0.atan();
      double double1 = complex4.INF.abs();
      double double2 = complex0.abs();
      double double3 = complex2.getReal();
      Complex complex5 = Complex.valueOf(1.0);
      double double4 = complex1.getImaginary();
      Complex complex6 = complex2.createComplex(0.0, 0.0);
      Complex complex7 = complex1.INF.divide(complex0);
      Complex complex8 = complex5.sqrt();
      Object object0 = complex8.ONE.readResolve();
      Complex complex9 = complex5.reciprocal();
      Complex complex10 = complex9.ONE.asin();
      Complex complex11 = complex10.createComplex(0.0, 1.0);
      double double5 = complex0.abs();
      Complex complex12 = complex4.divide(complex1);
      Complex complex13 = complex4.atan();
      double double6 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(2140.8251334, 0.0);
      Complex complex1 = new Complex((-983.7093466834));
      Complex complex2 = complex0.conjugate();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.tanh();
      List<Complex> list0 = complex1.NaN.nthRoot(2773);
      Complex complex5 = complex4.NaN.subtract(2140.8251334);
      Complex complex6 = complex0.divide(complex1);
      List<Complex> list1 = complex5.ONE.nthRoot(1);
      Complex complex7 = complex0.asin();
      int int0 = complex3.I.hashCode();
      double double0 = complex1.getArgument();
      Object object1 = new Object();
      boolean boolean0 = complex7.equals(object1);
      double double1 = complex3.getArgument();
      boolean boolean1 = complex7.isNaN();
      Complex complex8 = complex0.ZERO.asin();
      Complex complex9 = complex1.I.sqrt();
      Complex complex10 = Complex.valueOf(20.0);
      Complex complex11 = complex0.subtract(3768.3842);
      Complex complex12 = complex7.subtract(complex5);
      Complex complex13 = complex3.subtract(complex8);
      Complex complex14 = complex4.acos();
      Complex complex15 = complex6.negate();
      int int1 = complex4.hashCode();
      Complex complex16 = complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.valueOf((-0.09088450866185192), (-0.09088450866185192));
      Complex complex5 = complex1.tan();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex5.asin();
      Complex complex8 = complex2.NaN.asin();
      Complex complex9 = complex8.INF.subtract(complex0);
      Complex complex10 = complex1.NaN.sinh();
      Complex complex11 = complex2.ONE.cosh();
      Complex complex12 = complex11.ZERO.conjugate();
      ComplexField complexField0 = complex10.ZERO.getField();
      Complex complex13 = complex2.log();
      Complex complex14 = complex1.reciprocal();
      Complex complex15 = complex13.sin();
      Complex complex16 = complex13.multiply(0.0);
      Complex complex17 = complex16.ZERO.pow(complex13);
      double double0 = complex14.abs();
      Complex complex18 = complex1.sinh();
      Complex complex19 = complex14.cos();
      Complex complex20 = complex19.I.multiply(0.0);
      boolean boolean0 = complex15.equals(complex19);
      Complex complex21 = complex10.sqrt();
      Complex complex22 = complex17.tan();
      Complex complex23 = complex5.cosh();
      boolean boolean1 = complex12.equals(complex3);
      Complex complex24 = complex12.multiply(Double.NaN);
      double double1 = complex16.getArgument();
      Complex complex25 = complex15.multiply(complex22);
      Complex complex26 = Complex.valueOf((-545.589226212));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = Complex.valueOf(0.0, 1.282130763903269E70);
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex6.I.multiply(776);
      Complex complex8 = complex5.I.cosh();
      double double0 = complex7.NaN.getArgument();
      double double1 = complex6.I.getArgument();
      Complex complex9 = complex2.NaN.conjugate();
      Complex complex10 = complex4.multiply((-1182));
      double double2 = complex10.NaN.abs();
      Object object0 = new Object();
      boolean boolean1 = complex5.equals(object0);
      Complex complex11 = complex10.multiply(complex5);
      Complex complex12 = complex11.ONE.divide(complex6);
      ComplexField complexField0 = complex4.I.getField();
      Complex complex13 = complex2.subtract(complex6);
      int int0 = complex0.hashCode();
      Complex complex14 = complex13.ZERO.multiply(2699.0289681815943);
      Complex complex15 = complex14.NaN.negate();
      Complex complex16 = complex5.tanh();
      double double3 = complex13.getArgument();
      Complex complex17 = complex16.add(complex2);
      Complex complex18 = complex5.atan();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.ONE.add(931.966799740817);
      Complex complex5 = complex3.ONE.negate();
      Complex complex6 = complex5.ONE.pow(931.966799740817);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex6.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.exp();
      Complex complex4 = Complex.valueOf((-1.0));
      Complex complex5 = complex1.multiply((-1.0));
      Complex complex6 = complex0.I.pow((-1.0));
      Complex complex7 = complex2.I.negate();
      double double0 = complex6.I.getArgument();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex4.ONE.multiply(complex0);
      Complex complex10 = complex1.divide((-20.0));
      Complex complex11 = complex10.INF.sinh();
      try { 
        complex10.INF.nthRoot((-261));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -261
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.NaN.createComplex(0.0, 0.0);
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = Complex.valueOf(Double.NaN, 1671.6570108779483);
      int int0 = complex4.I.hashCode();
      Complex complex6 = complex4.ONE.cos();
      Complex complex7 = complex6.ONE.pow(0.4831010699272156);
      Complex complex8 = complex4.pow(2.7668218233914262E48);
      ComplexField complexField0 = complex1.getField();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex9.sqrt();
      ComplexField complexField1 = complex10.I.getField();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      double double0 = complex10.getArgument();
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = complex6.asin();
      Complex complex14 = complex2.tan();
      Complex complex15 = complex5.subtract(complex2);
      Complex complex16 = Complex.valueOf(Double.NaN, 2994.0395193);
      Object object0 = complex16.readResolve();
      boolean boolean0 = complex6.equals(object0);
      Complex complex17 = complex14.exp();
  }
}
