/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 01:52:59 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-436.629007469683));
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.I.pow(1292.2279);
      Complex complex4 = complex3.NaN.divide(complex0);
      double double0 = complex4.I.getArgument();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex0.multiply(37);
      Complex complex9 = complex8.pow(complex0);
      Complex complex10 = complex9.INF.asin();
      List<Complex> list0 = complex10.NaN.nthRoot(2482);
      Object object0 = complex10.INF.readResolve();
      ComplexField complexField0 = complex9.INF.getField();
      Complex complex11 = complex9.multiply(37);
      Complex complex12 = complex2.sinh();
      Complex complex13 = complex7.ZERO.reciprocal();
      Object object1 = complex6.readResolve();
      Complex complex14 = complex9.negate();
      Complex complex15 = complex1.conjugate();
      double double1 = complex7.abs();
      String string0 = complex11.toString();
      String string1 = complex13.toString();
      Complex complex16 = complex2.sqrt1z();
      Complex complex17 = complex13.add((-436.629007469683));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-348.19140239));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.divide((-20.0));
      double double0 = complex3.ONE.getArgument();
      Complex complex4 = complex2.createComplex(997.679005, (-1727.9205988752));
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.ZERO.asin();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex4 = complex0.subtract((-1376.0));
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.ONE.exp();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = complex4.tanh();
      Complex complex10 = complex5.subtract((-1376.0));
      String string0 = complex10.toString();
      Complex complex11 = complex5.subtract(0.0);
      Complex complex12 = complex11.INF.cos();
      Complex complex13 = complex11.I.sqrt();
      Complex complex14 = complex2.reciprocal();
      String string1 = complex14.INF.toString();
      double double0 = complex0.getImaginary();
      double double1 = complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.526183084319617E-8);
      int int0 = complex0.ZERO.hashCode();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = new Complex(743.70656, (-1654.0296));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.pow(complex2);
      double double0 = complex0.getArgument();
      Complex complex5 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.INF.cos();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex2.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex1.ZERO.cos();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.sin();
      double double0 = complex5.ZERO.abs();
      Complex complex9 = complex1.add(complex0);
      Complex complex10 = complex6.sin();
      double double1 = complex10.ZERO.abs();
      Complex complex11 = complex0.ONE.exp();
      Complex complex12 = complex10.asin();
      Complex complex13 = complex0.I.pow(0.0);
      Complex complex14 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex15 = complex14.NaN.atan();
      Complex complex16 = complex5.sin();
      Complex complex17 = complex16.ONE.log();
      Complex complex18 = complex4.multiply((-5.672261759108003E-257));
      Object object0 = complex17.ZERO.readResolve();
      Complex complex19 = complex12.tan();
      Complex complex20 = complex18.INF.exp();
      double double2 = complex20.I.abs();
      Complex complex21 = complex2.subtract(complex0);
      double double3 = complex17.getImaginary();
      Complex complex22 = complex12.exp();
      Complex complex23 = complex22.tanh();
      Complex complex24 = complex12.subtract(complex1);
      Complex complex25 = complex16.multiply(17);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.ONE.createComplex(1175.8, (-2833.487392));
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.ZERO.exp();
      int int0 = complex4.NaN.hashCode();
      double double0 = 4128.2626801;
      Complex complex5 = Complex.valueOf((-20.0), 4128.2626801);
      Complex complex6 = Complex.valueOf((-2833.487392));
      Complex complex7 = complex0.NaN.sin();
      int int1 = complex7.I.hashCode();
      double double1 = 997.45762008662;
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex7.I.divide(997.45762008662);
      List<Complex> list0 = complex8.I.nthRoot(816);
      Complex complex9 = complex0.conjugate();
      double double2 = complex9.I.abs();
      boolean boolean0 = complex9.equals(complex0);
      double double3 = complex4.abs();
      try { 
        complex9.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 998.4);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.INF.cos();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.multiply(6.283185307179586);
      Complex complex7 = complex6.ZERO.pow(0.6112717390060425);
      Complex complex8 = complex2.subtract(1732.8830179120405);
      Object object1 = complex8.ONE.readResolve();
      Complex complex9 = complex1.subtract(9.916187343252014E175);
      Complex complex10 = complex6.add(760.69423);
      Complex complex11 = complex6.acos();
      boolean boolean0 = complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-3.292458622014749E252), (-1234.0));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.valueOf(0.0, 1523.1220305);
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex2.ZERO.pow(0.0);
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex4.INF.acos();
      Complex complex8 = Complex.valueOf((-1234.0));
      Complex complex9 = complex3.ZERO.acos();
      Complex complex10 = complex4.ZERO.multiply(complex2);
      Complex complex11 = complex2.NaN.divide(complex6);
      Complex complex12 = complex11.ZERO.cos();
      Complex complex13 = complex11.ZERO.tan();
      int int0 = complex2.hashCode();
      Complex complex14 = complex0.INF.pow(complex4);
      Complex complex15 = complex2.sin();
      Complex complex16 = complex15.ZERO.atan();
      ComplexField complexField0 = complex16.INF.getField();
      Complex complex17 = complex0.pow(complex6);
      double double0 = complex6.getReal();
      double double1 = complex0.getReal();
      Complex complex18 = complex1.add(complex14);
      Complex complex19 = complex18.sqrt1z();
      Complex complex20 = complex19.I.reciprocal();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(104.6241);
      Object object0 = complex0.readResolve();
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.cos();
      boolean boolean0 = complex0.isInfinite();
      String string0 = complex1.ZERO.toString();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.ONE.createComplex((-3568.3128495427), 168.2012816482577);
      Complex complex4 = complex1.INF.cos();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex0.INF.asin();
      Complex complex7 = Complex.valueOf((-1.0));
      Complex complex8 = complex7.ONE.sinh();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex7.ZERO.asin();
      Complex complex11 = complex7.INF.cosh();
      Complex complex12 = complex5.reciprocal();
      Complex complex13 = complex10.divide((-1.0));
      Complex complex14 = complex7.ONE.sinh();
      Complex complex15 = complex6.pow(8.178019529487065E-8);
      Complex complex16 = complex15.INF.tan();
      Complex complex17 = complex13.ONE.subtract((-637.853669456));
      Complex complex18 = complex8.ZERO.divide(complex7);
      Complex complex19 = complex13.subtract((-3765.30375442));
      Complex complex20 = complex2.cos();
      Complex complex21 = complex8.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex2.INF.subtract((-2.0599801342241997E-8));
      Complex complex4 = complex1.ONE.sin();
      double double0 = (-1952.714);
      Complex complex5 = complex4.createComplex((-1952.714), (-1952.714));
      Complex complex6 = new Complex((-2.0599801342241997E-8), (-1233.620231));
      Complex complex7 = complex0.ONE.add(complex6);
      Complex complex8 = complex7.pow(complex4);
      Complex complex9 = complex7.INF.sqrt();
      Complex complex10 = complex5.cosh();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex11 = complex0.NaN.sinh();
      Complex complex12 = complex11.ZERO.conjugate();
      double double1 = complex0.getImaginary();
      Complex complex13 = Complex.valueOf(Double.NaN);
      int int0 = complex13.ONE.hashCode();
      try { 
        complex1.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3310.70190114));
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.I.multiply(455);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.ONE.add(complex2);
      Complex complex6 = complex4.negate();
      Complex complex7 = complex3.I.sin();
      Complex complex8 = complex4.ONE.sinh();
      double double0 = complex3.getArgument();
      Complex complex9 = complex5.subtract(complex6);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex10 = complex4.divide(5.278759515330048E-8);
      double double1 = complex10.ONE.abs();
      boolean boolean0 = complex0.equals(complex8);
      double double2 = complex9.getImaginary();
      Complex complex11 = complex5.cos();
      ComplexField complexField1 = complex11.I.getField();
      Complex complex12 = complex2.sin();
      Complex complex13 = complex12.I.reciprocal();
      int int0 = complex5.hashCode();
      Complex complex14 = Complex.ZERO;
      Complex complex15 = complex10.pow(complex14);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(4.4373726292703545E-243);
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.INF.add(2.864122672853628E-291);
      Complex complex4 = complex0.createComplex((-1035.06), 4.4373726292703545E-243);
      Complex complex5 = complex4.subtract(4.4373726292703545E-243);
      Complex complex6 = complex5.ONE.log();
      Complex complex7 = complex5.ONE.pow((-1035.06));
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex7.atan();
      Complex complex10 = complex6.createComplex(1235.32509, 581.21);
      List<Complex> list0 = complex9.nthRoot(4313);
      Complex complex11 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.createComplex((-716.7600173281488), (-716.7600173281488));
      Complex complex3 = new Complex((-1256.4543516279505), (-1256.4543516279505));
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex3.I.tan();
      Complex complex6 = complex4.I.cos();
      Complex complex7 = complex3.ONE.cosh();
      Complex complex8 = complex7.NaN.reciprocal();
      Complex complex9 = complex8.NaN.reciprocal();
      Complex complex10 = complex3.asin();
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex7.ONE.pow(complex8);
      Complex complex13 = complex11.ZERO.sinh();
      Complex complex14 = complex8.ONE.atan();
      Complex complex15 = complex13.INF.pow((-2581.005));
      Complex complex16 = complex10.acos();
      try { 
        complex4.nthRoot((-696));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -696
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2687.01977792));
      double double0 = complex0.abs();
      String string0 = complex0.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex1.multiply((-2597.94577));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.divide(1.1745772638457318E-45);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex2.INF.divide(1.1745772638457318E-45);
      Complex complex5 = complex0.cos();
      List<Complex> list0 = complex3.nthRoot(4358);
      boolean boolean0 = complex2.equals(complex0);
      Complex complex6 = complex1.sin();
      Object object0 = complex2.readResolve();
      Complex complex7 = complex4.divide(0.0);
      double double0 = complex3.getArgument();
      Complex complex8 = complex3.multiply(4358);
      Complex complex9 = complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.conjugate();
      String string0 = complex2.ONE.toString();
      Complex complex3 = complex0.ZERO.acos();
      Complex complex4 = complex0.multiply(2507);
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = complex2.createComplex(0.0, 2507);
      Complex complex7 = complex2.add(complex6);
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex8.I.pow(0.0);
      Complex complex10 = complex9.NaN.sqrt1z();
      Complex complex11 = complex7.atan();
      Complex complex12 = complex11.divide(0.0);
      Complex complex13 = complex1.sinh();
      boolean boolean0 = complex3.equals("(1.0, 0.0)");
      Complex complex14 = complex8.pow((-20.0));
      Object object0 = complex13.readResolve();
      boolean boolean1 = complex7.isNaN();
      Complex complex15 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.INF.asin();
      List<Complex> list0 = complex0.NaN.nthRoot(483);
      Complex complex3 = Complex.valueOf(1465.07951172, (-4884.5784));
      int int1 = complex3.hashCode();
      Complex complex4 = complex0.INF.sinh();
      List<Complex> list1 = complex4.NaN.nthRoot(1676);
      Complex complex5 = complex4.ONE.add(complex2);
      Complex complex6 = complex5.INF.subtract(complex3);
      double double0 = complex0.getArgument();
      Complex complex7 = complex0.subtract(0.7853981633974483);
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.add((-2430.613032712384));
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex1.createComplex(2840.544689149459, 2840.544689149459);
      double double0 = complex4.abs();
      Complex complex5 = complex1.createComplex(1.0, 1869.68395);
      Complex complex6 = complex5.I.multiply(complex4);
      Complex complex7 = complex5.cosh();
      boolean boolean0 = complex7.isNaN();
      Complex complex8 = complex2.multiply(0.4337083101272583);
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex3.cos();
      Complex complex10 = complex0.createComplex((-121.4390932), 0.0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1375.595, 1375.595);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex2.I.createComplex(0.0, 1375.595);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex1.pow((-2836.21));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex3.ZERO.multiply(complex1);
      Complex complex6 = complex0.multiply(0);
      Complex complex7 = complex6.cos();
      String string0 = complex4.INF.toString();
      Complex complex8 = complex7.divide(complex6);
      Complex complex9 = complex4.subtract(complex8);
      Complex complex10 = complex9.NaN.cos();
      double double0 = complex8.getArgument();
      Complex complex11 = complex0.subtract((double) 0);
      Complex complex12 = complex11.asin();
      Complex complex13 = complex0.ZERO.atan();
      Complex complex14 = complex8.multiply((-2.0821912536551675E-8));
      Complex complex15 = complex8.NaN.divide(0.0);
      Complex complex16 = complex14.NaN.pow(2337.58615246637);
      try { 
        complex4.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = Double.NaN;
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.NaN.multiply(Double.NaN);
      Complex complex4 = complex2.I.add(Double.NaN);
      Complex complex5 = Complex.valueOf(Double.NaN);
      Complex complex6 = complex4.INF.cos();
      Complex complex7 = complex6.NaN.divide(Double.NaN);
      try { 
        complex5.NaN.nthRoot((-2731));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,731
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = Double.NaN;
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.I.add(Double.NaN);
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex3.INF.cos();
      Complex complex6 = complex5.NaN.divide(Double.NaN);
      try { 
        complex4.NaN.nthRoot((-2731));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,731
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2570.56));
      double double0 = 6640.37419;
      double double1 = complex0.ONE.getArgument();
      Complex complex1 = complex0.INF.createComplex((-2294.902593), 6640.37419);
      Complex complex2 = Complex.valueOf((-2570.56), (-2570.56));
      double double2 = complex0.abs();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex2.pow(complex0);
      try { 
        complex0.nthRoot((-2285));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,285
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.ZERO.log();
      double double0 = complex0.I.abs();
      Complex complex4 = complex1.NaN.sqrt();
      Complex complex5 = complex0.I.sqrt();
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex3.log();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = Complex.valueOf((double) 1391, Double.NaN);
      Complex complex9 = complex0.divide((-1020.79));
      Complex complex10 = complex9.sqrt1z();
      Complex complex11 = complex9.NaN.add(complex0);
      Complex complex12 = Complex.valueOf((double) 1391);
      Complex complex13 = complex12.ZERO.sqrt();
      boolean boolean0 = complex2.equals(complex3);
      Complex complex14 = complex1.sqrt1z();
      double double1 = complex4.getArgument();
      Object object0 = complex2.readResolve();
      Complex complex15 = complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(859.0);
      Complex complex1 = Complex.INF;
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = Complex.ONE;
      double double0 = complex0.INF.abs();
      Complex complex4 = complex0.pow(complex3);
      List<Complex> list0 = complex4.nthRoot(679);
      Complex complex5 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2259.8149, (-5.303786078838E-10));
      Complex complex1 = Complex.valueOf((-5.303786078838E-10));
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.subtract(1026.6846094);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(267.637693411366);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.createComplex(4873.735, 0.4909018874168396);
      Complex complex3 = complex0.INF.pow(6.283185307179586);
      Complex complex4 = complex1.ZERO.negate();
      Complex complex5 = complex0.I.exp();
      double double0 = complex4.NaN.getArgument();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(1947.9282198451);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex2.ONE.multiply(complex1);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = complex0.multiply(1947.9282198451);
      Complex complex7 = Complex.valueOf(0.0, (-854.2442938425295));
      Object object0 = complex7.readResolve();
      boolean boolean0 = complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-1193.8371575632052), (-1193.8371575632052));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.ZERO.sin();
      boolean boolean0 = complex1.isNaN();
      Object object0 = new Object();
      Complex complex4 = complex2.INF.tan();
      boolean boolean1 = complex0.equals(object0);
      Complex complex5 = complex0.ZERO.subtract(complex2);
      Complex complex6 = complex5.ZERO.add(complex3);
      Complex complex7 = complex0.sinh();
      boolean boolean2 = complex0.equals(complex0);
      Complex complex8 = complex1.atan();
      Complex complex9 = complex2.ZERO.sqrt();
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex10.ZERO.divide(complex8);
      Object object1 = complex1.readResolve();
      Complex complex12 = complex4.multiply(243);
      Complex complex13 = Complex.valueOf((-1170.8730034973669), (-1193.8371575632052));
      Complex complex14 = complex0.divide(0.0);
      Complex complex15 = Complex.I;
      Complex complex16 = complex15.tan();
      Complex complex17 = complex9.add(complex16);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.ONE.sqrt();
      Complex complex4 = complex2.ZERO.add(2.0);
      Complex complex5 = new Complex(4975.662944219891);
      Complex complex6 = complex4.ZERO.pow(complex5);
      Complex complex7 = complex1.exp();
      List<Complex> list0 = complex7.nthRoot(1545);
      Complex complex8 = complex4.I.divide((-2214.840824));
      double double0 = complex1.getReal();
      double double1 = complex7.getReal();
      Complex complex9 = complex2.I.asin();
      ComplexField complexField0 = complex9.INF.getField();
      Complex complex10 = complex9.ZERO.cos();
      String string0 = complex10.toString();
      Complex complex11 = complex4.I.tanh();
      Complex complex12 = complex0.divide(2.0);
      Complex complex13 = complex12.ZERO.acos();
      boolean boolean0 = complex4.equals(complex0);
      boolean boolean1 = complex1.isNaN();
      Complex complex14 = complex3.ONE.acos();
      boolean boolean2 = complex2.equals(complex12);
      Complex complex15 = Complex.valueOf((-2397.1273998164));
      Complex complex16 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-2239.6567));
      double double0 = complex0.abs();
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.reciprocal();
      double double0 = complex3.getImaginary();
      Complex complex5 = complex0.INF.exp();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex6.asin();
      Complex complex9 = complex6.I.reciprocal();
      double double1 = complex0.getImaginary();
      Complex complex10 = complex5.add(Double.NaN);
      Complex complex11 = complex5.sqrt();
      Complex complex12 = complex11.NaN.multiply(complex3);
      Complex complex13 = complex11.asin();
      Complex complex14 = complex13.multiply(Double.NaN);
      boolean boolean0 = complex4.isNaN();
      Complex complex15 = complex9.pow(Double.NaN);
      Complex complex16 = complex0.conjugate();
      Complex complex17 = complex3.sqrt();
      double double2 = complex6.abs();
      double double3 = complex16.getImaginary();
      Complex complex18 = complex3.add(Double.NaN);
      Complex complex19 = new Complex((-2921.39));
      Complex complex20 = complex6.subtract(complex19);
      Complex complex21 = complex10.cos();
      Complex complex22 = complex21.acos();
      Complex complex23 = Complex.valueOf(Double.NaN);
      double double4 = complex20.getArgument();
      Complex complex24 = complex10.multiply(complex2);
      Complex complex25 = complex23.sinh();
      ComplexField complexField0 = complex20.getField();
      Complex complex26 = complex18.sin();
      Complex complex27 = complex2.divide(Double.NaN);
      Complex complex28 = complex26.asin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex1.INF.multiply((-864.35984));
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = Complex.valueOf((-864.35984));
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.I.subtract((-864.35984));
      Complex complex8 = complex6.NaN.multiply(complex2);
      double double0 = complex6.getImaginary();
      boolean boolean0 = complex1.equals(complex2);
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex2.I.asin();
      Complex complex10 = complex1.subtract(complex2);
      Complex complex11 = complex4.divide((-864.35984));
      Complex complex12 = complex2.exp();
      ComplexField complexField1 = complex12.ZERO.getField();
      String string0 = complex1.toString();
      Complex complex13 = complex6.acos();
      Complex complex14 = complex10.asin();
      List<Complex> list0 = complex14.INF.nthRoot(7);
      Complex complex15 = complex1.createComplex(2064.6931692819, (-1355.7677054882));
      Complex complex16 = complex7.add(2064.6931692819);
      Complex complex17 = complex2.pow((double) 7);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.subtract((-1372.8517302541));
      List<Complex> list0 = complex1.I.nthRoot(779);
      Complex complex3 = Complex.ONE;
      int int0 = complex0.ZERO.hashCode();
      String string0 = complex3.I.toString();
      Complex complex4 = complex0.pow(complex3);
      double double0 = complex4.getArgument();
      Complex complex5 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3607.4435713198886), (-3607.4435713198886));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.atan();
      Complex complex5 = Complex.valueOf(2.0);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex3.tanh();
      Complex complex10 = Complex.I;
      Complex complex11 = complex4.add(complex10);
      Complex complex12 = complex0.divide((-3607.4435713198886));
      Complex complex13 = complex11.negate();
      Complex complex14 = complex11.I.add(982.37543);
      Complex complex15 = complex11.multiply((-2551.72018));
      Complex complex16 = complex15.multiply(3847.093683359848);
      Complex complex17 = complex3.multiply(1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.INF.multiply(0.0);
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex1.NaN.subtract((-104.4789627101));
      Complex complex6 = complex0.ONE.divide(complex4);
      Complex complex7 = complex0.divide(complex1);
      double double0 = complex1.abs();
      String string0 = complex7.toString();
      Complex complex8 = complex2.pow(0.0);
      Complex complex9 = complex3.subtract(complex1);
      boolean boolean0 = complex2.isNaN();
      int int0 = complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1897.0723, 1897.0723);
      Complex complex1 = complex0.I.multiply(0.0);
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex0.negate();
      double double0 = complex3.ZERO.getArgument();
      Complex complex4 = complex3.ONE.sqrt();
      double double1 = complex4.I.abs();
      Complex complex5 = complex4.I.sqrt1z();
      double double2 = complex0.ONE.getArgument();
      Complex complex6 = complex4.NaN.cos();
      Object object0 = complex5.ZERO.readResolve();
      Complex complex7 = complex0.log();
      boolean boolean0 = complex7.isInfinite();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex8.ZERO.divide(complex5);
      Complex complex10 = complex3.conjugate();
      Complex complex11 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-132.0), (-132.0));
      Complex complex1 = complex0.ONE.tanh();
      List<Complex> list0 = complex1.NaN.nthRoot(201);
      Complex complex2 = complex0.atan();
      double double0 = complex2.getImaginary();
      Complex complex3 = complex0.add(complex2);
      String string0 = complex3.ZERO.toString();
      Complex complex4 = complex3.NaN.multiply(0);
      Complex complex5 = complex2.multiply(466);
      int int0 = complex5.hashCode();
      double double1 = complex2.abs();
      Object object0 = complex1.readResolve();
      Complex complex6 = complex5.sin();
      Complex complex7 = Complex.valueOf((double) 0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(1520.794);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = Complex.valueOf(1520.794, 20.0);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex4.add(880.63);
      ComplexField complexField0 = complex5.I.getField();
      Complex complex6 = Complex.valueOf(880.63, 20.0);
      Complex complex7 = complex2.ZERO.subtract(complex6);
      Complex complex8 = complex0.multiply(complex4);
      Complex complex9 = complex0.ZERO.pow(complex4);
      Complex complex10 = complex4.add(20.0);
      Complex complex11 = complex10.NaN.negate();
      Complex complex12 = Complex.valueOf(20.0, 2.0089026801414973E-37);
      Complex complex13 = complex12.INF.subtract(complex2);
      Complex complex14 = Complex.INF;
      Complex complex15 = complex13.INF.pow(complex14);
      Object object0 = complex13.readResolve();
      Complex complex16 = complex2.sqrt();
      Complex complex17 = complex12.sqrt();
      Complex complex18 = complex17.subtract(complex8);
      Complex complex19 = complex1.cosh();
      ComplexField complexField1 = complex2.getField();
      Complex complex20 = complex4.multiply(complex3);
      Complex complex21 = complex3.createComplex(4039.4089, 880.63);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.NaN.log();
      Complex complex5 = complex4.INF.multiply(complex1);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex7.INF.tan();
      try { 
        complex1.nthRoot((-629));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -629
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = 2.6192569732666016;
      Complex complex0 = new Complex(2.6192569732666016, 2.6192569732666016);
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.sqrt();
      try { 
        complex3.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2687.01977792));
      double double0 = complex0.abs();
      String string0 = complex0.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex1.multiply(2590.725);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex1.ZERO.createComplex(84.35138, 84.35138);
      Complex complex4 = complex3.INF.multiply(2316);
      Complex complex5 = complex1.ONE.sin();
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex6.INF.negate();
      Complex complex8 = complex0.subtract(Double.NaN);
      Complex complex9 = complex8.I.createComplex(Double.NaN, 1391.17346);
      Complex complex10 = complex9.ZERO.add(complex1);
      Complex complex11 = complex8.multiply(0);
      Complex complex12 = complex8.sqrt1z();
      Complex complex13 = Complex.valueOf(6.283185307179586, 0.0);
      int int0 = complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-599.4408422924756));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.createComplex(6.283185307179586, (-1109.05197272955));
      Complex complex3 = complex1.pow((-599.4408422924756));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3093.87852183), (-3093.87852183));
      double double0 = complex0.INF.abs();
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.multiply(459);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex3.ZERO.pow((double) 459);
      Complex complex5 = complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.createComplex((-3093.87852183), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(2075.2460857992633);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = Complex.valueOf(2075.2460857992633);
      double double0 = complex2.ZERO.getArgument();
      Complex complex3 = complex2.divide(2482.93);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.INF.add(815.3323693770044);
      Complex complex6 = complex5.I.multiply((-713.703571830192));
      Complex complex7 = complex5.ONE.log();
      boolean boolean0 = complex0.equals(complex4);
      Object object0 = complex0.readResolve();
      Complex complex8 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = new Complex((-538.60224067));
      Complex complex4 = complex2.pow(complex3);
      List<Complex> list0 = complex0.nthRoot(3254);
      double double0 = complex3.getImaginary();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex1.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(327.907099076);
      double double0 = complex0.abs();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.tanh();
      double double1 = complex1.getReal();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.INF.tan();
      int int0 = complex1.hashCode();
      Complex complex5 = complex1.divide(complex0);
      String string0 = complex3.toString();
      boolean boolean0 = complex4.isNaN();
      Complex complex6 = complex3.multiply((-853));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.subtract(0.0);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.subtract(2982.53127019);
      Complex complex2 = complex1.ZERO.cosh();
      int int0 = complex2.I.hashCode();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.ZERO.subtract(complex1);
      Complex complex5 = Complex.valueOf(2982.53127019);
      Complex complex6 = complex4.pow(complex5);
      Complex complex7 = complex0.add(complex3);
      Complex complex8 = complex1.sin();
      boolean boolean0 = complex5.isInfinite();
      Complex complex9 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex0.ZERO.createComplex((-1537.3517122805933), (-1537.3517122805933));
      Object object0 = complex5.NaN.readResolve();
      double double0 = complex0.abs();
      Complex complex7 = complex2.negate();
      Complex complex8 = complex4.sinh();
      Complex complex9 = complex4.tanh();
      Complex complex10 = complex9.ONE.sin();
      Complex complex11 = complex10.NaN.createComplex(1.0, 1.0);
      Complex complex12 = complex3.reciprocal();
      Complex complex13 = complex8.log();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = Complex.valueOf(0.0, 1.5670874118804932);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = Complex.valueOf(1.5670874118804932, 0.0);
      double double0 = complex0.abs();
      Complex complex6 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      String string0 = complex0.toString();
      List<Complex> list0 = complex0.nthRoot(1163);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.2352467822017166E37, 2.2352467822017166E37);
      Complex complex1 = complex0.INF.cos();
      int int0 = complex0.ZERO.hashCode();
      List<Complex> list0 = complex0.nthRoot(628);
      double double0 = complex0.getReal();
      Complex complex2 = new Complex(1079.22768966);
      boolean boolean0 = complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply(3209.23363989);
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = complex0.multiply(3209.23363989);
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex3.add((-1.0));
      Complex complex6 = Complex.valueOf((-558.988), (-1.0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Object object0 = complex1.I.readResolve();
      double double0 = complex0.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.sin();
      int int0 = complex1.hashCode();
      Complex complex5 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.negate();
      double double1 = complex1.getReal();
      Complex complex7 = complex1.divide(complex5);
      Complex complex8 = complex1.INF.createComplex(Double.POSITIVE_INFINITY, Double.NaN);
      Complex complex9 = complex5.ONE.add(complex3);
      boolean boolean0 = complex3.equals(complex2);
      List<Complex> list0 = complex4.nthRoot(1366);
      Complex complex10 = complex5.acos();
      Complex complex11 = complex4.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.createComplex(0.0, 0.0);
      Complex complex2 = complex1.INF.sqrt1z();
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex1.createComplex((-1490.27595346459), (-1490.27595346459));
      Complex complex7 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.INF.add((-1663.5746623));
      Complex complex3 = complex1.NaN.multiply(0.0);
      Complex complex4 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1021.89599);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1909.58671067648, (-1253.817593183026));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.add((-1121.8));
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.subtract(1909.58671067648);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.ONE.subtract(2.0);
      Complex complex3 = Complex.valueOf(2.0);
      Complex complex4 = complex1.I.reciprocal();
      Complex complex5 = complex0.add(2.0);
      Complex complex6 = complex5.add(2.0);
      Complex complex7 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-2540.19451), 227.1346974311155);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = Complex.valueOf((-191.3));
      Complex complex4 = complex2.I.subtract(complex1);
      Complex complex5 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex3.ONE.divide((-1206.56553576));
      double double0 = complex1.getReal();
      Complex complex5 = complex0.multiply((-940));
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(1412);
      Complex complex2 = complex0.divide(578.42017);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract((-2273.774514709772));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-1962.3379932203277), 542.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex1.I.subtract(0.0);
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.INF.multiply(0.0);
      Complex complex4 = complex1.ONE.sinh();
      String string0 = complex4.I.toString();
      Complex complex5 = complex4.ZERO.tanh();
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.81131861433539E-8, 3.81131861433539E-8);
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.10379679501056671);
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1729.0928333469));
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.598619958143586E-8));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.ONE.createComplex((-5.598619958143586E-8), (-5.598619958143586E-8));
      double double0 = complex1.getImaginary();
      Complex complex4 = complex0.multiply(0);
      double double1 = complex3.getImaginary();
      double double2 = complex3.ONE.getArgument();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex3.multiply((-5.598619958143586E-8));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2254.357));
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ZERO.multiply((-2254.357));
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex0.INF.reciprocal();
      Complex complex5 = complex0.ONE.asin();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.ZERO.add(complex2);
      int int0 = complex0.hashCode();
      Complex complex8 = complex6.multiply(complex4);
      Complex complex9 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.INF.atan();
      double double0 = complex2.ONE.getArgument();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.sin();
      double double1 = complex5.ZERO.getArgument();
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex1.INF.sqrt1z();
      try { 
        complex4.ZERO.nthRoot((-677));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -677
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex2.I.pow(6.151951078101721E-205);
      Complex complex5 = complex4.ONE.multiply(0);
      Complex complex6 = complex4.INF.conjugate();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex0.add(complex7);
      Complex complex9 = complex7.reciprocal();
      boolean boolean0 = complex9.isInfinite();
      Complex complex10 = complex7.tan();
      Complex complex11 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.pow(102.97336);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      double double0 = complex2.getArgument();
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex3.I.add(complex2);
      Complex complex5 = complex3.subtract(0.0);
      Complex complex6 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(163.29037641);
      Complex complex1 = complex0.cosh();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(305.8824199842258);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex1.subtract(129.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(275.3551370564753);
      Complex complex1 = new Complex(275.3551370564753, (-5102.842169641));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(391.180018564506);
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex1.ZERO.log();
      Complex complex5 = Complex.valueOf(391.180018564506);
      Complex complex6 = complex5.I.multiply(complex4);
      Complex complex7 = complex1.ZERO.multiply(706);
      Object object0 = complex0.I.readResolve();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.INF.multiply((double) 706);
      Complex complex10 = complex8.ZERO.asin();
      String string0 = complex8.toString();
      Complex complex11 = complex8.I.divide((-3083.0818010179));
      Complex complex12 = complex8.multiply(complex0);
      Complex complex13 = complex5.exp();
      Complex complex14 = complex10.sqrt();
      Complex complex15 = Complex.valueOf(5251.7956296);
      Complex complex16 = complex9.pow((double) 706);
      Complex complex17 = complex0.tan();
      Complex complex18 = Complex.valueOf(391.180018564506, 391.180018564506);
      Complex complex19 = complex4.pow(391.180018564506);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(697.0, 0.6482070684432983);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex4.NaN.sin();
      Complex complex7 = complex5.INF.sqrt1z();
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex4.ZERO.sin();
      Complex complex10 = complex1.multiply(766);
      Complex complex11 = complex10.INF.cosh();
      Complex complex12 = Complex.valueOf((-1259.472));
      Complex complex13 = complex2.reciprocal();
      Complex complex14 = complex10.subtract(697.0);
      double double0 = complex1.getArgument();
      int int0 = complex2.hashCode();
      Complex complex15 = complex2.tanh();
      Complex complex16 = complex15.multiply(9.299955259210729E-4);
      Complex complex17 = complex0.negate();
      Complex complex18 = Complex.valueOf((-2141.04759877265), (-939.550889658));
      double double1 = complex10.getArgument();
      Complex complex19 = complex11.log();
      Complex complex20 = complex16.sinh();
      Complex complex21 = complex0.NaN.multiply(0.0);
      Complex complex22 = complex15.createComplex(0.3177432417869568, 0.3177432417869568);
      Complex complex23 = complex6.cosh();
      Complex complex24 = complex17.reciprocal();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = new Complex(561.1741, (-328.9716811513501));
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex2.ONE.multiply(0.0);
      Complex complex4 = Complex.valueOf(1730.96369);
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex4.subtract(complex1);
      Complex complex7 = complex6.I.divide(complex0);
      Complex complex8 = Complex.valueOf((-101.722920625));
      Complex complex9 = complex8.NaN.atan();
      Complex complex10 = complex8.I.log();
      Complex complex11 = complex0.multiply(complex1);
      Complex complex12 = complex11.I.divide(1730.96369);
      double double0 = complex12.ZERO.getArgument();
      Complex complex13 = complex6.atan();
      Complex complex14 = Complex.valueOf((-3715.1943622), (-20.0));
      boolean boolean0 = complex13.equals(complex14);
      Complex complex15 = Complex.valueOf((-3.145816653215968E-9), (-3.145816653215968E-9));
      Object object0 = complex0.readResolve();
      double double1 = complex5.getArgument();
      Complex complex16 = complex15.sqrt();
      Complex complex17 = complex16.pow(complex11);
      Complex complex18 = complex2.multiply(complex12);
      Complex complex19 = Complex.ZERO;
      Complex complex20 = complex16.subtract(complex19);
      Complex complex21 = complex16.acos();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex((-964.0), 1097.915956913);
      Complex complex1 = complex0.I.add(1097.915956913);
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      double double0 = complex2.abs();
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex1.ZERO.pow(complex0);
      double double1 = complex1.I.abs();
      double double2 = complex0.getReal();
      Complex complex5 = complex1.ONE.subtract(complex2);
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.ONE.negate();
      Object object0 = complex3.ONE.readResolve();
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex3.INF.exp();
      Object object1 = complex8.INF.readResolve();
      Complex complex10 = complex8.I.divide(1097.915956913);
      Complex complex11 = complex6.sin();
      Complex complex12 = complex11.INF.sqrt();
      Complex complex13 = complex12.NaN.multiply(complex6);
      Object object2 = complex7.readResolve();
      Complex complex14 = complex1.subtract(1121.6799699);
      Complex complex15 = complex3.cos();
      Object object3 = new Object();
      boolean boolean0 = complex3.equals(object3);
      Complex complex16 = complex14.divide(1121.6799699);
      Complex complex17 = complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex((-1391.1193263519), (-1391.1193263519));
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.multiply((-1));
      String string0 = complex0.toString();
      Complex complex2 = complex0.add((-1391.1193263519));
      Complex complex3 = complex0.createComplex((-1391.1193263519), (-1));
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex6.NaN.tanh();
      Complex complex8 = complex6.NaN.reciprocal();
      Complex complex9 = complex5.reciprocal();
      Complex complex10 = complex2.INF.multiply(0);
      Complex complex11 = complex2.subtract(complex6);
      Complex complex12 = complex11.ZERO.add((-7.919617109348822E-8));
      Complex complex13 = complex9.multiply(complex11);
      Complex complex14 = complex13.I.tanh();
      Complex complex15 = complex0.multiply((-1391.1193263519));
      Complex complex16 = complex15.subtract(complex0);
      Complex complex17 = complex2.cos();
      Complex complex18 = complex17.ONE.multiply(complex12);
      Complex complex19 = complex1.conjugate();
      ComplexField complexField0 = complex11.getField();
      Complex complex20 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex0.I.multiply(0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.ONE.divide((double) 0);
      Complex complex6 = complex0.I.tanh();
      try { 
        complex3.NaN.nthRoot((-846));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -846
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      ComplexField complexField0 = complex1.NaN.getField();
      ComplexField complexField1 = complex0.getField();
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = Complex.valueOf((-57.4424), 1.0);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex2.ONE.tanh();
      Complex complex5 = complex3.I.exp();
      Complex complex6 = complex2.divide(1.0);
      Complex complex7 = complex2.divide(complex3);
      ComplexField complexField2 = complex7.NaN.getField();
      double double0 = complex0.abs();
      double double1 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-1791.93753008563));
      Complex complex1 = complex0.divide((-1791.93753008563));
      Complex complex2 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.sqrt1z();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex4 = complex1.I.divide(425.8364182);
      Complex complex5 = complex0.pow(175.8533);
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex1.NaN.sqrt1z();
      Complex complex8 = complex6.ZERO.multiply(1269);
      Complex complex9 = Complex.valueOf(175.8533, 175.8533);
      Complex complex10 = complex9.NaN.sinh();
      Complex complex11 = complex1.tanh();
      Complex complex12 = complex0.ONE.acos();
      Complex complex13 = complex12.multiply((double) 1269);
      double double0 = complex11.getArgument();
      Complex complex14 = complex4.reciprocal();
      Complex complex15 = complex5.ONE.pow(0.0);
      Complex complex16 = complex14.subtract(complex0);
      boolean boolean0 = complex3.isInfinite();
      List<Complex> list0 = complex6.nthRoot(1269);
      Complex complex17 = complex11.sqrt1z();
      Complex complex18 = complex7.exp();
      Complex complex19 = complex9.sinh();
      Complex complex20 = complex2.add(2.5486068725585938);
      Complex complex21 = complex6.tanh();
      Complex complex22 = complex18.add((-780.939625));
      Complex complex23 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex0.multiply(1183.4318650023556);
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex3.ONE.cos();
      int int0 = (-595);
      try { 
        complex3.INF.nthRoot((-595));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -595
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = new Complex(1.5707963267948966, 201.83683359451138);
      Complex complex3 = complex1.I.tan();
      Complex complex4 = complex0.NaN.subtract(complex3);
      Complex complex5 = Complex.valueOf(1.5707963267948966);
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.I.reciprocal();
      Complex complex8 = complex0.sinh();
      double double1 = complex8.getArgument();
      Complex complex9 = complex8.ONE.sqrt1z();
      boolean boolean0 = complex8.equals(complex1);
      Complex complex10 = complex2.multiply(complex6);
      int int1 = complex10.NaN.hashCode();
      Complex complex11 = Complex.I;
      Complex complex12 = new Complex(201.83683359451138);
      Complex complex13 = complex2.asin();
      Complex complex14 = complex9.atan();
  }
}
