/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 01:45:59 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      // Undeclared exception!
      complex1.ONE.nthRoot(52345752);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-932.5168), (-932.5168));
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.ZERO.atan();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex6 = complex4.ZERO.subtract(0.0);
      Complex complex7 = complex6.NaN.cos();
      boolean boolean0 = complex4.equals(complex1);
      double double0 = complex1.getReal();
      Complex complex8 = Complex.valueOf(0.0, (-932.5168));
      Complex complex9 = complex5.pow(0.0);
      Complex complex10 = complex8.multiply(1);
      Complex complex11 = Complex.valueOf((double) 1, 0.0);
      Object object0 = new Object();
      boolean boolean1 = complex1.equals(object0);
      boolean boolean2 = complex0.isInfinite();
      ComplexField complexField1 = complex8.getField();
      int int0 = complex4.hashCode();
      Complex complex12 = complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5271.747297));
      Complex complex1 = complex0.createComplex(20.0, (-5271.747297));
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.INF.subtract((-5271.747297));
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex0.createComplex((-5271.747297), (-5271.747297));
      double double0 = complex0.getReal();
      Complex complex6 = complex5.reciprocal();
      boolean boolean0 = complex1.isInfinite();
      Complex complex7 = complex0.tanh();
      double double1 = complex7.I.abs();
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex0.atan();
      Complex complex12 = complex10.subtract(complex1);
      Complex complex13 = complex5.sinh();
      Complex complex14 = complex13.NaN.conjugate();
      double double2 = complex13.getArgument();
      try { 
        complex12.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex3.ZERO.subtract(0.0);
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex2.divide(0.0);
      Complex complex7 = complex1.I.reciprocal();
      int int0 = complex3.I.hashCode();
      boolean boolean1 = complex6.equals(complex1);
      Complex complex8 = complex0.createComplex(0.0, 632.64308142);
      Complex complex9 = complex6.add(complex8);
      Complex complex10 = complex9.add(complex1);
      Complex complex11 = complex6.sin();
      Object object1 = complex11.ZERO.readResolve();
      Complex complex12 = complex10.add(0.0);
      Complex complex13 = complex6.createComplex(0.0, 0.0);
      Complex complex14 = complex3.log();
      Complex complex15 = complex11.createComplex(0.0, (-399.0));
      Complex complex16 = complex3.negate();
      Complex complex17 = complex10.sinh();
      Complex complex18 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(2451.51684, (-2742.3331993317215));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.add(complex1);
      boolean boolean0 = complex0.equals(complex2);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex1.INF.negate();
      Complex complex6 = complex4.multiply(395);
      boolean boolean1 = complex4.equals(complex2);
      Complex complex7 = complex3.INF.asin();
      Complex complex8 = complex7.I.asin();
      Complex complex9 = complex7.INF.add(complex3);
      Object object0 = complex6.INF.readResolve();
      Complex complex10 = Complex.valueOf((double) 395);
      Complex complex11 = complex10.NaN.add(complex6);
      Complex complex12 = complex6.ONE.asin();
      double double0 = complex3.getImaginary();
      Complex complex13 = complex7.acos();
      boolean boolean2 = complex9.equals(complex6);
      Complex complex14 = complex3.reciprocal();
      Complex complex15 = complex3.reciprocal();
      Complex complex16 = complex15.I.conjugate();
      double double1 = complex8.abs();
      Complex complex17 = Complex.valueOf((-2742.3331993317215));
      Complex complex18 = complex14.tanh();
      Complex complex19 = complex10.cosh();
      Complex complex20 = complex15.atan();
      Complex complex21 = complex8.cosh();
      Complex complex22 = complex16.multiply(1.0749409198760986);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide((-2126.3959583));
      Complex complex2 = complex1.tan();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex3 = complex0.INF.tanh();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.INF.pow(complex0);
      Object object1 = complex2.I.readResolve();
      Complex complex7 = complex3.INF.asin();
      Complex complex8 = complex7.INF.add(0.0);
      Complex complex9 = complex4.NaN.add(complex0);
      try { 
        complex0.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      double double0 = complex0.getImaginary();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex0.ZERO.add(0.0);
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex5.I.createComplex((-3246.4), (-3246.4));
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex4.negate();
      double double1 = complex0.getArgument();
      double double2 = complex4.getArgument();
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex7.ONE.sqrt();
      Complex complex11 = complex7.sin();
      Complex complex12 = complex11.conjugate();
      double double3 = complex9.getArgument();
      Complex complex13 = complex9.add(188.9272);
      Complex complex14 = complex2.negate();
      Complex complex15 = Complex.valueOf(188.9272, (-1.5707963267948966));
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex6.equals(object0);
      Complex complex16 = complex2.divide(0.0);
      Complex complex17 = complex4.reciprocal();
      Complex complex18 = complex0.cosh();
      Complex complex19 = complex2.multiply(1554);
      Complex complex20 = complex17.createComplex(2.0, 605.8712);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 2535.97);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3706.5836520587), 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ZERO.tanh();
      int int0 = complex1.hashCode();
      Complex complex4 = complex0.multiply((-2287));
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex0.pow((double) (-2287));
      Complex complex7 = complex1.exp();
      Complex complex8 = complex5.divide(complex0);
      Complex complex9 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-443.946586143), (-443.946586143));
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.I.sin();
      Complex complex5 = complex2.log();
      Complex complex6 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 1306.84);
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(1273.1835433359);
      Complex complex1 = complex0.ZERO.multiply(0);
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.ZERO.pow(complex1);
      Complex complex4 = new Complex((-2799.81734509));
      ComplexField complexField0 = complex4.getField();
      Complex complex5 = complex0.pow(complex4);
      ComplexField complexField1 = complex5.ZERO.getField();
      Complex complex6 = complex5.multiply(complex4);
      Complex complex7 = complex6.ZERO.divide(complex1);
      Complex complex8 = complex7.ONE.sqrt1z();
      Complex complex9 = complex4.tanh();
      Complex complex10 = complex9.add(258.957625345);
      Complex complex11 = complex0.sqrt1z();
      ComplexField complexField2 = complex11.INF.getField();
      double double0 = complex3.getArgument();
      Complex complex12 = complex10.conjugate();
      boolean boolean0 = complex10.equals(complex9);
      Complex complex13 = complex1.INF.acos();
      Complex complex14 = complex13.I.subtract(Double.NaN);
      String string0 = complex5.toString();
      int int0 = complex2.hashCode();
      Complex complex15 = Complex.valueOf((-2799.81734509), 258.957625345);
      Complex complex16 = complex15.negate();
      try { 
        complex9.nthRoot((-155));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -155
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1062.043514207636, 1062.043514207636);
      Complex complex2 = complex1.INF.subtract(0.0);
      Complex complex3 = complex2.ZERO.add(0.0);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.ONE.conjugate();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.multiply(1062.043514207636);
      boolean boolean0 = complex6.equals(complex0);
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex7.createComplex(1062.043514207636, 1062.043514207636);
      Complex complex9 = complex6.pow(0.0);
      Complex complex10 = complex6.add(complex7);
      Complex complex11 = complex6.divide(803.0);
      Complex complex12 = Complex.INF;
      Complex complex13 = complex6.pow(complex12);
      Complex complex14 = complex9.log();
      Complex complex15 = complex14.multiply(0.0);
      Complex complex16 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-348.5015), 0.48008447885513306);
      Complex complex1 = complex0.add(0.48008447885513306);
      Complex complex2 = complex1.add(0.48008447885513306);
      Complex complex3 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex2.ZERO.divide(complex1);
      Object object0 = complex3.I.readResolve();
      String string0 = complex3.ZERO.toString();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex4.ONE.add(complex1);
      Complex complex6 = complex1.ZERO.sin();
      Complex complex7 = complex6.ONE.divide(0.0);
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.subtract(complex0);
      Complex complex10 = complex8.negate();
      Complex complex11 = complex8.INF.tan();
      String string1 = complex11.toString();
      Complex complex12 = complex11.INF.log();
      Complex complex13 = complex10.INF.divide((-8.537194547485455E150));
      Complex complex14 = complex6.add(complex1);
      int int0 = complex14.I.hashCode();
      String string2 = complex14.NaN.toString();
      Complex complex15 = complex13.add(0.0);
      Complex complex16 = complex7.cosh();
      Complex complex17 = complex9.exp();
      Complex complex18 = complex7.multiply(915);
      Complex complex19 = complex8.sqrt1z();
      Complex complex20 = complex7.divide(384.3);
      Complex complex21 = complex14.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1301.60937625);
      Complex complex1 = complex0.divide(560.297023113811);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex1.createComplex(560.297023113811, 560.297023113811);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.subtract(1301.60937625);
      Complex complex7 = complex6.ONE.cos();
      Complex complex8 = new Complex(1301.60937625, Double.POSITIVE_INFINITY);
      Complex complex9 = complex6.I.subtract(complex8);
      Complex complex10 = complex4.sinh();
      String string0 = complex1.toString();
      Complex complex11 = complex10.I.multiply(1);
      Complex complex12 = complex5.I.multiply(1);
      Complex complex13 = complex5.multiply(20.0);
      Complex complex14 = complex13.INF.add(0.0);
      Complex complex15 = complex2.divide(complex5);
      ComplexField complexField0 = complex15.I.getField();
      List<Complex> list0 = complex10.nthRoot(2474);
      double double0 = complex13.abs();
      Complex complex16 = complex0.INF.pow(complex7);
      Complex complex17 = complex0.reciprocal();
      ComplexField complexField1 = complex17.getField();
      Complex complex18 = complex9.atan();
      Complex complex19 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.add(0.0);
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.log();
      String string0 = complex1.toString();
      Complex complex5 = complex0.ONE.sqrt1z();
      Complex complex6 = complex3.subtract(complex1);
      Complex complex7 = complex0.tan();
      ComplexField complexField0 = complex7.INF.getField();
      Complex complex8 = complex0.ZERO.subtract(0.0);
      boolean boolean0 = complex7.equals(complex1);
      Complex complex9 = complex3.acos();
      Complex complex10 = complex4.tanh();
      int int0 = complex4.hashCode();
      Complex complex11 = complex4.NaN.tanh();
      Complex complex12 = complex4.cosh();
      Complex complex13 = complex1.multiply((-1.1288398461391523E-295));
      Complex complex14 = complex7.subtract(complex10);
      Complex complex15 = complex14.cosh();
      Complex complex16 = complex14.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.multiply((-1299));
      Complex complex3 = complex2.createComplex((-8.009548754642203E231), (-8.009548754642203E231));
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.NaN.divide(complex4);
      Complex complex6 = complex5.ONE.add(complex3);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex2.divide((-1749.2));
      Complex complex9 = complex3.conjugate();
      boolean boolean0 = complex9.isNaN();
      Complex complex10 = complex7.divide(complex6);
      boolean boolean1 = complex0.equals(complex4);
      double double0 = complex8.abs();
      Complex complex11 = complex7.asin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-1.0258469865953145E-7), 2113.1504828708994);
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex1.INF.pow(complex0);
      Complex complex4 = new Complex(2113.1504828708994, 1.0);
      Complex complex5 = complex3.NaN.pow(complex4);
      Complex complex6 = complex0.INF.acos();
      Complex complex7 = complex0.ONE.atan();
      Complex complex8 = complex7.INF.multiply(complex0);
      String string0 = complex0.toString();
      Complex complex9 = Complex.valueOf((-1.0258469865953145E-7), 2113.1504828708994);
      Complex complex10 = complex6.NaN.reciprocal();
      Complex complex11 = complex9.INF.sqrt();
      Complex complex12 = complex1.INF.multiply(complex10);
      Complex complex13 = complex0.add(complex1);
      Complex complex14 = complex13.INF.sin();
      Complex complex15 = complex14.INF.divide(complex3);
      Complex complex16 = Complex.valueOf(1328.17622, 1855.255057021171);
      int int0 = complex6.hashCode();
      Complex complex17 = complex16.exp();
      Complex complex18 = complex14.acos();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(3984.4529406);
      Complex complex3 = complex2.ZERO.add(3984.4529406);
      Complex complex4 = complex2.I.sqrt1z();
      Complex complex5 = complex2.sin();
      Complex complex6 = Complex.valueOf(586.0, 586.0);
      Complex complex7 = complex6.ONE.tanh();
      Complex complex8 = complex7.ZERO.pow(complex1);
      int int0 = complex6.ONE.hashCode();
      int int1 = complex1.hashCode();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex6.log();
      Complex complex11 = complex10.I.negate();
      Complex complex12 = complex1.sqrt1z();
      Complex complex13 = complex11.reciprocal();
      Complex complex14 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex1.ONE.divide(complex2);
      List<Complex> list0 = complex0.I.nthRoot(333);
      Complex complex4 = complex0.multiply(3784);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex1.pow((-1.3824992526093461E-8));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-414.46));
      Complex complex1 = complex0.divide((-414.46));
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.multiply(2.218596935272217);
      Complex complex3 = complex2.ONE.multiply(1);
      Complex complex4 = complex2.I.pow((-414.46));
      String string0 = complex0.I.toString();
      Complex complex5 = complex0.log();
      boolean boolean0 = complex0.equals(complex5);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex7.NaN.divide(complex1);
      ComplexField complexField0 = complex7.INF.getField();
      int int1 = complex7.hashCode();
      Complex complex9 = complex5.tan();
      Complex complex10 = complex7.cos();
      Complex complex11 = complex10.ONE.reciprocal();
      Complex complex12 = complex5.pow(4.18);
      Complex complex13 = complex3.acos();
      Complex complex14 = complex12.multiply(complex3);
      Complex complex15 = complex10.divide(781.5107763);
      List<Complex> list0 = complex6.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-2141.9745735), (-1.0));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.INF.pow(complex2);
      Complex complex4 = complex0.divide(2889.1908573346554);
      int int0 = complex0.hashCode();
      List<Complex> list0 = complex4.nthRoot(1);
      Complex complex5 = complex1.divide((-293.7));
      Complex complex6 = complex2.asin();
      Complex complex7 = complex4.ZERO.exp();
      Complex complex8 = complex6.INF.subtract(complex0);
      Complex complex9 = complex4.ONE.cos();
      Complex complex10 = complex9.multiply(complex8);
      Complex complex11 = complex9.ONE.exp();
      double double0 = complex2.ONE.abs();
      Complex complex12 = complex6.pow(0.0);
      Complex complex13 = complex12.NaN.reciprocal();
      boolean boolean0 = complex6.equals(complex4);
      Complex complex14 = complex4.cos();
      Complex complex15 = complex11.negate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = Complex.valueOf(1.9151693415969248E-174);
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex0.I.pow(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex3.ONE.divide(1.9151693415969248E-174);
      Complex complex5 = complex4.I.multiply(841);
      Complex complex6 = complex1.NaN.conjugate();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex5.ONE.asin();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex10.INF.multiply(45.639410129);
      Complex complex12 = complex10.ONE.sqrt();
      Complex complex13 = Complex.valueOf(5881.60303, 5881.60303);
      double double0 = complex4.NaN.abs();
      int int0 = complex2.hashCode();
      Complex complex14 = complex4.sqrt();
      Complex complex15 = complex3.cos();
      Complex complex16 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex3.INF.tanh();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt();
      double double0 = complex0.ONE.getArgument();
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex0.NaN.subtract(0.0);
      String string0 = complex0.toString();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.I.add(complex1);
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = Complex.valueOf(6.283185307179586, 0.24554696679115295);
      Complex complex8 = complex0.multiply(0.0);
      Complex complex9 = complex8.I.pow(0.0);
      Complex complex10 = complex0.add(0.0);
      Complex complex11 = complex10.ZERO.negate();
      Complex complex12 = complex8.sqrt();
      Complex complex13 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1887.46911045709, 7.667647949477605E-53);
      List<Complex> list0 = complex0.I.nthRoot(227);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf(1887.46911045709, (double) 227);
      Complex complex4 = complex2.ONE.add((-1711.060825));
      List<Complex> list1 = complex3.ZERO.nthRoot(227);
      Object object0 = complex2.ZERO.readResolve();
      Complex complex5 = complex1.log();
      Complex complex6 = Complex.valueOf(1887.46911045709);
      double double0 = complex5.getArgument();
      Complex complex7 = complex0.createComplex(Double.NaN, (-821.8));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-1058.0));
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      double double0 = 938.794;
      Complex complex2 = complex1.NaN.createComplex(938.794, (-3477.72));
      Object object0 = complex1.ZERO.readResolve();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex5.INF.divide((-835.2));
      Complex complex7 = complex5.ONE.cos();
      Complex complex8 = complex7.INF.multiply(17);
      Complex complex9 = complex4.cos();
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex10.sin();
      double double1 = complex10.ZERO.getArgument();
      Complex complex12 = complex10.INF.exp();
      List<Complex> list0 = complex9.nthRoot(1);
      Complex complex13 = complex3.asin();
      try { 
        complex13.I.nthRoot((-995));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -995
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.subtract(complex1);
      double double0 = complex0.abs();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.INF.acos();
      Complex complex5 = complex3.ONE.add(5912.8163196054);
      double double1 = complex2.NaN.abs();
      List<Complex> list0 = complex4.I.nthRoot(1);
      Complex complex6 = complex3.ONE.reciprocal();
      Complex complex7 = complex6.ONE.sin();
      double double2 = complex6.ONE.abs();
      Complex complex8 = complex2.I.cos();
      Complex complex9 = complex8.tan();
      Complex complex10 = complex3.pow((-539.087));
      Complex complex11 = complex2.negate();
      Complex complex12 = complex1.log();
      Complex complex13 = complex12.ONE.atan();
      ComplexField complexField0 = complex4.getField();
      double double3 = complex12.getReal();
      Complex complex14 = complex6.add(Double.NaN);
      Complex complex15 = complex0.sinh();
      Complex complex16 = complex1.conjugate();
      double double4 = complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3468.8498), (-3468.8498));
      Complex complex1 = complex0.add(2886.0);
      Complex complex2 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2167.20834));
      Complex complex1 = complex0.subtract((-2167.20834));
      Complex complex2 = complex1.I.add(complex0);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = Complex.valueOf((-2167.20834), (-2167.20834));
      Complex complex4 = complex3.ONE.tanh();
      double double0 = complex4.I.abs();
      double double1 = complex1.abs();
      double double2 = complex0.ONE.abs();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex3.conjugate();
      Object object1 = complex1.readResolve();
      boolean boolean1 = complex0.equals(complex6);
      Complex complex7 = Complex.valueOf(1714.9227);
      List<Complex> list0 = complex7.ONE.nthRoot(71);
      double double3 = complex4.getReal();
      Complex complex8 = complex0.atan();
      Complex complex9 = Complex.valueOf((-3036.4));
      double double4 = complex1.getImaginary();
      boolean boolean2 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-1526.67977), (-1526.67977));
      Complex complex1 = complex0.ONE.multiply((-1526.67977));
      Complex complex2 = complex1.I.subtract((-1526.67977));
      Complex complex3 = complex0.ZERO.cos();
      Object object0 = complex0.readResolve();
      int int0 = complex2.hashCode();
      Complex complex4 = complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 500.82);
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.INF.subtract(1103.1508);
      Complex complex4 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.add((-2655.23));
      Complex complex2 = complex1.NaN.add((-2655.23));
      Complex complex3 = complex0.atan();
      double double0 = complex3.abs();
      ComplexField complexField0 = complex3.I.getField();
      Complex complex4 = complex1.divide(0.0);
      Complex complex5 = complex1.ONE.tanh();
      double double1 = complex4.abs();
      Complex complex6 = complex0.divide((-2655.23));
      ComplexField complexField1 = complex4.INF.getField();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex6.multiply(complex7);
      Complex complex9 = complex4.pow(Double.NaN);
      Complex complex10 = complex7.cos();
      Complex complex11 = complex3.acos();
      Complex complex12 = complex10.negate();
      ComplexField complexField2 = complex10.getField();
      String string0 = complex9.toString();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(6.353384093665193E-135, (-771.81643));
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ONE.multiply((-771.81643));
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ZERO.createComplex(468.0, 20.0);
      Complex complex6 = complex4.negate();
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = complex0.add(0.0);
      Complex complex9 = complex8.tan();
      double double0 = complex8.getReal();
      Complex complex10 = complex0.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.INF.divide(complex5);
      double double1 = complex2.getArgument();
      double double2 = complex0.INF.getArgument();
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex7 = complex1.log();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex0.ONE.add(complex2);
      Complex complex10 = complex8.sin();
      Complex complex11 = complex10.ZERO.conjugate();
      boolean boolean1 = complex7.equals(complex8);
      Complex complex12 = Complex.valueOf(0.7853981633974483);
      boolean boolean2 = complex2.isNaN();
      Complex complex13 = complex7.sqrt();
      Object object0 = complex12.readResolve();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-637.9380380084));
      Complex complex1 = complex0.conjugate();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex3.INF.subtract(complex2);
      Complex complex5 = complex2.NaN.tan();
      boolean boolean0 = complex2.isNaN();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex6.ZERO.atan();
      Complex complex8 = complex7.pow(complex3);
      Complex complex9 = complex2.subtract((-118.9515));
      Complex complex10 = complex9.I.atan();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY, 3946.90812511);
      Complex complex12 = Complex.valueOf((-2272.16505042), (-2272.16505042));
      Complex complex13 = complex12.NaN.asin();
      Complex complex14 = complex13.ZERO.sinh();
      boolean boolean1 = complex5.isInfinite();
      Complex complex15 = complex1.tanh();
      Complex complex16 = complex15.I.sqrt();
      double double0 = complex4.getReal();
      Complex complex17 = complex6.atan();
      Complex complex18 = complex12.acos();
      Complex complex19 = complex12.multiply(3.7884955399150257E65);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.INF.add(2301.539);
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex0.divide(3.817173955083142E-32);
      Complex complex5 = complex0.log();
      Complex complex6 = Complex.valueOf(3.817173955083142E-32, 3.817173955083142E-32);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex6.atan();
      Complex complex10 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(3.817173955083142E-32);
      Complex complex2 = Complex.valueOf(3.817173955083142E-32, 3.817173955083142E-32);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(557.34347, 557.34347);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.multiply(1);
      Complex complex5 = complex3.asin();
      Complex complex6 = complex5.I.subtract(complex3);
      Complex complex7 = complex1.multiply(0.0);
      Complex complex8 = complex3.I.multiply(complex4);
      Complex complex9 = complex3.multiply(0.0);
      Complex complex10 = complex1.multiply(557.34347);
      Complex complex11 = complex2.add(complex7);
      Complex complex12 = complex11.I.sqrt1z();
      Complex complex13 = complex7.divide(complex2);
      Complex complex14 = Complex.valueOf((double) 1, 3292.148797);
      Complex complex15 = complex5.pow(557.34347);
      Object object0 = complex4.readResolve();
      Complex complex16 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-558.406879), (-558.406879));
      Complex complex1 = complex0.createComplex(0.0, (-1965.465745375779));
      Complex complex2 = complex1.NaN.negate();
      int int0 = complex2.INF.hashCode();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex0.add(1025.8);
      Complex complex5 = complex2.INF.divide(complex1);
      Complex complex6 = complex2.divide((-1366.381));
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex0.INF.cos();
      Complex complex9 = complex2.negate();
      Complex complex10 = complex6.cos();
      Complex complex11 = complex6.conjugate();
      Complex complex12 = Complex.valueOf((-1366.381), (-558.406879));
      Complex complex13 = complex12.NaN.subtract(0.0);
      Complex complex14 = complex5.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(2.0240049362182617);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.NaN.createComplex((-691.6894257), 2.0240049362182617);
      double double0 = complex0.getImaginary();
      double double1 = complex0.getImaginary();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex2.subtract(2013.467809988636);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1370.72665092), Double.NaN);
      String string0 = complex0.INF.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.valueOf(2.0881457123894216E-8, Double.NaN);
      Complex complex2 = complex0.multiply(complex1);
      String string1 = complex0.toString();
      Complex complex3 = complex2.ZERO.multiply(Double.NaN);
      Complex complex4 = complex2.ONE.divide(1058.81175280809);
      Complex complex5 = complex0.I.add(1058.81175280809);
      Complex complex6 = complex0.NaN.exp();
      try { 
        complex1.nthRoot((-1897));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,897
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.log();
      List<Complex> list0 = complex2.ZERO.nthRoot(1);
      Complex complex4 = Complex.valueOf((-20.0), (-20.0));
      Complex complex5 = complex2.I.conjugate();
      Complex complex6 = Complex.valueOf((-1.0), 0.0);
      Complex complex7 = complex6.INF.subtract(0.0);
      String string0 = complex6.toString();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(2560.831906724, (-2326.70988550751));
      Complex complex1 = complex0.ZERO.log();
      int int0 = complex1.ZERO.hashCode();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex3.sqrt();
      boolean boolean0 = complex5.isInfinite();
      Complex complex6 = complex5.createComplex(0.0, 0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex5.acos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.conjugate();
      ComplexField complexField0 = complex0.getField();
      String string0 = complex1.toString();
      Complex complex2 = Complex.valueOf((-1655.175582054022), (-1.0));
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.INF.subtract(complex3);
      boolean boolean0 = complex0.equals(complexField0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.atan();
      double double0 = complex1.getReal();
      Complex complex4 = complex3.ZERO.cos();
      boolean boolean0 = complex3.isNaN();
      Object object0 = complex3.readResolve();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.divide((-1.8997462070389404E-8));
      String string0 = complex0.I.toString();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex0.I.cosh();
      Complex complex5 = complex0.ZERO.multiply(4403.77122);
      Complex complex6 = complex0.exp();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex6.createComplex(249.9, (-1.8997462070389404E-8));
      Complex complex9 = complex8.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1038.549);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex3.subtract(complex0);
      ComplexField complexField0 = complex0.ONE.getField();
      String string0 = complex0.I.toString();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.divide(complex4);
      Complex complex8 = complex6.log();
      Complex complex9 = complex8.NaN.cosh();
      Complex complex10 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(927.42537653928);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.I.pow(complex0);
      double double0 = complex0.abs();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.multiply(935);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex1.add(927.42537653928);
      Complex complex7 = complex6.INF.asin();
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex5.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.multiply(1);
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.sin();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex1.ONE.acos();
      Complex complex5 = complex3.ZERO.multiply((-97));
      Complex complex6 = complex2.INF.pow(complex1);
      double double0 = complex5.I.abs();
      double double1 = complex0.getReal();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex8.I.reciprocal();
      Complex complex10 = complex2.pow(complex0);
      boolean boolean1 = complex0.equals(complex5);
      Complex complex11 = complex2.reciprocal();
      Complex complex12 = complex11.divide(1.0);
      Complex complex13 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.createComplex(0.0, 0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex2.NaN.sqrt1z();
      Complex complex5 = complex4.ONE.sqrt1z();
      double double0 = complex1.getArgument();
      Complex complex6 = complex2.INF.negate();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex3.asin();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(172.33691972942);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.divide(172.33691972942);
      Complex complex3 = complex1.ONE.log();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex0.reciprocal();
      String string0 = complex2.toString();
      Complex complex5 = complex0.add(0.0);
      Complex complex6 = complex5.atan();
      Complex complex7 = Complex.valueOf(0.0);
      boolean boolean1 = complex0.isNaN();
      boolean boolean2 = complex3.equals("p$8JHs&");
      Complex complex8 = Complex.valueOf(51.04671928, (-4006.560487462));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.divide(0.0);
      Complex complex5 = complex3.NaN.sqrt1z();
      Complex complex6 = complex0.createComplex(814.64888, (-2837.9103853618267));
      Complex complex7 = complex0.asin();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = Complex.valueOf(0.0, (-2837.9103853618267));
      String string0 = complex8.toString();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.multiply(complex1);
      String string0 = complex0.toString();
      String string1 = complex2.toString();
      Complex complex3 = complex1.multiply(20.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4921.1758807840515, 1.8682458400726318);
      Complex complex1 = complex0.reciprocal();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(598.592166207, 598.592166207);
      Complex complex1 = new Complex(935.59315, 598.592166207);
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = Complex.valueOf(598.592166207, (-1491.14793));
      Complex complex4 = Complex.valueOf(935.59315);
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex1.ZERO.add(complex6);
      Complex complex8 = complex0.multiply(complex1);
      ComplexField complexField0 = complex8.I.getField();
      Complex complex9 = complex8.multiply((-736));
      Complex complex10 = complex9.ONE.exp();
      Complex complex11 = complex8.atan();
      Complex complex12 = complex7.INF.cos();
      Complex complex13 = complex8.divide(Double.NaN);
      Complex complex14 = complex13.exp();
      double double0 = complex7.getReal();
      double double1 = complex11.getArgument();
      Complex complex15 = complex0.log();
      Complex complex16 = complex12.createComplex((-317.8025417018629), (-8.629042891789934E-9));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.ONE.atan();
      Complex complex4 = complex3.exp();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(0.5540198087692261, 0.0);
      Complex complex2 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-207.87348022));
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.4826958838142734E144));
      Complex complex1 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex2 = complex0.ONE.divide((-5.4826958838142734E144));
      Complex complex3 = complex0.asin();
      Complex complex4 = Complex.valueOf((-5.4826958838142734E144), 0.0);
      Complex complex5 = complex2.I.multiply(complex3);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex6 = complex2.ZERO.pow(0.0);
      Complex complex7 = complex0.I.cos();
      Complex complex8 = complex2.acos();
      Complex complex9 = complex0.createComplex((-5.4826958838142734E144), (-779.894917));
      Complex complex10 = complex9.atan();
      double double0 = complex10.ZERO.getArgument();
      Complex complex11 = complex6.log();
      Complex complex12 = complex3.divide(0.0);
      try { 
        complex11.nthRoot((-794));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -794
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.NaN.reciprocal();
      Complex complex4 = complex3.NaN.conjugate();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex4.multiply(complex2);
      Complex complex7 = complex0.acos();
      Object object0 = complex7.readResolve();
      Complex complex8 = complex2.add(complex7);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.NaN.subtract((-685.70557));
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.pow((-20.0));
      double double0 = complex3.abs();
      Complex complex4 = Complex.valueOf(1895.888336921248, (-1687.7));
      Complex complex5 = complex0.divide((-685.70557));
      Complex complex6 = complex5.multiply(1777);
      List<Complex> list0 = complex1.nthRoot(1777);
      Complex complex7 = complex2.add((double) 1777);
      Complex complex8 = complex7.I.asin();
      Complex complex9 = complex7.multiply(1777);
      List<Complex> list1 = complex9.nthRoot(1809);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.NaN.acos();
      double double0 = complex0.getArgument();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.multiply(1126.908945149);
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      double double0 = complex0.getReal();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(1);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.tan();
      double double0 = complex3.NaN.abs();
      String string0 = complex2.toString();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = complex0.multiply(703.1437228292128);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-219.57669527286316), (-219.57669527286316));
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.ONE.cos();
      double double0 = complex0.abs();
      Complex complex3 = complex0.ONE.multiply((-219.57669527286316));
      Complex complex4 = complex3.NaN.multiply((-219.57669527286316));
      Complex complex5 = complex0.exp();
      double double1 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex1.ONE.multiply(complex0);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex1.NaN.subtract(0.0);
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.divide(3522.873543);
      Complex complex3 = complex0.divide(1.0655345916748047);
      Complex complex4 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex3.NaN.atan();
      double double0 = complex4.ZERO.abs();
      Complex complex5 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1758.9492), (-1758.9492));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex4.ONE.asin();
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex8.INF.reciprocal();
      boolean boolean0 = complex1.isInfinite();
      Complex complex10 = complex1.I.multiply(603);
      Complex complex11 = complex3.ZERO.cosh();
      Complex complex12 = complex11.INF.divide(complex5);
      Complex complex13 = complex11.NaN.cosh();
      Complex complex14 = complex3.pow(0.008851538069058584);
      Complex complex15 = complex1.reciprocal();
      String string0 = complex11.NaN.toString();
      Complex complex16 = complex3.add((-2730.897012));
      double double0 = complex11.abs();
      Complex complex17 = complex0.subtract(complex14);
      Complex complex18 = complex14.exp();
      double double1 = complex18.NaN.getArgument();
      Complex complex19 = complex16.sinh();
      double double2 = complex19.INF.abs();
      Complex complex20 = complex3.exp();
      String string1 = complex7.toString();
      Complex complex21 = complex1.add(complex6);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1768.0);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.NaN.asin();
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.ZERO.sinh();
      double double1 = complex0.ZERO.abs();
      List<Complex> list0 = complex2.ONE.nthRoot(636);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.add((-259.271353439));
      Complex complex6 = complex3.asin();
      List<Complex> list1 = complex0.nthRoot(7);
      Complex complex7 = complex5.pow(complex2);
      Complex complex8 = complex7.I.multiply(complex1);
      Complex complex9 = complex7.acos();
      Complex complex10 = complex2.tan();
      Complex complex11 = complex2.subtract(complex3);
      Complex complex12 = complex11.add((-259.271353439));
      double double2 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.INF.add(complex0);
      double double1 = complex2.abs();
      Complex complex4 = complex2.pow(complex3);
      double double2 = complex0.getImaginary();
      double double3 = complex3.getArgument();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 281.3141262182653);
      double double0 = complex0.INF.getArgument();
      Complex complex1 = Complex.valueOf(0.0, 2403.8036);
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.NaN.sqrt1z();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex0.log();
      Complex complex8 = complex5.add(complex1);
      Complex complex9 = complex8.add(complex3);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.INF.tan();
      Complex complex4 = complex1.ZERO.log();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = new Complex((-2168.05943056115), (-4.9489938500591624E216));
      Complex complex8 = complex5.I.add(complex7);
      Complex complex9 = complex8.I.cos();
      Complex complex10 = complex1.multiply(1);
      Complex complex11 = complex1.NaN.conjugate();
      Complex complex12 = complex1.sinh();
      Complex complex13 = complex0.pow(complex1);
      Complex complex14 = complex13.INF.multiply(2222);
      Complex complex15 = complex13.ZERO.cosh();
      Complex complex16 = complex13.I.conjugate();
      double double0 = complex16.NaN.getArgument();
      double double1 = complex3.getImaginary();
      double double2 = complex12.getReal();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex17 = complex7.NaN.createComplex(1.0, 4.110787043867721E-160);
      Complex complex18 = Complex.valueOf(1100.3);
      Complex complex19 = complex0.conjugate();
      Complex complex20 = complex19.ONE.asin();
      int int0 = complex9.hashCode();
      Complex complex21 = complex12.log();
      Complex complex22 = complex12.conjugate();
      Complex complex23 = complex1.multiply(complex15);
      Complex complex24 = complex12.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((double) (-2754));
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex1.I.add(complex0);
      try { 
        complex0.NaN.nthRoot((-2754));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,754
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = (-103.61084335);
      Complex complex1 = new Complex((-103.61084335));
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.INF.tanh();
      Complex complex6 = complex0.INF.divide(complex4);
      Complex complex7 = complex0.createComplex(0.0, 0.0);
      Complex complex8 = complex7.ONE.add(0.0);
      List<Complex> list0 = complex8.INF.nthRoot(1035);
      int int0 = complex8.ONE.hashCode();
      Complex complex9 = complex7.INF.sqrt();
      ComplexField complexField0 = complex4.getField();
      double double1 = complex0.abs();
      Complex complex10 = complex7.I.multiply(0.0);
      Complex complex11 = complex4.I.negate();
      double double2 = 1126.5682;
      Complex complex12 = complex7.I.sqrt1z();
      Complex complex13 = complex7.ZERO.sqrt();
      ComplexField complexField1 = complex0.getField();
      Complex complex14 = new Complex(0.0, 1126.5682);
      Complex complex15 = complex14.ZERO.sinh();
      double double3 = complex15.ZERO.abs();
      Object object0 = complex14.readResolve();
      boolean boolean0 = complex7.equals(object0);
      try { 
        complex4.nthRoot((-1237));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,237
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.INF.pow(6.283185307179586);
      Complex complex7 = complex5.tan();
      Complex complex8 = complex7.NaN.sinh();
      Complex complex9 = complex8.ZERO.cos();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex10.ZERO.acos();
      Complex complex12 = Complex.valueOf(0.0, 6.283185307179586);
      Complex complex13 = complex8.ZERO.subtract(1.0);
      Complex complex14 = complex1.asin();
      Complex complex15 = complex10.createComplex(20.0, 20.0);
      Complex complex16 = complex15.log();
      Complex complex17 = complex8.createComplex(0.0, 6.283185307179586);
      Complex complex18 = complex15.I.sqrt1z();
      Complex complex19 = complex11.pow(1349.358255875719);
      Complex complex20 = complex19.NaN.add(complex5);
      Complex complex21 = complex17.ZERO.atan();
      Complex complex22 = complex19.ONE.sqrt();
      String string0 = complex2.toString();
      Complex complex23 = complex5.subtract(complex15);
      Complex complex24 = complex8.add(complex22);
      Complex complex25 = complex7.log();
      Complex complex26 = complex16.multiply(complex7);
      Object object0 = complex2.readResolve();
      Object object1 = complex17.readResolve();
      boolean boolean0 = complex25.isNaN();
      double double0 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.acos();
      double double0 = complex0.INF.abs();
      Complex complex2 = complex0.ZERO.add(6.283185307179586);
      Complex complex3 = complex1.NaN.pow(6.283185307179586);
      Complex complex4 = complex0.ONE.cos();
      Complex complex5 = complex3.I.sqrt1z();
      Complex complex6 = complex0.I.tan();
      Complex complex7 = complex0.INF.add(6.283185307179586);
      double double1 = complex0.getImaginary();
      Complex complex8 = complex1.INF.multiply(1112);
      Complex complex9 = complex1.tan();
      Complex complex10 = complex9.NaN.tanh();
      Complex complex11 = complex0.ONE.cosh();
      Complex complex12 = complex10.divide(complex1);
      Complex complex13 = complex10.NaN.add(complex6);
      Complex complex14 = complex5.subtract(1.8544977697201776E-7);
      Complex complex15 = complex0.asin();
      Complex complex16 = complex15.INF.tan();
      Complex complex17 = complex15.INF.tanh();
      Complex complex18 = complex17.NaN.add(complex8);
      int int0 = complex5.INF.hashCode();
      boolean boolean0 = complex2.equals(complex5);
      Complex complex19 = complex5.pow(complex10);
      Complex complex20 = complex5.negate();
      Complex complex21 = complex20.ZERO.add(complex19);
      Complex complex22 = complex2.acos();
      Object object0 = complex20.I.readResolve();
      double double2 = complex4.abs();
      double double3 = complex20.getArgument();
      Complex complex23 = complex21.pow((-2267.08774342));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.I.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.INF.multiply(Double.POSITIVE_INFINITY);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex2.divide(1385.86696);
      Complex complex6 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.ZERO.negate();
      Complex complex8 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex9 = complex3.multiply(0.0);
      Complex complex10 = Complex.valueOf((-45.1727883883));
      Complex complex11 = complex1.conjugate();
      Complex complex12 = complex4.multiply(complex11);
      Complex complex13 = complex7.sin();
      List<Complex> list0 = complex12.nthRoot(1);
  }
}
