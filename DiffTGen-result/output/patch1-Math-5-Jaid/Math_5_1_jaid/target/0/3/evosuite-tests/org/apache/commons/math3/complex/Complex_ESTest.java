/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 01:42:30 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-1685.6116388), (-1685.6116388));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.reciprocal();
      double double0 = complex1.abs();
      Complex complex5 = complex3.add(complex1);
      Complex complex6 = complex0.divide((-1.8908603201210102E262));
      Complex complex7 = complex3.ZERO.atan();
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex3.cos();
      List<Complex> list0 = complex0.nthRoot(907);
      Complex complex10 = Complex.valueOf((-1569.4381909358124), (-1569.4381909358124));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1297.0, 399.4412578179);
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex0.readResolve();
      ComplexField complexField1 = complex0.getField();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.add((-255.2));
      Complex complex3 = complex1.I.multiply(complex2);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.I.multiply(2211.1274353794);
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex4.exp();
      // Undeclared exception!
      complex2.nthRoot(325732);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt1z();
      double double0 = complex1.abs();
      double double1 = complex0.getReal();
      Complex complex2 = complex0.NaN.negate();
      ComplexField complexField0 = complex0.getField();
      double double2 = complex0.abs();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex1.INF.multiply(0);
      Complex complex5 = complex3.NaN.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = complex1.divide(2.4889182184335247E-198);
      double double3 = complex4.getImaginary();
      Complex complex8 = complex4.cosh();
      double double4 = complex8.getImaginary();
      Complex complex9 = complex8.divide((-2889.19414));
      Complex complex10 = complex5.negate();
      Complex complex11 = complex10.sqrt();
      Complex complex12 = complex4.multiply(0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(1235.535);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.tan();
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex1.multiply(924);
      Complex complex4 = complex3.ZERO.cosh();
      List<Complex> list0 = complex2.NaN.nthRoot(924);
      double double0 = complex0.abs();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex0.ZERO.sinh();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex3.divide(1235.535);
      Complex complex9 = complex7.add(1235.535);
      Complex complex10 = Complex.valueOf((double) 924, (double) 924);
      boolean boolean0 = complex8.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(619.89372, 20.0);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.atan();
      Complex complex6 = complex3.negate();
      boolean boolean0 = complex2.isNaN();
      Complex complex7 = complex0.ONE.sqrt();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex3.INF.multiply(complex1);
      Complex complex10 = complex8.ZERO.pow((-250.4315));
      int int0 = complex0.I.hashCode();
      Complex complex11 = complex6.multiply(2654);
      Complex complex12 = complex1.pow(20.0);
      Complex complex13 = complex12.NaN.createComplex((-1674.4937276789), (-931.1011890191805));
      Complex complex14 = complex8.negate();
      double double0 = complex3.abs();
      Complex complex15 = complex8.reciprocal();
      Complex complex16 = complex10.sqrt1z();
      Complex complex17 = complex3.exp();
      Complex complex18 = complex3.atan();
      double double1 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.ZERO.subtract(0.0);
      Complex complex5 = complex4.ONE.subtract(complex2);
      Complex complex6 = complex0.INF.pow(complex2);
      Complex complex7 = complex2.INF.divide(complex3);
      double double0 = (-105.3838066371);
      Complex complex8 = complex2.cosh();
      Complex complex9 = Complex.valueOf((-105.3838066371), 145.86645825108);
      Complex complex10 = complex0.ONE.add(complex9);
      int int0 = (-2891);
      try { 
        complex7.I.nthRoot((-2891));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,891
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2657.9701165), (-2315.0));
      Complex complex1 = complex0.ONE.subtract(1.3581426848077408E75);
      Complex complex2 = complex1.NaN.sinh();
      int int0 = complex2.NaN.hashCode();
      int int1 = complex0.ZERO.hashCode();
      Complex complex3 = complex0.ONE.pow(complex1);
      Complex complex4 = complex3.ZERO.divide(complex0);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex0.divide(1.3581426848077408E75);
      Complex complex9 = Complex.ONE;
      String string0 = complex6.INF.toString();
      boolean boolean0 = complex5.equals(complex9);
      Complex complex10 = complex6.INF.add(0.0);
      Complex complex11 = complex10.ONE.pow(complex6);
      int int2 = complex5.hashCode();
      double double0 = complex6.getArgument();
      Complex complex12 = complex7.log();
      Complex complex13 = complex1.asin();
      Complex complex14 = complex13.NaN.exp();
      Complex complex15 = complex10.cos();
      Complex complex16 = complex5.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex2.multiply(37);
      Complex complex5 = Complex.valueOf(0.0, (-1013.926784194));
      Complex complex6 = complex5.ZERO.multiply(1);
      Complex complex7 = complex0.divide(complex1);
      int int0 = complex2.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex3.NaN.divide((-1013.926784194));
      Complex complex9 = Complex.I;
      boolean boolean1 = complex2.equals(complex9);
      Complex complex10 = complex9.divide(complex3);
      Complex complex11 = complex7.divide(3043.44354);
      Complex complex12 = Complex.valueOf((double) 1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      double double0 = 0.0;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf((-5.968586877433824E-8), Double.NaN);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex4.INF.multiply(complex3);
      int int0 = complex6.NaN.hashCode();
      Complex complex7 = complex3.ONE.pow(Double.NaN);
      Complex complex8 = complex1.ONE.log();
      Complex complex9 = complex0.ZERO.cosh();
      double double0 = 0.0;
      Complex complex10 = complex1.I.cos();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      double double1 = 0.0;
      try { 
        complex8.ONE.nthRoot((-2469));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,469
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply(Double.NaN);
      Complex complex3 = complex2.ONE.pow(complex0);
      Complex complex4 = complex2.sinh();
      Complex complex5 = Complex.valueOf(Double.NaN);
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex1.I.atan();
      Complex complex8 = Complex.valueOf(1.177739474561431E-7);
      Complex complex9 = complex8.NaN.divide(complex3);
      Complex complex10 = complex6.I.multiply(complex8);
      Complex complex11 = complex5.log();
      Complex complex12 = complex3.divide((-1.0));
      Complex complex13 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1245.27271743));
      double double0 = complex0.NaN.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.valueOf((-1245.27271743), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.653117429165879E119), (-7.653117429165879E119));
      Complex complex1 = new Complex(2743.888979, (-7.653117429165879E119));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.add(1.7879230976104736);
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex4.ZERO.divide((-7.653117429165879E119));
      Complex complex6 = complex3.ONE.sin();
      Complex complex7 = complex6.cos();
      int int0 = complex7.I.hashCode();
      Complex complex8 = complex1.subtract(2743.888979);
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex0.divide(Double.NaN);
      List<Complex> list0 = complex0.INF.nthRoot(17);
      Complex complex11 = complex3.createComplex(2743.888979, 1.3317127674213423E-285);
      Complex complex12 = complex3.createComplex((-7.653117429165879E119), 1.7879230976104736);
      Complex complex13 = complex12.acos();
      Complex complex14 = complex13.pow(complex4);
      Complex complex15 = complex0.I.multiply(complex6);
      Complex complex16 = complex4.NaN.sqrt1z();
      boolean boolean0 = complex12.isInfinite();
      Complex complex17 = complex12.divide((double) 17);
      double double0 = complex10.getImaginary();
      double double1 = complex4.getImaginary();
      ComplexField complexField0 = complex13.getField();
      boolean boolean1 = complex10.equals(complex4);
      Complex complex18 = complex8.acos();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      ComplexField complexField0 = complex0.getField();
      int int0 = complex1.hashCode();
      Complex complex2 = complex1.ZERO.cos();
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.sqrt();
      ComplexField complexField1 = complex3.ZERO.getField();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.ZERO.sqrt();
      int int1 = 0;
      try { 
        complex3.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 2053.0;
      Complex complex1 = complex0.createComplex(2053.0, 2053.0);
      Complex complex2 = complex0.acos();
      double double1 = 546.19131565727;
      Complex complex3 = complex2.createComplex(2053.0, 546.19131565727);
      Complex complex4 = complex3.INF.add(546.19131565727);
      Complex complex5 = complex3.NaN.sinh();
      try { 
        complex5.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(2718.20437452266, 2718.20437452266);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex3.NaN.tanh();
      String string0 = complex4.I.toString();
      Complex complex5 = complex2.INF.log();
      Complex complex6 = complex2.pow(complex1);
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex7.INF.acos();
      Complex complex9 = complex3.conjugate();
      double double0 = complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1536.2826868556374));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.multiply((-1274));
      Complex complex3 = Complex.valueOf((double) (-1274));
      double double0 = complex2.I.abs();
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex4.ZERO.sin();
      Complex complex7 = complex3.subtract(complex6);
      Complex complex8 = complex6.NaN.cosh();
      boolean boolean0 = complex2.isNaN();
      Complex complex9 = Complex.valueOf(20.0);
      boolean boolean1 = complex9.equals("");
      try { 
        complex4.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2281.061297427, 2281.061297427);
      Complex complex1 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-3941.4796995));
      Complex complex1 = Complex.valueOf(6.283185307179586, (-3941.4796995));
      Complex complex2 = complex1.INF.subtract(Double.NaN);
      Complex complex3 = complex1.ONE.acos();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex4.sinh();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex6.tan();
      double double0 = complex4.getReal();
      Complex complex8 = complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2003.9));
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex1.I.acos();
      Complex complex4 = complex0.ZERO.subtract(1.0);
      Complex complex5 = Complex.valueOf((-1182.0), 2.2979817390441895);
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex3.I.createComplex(0.0, 2.2979817390441895);
      Complex complex8 = complex5.multiply(0.0);
      boolean boolean0 = complex5.isInfinite();
      Object object0 = complex0.readResolve();
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex9.add(1.0);
      double double0 = complex5.abs();
      double double1 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-527.665862973552), (-527.665862973552));
      Complex complex1 = complex0.createComplex(2007.206851768525, 1216.283);
      Complex complex2 = complex0.multiply(17);
      Complex complex3 = complex2.pow(1089.4694146);
      double double0 = complex2.abs();
      Complex complex4 = complex3.divide((-3648.116));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-521.50116));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.INF.pow((-521.50116));
      Complex complex3 = complex0.INF.multiply(1);
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex4.INF.reciprocal();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.NaN.sinh();
      Complex complex8 = complex2.INF.createComplex(0.0, 1);
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex0.I.subtract((double) 1);
      Complex complex10 = complex0.cosh();
      List<Complex> list0 = complex10.INF.nthRoot(1042);
      Object object0 = complex10.I.readResolve();
      Complex complex11 = complex2.tanh();
      Complex complex12 = complex3.multiply(1);
      Complex complex13 = complex12.NaN.cos();
      Complex complex14 = complex12.ONE.multiply(complex1);
      int int0 = complex12.ONE.hashCode();
      Complex complex15 = complex0.sqrt();
      Complex complex16 = complex12.multiply((-521.50116));
      Complex complex17 = complex13.multiply(complex12);
      double double0 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.subtract(complex1);
      double double0 = complex1.ONE.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex3 = Complex.valueOf(0.0);
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = new Complex(0.0);
      Complex complex5 = complex3.ZERO.divide(complex4);
      double double1 = complex0.getImaginary();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.INF.multiply(complex0);
      Complex complex8 = complex6.sin();
      Complex complex9 = Complex.valueOf((-375.76407865487), 0.0);
      Complex complex10 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-1069.598), (-1978.10977661285));
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = Complex.valueOf((-1978.10977661285));
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.pow(1036.428295);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.ZERO.divide(1084.07);
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex6.exp();
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex7.INF.acos();
      Complex complex11 = complex9.INF.atan();
      Complex complex12 = complex7.subtract((-1941.506));
      Complex complex13 = complex12.NaN.divide(complex2);
      Complex complex14 = Complex.INF;
      Complex complex15 = complex13.ZERO.divide(complex14);
      Complex complex16 = complex12.add(1036.428295);
      Complex complex17 = complex12.cosh();
      Complex complex18 = complex17.INF.conjugate();
      Complex complex19 = complex8.multiply(0);
      Complex complex20 = complex16.pow(complex0);
      Complex complex21 = complex2.exp();
      Complex complex22 = complex15.divide(1084.07);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = 597.001;
      Complex complex0 = Complex.valueOf(0.0, 597.001);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = Complex.valueOf(597.001, 597.001);
      double double1 = complex0.abs();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex0.multiply(597.001);
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex4.ONE.add(complex2);
      Complex complex8 = complex3.sin();
      Complex complex9 = complex6.multiply((-3030));
      Complex complex10 = complex5.multiply((-9.233295580238604E67));
      Complex complex11 = complex3.ONE.pow(complex10);
      Complex complex12 = complex9.sin();
      Complex complex13 = complex12.add(0.0);
      try { 
        complex5.NaN.nthRoot((-3030));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,030
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.pow(6.283185307179586);
      Complex complex4 = complex0.pow(6.283185307179586);
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex5.divide(complex1);
      Complex complex7 = complex4.INF.multiply(1662.0);
      Complex complex8 = complex7.pow(6.283185307179586);
      Complex complex9 = complex5.exp();
      double double0 = complex4.getImaginary();
      Complex complex10 = complex7.NaN.divide(1662.0);
      String string0 = complex1.toString();
      Complex complex11 = complex3.sin();
      Complex complex12 = complex0.sqrt1z();
      double double1 = complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.412881689012608E-8));
      Complex complex1 = complex0.I.multiply((-5.412881689012608E-8));
      List<Complex> list0 = complex1.ONE.nthRoot(861);
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex2.I.divide(1.177739474561431E-7);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = Complex.valueOf(1.177739474561431E-7, 0.0);
      Complex complex7 = complex3.add(complex2);
      Complex complex8 = complex2.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(2.1273622512817383);
      Complex complex1 = complex0.I.subtract((-726.0));
      double double0 = complex0.I.getArgument();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.sinh();
      ComplexField complexField0 = complex4.getField();
      Complex complex5 = complex0.ZERO.atan();
      Complex complex6 = complex3.INF.cos();
      Complex complex7 = complex4.add(complex3);
      Complex complex8 = complex7.INF.divide((-9.45487863616303E-8));
      double double1 = complex4.getArgument();
      Complex complex9 = complex4.subtract(complex7);
      Complex complex10 = Complex.valueOf((-3.141592653589793), (-9.45487863616303E-8));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-3688.3840935661), 0.0);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex2.INF.log();
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = Complex.valueOf(0.0, (-3688.3840935661));
      Complex complex7 = complex5.ONE.subtract(complex2);
      Complex complex8 = complex7.INF.sqrt1z();
      Complex complex9 = complex6.reciprocal();
      ComplexField complexField0 = complex6.ZERO.getField();
      Complex complex10 = complex0.INF.multiply(complex6);
      double double0 = complex10.NaN.abs();
      Complex complex11 = complex6.ONE.tanh();
      Complex complex12 = complex11.NaN.conjugate();
      double double1 = complex0.getImaginary();
      Complex complex13 = complex10.sin();
      Complex complex14 = complex13.NaN.pow(0.0);
      Complex complex15 = complex1.tan();
      int int0 = complex15.hashCode();
      Complex complex16 = complex5.subtract((-1296.675116082491));
      Complex complex17 = complex6.divide(complex11);
      Complex complex18 = complex3.add(Double.NaN);
      Complex complex19 = complex8.subtract(complex16);
      boolean boolean0 = complex16.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(116.48128375);
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.I.multiply(6.283185307179586);
      Complex complex4 = complex3.multiply(535);
      List<Complex> list0 = complex0.NaN.nthRoot(535);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex5.I.atan();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex8.ZERO.asin();
      boolean boolean0 = complex8.isInfinite();
      String string0 = complex0.toString();
      Complex complex10 = complex4.reciprocal();
      Complex complex11 = complex10.subtract(complex0);
      Complex complex12 = complex10.I.multiply(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex13 = complex3.tanh();
      Complex complex14 = complex13.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(3105.3300189);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 3105.3300189);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = Complex.valueOf(3105.3300189, 3105.3300189);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.NaN.sinh();
      String string0 = complex5.NaN.toString();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.NaN.reciprocal();
      Object object0 = complex6.INF.readResolve();
      Complex complex8 = complex3.tanh();
      double double0 = complex8.abs();
      double double1 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.I.subtract(complex0);
      double double0 = complex1.abs();
      Complex complex3 = complex0.tanh();
      ComplexField complexField0 = complex2.getField();
      Complex complex4 = complex2.tanh();
      String string0 = complex1.toString();
      Complex complex5 = complex4.ZERO.createComplex(Double.NaN, Double.NaN);
      boolean boolean0 = complex1.isNaN();
      boolean boolean1 = complex4.isInfinite();
      Complex complex6 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = Complex.valueOf(0.0, (-4855.394089657));
      Complex complex4 = complex1.I.multiply(complex0);
      Complex complex5 = complex1.ZERO.pow((-274.697369392));
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex3.pow((-3968.6497969899942));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-670.80849493956), 0.0);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.negate();
      List<Complex> list0 = complex2.NaN.nthRoot(1400);
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.45623743534088135);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      double double0 = complex2.ZERO.abs();
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-663.93949094));
      int int0 = complex0.I.hashCode();
      Object object0 = complex0.readResolve();
      double double0 = complex0.INF.abs();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex2.divide((-2809.45));
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex2.NaN.subtract(complex0);
      boolean boolean0 = complex0.isNaN();
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7312231063842773, 1.7312231063842773);
      Complex complex1 = Complex.valueOf(1.7312231063842773, 1.7312231063842773);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.pow(complex1);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(9.860939269906055E-8);
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.39762192964553833);
      Complex complex1 = complex0.divide(8.252116273466952E112);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.ZERO.sqrt1z();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex4 = complex2.INF.multiply(1452.8901357);
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex5.tanh();
      int int0 = complex7.ZERO.hashCode();
      String string0 = complex2.I.toString();
      boolean boolean0 = complex2.isInfinite();
      double double0 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2.6881169167589747E43);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex1.log();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(988.15, 3.150242850860434E59);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.I.asin();
      int int0 = complex1.hashCode();
      Complex complex3 = complex2.I.pow(1270.0);
      Complex complex4 = complex2.I.add(complex1);
      Complex complex5 = complex2.NaN.sin();
      Complex complex6 = complex0.ZERO.sin();
      int int1 = complex0.hashCode();
      Complex complex7 = Complex.valueOf((-1503.55945215448));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.divide((-1325.5300836901304));
      Complex complex2 = complex1.I.createComplex((-1325.5300836901304), 1.0);
      Complex complex3 = complex0.I.add(1.0);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex1.ZERO.tanh();
      Complex complex7 = complex1.NaN.negate();
      String string1 = complex7.I.toString();
      boolean boolean0 = complex3.isNaN();
      Complex complex8 = complex7.INF.reciprocal();
      Complex complex9 = complex0.divide(complex1);
      Complex complex10 = complex1.asin();
      double double0 = complex7.getReal();
      ComplexField complexField0 = complex6.getField();
      Complex complex11 = complex0.subtract(complex10);
      Complex complex12 = complex0.cos();
      Complex complex13 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(2.0);
      Complex complex3 = complex0.NaN.multiply(complex2);
      String string0 = complex2.ONE.toString();
      double double0 = complex0.I.getArgument();
      Complex complex4 = complex2.ZERO.tan();
      Complex complex5 = complex4.ZERO.atan();
      int int0 = complex0.NaN.hashCode();
      Complex complex6 = complex2.ZERO.cosh();
      Complex complex7 = complex1.createComplex(2032.1, 2032.1);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.INF.subtract(complex8);
      double double1 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(467.7426938, 467.7426938);
      Complex complex1 = complex0.multiply(37);
      Complex complex2 = Complex.valueOf((double) 37, 2784.119134028);
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = complex1.ZERO.sqrt();
      String string0 = complex4.INF.toString();
      Complex complex5 = complex0.tan();
      Complex complex6 = Complex.valueOf((double) 37, 467.7426938);
      boolean boolean0 = complex1.isInfinite();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex1.I.divide(complex7);
      Complex complex9 = complex1.INF.atan();
      Complex complex10 = complex4.conjugate();
      Complex complex11 = complex7.exp();
      Complex complex12 = complex11.negate();
      Complex complex13 = complex3.multiply(complex9);
      Complex complex14 = complex13.ONE.cosh();
      ComplexField complexField0 = complex9.getField();
      Complex complex15 = complex5.acos();
      Complex complex16 = complex15.NaN.cosh();
      Complex complex17 = complex10.negate();
      Complex complex18 = complex7.subtract(467.7426938);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.add(0.0);
      double double0 = complex0.getReal();
      Complex complex2 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(603.57973028);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.NaN.add((-854.49414));
      String string0 = complex0.toString();
      Complex complex3 = complex0.sqrt1z();
      double double0 = complex3.ZERO.getArgument();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex3.sqrt();
      double double1 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-342.1));
      Complex complex1 = complex0.NaN.divide((-342.1));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.ZERO.pow(complex2);
      Complex complex4 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.12814581394195557, 0.0);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex1.ONE.log();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.INF.sin();
      Object object0 = complex5.readResolve();
      double double0 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.abs();
      double double1 = complex0.getArgument();
      Complex complex1 = complex0.sin();
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.NaN.pow(1.5707963267948966);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1260.5430798);
      Complex complex1 = complex0.multiply(1260.5430798);
      Complex complex2 = complex1.INF.multiply(1260.5430798);
      Complex complex3 = complex1.ONE.multiply(1402);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex0.multiply(0.11517547070980072);
      Complex complex6 = complex1.NaN.tanh();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex4.ZERO.createComplex(1402, 0.11517547070980072);
      double double0 = complex0.NaN.abs();
      double double1 = complex7.getReal();
      Complex complex9 = complex4.reciprocal();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex10 = complex1.divide(complex7);
      Complex complex11 = complex0.acos();
      Complex complex12 = complex11.I.sqrt();
      Complex complex13 = complex6.multiply(968);
      int int0 = complex3.hashCode();
      Complex complex14 = complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-2447.1334), (-2447.1334));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.createComplex(0.0, (-2447.1334));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.add(0.0);
      Complex complex3 = Complex.valueOf((-1010.0846346), (-1010.0846346));
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex3.ZERO.atan();
      Complex complex7 = complex6.INF.add(0.0);
      Complex complex8 = complex4.subtract(complex0);
      Complex complex9 = complex8.add(complex3);
      Complex complex10 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-719.6767937661));
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex0.I.add(complex1);
      Complex complex4 = complex0.multiply((-899.6809955643487));
      Complex complex5 = complex3.asin();
      Complex complex6 = complex5.createComplex(2171.22218289, 2171.22218289);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex4.subtract((-719.6767937661));
      Complex complex9 = complex6.exp();
      Complex complex10 = complex6.subtract((-719.6767937661));
      Complex complex11 = complex7.add(0.0);
      Complex complex12 = complex7.multiply((-899.6809955643487));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.subtract(1.880755298741952E-9);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.exp();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-998.305));
      Complex complex1 = Complex.valueOf((-998.305), (-110.48));
      Complex complex2 = complex1.ONE.subtract(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.INF.cos();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex1.multiply(3271);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4958.888904785706, 4958.888904785706);
      double double0 = complex0.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.cosh();
      double double1 = complex2.abs();
      Complex complex3 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.ONE.sinh();
      Complex complex5 = complex4.NaN.subtract(complex2);
      Complex complex6 = complex5.I.tan();
      double double2 = complex1.INF.abs();
      int int0 = complex2.hashCode();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex8.NaN.tanh();
      Complex complex10 = complex9.ONE.tanh();
      Complex complex11 = complex0.subtract(complex8);
      Complex complex12 = complex11.INF.atan();
      Complex complex13 = complex1.divide(complex7);
      Complex complex14 = complex12.sinh();
      Complex complex15 = complex14.subtract(complex10);
      double double3 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex3.I.sqrt();
      Complex complex6 = complex0.ZERO.sqrt();
      try { 
        complex6.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7379989624023438);
      double double0 = 2.3472546699189522E-8;
      Complex complex1 = complex0.pow(2.3472546699189522E-8);
      Complex complex2 = complex1.I.multiply(complex0);
      double double1 = 0.0;
      Complex complex3 = complex1.I.multiply(0.0);
      try { 
        complex1.ONE.nthRoot((-2008));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,008
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1195.55277), (-1195.55277));
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.multiply(3379);
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(2034);
      Complex complex2 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.add(complex2);
      double double0 = 1115.2770014580078;
      Complex complex4 = Complex.valueOf(1115.2770014580078);
      Complex complex5 = Complex.valueOf((-458.02036));
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = complex5.subtract(9.642065709892252E-219);
      try { 
        complex7.INF.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      String string0 = complex3.ZERO.toString();
      Complex complex4 = complex3.NaN.add(complex0);
      Complex complex5 = complex2.INF.subtract(complex0);
      double double0 = complex0.getArgument();
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.asin();
      String string0 = complex1.toString();
      Complex complex4 = complex3.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex0.pow((-96.8993516377));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3603.0), 2.387190818786621);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex1.ZERO.subtract(complex2);
      String string0 = complex3.ZERO.toString();
      Complex complex4 = complex1.I.tan();
      Complex complex5 = complex0.add((-3603.0));
      Object object0 = complex0.INF.readResolve();
      Complex complex6 = complex1.ONE.add(2.387190818786621);
      Complex complex7 = Complex.valueOf(2.387190818786621);
      Complex complex8 = complex7.NaN.asin();
      int int0 = complex5.ZERO.hashCode();
      int int1 = complex0.hashCode();
      boolean boolean0 = complex5.isInfinite();
      Complex complex9 = Complex.valueOf(2.387190818786621, (-7.956144278281947E-8));
      Complex complex10 = complex4.atan();
      double double0 = complex4.getArgument();
      Complex complex11 = complex0.reciprocal();
      Complex complex12 = complex11.ZERO.reciprocal();
      boolean boolean1 = complex2.isInfinite();
      Complex complex13 = Complex.valueOf((-1.0), 1.5707963267948966);
      boolean boolean2 = complex3.equals(complex5);
      double double1 = 0.0;
      Complex complex14 = complex9.createComplex((-20.0), 0.0);
      Complex complex15 = complex9.divide((-7.956144278281947E-8));
      int int2 = complex14.NaN.hashCode();
      try { 
        complex14.nthRoot((-2714));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,714
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2542.46353, 2542.46353);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex0.INF.acos();
      boolean boolean0 = complex0.isNaN();
      List<Complex> list0 = complex0.nthRoot(1397);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = Complex.valueOf(0.4126010537147522);
      Complex complex8 = complex7.INF.sqrt();
      ComplexField complexField0 = complex7.ZERO.getField();
      Complex complex9 = complex7.INF.divide((-20.0));
      Complex complex10 = complex1.subtract((-1818.8195844059073));
      Complex complex11 = Complex.valueOf((-3212.0), 0.0);
      Complex complex12 = complex0.sinh();
      Complex complex13 = complex1.pow(0.0);
      Complex complex14 = complex13.ONE.pow((-1567.37616811493));
      Complex complex15 = complex13.exp();
      Complex complex16 = complex12.ZERO.reciprocal();
      double double0 = complex16.getArgument();
      double double1 = complex0.abs();
      Complex complex17 = complex12.divide(complex11);
      boolean boolean1 = complex2.isNaN();
      Complex complex18 = complex10.conjugate();
      boolean boolean2 = complex1.equals("org.apache.commons.math3.complex.Complex");
      Complex complex19 = complex9.conjugate();
      Complex complex20 = complex12.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      double double0 = complex1.abs();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.sqrt();
      int int0 = complex4.hashCode();
      Complex complex5 = Complex.valueOf(1.0, 419.62005755897);
      Complex complex6 = complex0.I.negate();
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = Complex.valueOf(0.0, 1.0);
      Object object0 = complex3.readResolve();
      Complex complex9 = Complex.valueOf((-2517.291142884294), 1.0);
      Complex complex10 = complex1.multiply(930);
      Complex complex11 = Complex.valueOf(1.0);
      Complex complex12 = complex11.INF.tanh();
      Complex complex13 = complex10.ZERO.log();
      Complex complex14 = complex13.INF.tan();
      Complex complex15 = complex9.NaN.log();
      double double1 = complex0.I.abs();
      Complex complex16 = complex0.INF.createComplex(3.5306502960727705E247, 3824.2377109196186);
      Complex complex17 = complex10.divide(3824.2377109196186);
      ComplexField complexField0 = complex8.getField();
      Complex complex18 = complex9.subtract(123.3);
      Complex complex19 = complex18.negate();
      Object object1 = complex9.readResolve();
      Complex complex20 = complex9.divide((-2135.5300710980287));
      Complex complex21 = complex20.I.exp();
      Complex complex22 = complex2.sin();
      Complex complex23 = complex6.divide(complex16);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-1804.7342341285266));
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex2.I.sqrt1z();
      double double0 = complex3.getArgument();
      Object object0 = complex0.I.readResolve();
      Complex complex4 = complex0.INF.createComplex(2.3047242164611816, 2714.1432355954134);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.NaN.subtract(complex0);
      Complex complex7 = complex0.ZERO.conjugate();
      Complex complex8 = Complex.valueOf((-1804.7342341285266), 2.3047242164611816);
      List<Complex> list0 = complex8.nthRoot(17);
      Complex complex9 = complex2.I.acos();
      Complex complex10 = complex9.I.exp();
      Complex complex11 = complex9.I.asin();
      Complex complex12 = complex11.I.negate();
      Complex complex13 = complex9.ZERO.cosh();
      Complex complex14 = complex13.NaN.add((double) 17);
      Complex complex15 = complex14.NaN.reciprocal();
      Complex complex16 = complex15.multiply((double) 17);
      Complex complex17 = complex15.INF.sqrt1z();
      double double1 = complex0.getReal();
      Complex complex18 = complex1.divide(complex2);
      Complex complex19 = complex4.divide(0.0);
      List<Complex> list1 = complex19.INF.nthRoot(17);
      boolean boolean0 = complex13.equals(complex2);
      Complex complex20 = complex4.conjugate();
      String string0 = complex7.toString();
      Complex complex21 = complex2.sqrt();
      Complex complex22 = complex3.add(complex21);
      Complex complex23 = complex22.tan();
      Complex complex24 = complex16.tan();
      Complex complex25 = complex14.log();
      Complex complex26 = Complex.valueOf((-20.0), 0.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.INF.cos();
      double double1 = 0.0;
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex2.multiply(complex0);
      Complex complex5 = complex1.divide(0.0);
      double double2 = (-4.019569741253664E-293);
      Complex complex6 = complex3.ONE.multiply(complex5);
      try { 
        complex1.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3371.48587613, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex3.ONE.divide(complex5);
      Complex complex7 = complex1.acos();
      Complex complex8 = complex5.INF.subtract(complex0);
      Complex complex9 = complex2.ONE.reciprocal();
      Complex complex10 = complex7.ZERO.multiply(3371.48587613);
      Complex complex11 = complex10.I.reciprocal();
      Complex complex12 = complex11.subtract(0.0);
      Complex complex13 = complex12.ONE.sqrt();
      double double0 = complex12.INF.getArgument();
      Complex complex14 = complex2.atan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex15 = Complex.INF;
      Complex complex16 = complex2.multiply(complex15);
      Complex complex17 = complex1.acos();
      double double1 = complex15.abs();
      Complex complex18 = complex15.ZERO.multiply(complex0);
      Complex complex19 = complex18.INF.sqrt();
      double double2 = complex3.getImaginary();
      Complex complex20 = complex4.tanh();
      Complex complex21 = complex20.ZERO.negate();
      ComplexField complexField0 = complex5.getField();
      Complex complex22 = complex16.exp();
      Complex complex23 = complex5.acos();
      Object object0 = complex1.readResolve();
      boolean boolean1 = complex16.equals(object0);
      ComplexField complexField1 = complex15.getField();
      Complex complex24 = complex22.atan();
      Complex complex25 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex26 = complex9.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1245.27271743));
      double double0 = complex0.NaN.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = new Complex((-1245.27271743), Double.NaN);
      Complex complex2 = complex0.divide(complex1);
  }
}
