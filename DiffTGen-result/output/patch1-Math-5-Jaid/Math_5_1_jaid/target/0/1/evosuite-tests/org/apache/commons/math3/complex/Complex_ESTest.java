/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 01:42:28 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = Complex.valueOf((-813.8061), 20.0);
      Complex complex2 = complex0.ONE.createComplex(20.0, 20.0);
      Complex complex3 = complex2.NaN.divide((-813.8061));
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.pow(complex0);
      double double0 = complex4.I.abs();
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = complex0.negate();
      Complex complex8 = Complex.valueOf(1.0, (-4397.92127433409));
      Complex complex9 = complex0.tanh();
      try { 
        complex0.nthRoot((-1736));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,736
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.ONE.multiply((-895));
      String string0 = complex0.INF.toString();
      double double0 = complex1.NaN.abs();
      Complex complex3 = complex0.exp();
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex4 = complex3.ONE.multiply(2293);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.ZERO.multiply(Double.NaN);
      Complex complex7 = complex0.NaN.tanh();
      Complex complex8 = Complex.valueOf((double) 2293);
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex3.multiply(complex1);
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex0.ZERO.divide((double) 2293);
      Complex complex12 = Complex.valueOf((double) 1, (-556.749043));
      Complex complex13 = complex12.NaN.sinh();
      Complex complex14 = complex8.subtract(0.0);
      Complex complex15 = complex8.subtract(complex11);
      String string1 = complex0.toString();
      ComplexField complexField1 = complex1.getField();
      Complex complex16 = Complex.valueOf((double) (-895), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(935.0);
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.NaN.multiply(929);
      String string0 = complex0.toString();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.add(Double.NaN);
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex5.INF.sqrt();
      Complex complex8 = Complex.valueOf((-2636.895));
      Complex complex9 = complex3.ONE.multiply(213);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex10 = complex1.I.cos();
      ComplexField complexField1 = complex3.getField();
      Complex complex11 = complex4.cosh();
      Object object0 = complex2.readResolve();
      Complex complex12 = complex3.asin();
      Complex complex13 = complex12.multiply(2188);
      Complex complex14 = Complex.valueOf(2.0, 2.0);
      double double1 = complex2.getArgument();
      int int0 = complex12.hashCode();
      Complex complex15 = complex2.cosh();
      String string1 = complex1.toString();
      Complex complex16 = complex15.tan();
      Complex complex17 = complex14.multiply(0.0);
      ComplexField complexField2 = complex8.getField();
      double double2 = complex11.getImaginary();
      Complex complex18 = complex10.asin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.divide(Double.NaN);
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = complex2.ZERO.sqrt1z();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.INF.createComplex(Double.NaN, Double.NaN);
      double double0 = complex4.ONE.abs();
      Complex complex7 = complex2.INF.conjugate();
      Complex complex8 = complex5.multiply(0);
      Complex complex9 = complex8.INF.atan();
      Complex complex10 = complex5.ZERO.add((-1369.254307795087));
      int int0 = complex10.ONE.hashCode();
      double double1 = complex5.getArgument();
      Complex complex11 = complex0.divide(complex1);
      Complex complex12 = complex2.I.add((-1314.0));
      Complex complex13 = complex11.I.multiply(complex0);
      double double2 = complex4.abs();
      Complex complex14 = complex0.conjugate();
      Complex complex15 = Complex.valueOf(Double.NaN);
      Complex complex16 = complex15.I.tan();
      boolean boolean0 = complex4.isInfinite();
      int int1 = complex14.hashCode();
      Complex complex17 = complex14.divide(Double.NaN);
      Complex complex18 = complex3.negate();
      Complex complex19 = complex14.log();
      Complex complex20 = complex4.sin();
      ComplexField complexField0 = complex1.getField();
      Complex complex21 = complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1585.50007));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex0.pow((-1585.50007));
      Complex complex5 = complex0.ZERO.log();
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.ZERO.log();
      int int0 = complex6.ZERO.hashCode();
      Complex complex8 = complex1.createComplex((-1585.50007), 3.3894811576571423E179);
      Complex complex9 = complex8.I.exp();
      Complex complex10 = complex1.multiply(3058);
      Complex complex11 = complex10.INF.subtract(complex5);
      Complex complex12 = complex2.cosh();
      Complex complex13 = complex8.sqrt1z();
      ComplexField complexField0 = complex13.getField();
      Complex complex14 = complex12.sqrt1z();
      Complex complex15 = complex1.divide(complex6);
      Complex complex16 = complex6.multiply(3.3894811576571423E179);
      Complex complex17 = complex3.sinh();
      int int1 = complex17.NaN.hashCode();
      Complex complex18 = complex15.multiply(complex9);
      Complex complex19 = complex2.add(complex4);
      Complex complex20 = complex19.multiply(complex3);
      ComplexField complexField1 = complex20.NaN.getField();
      Complex complex21 = complex17.tan();
      List<Complex> list0 = complex15.nthRoot(1427);
      Complex complex22 = Complex.valueOf((double) 3058);
      double double0 = complex1.getImaginary();
      Complex complex23 = complex21.cosh();
      Complex complex24 = complex14.log();
      Complex complex25 = complex14.divide(complex15);
      Complex complex26 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-1135.57998634697));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex1.I.asin();
      Complex complex5 = complex3.I.subtract((-88.18));
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex5.createComplex(2.0217439756338078E-10, 0.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.divide((-2514.6928398324));
      double double0 = complex1.getArgument();
      List<Complex> list0 = complex0.nthRoot(7);
      Complex complex2 = Complex.valueOf(1963.54, 1963.54);
      Complex complex3 = complex2.I.multiply((-3.141592653589793));
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex2.ZERO.exp();
      Complex complex6 = complex2.ZERO.divide(complex3);
      Complex complex7 = Complex.valueOf((-1806.2));
      Object object0 = complex7.NaN.readResolve();
      double double1 = complex0.abs();
      Complex complex8 = complex0.INF.createComplex((-1806.2), 3398.5);
      ComplexField complexField0 = complex5.INF.getField();
      boolean boolean0 = complex0.equals("|Z~]{");
      Object object1 = new Object();
      boolean boolean1 = complex1.equals(object1);
      Complex complex9 = complex0.tan();
      Complex complex10 = Complex.valueOf(2.5685958862304688);
      Complex complex11 = complex0.subtract(1188.276);
      Complex complex12 = complex10.asin();
      Complex complex13 = complex1.tanh();
      Complex complex14 = complex8.subtract(3398.5);
      Complex complex15 = complex8.subtract((-3536.6028685));
      Complex complex16 = complex4.pow(445.7061858693033);
      boolean boolean2 = complex14.isInfinite();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.pow(358.394474992071);
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.ONE.exp();
      Complex complex4 = complex0.multiply((-1931));
      double double1 = complex4.abs();
      Complex complex5 = complex4.multiply((-1.0));
      Complex complex6 = complex5.add((-1.0));
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, 2.0);
      Complex complex8 = Complex.valueOf(358.394474992071, (-824.836438042911));
      Complex complex9 = complex2.atan();
      double double2 = complex0.getArgument();
      double double3 = complex5.getImaginary();
      int int0 = complex1.ZERO.hashCode();
      boolean boolean0 = complex0.isNaN();
      int int1 = complex9.hashCode();
      Complex complex10 = complex9.atan();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY);
      double double4 = complex9.getImaginary();
      Complex complex12 = complex9.add(complex2);
      Complex complex13 = complex5.tanh();
      Complex complex14 = complex10.tan();
      List<Complex> list0 = complex10.nthRoot(262);
      Complex complex15 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-1594.7626), (-1594.7626));
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.NaN.multiply(complex0);
      Object object0 = complex3.readResolve();
      Complex complex4 = complex2.NaN.multiply(complex1);
      Complex complex5 = complex4.NaN.sqrt1z();
      Complex complex6 = complex1.NaN.divide(complex2);
      String string0 = complex6.INF.toString();
      double double0 = complex1.ZERO.abs();
      Complex complex7 = complex4.ZERO.add(complex1);
      Complex complex8 = complex0.subtract((-84.3642898519514));
      Object object1 = complex8.I.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Object object2 = new Object();
      boolean boolean1 = complex0.equals(object2);
      Complex complex9 = complex2.pow((-1594.7626));
      Complex complex10 = complex9.sinh();
      Complex complex11 = Complex.valueOf((-1352.0), (-4556.9283303813));
      Complex complex12 = complex11.sin();
      List<Complex> list0 = complex4.nthRoot(767);
      Complex complex13 = complex4.cos();
      Complex complex14 = complex4.tan();
      Complex complex15 = complex0.pow(1548.82115903164);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1261.495660925), 1284.16651307);
      Complex complex1 = complex0.I.add((-2961.642945658875));
      Complex complex2 = complex0.createComplex((-1261.495660925), (-2961.642945658875));
      Complex complex3 = complex2.ZERO.subtract((-1261.495660925));
      Complex complex4 = complex3.pow(complex0);
      double double0 = complex2.getImaginary();
      Complex complex5 = Complex.valueOf((-1.0));
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.NaN.sqrt1z();
      Complex complex8 = complex6.tanh();
      int int0 = complex5.hashCode();
      Complex complex9 = complex8.NaN.divide(complex6);
      Complex complex10 = complex8.divide(complex0);
      Complex complex11 = complex8.divide(complex2);
      Complex complex12 = complex11.ONE.exp();
      Complex complex13 = complex12.ONE.multiply(complex0);
      boolean boolean0 = complex2.isNaN();
      Complex complex14 = complex8.add((-2950.095));
      Complex complex15 = complex2.subtract((-2950.095));
      Complex complex16 = complex14.sinh();
      double double1 = complex8.abs();
      Complex complex17 = complex14.cos();
      Complex complex18 = complex14.divide((-619.7364));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(2257.644149137, (-5.042005018212734E-227));
      Complex complex1 = new Complex(2.8009086220877197E-205, (-767.6));
      Complex complex2 = Complex.valueOf((-2559.9));
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex4.ONE.add(complex0);
      Complex complex6 = complex4.ONE.sqrt1z();
      Complex complex7 = complex6.I.atan();
      Complex complex8 = complex4.createComplex(Double.POSITIVE_INFINITY, 1698.0);
      double double0 = complex4.getArgument();
      Complex complex9 = complex1.atan();
      String string0 = complex9.I.toString();
      Complex complex10 = complex1.INF.atan();
      Complex complex11 = complex3.add(1347.4005516);
      Complex complex12 = complex11.NaN.subtract((-1.1487079818684332E-8));
      Complex complex13 = complex0.tanh();
      Complex complex14 = complex13.I.conjugate();
      Complex complex15 = complex0.asin();
      Complex complex16 = complex9.divide(complex5);
      Object object0 = new Object();
      boolean boolean0 = complex9.equals(object0);
      Complex complex17 = complex0.add(complex15);
      Complex complex18 = complex3.subtract(complex17);
      Complex complex19 = Complex.NaN;
      boolean boolean1 = complex5.equals(complex19);
      Complex complex20 = complex12.acos();
      Complex complex21 = complex20.tanh();
      Complex complex22 = complex0.divide(complex14);
      Complex complex23 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(622.5706668246);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      double double0 = complex0.getArgument();
      String string0 = complex2.ONE.toString();
      double double1 = complex2.getImaginary();
      double double2 = complex2.getImaginary();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1561.273463, 1561.273463);
      Complex complex1 = complex0.NaN.tanh();
      double double0 = complex1.ONE.abs();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex2.NaN.asin();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.exp();
      Complex complex5 = Complex.valueOf(776.636086586673, 1561.273463);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.exp();
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex8.ONE.exp();
      Complex complex10 = Complex.valueOf(1561.273463, 1561.273463);
      Complex complex11 = complex10.subtract(complex6);
      Complex complex12 = complex11.ZERO.asin();
      Complex complex13 = complex6.cosh();
      Complex complex14 = complex5.I.divide(complex3);
      Complex complex15 = complex5.createComplex(1.0, 2.0);
      Complex complex16 = complex0.subtract((-0.12502530217170715));
      Complex complex17 = complex15.tanh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-4373.20466332));
      Complex complex1 = complex0.NaN.multiply(2365);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex3.createComplex(2365, 2365);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.INF.add((-2995.723179153));
      double double1 = complex0.I.abs();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.valueOf((-2995.723179153), Double.NaN);
      Complex complex5 = complex2.multiply(0.0);
      double double2 = complex5.abs();
      Complex complex6 = complex5.subtract(complex1);
      Complex complex7 = complex2.divide((-2995.723179153));
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex7.add(complex1);
      Complex complex10 = complex9.NaN.sqrt();
      Complex complex11 = complex3.negate();
      List<Complex> list0 = complex5.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-3113.64082184115));
      Complex complex1 = complex0.add((-3113.64082184115));
      Complex complex2 = complex1.sinh();
      double double0 = complex2.ONE.abs();
      Complex complex3 = complex0.I.add(complex1);
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.add(1.8374862670898438);
      Complex complex5 = complex4.pow(1.8374862670898438);
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.I.conjugate();
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex4.readResolve();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex2.divide(complex8);
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex4.createComplex((-7.678973146281339E-156), 2675.67);
      Complex complex12 = complex0.multiply(complex3);
      Complex complex13 = complex1.tanh();
      Complex complex14 = Complex.valueOf((-313.33484016), 0.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-332.2881));
      double double0 = complex0.getReal();
      double double1 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.divide((-332.2881));
      int int0 = complex0.NaN.hashCode();
      List<Complex> list0 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.multiply(2317.3719);
      Complex complex4 = complex1.ONE.conjugate();
      Complex complex5 = complex4.I.pow(2317.3719);
      Complex complex6 = complex1.reciprocal();
      double double0 = complex0.abs();
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.INF.divide(complex1);
      Complex complex9 = complex7.add(1609.5);
      double double1 = complex9.getArgument();
      Complex complex10 = complex0.tan();
      String string0 = complex1.toString();
      double double2 = complex2.getReal();
      boolean boolean0 = complex3.isNaN();
      Complex complex11 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(14.101419448852539, 14.101419448852539);
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex0.ONE.divide(2.0);
      Complex complex7 = complex2.INF.subtract(0.0);
      Complex complex8 = complex4.ZERO.subtract((-6.968742825553785E-8));
      Complex complex9 = complex0.subtract(complex6);
      Complex complex10 = complex2.asin();
      Complex complex11 = complex4.INF.sinh();
      List<Complex> list0 = complex10.nthRoot(2125);
      Complex complex12 = complex4.sqrt();
      Complex complex13 = complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-464.64205392), (-464.64205392));
      Complex complex1 = new Complex(0.0, (-4723.3));
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.divide((-4723.3));
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex0.I.createComplex((-464.64205392), 0.0);
      int int0 = complex5.ZERO.hashCode();
      Complex complex6 = complex5.multiply(0.0);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex3.I.multiply(0.0);
      double double0 = complex7.getArgument();
      Complex complex9 = complex7.multiply((-464.64205392));
      Complex complex10 = complex0.add(complex4);
      Complex complex11 = complex7.sqrt1z();
      Complex complex12 = complex7.multiply(265.5986609);
      ComplexField complexField0 = complex10.getField();
      Complex complex13 = complex12.cosh();
      double double1 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1350.43057724869), (-1350.43057724869));
      Complex complex1 = complex0.I.multiply((-1350.43057724869));
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.add((-1401.8766504681));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = new Complex((-1401.8766504681));
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex4.INF.atan();
      boolean boolean0 = complex0.equals(complex4);
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex0.NaN.conjugate();
      Complex complex9 = complex8.ONE.subtract(complex1);
      Complex complex10 = complex1.multiply(1823.0);
      List<Complex> list0 = complex10.nthRoot(1);
      Complex complex11 = complex7.multiply(complex10);
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex11.NaN.add(complex12);
      ComplexField complexField0 = complex0.getField();
      Complex complex14 = complex5.divide(complex0);
      Complex complex15 = complex7.sin();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.pow(529.54550009439);
      Complex complex2 = complex1.negate();
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = Complex.valueOf(2783.889217139, 529.54550009439);
      Complex complex5 = Complex.valueOf(345.8, 1784.42099669);
      Complex complex6 = complex0.cos();
      Complex complex7 = Complex.valueOf((-1446.78120803588));
      Complex complex8 = complex7.I.pow(1784.42099669);
      double double0 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(1068.4896787, 1068.4896787);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.ONE.divide(1068.4896787);
      Complex complex3 = complex0.INF.sin();
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex0.I.divide(complex3);
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex5.ONE.asin();
      Complex complex7 = complex6.subtract(complex5);
      double double0 = complex3.ZERO.getArgument();
      ComplexField complexField1 = complex3.getField();
      Complex complex8 = complex0.cos();
      double double1 = complex0.INF.abs();
      Complex complex9 = complex1.I.add(complex8);
      Complex complex10 = complex9.ZERO.negate();
      Complex complex11 = complex10.I.conjugate();
      Object object0 = complex0.readResolve();
      double double2 = complex1.getReal();
      Complex complex12 = complex2.acos();
      Complex complex13 = complex2.acos();
      try { 
        complex12.nthRoot((-879));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -879
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.INF.pow(complex1);
      Complex complex5 = complex0.divide(1857.7684);
      Complex complex6 = complex5.INF.tanh();
      Complex complex7 = complex5.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-256.5), (-256.5));
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.NaN.acos();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.pow((-256.5));
      Complex complex5 = complex4.acos();
      Complex complex6 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1384.877840186, 1384.877840186);
      Complex complex1 = Complex.valueOf(7.913674211949961E-185, 7.913674211949961E-185);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = Complex.valueOf(0.0, 7.913674211949961E-185);
      int int0 = complex4.hashCode();
      Complex complex5 = complex0.ZERO.tan();
      Complex complex6 = complex1.divide(7.913674211949961E-185);
      Complex complex7 = complex0.NaN.reciprocal();
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex8.ZERO.pow(2144.69770163346);
      Complex complex10 = complex9.NaN.tan();
      Complex complex11 = complex0.negate();
      int int1 = complex11.hashCode();
      Complex complex12 = complex4.divide(0.049787066876888275);
      Complex complex13 = complex11.pow((-3293.50265958071));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(4.5909386437919143E-48);
      Complex complex1 = complex0.createComplex(4.5909386437919143E-48, 1.3004305362701416);
      Complex complex2 = Complex.valueOf(1301.592057526, 1.3004305362701416);
      Complex complex3 = Complex.valueOf(1301.592057526);
      Complex complex4 = complex3.ZERO.pow(complex0);
      Complex complex5 = complex3.ONE.conjugate();
      Complex complex6 = complex5.ONE.createComplex((-1.0), (-1869.526169));
      Complex complex7 = complex5.sin();
      Complex complex8 = complex7.INF.reciprocal();
      Complex complex9 = complex1.log();
      Complex complex10 = Complex.valueOf(685.36636721);
      Complex complex11 = complex2.I.tan();
      Complex complex12 = complex9.multiply(611);
      boolean boolean0 = complex2.isInfinite();
      Complex complex13 = complex12.tanh();
      double double0 = complex1.getReal();
      Complex complex14 = complex4.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.add(4212.0);
      int int0 = complex1.hashCode();
      Complex complex2 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex1.ZERO.pow(complex0);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.I.pow(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex7.multiply((-606.271637));
      boolean boolean0 = complex5.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1156.2011496792238), (-2360.521));
      Complex complex1 = complex0.ONE.sinh();
      double double0 = complex0.getArgument();
      Complex complex2 = Complex.valueOf(0.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.NaN.pow(complex1);
      double double1 = complex0.getArgument();
      Complex complex4 = Complex.valueOf(20.0, (-2.0262568276058013));
      double double2 = complex4.getArgument();
      Complex complex5 = complex2.log();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex0.multiply(3216);
      Complex complex8 = complex0.add(complex7);
      Complex complex9 = complex7.negate();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.I.sin();
      ComplexField complexField0 = complex0.INF.getField();
      Object object0 = complex0.readResolve();
      boolean boolean1 = complex0.equals(object0);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply((-798));
      Complex complex2 = new Complex(627.3697799963535);
      Complex complex3 = complex0.INF.subtract(complex2);
      Complex complex4 = complex2.ZERO.exp();
      double double0 = complex0.abs();
      double double1 = complex3.INF.getArgument();
      Complex complex5 = complex2.INF.createComplex((-798), 0.4709796905517578);
      double double2 = complex2.getReal();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex6.INF.asin();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex7.ZERO.pow(2274.7033713129);
      Complex complex10 = complex3.sin();
      Complex complex11 = complex1.I.tanh();
      Complex complex12 = complex10.I.sqrt();
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex13 = complex1.sinh();
      double double3 = complex6.getReal();
      Complex complex14 = complex10.I.negate();
      Complex complex15 = complex12.NaN.multiply(complex4);
      boolean boolean0 = complex2.isNaN();
      double double4 = complex10.ZERO.getArgument();
      Complex complex16 = complex2.exp();
      Complex complex17 = complex6.tanh();
      boolean boolean1 = complex0.equals(complex3);
      Complex complex18 = complex2.ZERO.tan();
      Object object0 = complex2.NaN.readResolve();
      Complex complex19 = complex12.add(complex1);
      boolean boolean2 = complex2.isNaN();
      Complex complex20 = complex6.exp();
      Complex complex21 = complex0.createComplex(627.3697799963535, Double.POSITIVE_INFINITY);
      try { 
        complex17.nthRoot((-798));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -798
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(398.4689737159396);
      Complex complex3 = complex0.ONE.negate();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex2.ZERO.sqrt1z();
      Complex complex7 = Complex.valueOf(398.4689737159396);
      Complex complex8 = complex1.add(398.4689737159396);
      Complex complex9 = complex8.ZERO.multiply(398.4689737159396);
      Complex complex10 = complex9.ONE.tanh();
      String string0 = complex9.ONE.toString();
      Complex complex11 = complex8.sin();
      Complex complex12 = complex1.sinh();
      int int0 = complex12.NaN.hashCode();
      Complex complex13 = complex7.log();
      Complex complex14 = complex1.acos();
      boolean boolean0 = complex1.equals(complex12);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1785.7999544561937, 1785.7999544561937);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = complex1.divide(1785.7999544561937);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.ONE.multiply(797.574);
      Complex complex6 = complex4.pow((-72.809));
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.cos();
      boolean boolean0 = complex3.equals((Object) null);
      Complex complex9 = Complex.valueOf((-3448.8750537), 0.0);
      Complex complex10 = complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ONE.add(complex1);
      Object object0 = complex1.ONE.readResolve();
      Complex complex3 = complex1.sqrt();
      double double0 = complex3.getArgument();
      Complex complex4 = complex1.ZERO.tanh();
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = complex3.ONE.multiply(complex0);
      boolean boolean0 = complex3.isNaN();
      Complex complex7 = complex1.subtract((-0.7853981633974483));
      Complex complex8 = complex7.NaN.divide(complex1);
      Complex complex9 = complex3.INF.multiply((-0.7853981633974483));
      Complex complex10 = complex7.tan();
      Complex complex11 = complex2.subtract(complex0);
      Complex complex12 = complex11.NaN.cosh();
      Complex complex13 = complex7.pow((-0.7853981633974483));
      List<Complex> list0 = complex1.nthRoot(2145);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.tan();
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = Complex.valueOf(1340.03);
      Complex complex3 = complex1.ZERO.createComplex(1340.03, (-229.4));
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = Complex.valueOf(0.0, (-229.4));
      ComplexField complexField0 = complex4.getField();
      Complex complex7 = complex6.atan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply(674.77);
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(3019.0, 3019.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.I.divide(complex3);
      Complex complex5 = Complex.valueOf(3019.0, (-2258.6));
      Complex complex6 = complex5.ZERO.pow((-2258.6));
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex4.cos();
      Object object0 = new Object();
      boolean boolean0 = complex8.equals(object0);
      double double0 = complex1.getReal();
      Complex complex9 = complex1.divide(0.0);
      Complex complex10 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-732.0));
      Complex complex1 = new Complex((-732.0));
      Complex complex2 = complex1.NaN.pow((-152.88095603));
      Complex complex3 = complex0.ZERO.subtract(complex1);
      List<Complex> list0 = complex0.nthRoot(1283);
      Complex complex4 = Complex.valueOf(1488.1737, (double) 1283);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.I.subtract(complex1);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.divide(complex1);
      double double0 = complex0.getReal();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.add(0.0);
      String string0 = complex4.INF.toString();
      Complex complex5 = complex4.multiply((-2636));
      Complex complex6 = complex5.ZERO.add(2.0);
      Complex complex7 = new Complex((-2636));
      Complex complex8 = complex5.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.subtract(2.0);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ONE.add((-3006.4667732822336));
      Complex complex4 = complex2.ZERO.exp();
      Complex complex5 = complex0.createComplex(2.0, 2.0);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.pow(1.0);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 0.0);
      List<Complex> list0 = complex1.nthRoot(1);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(2887.8946131572143, (-3519.08499752));
      Complex complex1 = null;
      try { 
        complex0.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = Complex.valueOf((-813.8061), 20.0);
      Complex complex2 = complex0.ONE.createComplex(20.0, 20.0);
      Complex complex3 = complex2.NaN.divide((-813.8061));
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.pow(complex0);
      double double0 = complex4.I.abs();
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = complex0.negate();
      Complex complex8 = Complex.valueOf(1.0, (-4397.92127433409));
      try { 
        complex0.nthRoot((-1736));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,736
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.I.conjugate();
      String string0 = complex0.toString();
      double double0 = complex2.getReal();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.NaN.multiply(160);
      Complex complex5 = complex1.subtract(complex3);
      Complex complex6 = Complex.I;
      boolean boolean0 = complex2.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4797.1880472649655, 0.5849615335464478);
      Complex complex1 = complex0.multiply(2114.09);
      Complex complex2 = complex0.INF.pow((-273.781));
      Complex complex3 = complex2.INF.multiply(839);
      String string0 = complex1.I.toString();
      double double0 = complex1.getArgument();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex2.multiply(839);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      Complex complex2 = complex1.ZERO.multiply(complex0);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex3 = complex0.multiply(120);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      double double0 = complex1.ONE.abs();
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex1.divide(121.142523);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex2.I.conjugate();
      Complex complex5 = complex2.log();
      int int0 = complex5.ZERO.hashCode();
      Complex complex6 = complex0.tanh();
      boolean boolean1 = complex2.isInfinite();
      Complex complex7 = complex6.divide(complex0);
      Complex complex8 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-984.818492));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.valueOf((-2327.76015765));
      Complex complex4 = complex0.acos();
      double double0 = complex0.getReal();
      Complex complex5 = complex4.multiply(738);
      int int0 = complex5.ONE.hashCode();
      String string0 = complex2.toString();
      Complex complex6 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1859.676901));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.valueOf((-1.0));
      boolean boolean0 = complex0.equals(complex4);
      Complex complex5 = complex0.NaN.createComplex((-1859.676901), (-1.0));
      Complex complex6 = complex0.INF.divide(complex4);
      Complex complex7 = complex5.ZERO.divide(0.0);
      Complex complex8 = complex0.sin();
      Complex complex9 = complex8.ONE.asin();
      double double0 = complex2.ZERO.abs();
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex3.tan();
      Complex complex12 = complex4.sinh();
      boolean boolean1 = complex8.isInfinite();
      boolean boolean2 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cosh();
      double double0 = complex1.getArgument();
      double double1 = complex0.getArgument();
      Complex complex2 = complex1.divide(226.8690211505);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex2.NaN.sin();
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1739.3), (-1739.3));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.ONE.tanh();
      Complex complex4 = complex1.divide(0.3339579105377197);
      Complex complex5 = complex4.tan();
      double double0 = complex3.getArgument();
      Complex complex6 = complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-890.87), (-541.72959808045));
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.NaN.acos();
      Object object0 = complex0.readResolve();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.pow(1.0);
      String string0 = complex2.ONE.toString();
      int int1 = complex2.ZERO.hashCode();
      Complex complex3 = complex1.multiply(1.0);
      Complex complex4 = Complex.valueOf((-890.87));
      double double1 = complex0.abs();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.NaN.subtract((-541.72959808045));
      Complex complex7 = complex5.exp();
      Complex complex8 = complex1.ONE.sinh();
      Complex complex9 = complex4.negate();
      Complex complex10 = complex1.NaN.subtract(complex5);
      Complex complex11 = complex6.multiply(complex5);
      Complex complex12 = complex4.multiply(complex0);
      Complex complex13 = complex2.acos();
      double double2 = complex9.getReal();
      Complex complex14 = complex7.tan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(9.854154449263851E-34, 9.854154449263851E-34);
      Complex complex1 = Complex.valueOf((-3191.32078681), (-3191.32078681));
      Complex complex2 = complex0.add(9.854154449263851E-34);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.ZERO.subtract(9.854154449263851E-34);
      Object object0 = complex2.readResolve();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex1.log();
      ComplexField complexField0 = complex2.getField();
      Complex complex8 = complex6.cosh();
      Complex complex9 = Complex.valueOf((-3191.32078681), (-3191.32078681));
      Complex complex10 = Complex.valueOf(9.854154449263851E-34);
      Complex complex11 = complex7.asin();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.divide((-1309.1784));
      Complex complex4 = complex3.NaN.tan();
      double double0 = complex0.getReal();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex4.multiply(750);
      Complex complex9 = complex1.subtract(0.0);
      Complex complex10 = complex7.pow(Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.cosh();
      Object object0 = complex2.readResolve();
      double double0 = complex0.getArgument();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex3.NaN.pow(0.7853981633974483);
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex0.divide(complex6);
      double double1 = complex1.getReal();
      List<Complex> list0 = complex0.nthRoot(7);
      Complex complex8 = complex7.sqrt();
      double double2 = complex2.getReal();
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1408.2093699), (-1408.2093699));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.ONE.divide(complex0);
      Complex complex7 = complex5.INF.exp();
      Complex complex8 = complex5.cos();
      boolean boolean0 = complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(1968.4270045814);
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex1.reciprocal();
      double double0 = complex0.getImaginary();
      double double1 = complex4.abs();
      Complex complex5 = complex1.pow(20.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3137214081023085E-8, 2939.896307408392);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex0.ZERO.conjugate();
      double double0 = complex0.abs();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex3.multiply(2939.896307408392);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex1.multiply(1156);
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1645.459479322), (-1645.459479322));
      double double0 = complex0.INF.abs();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.multiply((-1645.459479322));
      boolean boolean0 = complex2.isNaN();
      Complex complex4 = complex0.log();
      Complex complex5 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.negate();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex1.ZERO.multiply((-1342));
      Complex complex3 = complex1.INF.conjugate();
      Complex complex4 = complex1.INF.negate();
      double double0 = complex1.getArgument();
      Complex complex5 = new Complex(0.0);
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.ONE.multiply(360);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5565.19137174), (-5565.19137174));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.divide((-5565.19137174));
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(337.1313998, 337.1313998);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.I.tan();
      String string0 = complex2.ONE.toString();
      Complex complex5 = complex0.subtract(Double.NaN);
      Complex complex6 = complex0.multiply((-7.206766550807255E-8));
      Complex complex7 = complex6.ONE.cosh();
      double double0 = complex2.getReal();
      Complex complex8 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3367.964641756829), (-3367.964641756829));
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = Complex.valueOf((-3216.02));
      Complex complex3 = Complex.valueOf((-3216.02));
      boolean boolean0 = complex0.equals(complex2);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex2.multiply((-3367.964641756829));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-3361.309279));
      String string0 = complex0.NaN.toString();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex3.ONE.multiply(227);
      Complex complex5 = complex4.I.tan();
      Complex complex6 = Complex.valueOf(0.0, (-3361.309279));
      Complex complex7 = complex1.NaN.multiply(2.0);
      Complex complex8 = complex7.ZERO.negate();
      double double0 = complex1.getReal();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex7.createComplex((-3361.309279), 227);
      Complex complex11 = complex10.ONE.sqrt1z();
      Complex complex12 = complex10.acos();
      double double1 = complex7.getReal();
      Complex complex13 = complex10.ONE.conjugate();
      Complex complex14 = complex9.tanh();
      double double2 = complex4.abs();
      Complex complex15 = complex4.negate();
      Complex complex16 = complex0.exp();
      Complex complex17 = complex12.negate();
      Complex complex18 = complex2.asin();
      Complex complex19 = complex11.acos();
      Complex complex20 = complex16.cosh();
      Complex complex21 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.add(22.1);
      Complex complex3 = Complex.valueOf(0.17759034037590027, (-654.2));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.add(0.13414156436920166);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-796.1580339359531), 2094.95484);
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(896.795);
      Complex complex1 = new Complex(896.795);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-561.798784), (-561.798784));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(3074.3732114899544);
      Complex complex1 = complex0.NaN.multiply(0.0);
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.INF.subtract(complex2);
      Complex complex4 = complex0.tan();
      List<Complex> list0 = complex1.ONE.nthRoot(1);
      Complex complex5 = complex4.NaN.add(0.0);
      Complex complex6 = complex5.INF.tanh();
      ComplexField complexField0 = complex6.ONE.getField();
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex8.ONE.log();
      Complex complex10 = complex9.INF.sqrt1z();
      Complex complex11 = complex2.log();
      Complex complex12 = complex5.log();
      Complex complex13 = complex12.conjugate();
      Complex complex14 = complex2.INF.tanh();
      Complex complex15 = complex3.cos();
      Complex complex16 = complex15.I.subtract(complex3);
      boolean boolean0 = complex11.equals(complex12);
      Complex complex17 = complex15.acos();
      double double0 = complex7.abs();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.createComplex(2.0, 2.0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.divide(2.0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.INF.getField();
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.NaN.add(0.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex2.tanh();
      boolean boolean1 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-85.034600850768), 1.2123659952129223E9);
      Complex complex1 = Complex.valueOf(390.0);
      Complex complex2 = complex1.createComplex((-85.034600850768), (-798152.2451942853));
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = Complex.valueOf(0.5590575933456421, 0.5590575933456421);
      Object object0 = complex3.readResolve();
      Object object1 = complex1.readResolve();
      Complex complex6 = complex3.createComplex((-85.034600850768), 1.2123659952129223E9);
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex7.ONE.asin();
      List<Complex> list0 = complex6.NaN.nthRoot(3228);
      Complex complex9 = complex7.INF.divide((-1526.97351613142));
      Complex complex10 = complex4.add(complex6);
      Complex complex11 = complex8.tan();
      Complex complex12 = complex11.asin();
      Complex complex13 = complex11.pow((-1.696746473863933E-8));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.ZERO.atan();
      Complex complex5 = complex0.I.sqrt();
      Complex complex6 = complex2.ZERO.divide(complex3);
      Complex complex7 = complex6.multiply(1);
      double double0 = complex5.ZERO.getArgument();
      Complex complex8 = complex1.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = complex3.ZERO.pow((-2270.3));
      Complex complex10 = complex0.INF.sqrt1z();
      Complex complex11 = complex10.sin();
      Complex complex12 = complex0.multiply((-2270.3));
      Object object0 = complex11.ZERO.readResolve();
      Complex complex13 = complex1.cos();
      Complex complex14 = complex13.INF.divide(complex2);
      double double1 = complex3.abs();
      Complex complex15 = complex3.subtract(complex5);
      try { 
        complex10.nthRoot((-233));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -233
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.divide(Double.NaN);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.tanh();
      double double0 = complex1.getReal();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex0.ZERO.add(complex1);
      Complex complex6 = complex4.ZERO.pow(0.0);
      Complex complex7 = new Complex(Double.NaN, Double.NaN);
      Complex complex8 = complex4.ZERO.pow(complex7);
      Complex complex9 = complex8.negate();
      Complex complex10 = complex4.ONE.atan();
      Complex complex11 = complex10.exp();
      Complex complex12 = complex3.acos();
      Complex complex13 = complex10.ONE.asin();
      Complex complex14 = complex12.INF.asin();
      ComplexField complexField0 = complex2.getField();
      Complex complex15 = complex2.conjugate();
      Complex complex16 = Complex.valueOf(Double.NaN, 20.0);
      List<Complex> list0 = complex14.nthRoot(1971);
      Complex complex17 = complex10.add(0.0);
      Complex complex18 = complex17.ZERO.asin();
      Complex complex19 = complex17.acos();
      boolean boolean0 = complex4.isInfinite();
      Complex complex20 = complex12.createComplex(0.0, Double.NaN);
      ComplexField complexField1 = complex14.getField();
      Object object0 = complex10.readResolve();
      Complex complex21 = complex12.ONE.log();
      Complex complex22 = complex14.asin();
      Complex complex23 = complex22.INF.divide(0.0);
      Complex complex24 = complex23.ONE.asin();
      boolean boolean1 = complex14.isNaN();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex2.INF.cosh();
      double double0 = complex1.ONE.getArgument();
      Complex complex4 = complex1.ONE.add(complex0);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex3.ZERO.divide(0.0);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.INF.pow(complex1);
      Complex complex9 = complex8.ZERO.sqrt1z();
      Complex complex10 = complex8.INF.pow(complex1);
      Complex complex11 = complex8.divide(complex0);
      int int0 = complex0.hashCode();
      Complex complex12 = complex0.atan();
      Complex complex13 = complex5.tan();
      Complex complex14 = complex4.log();
      Complex complex15 = complex12.exp();
      Complex complex16 = complex12.multiply(complex4);
      Complex complex17 = complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.INF.pow(20.0);
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex4.ONE.tan();
      Complex complex7 = complex0.sqrt1z();
      int int0 = complex7.I.hashCode();
      Complex complex8 = complex7.cos();
      Complex complex9 = complex3.pow((-959.455731));
      Complex complex10 = complex9.add((-452.6892850377688));
      Complex complex11 = complex3.ONE.divide(complex0);
      double double0 = complex0.INF.abs();
      Complex complex12 = Complex.valueOf(0.0, (-1478.3639197));
      Complex complex13 = complex9.ZERO.reciprocal();
      List<Complex> list0 = complex12.I.nthRoot(1);
      double double1 = complex1.abs();
      Complex complex14 = complex9.tan();
      Complex complex15 = complex12.tanh();
      Complex complex16 = Complex.valueOf((-959.455731));
      Complex complex17 = complex7.sqrt1z();
      Complex complex18 = complex5.acos();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(1474.1);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.divide(complex0);
      double double0 = (-1273.00265444);
      Complex complex3 = Complex.valueOf((-1273.00265444), 757.6);
      double double1 = complex0.getArgument();
      int int0 = (-1192);
      try { 
        complex0.nthRoot((-1192));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,192
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex0.multiply(37);
      Complex complex5 = complex2.negate();
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = complex5.multiply(0.0);
      Complex complex8 = complex7.INF.sinh();
      Complex complex9 = complex0.createComplex(0.0, 0.0);
      Complex complex10 = complex1.NaN.exp();
      Complex complex11 = complex0.ZERO.exp();
      Complex complex12 = complex11.ONE.acos();
      Complex complex13 = complex9.ZERO.createComplex(Double.NaN, 0.0);
      Complex complex14 = complex5.pow(Double.NaN);
      String string0 = complex5.INF.toString();
      Complex complex15 = complex9.ZERO.createComplex(0.0, (-2.3580462372762525E-230));
      Complex complex16 = complex1.acos();
      Complex complex17 = complex2.INF.atan();
      Complex complex18 = complex0.exp();
      Complex complex19 = complex12.NaN.conjugate();
      Complex complex20 = complex19.ONE.add(0.0);
      Object object0 = complex5.readResolve();
      boolean boolean0 = complex6.equals(object0);
      Complex complex21 = complex16.pow(complex0);
      List<Complex> list0 = complex13.nthRoot(37);
      List<Complex> list1 = complex1.nthRoot(37);
      boolean boolean1 = complex16.equals(list0);
      Object object1 = complex6.readResolve();
      ComplexField complexField0 = complex12.getField();
      Complex complex22 = complex21.asin();
      Complex complex23 = complex10.cosh();
      Complex complex24 = complex0.multiply(complex6);
      Complex complex25 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex((-286.6));
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex0.multiply((-286.6));
      Complex complex4 = complex3.NaN.multiply(0.2983669638633728);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex4.INF.tan();
      Complex complex7 = complex3.ONE.atan();
      Complex complex8 = complex3.multiply(1144);
      boolean boolean0 = complex2.equals(complex3);
      Complex complex9 = Complex.valueOf(711.36287500326);
      Complex complex10 = complex1.divide(complex0);
      Complex complex11 = complex10.sqrt();
      Complex complex12 = complex3.multiply(complex0);
      Complex complex13 = complex1.cosh();
      Complex complex14 = complex4.tan();
      Complex complex15 = complex3.multiply((-2976));
      Complex complex16 = complex9.sinh();
      Object object1 = complex16.I.readResolve();
      Complex complex17 = complex4.add(complex12);
      Complex complex18 = complex8.tan();
      String string0 = complex17.toString();
      Complex complex19 = complex1.negate();
      double double0 = complex3.getReal();
      Complex complex20 = complex18.acos();
      Complex complex21 = complex6.conjugate();
      double double1 = complex15.getArgument();
      Complex complex22 = complex18.subtract((-286.6));
      Complex complex23 = complex9.cosh();
      Complex complex24 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-92.536069));
      Complex complex1 = complex0.createComplex((-92.536069), (-2159.7519));
      String string0 = complex1.INF.toString();
      Complex complex2 = complex1.INF.tan();
      double double0 = complex1.I.abs();
      Complex complex3 = Complex.valueOf((-754.2812), (-2159.7519));
      List<Complex> list0 = complex1.nthRoot(1);
      int int0 = complex0.NaN.hashCode();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex0.NaN.createComplex((-2159.7519), 1);
      Complex complex7 = complex4.I.exp();
      Complex complex8 = complex0.ONE.sin();
      Complex complex9 = complex4.ONE.divide(0.36358463764190674);
      Complex complex10 = complex0.ONE.reciprocal();
      Complex complex11 = complex9.I.pow((double) 1);
      double double1 = complex0.getImaginary();
      Complex complex12 = complex9.cos();
      Complex complex13 = complex12.negate();
      Complex complex14 = complex11.sin();
      Complex complex15 = complex14.I.multiply(3148);
      double double2 = complex4.getReal();
      Complex complex16 = complex11.sqrt1z();
      Complex complex17 = complex0.sqrt1z();
      double double3 = complex4.getImaginary();
      Complex complex18 = complex4.negate();
      Complex complex19 = complex10.acos();
      Complex complex20 = complex9.sqrt();
      Complex complex21 = complex6.divide(complex15);
      Complex complex22 = complex12.divide(complex21);
  }
}
