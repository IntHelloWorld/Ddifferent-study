/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 01:52:49 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.multiply(1661.8635335297);
      Complex complex5 = complex3.NaN.negate();
      Complex complex6 = complex2.divide(complex1);
      Complex complex7 = complex0.divide((-3718.97541505));
      Complex complex8 = complex7.I.cosh();
      Complex complex9 = Complex.valueOf((-3718.97541505));
      Complex complex10 = complex7.ONE.divide(Double.POSITIVE_INFINITY);
      Object object0 = complex0.readResolve();
      Complex complex11 = complex10.NaN.multiply(1600);
      Complex complex12 = complex1.subtract((-3718.97541505));
      Complex complex13 = complex12.ONE.asin();
      ComplexField complexField0 = complex12.INF.getField();
      Complex complex14 = complex1.I.sqrt();
      Complex complex15 = complex6.sqrt1z();
      Complex complex16 = complex1.NaN.cos();
      Complex complex17 = complex2.sinh();
      Complex complex18 = complex1.pow((-3718.97541505));
      Complex complex19 = complex6.sqrt1z();
      Object object1 = complex7.readResolve();
      Complex complex20 = complex7.acos();
      Complex complex21 = complex3.multiply((-3718.97541505));
      double double0 = complex15.abs();
      Complex complex22 = complex2.conjugate();
      Complex complex23 = complex17.multiply(1600);
      Complex complex24 = complex4.sinh();
      List<Complex> list0 = complex11.nthRoot(1600);
      Complex complex25 = complex2.tan();
      Complex complex26 = complex1.asin();
      Complex complex27 = complex20.divide(complex18);
      Complex complex28 = complex10.multiply(complex9);
      Complex complex29 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex0.multiply((-2348));
      Complex complex5 = complex1.pow(0.0);
      double double0 = complex1.getArgument();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex1.exp();
      Object object0 = complex7.readResolve();
      Complex complex8 = complex5.pow(3.8656278695544835E114);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex1.INF.pow(complex2);
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex2.ONE.cos();
      Complex complex6 = complex2.INF.add(0.0);
      Complex complex7 = complex6.add(complex4);
      Complex complex8 = Complex.valueOf((-2705.966), 0.0);
      Complex complex9 = complex6.INF.createComplex(0.0, 0.0);
      Complex complex10 = complex2.NaN.acos();
      Complex complex11 = complex10.I.multiply(complex0);
      String string0 = complex0.toString();
      Complex complex12 = complex1.createComplex(0.0, 0.0);
      Complex complex13 = complex12.NaN.sin();
      double double1 = complex12.getArgument();
      Complex complex14 = complex10.add(0.0);
      Complex complex15 = complex4.tan();
      Complex complex16 = complex14.NaN.subtract(complex9);
      Complex complex17 = complex3.ZERO.sinh();
      Complex complex18 = complex15.cosh();
      Complex complex19 = complex14.cosh();
      Complex complex20 = complex2.sqrt1z();
      Complex complex21 = complex7.pow((-1.6379825102473853E-8));
      Complex complex22 = complex1.atan();
      double double2 = complex0.getReal();
      Complex complex23 = complex0.sin();
      Complex complex24 = complex23.cos();
      ComplexField complexField0 = complex7.getField();
      Object object0 = complex8.readResolve();
      Object object1 = complex24.readResolve();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.I.divide(0.0);
      Complex complex2 = new Complex(20.0, 20.0);
      boolean boolean0 = complex0.equals(complex2);
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex1.pow(0.0);
      Complex complex5 = complex0.NaN.cos();
      Complex complex6 = complex1.log();
      Complex complex7 = complex4.pow(complex6);
      Complex complex8 = complex1.negate();
      boolean boolean1 = complex5.isNaN();
      Complex complex9 = complex1.subtract(complex7);
      Complex complex10 = complex5.negate();
      Complex complex11 = complex6.conjugate();
      Complex complex12 = complex5.multiply(1);
      Complex complex13 = complex11.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, Double.NaN);
      Complex complex2 = complex1.ZERO.createComplex(0.0, 1078.736);
      Complex complex3 = complex0.asin();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex0.add(complex4);
      Complex complex7 = complex6.NaN.sinh();
      Complex complex8 = complex0.subtract((-3882.1546688));
      Complex complex9 = complex8.NaN.divide(0.0);
      Complex complex10 = complex4.ONE.add(complex5);
      Complex complex11 = complex6.sqrt1z();
      Complex complex12 = complex7.cos();
      Complex complex13 = complex8.ONE.add(complex12);
      Complex complex14 = complex12.INF.multiply(0.0);
      boolean boolean0 = complex3.isInfinite();
      Complex complex15 = complex10.pow(complex2);
      Complex complex16 = complex9.divide(2471.4);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, (-1035.546724558345));
      Object object0 = complex0.I.readResolve();
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.NaN.tan();
      String string0 = complex1.toString();
      Complex complex6 = complex1.I.sin();
      Object object1 = complex0.readResolve();
      Complex complex7 = complex6.I.pow(6.283185307179586);
      double double1 = complex1.getImaginary();
      boolean boolean0 = complex6.isNaN();
      Complex complex8 = complex7.ONE.sqrt();
      Complex complex9 = complex7.ONE.pow(183.352);
      Complex complex10 = complex9.I.add(complex2);
      Complex complex11 = complex6.log();
      Complex complex12 = complex10.INF.exp();
      Complex complex13 = complex7.ONE.reciprocal();
      Complex complex14 = complex0.log();
      Complex complex15 = complex14.I.subtract(complex2);
      Complex complex16 = complex15.NaN.subtract(complex11);
      Complex complex17 = complex7.sqrt1z();
      Complex complex18 = complex17.add(6.283185307179586);
      double double2 = complex7.getReal();
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.ONE.getField();
      int int0 = complex0.INF.hashCode();
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ZERO.subtract(Double.NaN);
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex3.NaN.sqrt1z();
      Complex complex6 = complex5.ZERO.conjugate();
      Complex complex7 = complex0.tanh();
      int int1 = complex7.ZERO.hashCode();
      Complex complex8 = complex7.ZERO.createComplex(Double.NaN, 0.0);
      Complex complex9 = complex7.INF.negate();
      Complex complex10 = complex9.I.negate();
      Complex complex11 = complex0.multiply(complex7);
      Complex complex12 = complex11.cos();
      boolean boolean0 = complex11.isNaN();
      ComplexField complexField1 = complex7.NaN.getField();
      String string0 = complex11.toString();
      Complex complex13 = complex9.sinh();
      double double1 = complex10.getArgument();
      Complex complex14 = complex7.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(404.0, 404.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex4.ZERO.exp();
      Complex complex8 = complex7.ZERO.tanh();
      Complex complex9 = complex0.exp();
      Complex complex10 = complex9.add(complex4);
      List<Complex> list0 = complex10.NaN.nthRoot(1304);
      Complex complex11 = complex10.ONE.tan();
      List<Complex> list1 = complex5.nthRoot(1230);
      Complex complex12 = complex1.exp();
      Complex complex13 = new Complex(404.0, 1.0631452452119587);
      Complex complex14 = complex9.subtract(complex13);
      Complex complex15 = complex14.ONE.divide(1.0631452452119587);
      Complex complex16 = complex2.multiply((-1101));
      Complex complex17 = complex2.sqrt();
      Complex complex18 = complex13.pow(2.0);
      Complex complex19 = complex9.exp();
      Complex complex20 = complex19.add(complex9);
      Complex complex21 = complex5.pow((double) 1230);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.6195123407015624E-7, (-1291.7880703));
      List<Complex> list0 = complex0.INF.nthRoot(1428);
      Complex complex1 = complex0.pow((-1291.7880703));
      Complex complex2 = complex1.I.acos();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.8613847754677912E-9), (-1.8613847754677912E-9));
      Complex complex1 = complex0.cosh();
      String string0 = complex0.toString();
      Complex complex2 = complex0.sinh();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex0.subtract(complex1);
      boolean boolean0 = complex1.equals(object0);
      Complex complex4 = complex1.I.pow(complex3);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex5.add((-1.8613847754677912E-9));
      boolean boolean1 = complex1.equals(complex0);
      double double0 = complex5.abs();
      boolean boolean2 = complex0.isNaN();
      Complex complex8 = complex0.pow(complex2);
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex9 = complex7.add(complex2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.ZERO.divide(0.43812888860702515);
      Complex complex3 = complex2.NaN.subtract(0.43812888860702515);
      Complex complex4 = complex1.I.sinh();
      Complex complex5 = complex1.ZERO.createComplex(0.43812888860702515, 20.0);
      Complex complex6 = complex0.negate();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.log();
      Complex complex9 = complex8.NaN.sqrt1z();
      Complex complex10 = complex9.I.subtract(complex0);
      Complex complex11 = complex4.asin();
      Complex complex12 = complex9.ONE.sinh();
      Complex complex13 = complex1.INF.multiply(complex12);
      Complex complex14 = complex13.NaN.add(complex4);
      try { 
        complex2.ONE.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(5.58344159);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex2.ONE.add(0.0);
      Complex complex5 = complex2.INF.cos();
      Complex complex6 = complex0.NaN.subtract(1.5069412868172555E-236);
      Complex complex7 = complex0.multiply(338);
      double double0 = complex2.I.abs();
      Complex complex8 = complex7.INF.subtract(complex1);
      Complex complex9 = complex7.I.subtract(0.0);
      Complex complex10 = complex2.multiply(complex3);
      Complex complex11 = Complex.valueOf((-791.9687), Double.POSITIVE_INFINITY);
      Complex complex12 = Complex.valueOf((-791.9687));
      Complex complex13 = complex12.ZERO.pow(complex6);
      Complex complex14 = complex13.ZERO.sinh();
      Complex complex15 = complex14.divide(2627.71654138);
      Complex complex16 = complex4.asin();
      Complex complex17 = complex16.add(Double.NaN);
      double double1 = complex8.getArgument();
      String string0 = complex0.toString();
      Complex complex18 = Complex.valueOf(Double.NaN);
      boolean boolean0 = complex12.equals(complex7);
      Complex complex19 = complex6.multiply((-1376.30275));
      Complex complex20 = complex9.createComplex((-2212.716), Double.NaN);
      Complex complex21 = complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.multiply(812);
      Complex complex4 = complex1.subtract(complex0);
      double double0 = complex0.abs();
      Complex complex5 = Complex.valueOf((double) 812);
      Complex complex6 = complex2.ZERO.exp();
      Complex complex7 = Complex.valueOf(6.283185307179586);
      double double1 = complex2.getReal();
      Complex complex8 = complex1.divide(complex4);
      Complex complex9 = complex8.ZERO.negate();
      Complex complex10 = complex8.ZERO.cos();
      Complex complex11 = complex8.ZERO.asin();
      Complex complex12 = complex3.sinh();
      Complex complex13 = complex12.INF.divide(1.0);
      Complex complex14 = complex3.reciprocal();
      int int0 = complex12.hashCode();
      Complex complex15 = complex4.multiply(812);
      Complex complex16 = complex4.INF.subtract(complex11);
      Complex complex17 = complex16.I.add(complex5);
      Complex complex18 = complex15.ONE.negate();
      Complex complex19 = complex18.ONE.multiply(complex16);
      int int1 = complex2.hashCode();
      boolean boolean0 = complex1.isNaN();
      Complex complex20 = complex15.conjugate();
      boolean boolean1 = complex9.isNaN();
      String string0 = complex15.toString();
      Complex complex21 = complex15.multiply(1380);
      Complex complex22 = complex21.conjugate();
      String string1 = complex1.toString();
      Complex complex23 = complex21.divide(complex14);
      Complex complex24 = complex23.sqrt1z();
      double double2 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex2.ONE.subtract(3642.55);
      Complex complex4 = complex3.NaN.asin();
      int int0 = complex0.NaN.hashCode();
      Complex complex5 = new Complex(3642.55);
      Complex complex6 = complex3.INF.pow(complex5);
      double double0 = complex0.getArgument();
      Complex complex7 = complex2.divide(complex0);
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.add((-2649.9));
      double double1 = complex1.getReal();
      Complex complex10 = complex3.log();
      boolean boolean0 = complex8.isInfinite();
      boolean boolean1 = complex10.isNaN();
      Complex complex11 = complex10.add(0.0);
      Complex complex12 = complex1.tan();
      double double2 = 0.0;
      Complex complex13 = complex12.NaN.subtract(0.0);
      Complex complex14 = complex13.I.add(complex4);
      Complex complex15 = complex2.I.pow(3642.55);
      try { 
        complex12.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1278.883969265587));
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-2.1335475961524608E-7));
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex((-3156.468), (-2.1335475961524608E-7));
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.I.add(complex2);
      Complex complex5 = complex2.ONE.log();
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex0.createComplex((-1067.5256), 4199.12604830884);
      Complex complex8 = complex7.asin();
      Complex complex9 = complex0.multiply(1796);
      double double0 = complex4.abs();
      Complex complex10 = complex2.cos();
      Complex complex11 = complex10.ZERO.createComplex((-1241.0), 4199.12604830884);
      Complex complex12 = complex10.NaN.exp();
      Complex complex13 = complex2.negate();
      Complex complex14 = complex0.pow(complex1);
      Complex complex15 = complex14.divide(complex13);
      Complex complex16 = complex2.negate();
      Complex complex17 = complex10.sqrt();
      Complex complex18 = complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex2.pow(complex4);
      Object object0 = complex6.NaN.readResolve();
      Complex complex7 = complex1.subtract(complex2);
      Complex complex8 = complex7.ZERO.conjugate();
      Complex complex9 = complex3.cosh();
      Complex complex10 = complex9.ZERO.sinh();
      Complex complex11 = complex3.acos();
      Complex complex12 = complex11.multiply(1184);
      Complex complex13 = complex0.multiply((-1148.738936));
      Complex complex14 = complex13.reciprocal();
      Complex complex15 = complex14.pow(0.1428571343421936);
      Complex complex16 = complex11.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.INF.multiply((-7.698155155722897E-8));
      Complex complex4 = complex2.NaN.add(complex1);
      Complex complex5 = complex0.add((-2237.355899567));
      Complex complex6 = complex1.add(complex5);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.I.divide((-2655.446999338224));
      Complex complex9 = complex7.NaN.tanh();
      double double0 = complex5.getReal();
      Complex complex10 = Complex.I;
      List<Complex> list0 = complex3.ONE.nthRoot(2802);
      Complex complex11 = complex10.INF.sin();
      Complex complex12 = complex3.pow(complex10);
      Complex complex13 = complex6.atan();
      Complex complex14 = Complex.I;
      // Undeclared exception!
      complex0.ONE.nthRoot(2802);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.I.add((-3616.8368949095));
      Complex complex6 = complex1.ZERO.multiply(complex3);
      Complex complex7 = new Complex((-3616.8368949095));
      Complex complex8 = complex7.tanh();
      Object object0 = complex7.readResolve();
      Complex complex9 = complex8.ONE.log();
      boolean boolean0 = complex8.equals(object0);
      Complex complex10 = complex8.divide(complex7);
      Complex complex11 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = new Complex(0.0, (-1329.74824566));
      String string0 = complex0.I.toString();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex4.ZERO.divide(0.0);
      Complex complex6 = complex3.sin();
      double double0 = complex2.getArgument();
      Complex complex7 = complex2.log();
      Complex complex8 = complex6.createComplex((-1329.74824566), 0.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-232.20496906));
      Complex complex4 = complex2.divide((-518.6324623));
      double double0 = complex2.NaN.getArgument();
      Complex complex5 = complex4.INF.divide(Double.POSITIVE_INFINITY);
      double double1 = complex5.I.abs();
      Object object0 = complex4.INF.readResolve();
      Complex complex6 = complex0.ONE.negate();
      Complex complex7 = complex1.I.sqrt();
      Complex complex8 = complex1.ONE.cos();
      double double2 = complex0.getArgument();
      double double3 = complex0.getReal();
      Complex complex9 = complex1.add(complex8);
      Complex complex10 = complex8.ZERO.tanh();
      Complex complex11 = complex8.ZERO.sqrt1z();
      Complex complex12 = complex0.ZERO.conjugate();
      Complex complex13 = complex12.I.multiply((-1.0));
      Complex complex14 = complex4.conjugate();
      Complex complex15 = complex14.divide(complex7);
      Complex complex16 = complex9.subtract(complex4);
      double double4 = complex1.abs();
      boolean boolean0 = complex1.isNaN();
      Complex complex17 = complex11.add(839.06053401);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex0.NaN.log();
      Complex complex6 = complex4.add(6587.450630146598);
      Complex complex7 = complex4.INF.cosh();
      Complex complex8 = complex7.INF.asin();
      Complex complex9 = complex0.I.sqrt1z();
      double double0 = complex2.ONE.abs();
      String string0 = complex9.I.toString();
      Complex complex10 = complex9.INF.tan();
      Complex complex11 = complex9.INF.multiply(complex3);
      Complex complex12 = complex11.ZERO.conjugate();
      double double1 = complex0.getReal();
      Complex complex13 = complex0.subtract(Double.NaN);
      Complex complex14 = complex0.conjugate();
      Complex complex15 = complex14.INF.sqrt();
      Complex complex16 = complex13.conjugate();
      Complex complex17 = complex16.divide(2093.34014391);
      Complex complex18 = complex13.sqrt();
      Complex complex19 = complex13.cosh();
      boolean boolean0 = complex18.isInfinite();
      Complex complex20 = complex19.tanh();
      Complex complex21 = complex20.reciprocal();
      ComplexField complexField1 = complex21.getField();
      Complex complex22 = complex21.multiply(complex20);
      double double2 = complex2.getReal();
      double double3 = complex13.getReal();
      double double4 = complex21.getArgument();
      Complex complex23 = complex18.pow(1068.805066);
      boolean boolean1 = complex0.equals(complex2);
      Complex complex24 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(2807.913788019949, 2807.913788019949);
      Complex complex1 = complex0.NaN.multiply(1.057380684430436E-215);
      Complex complex2 = complex0.NaN.createComplex(2807.913788019949, 2807.913788019949);
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex0.ONE.createComplex(3908.5922, 1.057380684430436E-215);
      Object object0 = complex2.I.readResolve();
      double double0 = complex0.abs();
      Complex complex6 = complex0.subtract(3970.989760992224);
      Complex complex7 = complex1.ZERO.conjugate();
      Complex complex8 = Complex.valueOf(2807.913788019949, 1.057380684430436E-215);
      Object object1 = complex8.ZERO.readResolve();
      double double1 = complex5.ZERO.getArgument();
      Complex complex9 = complex6.ONE.multiply(1641.3216);
      Object object2 = complex6.I.readResolve();
      Complex complex10 = complex1.I.cos();
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex9.INF.cosh();
      Complex complex13 = complex5.cosh();
      int int0 = complex4.hashCode();
      Complex complex14 = complex9.sqrt1z();
      Complex complex15 = complex2.INF.conjugate();
      Complex complex16 = complex14.asin();
      Complex complex17 = complex2.pow(complex0);
      Complex complex18 = Complex.valueOf(1.057380684430436E-215, 2807.913788019949);
      boolean boolean0 = complex4.isNaN();
      Complex complex19 = complex1.acos();
      Complex complex20 = complex19.ZERO.asin();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ONE.abs();
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.NaN.add(1.0);
      Complex complex2 = complex0.ZERO.createComplex((-269.3), 1.0);
      double double1 = complex0.getArgument();
      Complex complex3 = null;
      Complex complex4 = complex0.reciprocal();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(2.2844135610697528E222);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.negate();
      int int0 = complex2.I.hashCode();
      Complex complex3 = complex0.divide(complex1);
      Object object0 = complex1.readResolve();
      Object object1 = complex0.ONE.readResolve();
      Object object2 = complex3.readResolve();
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = Complex.valueOf(2.2844135610697528E222, 2.2844135610697528E222);
      Complex complex5 = complex0.divide(0.0);
      Complex complex6 = complex5.ZERO.reciprocal();
      Complex complex7 = complex2.divide(2782.331920087);
      Complex complex8 = complex7.ONE.tan();
      Complex complex9 = Complex.valueOf(2.2844135610697528E222);
      boolean boolean1 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = Complex.valueOf(0.0, (-377.1981265968));
      Complex complex4 = Complex.valueOf((-452.76525685));
      Complex complex5 = complex0.multiply((-452.76525685));
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex6 = complex3.multiply(824);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex6.tan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3648.6816), (-767.87));
      Complex complex1 = complex0.NaN.multiply((-767.87));
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex0.INF.conjugate();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.ZERO.tanh();
      double double0 = complex7.NaN.abs();
      ComplexField complexField0 = complex7.INF.getField();
      Complex complex8 = complex3.divide(complex6);
      Complex complex9 = complex8.INF.pow(complex1);
      Complex complex10 = complex8.ZERO.tan();
      Complex complex11 = complex4.sqrt();
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex10.subtract(complex12);
      Complex complex14 = complex1.divide((-3648.6816));
      Complex complex15 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.739491336852633E-8), 2.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = Complex.valueOf(2989.016549384393, (-7.739491336852633E-8));
      int int0 = complex3.INF.hashCode();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex5.NaN.subtract(934.31);
      Complex complex7 = complex6.INF.divide(2989.016549384393);
      Complex complex8 = complex5.ONE.multiply(2.0);
      Complex complex9 = complex0.asin();
      double double0 = complex6.abs();
      Complex complex10 = complex9.ONE.sin();
      Complex complex11 = complex9.ZERO.cosh();
      Complex complex12 = complex9.multiply(0.0);
      Complex complex13 = complex5.divide((-778.5004777));
      Complex complex14 = complex0.ONE.sqrt();
      try { 
        complex9.nthRoot((-1676));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,676
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply((-1.0));
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex1.INF.divide(complex0);
      Complex complex4 = new Complex(1522.181083038699, 2.169306470354036E242);
      Complex complex5 = Complex.valueOf(4576.346087474965);
      Complex complex6 = complex4.NaN.multiply(complex0);
      Complex complex7 = complex0.divide(complex4);
      String string0 = complex0.toString();
      Complex complex8 = complex7.divide((-1.0));
      Complex complex9 = complex4.divide(2.169306470354036E242);
      Complex complex10 = complex9.NaN.sqrt();
      Complex complex11 = complex9.INF.multiply(1522.181083038699);
      Complex complex12 = complex1.log();
      boolean boolean0 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex0.conjugate();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex6 = complex2.ZERO.multiply(1);
      try { 
        complex2.INF.nthRoot((-1470));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,470
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(1951.416);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex3.pow(complex0);
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex2.ONE.tanh();
      Complex complex8 = complex5.I.cos();
      Complex complex9 = complex2.reciprocal();
      Complex complex10 = complex2.I.pow(6.283185307179586);
      Complex complex11 = complex9.sin();
      String string0 = complex9.ONE.toString();
      int int0 = complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 1890.8585);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex1.ONE.add(complex0);
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3519.424177);
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex0.I.subtract(2.1226166967029073E57);
      Complex complex4 = complex0.add(complex1);
      double double1 = complex0.getArgument();
      double double2 = complex0.getArgument();
      Complex complex5 = complex1.INF.createComplex(3519.424177, 0.0);
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex6.ZERO.cosh();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-539.0781572210595));
      Complex complex1 = complex0.ZERO.divide(Double.NaN);
      Complex complex2 = complex1.sinh();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ONE.sqrt1z();
      Object object1 = complex3.ONE.readResolve();
      Complex complex5 = complex3.I.negate();
      Complex complex6 = complex3.I.createComplex(Double.POSITIVE_INFINITY, 0.36222589015960693);
      Complex complex7 = complex6.I.createComplex(Double.NaN, 0.36222589015960693);
      double double0 = complex3.INF.abs();
      Complex complex8 = complex3.I.add(complex0);
      Complex complex9 = complex8.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex0.conjugate();
      Complex complex11 = Complex.valueOf(Double.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.INF.divide(505.509506271308);
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.I.add(complex4);
      Complex complex6 = complex1.ONE.add((-167.15));
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.I.exp();
      boolean boolean0 = complex0.isInfinite();
      Object object0 = complex0.readResolve();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex1.tan();
      String string0 = complex10.NaN.toString();
      List<Complex> list0 = complex10.NaN.nthRoot(1025);
      double double0 = complex1.getReal();
      boolean boolean1 = complex9.isInfinite();
      Complex complex11 = complex2.acos();
      boolean boolean2 = complex2.isNaN();
      Complex complex12 = complex6.multiply(Double.NaN);
      Complex complex13 = Complex.valueOf((-223.0781435659076), (-167.15));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(3.4439717236742845E-8);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.ONE.asin();
      double double0 = complex1.ZERO.getArgument();
      double double1 = complex1.getImaginary();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.INF.subtract(complex2);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex4.subtract(complex0);
      Complex complex8 = complex6.negate();
      Complex complex9 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, (-929.78418152109));
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex1.NaN.multiply(7);
      Complex complex4 = complex0.INF.sqrt1z();
      Complex complex5 = complex4.subtract((-1008.01));
      Complex complex6 = complex0.cos();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-912.780417), (-912.780417));
      Complex complex1 = complex0.I.divide((-912.780417));
      Complex complex2 = Complex.valueOf((-912.780417));
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.NaN.createComplex(2958.283503883484, (-2286.816047166));
      ComplexField complexField0 = complex2.getField();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex4.I.atan();
      Complex complex7 = complex3.add((-20.0));
      Complex complex8 = complex6.I.add((-233.19651467986));
      double double0 = complex7.getImaginary();
      Complex complex9 = complex4.add(complex2);
      Complex complex10 = complex9.NaN.conjugate();
      Complex complex11 = complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(574.64, 1991.8918052623);
      List<Complex> list0 = complex0.nthRoot(37);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.createComplex(2.0, (-3611.1262536384643));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.NaN.createComplex(0.0, 392.3839708398888);
      Complex complex4 = complex0.asin();
      double double0 = complex4.abs();
      Complex complex5 = complex4.add(0.0);
      Complex complex6 = complex5.NaN.multiply((-2613));
      Complex complex7 = complex6.NaN.reciprocal();
      Complex complex8 = complex0.add(complex4);
      Complex complex9 = Complex.valueOf(0.0);
      double double1 = complex9.ZERO.getArgument();
      Complex complex10 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5869022483809747E-256, 1.5869022483809747E-256);
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.add(complex2);
      boolean boolean0 = complex3.isInfinite();
      Complex complex4 = complex0.createComplex(1.5869022483809747E-256, 1.5869022483809747E-256);
      boolean boolean1 = complex3.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.NaN.divide(complex2);
      Complex complex4 = complex0.ONE.exp();
      Complex complex5 = complex3.ZERO.exp();
      Complex complex6 = complex3.ONE.divide(2904.50992859588);
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex2.I.pow(complex0);
      Complex complex9 = complex0.multiply(0);
      Complex complex10 = complex0.add(complex3);
      Complex complex11 = complex9.divide(complex0);
      Complex complex12 = complex2.NaN.divide(complex6);
      int int0 = complex12.hashCode();
      Complex complex13 = Complex.valueOf((-2309.110401503333));
      Complex complex14 = complex13.ONE.acos();
      Complex complex15 = complex4.I.sinh();
      Complex complex16 = complex13.I.multiply((-2309.110401503333));
      ComplexField complexField0 = complex16.ZERO.getField();
      Complex complex17 = complex3.pow(complex8);
      Complex complex18 = complex17.conjugate();
      Complex complex19 = complex2.I.exp();
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex10.readResolve();
      Complex complex20 = complex17.tan();
      Complex complex21 = complex4.reciprocal();
      boolean boolean1 = complex3.equals("");
      Complex complex22 = complex2.atan();
      Complex complex23 = complex22.INF.tanh();
      Complex complex24 = complex22.I.negate();
      Complex complex25 = complex20.divide(complex22);
      Complex complex26 = complex18.cos();
      Complex complex27 = complex20.divide((-2309.110401503333));
      Complex complex28 = complex16.acos();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-199.267316433), 20.0);
      Complex complex1 = complex0.divide(20.0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.sqrt1z();
      double double0 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(2210.927130214765);
      Complex complex1 = complex0.pow((-4213.597048));
      Complex complex2 = complex0.multiply(1494);
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex3.INF.subtract((-4213.597048));
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex0.NaN.multiply(1494);
      int int0 = complex5.hashCode();
      Complex complex8 = complex1.multiply(1494);
      Complex complex9 = complex8.INF.subtract(complex0);
      Complex complex10 = complex0.ZERO.sqrt();
      boolean boolean0 = complex0.isNaN();
      int int1 = complex1.hashCode();
      int int2 = complex10.hashCode();
      Complex complex11 = complex10.asin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.reciprocal();
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex1.ZERO.atan();
      Complex complex5 = complex1.divide(complex0);
      String string0 = complex2.toString();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.INF.add(2.4751837654582522E-8);
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex1.ZERO.sqrt();
      ComplexField complexField0 = complex0.getField();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      try { 
        complex0.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.negate();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.pow(1.5707963267948966);
      Complex complex3 = complex0.reciprocal();
      Object object0 = complex3.I.readResolve();
      Complex complex4 = complex2.createComplex(1.5707963267948966, (-3597.20051));
      double double1 = complex1.getReal();
      Complex complex5 = complex2.multiply(3050.8);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex0.NaN.multiply((-3781));
      Complex complex8 = complex0.multiply(1);
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex9.INF.cos();
      Complex complex11 = complex2.divide(complex8);
      Complex complex12 = complex11.ONE.multiply((-2363.47395586548));
      Complex complex13 = complex4.subtract(3050.8);
      Complex complex14 = complex2.atan();
      Complex complex15 = complex12.atan();
      Complex complex16 = complex5.sin();
      Complex complex17 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-781.2837995271158), (-465.43));
      double double0 = complex0.abs();
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex0.isInfinite();
      double double1 = complex0.getImaginary();
      boolean boolean1 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.368312797746065E-126, (-1974.855765));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.NaN.multiply((-261));
      Complex complex4 = complex0.INF.subtract(complex1);
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex4.I.sqrt();
      Complex complex7 = complex6.I.atan();
      Complex complex8 = complex7.ONE.atan();
      double double0 = complex5.INF.abs();
      Complex complex9 = complex0.multiply(285);
      Complex complex10 = complex5.INF.log();
      int int0 = complex4.NaN.hashCode();
      Complex complex11 = complex9.subtract((-5.730898606435436E-9));
      ComplexField complexField0 = complex3.getField();
      double double1 = complex5.abs();
      Complex complex12 = complex6.atan();
      boolean boolean0 = complex8.isInfinite();
      Complex complex13 = complex8.acos();
      double double2 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(201.2526924, 201.2526924);
      Complex complex1 = Complex.valueOf(201.2526924, 201.2526924);
      Complex complex2 = complex1.I.add(complex0);
      String string0 = complex2.I.toString();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.I.createComplex(201.2526924, 201.2526924);
      Complex complex6 = complex1.createComplex((-3335.47071936162), (-3335.47071936162));
      Complex complex7 = Complex.valueOf(0.0, 201.2526924);
      Complex complex8 = complex7.ONE.log();
      Complex complex9 = complex0.I.sinh();
      Complex complex10 = complex1.ONE.multiply((-3.648293887796095E-8));
      Complex complex11 = complex3.negate();
      Complex complex12 = complex3.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1894.31102641));
      Complex complex1 = complex0.ONE.multiply(37);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex3.ZERO.multiply(1);
      Complex complex5 = complex0.tanh();
      double double0 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.divide(0.0);
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex4.subtract(complex5);
      Complex complex7 = complex0.divide(complex4);
      Complex complex8 = complex7.ONE.pow(complex4);
      Complex complex9 = complex2.log();
      Complex complex10 = complex4.tan();
      Complex complex11 = complex5.I.tanh();
      Complex complex12 = complex10.ONE.tanh();
      Complex complex13 = complex10.add(complex6);
      Complex complex14 = Complex.valueOf((-2027.03), 0.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 2.0;
      Complex complex1 = new Complex(2.0, 148.302259);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex0.multiply((-1948.3078027741));
      int int0 = (-737);
      try { 
        complex0.nthRoot((-737));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -737
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.3134697675704956);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex0.subtract(complex2);
      Complex complex8 = complex7.ONE.multiply(0.0);
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.NaN.add((-2157.164112));
      Complex complex3 = complex1.I.acos();
      double double0 = 705.2183736334418;
      Complex complex4 = complex0.INF.divide(0.4824984669685364);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex0.NaN.add(complex5);
      Complex complex7 = complex3.pow(0.0);
      Complex complex8 = complex3.subtract(complex4);
      Complex complex9 = Complex.valueOf(1931.0, (-2157.164112));
      Complex complex10 = complex0.createComplex(705.2183736334418, 705.2183736334418);
      double double1 = complex1.getReal();
      double double2 = complex3.abs();
      Complex complex11 = complex1.ZERO.sinh();
      Complex complex12 = complex7.INF.subtract(1.8011719796199461);
      try { 
        complex10.NaN.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex2.ZERO.divide(3.280586734644871E82);
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex2.ZERO.cos();
      Object object0 = complex4.readResolve();
      String string0 = complex4.ZERO.toString();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex5.ONE.subtract(3.280586734644871E82);
      try { 
        complex8.INF.nthRoot((-743));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -743
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = Complex.ZERO;
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.acos();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-2253.266922478), (-2253.266922478));
      Complex complex1 = complex0.NaN.atan();
      Object object0 = complex1.I.readResolve();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.NaN.divide(complex2);
      Complex complex4 = complex3.ZERO.cos();
      Object object1 = complex0.readResolve();
      Complex complex5 = complex0.multiply(1793);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.I.multiply(1005);
      Complex complex2 = complex0.INF.pow(0.0);
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex0.INF.subtract(20.0);
      boolean boolean0 = complex0.equals(complex3);
      double double1 = complex3.getReal();
      Complex complex6 = complex2.pow(complex0);
      Complex complex7 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex2.NaN.exp();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.divide((-4.676849004137386E-23));
      Complex complex7 = complex1.acos();
      Complex complex8 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.pow(20.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      double double0 = complex1.INF.abs();
      double double1 = complex1.getReal();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex2 = complex1.divide((double) 1);
      Complex complex3 = complex2.multiply(1);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.tan();
      int int0 = complex1.hashCode();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.NaN.tanh();
      String string0 = complex0.ONE.toString();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.NaN.multiply(0.0);
      int int0 = complex0.hashCode();
      double double1 = complex0.getImaginary();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.INF.multiply(2218);
      Complex complex3 = complex1.ONE.pow(0.0);
      Complex complex4 = complex0.NaN.sqrt();
      Complex complex5 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.I.add((-3616.8368949095));
      Complex complex6 = complex1.ZERO.multiply(complex3);
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex7.tanh();
      Object object0 = complex7.readResolve();
      Complex complex9 = complex8.ONE.log();
      boolean boolean0 = complex8.equals(object0);
      Complex complex10 = complex8.divide(complex7);
      Complex complex11 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-2930.133), (-1046.6));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.exp();
      Complex complex3 = Complex.valueOf((-2930.133), 0.0);
      Complex complex4 = complex1.NaN.cos();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = Complex.valueOf((-2211.0));
      double double0 = complex5.ZERO.getArgument();
      Complex complex7 = complex5.acos();
      Complex complex8 = complex3.asin();
      double double1 = complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      String string0 = complex0.toString();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex1.NaN.tanh();
      boolean boolean0 = complex1.isInfinite();
      Complex complex4 = complex2.NaN.subtract(0.0);
      Complex complex5 = complex4.NaN.sin();
      boolean boolean1 = complex1.isInfinite();
      Complex complex6 = complex1.subtract(complex2);
      double double0 = complex6.getReal();
      Complex complex7 = complex2.exp();
      Complex complex8 = complex7.tanh();
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sinh();
      int int0 = complex0.hashCode();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex0.NaN.subtract(0.0);
      Complex complex4 = complex2.NaN.multiply(768);
      Complex complex5 = complex0.subtract(0.0);
      Complex complex6 = Complex.INF;
      boolean boolean0 = complex1.equals(complex6);
      Complex complex7 = complex2.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1228.87583));
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.subtract(134.0);
      Complex complex2 = Complex.valueOf(0.0, (-1184.263952225));
      Complex complex3 = complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-1074.078), 497.98774722604765);
      Complex complex1 = Complex.valueOf((-669.4772193632), (-669.4772193632));
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-3072.7778), 1974.82641676117);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sinh();
      int int0 = complex0.INF.hashCode();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.INF.sinh();
      Complex complex5 = complex3.multiply(1974.82641676117);
      Complex complex6 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(2697.874, 2697.874);
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(670.565);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.tanh();
      double double0 = complex2.abs();
      Complex complex3 = complex0.INF.add((-747.687408293));
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.atan();
      ComplexField complexField0 = complex2.NaN.getField();
      Object object0 = new Object();
      boolean boolean0 = complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1069.2632281705));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.INF.pow(complex1);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex4.divide(0.0);
      Object object1 = complex4.readResolve();
      Complex complex6 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-1044.666159));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.I.pow(6.283185307179586);
      Complex complex4 = complex2.NaN.add(545.0);
      Complex complex5 = complex0.log();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2095.019291953));
      Complex complex1 = complex0.I.divide((-2095.019291953));
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.ONE.sqrt();
      double double0 = complex3.NaN.getArgument();
      double double1 = complex3.ONE.abs();
      Complex complex4 = complex0.add((-2095.019291953));
      boolean boolean0 = complex4.isNaN();
      double double2 = complex3.getImaginary();
      Complex complex5 = Complex.valueOf((-1067.5256));
      double double3 = complex5.ZERO.getArgument();
      Complex complex6 = complex5.sinh();
      List<Complex> list0 = complex6.INF.nthRoot(1187);
      Complex complex7 = complex1.NaN.divide(complex3);
      Complex complex8 = complex6.exp();
      Complex complex9 = Complex.valueOf(1.0, (-1067.5256));
      Complex complex10 = complex4.reciprocal();
      Complex complex11 = complex3.createComplex((-13.78784017), (-1067.5256));
      Complex complex12 = complex9.sinh();
      Complex complex13 = complex12.ZERO.sinh();
      Complex complex14 = complex12.ZERO.exp();
      Complex complex15 = complex11.subtract(complex1);
      Complex complex16 = complex15.NaN.multiply(0.0);
      Complex complex17 = complex16.I.exp();
      Complex complex18 = complex16.INF.add(1052.58);
      Complex complex19 = complex5.asin();
      Complex complex20 = complex7.negate();
      double double4 = complex0.getArgument();
      Complex complex21 = complex5.sqrt();
      Complex complex22 = complex21.atan();
      Complex complex23 = complex21.pow(3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = complex3.ZERO.add(complex1);
      Complex complex5 = complex4.add(complex1);
      Complex complex6 = complex0.createComplex(0.0, 928.2173643858);
      Complex complex7 = complex4.asin();
      double double0 = complex3.getImaginary();
      Complex complex8 = complex6.divide(0.0);
      Complex complex9 = complex8.I.multiply((-4747));
      Complex complex10 = complex1.tanh();
      double double1 = complex3.I.getArgument();
      Complex complex11 = complex10.I.add((-762.6502049));
      Complex complex12 = complex10.INF.cosh();
      double double2 = complex0.abs();
      Complex complex13 = complex6.NaN.multiply((-1677.02640569431));
      Complex complex14 = Complex.I;
      Complex complex15 = complex13.NaN.add(complex14);
      Complex complex16 = complex3.ONE.atan();
      Complex complex17 = Complex.valueOf((-1677.02640569431), 623.0);
      double double3 = complex9.abs();
      Complex complex18 = complex3.divide(complex4);
      Complex complex19 = complex6.reciprocal();
      Complex complex20 = complex17.exp();
      ComplexField complexField0 = complex20.ZERO.getField();
      Complex complex21 = Complex.valueOf((double) (-4747));
      Complex complex22 = complex18.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex2.ZERO.subtract(0.0);
      String string0 = complex4.INF.toString();
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex2.ONE.add(0.0);
      Complex complex7 = complex1.INF.subtract(0.0);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex7.INF.pow(complex8);
      Complex complex10 = complex1.I.tan();
      Complex complex11 = complex0.tan();
      double double0 = complex11.ONE.getArgument();
      Complex complex12 = complex11.conjugate();
      int int0 = complex1.hashCode();
      Complex complex13 = complex1.NaN.tanh();
      double double1 = complex10.abs();
      boolean boolean0 = complex10.isInfinite();
      Complex complex14 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(2588.044406);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex0.createComplex(2588.044406, 27.19);
      Complex complex4 = complex3.I.sin();
      Complex complex5 = Complex.valueOf(1746.0227417901858, 1746.0227417901858);
      List<Complex> list0 = complex5.ONE.nthRoot(1222);
      Complex complex6 = complex3.INF.pow(0.0);
      Complex complex7 = complex4.I.divide(complex1);
      Complex complex8 = complex3.sinh();
      double double0 = complex7.abs();
      Complex complex9 = complex2.subtract(27.19);
      Complex complex10 = complex7.asin();
      Complex complex11 = complex2.exp();
      boolean boolean0 = complex8.isInfinite();
      Complex complex12 = complex2.atan();
      Complex complex13 = complex6.sinh();
      Object object0 = complex13.I.readResolve();
      Complex complex14 = complex0.multiply(complex10);
      Complex complex15 = complex1.multiply((-4029));
      double double1 = complex14.abs();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(247.506943233, 0.0);
      List<Complex> list0 = complex0.nthRoot(2488);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex0.I.add(complex1);
      Complex complex5 = complex1.ONE.add(complex3);
      Complex complex6 = complex0.I.divide((-747.68));
      Complex complex7 = complex6.multiply(complex1);
      Complex complex8 = complex6.NaN.asin();
      double double0 = complex0.getArgument();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      boolean boolean1 = complex1.isInfinite();
      Complex complex9 = complex0.pow(1714.8939156909);
      boolean boolean2 = complex1.isNaN();
      Complex complex10 = complex7.multiply(1);
      List<Complex> list1 = complex10.INF.nthRoot(259);
      Complex complex11 = complex9.ONE.atan();
      Complex complex12 = complex7.subtract(0.0);
      Complex complex13 = complex9.createComplex((-20.0), 0.0);
      Complex complex14 = complex9.exp();
      Complex complex15 = complex6.asin();
      Complex complex16 = complex14.createComplex(0.0, 0.9999999999999772);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(944.1125781191471, 944.1125781191471);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.add(944.1125781191471);
      Complex complex3 = complex1.I.negate();
      String string0 = complex2.ONE.toString();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.INF.asin();
      List<Complex> list0 = complex5.ZERO.nthRoot(37);
      Complex complex6 = complex5.INF.tanh();
      Complex complex7 = complex4.ZERO.multiply(2724.618525703);
      Complex complex8 = complex7.NaN.multiply(complex5);
      Complex complex9 = complex7.ONE.tan();
      Complex complex10 = complex4.createComplex(944.1125781191471, 944.1125781191471);
      Complex complex11 = complex10.INF.tanh();
      Complex complex12 = complex5.sin();
      Complex complex13 = complex1.cos();
      Complex complex14 = complex13.ONE.sinh();
      Complex complex15 = complex14.INF.multiply(complex11);
      Complex complex16 = complex13.ZERO.conjugate();
      Complex complex17 = complex5.atan();
      int int0 = complex13.hashCode();
      Complex complex18 = complex12.createComplex(2.677136737066629E238, 944.1125781191471);
      Complex complex19 = complex3.asin();
      double double0 = complex2.getArgument();
      Complex complex20 = complex17.multiply(0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1838.36982797448);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex2.ZERO.add(1838.36982797448);
      Complex complex4 = complex0.INF.multiply(complex1);
      Complex complex5 = complex4.INF.subtract((-892.2893));
      Complex complex6 = complex4.ONE.acos();
      Complex complex7 = complex4.NaN.sqrt1z();
      String string0 = complex0.toString();
      Complex complex8 = Complex.valueOf(1838.36982797448);
      Complex complex9 = Complex.valueOf((-928.55), (-2276.095));
  }
}
