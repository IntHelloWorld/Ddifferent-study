/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 01:45:58 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.552781453687301E-127, 6.552781453687301E-127);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.INF.createComplex(20.0, 2071.31175892);
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex6.INF.add((-0.9999975277450761));
      Complex complex8 = complex5.INF.createComplex(936.460215, (-1199.1719811));
      Complex complex9 = complex3.NaN.sinh();
      Complex complex10 = complex0.acos();
      double double0 = complex0.abs();
      Complex complex11 = complex0.sinh();
      Complex complex12 = Complex.valueOf((-2584.294368972431));
      Complex complex13 = complex10.asin();
      Complex complex14 = complex8.I.asin();
      Object object0 = complex13.ZERO.readResolve();
      String string0 = complex13.I.toString();
      Object object1 = complex1.readResolve();
      Complex complex15 = complex11.divide(complex4);
      Complex complex16 = complex15.log();
      // Undeclared exception!
      complex2.nthRoot(5970);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-4.768920119497491E-8), (-4.768920119497491E-8));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.pow(complex0);
      String string0 = complex0.toString();
      Complex complex3 = complex0.ZERO.sin();
      double double0 = complex3.getReal();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex4.INF.pow(0.0);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex4.NaN.tan();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex7.ONE.reciprocal();
      Complex complex10 = complex9.ONE.asin();
      Complex complex11 = complex9.INF.pow(complex6);
      Complex complex12 = complex1.INF.cos();
      double double1 = complex12.ONE.abs();
      Complex complex13 = Complex.valueOf((-2369.0), (-445.0));
      Complex complex14 = complex3.tan();
      Complex complex15 = complex13.NaN.sinh();
      Complex complex16 = complex1.log();
      Complex complex17 = complex0.NaN.divide(complex9);
      Complex complex18 = complex16.add((-2511.357574846299));
      Object object0 = complex16.NaN.readResolve();
      Complex complex19 = complex7.tanh();
      Complex complex20 = complex0.multiply(101.939);
      Complex complex21 = complex13.acos();
      Complex complex22 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf((-1245.0));
      Complex complex3 = complex1.ZERO.multiply(complex0);
      Complex complex4 = complex3.ONE.multiply((-2763));
      Complex complex5 = complex1.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = complex5.abs();
      Complex complex6 = complex3.subtract(complex0);
      Complex complex7 = complex5.createComplex(0.0, Double.POSITIVE_INFINITY);
      String string0 = complex2.toString();
      double double1 = complex2.getArgument();
      Complex complex8 = complex5.cosh();
      Complex complex9 = Complex.valueOf(1031.4681695112877, 1870.0);
      Complex complex10 = complex4.add(complex9);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(899.43152223865, 899.43152223865);
      Complex complex1 = Complex.valueOf(899.43152223865);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex4.NaN.asin();
      Complex complex7 = complex4.I.subtract(complex2);
      Complex complex8 = complex7.I.acos();
      Complex complex9 = complex3.conjugate();
      Complex complex10 = complex2.NaN.cos();
      Complex complex11 = complex10.I.sqrt1z();
      Complex complex12 = complex10.I.reciprocal();
      Complex complex13 = complex1.INF.subtract(complex7);
      Complex complex14 = complex3.atan();
      Complex complex15 = complex9.subtract(899.43152223865);
      Complex complex16 = complex15.ZERO.multiply((-1605));
      Complex complex17 = complex9.atan();
      double double0 = complex17.getImaginary();
      Complex complex18 = complex9.multiply(complex0);
      Complex complex19 = complex3.asin();
      String string0 = complex19.ONE.toString();
      Complex complex20 = complex3.reciprocal();
      Complex complex21 = complex16.divide((double) (-1605));
      Complex complex22 = complex21.NaN.multiply(3256);
      Complex complex23 = complex5.asin();
      Complex complex24 = Complex.valueOf(2.0964269638061523, 1721.841802);
      Complex complex25 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 1855.6512248525514);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.multiply(0.0);
      int int0 = complex0.I.hashCode();
      Complex complex3 = complex2.NaN.sqrt();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.ONE.log();
      Complex complex6 = Complex.I;
      Complex complex7 = complex4.ZERO.tan();
      Complex complex8 = Complex.valueOf((-3181.0), (-3181.0));
      Complex complex9 = complex8.multiply((-3181.0));
      Complex complex10 = complex6.INF.divide(1855.6512248525514);
      Complex complex11 = complex10.I.add(complex8);
      double double1 = 0.0;
      Complex complex12 = complex11.multiply(0.0);
      boolean boolean1 = complex2.equals(complex6);
      try { 
        complex4.nthRoot((-952));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -952
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = (-1282.63);
      Complex complex0 = new Complex((-1282.63));
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.INF.toString();
      Complex complex1 = Complex.valueOf(8.593554223894477E135, (-1488.98316));
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex1.log();
      Complex complex4 = complex0.divide((-3169.65440619275));
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex5.add(complex4);
      Complex complex7 = complex3.sinh();
      double double1 = complex5.abs();
      ComplexField complexField0 = complex1.getField();
      boolean boolean0 = complex3.equals((Object) null);
      boolean boolean1 = complex7.isInfinite();
      Complex complex8 = complex7.exp();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.INF.subtract(0.0);
      Complex complex3 = complex2.NaN.tan();
      int int0 = 1;
      List<Complex> list0 = complex1.ZERO.nthRoot(1);
      Complex complex4 = null;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-458.448), (-458.448));
      Complex complex1 = complex0.ZERO.multiply((-458.448));
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.ZERO.multiply(42);
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.INF.divide(complex3);
      double double0 = complex4.NaN.abs();
      Complex complex5 = complex0.pow(742.27);
      Complex complex6 = complex5.NaN.sinh();
      Complex complex7 = complex5.INF.subtract(complex3);
      Complex complex8 = complex1.asin();
      Complex complex9 = complex8.INF.reciprocal();
      Complex complex10 = complex4.conjugate();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex11 = complex3.atan();
      Object object0 = complex6.readResolve();
      double double1 = complex10.getArgument();
      Complex complex12 = complex4.I.add(complex8);
      Complex complex13 = Complex.valueOf(Double.NaN);
      Object object1 = complex9.readResolve();
      Complex complex14 = complex10.cosh();
      double double2 = complex0.getImaginary();
      Object object2 = complex6.readResolve();
      boolean boolean0 = complex5.equals(object2);
      Complex complex15 = complex3.multiply((-2043.450915775));
      double double3 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2537.9190059849993, 2537.9190059849993);
      int int0 = (-3702);
      Complex complex1 = complex0.multiply((-3702));
      Complex complex2 = complex0.tan();
      ComplexField complexField0 = complex2.NaN.getField();
      Object object0 = complex1.readResolve();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex1.add((double) (-3702));
      double double0 = complex4.NaN.getArgument();
      try { 
        complex3.ZERO.nthRoot((-3702));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,702
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = Complex.valueOf((-198.58122737), (-1110.17));
      Complex complex4 = complex2.I.multiply(0.0);
      Complex complex5 = complex0.negate();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = complex5.acos();
      Complex complex8 = complex7.add(0.0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2942.914235423), 0.0);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.reciprocal();
      String string0 = complex0.NaN.toString();
      String string1 = complex0.toString();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex0.multiply((-2916));
      Complex complex4 = complex1.exp();
      Complex complex5 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.NaN.divide(0.0);
      Complex complex4 = complex1.NaN.subtract(0.0);
      boolean boolean0 = complex1.equals(complex2);
      Complex complex5 = complex2.I.atan();
      boolean boolean1 = complex2.equals("ORiUsR?t7.!");
      double double0 = complex2.abs();
      Complex complex6 = new Complex(1721.293515, Double.NaN);
      boolean boolean2 = complex2.equals(complex6);
      double double1 = complex6.abs();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.ONE.cos();
      double double2 = complex7.ZERO.abs();
      Complex complex9 = complex2.add(complex7);
      Complex complex10 = complex1.subtract(complex6);
      try { 
        complex0.nthRoot((-1979));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,979
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.createComplex((-556.4363396671716), (-556.4363396671716));
      Complex complex2 = Complex.valueOf((-2231.02963366409));
      Complex complex3 = complex0.INF.tanh();
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex3.pow(complex0);
      Complex complex6 = complex3.NaN.conjugate();
      Complex complex7 = complex2.NaN.sinh();
      Complex complex8 = complex7.ONE.cosh();
      double double0 = complex0.getReal();
      Complex complex9 = complex7.I.cosh();
      Complex complex10 = complex8.INF.negate();
      Complex complex11 = complex1.sqrt();
      ComplexField complexField0 = complex0.getField();
      Complex complex12 = complex1.INF.conjugate();
      Complex complex13 = Complex.valueOf(0.0, 0.0);
      Complex complex14 = complex0.subtract((-3602.353571363903));
      Complex complex15 = complex1.tan();
      Complex complex16 = Complex.INF;
      Complex complex17 = complex15.cosh();
      Complex complex18 = complex4.tan();
      boolean boolean0 = complex16.isNaN();
      boolean boolean1 = complex6.isInfinite();
      double double1 = complex4.getArgument();
      Complex complex19 = complex12.atan();
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sqrt();
      double double0 = complex0.INF.abs();
      Complex complex2 = complex0.negate();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = complex6.I.multiply(complex1);
      Complex complex8 = complex2.negate();
      Complex complex9 = complex3.pow(20.0);
      Complex complex10 = complex1.negate();
      Complex complex11 = complex9.divide(complex1);
      Complex complex12 = Complex.valueOf(20.0);
      Complex complex13 = complex12.I.sinh();
      Complex complex14 = complex12.ONE.pow(complex10);
      Complex complex15 = Complex.valueOf(0.0);
      Complex complex16 = complex1.add(complex4);
      Complex complex17 = complex3.reciprocal();
      Complex complex18 = complex11.acos();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(1014.66, 0.0);
      Complex complex2 = complex1.NaN.conjugate();
      double double0 = complex2.INF.getArgument();
      Complex complex3 = complex0.divide(1014.66);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex5.INF.multiply(37);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex1.multiply(330.925254506);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.NaN.log();
      double double0 = complex0.getArgument();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(4353.870383178321);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.add(complex2);
      double double0 = complex0.abs();
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex2.multiply(37);
      Complex complex7 = complex6.sin();
      Complex complex8 = complex3.sinh();
      Complex complex9 = complex2.cosh();
      double double1 = complex6.getReal();
      Complex complex10 = complex2.sqrt();
      String string0 = complex3.toString();
      Complex complex11 = complex2.ONE.pow(4648.867151);
      Complex complex12 = complex11.INF.negate();
      Complex complex13 = complex4.NaN.add((-74.858350358969));
      Complex complex14 = complex3.NaN.divide(complex10);
      Complex complex15 = complex14.ZERO.asin();
      double double2 = complex15.I.abs();
      Complex complex16 = complex4.subtract((double) 37);
      Complex complex17 = complex9.ZERO.tanh();
      boolean boolean0 = complex3.isInfinite();
      double double3 = complex9.getReal();
      Complex complex18 = complex7.pow(complex3);
      Complex complex19 = complex10.sin();
      Complex complex20 = complex8.add(Double.NaN);
      Complex complex21 = complex20.NaN.log();
      List<Complex> list0 = complex9.nthRoot(968);
      Complex complex22 = complex12.multiply(4746);
      Complex complex23 = complex17.add(complex1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex0.createComplex(0.0, Double.NaN);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex2.createComplex(Double.NaN, Double.NaN);
      Complex complex6 = complex5.ONE.asin();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex2.createComplex(0.0, 2222.7305157);
      int int0 = complex5.INF.hashCode();
      String string0 = complex5.ONE.toString();
      double double0 = complex0.getImaginary();
      Complex complex10 = complex2.pow(1.0);
      Complex complex11 = complex10.NaN.sinh();
      double double1 = complex10.getArgument();
      Complex complex12 = complex0.sin();
      String string1 = complex5.toString();
      Complex complex13 = complex10.ONE.sinh();
      Complex complex14 = complex4.cosh();
      Complex complex15 = complex11.tanh();
      double double2 = complex6.getArgument();
      double double3 = complex11.getArgument();
      Complex complex16 = complex2.multiply(17);
      Complex complex17 = complex10.add((-3708.057));
      Complex complex18 = complex14.negate();
      Complex complex19 = complex2.tanh();
      Complex complex20 = Complex.valueOf((-0.5113252103366475));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-864.98));
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1125.866817), (-1125.866817));
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.subtract((-20.0));
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex0.pow((-576.8232328));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      double double0 = complex1.abs();
      Complex complex2 = complex1.ZERO.pow(20.0);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex2.NaN.atan();
      Complex complex5 = complex2.sinh();
      double double1 = complex2.getArgument();
      Complex complex6 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.negate();
      double double0 = complex0.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex2.createComplex(0.0, (-2624.750467656192));
      Complex complex6 = complex0.ONE.subtract(complex3);
      Complex complex7 = complex5.INF.sin();
      Complex complex8 = complex2.tanh();
      int int0 = complex0.hashCode();
      Complex complex9 = complex5.reciprocal();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex10.tan();
      Complex complex12 = Complex.valueOf((-695.068170790313));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(2976.29218009, (-1868.3661792755095));
      Complex complex1 = complex0.ONE.log();
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex0.INF.createComplex(6.283185307179586, 276.53);
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex2.INF.cosh();
      Complex complex5 = complex0.tanh();
      int int1 = complex2.ONE.hashCode();
      String string0 = complex0.toString();
      Complex complex6 = complex0.NaN.atan();
      Complex complex7 = complex5.add((-1487.2919986));
      Complex complex8 = complex7.INF.sqrt1z();
      Complex complex9 = complex7.I.exp();
      Complex complex10 = complex1.negate();
      Complex complex11 = complex10.I.subtract(complex9);
      Complex complex12 = complex5.cos();
      Complex complex13 = complex10.I.divide(276.53);
      Complex complex14 = complex13.NaN.negate();
      Complex complex15 = complex14.I.multiply(6.283185307179586);
      Complex complex16 = complex7.sin();
      Complex complex17 = complex8.add(2976.29218009);
      Complex complex18 = complex0.pow(122.01);
      Complex complex19 = complex15.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.valueOf(2645.11675, 2645.11675);
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex2.INF.divide(2645.11675);
      Complex complex4 = complex2.pow((-590.314));
      Complex complex5 = complex0.divide(complex1);
      Object object0 = complex0.NaN.readResolve();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = complex6.acos();
      double double0 = complex5.getReal();
      Complex complex9 = complex0.I.divide(complex6);
      Complex complex10 = Complex.valueOf(1.8902757316855673E-4, Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.I.sin();
      int int0 = complex8.hashCode();
      Complex complex12 = complex0.subtract(2645.11675);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(80.3, 80.3);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1444.48), 1.126326877851684E-7);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = Complex.valueOf(1.2290570545894685E191);
      Complex complex4 = complex0.I.divide(complex3);
      boolean boolean0 = complex1.isInfinite();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex2.add(1.126326877851684E-7);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(2520.8243, 0.6897233724594116);
      Complex complex1 = complex0.divide(2520.8243);
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex1.ONE.multiply(complex2);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.add(2.0);
      Complex complex6 = complex0.ZERO.multiply((-1439.036959666846));
      Complex complex7 = complex5.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex5.ONE.tan();
      double double0 = complex2.getImaginary();
      double double1 = complex8.getReal();
      double double2 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.INF.subtract((-3116.20782559));
      Complex complex5 = complex0.INF.cos();
      Complex complex6 = complex3.ZERO.acos();
      Complex complex7 = complex0.cosh();
      ComplexField complexField0 = complex6.getField();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-1984.0), (-1984.0));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ZERO.sinh();
      String string0 = complex1.INF.toString();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.ZERO.pow(complex2);
      Complex complex5 = complex2.subtract(complex0);
      ComplexField complexField0 = complex3.getField();
      try { 
        complex1.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-2992.99), (-2992.99));
      List<Complex> list0 = complex0.NaN.nthRoot(33);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.ZERO.sqrt();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex3.I.multiply(complex2);
      Complex complex5 = complex3.INF.acos();
      Complex complex6 = complex4.INF.tan();
      Complex complex7 = complex3.I.log();
      Complex complex8 = complex3.ZERO.tan();
      Complex complex9 = complex0.multiply(151);
      boolean boolean0 = complex3.equals(complex9);
      int int0 = complex0.hashCode();
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.ZERO.pow(complex1);
      Complex complex4 = complex3.I.add(complex1);
      double double0 = complex0.getImaginary();
      Complex complex5 = complex2.exp();
      double double1 = complex2.getArgument();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.createComplex(1.0, (-3.141592653589793));
      Complex complex8 = complex7.INF.cos();
      Complex complex9 = complex7.ONE.asin();
      Object object0 = complex7.ZERO.readResolve();
      String string0 = complex1.toString();
      Complex complex10 = complex1.exp();
      Complex complex11 = complex7.tan();
      Complex complex12 = complex6.ONE.conjugate();
      Complex complex13 = complex0.subtract(complex3);
      boolean boolean0 = complex8.isInfinite();
      Complex complex14 = complex10.tan();
      Complex complex15 = Complex.ZERO;
      Complex complex16 = complex14.NaN.pow(complex15);
      Complex complex17 = complex11.sin();
      Complex complex18 = complex11.conjugate();
      Complex complex19 = complex6.cos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply((-611));
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = Complex.valueOf((double) (-611), 0.0);
      Object object0 = complex2.readResolve();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = Complex.valueOf(1909.924096375158, (-4007.3221436935823));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(4.363736368635843E-9, 2101.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(2101.0, 0.0);
      Complex complex3 = complex1.ZERO.sin();
      Complex complex4 = Complex.valueOf(0.0, (-716.47151673));
      boolean boolean0 = complex1.isInfinite();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex2.cos();
      boolean boolean1 = complex6.equals(complex3);
      Complex complex7 = complex6.log();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7270287031459572E-134, 1.7270287031459572E-134);
      Complex complex1 = Complex.valueOf(1071.12758283562, 1082.442224);
      List<Complex> list0 = complex1.nthRoot(3579);
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex1.ONE.negate();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.subtract(complex2);
      Object object0 = complex5.I.readResolve();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex5.conjugate();
      boolean boolean1 = complex4.isNaN();
      Complex complex8 = complex1.sqrt();
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.createComplex(1361.2821, 3.599615946028287E-186);
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = complex3.ZERO.pow((-1324.16));
      Complex complex5 = complex3.NaN.negate();
      Complex complex6 = complex5.I.cosh();
      Complex complex7 = complex1.NaN.add((-1324.16));
      Complex complex8 = complex3.subtract(0.0);
      Complex complex9 = complex0.sqrt();
      double double0 = complex8.getReal();
      Complex complex10 = complex1.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.NaN.tanh();
      ComplexField complexField0 = complex0.NaN.getField();
      ComplexField complexField1 = complex2.INF.getField();
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex3.ZERO.subtract(complex2);
      int int0 = complex4.I.hashCode();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.asin();
      Complex complex8 = Complex.valueOf((-5.1151708476133135E-8), (-5.1151708476133135E-8));
      Complex complex9 = complex2.asin();
      Complex complex10 = Complex.valueOf((-5.1151708476133135E-8));
      double double0 = complex5.abs();
      Complex complex11 = complex10.atan();
      Complex complex12 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.54468158713835E25), (-9.54468158713835E25));
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex0.divide(complex1);
      String string0 = complex0.toString();
      Complex complex4 = complex3.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add((-1741.3637));
      Complex complex2 = complex0.subtract(1587.98155);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex3.ONE.add(complex2);
      Complex complex5 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.add((-201.9586));
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex4.exp();
      double double0 = complex5.getReal();
      Complex complex8 = complex3.pow(0.6502478122711182);
      Object object0 = complex6.readResolve();
      Complex complex9 = complex3.negate();
      Complex complex10 = complex5.conjugate();
      Complex complex11 = complex9.sinh();
      Complex complex12 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1177.40940484, 1177.40940484);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.ONE.multiply(910);
      double double0 = complex1.NaN.getArgument();
      Complex complex3 = complex0.multiply((-1204));
      Complex complex4 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.22079706192016602);
      Complex complex2 = complex0.subtract(complex1);
      boolean boolean0 = complex1.equals(complex2);
      Complex complex3 = complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.ZERO.multiply(complex0);
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex0.NaN.conjugate();
      Complex complex5 = complex0.INF.conjugate();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex0.INF.pow(2254.1941175);
      Complex complex8 = complex0.I.multiply(Double.NaN);
      Complex complex9 = complex0.sin();
      double double1 = complex0.getArgument();
      Complex complex10 = complex9.NaN.atan();
      double double2 = complex1.INF.abs();
      Complex complex11 = complex9.multiply((-2964));
      Complex complex12 = complex0.log();
      double double3 = complex5.getReal();
      Complex complex13 = complex6.add(complex8);
      Complex complex14 = complex6.pow(complex3);
      Complex complex15 = complex14.ONE.negate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-127.6969059280539), (-1998.3182));
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.NaN.multiply(0.0);
      double double0 = complex1.getImaginary();
      Complex complex6 = complex1.pow(complex4);
      Complex complex7 = complex6.INF.cosh();
      Complex complex8 = complex0.subtract((-811.7856988965616));
      boolean boolean0 = complex1.isInfinite();
      Complex complex9 = complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.pow(6.283185307179586);
      Complex complex2 = complex0.multiply(6.283185307179586);
      List<Complex> list0 = complex2.INF.nthRoot(535);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.divide(6.283185307179586);
      int int0 = complex4.ZERO.hashCode();
      Complex complex5 = complex4.INF.sqrt1z();
      double double0 = complex3.getReal();
      int int1 = complex0.hashCode();
      Complex complex6 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex1.multiply(complex0);
      Object object0 = complex4.I.readResolve();
      ComplexField complexField0 = complex4.I.getField();
      ComplexField complexField1 = complex3.getField();
      Complex complex5 = complex3.exp();
      double double0 = complex5.I.getArgument();
      Complex complex6 = complex3.multiply(complex0);
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex7.I.cosh();
      Complex complex9 = Complex.valueOf(1.5707963267948966, 0.0);
      double double1 = complex3.getArgument();
      double double2 = complex2.getImaginary();
      int int0 = complex5.hashCode();
      Complex complex10 = complex2.log();
      Complex complex11 = complex9.NaN.createComplex((-516.5138203111), Double.NaN);
      Complex complex12 = complex5.atan();
      double double3 = complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tanh();
      int int0 = complex0.ZERO.hashCode();
      Complex complex2 = complex0.ONE.tan();
      double double0 = complex0.getImaginary();
      double double1 = complex0.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.INF.createComplex(0.0, 0.0);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex0.INF.sinh();
      Complex complex10 = complex0.multiply((-273));
      double double2 = complex1.getReal();
      Complex complex11 = complex7.log();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.INF.pow(1490.20941982444);
      Complex complex3 = complex0.createComplex(1490.20941982444, 1490.20941982444);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.ZERO.sinh();
      Complex complex6 = complex4.multiply(complex3);
      Complex complex7 = complex1.add(1490.20941982444);
      boolean boolean0 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.add(complex1);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-539));
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex2.I.sin();
      Complex complex5 = complex0.I.exp();
      Complex complex6 = complex5.ZERO.conjugate();
      double double0 = complex5.abs();
      int int0 = complex6.hashCode();
      Complex complex7 = complex6.ZERO.tan();
      Complex complex8 = complex2.ONE.divide(1.0);
      Object object0 = complex1.ZERO.readResolve();
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object1);
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex9.NaN.acos();
      Complex complex11 = complex10.ONE.add((double) (-539));
      boolean boolean1 = complex1.isNaN();
      double double1 = complex1.getImaginary();
      Complex complex12 = complex2.INF.exp();
      try { 
        complex2.nthRoot((-539));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -539
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      int int0 = 1;
      Complex complex1 = complex0.multiply(1);
      int int1 = complex0.ONE.hashCode();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.tanh();
      double double1 = complex1.getReal();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex3.ONE.atan();
      Complex complex6 = complex2.INF.reciprocal();
      Complex complex7 = complex3.ONE.multiply(complex0);
      Complex complex8 = complex6.ZERO.cos();
      Complex complex9 = complex3.tan();
      Complex complex10 = complex1.sin();
      boolean boolean0 = complex0.isNaN();
      Complex complex11 = complex5.ZERO.cos();
      Complex complex12 = complex11.INF.reciprocal();
      Complex complex13 = complex4.add(complex3);
      Complex complex14 = complex13.INF.cosh();
      double double2 = (-1420.8);
      try { 
        complex6.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.createComplex((-2069.78272), (-663.232));
      Complex complex2 = complex1.multiply(209.93681186234363);
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex1.INF.cosh();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex1.subtract(Double.NaN);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.ZERO.sinh();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex0.multiply(2627);
      Complex complex11 = complex10.INF.multiply((-161));
      Complex complex12 = complex11.ZERO.log();
      Complex complex13 = complex7.pow(Double.NaN);
      Complex complex14 = complex10.sinh();
      double double0 = complex14.abs();
      double double1 = complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = complex3.ZERO.exp();
      Object object0 = complex1.readResolve();
      Complex complex8 = complex3.exp();
      Complex complex9 = complex5.sqrt();
      boolean boolean0 = complex2.isNaN();
      Complex complex10 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex1.multiply(complex0);
      try { 
        complex2.nthRoot((-1205));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,205
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(316.874364983);
      Complex complex1 = complex0.ZERO.sqrt();
      int int0 = complex0.hashCode();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-2186.7));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.createComplex((-2186.7), 0.0);
      Complex complex3 = complex0.ONE.tan();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.multiply(743);
      Complex complex6 = complex2.multiply(complex1);
      Complex complex7 = complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.I.add(complex1);
      Complex complex4 = complex1.ZERO.sinh();
      Complex complex5 = complex0.ONE.subtract(complex1);
      ComplexField complexField0 = complex0.NaN.getField();
      double double0 = complex0.getReal();
      Complex complex6 = complex2.multiply(458);
      ComplexField complexField1 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.INF.divide((-289.386));
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.divide((-1.0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2516.375968), 0.0);
      Complex complex1 = complex0.pow((-1343.9859385));
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex1.I.conjugate();
      int int0 = complex1.hashCode();
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex3.ZERO.subtract(complex1);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex0.NaN.pow((-2516.375968));
      Complex complex8 = complex5.atan();
      Complex complex9 = complex8.INF.subtract(1.0);
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex1.divide(complex2);
      Complex complex12 = complex11.ONE.add(0.5767669677734375);
      Complex complex13 = complex8.add(complex1);
      ComplexField complexField1 = complex11.getField();
      Complex complex14 = complex13.tan();
      double double0 = complex14.getImaginary();
      boolean boolean0 = complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1767.14220454));
      double double0 = complex0.abs();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex0.sin();
      String string0 = complex4.I.toString();
      Complex complex5 = complex4.conjugate();
      double double1 = complex5.getImaginary();
      Complex complex6 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(8.074507236705857E-73, 8.074507236705857E-73);
      Complex complex1 = complex0.I.sin();
      Object object0 = complex1.readResolve();
      int int0 = complex0.hashCode();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex3.I.reciprocal();
      Complex complex6 = complex1.I.pow(complex0);
      double double1 = complex1.NaN.abs();
      Complex complex7 = complex6.ONE.subtract(complex0);
      Complex complex8 = complex1.multiply(7);
      List<Complex> list0 = complex7.nthRoot(7);
      double double2 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2534.6));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.I.add(0.0);
      Complex complex4 = complex2.NaN.createComplex((-2534.6), (-2534.6));
      Complex complex5 = complex2.ONE.acos();
      int int0 = complex2.NaN.hashCode();
      Complex complex6 = Complex.I;
      Complex complex7 = complex0.multiply(complex6);
      Complex complex8 = complex7.ZERO.sinh();
      Complex complex9 = complex7.sqrt();
      Complex complex10 = complex4.I.tanh();
      Complex complex11 = complex6.cos();
      List<Complex> list0 = complex11.NaN.nthRoot(813);
      Object object0 = complex1.readResolve();
      double double0 = complex4.getReal();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2267.82);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.asin();
      int int0 = complex1.hashCode();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.ONE;
      String string0 = complex3.I.toString();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex3.exp();
      Complex complex6 = complex0.add(2267.82);
      double double0 = complex0.getArgument();
      Complex complex7 = complex4.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex2 = complex0.ZERO.multiply(1.177739474561431E-7);
      Complex complex3 = complex1.INF.cos();
      Complex complex4 = complex0.NaN.subtract(complex1);
      Complex complex5 = complex4.ONE.createComplex(1.177739474561431E-7, 1.177739474561431E-7);
      Complex complex6 = complex5.ZERO.pow(834.011027);
      Complex complex7 = complex1.NaN.createComplex(1.177739474561431E-7, 1.177739474561431E-7);
      Complex complex8 = complex1.add(1.177739474561431E-7);
      double double0 = complex1.getArgument();
      Complex complex9 = complex7.asin();
      Complex complex10 = complex1.divide((-2.356194490192345));
      Complex complex11 = complex3.tan();
      double double1 = complex10.abs();
      double double2 = complex8.abs();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tanh();
      String string0 = complex0.toString();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.divide(200.8212391);
      Complex complex5 = complex4.I.multiply((-120.730345178));
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex3.add(200.8212391);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(1197.3499124887053, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.ONE.multiply(388);
      Complex complex4 = complex0.ONE.pow(complex1);
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex0.isNaN();
      String string0 = complex4.toString();
      Complex complex5 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(2970.522989842);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.NaN.negate();
      Complex complex4 = complex1.I.sin();
      int int0 = complex3.I.hashCode();
      Complex complex5 = complex1.NaN.exp();
      boolean boolean0 = complex1.isNaN();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex5.pow((-8.316530604593264E105));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-2338.452989), (-2338.452989));
      Complex complex1 = Complex.valueOf((-4213.87981), 868.525485);
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex1.NaN.add(complex0);
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex3.INF.asin();
      Complex complex6 = complex0.pow(0.0);
      double double0 = complex3.abs();
      Complex complex7 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.I.sqrt1z();
      int int0 = complex2.NaN.hashCode();
      int int1 = complex2.ZERO.hashCode();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex4.I.reciprocal();
      Complex complex7 = complex0.acos();
      Complex complex8 = Complex.valueOf(Double.NaN);
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex0.readResolve();
      Object object1 = complex0.I.readResolve();
      boolean boolean1 = complex1.equals("");
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex0.divide(complex9);
      double double1 = complex8.getReal();
      Complex complex11 = complex0.sinh();
      Complex complex12 = complex10.multiply((-1364));
      Complex complex13 = complex2.subtract(Double.POSITIVE_INFINITY);
      Object object2 = complex1.readResolve();
      double double2 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 625.3086163636809);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex1.I.cosh();
      int int0 = complex3.hashCode();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(2139.0, 2139.0);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.NaN.tanh();
      double double0 = complex0.I.abs();
      double double1 = complex0.getArgument();
      Complex complex3 = complex2.acos();
      List<Complex> list0 = complex3.NaN.nthRoot(1);
      Complex complex4 = complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, Double.NaN);
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex2.createComplex(0.0, 2632.0);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex0.divide(6.283185307179586);
      Complex complex9 = complex7.divide(Double.NaN);
      Complex complex10 = complex9.NaN.sqrt1z();
      Complex complex11 = complex6.pow(complex2);
      Complex complex12 = complex11.acos();
      Complex complex13 = Complex.valueOf(Double.NaN, 3062.076);
      Complex complex14 = complex12.sqrt1z();
      Complex complex15 = Complex.valueOf(2632.0);
      Complex complex16 = complex11.sqrt1z();
      Complex complex17 = complex6.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.NaN.acos();
      double double0 = complex2.getImaginary();
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(2991.07262);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.multiply(1400);
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.log();
      Complex complex6 = complex0.add(complex4);
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.multiply(246);
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex3.I.divide(complex2);
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1708.4257);
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.subtract((-586.73776));
      Complex complex2 = complex0.NaN.conjugate();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Object object0 = complex0.readResolve();
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.acos();
      double double1 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.4483033794784014E-8, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.conjugate();
      String string0 = complex0.ZERO.toString();
      Complex complex2 = complex1.ONE.sinh();
      List<Complex> list0 = complex2.nthRoot(694);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.subtract(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.divide(Double.POSITIVE_INFINITY);
      int int0 = complex5.ONE.hashCode();
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = complex0.ZERO.divide(complex1);
      String string1 = complex5.toString();
      Complex complex8 = complex5.negate();
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex9.ZERO.pow(Double.POSITIVE_INFINITY);
      Complex complex11 = complex7.tanh();
      Complex complex12 = complex5.ONE.multiply((-6.552819560439773E-9));
      Complex complex13 = complex3.tanh();
      Complex complex14 = complex8.divide(complex9);
      Complex complex15 = complex13.tanh();
      Complex complex16 = complex15.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.multiply(475);
      boolean boolean0 = complex4.isNaN();
      Complex complex5 = complex4.createComplex((-10.0), 475);
      boolean boolean1 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex2.NaN.pow(1275.2262);
      Complex complex5 = complex3.I.negate();
      Complex complex6 = complex1.NaN.exp();
      Complex complex7 = new Complex(794.985, 0.0);
      List<Complex> list0 = complex6.ZERO.nthRoot(1);
      Complex complex8 = complex3.divide(complex7);
      Complex complex9 = complex2.ZERO.exp();
      Complex complex10 = complex2.divide(complex3);
      Complex complex11 = complex5.subtract(complex6);
      Complex complex12 = complex10.NaN.sqrt();
      Complex complex13 = complex2.tanh();
      Complex complex14 = complex13.exp();
      Complex complex15 = complex14.cos();
      Complex complex16 = complex10.pow(2.0);
      Complex complex17 = complex11.divide(370.19);
      Complex complex18 = complex1.multiply((-1809.6059690165973));
      Complex complex19 = complex2.multiply((-4.7208848667217906E221));
      Complex complex20 = complex2.add(0.0);
      Complex complex21 = complex2.tan();
      Complex complex22 = complex4.negate();
      List<Complex> list1 = complex6.nthRoot(1278);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.sinh();
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex2.NaN.sqrt1z();
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.I.divide(0.0);
      int int0 = complex5.INF.hashCode();
      Complex complex6 = complex2.log();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex4.I.conjugate();
      Complex complex9 = complex6.add((-823.724496965));
      Complex complex10 = complex9.ONE.sin();
      Complex complex11 = complex1.NaN.subtract((-823.724496965));
      Complex complex12 = complex9.INF.multiply(complex0);
      boolean boolean0 = complex6.equals(complex3);
      Complex complex13 = complex0.ZERO.multiply(2137);
      Complex complex14 = complex2.log();
      Complex complex15 = Complex.valueOf((-823.724496965));
      Complex complex16 = complex15.NaN.tanh();
      Complex complex17 = complex6.pow(complex4);
      Complex complex18 = complex6.subtract(complex1);
      Complex complex19 = complex0.asin();
      Complex complex20 = complex1.pow(complex17);
      Complex complex21 = complex19.sinh();
      Complex complex22 = Complex.valueOf(0.0);
      Complex complex23 = new Complex(0.0);
      List<Complex> list0 = complex23.NaN.nthRoot(2137);
      Complex complex24 = complex7.pow(complex23);
      Complex complex25 = complex23.divide(1588.24653);
      String string0 = complex4.toString();
      Complex complex26 = complex5.asin();
      Complex complex27 = complex3.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.INF.multiply(1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.ONE.cos();
      Complex complex5 = complex3.I.asin();
      Complex complex6 = complex2.ZERO.divide(complex5);
      Complex complex7 = complex3.subtract(complex2);
      boolean boolean0 = complex3.equals(complex1);
      Complex complex8 = complex2.ONE.divide(complex1);
      Complex complex9 = complex2.atan();
      String string0 = complex7.ONE.toString();
      Complex complex10 = complex7.add(1195.644686004126);
      Complex complex11 = complex9.reciprocal();
      int int0 = complex5.hashCode();
      int int1 = complex3.hashCode();
      Complex complex12 = complex1.sin();
      Complex complex13 = complex8.cos();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex((-4.768920119497491E-8), (-4.768920119497491E-8));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.pow(complex0);
      String string0 = complex0.toString();
      Complex complex3 = complex0.ZERO.sin();
      double double0 = complex3.getReal();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex4.INF.pow(0.0);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex4.NaN.tan();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex7.ONE.reciprocal();
      Complex complex10 = complex9.ONE.asin();
      Complex complex11 = Complex.valueOf((-4.768920119497491E-8));
      Complex complex12 = complex1.INF.cos();
      double double1 = complex12.ONE.abs();
      Complex complex13 = Complex.valueOf((-2369.0), (-445.0));
      Complex complex14 = complex3.tan();
      Complex complex15 = complex13.NaN.sinh();
      Complex complex16 = complex1.log();
      Complex complex17 = complex0.NaN.divide(complex9);
      Complex complex18 = complex16.add((-2511.357574846299));
      Object object0 = complex16.NaN.readResolve();
      Complex complex19 = complex7.tanh();
      Complex complex20 = complex0.multiply(101.939);
      Complex complex21 = complex13.acos();
      Complex complex22 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(899.43152223865, 899.43152223865);
      Complex complex1 = Complex.valueOf(899.43152223865);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = complex3.NaN.asin();
      Complex complex6 = complex3.I.subtract(complex2);
      Complex complex7 = complex6.I.acos();
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex2.NaN.cos();
      Complex complex10 = complex9.I.sqrt1z();
      Complex complex11 = complex9.I.reciprocal();
      Complex complex12 = complex1.INF.subtract(complex6);
      Complex complex13 = complex1.atan();
      Complex complex14 = complex8.subtract(899.43152223865);
      Complex complex15 = complex8.atan();
      double double0 = complex15.getImaginary();
      Complex complex16 = complex8.multiply(complex0);
      Complex complex17 = complex0.asin();
      Complex complex18 = complex1.reciprocal();
      Complex complex19 = complex0.divide((double) (-1605));
      Complex complex20 = complex19.exp();
      Complex complex21 = complex19.NaN.multiply(3256);
      Complex complex22 = complex4.asin();
      Complex complex23 = Complex.valueOf(2.0964269638061523, 1721.841802);
      Complex complex24 = complex1.sqrt1z();
  }
}
