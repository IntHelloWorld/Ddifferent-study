/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:46:57 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = MathUtils.cosh(2544.424716111125);
      double double1 = MathUtils.binomialCoefficientDouble(92, 92);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 92;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (double) 92;
      int int0 = MathUtils.subAndCheck(92, 92);
      int[] intArray0 = new int[9];
      intArray0[0] = 92;
      intArray0[1] = 0;
      intArray0[2] = 1967;
      intArray0[3] = 92;
      intArray0[4] = 0;
      intArray0[5] = 15;
      intArray0[6] = 0;
      intArray0[7] = (int) (byte)0;
      intArray0[8] = 92;
      double double2 = MathUtils.distance(intArray0, intArray0);
      byte byte0 = MathUtils.sign((byte)0);
      double double3 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1027);
      try { 
        MathUtils.pow(bigInteger1, (-1157));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = MathUtils.compareTo(552.558108961926, 1.304E19, 0.0);
      long long0 = MathUtils.mulAndCheck(845L, 845L);
      int int1 = 239;
      int int2 = MathUtils.addAndCheck(239, 1048);
      double double0 = MathUtils.normalizeAngle(1048, (-1));
      byte byte0 = MathUtils.indicator((byte) (-10));
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1861.275);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.375;
      MathUtils.checkOrder(doubleArray0);
      int int0 = MathUtils.lcm(0, 0);
      boolean boolean0 = MathUtils.equals(0.0, (double) 0, 0.0);
      double double0 = 139.5;
      boolean boolean1 = MathUtils.equalsIncludingNaN(4799.0, 139.5);
      float float0 = MathUtils.indicator((float) 0);
      double double1 = MathUtils.round((-1194.3915), 0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.clearBit(0);
      String string0 = bigInteger0.toString();
      int int1 = bigInteger0.bitCount();
      // Undeclared exception!
      try { 
        bigInteger0.remainder((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)67);
      float float0 = MathUtils.round((-598.1F), 0);
      double double0 = MathUtils.binomialCoefficientLog((byte)67, (byte)1);
      double double1 = MathUtils.sinh((-1996.2542347608476));
      double double2 = MathUtils.scalb((-598.1F), (-1926));
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, 13.0);
      long long0 = MathUtils.mulAndCheck(0L, (long) (byte)1);
      long long1 = MathUtils.subAndCheck((long) (byte)1, 79L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 13.0;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 1970.51289;
      doubleArray0[3] = 747.201197773461;
      doubleArray0[4] = (double) (-1926);
      doubleArray0[5] = (double) (byte)1;
      doubleArray0[6] = 1577.893058112603;
      doubleArray0[7] = (-313.331088402452);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (13 >= -\u221E)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 447.2964791192;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, 0.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
      long long0 = MathUtils.indicator(0L);
      double double1 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.sign(Float.NaN);
      long long1 = MathUtils.subAndCheck(1L, (-1575L));
      // Undeclared exception!
      try { 
        MathUtils.equals((double) Float.NaN, 0.0, (-3791));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4259.80067);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-4259.80067), (-4259.80067));
      boolean boolean1 = MathUtils.equals((-4259.80067), 3167.2751600070205);
      int int0 = MathUtils.hash((-842.0));
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int1 = MathUtils.hash((-0.41320543814));
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = bigInteger0.toString(15);
      long long0 = bigInteger0.longValueExact();
      int int2 = bigInteger0.intValueExact();
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 3198L);
      double[] doubleArray1 = new double[9];
      boolean boolean2 = bigInteger0.isProbablePrime(46);
      doubleArray1[0] = (-4259.80067);
      doubleArray1[1] = (double) (-2029011761);
      doubleArray1[2] = (double) (-1064677376);
      doubleArray1[3] = (-842.0);
      doubleArray1[4] = (double) (byte)10;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (double) (byte)10;
      doubleArray1[8] = 3167.2751600070205;
      boolean boolean3 = MathUtils.equals(doubleArray1, doubleArray0);
      boolean boolean4 = MathUtils.equalsIncludingNaN(0.0, (-1515.4));
      double double1 = MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = (-3216.98313);
      boolean boolean0 = MathUtils.equals((-3918.21), (-3216.98313), (-3216.98313));
      BigInteger bigInteger0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((-8156.428), 5.650007086920087E-9);
      long long0 = MathUtils.lcm(767L, 2472L);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 4194304;
      double double0 = MathUtils.binomialCoefficientLog(4194304, 4194304);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 4194304);
      double double1 = MathUtils.round(Double.POSITIVE_INFINITY, 4194304, 4194304);
      int int1 = MathUtils.compareTo((-1212.3487711), 4194304, 0.0);
      float float0 = MathUtils.sign(51.04F);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float float0 = MathUtils.round(2301.0F, (-865));
      int int0 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.log((-256.3786554049), Float.NaN);
      float float1 = MathUtils.indicator(1.0F);
      long long0 = MathUtils.lcm((-327L), (long) (-865));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-865);
      MathUtils.checkOrder(doubleArray0);
      long long1 = MathUtils.mulAndCheck((long) 0, 282855L);
      long long2 = MathUtils.lcm((-2064L), 0L);
      double double1 = MathUtils.round((double) 0L, 0, 0);
      long long3 = MathUtils.mulAndCheck(282855L, 0L);
      double double2 = MathUtils.normalizeAngle(2100.2221, (-865));
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((double) (-2064L), (double) 282855L);
      byte byte0 = MathUtils.indicator((byte)0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double4 = MathUtils.sign((double) 2301.0F);
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 0, 16);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 16, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 63;
      intArray0[2] = 0;
      intArray0[3] = 2398;
      intArray0[5] = 114;
      intArray0[6] = (-979);
      intArray0[7] = 11;
      intArray0[8] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.mulAndCheck((-412), 11);
      int int2 = MathUtils.pow(114, (long) 0);
      byte byte0 = MathUtils.indicator((byte) (-31));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 997.4;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.normalizeAngle(2632.7868, 3.834E-20);
      long long0 = MathUtils.mulAndCheck((-2549L), (-2549L));
      float float0 = MathUtils.sign(Float.NaN);
      long long1 = MathUtils.subAndCheck((-2549L), 6497401L);
      boolean boolean0 = MathUtils.equals(322.73019713, 827.7431915218862, (double) 6497401L);
      int[] intArray0 = new int[3];
      intArray0[2] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-2020));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.normalizeAngle((short) (-1), 0.0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double2 = MathUtils.log(0.0, (-1478.6465580605825));
      float float0 = MathUtils.round(974.1F, (int) (short) (-1));
      float float1 = MathUtils.round(711.907F, 63);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      boolean boolean1 = MathUtils.equalsIncludingNaN(Double.NaN, (-1.0), 1262.61717067766);
      boolean boolean2 = MathUtils.equals(0.0, 0.0, 0.0);
      boolean boolean3 = MathUtils.equalsIncludingNaN(1430.988254, 378.78672971692, 203);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-1445));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1445);
      doubleArray0[1] = (double) (short) (-1445);
      doubleArray0[2] = (double) (short) (-1445);
      doubleArray0[3] = (double) (short) (-1445);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (short) (-1445);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1445.0), (double) (short) (-1), (double) (short) (-1445));
      double double1 = MathUtils.scalb((-838.636), 0);
      short short1 = MathUtils.sign((short) (-1250));
      int int0 = MathUtils.compareTo((-1445.0), 2.2250738585072014E-308, (-1445.0));
      int int1 = MathUtils.sign(0);
      int int2 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.mulAndCheck(720L, 4065L);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(1780, 1903);
      double double0 = MathUtils.round((-0.12502530217170715), 112);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-588L), 4607182418800017408L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = MathUtils.pow((-947), 0);
      float float0 = MathUtils.indicator((float) 0);
      double double0 = MathUtils.sign((double) 1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1429.158475345298;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-947);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (-947);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int int1 = MathUtils.sign((-1879));
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      float float1 = MathUtils.round((-3273.9F), (-1), 0);
      int int2 = MathUtils.pow((-1879), 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 17);
      float float2 = MathUtils.round((float) 1, 0);
      float float3 = MathUtils.round(Float.NaN, 0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = MathUtils.gcd(3952090531849364496L, (-744L));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = MathUtils.cosh(2544.424716111125);
      int int0 = 92;
      double double1 = MathUtils.binomialCoefficientDouble(92, 92);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 92;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (double) 92;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (\u221E > 92)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (-1554.4);
      doubleArray0[4] = 551.8229005;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1461.517980292);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = (-26);
      int int1 = 0;
      int int2 = MathUtils.lcm((-26), 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      float float0 = MathUtils.round((float) (short)0, (int) (short)1);
      short short1 = MathUtils.indicator((short)206);
      double double0 = MathUtils.normalizeAngle(1987.18928478, 10.0);
      byte byte0 = MathUtils.indicator((byte) (-71));
      double double1 = MathUtils.log(2.2250738585072014E-308, 0.0);
      long long0 = MathUtils.pow((long) (short)1, 522L);
      int int0 = MathUtils.addAndCheck((-647), (int) (short)1);
      double double2 = MathUtils.factorialLog((short)206);
      double double3 = MathUtils.indicator((double) (short)0);
      int[] intArray0 = new int[7];
      intArray0[0] = 13;
      intArray0[1] = 3712;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (-647);
      intArray0[4] = (int) (byte) (-71);
      intArray0[5] = 21;
      intArray0[6] = (int) (short)1;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      float float1 = MathUtils.round(0.0F, (int) (byte) (-71));
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger("=RabI&(bf|6%I.", 13);
      } catch(NumberFormatException e) {
         //
         // For input string: \"=RabI&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = MathUtils.pow(4607182418800017408L, 319L);
      int int0 = MathUtils.sign(0);
      long long1 = MathUtils.pow((-1788L), 0);
      double double0 = MathUtils.sign((double) 4607182418800017408L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 4607182418800017408L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 319L;
      doubleArray0[5] = (double) 4607182418800017408L;
      double double1 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.sign((float) 319L);
      int int1 = MathUtils.hash((-1065.44712064976));
      byte byte0 = MathUtils.indicator((byte)0);
      int int2 = MathUtils.compareTo(4.6071824188000174E18, 2241.7118714, (byte)1);
      double double2 = MathUtils.factorialLog(63);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 250);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.mulAndCheck(0, 0);
      float float0 = (-1738.95F);
      float float1 = MathUtils.sign((-1738.95F));
      long long0 = MathUtils.sign((long) 0);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      long long1 = MathUtils.indicator(0L);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 1L, (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1428.896650308);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck(0L, 0L);
      short short0 = MathUtils.sign((short)0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 42.0);
      long long1 = MathUtils.addAndCheck(0L, (long) (short)0);
      double double2 = MathUtils.factorialDouble((short)0);
      double double3 = MathUtils.sinh(0.0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int int0 = MathUtils.hash(0.0);
      double double4 = MathUtils.log(0.0, 0.0);
      int int1 = MathUtils.lcm((int) (short)0, 0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(0, 0);
      double double0 = (-596.6604510299295);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (-596.6604510299295));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float float0 = MathUtils.round((-1751.4971F), 189);
      boolean boolean0 = MathUtils.equalsIncludingNaN(88.8356894710089, (double) 189, 2.2250738585072014E-308);
      int int0 = MathUtils.sign(189);
      int int1 = MathUtils.addAndCheck(1, 63);
      int int2 = MathUtils.mulAndCheck(2001, 189);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 88.8356894710089;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.addAndCheck((long) 2001, 2333L);
      long long1 = MathUtils.factorial(1);
      double double1 = MathUtils.normalizeAngle((-1751.4971F), 1);
      long long2 = MathUtils.binomialCoefficient(189, 1);
      long long3 = MathUtils.mulAndCheck(1990L, 0L);
      long long4 = MathUtils.mulAndCheck(2170L, (long) 2001);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 17);
      int int0 = 666;
      double double0 = MathUtils.binomialCoefficientLog(666, 17);
      byte byte0 = (byte) (-69);
      byte byte1 = MathUtils.indicator((byte) (-69));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equals(703.0, 703.0, 3008);
      double double0 = MathUtils.binomialCoefficientDouble(3024, 2290);
      short short0 = MathUtils.indicator((short)52);
      byte byte0 = MathUtils.sign((byte)50);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = MathUtils.factorial(15);
      int int0 = MathUtils.pow((-4499), 335L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 393072549;
      doubleArray0[1] = (double) 335L;
      doubleArray0[2] = (double) 335L;
      doubleArray0[3] = (double) 393072549;
      doubleArray0[4] = (double) 15;
      doubleArray0[5] = 12.0;
      doubleArray0[6] = (double) 335L;
      doubleArray0[7] = (double) 393072549;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign((float) 1307674368000L);
      double double1 = MathUtils.log(3.93072549E8, (-1644.0));
      int int1 = MathUtils.pow(0, 1980L);
      int int2 = 552;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(552, 45);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      short short0 = (short)4037;
      short short1 = MathUtils.indicator((short)4037);
      int int0 = 0;
      int int1 = 0;
      double double1 = MathUtils.round((double) (short)4037, 0, 0);
      try { 
        MathUtils.pow((long) (short)1, (-1241));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1,241)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 4986.579989547473;
      doubleArray0[1] = 3294198.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2256.6;
      doubleArray0[4] = 3308.1250805;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-95.910877182268);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = 0;
      int int1 = (-1739);
      long long0 = MathUtils.binomialCoefficient(0, (-1739));
      int int2 = MathUtils.hash(doubleArray0);
      int int3 = (-2);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-2807.66), 1.0E-6, (-2));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 278;
      intArray0[2] = (-247);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-214);
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-247);
      intArray1[3] = 278;
      intArray1[4] = 0;
      intArray1[5] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray1);
      // Undeclared exception!
      try { 
        MathUtils.round(1.0F, 0, 278);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 278, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(2L, 0L);
      int int0 = MathUtils.gcd(0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)8;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      int int1 = bigInteger1.bitLength();
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
      long long1 = MathUtils.lcm(0L, 1569L);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = MathUtils.hash(840.0607761);
      BigInteger bigInteger0 = BigInteger.TEN;
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)10;
      intArray0[1] = (int) (short)10;
      intArray0[2] = 950292347;
      intArray0[3] = (int) (short)10;
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 950292347;
      intArray1[2] = 950292347;
      intArray1[3] = (int) (short)10;
      intArray1[4] = 67;
      intArray1[5] = 1201;
      intArray1[6] = (int) (short)10;
      intArray1[7] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = MathUtils.sign(2.0);
      int int0 = MathUtils.pow(31, 900L);
      short short0 = MathUtils.indicator((short)1550);
      double double1 = MathUtils.binomialCoefficientDouble(31, (short)1);
      long long0 = MathUtils.sign(0L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2139183231);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (short)1550;
      doubleArray0[3] = 31.0;
      doubleArray0[4] = (double) (short)1550;
      doubleArray0[5] = (double) (short)1;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double2 = MathUtils.normalizeAngle(5560.458978574246, 0.0);
      double double3 = MathUtils.indicator((double) 900L);
      long long1 = MathUtils.gcd((-3333L), (-1713L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.setBit(31);
      float float0 = bigInteger0.floatValue();
      short short1 = bigInteger0.shortValueExact();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      int int1 = MathUtils.hash((-2.139183231E9));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        MathUtils.pow((-603), (-2425L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-603^-2,425)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1053.790962083, 1053.790962083, 1053.790962083);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1053.790962083, 1053.790962083);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1053.790962083;
      doubleArray0[1] = 1053.790962083;
      doubleArray0[2] = 1053.790962083;
      doubleArray0[3] = 1053.790962083;
      doubleArray0[4] = 0.125;
      doubleArray0[5] = 1053.790962083;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-1532), 20);
      byte byte0 = MathUtils.sign((byte)63);
      int int1 = MathUtils.lcm(38, 38);
      int int2 = MathUtils.pow((-1552), (long) (byte)63);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 590.52861763;
      doubleArray0[1] = (-1502.543937);
      doubleArray0[2] = (-0.16666666666666666);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1502.543937);
      doubleArray1[3] = 340.67938;
      doubleArray1[4] = (-0.16666666666666666);
      doubleArray1[5] = (-0.16666666666666666);
      doubleArray1[6] = (-1502.543937);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      double double1 = MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = MathUtils.indicator(1792L);
      double double0 = MathUtils.factorialLog(2333);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = MathUtils.pow(3586L, 9218868437227405312L);
      short short0 = (short)115;
      short short1 = MathUtils.sign((short)115);
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 9218868437227405312L, 0.0, (double) 0L);
      double double1 = MathUtils.scalb(0.0, 2);
      boolean boolean1 = MathUtils.equals((double) (short)1, 0.0);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        MathUtils.normalizeArray((double[]) null, Double.NaN);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-233.45);
      doubleArray0[2] = 0.5;
      doubleArray0[3] = (-105.2318);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm(20922789888000L, 0L);
      double double1 = MathUtils.scalb(0.0, 52);
      int int0 = MathUtils.addAndCheck(0, 52);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-233.45 <= 0.5)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-1163.5);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1075.27;
      doubleArray0[5] = 116.1374177504;
      doubleArray0[6] = 6209.9396268148;
      doubleArray0[7] = (-1912.895667);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float float0 = MathUtils.round((-567.85345F), 61);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-567.85345F);
      doubleArray0[1] = (double) Float.NaN;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double0 = MathUtils.normalizeAngle((-567.8534545898438), (-567.8534545898438));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2359.930879, 2359.930879, 81);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 81;
      doubleArray0[1] = (double) 81;
      doubleArray0[2] = 2359.930879;
      doubleArray0[3] = 2359.930879;
      doubleArray0[4] = 2359.930879;
      doubleArray0[5] = 2359.930879;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2359.930879;
      doubleArray1[1] = (double) 81;
      doubleArray1[2] = 2359.930879;
      doubleArray1[3] = (double) 81;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      float float0 = MathUtils.round(3902.9307F, (-1387), 0);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = MathUtils.indicator(425L);
      MockRandom mockRandom0 = new MockRandom(1394L);
      BigInteger bigInteger0 = BigInteger.probablePrime(81, mockRandom0);
      long long1 = mockRandom0.nextLong();
      // Undeclared exception!
      try { 
        mockRandom0.longs((-9223372036854775808L), (long) 0, 6227020800L);
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.cosh(7.0);
      float float0 = 0.0F;
      int int0 = 0;
      float float1 = MathUtils.round(0.0F, 0);
      long long0 = 2432902008176640000L;
      long long1 = MathUtils.subAndCheck((long) 0, 2432902008176640000L);
      long long2 = 0L;
      long long3 = MathUtils.subAndCheck((-2432902008176640000L), 0L);
      int int1 = MathUtils.addAndCheck(0, 2016);
      // Undeclared exception!
      try { 
        MathUtils.factorial(2016);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 67;
      double double0 = MathUtils.round((-1725.184865617), 67);
      int int1 = 0;
      int int2 = MathUtils.sign(0);
      int int3 = MathUtils.sign(2931);
      int int4 = 11;
      long long0 = MathUtils.pow((long) 1, 11);
      byte byte0 = (byte) (-81);
      byte byte1 = MathUtils.sign((byte) (-81));
      long long1 = 0L;
      long long2 = MathUtils.gcd(0L, 1495L);
      // Undeclared exception!
      try { 
        MathUtils.factorial(2931);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-702.660522872);
      doubleArray0[1] = 174.953;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 724.1135011942206;
      doubleArray1[1] = 724.1135011942206;
      doubleArray1[2] = (-702.660522872);
      doubleArray1[3] = 724.1135011942206;
      doubleArray1[4] = 174.953;
      doubleArray1[5] = (-702.660522872);
      doubleArray1[6] = 174.953;
      doubleArray1[7] = 724.1135011942206;
      doubleArray1[8] = 174.953;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 11, 1557);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = (-1559);
      int int1 = MathUtils.gcd((-1559), (-1559));
      int int2 = MathUtils.compareTo(0.0, 1.1102230246251565E-16, 3310.58143359549);
      int int3 = MathUtils.lcm(1559, 0);
      int int4 = 3013;
      double double1 = MathUtils.scalb((-1559), 3013);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int5 = MathUtils.indicator(0);
      long long0 = MathUtils.indicator((-2563L));
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte) (-71));
      long long1 = MathUtils.binomialCoefficient(125, (byte) (-1));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 3013, 0.0, 0.0);
      long long2 = MathUtils.mulAndCheck((long) (byte) (-1), (long) 3013);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 3310.58143359549, (-847.128761));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.lcm((-1770), (-3667));
      double double0 = MathUtils.indicator((double) (-3667));
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 6490590);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 6,490,590
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = MathUtils.lcm(140, 23);
      double double0 = MathUtils.sinh(3220);
      long long0 = MathUtils.addAndCheck(0L, 2232L);
      int int1 = MathUtils.indicator(140);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 2232L;
      doubleArray0[2] = (double) 2232L;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 2232L;
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-66));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -66
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = MathUtils.pow(40320L, 0L);
      int int0 = (-224);
      int int1 = (-1296);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-224), (-1296));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -224
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.log(3.141592653589793, 0.0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      double double0 = MathUtils.cosh(0);
      short short0 = (short)19;
      short short1 = MathUtils.sign((short)19);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.subAndCheck(0L, 0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (short)19;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-2270.607567215149), (-2270.607567215149));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2270.607567215149);
      doubleArray0[1] = (-2270.607567215149);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-614.0053667650724));
      int int0 = 18;
      long long0 = MathUtils.factorial(18);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = (-1735.71);
      double double1 = MathUtils.sinh((-1735.71));
      int int0 = MathUtils.subAndCheck(2007, 5);
      int[] intArray0 = new int[3];
      intArray0[0] = 5;
      intArray0[1] = 2007;
      intArray0[2] = 2007;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.indicator(1664.0);
      short short0 = MathUtils.indicator((short)0);
      int int2 = MathUtils.addAndCheck(2007, 0);
      int int3 = MathUtils.pow(0, (long) 0);
      int int4 = MathUtils.gcd((int) (short)1, 2007);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0, (double) 5, (int) (short)0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      long long0 = MathUtils.sign((long) 0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 61;
      double double0 = MathUtils.scalb((-1117.3), 61);
      float float0 = MathUtils.indicator((float) 61);
      long long0 = MathUtils.addAndCheck(113236205062349959L, 0L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2.57631839419446E21);
      doubleArray0[1] = (double) 113236205062349959L;
      doubleArray0[2] = 10.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (113,236,205,062,349,952 >= 10)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(1L, (-93L));
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long1 = MathUtils.gcd(0L, 94L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(9218868437227405312L, 9218868437227405312L);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 9,218,868,437,227,405,312 + 9,218,868,437,227,405,312
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float float0 = MathUtils.round((-1.0F), 0);
      long long0 = MathUtils.mulAndCheck(0L, (long) 0);
      short short0 = (short) (-748);
      short short1 = MathUtils.indicator((short) (-748));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1);
      MathUtils.checkOrder(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals(1985.30813, (double) (short) (-1), (int) (short) (-1));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = MathUtils.pow(1982, 1982);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("*f1Ds8#Pd igj7");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.*f1Ds8#Pd igj7
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = MathUtils.hash(3046.09639461221);
      int int1 = MathUtils.pow(436582873, 1142L);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double0 = MathUtils.factorialDouble(42);
      double double1 = MathUtils.scalb((-0.2499999997677497), 197);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1100.579807771);
      doubleArray0[1] = 1476.81465089;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1360.57945);
      doubleArray0[4] = (-4008.14369);
      doubleArray0[5] = 0.08371849358081818;
      doubleArray0[6] = (-378.0190962237417);
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.round(0.0F, (-1784));
      float float1 = MathUtils.indicator(0.0F);
      try { 
        MathUtils.pow(3094, (-1784));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (3,094^-1,784)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1751.4363373012);
      doubleArray0[1] = 1272.9976229947;
      doubleArray0[2] = 1198.9773373701455;
      doubleArray0[3] = 1257.377222761;
      doubleArray0[4] = 110.158461061;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.hash(2.2250738585072014E-308);
      int int2 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(1456971127, 0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1048576;
      doubleArray1[1] = 1257.377222761;
      doubleArray1[2] = 1257.377222761;
      doubleArray1[3] = 1257.377222761;
      doubleArray1[4] = (double) 1048576;
      doubleArray1[5] = 6.283185307179586;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float float0 = MathUtils.round((-204.0F), 0, 0);
      try { 
        MathUtils.pow(0, (-473));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-473)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = MathUtils.gcd(645L, 1489L);
      boolean boolean0 = MathUtils.equals((double) 645L, 0.0, (double) 1489L);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2330;
      intArray0[2] = 31;
      intArray0[3] = 0;
      intArray0[4] = (-1419);
      int int0 = (-197);
      intArray0[5] = (-197);
      intArray0[6] = (-1106);
      intArray0[7] = 1007;
      intArray0[8] = 1030;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.indicator(3.834E-20);
      int int2 = MathUtils.hash((-1866.3360806947169));
      int int3 = MathUtils.lcm(1786, 1007);
      short short0 = MathUtils.indicator((short)73);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-451638311), 101);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -451,638,311, k = 101
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-269);
      intArray0[1] = (-1485);
      intArray0[2] = 89;
      intArray0[3] = (-1919);
      intArray0[4] = 0;
      intArray0[5] = 1423;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equals(0.0, 0.030589580535888672, 1886);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.030589580535888672);
      long long0 = 24L;
      long long1 = MathUtils.pow((long) 1886, 24L);
      boolean boolean2 = MathUtils.equals(460.47116, (double) 4538343213424967680L, 460.47116);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.negate();
      int int0 = 10;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      String string0 = bigInteger1.toString(10);
      BigInteger bigInteger3 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger4 = bigInteger1.shiftRight(0);
      BigInteger bigInteger5 = bigInteger0.flipBit(0);
      int int1 = 0;
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 0);
      int int2 = bigInteger0.bitLength();
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      double double0 = MathUtils.factorialDouble(0);
      try { 
        MathUtils.pow((-1967L), (-559L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,967^-559)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.pow(1271L, 1510L);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, (-1572.8));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, (-1337.062446057833), 2144835702);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = (-79L);
      try { 
        MathUtils.pow((-3958705157555305932L), (-79L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,958,705,157,555,305,932^-79)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathUtils.cosh(0.030589580535888672);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2843;
      intArray0[3] = 1546;
      intArray0[4] = 3117;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = MathUtils.sign(84);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 84;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 84;
      doubleArray0[5] = (double) 84;
      doubleArray0[6] = (double) 1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (84 > 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float float0 = MathUtils.sign((-641.76733F));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(3622, 0);
      double double0 = MathUtils.sinh(0.0);
      float float0 = MathUtils.indicator(1.0F);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1L, 0.0, (double) 1L);
      int int0 = MathUtils.gcd(0, 0);
      int int1 = MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.sinh((-81.9154630005429));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1.8810639830632834E35), (-81.9154630005429), (-81.9154630005429));
      int int0 = MathUtils.indicator((-3536));
      int int1 = MathUtils.compareTo((-1052.389514437748), (-81.9154630005429), (-3.940510424527919E-20));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      int int0 = MathUtils.compareTo((-2990.711193110268), 1.0, 3.834E-20);
      int int1 = MathUtils.compareTo(1.0, (-2990.711193110268), 0.10526403784751892);
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = (-2032L);
      int int0 = (-3696);
      try { 
        MathUtils.pow((-2032L), (-3696));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,032^-3,696)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(486L, 486L);
      int int0 = MathUtils.gcd(0, 83);
      double double0 = MathUtils.sign((double) 486L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(129, 129);
      long long0 = MathUtils.binomialCoefficient(129, 129);
      float float0 = MathUtils.sign((float) 129);
      double double1 = MathUtils.normalizeAngle((-2708.114132), 0.0);
      double double2 = MathUtils.round((double) 1L, 129);
      double double3 = MathUtils.sign(0.375);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.round(220.7, 0);
      byte byte0 = (byte)3;
      byte byte1 = MathUtils.indicator((byte)3);
      short short0 = MathUtils.sign((short) (byte)1);
      double double1 = MathUtils.scalb((byte)1, 0);
      double double2 = MathUtils.indicator(221.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 220.7;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (byte)1;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (220.7 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = 933L;
      int int0 = MathUtils.pow(0, 933L);
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(933L, (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = MathUtils.pow(110, (long) 110);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = 0.6666666269302368;
      int int0 = MathUtils.compareTo(0.030589580535888672, 0.6666666269302368, 0.030589580535888672);
      float float0 = MathUtils.indicator((-1077.2F));
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-1.0F), (-1), (-1));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-619.7509558244778);
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 51.33353;
      doubleArray0[3] = 3045.7;
      double double1 = (-3710.0593);
      doubleArray0[4] = (-3710.0593);
      doubleArray0[5] = 4028.7080998723973;
      doubleArray0[6] = (-2596.14027);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = (-1939);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1939));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,939
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals((-1.0E-6), (-1.0E-6), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(24L, 24L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (-2922.58474236);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 24L;
      doubleArray0[4] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(1307L, 1307L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (-5808.15885851027);
      doubleArray0[5] = (double) 1307L;
      doubleArray0[6] = (double) 1307L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign((float) 0L);
      int int0 = MathUtils.lcm(118, 0);
      long long1 = MathUtils.lcm((long) 0, (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-429));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -429
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      int int1 = MathUtils.addAndCheck(0, (-827));
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int2 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.sign((double) (-827));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = MathUtils.sign((-1293));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      try { 
        MathUtils.normalizeArray(doubleArray0, (-2.957007209750105E-8));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      float float0 = MathUtils.round((float) 0L, 21);
      long long2 = (-2623L);
      long long3 = MathUtils.lcm(956L, (-2623L));
      int int0 = 428;
      // Undeclared exception!
      try { 
        MathUtils.round((-1.0F), 428, (-2057));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -2,057, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = MathUtils.lcm(276, 247);
      long long0 = MathUtils.pow((-210L), 247);
      long long1 = MathUtils.pow((long) 276, 115);
      long long2 = MathUtils.subAndCheck((-218L), 1033L);
      boolean boolean0 = MathUtils.equals(2204.0, (double) 68172);
      double double0 = MathUtils.sign((double) 68172);
      float float0 = MathUtils.round((float) 115, 68172);
      boolean boolean1 = MathUtils.equals((double) (-218L), (double) (-210L));
      double double1 = MathUtils.sign(0.0);
      byte byte0 = MathUtils.sign((byte)24);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      boolean boolean0 = MathUtils.equals((double) 0, 2379.9, (double) 0);
      long long0 = MathUtils.pow((long) 0, 0);
      boolean boolean1 = MathUtils.equals((double) 1L, (double) 0, 2418.068690181);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.sign((-1659.346054634423));
      int int0 = MathUtils.compareTo((-1.0), 3.141592653589793, 3.141592653589793);
      long long0 = MathUtils.addAndCheck((long) (-1), (long) (-1));
      double double1 = MathUtils.factorialDouble(66);
      long long1 = MathUtils.lcm((long) 66, (-2697L));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2L);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = (double) (-2697L);
      doubleArray0[4] = 5.443449390774456E92;
      double double2 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2582.69893, 2582.69893);
      int int0 = (-3701);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-3701));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,701
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(18, 2304);
      long long0 = MathUtils.mulAndCheck(0L, 2058L);
      long long1 = MathUtils.mulAndCheck(0L, (long) 18);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = MathUtils.gcd(2147483647L, 0L);
      double double0 = MathUtils.cosh(6.283185307179586);
      float float0 = MathUtils.indicator(0.0F);
      double double1 = MathUtils.normalizeAngle(1552.513, 2147483647L);
      int int0 = MathUtils.gcd(1018, 12);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float float0 = MathUtils.indicator(2305.0972F);
      byte byte0 = MathUtils.indicator((byte)0);
      long long0 = MathUtils.subAndCheck(0L, (long) (byte)0);
      double double0 = MathUtils.cosh((-939.71301754502));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      long long0 = MathUtils.addAndCheck((-1489L), (long) (byte)0);
      double double0 = MathUtils.normalizeAngle((-1489L), 738.133011527008);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1737.943470154;
      doubleArray0[1] = 4230.197011835;
      doubleArray0[2] = (-408.9507950326);
      doubleArray0[3] = 0.003;
      doubleArray0[4] = (-1806.632164);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (4,230.197 >= -408.951)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2404.9030973691);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.compareTo(2099.805596093922, 4361.6609, (-4950.4952));
      double double1 = MathUtils.log(0.0, 2099.805596093922);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = MathUtils.lcm(1986, 1986);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1721), 1986);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,721, k = 1,986
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = MathUtils.sinh(10.0);
      long long0 = MathUtils.lcm((-158L), (-158L));
      long long1 = MathUtils.sign(331L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.cosh((-158L));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 158L;
      doubleArray0[1] = 11013.232874703393;
      doubleArray0[2] = 2.077294853052011E68;
      MathUtils.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      short short0 = MathUtils.indicator((short)967);
      boolean boolean0 = MathUtils.equals((double) (short)1, (-4437.7906936), 1.073741824E9);
      boolean boolean1 = MathUtils.equals(3363.47, (-2395.9879));
      long long0 = MathUtils.factorial((short)1);
      long long1 = MathUtils.binomialCoefficient(166, (-2117));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3573;
      intArray0[1] = 0;
      intArray0[2] = 3440;
      intArray0[3] = 555;
      intArray0[4] = 1128;
      intArray0[5] = (-753);
      intArray0[6] = 1875;
      intArray0[7] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float float0 = MathUtils.round(969.5F, 13);
      long long0 = MathUtils.lcm(0L, 0L);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.hash((double) 0L);
      double double0 = MathUtils.factorialDouble(3782);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 59);
      BigInteger bigInteger4 = bigInteger3.remainder(bigInteger0);
      double double1 = bigInteger4.doubleValue();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger3, (long) 0);
      long long1 = MathUtils.subAndCheck(0L, (-1652L));
      BigInteger bigInteger6 = MathUtils.pow(bigInteger4, bigInteger5);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1652L);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) 59;
      double double2 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      byte byte0 = MathUtils.indicator((byte)70);
      int int1 = MathUtils.hash((double) (byte)70);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
      int int2 = MathUtils.gcd(1555, (int) (byte)70);
      double double0 = MathUtils.factorialDouble(1555);
      double double1 = MathUtils.normalizeAngle(179.71, 118.7728);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialDouble(0);
      float float0 = MathUtils.round((float) 0, 0);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      float float0 = MathUtils.indicator((-883.0F));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3334.46436;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-883.0F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-883.0F);
      doubleArray0[6] = 1039.6;
      doubleArray0[7] = (double) (-1.0F);
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-1.0F));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1136.975;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1986.907236576);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = MathUtils.gcd(2432902008176640000L, 0L);
      boolean boolean0 = MathUtils.equals((double) 2432902008176640000L, (double) 0L);
      byte byte0 = MathUtils.indicator((byte)70);
      long long1 = MathUtils.mulAndCheck(1016L, (-3426L));
      long long2 = MathUtils.pow((-166L), (long) (byte)1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)49);
      long long0 = MathUtils.sign(895L);
      long long1 = MathUtils.indicator((long) (byte)1);
      byte byte1 = MathUtils.indicator((byte)0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        bigInteger0.modPow((BigInteger) null, bigInteger1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = MathUtils.compareTo((-646.2372385818395), 0.0, (-646.2372385818395));
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 3491;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3088.464893;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2029.250563482222);
      doubleArray0[3] = 0.5;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.indicator((-1661934597));
      int int2 = MathUtils.addAndCheck(0, 16);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft((-510));
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 3217L);
      BigInteger bigInteger4 = BigInteger.ONE;
      BigInteger bigInteger5 = MathUtils.pow(bigInteger4, 1687L);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = MathUtils.scalb(1024.0, (-2034));
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (long) (-2034));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,034)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-769), (-769));
      int int1 = MathUtils.indicator(9);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 19;
      double double0 = MathUtils.factorialLog(19);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 19, 19, 19);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 19, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.1102230246251565E-16;
      doubleArray0[1] = 1911.39568514;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1153.543798481928);
      doubleArray0[4] = 1024.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-44.02288);
      doubleArray0[7] = (-1906.3659349893617);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.addAndCheck(6, 47);
      long long0 = MathUtils.lcm(121645100408832000L, (long) 47);
      double double1 = MathUtils.log(53, (-646.2238893));
      int int1 = MathUtils.compareTo((-312.30174204), (-1752.11577918756), 5717319719215104000L);
      int int2 = MathUtils.hash((-1752.11577918756));
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      try { 
        MathUtils.normalizeArray(doubleArray0, (-1.0));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double0 = MathUtils.factorialDouble(70);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-4513.9), (-4513.9), (-4513.9));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1055);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.shiftLeft((-1809));
      BigInteger bigInteger3 = MathUtils.pow(bigInteger1, bigInteger1);
      int int0 = MathUtils.addAndCheck((-1809), (-1809));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = 611L;
      long long1 = MathUtils.indicator(611L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("Bh7Y~AJ?");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.Bh7Y~AJ?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 4.9E-324;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1013.7626;
      doubleArray0[4] = 3023.5;
      doubleArray0[5] = 0.1538461446762085;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (0 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.lcm((-506L), (-506L));
      long long1 = MathUtils.sign((-506L));
      double double0 = MathUtils.round(896.907465366559, 8);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-506L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = 896.907465366559;
      doubleArray0[3] = 896.90746537;
      doubleArray0[4] = 896.907465366559;
      doubleArray0[5] = 896.90746537;
      doubleArray0[6] = 896.907465366559;
      doubleArray0[7] = (double) 8;
      doubleArray0[8] = 896.90746537;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 896.90746537;
      doubleArray1[1] = (double) 506L;
      doubleArray1[2] = (double) 8;
      doubleArray1[3] = 896.907465366559;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = MathUtils.indicator((-1.7168146928204135));
      int int0 = MathUtils.pow(69, (long) 69);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.7168146928204135);
      doubleArray0[2] = (double) 394359925;
      doubleArray0[3] = (-1.7168146928204135);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 69;
      doubleArray0[6] = (-1.7168146928204135);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -1.717)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, (-1126.8274054057315), (-1126.8274054057315));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-571.2385305);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.binomialCoefficientDouble(0, (-746));
      double double3 = MathUtils.round((-1126.8274054057315), (-746));
      long long0 = MathUtils.subAndCheck(1684L, (-1254L));
      int int0 = MathUtils.lcm((-1669), 2487);
      long long1 = MathUtils.lcm(2938L, 4958L);
      int int1 = MathUtils.subAndCheck(170, 0);
      float float0 = MathUtils.round(0.0F, (-2541));
      long long2 = MathUtils.gcd((-2171L), 4958L);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      float float0 = MathUtils.round((-177.2636F), 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1409.749615285);
      doubleArray0[2] = (double) (-177.2636F);
      doubleArray0[3] = (double) (-177.2636F);
      doubleArray0[4] = (double) (-177.2636F);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.compareTo((-177.2635955810547), (-177.2635955810547), (-177.2635955810547));
      int int1 = 0;
      int int2 = MathUtils.pow(0, 0);
      long long0 = MathUtils.gcd((long) 0, 479001600L);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = (-1614);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1614), (-1614));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,614
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      boolean boolean0 = MathUtils.equals((double) (short)1, (-3009.459633592861));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3009.459633592861);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (-3009.459633592861);
      doubleArray0[5] = (-3009.459633592861);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-3,009.46 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(4208363204685324176L, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 0L, 439);
      int int0 = 233;
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 4208363204685324176L, (double) 0L, 233);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 4208363204685324176L;
      doubleArray0[1] = (double) 439;
      doubleArray0[2] = (double) 439;
      doubleArray0[3] = (double) 4208363204685324176L;
      doubleArray0[4] = (double) 233;
      doubleArray0[5] = (double) 4208363204685324176L;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double0 = MathUtils.sinh(4208363204685324176L);
      boolean boolean2 = MathUtils.equals(0.3333333333333333, Double.POSITIVE_INFINITY, 233);
      byte byte0 = (byte)82;
      byte byte1 = MathUtils.sign((byte)82);
      int int1 = (-2157);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2157), (-2157));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,157
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
