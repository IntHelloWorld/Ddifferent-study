/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:35:26 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1454.28730574;
      doubleArray0[1] = (-1145.287);
      doubleArray0[2] = (-1.0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.mulAndCheck(31, 31);
      int int1 = MathUtils.hash((-1145.287));
      int[] intArray0 = new int[4];
      intArray0[0] = 31;
      intArray0[1] = 599921386;
      intArray0[2] = (-610);
      intArray0[3] = 961;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      int int3 = MathUtils.sign(0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.factorialDouble(1441);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1454.28730574, (double) 0, 3775.74708614056);
      short short0 = MathUtils.sign((short) (-1796));
      int int4 = MathUtils.hash((double) 0);
      double double1 = MathUtils.binomialCoefficientLog(31, 0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(3775.74708614056, (-1656.741700494041), (double) 1441);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0);
      int int0 = MathUtils.lcm((-2299), 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-2982.973624);
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2621.0202368);
      float float1 = MathUtils.round((float) (-2299), 0, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-2299);
      intArray0[2] = 5;
      intArray0[3] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float float0 = MathUtils.sign(2688.453F);
      long long0 = MathUtils.indicator(5546L);
      int[] intArray0 = new int[7];
      intArray0[0] = 4791;
      intArray0[1] = 2400;
      intArray0[2] = 607;
      intArray0[3] = 0;
      intArray0[4] = (-1353);
      intArray0[5] = 33;
      intArray0[6] = 0;
      int[] intArray1 = new int[3];
      intArray1[0] = 2689;
      intArray1[1] = (-274);
      intArray1[2] = 33;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.round(378.233874, 1366);
      long long0 = 0L;
      long long1 = MathUtils.lcm(466L, 0L);
      long long2 = MathUtils.pow(0L, 0L);
      double double1 = MathUtils.sinh(0.0);
      byte byte0 = (byte) (-59);
      byte byte1 = MathUtils.indicator((byte) (-59));
      byte byte2 = (byte) (-103);
      byte byte3 = MathUtils.sign((byte) (-103));
      long long3 = MathUtils.mulAndCheck((-988L), 0L);
      long long4 = MathUtils.addAndCheck(0L, (-9218868437227405313L));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-529), 1720);
      boolean boolean0 = MathUtils.equals((double) 1720, (-3640.84669585), 1720);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      byte byte0 = (byte)14;
      byteArray0[1] = (byte)14;
      byte byte1 = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)85;
      byte byte2 = (byte)48;
      byteArray0[4] = (byte)48;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (int) (byte) (-10));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-42,698,386,128^-10)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = MathUtils.pow(31, (long) 31);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-83);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      int int1 = bigInteger0.signum();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.pow((long) 31, 208);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 31;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (byte)111;
      doubleArray0[4] = (double) (byte) (-83);
      doubleArray0[5] = (double) (byte) (-83);
      doubleArray0[6] = (double) (byte) (-83);
      doubleArray0[7] = 451.05620044347;
      doubleArray0[8] = (double) (byte) (-83);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 6.283185307179586;
      doubleArray1[1] = (double) 208;
      doubleArray1[2] = (-203.647);
      doubleArray1[3] = (double) 4896783771478017537L;
      doubleArray1[4] = (double) (byte) (-83);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3621.9424672;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(3621.9424672, (-650.6277126));
      double double0 = MathUtils.log(0.0, 3621.9424672);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd(158, 2894);
      double double1 = MathUtils.factorialDouble(0);
      int int1 = MathUtils.compareTo(3621.9424672, (-650.6277126), 0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float float0 = MathUtils.round(Float.NaN, 4, 4);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (double) Float.NaN;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) 4;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.subAndCheck(0L, 0L);
      byte byte0 = MathUtils.indicator((byte)4);
      long long1 = MathUtils.binomialCoefficient(129, (-1618));
      int int0 = MathUtils.indicator((-1618));
      double double1 = MathUtils.scalb((byte)1, 1988);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1463.5652328950964), Double.NaN, (double) (byte)4);
      int int1 = MathUtils.pow(1700, 0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 765.736275667582;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.factorialDouble(125);
      int[] intArray0 = new int[9];
      intArray0[0] = 125;
      intArray0[1] = 125;
      intArray0[2] = 125;
      intArray0[3] = 125;
      intArray0[4] = 125;
      intArray0[5] = 125;
      intArray0[6] = 125;
      intArray0[7] = 125;
      intArray0[8] = 125;
      double double2 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.round(10.32F, 709, 0);
      double double3 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.pow(125, (long) 0);
      long long0 = MathUtils.lcm((-2759L), (-2929L));
      int int1 = MathUtils.sign(125);
      boolean boolean0 = MathUtils.equals((double) 10.32F, 0.0);
      int int2 = MathUtils.pow(18, 125);
      double double4 = MathUtils.normalizeAngle(2156.2180934395074, 125);
      int int3 = MathUtils.mulAndCheck(9, 709);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(342, 0);
      short short0 = MathUtils.sign((short)1850);
      long long0 = MathUtils.pow((long) (short)1850, 342);
      long long1 = MathUtils.subAndCheck(658L, (long) 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 342;
      doubleArray0[1] = (double) 658L;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) 658L;
      doubleArray0[4] = (double) 342;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.2958646899018938E-9;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 658L;
      doubleArray1[1] = (double) (short)1850;
      doubleArray1[2] = (double) (short)1850;
      doubleArray1[3] = (double) (short)1;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 1978;
      int int1 = 0;
      long long0 = MathUtils.binomialCoefficient(1978, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1978;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1978;
      doubleArray0[4] = (double) 1978;
      doubleArray0[5] = (double) 1L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int2 = (-1197);
      try { 
        MathUtils.pow((long) 1978, (-1197));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,978^-1,197)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-3666L), 1657L);
      byte byte0 = MathUtils.sign((byte) (-23));
      double double0 = 1194.9;
      boolean boolean0 = MathUtils.equals(1194.9, 1451.3012, 1451.3012);
      int int0 = 10;
      int int1 = MathUtils.lcm(10, (int) (byte) (-23));
      long long1 = 9154082963658192752L;
      long long2 = 0L;
      long long3 = MathUtils.subAndCheck(9154082963658192752L, 0L);
      long long4 = 24L;
      try { 
        MathUtils.pow(24L, (long) (byte) (-23));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (24^-23)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = (-3266);
      int int1 = MathUtils.indicator((-3266));
      long long0 = MathUtils.mulAndCheck((long) (-3266), (long) (-1));
      int int2 = 1437;
      int int3 = MathUtils.lcm(1437, (-1));
      byte byte0 = MathUtils.indicator((byte) (-100));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 1437;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 3266L;
      doubleArray0[4] = (double) 3266L;
      doubleArray0[5] = (double) 1437;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-3266);
      doubleArray0[8] = (double) (-1);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,437 >= -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-93));
      long long0 = 515L;
      long long1 = MathUtils.pow((long) (byte) (-1), 515L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("R$}6eHg*1ZWX");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.R$}6eHg*1ZWX
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-12);
      intArray0[1] = 0;
      intArray0[2] = (-1557);
      intArray0[3] = 238;
      intArray0[4] = (-771);
      intArray0[5] = 210;
      intArray0[6] = (-1445);
      intArray0[7] = 0;
      intArray0[8] = 257;
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      int int1 = MathUtils.pow(0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = (-2234);
      int int1 = (-3962);
      int int2 = MathUtils.lcm((-2234), (-3962));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-2963L), (-2963L));
      double double0 = MathUtils.scalb((-5926L), (-759));
      boolean boolean0 = MathUtils.equals((double) (-2963L), (double) (-759));
      double double1 = MathUtils.scalb((-5926L), (-759));
      int int0 = MathUtils.compareTo((-894.668647887038), (-759), (-2963L));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte byte0 = (byte) (-81);
      byte byte1 = MathUtils.sign((byte) (-81));
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-81);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-81);
      doubleArray0[3] = (double) (byte) (-81);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (-1 >= -81)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 4301.625;
      doubleArray0[4] = (-709.3981783738867);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.036;
      double double0 = (-1349.234515042615);
      doubleArray0[1] = (-1349.234515042615);
      doubleArray0[2] = 332.13933940255725;
      doubleArray0[3] = 3.9736429850260626E-8;
      doubleArray0[4] = 0.0;
      double double1 = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.1730463525082348E-7;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-1,349.235 < 332.139)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = MathUtils.sign((-5709.58F));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.gcd((-543), (-543));
      int int1 = MathUtils.hash((-36.277));
      float float1 = MathUtils.round(2114.1F, 18);
      int int2 = MathUtils.lcm(543, 5);
      double double0 = MathUtils.round((double) 2083020174, (-5145), 0);
      short short0 = MathUtils.sign((short)0);
      long long0 = MathUtils.gcd((long) 543, 7910884519577875640L);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 1030;
      int int1 = 208;
      double double0 = MathUtils.binomialCoefficientLog(1030, 208);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1030;
      doubleArray0[2] = (double) 1030;
      doubleArray0[3] = (double) 208;
      doubleArray0[4] = 514.6996365030506;
      doubleArray0[5] = 514.6996365030506;
      doubleArray0[6] = (double) 208;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,030 >= 1,030)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      short short0 = (short) (-1766);
      short short1 = MathUtils.indicator((short) (-1766));
      float float0 = MathUtils.indicator(Float.NaN);
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      int int0 = MathUtils.mulAndCheck((int) (short) (-1766), (int) (short) (-1));
      boolean boolean1 = MathUtils.equals((-1917.64427), (double) 1766);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      double double0 = MathUtils.log(0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-753), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -753, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = (-1409);
      int int1 = MathUtils.gcd((-1409), (-1409));
      double double0 = (-2982.594);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2982.594), (-2982.594), 1409);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) (-1409), (-9218868437227405313L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1719.84166895);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 10.0;
      doubleArray0[4] = (-2907.613);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 938.65;
      doubleArray0[8] = (-2106.498);
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.scalb(1.1430250008909141E-8, 180204969);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(180204969, 180204969);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      double double1 = MathUtils.cosh(0);
      float float0 = MathUtils.round((float) 0, (-4254), 0);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.gcd(0, 214);
      float float1 = MathUtils.sign((float) 0);
      double double2 = MathUtils.factorialDouble(3209);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)33;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)1, (-2713.5701858356), 0.0);
      double double0 = MathUtils.binomialCoefficientLog((short)1, (short)0);
      byte byte0 = MathUtils.indicator((byte)6);
      int int0 = MathUtils.subAndCheck((int) (short)0, (int) (byte)1);
      double double1 = MathUtils.sign(6.283185307179586);
      double double2 = (-2672.5290512977203);
      int int1 = MathUtils.compareTo(0.0, (-2672.5290512977203), (-1762.07830694));
      double double3 = MathUtils.binomialCoefficientDouble(4194304, 0);
      double double4 = MathUtils.log(1.0, 4194304);
      long long0 = 2771L;
      long long1 = MathUtils.gcd(479001600L, 2771L);
      double double5 = MathUtils.indicator((-1622.8857505484805));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger not invertible.
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2037.54888, 1604.0);
      long long0 = MathUtils.indicator((-962L));
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (-962L), 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-962L);
      doubleArray0[2] = 2037.54888;
      doubleArray0[3] = (double) (-962L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = 2037.54888;
      doubleArray0[6] = 1604.0;
      doubleArray0[7] = (double) (-962L);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 19;
      intArray0[1] = 183;
      intArray0[2] = 2285;
      intArray0[3] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float float0 = MathUtils.round((-1.0F), 6, 6);
      int int0 = MathUtils.addAndCheck(112, 6);
      int int1 = MathUtils.indicator(145);
      long long0 = MathUtils.sign(0L);
      boolean boolean0 = MathUtils.equals((double) (-1.0F), (double) 145, 118);
      float float1 = MathUtils.round((float) 112, 0);
      int int2 = MathUtils.addAndCheck((-1655), 0);
      double double0 = MathUtils.normalizeAngle(118, 0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-1.3805208364121313);
      doubleArray0[3] = (double) 145;
      doubleArray0[4] = (double) (-1655);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) 1;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 112);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(10.0, 10.0);
      double double0 = MathUtils.factorialDouble(37);
      int int0 = MathUtils.mulAndCheck(37, 37);
      float float0 = MathUtils.sign(0.0F);
      float float1 = MathUtils.round((float) 1369, 1369);
      int int1 = MathUtils.hash(2.0);
      double double1 = MathUtils.binomialCoefficientLog(1073741824, 1073741824);
      float float2 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1369;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1369;
      doubleArray0[4] = (double) 0.0F;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.sign(0.0);
      int int0 = 5;
      int int1 = MathUtils.addAndCheck(5, 5);
      double double1 = MathUtils.cosh(0.0);
      double double2 = MathUtils.factorialDouble(5);
      long long0 = MathUtils.sign((long) 5);
      int int2 = 698;
      long long1 = MathUtils.pow((long) 5, 698);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.clearBit(91);
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger2.gcd(bigInteger0);
      int int3 = bigInteger2.signum();
      long long2 = bigInteger2.longValueExact();
      BigInteger bigInteger4 = bigInteger0.modPow(bigInteger2, bigInteger2);
      long long3 = bigInteger0.longValue();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, (long) 5);
      int int4 = (-2082);
      int int5 = MathUtils.addAndCheck(21, (-2082));
      double double3 = MathUtils.indicator(0.0);
      boolean boolean0 = MathUtils.equals(0.1538461446762085, 0.0);
      long long4 = MathUtils.sign((long) (-2082));
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = MathUtils.sign(1149L);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = (-224.168198681);
      double double1 = MathUtils.round((-224.168198681), 8, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigInteger bigInteger3 = bigInteger1.min(bigInteger2);
      BigInteger bigInteger4 = bigInteger1.and(bigInteger0);
      String string0 = bigInteger1.toString(0);
      BigInteger bigInteger5 = bigInteger0.modInverse(bigInteger1);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 226L);
      double double2 = MathUtils.log(2696.963403626, 606.85523);
      int int0 = MathUtils.subAndCheck(0, 0);
      double double3 = MathUtils.indicator((double) 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 8;
      double double4 = MathUtils.distance(intArray0, intArray0);
      double double5 = (-2215.18719);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-2215.18719), 1.0, (-1));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = MathUtils.hash(1.0E-6);
      byte byte0 = MathUtils.indicator((byte)0);
      int int1 = MathUtils.addAndCheck(1983, (int) (byte)1);
      double double0 = MathUtils.scalb((-1.0), (-2075));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = MathUtils.compareTo((-1946.5856), (-1946.5856), (-1946.5856));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-1602), 1213);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-2815), 1213, 1213);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,213, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1.986821492305628E-8, 1.986821492305628E-8, 179);
      double double0 = MathUtils.cosh(1.986821492305628E-8);
      double double1 = MathUtils.round(0.0, 0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.abs();
      BigInteger bigInteger2 = bigInteger1.modPow(bigInteger0, bigInteger0);
      BigInteger bigInteger3 = bigInteger0.shiftLeft(0);
      double double2 = bigInteger0.doubleValue();
      BigInteger bigInteger4 = bigInteger0.xor(bigInteger1);
      int int0 = bigInteger0.bitLength();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 52);
      int[] intArray0 = new int[1];
      intArray0[0] = 52;
      double double3 = MathUtils.distance(intArray0, intArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.sign((short)7);
      int int1 = MathUtils.lcm(179, 52);
      boolean boolean1 = MathUtils.equals((-2929.5742380944), (-1112.4684), (int) (short)7);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      boolean boolean0 = MathUtils.equals((double) 0, (double) 0, 1);
      long long0 = 0L;
      long long1 = MathUtils.pow((long) 0, 0L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = MathUtils.sinh((-188.59282502));
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.bitLength();
      short short0 = bigInteger0.shortValueExact();
      int int1 = bigInteger0.intValueExact();
      int int2 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = bigInteger0.pow(10);
      double double1 = bigInteger1.doubleValue();
      BigInteger bigInteger2 = bigInteger1.shiftRight(10);
      BigInteger bigInteger3 = bigInteger1.andNot(bigInteger0);
      BigInteger bigInteger4 = bigInteger0.subtract(bigInteger1);
      int int3 = bigInteger0.intValueExact();
      try { 
        MathUtils.pow(bigInteger0, (-5034868814120038111L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-5,034,868,814,120,038,111)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.2393345855018391E-8;
      doubleArray0[3] = 3381.0;
      doubleArray0[4] = 3.834E-20;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      long long0 = MathUtils.binomialCoefficient(1463, 1463);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-65);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-2269L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,269)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3366.3036860321376;
      doubleArray0[2] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 52;
      intArray0[1] = 400;
      intArray0[2] = 108;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.gcd((long) 0, (long) 0);
      double double1 = MathUtils.normalizeAngle(0.0, 1.5);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = 235.658;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not decreasing (0 < 235.658)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(113236205062349959L, 5056L);
      double double0 = MathUtils.normalizeAngle(1575.0, 0.041666663879186654);
      short short0 = (short) (-368);
      short short1 = MathUtils.indicator((short) (-368));
      long long1 = 3453L;
      long long2 = MathUtils.lcm(5056L, 3453L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-368);
      doubleArray0[1] = 1575.0;
      double double1 = 1586.17593265;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1586.17593265);
      int int0 = 194;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((short) (-368), 194);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -368, k = 194
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 111;
      int int1 = MathUtils.pow(111, 111);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 111;
      doubleArray0[2] = (double) 111;
      doubleArray0[3] = (double) 111;
      doubleArray0[4] = (double) (-232147057);
      doubleArray0[5] = (double) (-232147057);
      doubleArray0[6] = (double) 111;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2.32147057E8));
      int int2 = (-893);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-232147057), (-893));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -232,147,057, k = -893
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = MathUtils.gcd((-64), (-1135));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float float0 = 3125.675F;
      float float1 = MathUtils.round(3125.675F, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3125.675F;
      doubleArray0[1] = (double) 3126.0F;
      doubleArray0[2] = (double) 3125.675F;
      doubleArray0[3] = (double) 3126.0F;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = (-865);
      int int1 = 63;
      int int2 = MathUtils.lcm((-865), 63);
      double double1 = MathUtils.scalb(3125.675048828125, 0);
      int int3 = MathUtils.pow(63, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1376));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,376
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte byte0 = (byte)118;
      byte byte1 = MathUtils.sign((byte)118);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-619));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -619
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-725.69935);
      doubleArray0[1] = (-817.9);
      doubleArray0[2] = (-1312.5361976836991);
      doubleArray0[3] = 1.01;
      doubleArray0[4] = 277.10364;
      double double0 = (-1509.457649451712);
      doubleArray0[5] = (-1509.457649451712);
      doubleArray0[6] = (-1496.546051386361);
      double double1 = 3801.933829702;
      doubleArray0[7] = 3801.933829702;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-725.699 >= -817.9)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = 2.718281828459045;
      doubleArray0[3] = (-3879.9903810405617);
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-38.37), (-38.37), 0.0);
      double double0 = MathUtils.sinh(905.41086375958);
      long long0 = MathUtils.gcd((-583L), (-517L));
      float float0 = MathUtils.round(1427.31F, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(76, 99);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 76, k = 99
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathUtils.sign((-1191.9));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 660;
      // Undeclared exception!
      try { 
        MathUtils.factorial(660);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = MathUtils.sign((-1L));
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long1 = MathUtils.subAndCheck((-1L), (-1L));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float float0 = MathUtils.round((-1.0F), 7);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) 7;
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) (-1.0F);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 268.39660483626);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = MathUtils.factorialLog(186);
      short short0 = MathUtils.indicator((short)8);
      long long0 = MathUtils.pow(0L, (long) (short)8);
      double double1 = MathUtils.sinh(186);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)45;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)45);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      boolean boolean0 = bigInteger1.testBit(0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger1, (long) 0);
      long long0 = MathUtils.addAndCheck((-4267615245585081135L), (-3206L));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = 947.56292;
      double double1 = MathUtils.log(947.56292, 0.0);
      double double2 = MathUtils.indicator(3.141592653589793);
      double double3 = MathUtils.scalb(0.0, (-373));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 947.56292;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 3.141592653589793;
      doubleArray0[6] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.indicator((-3334.0F));
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      long long0 = MathUtils.mulAndCheck((long) 0, 0L);
      int int2 = MathUtils.hash((-58.07256281373108));
      int int3 = MathUtils.gcd(2092104181, 2092104181);
      int int4 = MathUtils.hash((double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 2092104181);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 2,092,104,181
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(3945, 0);
      double double0 = MathUtils.round((double) 3945, (-201));
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.mulAndCheck((long) 3945, (long) 0);
      int int1 = MathUtils.subAndCheck(36, (-1019));
      byte byte0 = MathUtils.sign((byte)0);
      long long1 = MathUtils.subAndCheck((long) (-1019), (long) 3945);
      int[] intArray1 = new int[1];
      intArray1[0] = (int) (byte)0;
      int int2 = MathUtils.distance1(intArray1, intArray0);
      long long2 = MathUtils.gcd((-293L), 0L);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = MathUtils.pow((-7278142539171889152L), 4595);
      byte byte0 = (byte)46;
      byte byte1 = MathUtils.indicator((byte)46);
      double double0 = MathUtils.binomialCoefficientDouble(4595, (-1303));
      int[] intArray0 = new int[9];
      intArray0[0] = 10;
      intArray0[1] = (-1303);
      intArray0[2] = 4595;
      intArray0[3] = (-1303);
      intArray0[4] = (int) (byte)1;
      intArray0[5] = 4595;
      intArray0[6] = (int) (byte)1;
      intArray0[7] = (int) (byte)46;
      intArray0[8] = (-1303);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.indicator((double) 0);
      double double2 = MathUtils.sinh(4595);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-4035746434778044925L), (long) (byte)46);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      short short0 = MathUtils.indicator((short)100);
      byte byte0 = MathUtils.indicator((byte)71);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double double1 = MathUtils.normalizeAngle(2760.0, (-1984.0));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck((-1270L), (-302932621132653753L));
      double double2 = MathUtils.indicator(0.0);
      double double3 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.indicator((int) (short)1);
      double double4 = MathUtils.scalb((-1646.6197), 30);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = 2318;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 2318, 2318);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,318, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      float float1 = MathUtils.indicator((-2312.7F));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-229.65));
      try { 
        MathUtils.pow((-962), (long) (-962));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-962^-962)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 0;
      int int1 = 1612;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 1612);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1,612
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4577762542105553359L, 4577762542105553359L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.clearBit(560);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 560;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 560;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 560;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 2.0;
      int int0 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.binomialCoefficientLog(560, (-1582829281));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-586), (-586));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -586, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      try { 
        MathUtils.pow((-1343), (long) (-1343));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,343^-1,343)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = MathUtils.gcd((-9218868437227405313L), (-9218868437227405313L));
      float float0 = MathUtils.sign((float) 9218868437227405313L);
      int int0 = MathUtils.lcm(0, 2692);
      double double0 = MathUtils.binomialCoefficientLog(2692, 1909);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = MathUtils.indicator(123);
      boolean boolean0 = MathUtils.equals((double) 1, (double) 123, 123);
      int int1 = MathUtils.gcd(1, (-650));
      double double0 = MathUtils.sinh((-650));
      boolean boolean1 = MathUtils.equals((double) 1, (double) 1);
      long long0 = MathUtils.factorial(1);
      float float0 = MathUtils.indicator((float) 1);
      double double1 = MathUtils.sinh((-1068.985));
      short short0 = MathUtils.sign((short)31);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      short short0 = MathUtils.indicator((short)2645);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)2645;
      doubleArray0[1] = (double) (short)2645;
      doubleArray0[2] = (double) (short)2645;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2645.0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = (-1567.530845799865);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-1567.530845799865));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte byte0 = (byte) (-118);
      byte byte1 = MathUtils.sign((byte) (-118));
      double double0 = MathUtils.indicator((double) (byte) (-118));
      long long0 = (-3174L);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-3174L), (-4035746434778044925L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 203;
      int int1 = MathUtils.addAndCheck(203, 203);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int2 = 11;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 11, 203);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.indicator((-223.36745));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-223.36745);
      doubleArray0[2] = (-223.36745);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-223.36745);
      doubleArray0[7] = (-223.36745);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator((-450.19F));
      long long0 = MathUtils.pow((-3103L), 1738);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-1107), (-1107));
      int int1 = MathUtils.lcm(2390, 2390);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1107);
      doubleArray0[1] = (double) 2390;
      doubleArray0[2] = 0.1538461446762085;
      doubleArray0[3] = (double) (-2214);
      doubleArray0[4] = (double) (-1107);
      doubleArray0[5] = (double) (-2214);
      doubleArray0[6] = (double) (-1107);
      doubleArray0[7] = (double) (-1107);
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(67);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte byte0 = (byte) (-77);
      byte byte1 = MathUtils.sign((byte) (-77));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-77);
      doubleArray0[1] = (double) (byte) (-77);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-77 <= -77)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-2436));
      int int0 = MathUtils.sign(1166);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)29;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int int1 = MathUtils.indicator((int) (byte)29);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1166, (double) (short) (-2436), 1697);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-562.3125448);
      doubleArray0[1] = 942.7906120495;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 4.0;
      doubleArray0[4] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-562.313 <= 942.791)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = MathUtils.indicator(2147483647L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.304E19, 1005.475);
      boolean boolean1 = MathUtils.equals((double) 2147483647L, 1005.475, 1005.475);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2147483647L, (-4267615245585081135L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = (-2083);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2083));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,083
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      short short0 = MathUtils.indicator((short)3489);
      int int0 = MathUtils.pow(1850, (long) (short)1);
      long long0 = MathUtils.subAndCheck(0L, (long) (short)1);
      int int1 = MathUtils.hash(0.0);
      long long1 = MathUtils.pow((long) (short)3489, (int) (short)1);
      long long2 = MathUtils.indicator(0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) 3489L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (short)3489;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) (-1L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      short short1 = MathUtils.sign((short) (-750));
      int int2 = MathUtils.addAndCheck((-122), 1850);
      int int3 = MathUtils.hash((double) 1850);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1105.6262264208503;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow((-1140L), 152);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-1081.87071099), 152);
      short short0 = MathUtils.indicator((short)0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-40));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -40
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = 658L;
      int int0 = (-772);
      try { 
        MathUtils.pow(658L, (-772));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (658^-772)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = MathUtils.gcd(1006, 1006);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1006;
      doubleArray0[1] = (double) 1006;
      doubleArray0[2] = (double) 1006;
      doubleArray0[3] = (double) 1006;
      doubleArray0[4] = 3175.189;
      doubleArray0[5] = (double) 1006;
      doubleArray0[6] = (double) 1006;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0);
      double double0 = MathUtils.indicator((double) 0);
      double double1 = MathUtils.round((double) 0, (-4133), 0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 118;
      int int1 = MathUtils.sign(118);
      long long0 = (-2988L);
      long long1 = MathUtils.subAndCheck((-2988L), (long) 118);
      double double0 = 0.0;
      double double1 = MathUtils.sign(0.0);
      long long2 = MathUtils.factorial(1);
      int int2 = MathUtils.addAndCheck(118, 118);
      int int3 = 248;
      double double2 = MathUtils.scalb(0.0, 248);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 1, (double) 1, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathUtils.cosh(1978.490229217673);
      int int0 = (-1921);
      int int1 = 0;
      int int2 = MathUtils.gcd((-1921), 0);
      int int3 = 9;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1921), 9);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,921, k = 9
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      double double0 = MathUtils.sign(0.0);
      short short0 = MathUtils.indicator((short)2130);
      int int0 = MathUtils.gcd((int) (short)1, (-138));
      int int1 = MathUtils.pow((-138), 2432902008176640000L);
      double double1 = MathUtils.round(352.761277873, 1281);
      short short1 = MathUtils.sign((short)2130);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-4424.0), (-7.44321345601866E-11), (-7.44321345601866E-11));
      long long0 = MathUtils.factorial(0);
      boolean boolean1 = MathUtils.equals((-7.44321345601866E-11), (double) 1L, (-4424.0));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-7.44321345601866E-11);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.factorialLog(0);
      long long1 = MathUtils.binomialCoefficient(0, 0);
      int int0 = MathUtils.gcd(2835, 0);
      int int1 = MathUtils.pow(1771, 0);
      int int2 = MathUtils.mulAndCheck(2835, (-458));
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.sinh(0.0);
      int int3 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      int int0 = MathUtils.sign(13);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-627.5);
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 13;
      doubleArray0[8] = 0.0;
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      double double0 = MathUtils.log((-0.49999999999999994), 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double double2 = MathUtils.factorialLog(1);
      int int1 = MathUtils.compareTo(2402.12225503486, (-1884.858), (-1884.858));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 87);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2975);
      int int0 = 0;
      intArray0[1] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      try { 
        MathUtils.pow(1927, (-2975));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,927^-2,975)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-2671);
      intArray0[0] = (-2671);
      intArray0[1] = 1025;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int2 = MathUtils.sign(1025);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int3 = MathUtils.pow((-2671), 1025);
      long long0 = 555L;
      long long1 = MathUtils.lcm((-2554L), 555L);
      int int4 = MathUtils.indicator(0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathUtils.scalb(2657.316888155427, 2147);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2657.316888155427;
      doubleArray0[1] = (double) 2147;
      doubleArray0[2] = 2657.316888155427;
      doubleArray0[3] = 2657.316888155427;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.sign(142);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1206);
      intArray0[1] = 3337;
      intArray0[2] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 651.794455825662;
      doubleArray0[1] = (-4229.798898265935);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd(1829, 16);
      int int1 = MathUtils.pow(1040, 1751);
      boolean boolean1 = MathUtils.equals(0.0, 1683.7543832711, 1683.7543832711);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long long0 = MathUtils.lcm(1524L, (-540L));
      double double0 = MathUtils.scalb(2154.0, 2925);
      double double1 = MathUtils.scalb(2154.0, 2925);
      long long1 = MathUtils.subAndCheck(1816L, 1524L);
      int int0 = MathUtils.subAndCheck(130, 130);
      int int1 = MathUtils.gcd(130, 2925);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 65;
      doubleArray0[1] = (double) 1816L;
      doubleArray0[2] = (double) 2925;
      doubleArray0[3] = (double) 65;
      doubleArray0[4] = (double) (-540L);
      int int2 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = MathUtils.lcm(2567L, 2567L);
      double double0 = MathUtils.sinh(2567L);
      int[] intArray0 = new int[0];
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int0 = (-2606);
      double double2 = MathUtils.round(0.041666666666621166, (-2606));
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.sign(0);
      long long1 = MathUtils.lcm((long) 0, (long) 0);
      short short0 = MathUtils.indicator((short)835);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) (-2606), 9223372036854775807L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.log((-650.323), (short)0);
      int int0 = MathUtils.indicator((int) (short)1);
      double double1 = MathUtils.round(0.0, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = MathUtils.gcd(2369L, 609L);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      long long0 = MathUtils.pow(455L, 0);
      int int0 = MathUtils.gcd(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 455L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.058823529411764705;
      doubleArray0[4] = (double) 0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-3321L), (-2644281811660520851L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-3747.7549729439693), 0.0);
      int int0 = (-164);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-164));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -164
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(0, 0);
      double double0 = MathUtils.log(352.6542283677274, 55.0);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign((float) 0);
      int int2 = MathUtils.addAndCheck(1, 1);
      double double1 = MathUtils.normalizeAngle(0, 0.0F);
      int int3 = 0;
      int int4 = MathUtils.sign(0);
      long long0 = 4193L;
      long long1 = MathUtils.subAndCheck((long) 0, 4193L);
      long long2 = MathUtils.lcm((-4193L), (long) 0);
      try { 
        MathUtils.normalizeArray(doubleArray0, 0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, (-3116L));
      int int0 = MathUtils.sign(175);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1361.0;
      doubleArray0[1] = (double) (-3116L);
      doubleArray0[2] = 987.06281939;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long1 = MathUtils.pow(2935890503282001226L, (long) 175);
      long long2 = MathUtils.sign(0L);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.cosh(1461.75);
      long long3 = MathUtils.pow(2935890503282001226L, 12);
      boolean boolean2 = MathUtils.equals((double) 2935890503282001226L, 1361.0);
      long long4 = MathUtils.binomialCoefficient(175, 12);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = 567L;
      long long1 = MathUtils.addAndCheck(567L, 567L);
      int int0 = 1030;
      long long2 = MathUtils.pow(346L, 1030);
      double double0 = 1188.2;
      int int1 = MathUtils.hash(1188.2);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1939973119);
      doubleArray0[1] = 644.0;
      doubleArray0[2] = (double) 0L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-1,939,973,119 < 644)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-840.736);
      doubleArray0[1] = 4371.95531;
      doubleArray0[2] = 1501.41089;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double0 = 0.0;
      doubleArray0[5] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (4,371.955 >= 1,501.411)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float float0 = MathUtils.indicator((-1352.56F));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1352.56F);
      doubleArray0[1] = (double) (-1.0F);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1730.0681375);
      boolean boolean0 = MathUtils.equals((double) (-1352.56F), 1861.788576888);
      double double0 = MathUtils.normalizeAngle(3232.6515, 0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.lcm(0, 0);
      byte byte0 = MathUtils.sign((byte) (-38));
      double double1 = MathUtils.round((double) (-1352.56F), (int) (byte) (-1), 0);
      float float1 = MathUtils.indicator(0.0F);
      int int1 = MathUtils.pow(0, 0);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 3327.91, 1);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1861.788576888;
      doubleArray2[1] = 3232.6515;
      doubleArray2[2] = (double) 0;
      double double3 = MathUtils.distance1(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      double double0 = MathUtils.factorialDouble(0);
      float float0 = MathUtils.round((float) 0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte) (-84));
      byte byte1 = MathUtils.indicator((byte)98);
      byte byte2 = MathUtils.sign((byte)71);
      boolean boolean0 = MathUtils.equals((-977.513670456457), (double) (byte) (-84), (int) (byte)1);
      long long0 = MathUtils.addAndCheck((long) (byte) (-1), (-304L));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((byte) (-1), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(466.6904169, 2.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 466.6904169;
      doubleArray0[1] = 1.734704168710607;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 466.6904169;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 2.0;
      doubleArray0[6] = 1.734704168710607;
      doubleArray0[7] = 2.0;
      doubleArray0[8] = 466.6904169;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.factorialLog(108);
      short short0 = MathUtils.sign((short)0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double3 = MathUtils.sign(2797.12028);
      long long0 = MathUtils.subAndCheck((long) (short)0, (-3107L));
      int int0 = MathUtils.gcd(108, 108);
      double double4 = MathUtils.indicator(0.07842259109020233);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1505), (-1505));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,505
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
