/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:39:31 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = MathUtils.factorialLog(138);
      int int0 = MathUtils.addAndCheck(1862, 1862);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 138;
      doubleArray0[2] = 1774.0517931;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int1 = 74112;
      // Undeclared exception!
      MathUtils.factorialDouble(74112);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 213.2293278;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd(3972L, 3972L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals(0.0, 7.0, 1163.442099);
      boolean boolean3 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.subAndCheck(0, 0);
      double double0 = MathUtils.cosh(649.958450143);
      int int1 = MathUtils.hash(649.958450143);
      int int2 = MathUtils.subAndCheck(193, (-1486039061));
      int int3 = MathUtils.indicator(716);
      float float0 = MathUtils.round((float) 1, (-2582), 1);
      long long1 = MathUtils.mulAndCheck((long) 193, 4503599627370496L);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = 0;
      int int1 = 2902;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 2902);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 2,902
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = (-1669);
      double double0 = MathUtils.round(0.0, (-1669));
      int int1 = MathUtils.lcm((-1669), (-4444));
      int int2 = (-1308);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-1308), 7417036);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      short short0 = MathUtils.indicator((short)3466);
      long long0 = MathUtils.gcd((long) (short)1, (long) (short)1);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.5, 314.0);
      int int0 = MathUtils.pow((int) (short)1, (int) (short)1);
      double double0 = MathUtils.sinh(0.097);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = 0.097;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) (short)1;
      double double1 = MathUtils.TWO_PI;
      int int1 = MathUtils.lcm((int) (short)1, (int) (short)1);
      long long1 = MathUtils.lcm(1870L, 1870L);
      int int2 = MathUtils.mulAndCheck(1, 1);
      boolean boolean1 = MathUtils.equals(0.0, (double) 1);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double3 = MathUtils.binomialCoefficientLog(1, 1);
      byte byte0 = MathUtils.indicator((byte) (-100));
      double double4 = MathUtils.factorialLog(5529);
      long long2 = MathUtils.gcd(378L, (-874L));
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (byte) (-1);
      doubleArray1[1] = (double) (byte) (-1);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.304E19;
      doubleArray1[5] = (double) (short)1;
      doubleArray1[6] = 0.097;
      doubleArray1[7] = (double) (byte) (-1);
      doubleArray1[8] = 0.0;
      double double5 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = MathUtils.log((-4187.6), (-4187.6));
      int int0 = 11;
      int int1 = MathUtils.addAndCheck(11, 11);
      int int2 = 651;
      int int3 = MathUtils.pow(651, 22);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf(".fu-lad*$`qVM:8.Lzd");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection..fu-lad*$`qVM:8.Lzd
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      double double0 = MathUtils.round(0.0, 0);
      double double1 = MathUtils.round((-6946.8772849), 4119, 0);
      double double2 = MathUtils.log(0, 1.304E19);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      double double0 = 1.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 1.0, 1.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = 31;
      boolean boolean2 = bigInteger0.testBit(31);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      // Undeclared exception!
      try { 
        bigInteger0.pow((-1105));
      } catch(ArithmeticException e) {
         //
         // Negative exponent
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-1374.3624145512767), 63);
      long long0 = MathUtils.pow(0L, 63);
      long long1 = MathUtils.mulAndCheck((-2600L), (-163L));
      double double0 = MathUtils.indicator(0.0);
      int[] intArray0 = new int[6];
      intArray0[0] = 63;
      intArray0[1] = 63;
      intArray0[2] = 63;
      intArray0[3] = 63;
      intArray0[4] = 63;
      intArray0[5] = 63;
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.sign(63);
      // Undeclared exception!
      try { 
        MathUtils.factorial(63);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = MathUtils.indicator(1687L);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long1 = MathUtils.gcd((long) 0, 1687L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(5014.0234079, 5014.0234079, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = MathUtils.pow(4095L, 2563L);
      int int0 = MathUtils.sign((-695));
      long long1 = MathUtils.subAndCheck((-7308L), (long) (-695));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4095L;
      doubleArray0[1] = (-2196.89);
      doubleArray0[2] = (double) (-695);
      doubleArray0[3] = (double) (-695);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(2234, 2234);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      int int0 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) 2234);
      int int1 = MathUtils.pow(2234, (long) 2234);
      int int2 = MathUtils.sign(2234);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2234;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte)18);
      double double1 = MathUtils.round(0.0, (int) (byte)18, 0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2238.445895983499);
      doubleArray0[1] = (-2096.965892878507);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-825.014);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2817.7947909421;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-4.9E-324);
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = MathUtils.pow((-9218868437227405313L), 66);
      double double0 = 4561.0;
      double double1 = 0.0;
      boolean boolean0 = MathUtils.equals(4561.0, 0.0, 66);
      int int0 = MathUtils.compareTo(66, (-3452.73354799), Double.NEGATIVE_INFINITY);
      int int1 = (-3810);
      int int2 = MathUtils.lcm((-3810), (-3810));
      long long1 = (-512L);
      long long2 = MathUtils.addAndCheck((-9218868437227405313L), (-512L));
      // Undeclared exception!
      try { 
        MathUtils.lcm(1304L, (-9218868437227405313L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = 2013.0;
      double double1 = MathUtils.sign(2013.0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1091.05269877);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 4074.116;
      doubleArray0[4] = 0.003;
      doubleArray0[5] = (-1199.0);
      doubleArray0[6] = 1.1102230246251565E-16;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(13, (-1073));
      int int1 = MathUtils.mulAndCheck((-975), 211);
      double double0 = MathUtils.cosh(1086);
      int int2 = MathUtils.indicator(0);
      double double1 = 1.0;
      double double2 = 186.57;
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 186.57, (-1154.54016507585));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      int int3 = bigInteger0.bitCount();
      BigInteger bigInteger3 = BigInteger.valueOf(1086);
      try { 
        MathUtils.pow(bigInteger0, (int) (byte) (-19));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (60,672^-19)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = 5648769086999809661L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(5648769086999809661L, 5648769086999809661L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 4102);
      float float0 = MathUtils.indicator((float) 4102);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd(0, 4102);
      long long0 = MathUtils.pow((long) 0, (long) 0);
      float float1 = MathUtils.round((-952.0F), 4102);
      boolean boolean2 = MathUtils.equals(1.2393345855018391E-8, (double) 1.0F, 4102);
      int int1 = MathUtils.subAndCheck(98, 0);
      long long1 = MathUtils.factorial(16);
      boolean boolean3 = MathUtils.equals(0.0, 0.0, 0.0);
      double double0 = MathUtils.indicator(0.0);
      // Undeclared exception!
      try { 
        MathUtils.round(1.0F, 4102, 98);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 98, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-127.2544);
      doubleArray0[1] = (-0.5);
      doubleArray0[2] = 932.367353987754;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1694.5046244919643;
      doubleArray0[5] = (-1960.047942955677);
      doubleArray0[6] = 10.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-127.254 < -0.5)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      short short0 = (short) (-1679);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-1679);
      doubleArray0[1] = (double) (short) (-1679);
      doubleArray0[2] = (double) (short) (-1679);
      doubleArray0[4] = (double) (short) (-1679);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-605.214290695594), (-605.214290695594));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,679 <= -1,679)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.pow(0L, 1097);
      double double0 = MathUtils.sign(1.4456468917292502E-16);
      double double1 = MathUtils.binomialCoefficientLog(1097, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 157.18;
      doubleArray0[7] = 1.4456468917292502E-16;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2618.5967207092);
      double double2 = MathUtils.sinh(1097);
      byte byte0 = MathUtils.indicator((byte) (-127));
      double double3 = MathUtils.normalizeAngle(1.1102230246251565E-16, 0.0);
      double double4 = MathUtils.log(0.0, 0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-3183), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -3,183, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 34;
      intArray0[4] = (-1274);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.round(0.0, 558);
      int int1 = MathUtils.gcd(558, 0);
      double double1 = MathUtils.factorialLog(0);
      short short0 = MathUtils.sign((short)0);
      long long0 = MathUtils.subAndCheck(2454L, (long) (short)0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2454L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2454L;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = MathUtils.indicator(13);
      double double0 = MathUtils.indicator((double) 1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 12.0;
      doubleArray0[4] = (-1592.69913);
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.binomialCoefficient(1, (-2133));
      double double2 = MathUtils.factorialLog(1);
      int int1 = MathUtils.lcm((-3009), 1035);
      int int2 = MathUtils.lcm(13, 1035);
      double double3 = MathUtils.binomialCoefficientDouble(1038105, (-3859));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(Double.NaN, 12.0, (-3009));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 264.32452;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-6.663542893624021E-14);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double0 = MathUtils.log(1.073741824E9, 0.07490822288864472);
      double double1 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      int int0 = MathUtils.hash(0.07490822288864472);
      // Undeclared exception!
      try { 
        MathUtils.round(313.51, 1345402056);
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 563.1;
      MathUtils.checkOrder(doubleArray0);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.indicator(0.0);
      int int0 = 0;
      int int1 = MathUtils.lcm(0, (-2576));
      boolean boolean0 = MathUtils.equals((double) (-2576), (double) 0, 2.0);
      // Undeclared exception!
      try { 
        MathUtils.round(563.1, (-2576), 249);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(23, (-1204));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = MathUtils.lcm((-1448L), 355687428096000L);
      long long1 = MathUtils.subAndCheck((-1448L), 355687428096000L);
      float float0 = MathUtils.indicator((float) 355687428096000L);
      double double0 = MathUtils.scalb(189.0404358, 20);
      long long2 = MathUtils.gcd(9218868437227405312L, 0L);
      double double1 = MathUtils.log(1.982232640094208E8, (-622.0));
      long long3 = MathUtils.binomialCoefficient(20, 0);
      float float1 = MathUtils.round((float) 9218868437227405312L, 108);
      double double2 = MathUtils.cosh((-3275.37798901514));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 20);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 20
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.304E19;
      double double0 = 2934.105697;
      doubleArray0[1] = 2934.105697;
      int int0 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals(2225.748419396399, 0.0, 381314041);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.cosh(Double.NEGATIVE_INFINITY);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigInteger bigInteger3 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger4 = bigInteger1.subtract(bigInteger2);
      BigInteger bigInteger5 = bigInteger0.or(bigInteger1);
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, bigInteger0);
      int int0 = MathUtils.gcd(1223, 1223);
      int int1 = MathUtils.hash(110.0);
      long long1 = MathUtils.gcd((-7278142539171889152L), 0L);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = MathUtils.hash(1.1921056801463227E-8);
      long long0 = MathUtils.pow((long) (-1450588610), 67);
      long long1 = MathUtils.addAndCheck(0L, (long) (-1450588610));
      int int1 = MathUtils.hash((double) (-1450588610));
      int int2 = MathUtils.subAndCheck((-2462), (-593));
      int[] intArray0 = new int[2];
      intArray0[0] = (-2462);
      intArray0[1] = 67;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long2 = MathUtils.sign((long) 67);
      double double1 = MathUtils.factorialDouble(235);
      int[] intArray1 = new int[5];
      intArray1[0] = 235;
      intArray1[1] = (-1450588610);
      intArray1[2] = (-593);
      intArray1[3] = (-1869);
      intArray1[4] = 235;
      int int3 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = MathUtils.sinh(3.141592653589793);
      double double1 = MathUtils.scalb((-1164.3359190227), 451);
      double double2 = MathUtils.log(Double.POSITIVE_INFINITY, 11.548739357257748);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 11.548739357257748;
      doubleArray0[1] = (double) 451;
      doubleArray0[2] = (double) 451;
      doubleArray0[3] = (-1164.3359190227);
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = (double) 451;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = (double) 451;
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.lcm((-1412), 131);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      short short0 = (short) (-4654);
      short short1 = MathUtils.indicator((short) (-4654));
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (short) (-4654), (double) (short) (-1), (int) (short) (-1));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(2301, 0);
      int int1 = MathUtils.gcd(2301, 3736);
      long long0 = MathUtils.lcm(0L, (long) 3736);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 4194304;
      int int1 = MathUtils.mulAndCheck(4194304, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4194304;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 4194304;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 4194304;
      doubleArray0[8] = (double) 4194304;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      short short0 = MathUtils.indicator((short)1756);
      int int2 = MathUtils.pow(0, (int) (short)1756);
      double double0 = MathUtils.scalb(0.0, (-1038));
      int int3 = MathUtils.hash(0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-2960.233689101), 0.0);
      float float0 = MathUtils.round((float) 0, 0);
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 0, (-1038));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,038, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 66;
      // Undeclared exception!
      try { 
        MathUtils.factorial(66);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathUtils.sign((-190.177155043));
      byte byte0 = (byte) (-67);
      byte byte1 = MathUtils.sign((byte) (-67));
      int int0 = MathUtils.gcd(1722, (int) (byte) (-1));
      double double1 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 1, 0.0);
      long long0 = MathUtils.binomialCoefficient(1722, (byte) (-67));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-190.177155043);
      doubleArray0[1] = (-190.177155043);
      doubleArray0[2] = (-190.177155043);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-190.177 >= -190.177)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      boolean boolean0 = MathUtils.equals((double) 0L, (double) 0L, 14);
      short short0 = MathUtils.sign((short)0);
      float float0 = MathUtils.round(0.0F, 14);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 14;
      doubleArray0[8] = (double) 0L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble(Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,147,483,648
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
      long long1 = MathUtils.factorial(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 0L, (double) 1L);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      long long2 = MathUtils.sign((long) 0);
      double double1 = MathUtils.binomialCoefficientDouble(873, (-762));
      int int0 = MathUtils.hash((double) 0L);
      long long3 = MathUtils.mulAndCheck(1L, (long) (-762));
      int int1 = MathUtils.lcm(426, 0);
      boolean boolean1 = MathUtils.equals((-292.23), 0.0, 0.0);
      long long4 = MathUtils.binomialCoefficient(0, 0);
      float float0 = MathUtils.round(1995.812F, 873);
      double double2 = MathUtils.scalb((-132.1691007393944), 0);
      int int2 = MathUtils.pow((-3309), 5648769086999809661L);
      long long5 = MathUtils.addAndCheck(1L, 1394L);
      boolean boolean2 = MathUtils.equals((double) 1L, (double) 0L, 3.834E-20);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1995.812F;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1995.812F;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-762L);
      doubleArray0[7] = (double) 0L;
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        MathUtils.pow((-2082L), (-2082L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,082^-2,082)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      int int0 = MathUtils.subAndCheck((int) (short)0, 0);
      long long0 = MathUtils.pow((long) (short)0, (int) (short)0);
      double double0 = MathUtils.round(3100.10582, 0);
      int int1 = MathUtils.mulAndCheck((int) (short)0, (-1723));
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-1723), (-1723), 7);
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-97.4690538402), (-97.4690538402), (-97.4690538402));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        MathUtils.pow((-2392L), (-3607L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,392^-3,607)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.33333333333333287);
      doubleArray0[1] = 472.785;
      doubleArray0[2] = 955.25;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-0.33333333333333287);
      doubleArray1[1] = (-0.33333333333333287);
      doubleArray1[2] = 955.25;
      doubleArray1[3] = 955.25;
      doubleArray1[4] = 472.785;
      doubleArray1[5] = 955.25;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      double double0 = MathUtils.sinh((-0.33333333333333287));
      float float0 = MathUtils.round(1.0F, 4194304);
      float float1 = MathUtils.sign(1.0F);
      float float2 = MathUtils.indicator(Float.NaN);
      int int0 = MathUtils.pow(0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean1 = bigInteger0.testBit(1061);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 19);
      MathUtils.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        MathUtils.lcm(Integer.MIN_VALUE, Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow: gcd(-2,147,483,648, -2,147,483,648) is 2^31
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      boolean boolean0 = MathUtils.equals((-2846.934), (-805.297886), 0.0);
      long long0 = MathUtils.sign(1100L);
      double double1 = MathUtils.normalizeAngle(2502.82205999251, (-3649.490649056076));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1100L);
      short short0 = MathUtils.sign((short)1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      float float0 = MathUtils.round((float) 0, 0, 0);
      int int1 = MathUtils.mulAndCheck(0, 0);
      int int2 = (-260);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-260));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -260
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, (-2417));
      double double0 = MathUtils.normalizeAngle(Float.NaN, Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (-1414.3166700388165);
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = (double) (-2417);
      doubleArray0[5] = (double) Float.NaN;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = Double.NaN;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1390;
      intArray0[1] = 0;
      intArray0[2] = (-1393);
      intArray0[3] = 2494;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1322.528573, (double) 1390, (double) 2494);
      byte byte0 = MathUtils.sign((byte) (-65));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1390;
      doubleArray0[1] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.sign((long) (-1393));
      boolean boolean1 = MathUtils.equals((double) (-1393), (double) 0, 4062);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double3 = MathUtils.sign(1.1102230246251565E-16);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 62.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2779.5665031;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (-238.2272303432752);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short) (-163));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (62 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1997.183945117307);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.gcd((-1669011198), (-1669011198));
      double double0 = MathUtils.scalb((-1997.183945117307), (-1669011198));
      long long0 = (-1L);
      long long1 = MathUtils.sign((-1L));
      int int2 = MathUtils.compareTo((-1L), 0.030589580535888672, (-3197.0));
      int int3 = MathUtils.addAndCheck((-1669011198), (-1));
      boolean boolean0 = MathUtils.equals((-3197.0), 0.0, (-292.0));
      long long2 = MathUtils.mulAndCheck(40320L, 4211L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-758.7));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int4 = 511;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1669011199), 511);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,669,011,199, k = 511
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(623);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 623, (double) 623);
      double double1 = MathUtils.scalb(3336.4146592089064, 623);
      double double2 = MathUtils.factorialDouble(623);
      boolean boolean1 = MathUtils.equals((double[]) null, (double[]) null);
      long long0 = MathUtils.indicator((long) 623);
      double double3 = MathUtils.sign((double) 623);
      boolean boolean2 = MathUtils.equals((double[]) null, (double[]) null);
      short short0 = MathUtils.sign((short) (-3059));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 81.5418;
      doubleArray0[1] = 1345.6329795417764;
      doubleArray0[2] = 1345.6329795417764;
      doubleArray0[3] = (-1979.1632);
      doubleArray0[4] = 1.1102230246251565E-16;
      doubleArray0[5] = 81.5418;
      doubleArray0[6] = (-3223.42);
      doubleArray0[7] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.mulAndCheck((long) 936355297, (long) 936355297);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.sinh(1988.0);
      int int0 = MathUtils.compareTo(1988.0, 1541.9110027859, 1988.0);
      long long0 = 396L;
      long long1 = MathUtils.indicator(396L);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.log(0, 2773.73280267867);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = (-1168);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1168));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,168
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathUtils.log(223.17093190487, 634.89763611);
      byte byte0 = MathUtils.indicator((byte)63);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 634.89763611;
      doubleArray0[1] = 1.193331690654728;
      doubleArray0[2] = 634.89763611;
      doubleArray0[3] = (double) (byte)63;
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = 634.89763611;
      doubleArray0[6] = (double) (byte)63;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (byte)1;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = (double) (byte)63;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = MathUtils.pow(29, 5040L);
      long long0 = MathUtils.gcd((long) (-1029400127), (-1176L));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      float float1 = MathUtils.sign(0.0F);
      int int0 = MathUtils.addAndCheck((-1), 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0;
      int int1 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.binomialCoefficientDouble(147, (-1));
      try { 
        MathUtils.normalizeArray(doubleArray0, (-1));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      double double0 = MathUtils.binomialCoefficientLog(1, 1);
      int int1 = MathUtils.hash((double[]) null);
      double double1 = MathUtils.round(2448.69053, 68);
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 68;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, doubleArray0);
      float float0 = MathUtils.round((float) 0, 0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(0.0, (-3377.4843), 0.0);
      int[] intArray0 = new int[7];
      intArray0[0] = 2167;
      intArray0[1] = 0;
      intArray0[2] = 68;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 68;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      int int3 = MathUtils.hash(doubleArray0);
      boolean boolean3 = MathUtils.equalsIncludingNaN(2448.69053, (double) 68, (double) 0);
      long long0 = MathUtils.binomialCoefficient(1, 0);
      // Undeclared exception!
      try { 
        MathUtils.lcm(3288L, (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(27, 27);
      long long0 = MathUtils.mulAndCheck(0L, (long) 54);
      boolean boolean0 = MathUtils.equals(3.0, 0.0, 27);
      float float0 = MathUtils.indicator((float) 0L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 54;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 3.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 27;
      doubleArray1[2] = (-829.32020247);
      doubleArray1[3] = (double) 27;
      doubleArray1[4] = 3.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      long long1 = MathUtils.indicator(0L);
      int int1 = MathUtils.gcd(54, 54);
      byte byte0 = MathUtils.indicator((byte) (-98));
      double double1 = MathUtils.sinh(0.0);
      boolean boolean1 = MathUtils.equals((-0.0013888888689039883), 1091.9607646, 54.0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      int int0 = MathUtils.pow(2406, 1L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 2406;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.log(0.0, (-1088.6079875569));
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long1 = MathUtils.indicator(1L);
      double double3 = MathUtils.sign(3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = (-505);
      float float1 = MathUtils.round(0.0F, (-505));
      try { 
        MathUtils.pow(111, (-655L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (111^-655)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-173.857574333);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1194.134544095;
      doubleArray0[4] = 742.0;
      doubleArray0[5] = Double.NaN;
      boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
      long long0 = MathUtils.sign(0L);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double double1 = 0.0;
      int int0 = MathUtils.compareTo(1.0, 0, 0.0);
      int int1 = MathUtils.subAndCheck(0, 1);
      try { 
        MathUtils.pow(0, (long) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      try { 
        MathUtils.pow((-216), (-428L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-216^-428)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.scalb(382.84366897715, 0);
      double double1 = 0.0;
      boolean boolean0 = MathUtils.equals(382.84366897715, 0.0, (double) 0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      double double0 = MathUtils.round(0.0, 0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3482.5623221802);
      doubleArray0[1] = 996.89068600436;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-55.6277439723);
      doubleArray0[5] = (-2298.41101290303);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator((-1842L));
      double double0 = MathUtils.factorialDouble(2);
      double double1 = MathUtils.scalb((-55.6277439723), 0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)47;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (int) (byte) (-118));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-8,162,771,995,289,041^-118)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, (-1073.769));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = MathUtils.cosh((-331.29501680278));
      boolean boolean0 = MathUtils.equals((-1499.8784), (-1499.8784));
      int int0 = MathUtils.gcd(174, 174);
      long long0 = MathUtils.pow(528L, 0L);
      double double1 = MathUtils.binomialCoefficientDouble(174, 0);
      int int1 = MathUtils.indicator(174);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 174, 1.0, 1);
      double double2 = MathUtils.log((-331.29501680278), 1.0);
      int int2 = MathUtils.sign(174);
      int int3 = MathUtils.sign(63);
      double double3 = MathUtils.cosh(0.0);
      byte byte0 = MathUtils.indicator((byte) (-96));
      float float0 = MathUtils.indicator((-419.4204F));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1L, 1L);
      int int0 = MathUtils.lcm(0, 0);
      long long1 = MathUtils.sign(1L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 4194304);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 4,194,304
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = MathUtils.indicator(2047L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2047L;
      doubleArray0[1] = (double) 2047L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 2047L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 1L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,047 >= 2,047)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathUtils.indicator((-2778.72558));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-264.4391846799), (-233.154132114), 3);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-233.154132114);
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (-2778.72558);
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 146;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 146;
      doubleArray0[2] = 9.219544613762692E-9;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 146;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.sinh(0.0);
      int int1 = MathUtils.pow(3419, (long) 146);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(849, 146);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = MathUtils.indicator((-9223372036854775808L));
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.binomialCoefficientDouble((short)1, 0);
      byte byte0 = MathUtils.indicator((byte)42);
      // Undeclared exception!
      try { 
        MathUtils.factorial(233);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(1142, 1142);
      int[] intArray0 = new int[2];
      intArray0[0] = 1142;
      intArray0[1] = 1142;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.binomialCoefficientDouble(1142, 30);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2695.1864), (double) 30);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.negate();
      boolean boolean0 = bigInteger0.testBit(0);
      BigInteger bigInteger4 = BigInteger.ONE;
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger4);
      boolean boolean1 = MathUtils.equals((double) 0, (double) 0, 1374);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.14285714285714285;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.14285714285714285);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float float0 = MathUtils.round((-2122.398F), (-1154));
      byte byte0 = MathUtils.sign((byte) (-2));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (byte) (-1), 0.0, (-1154));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.sinh(2007.150602346719);
      short short0 = MathUtils.indicator((short)3);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)3;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 2007.150602346719;
      doubleArray0[3] = 2007.150602346719;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 2.2250738585072014E-308;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (\u221E >= 2,007.151)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftRight((-667));
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.not();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 1307674368000L);
      int int0 = MathUtils.subAndCheck(2171, 2171);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2171;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow((long) 0, 0);
      boolean boolean0 = MathUtils.equals((-209.807752), 2.404307984052299E-9);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1562, 1562);
      float float0 = 0.0F;
      int int0 = (-4002);
      int int1 = (-1746);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-4002), (-1746));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,746, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-949.0), (-2149.9955942));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1054.92254284445, 1054.92254284445);
      int int0 = MathUtils.compareTo(1054.92254284445, 4399.632491661974, 1054.92254284445);
      float float0 = MathUtils.sign((float) (-1));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.sign((long) (-1));
      int int1 = MathUtils.pow((-1), 0L);
      double double1 = MathUtils.factorialLog(1501);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(1, 5);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 5
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-4549), (-703));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -4,549, k = -703
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = MathUtils.compareTo(1.0, 1.0, 1.0);
      int int1 = MathUtils.indicator(0);
      int int2 = MathUtils.sign(138);
      double double0 = MathUtils.sinh(2145.7244);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 138;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 138;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 138;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = MathUtils.sign(6);
      // Undeclared exception!
      try { 
        MathUtils.round((-1243.2905F), 6, 66);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 66, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.sign((-1332.2));
      long long0 = MathUtils.pow(148L, 2757);
      int int0 = MathUtils.subAndCheck(2757, (-2019));
      // Undeclared exception!
      try { 
        MathUtils.factorial(4776);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float float0 = MathUtils.indicator((-1.0F));
      long long0 = MathUtils.addAndCheck((-2562L), (-1471L));
      double double0 = MathUtils.sign(2952.128706277);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2952.128706277;
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double1 = 0.5;
      doubleArray0[3] = 0.5;
      double double2 = (-3928.997);
      doubleArray0[4] = (-3928.997);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = (-1607.1854558946);
      double double1 = 1134.572374;
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-1607.1854558946), 1134.572374, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = (-2885);
      int int1 = MathUtils.indicator((-2885));
      int int2 = 2788;
      int int3 = MathUtils.pow((-1), 2788);
      long long0 = MathUtils.addAndCheck((long) 2788, (long) (-2885));
      try { 
        MathUtils.pow(0, (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 289.0;
      doubleArray0[1] = 57.2957763671875;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 430.3;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (289 > 57.296)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        MathUtils.pow((-2327), (-2327));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,327^-2,327)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = (-4093.9);
      double double1 = MathUtils.cosh((-4093.9));
      int int0 = (-1853);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1853));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,853
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = MathUtils.pow(192, 192);
      BigInteger bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
      double double0 = MathUtils.round(0.0, 2402);
      byte byte0 = MathUtils.sign((byte) (-59));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1352));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,352
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.bitCount();
      BigInteger bigInteger1 = BigInteger.ONE;
      int int1 = 161;
      boolean boolean0 = bigInteger0.testBit(161);
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      int int2 = 839;
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 839);
      MockRandom mockRandom0 = new MockRandom();
      int int3 = mockRandom0.nextInt();
      long long0 = mockRandom0.nextLong();
      double double0 = mockRandom0.nextGaussian();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(0, mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = MathUtils.cosh((-49.829655));
      double double1 = MathUtils.scalb((-863.988), (-1730));
      long long0 = MathUtils.lcm((long) (-1730), 0L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1730);
      MathUtils.checkOrder(doubleArray0);
      int int0 = MathUtils.hash(0.0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray1);
      int int1 = MathUtils.pow((-1730), 3357L);
      long long1 = 2496L;
      int int2 = MathUtils.pow(0, 2496L);
      double double2 = MathUtils.distance(doubleArray1, doubleArray1);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray1);
      double double3 = MathUtils.indicator(1.5707963267948966);
      long long2 = MathUtils.factorial(0);
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-651L), (-651L));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1302L);
      doubleArray0[1] = (double) (-1302L);
      doubleArray0[2] = (double) (-651L);
      doubleArray0[3] = 5.650007086920087E-9;
      doubleArray0[4] = (double) (-1302L);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (double) (-1302L);
      doubleArray0[7] = (double) (-1302L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1,302 >= -1,302)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = MathUtils.round(1.1430250008909141E-8, 0);
      int int0 = MathUtils.addAndCheck((-246), 10);
      int int1 = MathUtils.indicator((-236));
      long long0 = MathUtils.mulAndCheck((long) 0, (long) (-246));
      float float0 = MathUtils.indicator(0.0F);
      double double1 = MathUtils.scalb((-6095.68803), 0);
      int int2 = 0;
      int int3 = 4;
      int int4 = MathUtils.lcm(0, 4);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 10;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1139.29559), (double) 4);
      boolean boolean1 = MathUtils.equals((double) 1.0F, (-1139.29559), 255);
      int int5 = MathUtils.lcm(4, 0);
      long long1 = MathUtils.subAndCheck((long) 0, (long) 4);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathUtils.cosh(470.8355073);
      double[] doubleArray0 = null;
      double double1 = (-835.28468808491);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-835.28468808491));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(0, 0);
      double double0 = MathUtils.indicator((double) 0);
      int int2 = MathUtils.sign(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-46);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger1);
      long long0 = (-2663L);
      try { 
        MathUtils.pow(bigInteger0, (-2663L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-2,663)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = 0L;
      int int0 = (-1002);
      try { 
        MathUtils.pow(0L, (-1002));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,002)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathUtils.indicator((-740.54349954));
      int int0 = MathUtils.subAndCheck((-1410), (-1410));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1187.0), (double) 0);
      long long0 = MathUtils.sign((long) (-1410));
      double double1 = MathUtils.normalizeAngle(0.0, (-1.0));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1093.8442565693);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) (-1410);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2061.0361379);
      doubleArray0[1] = (-549.0);
      doubleArray0[2] = 4172.76115;
      doubleArray0[3] = 9.219544613762692E-9;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte) (-120));
      int int0 = MathUtils.indicator((int) (byte) (-120));
      double double0 = MathUtils.cosh(0.0);
      float float0 = MathUtils.round((float) (byte) (-1), (int) (byte) (-120));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathUtils.round((-2231.1543098), 3);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-1097L), 0L);
      int[] intArray0 = new int[5];
      int int0 = (-3188);
      intArray0[0] = (-3188);
      int int1 = 1113;
      intArray0[1] = 1113;
      intArray0[2] = 703;
      int int2 = 2679;
      intArray0[3] = 2679;
      intArray0[4] = 0;
      int int3 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1113, 176, (-1478));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1792.37973398, 1792.37973398, 236);
      short short0 = MathUtils.sign((short)841);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float float0 = MathUtils.round(589.0916F, 1548);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-1980L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (376,195,514,368^-1,980)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = MathUtils.indicator(859.71381528994);
      try { 
        MathUtils.pow(0L, (-3534));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-3,534)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-113);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      boolean boolean0 = bigInteger0.testBit(17);
      double double0 = bigInteger1.doubleValue();
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      byte byte0 = MathUtils.sign((byte)11);
      long long0 = MathUtils.lcm((-2147483648L), (-2147483648L));
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, (-0.25), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1524.321902911737), (-1524.321902911737));
      long long0 = (-2523L);
      long long1 = (-4035746434778044925L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-2523L), (-4035746434778044925L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = MathUtils.lcm(4294967295L, (-650L));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(197.47049, 876.826);
      int int0 = MathUtils.sign(226);
      float float0 = MathUtils.round((float) 1, 1);
      int int1 = MathUtils.hash(1.25);
      long long0 = MathUtils.addAndCheck((long) 226, (long) 1);
      int int2 = MathUtils.gcd(3523, 1072955392);
      int[] intArray0 = new int[7];
      intArray0[0] = 1072955392;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 3523;
      intArray0[4] = 226;
      intArray0[5] = 1;
      intArray0[6] = 1072955392;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      short short0 = MathUtils.sign((short)2);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)2;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (short)2;
      doubleArray0[5] = (double) (short)2;
      doubleArray0[6] = (double) (short)1;
      doubleArray0[7] = (double) (short)2;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (short)2;
      doubleArray1[1] = (double) (short)2;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) (short)2;
      doubleArray1[5] = (double) (short)2;
      doubleArray1[6] = (double) (short)1;
      doubleArray1[7] = (double) (short)2;
      doubleArray1[8] = (double) (short)1;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.shiftLeft((short)1);
      BigInteger bigInteger2 = bigInteger0.not();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (int) (short)2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-655));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-655)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = MathUtils.gcd(40320L, 4503599627370495L);
      double double0 = MathUtils.factorialDouble(0);
      short short0 = MathUtils.sign((short)1283);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 431;
      // Undeclared exception!
      try { 
        MathUtils.factorial(431);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(303.542386, 303.542386);
      short short0 = MathUtils.sign((short)399);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean1 = MathUtils.equals(500.98, 500.98);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      double double1 = MathUtils.log((short)1, 3823.9292877743);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      int int0 = 0;
      double double0 = MathUtils.scalb((short)0, 0);
      byte byte0 = MathUtils.indicator((byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      boolean boolean0 = bigInteger1.isProbablePrime(2823);
      int int1 = bigInteger0.intValueExact();
      int int2 = bigInteger0.getLowestSetBit();
      int int3 = 0;
      int int4 = MathUtils.pow(1223, 0);
      double double1 = bigInteger1.doubleValue();
      int int5 = MathUtils.lcm((int) (short)1, 0);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger1, (long) 1);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 8.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      int int0 = MathUtils.indicator(0);
      boolean boolean0 = MathUtils.equals(1.0, (double) 0, 8.0);
      double double0 = MathUtils.round(1.4456468917292502E-16, (-3491), 0);
      int int1 = MathUtils.lcm((-919), 0);
      double double1 = MathUtils.indicator((-2.6033824355191673E-8));
      double double2 = MathUtils.sign(Double.POSITIVE_INFINITY);
      boolean boolean1 = MathUtils.equals((-1.0), (-1.0), 0.0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign(0.0F);
      double double2 = MathUtils.factorialLog(552);
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3035.4949594;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-385), (-385));
      double double0 = MathUtils.cosh(148225);
      int int1 = MathUtils.pow(129, 148225);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger1, 285L);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      int int1 = MathUtils.hash((double) 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1878.5);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int2 = MathUtils.addAndCheck(0, 0);
      double double1 = MathUtils.cosh((-1878.5));
      double double2 = MathUtils.scalb(4003.87, 0);
      double double3 = MathUtils.scalb(0.0, 0);
      int int3 = MathUtils.subAndCheck(0, 0);
      float float0 = MathUtils.round(0.0F, 0, 0);
      double double4 = MathUtils.log(740.8523, (-2630.5082242485));
      boolean boolean0 = MathUtils.equalsIncludingNaN(4096.61721, 4003.87);
      int int4 = MathUtils.compareTo(754.62358667271, (-426.248402845), 0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-1420L), 6227020800L);
      short short0 = MathUtils.indicator((short)3878);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.log(1.0, 0.0);
      byte byte1 = MathUtils.sign((byte)0);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)1;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(350L, 350L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 287.986177886;
      doubleArray0[1] = (double) 700L;
      doubleArray0[2] = (double) 700L;
      doubleArray0[3] = (double) 350L;
      doubleArray0[4] = (double) 700L;
      doubleArray0[5] = (double) 350L;
      doubleArray0[6] = (double) 700L;
      doubleArray0[7] = (double) 350L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(1, 1);
      float float0 = MathUtils.sign((float) 1);
      long long0 = MathUtils.sign(2469L);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 519.083;
      doubleArray0[3] = 1910.1969357;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(2035);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = 1548;
      double double1 = MathUtils.scalb(1768.873, 1548);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 2.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short short0 = MathUtils.sign((short)9);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      int int1 = MathUtils.indicator(227);
      double double0 = MathUtils.log(0.0, (-1307.0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      int int0 = MathUtils.pow(0, 0);
      int int1 = MathUtils.subAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(21, (-1086));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1086), 2462.3967185919);
      byte byte0 = MathUtils.sign((byte) (-75));
      long long0 = MathUtils.pow(2L, 2928L);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = (-4279);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-4279), (-4279));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -4,279
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 3149);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2485));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,485
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-274L), (-274L));
      boolean boolean0 = MathUtils.equals((double) (-274L), (double) (-274L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-274L);
      doubleArray0[1] = (double) (-274L);
      doubleArray0[2] = (double) (-274L);
      doubleArray0[3] = (double) (-274L);
      doubleArray0[4] = (double) (-274L);
      doubleArray0[5] = (double) (-274L);
      doubleArray0[6] = (double) 0L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-274.0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = MathUtils.indicator((-1.0F));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1.0F), 1.997844754509471E-9, 1.997844754509471E-9);
      int int0 = MathUtils.compareTo(1.997844754509471E-9, (-1.0F), (-1.0F));
      boolean boolean1 = MathUtils.equals(0.1538461446762085, (double) 1, (double) (-1.0F));
      int int1 = MathUtils.pow(915, 1);
      int int2 = (-1574);
      double double0 = MathUtils.binomialCoefficientLog(1, (-1574));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.997844754509471E-9;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-541L), 9154082963658192752L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 213.2293278;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd(3972L, 3972L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals(0.0, 7.0, 1163.442099);
      boolean boolean3 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.subAndCheck(0, 0);
      double double0 = MathUtils.cosh(649.958450143);
      int int1 = MathUtils.hash(649.958450143);
      int int2 = MathUtils.subAndCheck(0, 193);
      int int3 = MathUtils.indicator(716);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = MathUtils.lcm((-3340), (-3340));
      int int1 = MathUtils.subAndCheck(0, (-4153));
      boolean boolean0 = MathUtils.equals((double) 3340, (double) 0, (double) (-4153));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = MathUtils.indicator(192);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (long) 1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(611L, 0L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 611L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.sign(0.0);
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int0 = (-4523);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-4523));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,523
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
