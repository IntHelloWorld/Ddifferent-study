/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:43:25 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 1.0, 63);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(169, 51);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-0.12502530217170715), (-0.12502530217170715), (-0.12502530217170715));
      int int0 = MathUtils.mulAndCheck(422, 422);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 2146835057;
      int int1 = 1617;
      double double0 = MathUtils.binomialCoefficientDouble(2146835057, 1617);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2146835057, 1617);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = MathUtils.lcm((-9218868437227405313L), (-9218868437227405313L));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 523;
      doubleArray0[2] = (double) 9218868437227405313L;
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      byte byte0 = MathUtils.indicator((byte)0);
      long long1 = MathUtils.pow(9193070505571053912L, 67);
      int int0 = MathUtils.indicator((int) (byte)1);
      double double1 = MathUtils.round((-2560.662384597), 0, (int) (byte)0);
      double[] doubleArray1 = new double[6];
      doubleArray1[2] = (double) 9218868437227405313L;
      doubleArray1[3] = (-2561.0);
      doubleArray1[4] = 9.2188684372274053E18;
      doubleArray1[5] = (double) (byte)1;
      double double2 = MathUtils.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1621.69275337068;
      doubleArray0[3] = 3069.0896473429857;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      long long0 = MathUtils.lcm((-428L), (-428L));
      float float0 = Float.NaN;
      float float1 = MathUtils.sign(Float.NaN);
      int int0 = MathUtils.mulAndCheck((-657), (-657));
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float2 = MathUtils.round((-1309.2314F), (-3670));
      int int1 = MathUtils.hash(0.0);
      short short0 = MathUtils.sign((short) (-7));
      int int2 = MathUtils.indicator((-3670));
      long long1 = MathUtils.indicator(0L);
      long long2 = MathUtils.mulAndCheck(7910884519577875640L, 1L);
      long long3 = MathUtils.pow(0L, 428L);
      int int3 = MathUtils.subAndCheck(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-1758L), 9218868437227405312L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short short0 = (short)1557;
      short short1 = MathUtils.sign((short)1557);
      double double0 = 3389.9774920238656;
      int int0 = MathUtils.compareTo((short)1557, 2.0, 3389.9774920238656);
      long long0 = (-7278142539171889152L);
      long long1 = MathUtils.subAndCheck((-7278142539171889152L), (long) (short)1);
      long long2 = MathUtils.pow((-7278142539171889152L), (int) (short)1);
      long long3 = (-2556L);
      long long4 = MathUtils.gcd((-2556L), (-7278142539171889152L));
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((-1474), mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float float0 = MathUtils.indicator((-4173.808F));
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 220;
      intArray0[2] = 1522;
      intArray0[3] = 67;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 4651;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int[] intArray1 = new int[6];
      intArray1[0] = 220;
      intArray1[1] = 1522;
      intArray1[2] = 0;
      intArray1[3] = 4651;
      intArray1[4] = 1522;
      intArray1[5] = 0;
      int int0 = MathUtils.distanceInf(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = (-4976L);
      long long1 = 4503599627370495L;
      // Undeclared exception!
      try { 
        MathUtils.lcm((-4976L), 4503599627370495L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = MathUtils.indicator(23);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.negate();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-686.7);
      doubleArray0[1] = (double) 23;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 23;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-686.7);
      doubleArray1[1] = (-686.7);
      doubleArray1[2] = (double) 1;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1273.244025989);
      doubleArray0[1] = 2875.610042385238;
      double double0 = 9.219544613762692E-9;
      doubleArray0[2] = 9.219544613762692E-9;
      doubleArray0[3] = 2059.2407325503;
      doubleArray0[4] = (-1.0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd(0, 10);
      long long0 = MathUtils.addAndCheck(1868L, (long) 10);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) 10, (-4035746434778044925L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      int int0 = (-3219);
      int int1 = (-1157);
      try { 
        MathUtils.pow((-3219), (-1157));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,219^-1,157)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm((-841), 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-841);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-841);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-841);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -841)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(75, 75);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 150;
      doubleArray0[1] = (double) 150;
      doubleArray0[2] = (double) 75;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 75;
      doubleArray1[1] = (double) 150;
      doubleArray1[2] = (double) 150;
      doubleArray1[3] = (double) 75;
      doubleArray1[4] = (double) 150;
      doubleArray1[5] = (double) 75;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      int int1 = MathUtils.mulAndCheck(1461, (-3381));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equals(150.0, 75.0, 150.0);
      int int2 = MathUtils.pow(8, 1461);
      boolean boolean1 = MathUtils.equals((-754.95), 150.0);
      short short0 = MathUtils.sign((short) (-710));
      long long0 = MathUtils.pow((-302932621132653753L), 2206L);
      int[] intArray0 = new int[6];
      intArray0[0] = 1461;
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = 150;
      intArray0[3] = (int) (short) (-710);
      intArray0[4] = 150;
      intArray0[5] = 12;
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray2 = new double[0];
      boolean boolean2 = MathUtils.equals(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = MathUtils.sign((-1606));
      byte byte0 = (byte) (-106);
      byte byte1 = MathUtils.sign((byte) (-106));
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-424L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-424)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = MathUtils.gcd((-1477L), (-1477L));
      boolean boolean0 = MathUtils.equals(7.94, (double) (-1477L));
      double double0 = MathUtils.log(532.46903543106, (-1477L));
      long long1 = MathUtils.sign((-1477L));
      int int0 = (-1460);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1460));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,460
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = MathUtils.cosh(171.2099);
      int int0 = MathUtils.sign((-558));
      int int1 = MathUtils.addAndCheck((-558), (-1));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.1336652161679966E74;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-558);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-559);
      doubleArray0[6] = (double) (-558);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck((long) (-559), 6L);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = MathUtils.indicator((-1L));
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, 0.0, 17);
      short short0 = MathUtils.sign((short)95);
      double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, (int) (short)1, (int) (short)1);
      short short1 = MathUtils.indicator((short)95);
      float float0 = MathUtils.round((float) (-1L), 0);
      int int0 = MathUtils.compareTo(2292.1152, (-1095.0), (short)1);
      long long1 = MathUtils.subAndCheck(1307674368000L, (-302932621132653753L));
      long long2 = MathUtils.pow(0L, 0);
      boolean boolean1 = MathUtils.equals(0.0, 3867.13571, Double.NEGATIVE_INFINITY);
      int int1 = 31;
      float float1 = MathUtils.round(0.0F, 31);
      double double1 = MathUtils.binomialCoefficientLog((short)1, 1);
      long long3 = MathUtils.factorial((short)1);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.round(Double.POSITIVE_INFINITY, (-3089));
      double double2 = (-4.503599627370496E15);
      double double3 = MathUtils.sign((-4.503599627370496E15));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-3089), (-3481));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -3,089
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      int int0 = MathUtils.mulAndCheck(1, 1);
      byte byte0 = MathUtils.indicator((byte) (-77));
      double double1 = MathUtils.cosh(400.69978950155206);
      double double2 = MathUtils.scalb(16.0, (byte) (-77));
      boolean boolean0 = MathUtils.equalsIncludingNaN(1188.6957588, 2219.29609455);
      float float0 = MathUtils.round((float) 1, (-725));
      short short0 = MathUtils.sign((short) (-2355));
      byte byte1 = MathUtils.sign((byte)7);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1188.6957588;
      int int1 = MathUtils.hash(doubleArray0);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte2 = MathUtils.sign((byte)1);
      long long0 = MathUtils.gcd(0L, 0L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (byte) (-1));
      int int2 = MathUtils.lcm(19, (-1686));
      double double4 = MathUtils.distanceInf(doubleArray1, doubleArray1);
      int int3 = MathUtils.hash(1.0587911840678754E-22);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1686));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,686
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = MathUtils.pow(31, 31);
      int int1 = 0;
      float float0 = MathUtils.round((float) 31, 0);
      double double0 = MathUtils.sinh(960.4719330145);
      int int2 = MathUtils.indicator((-2010103841));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 31.0F;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.factorialDouble(186);
      long long0 = MathUtils.pow((long) 31, 31);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.sign(Float.NaN);
      int int0 = MathUtils.hash((double) Float.NaN);
      int[] intArray0 = new int[5];
      intArray0[0] = 2146959360;
      intArray0[1] = 2146959360;
      intArray0[2] = 2146959360;
      intArray0[3] = 2146959360;
      intArray0[4] = 2146959360;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      try { 
        MathUtils.pow((long) 0, (-567L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-567)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1083.015650324;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-849.7);
      doubleArray0[3] = (-2959.536);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2067.314954313;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int int0 = MathUtils.sign(0);
      float float0 = MathUtils.round(371.66F, 0);
      boolean boolean0 = MathUtils.equals(0.058823529411764705, 1.0);
      short short0 = MathUtils.indicator((short)174);
      int int1 = MathUtils.sign(0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 16);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 16
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 3242;
      int int1 = 523;
      double double0 = MathUtils.binomialCoefficientLog(3242, 523);
      double double1 = MathUtils.scalb((-958.369763620123), 3242);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("gl#p>is(H/:h");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.gl#p>is(H/:h
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(4000, 4000);
      int int1 = MathUtils.hash(2619.14301102265);
      int int2 = MathUtils.compareTo(2619.14301102265, 2619.14301102265, 2014958793);
      double double0 = MathUtils.indicator((double) 0);
      double double1 = MathUtils.sinh(0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2014958793;
      doubleArray0[2] = 2619.14301102265;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2619.14301102265;
      int int3 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.indicator((short)0);
      double double2 = MathUtils.log(93.1477, 0.0);
      double double3 = MathUtils.binomialCoefficientLog(2072, 1970);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = (-2447);
      double double0 = MathUtils.binomialCoefficientLog(6299, (-2447));
      try { 
        MathUtils.pow((BigInteger) null, (-2447));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-2,447)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = MathUtils.sign(0.0F);
      double double0 = 0.0;
      double double1 = 40.19140625;
      double double2 = MathUtils.log(0.0, 40.19140625);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 4194304);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2073;
      intArray0[2] = 0;
      intArray0[3] = (-2144);
      double double0 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      boolean boolean0 = bigInteger0.isProbablePrime(12);
      BigInteger bigInteger3 = BigInteger.ONE;
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger3);
      byte byte0 = MathUtils.sign((byte)0);
      int int0 = MathUtils.pow(2, (long) 2073);
      int int1 = MathUtils.sign(2073);
      int[] intArray1 = new int[9];
      intArray1[0] = (int) (byte)0;
      intArray1[1] = 1;
      intArray1[2] = (int) (byte)0;
      intArray1[3] = 2073;
      intArray1[4] = (int) (byte)0;
      intArray1[5] = 12;
      intArray1[6] = 2;
      intArray1[7] = (int) (byte)0;
      intArray1[8] = 2;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray1, intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = (-1.0);
      boolean boolean0 = MathUtils.equals((-1.0), 2189.5453725107955);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte byte0 = MathUtils.indicator((byte) (-50));
      long long0 = MathUtils.pow(675L, 19);
      try { 
        MathUtils.pow(0, (-8778910093132222277L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-8,778,910,093,132,222,277)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = MathUtils.sign(0.15);
      boolean boolean0 = MathUtils.equals(0.15, 0.15, 1.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1694.002819724864, 1.1102230246251565E-16, 0.0);
      long long0 = MathUtils.pow((-443L), 425);
      float float0 = MathUtils.round(12.4031F, 0, 0);
      double double1 = MathUtils.scalb(2.0, 777);
      long long1 = MathUtils.pow((-57L), 0);
      short short0 = MathUtils.sign((short)347);
      long long2 = MathUtils.binomialCoefficient(33, 33);
      float float1 = MathUtils.indicator(13.0F);
      double double2 = MathUtils.scalb(690.563, 777);
      boolean boolean2 = MathUtils.equalsIncludingNaN(7.0, (double) (-9024750129742652123L), (double) 1L);
      double double3 = MathUtils.log(0.0, 777);
      long long3 = MathUtils.subAndCheck((-9024750129742652123L), (long) 0);
      long long4 = MathUtils.indicator(5040L);
      double double4 = MathUtils.log(792.905558077, (-3.141592653589793));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 1056;
      int int1 = 10;
      int int2 = MathUtils.addAndCheck(1056, 10);
      long long0 = MathUtils.subAndCheck((-1394L), 0L);
      float float0 = MathUtils.sign((float) (-1394L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow((BigInteger) null, bigInteger0);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.indicator(0L);
      int int0 = (-107);
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(Integer.MIN_VALUE, (-107));
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -2,147,483,648 + -107
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 7;
      int int1 = MathUtils.pow(7, 119);
      long long0 = MathUtils.subAndCheck((-1229L), 0L);
      int int2 = 15;
      int int3 = MathUtils.pow(15, 7);
      double double0 = MathUtils.binomialCoefficientDouble(1059, 1059);
      int int4 = MathUtils.subAndCheck(2114, 7);
      int int5 = MathUtils.lcm((-1201), 2107);
      int int6 = 247;
      // Undeclared exception!
      try { 
        MathUtils.round(626.178F, 1059, 247);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 247, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = BigInteger.ONE;
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger3 = bigInteger2.divide(bigInteger0);
      BigInteger bigInteger4 = bigInteger0.shiftLeft((short)10);
      BigInteger bigInteger5 = bigInteger3.add(bigInteger1);
      double double0 = bigInteger2.doubleValue();
      BigInteger bigInteger6 = bigInteger2.multiply(bigInteger0);
      int int0 = bigInteger0.bitLength();
      BigInteger bigInteger7 = bigInteger0.xor(bigInteger3);
      BigInteger bigInteger8 = bigInteger0.add(bigInteger2);
      BigInteger bigInteger9 = bigInteger0.or(bigInteger2);
      double double1 = bigInteger0.doubleValue();
      try { 
        MathUtils.pow(bigInteger0, (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 916);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.abs();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      String string0 = bigInteger0.toString();
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)100;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigInteger bigInteger3 = bigInteger0.or(bigInteger2);
      BigInteger bigInteger4 = BigInteger.ZERO;
      long long1 = bigInteger4.longValue();
      BigInteger bigInteger5 = bigInteger0.add(bigInteger4);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 226);
      long long2 = MathUtils.addAndCheck(0L, 25L);
      int int0 = MathUtils.hash(1739.47);
      int int1 = MathUtils.indicator(916);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-794.59978672916), (double) (byte)17, 14);
      boolean boolean1 = MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-554.30567);
      int int0 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.indicator((float) (-1013073761));
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-1013073761));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1,013,073,761)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = MathUtils.pow(2638, 0L);
      int int1 = MathUtils.sign(1);
      long long0 = MathUtils.addAndCheck(0L, (-549L));
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((double) 0L, (-3.141592653589793), 1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-0.0013888888689039883);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double0 = MathUtils.sign(697.82923);
      int int0 = MathUtils.gcd(2841, (-76));
      double double1 = MathUtils.sinh(1.0);
      long long0 = MathUtils.addAndCheck((long) 2841, 5288L);
      boolean boolean0 = MathUtils.equals((double) (-76), 0.0, 1);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = (-76);
      intArray0[2] = (-76);
      intArray0[3] = (-76);
      double double2 = MathUtils.distance(intArray0, intArray0);
      double double3 = MathUtils.factorialLog(1538);
      float float0 = MathUtils.indicator((float) 2841);
      long long1 = MathUtils.subAndCheck((long) 1, (long) 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-1451L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1,451)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      int int0 = MathUtils.lcm(0, 90);
      boolean boolean0 = MathUtils.equals((-1.0), (double) 0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 35;
      boolean boolean0 = MathUtils.equals(0.5, 0.5, 35);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(3057, (-1460));
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 909.054, 909.054);
      float float0 = MathUtils.sign((float) (-1460));
      double double1 = MathUtils.factorialLog(0);
      float float1 = MathUtils.round((float) (-1460), 0);
      long long0 = MathUtils.subAndCheck(707L, (-3846L));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = MathUtils.pow((-3948L), 0L);
      short short0 = (short)111;
      short short1 = MathUtils.sign((short)111);
      long long1 = 0L;
      long long2 = MathUtils.lcm(0L, (long) (short)1);
      int int0 = (-3023);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-3023), (-3023));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -3,023
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = MathUtils.sign((-146));
      double[] doubleArray0 = null;
      int int1 = MathUtils.hash((double[]) null);
      double double0 = MathUtils.log((-1197.7798566), 0);
      boolean boolean0 = MathUtils.equals((-0.1666666567325592), (-3398.118), (-1005.0285151));
      double double1 = (-1674.8061495026);
      boolean boolean1 = MathUtils.equals((-1674.8061495026), 3.141592653589793, Double.NaN);
      int int2 = MathUtils.addAndCheck(0, 1897);
      double double2 = MathUtils.sign(0.0);
      int int3 = 535;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 535, (-146));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      short short0 = (short)15;
      short short1 = MathUtils.sign((short)15);
      double double0 = MathUtils.factorialDouble((short)1);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 2.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 298L;
      doubleArray0[2] = (double) 298L;
      doubleArray0[3] = (double) 298L;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      int int0 = MathUtils.hash(1.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = 1.1102230246251565E-16;
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) 1072693248;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator(0L);
      int int1 = MathUtils.compareTo(2.0, 1.0, 1072693248);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(713, 1072693248);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 713, k = 1,072,693,248
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.cosh(13.07);
      long long0 = MathUtils.lcm(1152L, 1152L);
      int int0 = MathUtils.hash((double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 13.07);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-2.6033824355191673E-8), 2127.58351075171);
      float float0 = MathUtils.round(Float.NaN, 0);
      long long0 = MathUtils.pow(0L, 2329L);
      int int0 = MathUtils.indicator(3156);
      double double0 = MathUtils.round((double) 0L, 161, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3156;
      doubleArray0[1] = (-2.6033824355191673E-8);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(3156);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-851L), (-851L));
      double double0 = MathUtils.sign((double) 0L);
      long long1 = MathUtils.pow(0L, 358);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.intValueExact();
      int int1 = bigInteger0.bitCount();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-851L);
      doubleArray0[3] = (double) (-851L);
      doubleArray0[4] = (double) 0L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long2 = MathUtils.indicator((long) 358);
      // Undeclared exception!
      try { 
        MathUtils.factorial(1073);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 373.0;
      doubleArray0[1] = (-2074.7959);
      doubleArray0[2] = (-4793.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = 115;
      int int1 = MathUtils.gcd(115, 115);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 373.0;
      doubleArray1[2] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      short short0 = bigInteger0.shortValueExact();
      int int0 = bigInteger0.intValueExact();
      int int1 = bigInteger0.bitLength();
      float float0 = bigInteger0.floatValue();
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger1 = BigInteger.valueOf((byte)1);
      boolean boolean0 = bigInteger0.equals((Object) null);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.subAndCheck(2585L, 2585L);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 2585L);
      double double0 = MathUtils.factorialDouble(1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)1;
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.cosh(0.0);
      long long1 = MathUtils.indicator((long) 1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1L), (-1L));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 640.72;
      doubleArray0[1] = 5541.703848;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1316.1950278156874;
      doubleArray0[5] = 2010.8;
      doubleArray0[6] = 2093.550733293;
      doubleArray0[7] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (5,541.704 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = MathUtils.sign((-464L));
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      int int0 = MathUtils.hash(0.0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-231L), 0L);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 67);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = MathUtils.sign(1465);
      double double0 = MathUtils.factorialDouble(1);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1, (-41.5072263284));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      byte[] byteArray0 = bigInteger0.toByteArray();
      int int1 = bigInteger0.intValue();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0L);
      boolean boolean1 = MathUtils.equals(0.5, 3975.14891, (double) 1);
      boolean boolean2 = MathUtils.equalsIncludingNaN(1904.36, (double) 1);
      double double1 = MathUtils.round(3.141592653589793, 1465);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float float0 = MathUtils.sign((-612.0F));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-612.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-612.0F);
      doubleArray0[4] = (double) (-612.0F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) (-612.0F);
      doubleArray0[7] = (double) (-612.0F);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.lcm(31, 1718);
      byte byte0 = MathUtils.indicator((byte)91);
      double double0 = MathUtils.normalizeAngle(0.0, 524.273912245);
      float float1 = MathUtils.indicator((-612.0F));
      double double1 = MathUtils.sign(521.5043804959057);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)91;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.indicator(0L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(2825.217915, (double) 31);
      boolean boolean2 = MathUtils.equals(308.1284373, (double) 1718, 2825.217915);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(607.28, 0.0);
      float float0 = MathUtils.sign((-493.553F));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float float0 = 182.0F;
      int int0 = 216;
      float float1 = MathUtils.round(182.0F, 216);
      int int1 = (-1480);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) Float.NaN, Double.NEGATIVE_INFINITY, (-1480));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float float0 = MathUtils.indicator((-2606.446F));
      long long0 = MathUtils.lcm((-258L), 283L);
      int int0 = MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(4000, 4000);
      int int1 = MathUtils.hash(2619.14301102265);
      int int2 = MathUtils.compareTo(2619.14301102265, 2619.14301102265, 2014958793);
      double double0 = MathUtils.indicator((double) 0);
      double double1 = MathUtils.sinh(0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2014958793;
      doubleArray0[2] = 2619.14301102265;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2619.14301102265;
      doubleArray0[5] = 1.0;
      int int3 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.indicator((short)0);
      double double2 = MathUtils.log(93.1477, 0.0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(298L, 298L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 88804L;
      doubleArray0[1] = (double) 298L;
      doubleArray0[2] = (double) 298L;
      doubleArray0[3] = (double) 298L;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float float0 = MathUtils.sign(915.2F);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(231.787204698, 304.919391766549, 3484);
      int int0 = MathUtils.sign(3484);
      short short0 = MathUtils.sign((short) (-1207));
      byte byte0 = MathUtils.sign((byte) (-128));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-20));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 4072L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 4072L;
      doubleArray0[2] = (double) (-4072L);
      doubleArray0[3] = (double) (-4072L);
      doubleArray0[4] = (double) 4072L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) (-4072L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (4,072 > -4,072)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float float0 = MathUtils.round((-2584.75F), 66, 0);
      byte byte0 = MathUtils.indicator((byte)0);
      long long0 = MathUtils.pow((long) (byte)1, 606);
      long long1 = MathUtils.pow(9154082963658192752L, 9154082963658192752L);
      double double0 = MathUtils.indicator((double) 606);
      int int0 = MathUtils.indicator(606);
      double double1 = MathUtils.binomialCoefficientLog(0, (-3005));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 606;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 9154082963658192752L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (606 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
      int int0 = MathUtils.lcm((-963), (-963));
      double double0 = MathUtils.binomialCoefficientLog(963, (-963));
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom(1343L);
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(Integer.MIN_VALUE, mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = MathUtils.gcd(1061, 1061);
      long long0 = MathUtils.binomialCoefficient(0, (-566));
      int int1 = MathUtils.indicator(1061);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1061;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1061;
      doubleArray0[4] = (double) (-566);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1666.5078223;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      long long0 = MathUtils.pow(9223372036854775807L, 1458);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.scalb((-2939.445409694884), 1458);
      int int0 = 861;
      int int1 = MathUtils.pow(861, (long) 861);
      double double2 = MathUtils.factorialLog(130);
      int int2 = MathUtils.hash(506.132825342035);
      byte byte0 = MathUtils.sign((byte)31);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("e$L+#b$AE");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.e$L+#b$AE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = MathUtils.factorialLog(499);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = (-2404L);
      long long1 = MathUtils.gcd((-2404L), 1781L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.normalizeAngle(1L, 1L);
      double double1 = MathUtils.sign((double) 1781L);
      int int0 = (-1659);
      int int1 = MathUtils.sign((-1659));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1659));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,659
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = 4499201580859392L;
      long long1 = MathUtils.gcd(4499201580859392L, 0L);
      int int0 = 205;
      double double0 = MathUtils.scalb(0L, 205);
      long long2 = (-2796L);
      try { 
        MathUtils.pow(294, (-2796L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (294^-2,796)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = MathUtils.gcd((-2375L), 0L);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = (-1942);
      int int1 = MathUtils.sign((-1942));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (-1942), (double) (-1942), (-231));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.scalb((-1775.4948882), 1948);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 2432902008176640000L);
      long long0 = MathUtils.binomialCoefficient(1948, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1948;
      doubleArray0[1] = (-1775.4948882);
      doubleArray0[2] = (double) 1948;
      doubleArray0[3] = (-1775.4948882);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1948;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1621.69275337068;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 558.9474;
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 2353;
      // Undeclared exception!
      try { 
        MathUtils.factorial(2353);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.indicator(1865.4084);
      double double1 = MathUtils.indicator(1865.4084);
      int int0 = MathUtils.lcm(3988, 3988);
      int int1 = MathUtils.addAndCheck(135, 3164);
      int int2 = MathUtils.sign(718);
      short short0 = MathUtils.sign((short)1893);
      double double2 = MathUtils.indicator(298.6);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3164;
      doubleArray0[1] = 298.6;
      doubleArray0[2] = (double) 3164;
      doubleArray0[3] = (double) 3164;
      doubleArray0[4] = (double) 3299;
      doubleArray0[5] = (double) 3164;
      doubleArray0[6] = 1865.4084;
      doubleArray0[7] = 298.6;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (298.6 <= 3,164)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1363.9767771507438;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 1444.691441;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1,363.977)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1151.976602);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 1030;
      // Undeclared exception!
      try { 
        MathUtils.factorial(1030);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      short short0 = MathUtils.sign((short)0);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 17;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      int int0 = 781;
      intArray0[4] = 781;
      intArray0[5] = 0;
      intArray0[6] = 11;
      intArray0[7] = (int) (short)0;
      intArray0[8] = (int) (short)0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.indicator((double) 0);
      int int2 = MathUtils.pow(0, 17);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 63);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 63
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      try { 
        MathUtils.pow((-3067L), (-3067L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,067^-3,067)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = MathUtils.pow(0, 385);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2211.5272918);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0952233225107193;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1165.6;
      doubleArray1[2] = (-2211.5272918);
      doubleArray1[3] = (-2211.5272918);
      doubleArray1[4] = 1522.621576321;
      doubleArray1[5] = (-2211.5272918);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      int int0 = MathUtils.gcd(295, 0);
      double double1 = MathUtils.log(1165.6, 295);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1411));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,411
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = MathUtils.compareTo(1374.027046883, 1374.027046883, 1374.027046883);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (-3243.28647268636), 0.0);
      float float0 = MathUtils.indicator(1395.501F);
      float float1 = MathUtils.sign(1395.501F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.round((-1270.131), 2807);
      int int0 = MathUtils.gcd(2807, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2807;
      intArray0[1] = 2807;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2807;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 2807;
      intArray0[8] = 2807;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = MathUtils.round(10.0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = 10.0;
      doubleArray0[4] = 10.0;
      doubleArray0[5] = 10.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 10.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 1523.85;
      doubleArray1[3] = 10.0;
      doubleArray1[4] = 3.141592653589793;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = 10.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-1049), (-1975));
      int int1 = MathUtils.subAndCheck(0, 926);
      int int2 = MathUtils.gcd((-1975), 15);
      int int3 = MathUtils.hash(1182.905195968641);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-926);
      doubleArray0[1] = (double) (-1975);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 926;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 926;
      doubleArray0[6] = (double) (-1049);
      doubleArray0[7] = (double) (-1049);
      doubleArray0[8] = (double) (-1423745859);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 32;
      int int1 = MathUtils.subAndCheck((-3977), 32);
      long long0 = MathUtils.gcd(0L, (-814L));
      long long1 = MathUtils.mulAndCheck((-1265L), (-2051L));
      try { 
        MathUtils.pow(200, (-2754L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (200^-2,754)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = (-2136L);
      long long1 = MathUtils.pow((-2136L), 2819561105158720014L);
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 139.66157958543;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.356194490192345;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3903.05599222458;
      doubleArray0[1] = (-225.51417213616133);
      doubleArray0[2] = 869.4515861846104;
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.subAndCheck(1945, 1945);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = (-2953L);
      int int0 = (-1659);
      try { 
        MathUtils.pow((-2953L), (-1659));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,953^-1,659)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 7.0;
      doubleArray0[3] = (-226.40362862201474);
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd(87178291200L, 87178291200L);
      double double0 = MathUtils.cosh((-226.40362862201474));
      long long1 = MathUtils.sign(87178291200L);
      int int0 = MathUtils.compareTo(87178291200L, 0.0, (-3159.0));
      int int1 = MathUtils.pow((-1000), 1L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 7.0);
      boolean boolean1 = MathUtils.equals(0.0, (double) (-1000));
      int int2 = MathUtils.pow((-1000), 0L);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      short short0 = MathUtils.indicator((short)81);
      long long0 = MathUtils.pow((-1708L), 4499201580859392L);
      long long1 = MathUtils.subAndCheck(6402373705728000L, (-25443L));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.2958646899018938E-9;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.2958646899018938E-9);
      double double0 = MathUtils.log(1.2958646899018938E-9, 1.2958646899018938E-9);
      float float0 = MathUtils.round(0.0F, 5356);
      double double1 = MathUtils.factorialDouble(195);
      boolean boolean0 = MathUtils.equals(1.0, (-2229.78676), 3498.448);
      double double2 = MathUtils.sinh((-2336.0));
      double double3 = MathUtils.safeNorm(doubleArray1);
      int int0 = MathUtils.lcm((-2704), (-2704));
      MathUtils.checkOrder(doubleArray1);
      float float1 = MathUtils.round(4418.366F, 2704);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long long0 = MathUtils.sign(120L);
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      long long1 = MathUtils.sign((-147L));
      int int1 = MathUtils.gcd((-2138), (-400));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, (-139L));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      MathUtils.checkOrder(doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-139L);
      double double0 = MathUtils.distance(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2153), (-2757));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,153
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.round(2539.176F, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 2326.21, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = MathUtils.cosh(3.141592653589793);
      int int0 = MathUtils.addAndCheck(0, 0);
      long long0 = MathUtils.factorial(0);
      double double1 = MathUtils.round((double) 0, 0);
      double double2 = MathUtils.log(0, 0);
      double double3 = MathUtils.normalizeAngle(1L, (-129.78264121112022));
      double[] doubleArray0 = new double[0];
      double double4 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double5 = MathUtils.factorialDouble(0);
      double double6 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      double double7 = MathUtils.log((-129.78264121112022), 0.0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-527.895536), (-527.895536));
      int int0 = (-3086);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-3086));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,086
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 5443);
      int int1 = MathUtils.pow(5443, 0);
      boolean boolean0 = MathUtils.equals(0.0, 1914.28);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftRight(0);
      BigInteger bigInteger2 = bigInteger0.flipBit(7);
      BigInteger bigInteger3 = bigInteger0.shiftLeft((-1449));
      int int2 = bigInteger0.intValue();
      double double0 = bigInteger0.doubleValue();
      String string0 = bigInteger0.toString(0);
      String string1 = bigInteger0.toString();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.pow(929L, 28);
      double double1 = MathUtils.factorialDouble(0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1449);
      intArray0[1] = 0;
      double double2 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)7);
      short short0 = MathUtils.indicator((short)47);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = (-489);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-489), (-489));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -489, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(0, (long) 0);
      int int2 = MathUtils.addAndCheck((-2666), 1);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, (double) 1);
      long long0 = MathUtils.indicator((long) (-2665));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2666);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-2666);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.factorialLog(1);
      int int3 = MathUtils.mulAndCheck(0, 1);
      double double1 = MathUtils.cosh(0.0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = MathUtils.hash(1.2958646899018938E-9);
      float float0 = MathUtils.indicator((-1052.816F));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-443));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -443
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float float0 = MathUtils.round((-1441.0F), 2110);
      double double0 = MathUtils.binomialCoefficientLog(8, 8);
      long long0 = MathUtils.lcm(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(1.0F, 195, 148);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 148, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2552.0324717, 699.0);
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.cosh(2552.0324717);
      boolean boolean1 = MathUtils.equals(0.0, (double) (byte)0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 1554.914;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.sign((double) 1);
      int int1 = MathUtils.sign(1);
      double double2 = MathUtils.log(0.0, 1.1430250008909141E-8);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.scalb(1.0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double double2 = MathUtils.safeNorm(doubleArray0);
      double double3 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = MathUtils.sign(0L);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(52);
      double double1 = MathUtils.binomialCoefficientDouble(52, 0);
      int int0 = MathUtils.indicator(18);
      short short0 = MathUtils.sign((short)20);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.sign((long) 1);
      float float0 = MathUtils.sign((float) (short)20);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1729));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,729
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 621.883;
      doubleArray0[1] = 1.0E-6;
      doubleArray0[2] = 959.86331416081;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1478, 1478);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 1478, (double) 1478, (-1491));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      long long0 = MathUtils.binomialCoefficient(2623, (short)0);
      int int0 = MathUtils.sign((int) (short)0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-693), (-693));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = MathUtils.pow(1940L, 0L);
      long long1 = MathUtils.addAndCheck(0L, 1L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, 1441.5966);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1940L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 1940L;
      doubleArray0[6] = (double) 0L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,940 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 52;
      int int1 = MathUtils.gcd(52, 98);
      int int2 = 0;
      double double0 = MathUtils.factorialDouble(0);
      int int3 = MathUtils.hash(0.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = MathUtils.pow(5648769086999809661L, 12);
      float float0 = MathUtils.indicator(0.0F);
      int[] intArray0 = new int[4];
      intArray0[0] = 12;
      intArray0[1] = 12;
      intArray0[2] = 12;
      intArray0[3] = 12;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.pow(94, 0L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 94;
      doubleArray0[1] = (double) 12;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      double double0 = 672.932261;
      int int0 = (-76);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 672.932261, (-76));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = MathUtils.compareTo(1685.84551944099, 1685.84551944099, 423.1);
      long long0 = MathUtils.lcm(962L, 0L);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)62);
      long long0 = MathUtils.pow((long) (byte)62, (int) (byte)62);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 66);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 604.0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2542;
      intArray0[1] = 0;
      intArray0[2] = (-3401);
      intArray0[3] = 5;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = MathUtils.pow(1L, 1);
      int int0 = MathUtils.pow(1, 2197);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int1 = bigInteger0.getLowestSetBit();
      long long1 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1L);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(20);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = MathUtils.pow(121645100408832000L, 0);
      double double0 = MathUtils.log((-0.1666666567325592), 0.0);
      double double1 = MathUtils.indicator((-588.302593761106));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      byte byte0 = MathUtils.sign((byte)66);
      long long1 = MathUtils.gcd((-2658L), (long) (byte)1);
      double double2 = MathUtils.factorialLog(0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0, 1.2393345855018391E-8);
      long long2 = MathUtils.pow((long) 0, 0);
      int int0 = MathUtils.pow(0, 121645100408832000L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1056L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 3390L);
      int int0 = MathUtils.hash((double) 3390L);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-0.1428571423679182);
      doubleArray0[6] = (-853.11711625);
      doubleArray0[7] = 516.1266327461;
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 8
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN(213.02384651383, 213.02384651383, 213.02384651383);
      long long0 = MathUtils.lcm((-1733L), (-567L));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-567L);
      doubleArray0[1] = (double) 982611L;
      doubleArray0[2] = (double) (-1733L);
      doubleArray0[3] = (double) (-1733L);
      doubleArray0[4] = (double) (-567L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 982611.0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(507);
      int int0 = MathUtils.mulAndCheck(0, 0);
      double double1 = MathUtils.sinh(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 0;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = (-1401L);
      long long1 = MathUtils.subAndCheck((-1401L), (long) 0);
      byte byte0 = MathUtils.indicator((byte)28);
      double double3 = MathUtils.scalb(0.0, (-928));
      double double4 = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double double0 = MathUtils.scalb(1.494140625, 0);
      long long0 = MathUtils.gcd((long) 0, (-98L));
      double double1 = MathUtils.round(1848.01728, 0, 0);
      int int0 = MathUtils.indicator(0);
      double double2 = MathUtils.round((double) 0, 0);
      long long1 = MathUtils.subAndCheck(374L, (-3593L));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = (-214);
      int int1 = (-1775);
      try { 
        MathUtils.pow((-214), (-1775));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-214^-1,775)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = MathUtils.gcd(0, 0);
      long long0 = MathUtils.pow(1825L, 0);
      int int3 = 61;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 61);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 61
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      short short0 = MathUtils.sign((short)81);
      double double1 = MathUtils.sign(0.0);
      int int0 = MathUtils.compareTo(0.0, 1.2393345855018391E-8, (-529.3260264932135));
      BigInteger bigInteger0 = BigInteger.ONE;
      long long0 = bigInteger0.longValueExact();
      boolean boolean0 = bigInteger0.isProbablePrime((short)81);
      String string0 = bigInteger0.toString(27);
      int int1 = bigInteger0.intValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1671L);
      long long1 = MathUtils.indicator((-1790L));
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = MathUtils.pow(0, 9223372036854775807L);
      double double0 = MathUtils.factorialLog(0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1408);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = (-1230);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 2193.267922, (-1230));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(2934, 233);
      double double1 = MathUtils.normalizeAngle(0.0, 1.0);
      long long0 = MathUtils.lcm((long) 233, (long) 233);
      long long1 = MathUtils.lcm((long) 2934, (long) 233);
      int int0 = MathUtils.addAndCheck(175, 651);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.19999998807907104, 2536.4237257867258, (double) 683622L);
      int int1 = MathUtils.hash(21.0);
      int int2 = MathUtils.lcm(233, 175);
      boolean boolean1 = MathUtils.equals(2.3841857910019882E-8, (double) 683622L, 0.0);
      int int3 = MathUtils.sign(40775);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 40775;
      intArray0[2] = 40775;
      intArray0[3] = 651;
      intArray0[4] = 233;
      double double2 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 40775);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 233;
      doubleArray0[2] = 0.19999998807907104;
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = (-3260);
      float float1 = MathUtils.round(0.0F, (-3260));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-3260);
      doubleArray0[2] = (double) (-3260);
      doubleArray0[3] = (double) (-3260);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -3,260)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = MathUtils.log(0.5, 0.5);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-217));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -217
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
