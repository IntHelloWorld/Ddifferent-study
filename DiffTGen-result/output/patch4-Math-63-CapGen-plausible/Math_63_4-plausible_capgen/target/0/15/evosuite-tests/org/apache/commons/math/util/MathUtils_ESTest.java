/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:39:26 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = MathUtils.EPSILON;
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.factorialLog(0);
      float float0 = MathUtils.round((-1078.29F), 0);
      int[] intArray0 = new int[0];
      double double2 = MathUtils.distance(intArray0, intArray0);
      float float1 = MathUtils.round((-1078.0F), 0, 0);
      double double3 = MathUtils.normalizeAngle(1177.60924527439, 2434.88555189);
      int int0 = MathUtils.addAndCheck(2, 0);
      long long0 = MathUtils.factorial(0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 8;
      intArray0[1] = (-2912);
      intArray0[2] = (-497);
      intArray0[3] = (-1744);
      intArray0[4] = 512;
      intArray0[5] = (-2110);
      intArray0[6] = (-1709);
      intArray0[7] = (-4690);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.sign((float) (-1744));
      long long0 = MathUtils.lcm((-3448L), 0L);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(2298, 2298);
      int int1 = MathUtils.pow(0, 0);
      float float0 = MathUtils.round(2641.96F, 0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((-1117.1), (-1244.29366), (double) 0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      int int0 = MathUtils.compareTo(249.47632, 215.5286854246, 0.0);
      int int1 = 207;
      int int2 = MathUtils.sign(207);
      int int3 = (-420);
      try { 
        MathUtils.pow(1, (-420));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-420)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1460.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1460.0;
      doubleArray1[1] = 1460.0;
      doubleArray1[2] = 1460.0;
      doubleArray1[3] = 1460.0;
      doubleArray1[4] = 1460.0;
      doubleArray1[5] = 1460.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1460.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.pow((-32L), 0);
      int int1 = MathUtils.indicator(0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (-32L);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      int int2 = MathUtils.hash(doubleArray0);
      int int3 = 0;
      int int4 = (-558);
      int int5 = MathUtils.mulAndCheck(0, (-558));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (1 <= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-2876L), 0L);
      double double0 = MathUtils.round((-276.68339733), 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.cosh(1481.22429238008);
      double double2 = MathUtils.log(0.49999999999999994, Double.POSITIVE_INFINITY);
      double double3 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.round((float) (-2876L), 0);
      float float1 = MathUtils.sign((float) (-2876L));
      float float2 = MathUtils.round(0.0F, 0);
      int int0 = MathUtils.gcd(0, 0);
      float float3 = MathUtils.sign((float) 0L);
      boolean boolean1 = MathUtils.equals((double) (-1.0F), (-793.1809822), Double.NaN);
      float float4 = MathUtils.round(Float.NaN, 0);
      int int1 = MathUtils.hash(474.0);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = MathUtils.factorialLog(148);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.bitCount();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.max(bigInteger0);
      BigInteger bigInteger3 = bigInteger1.max(bigInteger0);
      BigInteger bigInteger4 = bigInteger1.gcd(bigInteger0);
      int int1 = bigInteger1.signum();
      BigInteger bigInteger5 = bigInteger0.flipBit(84);
      BigInteger bigInteger6 = bigInteger0.divide(bigInteger1);
      long long0 = 1619L;
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, 1619L);
      double double1 = (-1476.7397);
      int int2 = MathUtils.compareTo(0.09090909090909091, (-2527.7138444989555), (-1476.7397));
      double double2 = MathUtils.sinh((-1040.566088122));
      short short0 = MathUtils.sign((short)2731);
      try { 
        MathUtils.pow(bigInteger5, (-2974L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (19,342,813,113,834,066,795,298,826^-2,974)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short short0 = MathUtils.sign((short)82);
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(0, (-1162));
      double double1 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) (short)82, 888);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 3510.230511215481, 0.0);
      long long0 = MathUtils.mulAndCheck((long) (-1), 0L);
      double double0 = MathUtils.round((double) (-1), 0);
      short short0 = MathUtils.indicator((short)12);
      short short1 = MathUtils.indicator((short)1);
      double double1 = MathUtils.indicator(0.0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (int) (short)1;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (-1758);
      intArray0[5] = (-1);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.addAndCheck(0, 151);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 2784);
      float float1 = MathUtils.indicator(0.0F);
      double double0 = MathUtils.sinh(Double.NaN);
      boolean boolean0 = MathUtils.equals((-637.3696032815), (double) 2784, 2784);
      short short0 = MathUtils.sign((short) (-3252));
      double double1 = MathUtils.normalizeAngle(114.3, 0.0);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = 2784;
      intArray0[2] = (int) (short) (-3252);
      intArray0[3] = 2784;
      intArray0[4] = (int) (short) (-1);
      intArray0[5] = (int) (short) (-1);
      intArray0[6] = (int) (short) (-3252);
      intArray0[7] = (int) (short) (-1);
      intArray0[8] = 2784;
      double double2 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.5;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      int int1 = MathUtils.hash(doubleArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)12;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = MathUtils.round((-3089.22), 2598, 0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-2713));
      double double0 = MathUtils.factorialDouble(149);
      int int0 = MathUtils.addAndCheck((-553), (int) (short) (-2713));
      double double1 = MathUtils.sign((-205.09692702));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-553);
      doubleArray0[1] = (double) (short) (-1);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1808.96053433576);
      double double2 = MathUtils.normalizeAngle(0.0, 0.07692307692307693);
      boolean boolean0 = MathUtils.equals(0.2, (double) (-3266), (-553.0));
      double double3 = MathUtils.cosh(0.2);
      double double4 = MathUtils.sinh((-3266));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = bigInteger0.not();
      BigInteger bigInteger3 = bigInteger2.min(bigInteger0);
      BigInteger bigInteger4 = bigInteger0.gcd(bigInteger2);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 2969);
      long long0 = MathUtils.mulAndCheck(894L, (-4708L));
      boolean boolean1 = MathUtils.equals(6.283185307179586, (-1702.92658979171));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      int int0 = MathUtils.hash((double[]) null);
      try { 
        MathUtils.pow(116L, (-2610L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (116^-2,610)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(10, 10);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 72.0, 72.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte) (-117);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.mod(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      int[] intArray0 = new int[8];
      intArray0[0] = 144;
      intArray0[1] = (-97);
      intArray0[2] = 1814;
      intArray0[3] = 0;
      intArray0[4] = 3869;
      intArray0[5] = 23;
      intArray0[6] = 0;
      intArray0[7] = (-660);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double1 = MathUtils.factorialDouble(0);
      int int1 = MathUtils.pow((-2110), (long) 0);
      long long0 = MathUtils.gcd((long) 3869, (long) 1);
      int int2 = MathUtils.addAndCheck(2749, 8);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      int int0 = MathUtils.compareTo(0.0, 1.0F, (-2552.329761503785));
      long long0 = MathUtils.lcm(0L, 4499201580859392L);
      int int1 = MathUtils.addAndCheck((-1), (-1));
      double double0 = MathUtils.log(0L, 0.0);
      short short0 = MathUtils.sign((short) (-569));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2552.329761503785);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (-4377.880357718);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2338.0);
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray0, 0.0);
      long long1 = MathUtils.binomialCoefficient(18, (-1));
      boolean boolean0 = MathUtils.equalsIncludingNaN(142.79, 0.0);
      double double1 = MathUtils.sinh(0.0);
      short short1 = MathUtils.sign((short) (-569));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 78.4318938877;
      doubleArray0[3] = 0.49999999999999994;
      doubleArray0[4] = 5.0;
      doubleArray0[5] = (-3.940510424527919E-20);
      doubleArray0[6] = 3111.70912110207;
      doubleArray0[7] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.sinh(0.49999999999999994);
      double double1 = MathUtils.normalizeAngle((-3351.89465791), 0.0);
      long long0 = MathUtils.mulAndCheck((long) (-1047342551), (long) (-1047342551));
      int int1 = MathUtils.pow((-1047342551), 16);
      boolean boolean0 = MathUtils.equals(3111.70912110207, 0.0);
      double double2 = MathUtils.log(0.49999999999999994, 4044.536191784);
      double double3 = MathUtils.round(0.0, 0, 0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1660.0);
      doubleArray0[1] = (-2370.23204);
      doubleArray0[2] = (-1293.51503);
      doubleArray0[3] = 1641.8;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2370.23204);
      doubleArray1[1] = (-1660.0);
      doubleArray1[2] = (-2370.23204);
      doubleArray1[3] = (-2370.23204);
      doubleArray1[4] = (-1660.0);
      doubleArray1[5] = 1641.8;
      doubleArray1[6] = 1641.8;
      doubleArray1[7] = (-2370.23204);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = MathUtils.indicator(1521);
      int int1 = MathUtils.pow(0, 1);
      int int2 = MathUtils.compareTo(1, 0, 1521);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1521;
      doubleArray0[1] = (double) 1521;
      doubleArray0[2] = (double) 1521;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.factorial(4);
      int int3 = MathUtils.hash(0.0);
      boolean boolean0 = MathUtils.equals(2.0, 2.0);
      int int4 = MathUtils.pow(56, 1694L);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 4, 0, 56);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1904.99532957;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.08713622391223907;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1489.8684061;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd((-1788), (-1788));
      boolean boolean1 = MathUtils.equalsIncludingNaN(2547.28689287, 626.52);
      long long0 = MathUtils.addAndCheck((long) (-1788), 0L);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 626.52;
      doubleArray1[1] = (double) 1788;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1489.8684061;
      doubleArray1[4] = 2547.28689287;
      doubleArray1[5] = (double) (-1788L);
      doubleArray1[6] = (double) 1788;
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = MathUtils.pow(6227020800L, 2425);
      int[] intArray0 = new int[6];
      intArray0[0] = 2425;
      intArray0[1] = 2425;
      intArray0[2] = 190;
      intArray0[3] = 190;
      intArray0[4] = 2425;
      intArray0[5] = 2425;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.gcd(0, 0);
      double double1 = MathUtils.binomialCoefficientLog(190, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2425;
      MathUtils.checkOrder(doubleArray0);
      double double2 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 703.05940071791;
      doubleArray0[2] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.sign(1712.8583F);
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.141592653589793, 0.016);
      double double1 = MathUtils.scalb(173.06773921, (-1926));
      int int1 = MathUtils.indicator((-2397));
      float float1 = MathUtils.round(1.0F, (-1), 0);
      double double2 = MathUtils.normalizeAngle(Double.NEGATIVE_INFINITY, 0.0);
      long long0 = MathUtils.gcd((long) (-1926), 0L);
      int int2 = MathUtils.pow((-472), 2947);
      int int3 = MathUtils.pow((-472), 0);
      int int4 = MathUtils.gcd(176397700, 0);
      float float2 = MathUtils.indicator(10.0F);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 1646;
      int int1 = MathUtils.gcd(1646, 0);
      // Undeclared exception!
      try { 
        MathUtils.round(486.0F, (-350), (-350));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -350, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(2207L, 2207L);
      double double0 = MathUtils.sign((double) 0L);
      try { 
        MathUtils.pow((-201), (-4267615245585081135L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-201^-4,267,615,245,585,081,135)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1043.543656056715;
      doubleArray0[2] = 3510.3004;
      doubleArray0[3] = 9.0;
      doubleArray0[4] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1,043.544)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 3);
      long long0 = MathUtils.pow((-1627L), (long) 3);
      boolean boolean1 = MathUtils.equals(0.0, 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-4306878883L);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long1 = MathUtils.pow((-1627L), (long) 3);
      boolean boolean2 = MathUtils.equals(0.0, 0.0, 3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.intValue();
      int int1 = 0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-31);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.modInverse(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.shiftRight(0);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = 161L;
      long long1 = MathUtils.addAndCheck(161L, 161L);
      int int2 = (-1786);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1786));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,786
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2.0;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm((-3309L), (-3309L));
      byte byte0 = (byte)31;
      byte byte1 = MathUtils.indicator((byte)31);
      long long1 = MathUtils.sign((long) (byte)1);
      int int0 = 3262;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((byte)1, 3262);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 3,262
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = (-801);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-801));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -801
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      int int0 = 0;
      double double0 = MathUtils.round(193.158, 0, 0);
      short short0 = (short)31;
      short short1 = MathUtils.sign((short)31);
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = MathUtils.gcd(1L, 1L);
      float float0 = 0.0F;
      float float1 = MathUtils.sign(0.0F);
      double double0 = 3.834E-20;
      double double1 = (-1942.7);
      boolean boolean0 = MathUtils.equals(3.834E-20, (double) 0.0F, (-1942.7));
      int int0 = 399;
      int int1 = MathUtils.mulAndCheck(399, 399);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 399);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      short short0 = (short) (-1642);
      short short1 = MathUtils.indicator((short) (-1642));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-1642);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1642);
      doubleArray0[3] = (double) (short) (-1642);
      doubleArray0[4] = (double) (short) (-1);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = 1030;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((short) (-1642), 1030);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,642, k = 1,030
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 1368);
      boolean boolean1 = MathUtils.equals((-1360.41567592832), 0.0);
      int[] intArray0 = new int[6];
      intArray0[0] = 96;
      intArray0[1] = 1368;
      intArray0[2] = 1368;
      intArray0[3] = 1368;
      intArray0[4] = 1368;
      intArray0[5] = 1368;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      byte byte0 = MathUtils.indicator((byte) (-59));
      double double0 = MathUtils.indicator((-892.165564651208));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-59);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = MathUtils.pow(1433L, 187);
      int int0 = MathUtils.indicator(52);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 187;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 52;
      doubleArray0[4] = (double) 187;
      doubleArray0[5] = (double) 1;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.mulAndCheck(187, 21);
      boolean boolean0 = MathUtils.equals(187.0, Double.NaN);
      long long1 = MathUtils.indicator(1433L);
      double double1 = MathUtils.sinh(730.88448568719);
      double double2 = MathUtils.binomialCoefficientLog(1, (-3689));
      boolean boolean1 = MathUtils.equals(1148.0945, 269.52736410242284, 3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      long long0 = MathUtils.addAndCheck((long) 0, 4398046511103L);
      byte byte0 = MathUtils.indicator((byte) (-89));
      short short0 = MathUtils.sign((short) (byte) (-1));
      long long1 = MathUtils.mulAndCheck((long) 0, 4398046511103L);
      double double0 = MathUtils.normalizeAngle((-1420.263032637399), 0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-0.26315321481251885);
      doubleArray0[2] = (-1420.263032637399);
      doubleArray0[3] = (-0.26315321481251885);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = (-0.26315321481251885);
      doubleArray0[7] = (double) (short) (-1);
      doubleArray0[8] = (double) 4398046511103L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -0.263)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      int int0 = 2880;
      int int1 = MathUtils.gcd(0, 2880);
      int int2 = MathUtils.addAndCheck((-2525), (-54));
      try { 
        MathUtils.pow((long) 2880, (-534));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,880^-534)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = MathUtils.sign((-1687));
      double double0 = MathUtils.scalb(0.0, (-1687));
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1687);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1687);
      intArray0[7] = (-1);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((double) (-1), (double) (-1), (double) (-1));
      double double1 = MathUtils.log(0.0, (-1));
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-1), 67, 15);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathUtils.indicator(2310.67920691845);
      long long0 = (-1262L);
      long long1 = MathUtils.lcm((-1262L), (-1746L));
      int int0 = (-3275);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-3275));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,275
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = MathUtils.gcd(1289, 1289);
      int int1 = MathUtils.hash((double) 1289);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1800, 1289);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = MathUtils.sign(1.0F);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)67);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)67;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)67;
      intArray0[4] = (int) (short)67;
      intArray0[5] = (int) (short)67;
      intArray0[6] = (int) (short)67;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.normalizeAngle(0.0, 67);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 366.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-723.87472);
      doubleArray0[3] = (-10.4);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.lcm(0, 150);
      int int1 = MathUtils.lcm(0, (-1837));
      long long0 = MathUtils.lcm(2306L, 2306L);
      double double0 = MathUtils.normalizeAngle((-518.3215888), 0.0);
      int int2 = MathUtils.lcm((-1837), (-78));
      long long1 = MathUtils.subAndCheck((long) (-78), 2626L);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = MathUtils.hash(4773.3613);
      double double0 = MathUtils.sign((-1.0));
      short short0 = MathUtils.sign((short) (-903));
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1050313047, 3382, (int) (short) (-903));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -903, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-723.87472);
      doubleArray0[3] = (-10.4);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.lcm(0, 150);
      int int1 = MathUtils.lcm(0, (-1837));
      long long0 = MathUtils.lcm(2306L, 2306L);
      double double0 = MathUtils.normalizeAngle((-518.3215888), 0.0);
      int int2 = MathUtils.lcm((-1837), (-78));
      long long1 = MathUtils.subAndCheck((long) (-78), 2626L);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      double double0 = MathUtils.round(0.10526403784751892, 16, 0);
      int int0 = MathUtils.compareTo(992.3786529172108, 509.4812527394, 992.3786529172108);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 16;
      MathUtils.checkOrder(doubleArray0);
      double double1 = MathUtils.sign(8.251545029714408E-9);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.lcm(13, 0);
      int int2 = MathUtils.hash(doubleArray0);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 13;
      doubleArray1[2] = 0.10526403784751892;
      doubleArray1[3] = 441.1946;
      double double3 = MathUtils.safeNorm(doubleArray1);
      long long0 = MathUtils.indicator((-1433L));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.addAndCheck(0L, 0L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.mulAndCheck(2562, 2562);
      int int1 = (-1623);
      double double1 = MathUtils.round((double) 6563844, (-1623));
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int2 = 73;
      int int3 = 1561;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 73, 1561);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)74);
      int int0 = MathUtils.pow((int) (byte)1, (int) (byte)1);
      int int1 = MathUtils.lcm((int) (byte)1, 1);
      double double0 = MathUtils.sign((double) 1);
      int int2 = 119;
      float float0 = MathUtils.round(818.4003F, 119);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 818.4003F;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) (byte)74;
      doubleArray0[5] = 1.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (1 <= 818.4)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = MathUtils.sign(3201);
      int int1 = MathUtils.hash((double) 3201);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3201;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 3201;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1084817920;
      doubleArray0[7] = (double) 1;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1084817920);
      int int2 = MathUtils.sign(1084817920);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3018.626874033933;
      doubleArray0[1] = (-3047.9413);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2731.0);
      doubleArray0[4] = (-109.0653826705);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.1102230246251565E-16;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-0.5);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = MathUtils.hash(2700.217202);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2700.217202;
      doubleArray0[1] = 2700.217202;
      doubleArray0[2] = 2700.217202;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-3174);
      intArray0[1] = 1975297327;
      intArray0[2] = 1975297327;
      intArray0[3] = 1975297327;
      intArray0[4] = 1975297327;
      intArray0[5] = 1975297327;
      intArray0[6] = 1975297327;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float float0 = MathUtils.indicator(1402.4977F);
      float float1 = MathUtils.round(1.0F, 9);
      int[] intArray0 = new int[9];
      intArray0[0] = 9;
      intArray0[1] = 9;
      intArray0[2] = 9;
      intArray0[3] = 9;
      intArray0[4] = 9;
      intArray0[5] = 9;
      intArray0[6] = 9;
      intArray0[7] = 9;
      intArray0[8] = 9;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.gcd(0L, 0L);
      int int0 = MathUtils.subAndCheck(0, 0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = (double) 9;
      doubleArray0[6] = 3122.549908473859;
      doubleArray0[7] = (double) 9;
      doubleArray0[8] = (double) 1402.4977F;
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.834E-20, (-2170.8205175), 0.6366197723675814);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.hash((-2810.566067878399));
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      long long0 = MathUtils.gcd((long) 0, (long) 0);
      float float0 = MathUtils.round((-667.56F), 319018805);
      int int1 = MathUtils.compareTo((-918.0), 0.074, (-2170.8205175));
      int int2 = (-599);
      long long1 = (-7278142539171889152L);
      try { 
        MathUtils.pow((-599), (-7278142539171889152L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-599^-7,278,142,539,171,889,152)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = 1650L;
      long long1 = MathUtils.lcm(1650L, 1650L);
      int int0 = 3500;
      int int1 = 2107;
      double double0 = MathUtils.binomialCoefficientLog(3500, 2107);
      int int2 = (-2833);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-2833), (-2833));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,833
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = 0;
      float float0 = MathUtils.round(1.0F, 0, 0);
      double double0 = MathUtils.log(2.0F, 0.0);
      float float1 = MathUtils.sign(0.0F);
      double double1 = MathUtils.indicator(0.0);
      int int3 = MathUtils.pow(0, 0);
      byte byte0 = MathUtils.indicator((byte) (-53));
      int int4 = 0;
      double double2 = MathUtils.scalb((-337.9231), 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      int int5 = bigInteger0.compareTo(bigInteger1);
      // Undeclared exception!
      try { 
        bigInteger0.divide(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      int int0 = bigInteger0.bitCount();
      byte byte0 = bigInteger0.byteValueExact();
      int int1 = bigInteger1.compareTo(bigInteger0);
      int int2 = bigInteger1.intValue();
      BigInteger bigInteger2 = bigInteger1.divide(bigInteger0);
      BigInteger bigInteger3 = bigInteger1.nextProbablePrime();
      int int3 = bigInteger1.intValue();
      BigInteger bigInteger4 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger5 = bigInteger0.shiftRight(65);
      int int4 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 0);
      String string0 = bigInteger0.toString(0);
      int int5 = MathUtils.pow(1, 10);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 0;
      BigInteger bigInteger7 = bigInteger1.add(bigInteger3);
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 10;
      intArray0[5] = 10;
      intArray0[6] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.sign(3119.0203F);
      double double1 = MathUtils.log(6.283185307179586, 1L);
      long long1 = MathUtils.subAndCheck((long) 10, 0L);
      long long2 = MathUtils.subAndCheck((-3171L), (-3197L));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float float0 = MathUtils.indicator(235.321F);
      double double0 = MathUtils.indicator((double) 1.0F);
      byte byte0 = MathUtils.indicator((byte) (-89));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.16666666666666666;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.compareTo((-823.83666), 921.0556878, 0.0);
      float float0 = MathUtils.sign((float) 1787822111);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = MathUtils.sign(5040L);
      long long1 = MathUtils.mulAndCheck(249L, 5040L);
      float float0 = MathUtils.indicator((-1753.25F));
      float float1 = MathUtils.round((-3864.685F), 253, 0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0);
      long long0 = MathUtils.addAndCheck(2641L, (-264L));
      long long1 = MathUtils.addAndCheck(0L, 1197L);
      long long2 = MathUtils.subAndCheck(4871L, 1197L);
      double double0 = MathUtils.scalb(1197L, 713);
      int int0 = MathUtils.pow(0, 0L);
      long long3 = MathUtils.pow((long) 1, (long) 713);
      byte byte0 = MathUtils.sign((byte)12);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (int) (byte)12);
      BigInteger bigInteger3 = bigInteger2.gcd(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger2, 0L);
      int int1 = MathUtils.subAndCheck(1, 1);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1.0, (double) 0.0F, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      long long0 = MathUtils.pow(0L, 9154082963658192752L);
      long long1 = MathUtils.sign(9154082963658192752L);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1413.2531612, 1413.2531612, 660);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger0.and(bigInteger2);
      BigInteger bigInteger4 = bigInteger0.subtract(bigInteger2);
      boolean boolean0 = bigInteger0.equals(bigInteger3);
      BigInteger bigInteger5 = bigInteger2.pow(1429);
      BigInteger bigInteger6 = bigInteger0.andNot(bigInteger2);
      BigInteger bigInteger7 = bigInteger0.add(bigInteger2);
      BigInteger bigInteger8 = MathUtils.pow(bigInteger0, 1942);
      long long0 = 1219L;
      long long1 = MathUtils.gcd(1219L, 4046L);
      double double0 = MathUtils.sign(2570.8960828266613);
      double double1 = MathUtils.cosh(1429);
      long long2 = MathUtils.lcm((long) 1429, 1311L);
      try { 
        MathUtils.pow(bigInteger7, (-864));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (11^-864)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.negate();
      BigInteger bigInteger3 = bigInteger0.subtract(bigInteger2);
      int int0 = 180;
      BigInteger bigInteger4 = bigInteger1.or(bigInteger0);
      String string0 = bigInteger1.toString(180);
      BigInteger bigInteger5 = bigInteger0.max(bigInteger1);
      int int1 = (-5658);
      try { 
        MathUtils.pow(bigInteger0, (-5658));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-5,658)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = MathUtils.lcm(2868L, 2868L);
      float float0 = MathUtils.indicator(1821.1393F);
      int[] intArray0 = new int[5];
      intArray0[0] = 231;
      intArray0[1] = 66;
      intArray0[2] = 10;
      intArray0[3] = (-361);
      intArray0[4] = 10;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = (-1892);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1892));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,892
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = (-2666);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2666), (-2666));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,666
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = 0.0;
      int int0 = (-86);
      int int1 = (-460);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (-86), (-460));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = MathUtils.log((-2738.271786), 0.0);
      double double1 = MathUtils.sign(1675.68);
      double double2 = MathUtils.factorialLog(360);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-2738.271786);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.subAndCheck(360, 360);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 360, 101.571292, 1675.68);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2738.271786);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 360;
      doubleArray1[3] = 1762.8596733524096;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = 1762.8596733524096;
      doubleArray1[6] = 0.0;
      double double3 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathUtils.sign(969.0173);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.mulAndCheck(0, 0);
      int int2 = 0;
      int int3 = (-3749);
      int int4 = MathUtils.addAndCheck(0, (-3749));
      long long0 = MathUtils.sign((long) (-3749));
      int int5 = MathUtils.indicator(3118);
      int int6 = MathUtils.subAndCheck(0, 0);
      int int7 = MathUtils.mulAndCheck((-3749), 1);
      int int8 = MathUtils.pow(0, 0);
      int int9 = MathUtils.pow(0, (long) 1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3749);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-813.8429967757563);
      doubleArray1[1] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 1);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.factorial(0);
      boolean boolean0 = MathUtils.equals((double) 0, 607.723114308428);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = (-954);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-954));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -954
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1773.7084662035;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 509.679708178;
      doubleArray1[3] = (-20.579597971773);
      doubleArray1[4] = 4.455505956692757;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-3479.3909861824);
      doubleArray1[7] = 6529.4123801;
      doubleArray1[8] = (-4708.810436);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2971L));
      BigInteger bigInteger0 = new BigInteger(995, mockRandom0);
      try { 
        MathUtils.pow(bigInteger0, (-2971L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (9,745,314,015,938,014,549,704,937,926,348,362,011,561,211,396,727,029,375,671,966,269,388,753,934,796,695,072,950,861,839,690,678,006,740,713,570,824,518,253,755,022,978,806,750,506,892,845,855,997,824,291,888,105,064,635,235,872,697,472,836,886,561,729,849,249,269,472,567,169,249,719,101,948,413,115,895,893,633,016,374,471,021,821,641,997,238,040,576,778,353,791,038,785,627,095,071^-2,971)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 178;
      int int1 = MathUtils.gcd(14, 178);
      int int2 = MathUtils.indicator((-878));
      double double0 = MathUtils.binomialCoefficientLog(178, (-1));
      long long0 = MathUtils.pow((long) 178, 178);
      byte byte0 = MathUtils.sign((byte) (-52));
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (-1);
      intArray0[3] = 2;
      intArray0[4] = (-1);
      intArray0[5] = (int) (byte) (-1);
      intArray0[6] = 178;
      intArray0[7] = (int) (byte) (-1);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-2532L), (-2532L));
      int int0 = (-2924);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2924), (-2924));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,924
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1041;
      intArray0[1] = (-73);
      intArray0[2] = 4143;
      intArray0[3] = 710;
      intArray0[4] = 0;
      intArray0[5] = 31;
      int int0 = 0;
      intArray0[6] = 0;
      intArray0[7] = (-2778);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.sign((double) (-2778));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.binomialCoefficient(1262, 0);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      try { 
        MathUtils.normalizeArray(doubleArray0, 3182.407);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.binomialCoefficient(585, 585);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      float float0 = MathUtils.indicator(1.0F);
      int[] intArray0 = new int[9];
      intArray0[0] = 2559;
      intArray0[1] = 3556;
      intArray0[2] = 4263;
      intArray0[3] = (-3895);
      intArray0[4] = 168;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 241;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.sinh((-1221.02981));
      long long0 = MathUtils.sign((long) 4263);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = MathUtils.indicator(39916800L);
      long long1 = MathUtils.indicator((-139L));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = MathUtils.sign(2047L);
      int int0 = MathUtils.compareTo(2047L, Double.NEGATIVE_INFINITY, 1838.59589911994);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1756, 27);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      short short0 = MathUtils.indicator((short)2476);
      long long0 = 0L;
      long long1 = 0L;
      long long2 = MathUtils.lcm(0L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.factorial((short)2476);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = MathUtils.sign(2047L);
      int int0 = MathUtils.compareTo(2047L, 1L, 1838.59589911994);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1756, 27);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(73, 234);
      short short0 = MathUtils.sign((short)176);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 8;
      int int1 = (-566);
      // Undeclared exception!
      try { 
        MathUtils.round(1553.18F, 8, (-566));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -566, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 84;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 84, 84);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 84, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1492);
      intArray0[1] = 0;
      int int0 = (-2495);
      intArray0[2] = (-2495);
      intArray0[3] = 447;
      intArray0[4] = 1193;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      int int0 = (-1197);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1197), 1825);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,197, k = 1,825
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 2824);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 2,824
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      double double0 = MathUtils.cosh(0.0);
      int int1 = MathUtils.pow(0, 85L);
      long long0 = MathUtils.sign(0L);
      long long1 = MathUtils.pow(595L, 66);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = MathUtils.pow(12, 12);
      int int1 = MathUtils.mulAndCheck(82, 4184);
      int int2 = MathUtils.sign((-251658240));
      double double0 = MathUtils.normalizeAngle((-251658240), (-2222.11692));
      int int3 = MathUtils.mulAndCheck(0, 0);
      long long0 = MathUtils.gcd((long) 4184, (long) (-251658240));
      int int4 = MathUtils.pow(428, 9154082963658192752L);
      int int5 = MathUtils.compareTo((-2431.671290714563), (-2223.404436379671), 1.304E19);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 343088, (double) 0, 4366);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-910.28), (-2223.404436379671));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = 0.0;
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-854.6));
      long long0 = 1922L;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1922L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-675.131), (-675.131), 9);
      int int0 = MathUtils.gcd(9, 9);
      int int1 = MathUtils.pow(9, 9);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.scalb((-1025.5246977), 9);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 722.38939363196;
      doubleArray0[2] = (-675.131);
      doubleArray0[3] = (-675.131);
      doubleArray0[4] = (-525068.6452224);
      doubleArray0[5] = (double) 0;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathUtils.sinh(143.02240489);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 6.498471769042063E61, (-393));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      short short0 = MathUtils.indicator((short)10);
      double double0 = 13.07;
      int int2 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(13.07, (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals(652.058147954, 731.8119660079, 731.8119660079);
      float float0 = MathUtils.sign((-576.0F));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = MathUtils.gcd((-315L), (-315L));
      try { 
        MathUtils.pow(1089L, (-729L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,089^-729)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-1550L), (-1550L));
      double double0 = MathUtils.cosh(2.3841857910019882E-8);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1.0000000000000004, 3894.5, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = MathUtils.pow(45, 3355L);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow(0, 447);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(212.2552467, 212.2552467);
      long long0 = MathUtils.gcd((-1994L), 4294967295L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      long long1 = bigInteger0.longValue();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
      long long2 = MathUtils.addAndCheck(4294967295L, 1L);
      int int0 = MathUtils.subAndCheck((-4946), 2893);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.compareTo(1, 1, 1);
      double double0 = MathUtils.round(3.0, (-4709));
      int int2 = MathUtils.sign((-4709));
      long long0 = MathUtils.binomialCoefficient(202, (-4709));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = MathUtils.round(613.07986926007, (-3495));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-580.9135574930141);
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 426.1369790446107;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.5;
      doubleArray0[7] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      float float0 = MathUtils.round(0.0F, 0);
      int int0 = MathUtils.mulAndCheck(1, 1075);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 2715;
      int int1 = MathUtils.indicator(2715);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2715;
      doubleArray0[1] = 0.625;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,715 >= 0.625)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, (-65));
      int int0 = MathUtils.subAndCheck((-2552), (-65));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      int int0 = MathUtils.gcd((int) (short)0, (int) (short)1);
      float float0 = MathUtils.round((float) (short)1, 1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = (double) (short)1;
      doubleArray0[7] = (double) 1.0F;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float float0 = MathUtils.indicator(3027.0F);
      int int0 = (-1960);
      try { 
        MathUtils.pow((-1960), (long) (-1960));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,960^-1,960)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(5206L, 5206L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 5206L;
      doubleArray0[2] = (double) 5206L;
      doubleArray0[3] = (double) 5206L;
      doubleArray0[4] = (double) 5206L;
      doubleArray0[5] = (double) 5206L;
      doubleArray0[6] = (double) 0L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (5,206 >= 5,206)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = MathUtils.lcm((-2933), (-2933));
      int int1 = (-986);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-986));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -986
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, (-436.1934));
      boolean boolean1 = MathUtils.equals(0.0, Double.NaN, 3314.889594);
      double double1 = MathUtils.factorialLog(202);
      byte byte0 = MathUtils.sign((byte) (-107));
      int int0 = MathUtils.mulAndCheck(202, (-3602));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      byte byte0 = (byte) (-12);
      byte byte1 = MathUtils.sign((byte) (-12));
      try { 
        MathUtils.pow((long) (byte) (-12), (long) (byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-12^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)115);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (byte)115;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      try { 
        MathUtils.pow(105L, (-234));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (105^-234)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1239.0, 1239.0);
      float float0 = MathUtils.sign(0.0F);
      double double0 = MathUtils.factorialDouble(3202);
      double double1 = MathUtils.scalb(3202, 3202);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (double) 3202;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray1);
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      long long0 = MathUtils.sign(0L);
      int int2 = MathUtils.hash(doubleArray0);
      double double3 = MathUtils.binomialCoefficientDouble(1, 0);
      try { 
        MathUtils.normalizeArray(doubleArray1, (-609.7056711206931));
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(231, 231);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.indicator((-2291L));
      double double1 = MathUtils.indicator(0.0);
      int int0 = MathUtils.hash((double) (-1L));
      int[] intArray0 = new int[1];
      intArray0[0] = (-1074790400);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      long long1 = MathUtils.pow((-1L), 0L);
      double double2 = MathUtils.indicator(0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1074790400);
      int int2 = MathUtils.hash(doubleArray0);
      double double3 = MathUtils.sinh(0.0);
      boolean boolean0 = MathUtils.equals(1.0, 682.2043815860052, 624);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = MathUtils.lcm(4509, 4509);
      boolean boolean0 = MathUtils.equals((double) 4509, (double) 4509, (double) 4509);
      double double0 = MathUtils.round((-1214.7727863017), 4509);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("?U7F`Ay");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.?U7F`Ay
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1637));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,637
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(2846);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathUtils.indicator(3630.7);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.11111095942313305;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 3630.7;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double3 = MathUtils.log(10.0, 10.0);
      int int0 = MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.9736429850260626E-8;
      doubleArray0[1] = (-1451.947212);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 3.9736429850260626E-8);
      short short0 = MathUtils.indicator((short)402);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float float0 = MathUtils.indicator(235.321F);
      double double0 = MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      byte byte0 = MathUtils.sign((byte)0);
      boolean boolean0 = MathUtils.equals((double) (byte)0, 1856.408289648777, 0.375);
      int int1 = MathUtils.pow(193, 0);
      long long0 = MathUtils.indicator((long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = MathUtils.compareTo(2.0965277851, 0.5, 0.5);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1553.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(121645100408832000L, 479001600L);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.gcd(0, 0);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      float float0 = MathUtils.sign((-207.0F));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-207.0F);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      int int2 = (-3029);
      intArray0[1] = (-3029);
      intArray0[2] = 0;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      int int4 = 3338;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(3338, 2120);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 848;
      // Undeclared exception!
      try { 
        MathUtils.factorial(848);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.08713622391223907;
      doubleArray0[1] = 3842.298;
      doubleArray0[2] = (-1482.2991525036102);
      doubleArray0[3] = (-57.0);
      doubleArray0[4] = (-689.5001002398);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1.0);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.sign((-1414));
      double double1 = MathUtils.scalb((-57.0), (-1));
      int int1 = MathUtils.hash((-689.5001002398));
      float float0 = MathUtils.round((float) (-200771251), (-1));
      int[] intArray0 = new int[5];
      intArray0[0] = (-200771251);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1414);
      intArray0[4] = (-1414);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float float0 = MathUtils.round((-294.26F), 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-294.0F), (-3152.441966259), (-2244.7794));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-294.26F);
      doubleArray0[1] = (double) (-294.0F);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-294.0F);
      doubleArray0[4] = (double) (-294.0F);
      doubleArray0[5] = (-3152.441966259);
      doubleArray0[6] = (double) (-294.26F);
      doubleArray0[7] = (double) (-294.26F);
      doubleArray0[8] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.normalizeAngle(0.0, (-294.0));
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2779);
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.mulAndCheck((long) 0, (-302932621132653753L));
      int int1 = MathUtils.distance1(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = 0L;
      long long1 = (-1550L);
      try { 
        MathUtils.pow(0L, (-1550L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,550)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-99), (-99));
      double double0 = MathUtils.normalizeAngle(0.0, (-400.9883191907864));
      byte byte0 = MathUtils.indicator((byte)40);
      int int1 = MathUtils.subAndCheck(38, 0);
      int int2 = MathUtils.indicator(9801);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 38, (-601.05379), 1);
      float float0 = MathUtils.indicator(1168.87F);
      double double1 = MathUtils.round((double) 1168.87F, 9801);
      double double2 = MathUtils.factorialLog(9801);
      double double3 = MathUtils.sinh(38);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = 0.0;
      int int0 = (-707);
      int int1 = 464;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (-707), 464);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 5040L);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-4210);
      intArray0[2] = 0;
      intArray0[3] = 1974;
      intArray0[4] = 170;
      intArray0[5] = 45;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.factorialLog(0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1974;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = MathUtils.gcd(720L, 720L);
      long long1 = MathUtils.sign(0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 4.503599627370496E15;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = 1175.0662;
      doubleArray0[6] = (double) 0L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.hash(Double.NaN);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2.0);
      double double1 = MathUtils.binomialCoefficientDouble(210, (-2673));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-305L), (-305L));
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = 0;
      try { 
        MathUtils.pow(0, (-610L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-610)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
