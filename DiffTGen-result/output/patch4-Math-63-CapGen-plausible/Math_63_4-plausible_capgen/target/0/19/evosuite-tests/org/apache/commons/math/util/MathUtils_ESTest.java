/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:43:19 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      long long0 = MathUtils.lcm(25L, 355687428096000L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      int int0 = bigInteger1.intValue();
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.not();
      BigInteger bigInteger4 = BigInteger.ZERO;
      long long1 = bigInteger4.longValueExact();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 957L);
      double double1 = MathUtils.sinh(957L);
      long long2 = MathUtils.pow(0L, 0L);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1366;
      intArray0[2] = 4;
      intArray0[3] = (-1360);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      long long3 = MathUtils.addAndCheck(355687428096000L, 4398046511103L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1189.0;
      doubleArray0[1] = (double) 355687428096000L;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, 1189.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 12;
      int int1 = 2;
      long long0 = MathUtils.binomialCoefficient(12, 2);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      double double1 = MathUtils.indicator(0.0);
      long long0 = 1661L;
      long long1 = MathUtils.indicator(1661L);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-4243L), (-4243L));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-4243L);
      doubleArray0[1] = (double) (-4243L);
      doubleArray0[2] = (double) (-4243L);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.round((-4243.0), 1827317599, 0);
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-91);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5869.021;
      doubleArray0[1] = 2556.7292642055;
      doubleArray0[2] = 998.41018230989;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-379.748);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.round(1994.55F, 0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 5869.021;
      doubleArray1[1] = 2556.7292642055;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      double double1 = MathUtils.indicator(2556.7292642055);
      byte byte0 = MathUtils.sign((byte)62);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("B>xk/V");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.B>xk/V
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)12);
      short short0 = MathUtils.sign((short) (byte)12);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (byte)1, 0.0);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.factorialDouble((short)1);
      short short1 = MathUtils.sign((short)0);
      double double2 = MathUtils.indicator(Double.NaN);
      float float0 = MathUtils.sign((float) (byte)1);
      long long0 = MathUtils.addAndCheck((-2147483648L), (long) (byte)1);
      boolean boolean2 = MathUtils.equalsIncludingNaN(1.0, (double) (byte)1);
      int int0 = MathUtils.hash(1.0);
      boolean boolean3 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long1 = MathUtils.indicator((long) (short)1);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) (short)0;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (double) (byte)12;
      double double3 = MathUtils.distance1(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = MathUtils.pow(21, 0L);
      double double0 = MathUtils.normalizeAngle(21, 21);
      boolean boolean0 = MathUtils.equals((double) 1, Double.POSITIVE_INFINITY, 1);
      float float0 = MathUtils.round((float) 0L, 1);
      int int1 = MathUtils.mulAndCheck(21, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 21;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = 21.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (21 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = (-3727.586);
      double double1 = 1.1102230246251565E-16;
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3727.586), 1.1102230246251565E-16);
      int int0 = MathUtils.mulAndCheck(0, 0);
      int int1 = MathUtils.gcd(490, Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2252));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,252
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = 0;
      double double0 = MathUtils.round((-47.9105587620693), 0, 0);
      int int1 = MathUtils.addAndCheck(0, 0);
      byte byte0 = MathUtils.indicator((byte) (-86));
      int int2 = (-931);
      int int3 = MathUtils.subAndCheck(0, (-931));
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (byte) (-1), (double) 931, (-3161));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)99);
      int int0 = MathUtils.indicator((int) (byte)1);
      int int1 = MathUtils.hash((double[]) null);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = MathUtils.sinh((-417.397196332));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-9.381431961542412E180);
      doubleArray0[1] = (-9.381431961542412E180);
      doubleArray0[2] = (-417.397196332);
      doubleArray0[3] = (-417.397196332);
      doubleArray0[4] = (-417.397196332);
      int int0 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = (-3289L);
      long long1 = MathUtils.lcm((-3289L), (-3289L));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-9,381,431,961,542,412,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 < -417.397)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(Double.NaN, Double.NaN);
      float float0 = MathUtils.indicator((-2.407F));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = bigInteger0.signum();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) (byte)119);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)119;
      doubleArray0[1] = (double) (-2.407F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)119;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.7168146928204135);
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int1 = MathUtils.sign((-721115156));
      long long0 = MathUtils.indicator((long) (-1));
      byte byte0 = MathUtils.indicator((byte)48);
      long long1 = MathUtils.gcd((long) (-1), (long) (-721115156));
      double double2 = MathUtils.cosh(1578.1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-3608L), (-3608L));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-7216L);
      doubleArray0[1] = (double) (-7216L);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      short short0 = (short) (-330);
      short short1 = MathUtils.sign((short) (-330));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN(345.0, (double) (-7216L));
      short short2 = MathUtils.sign((short) (-330));
      long long1 = MathUtils.subAndCheck((long) (short) (-1), (-868L));
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1), (short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = MathUtils.round(1.0, 0);
      int int0 = MathUtils.pow(4236, 306);
      double double1 = MathUtils.cosh(1.304E19);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 306;
      doubleArray0[6] = 1.0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 4236;
      doubleArray1[2] = 1.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.negate();
      BigInteger bigInteger3 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 71);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2.2250738585072014E-308;
      double double0 = 300.9250132;
      doubleArray0[4] = 300.9250132;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte) (-75));
      double double1 = MathUtils.binomialCoefficientDouble(0, (byte) (-75));
      float float0 = MathUtils.round((float) (byte) (-1), 0);
      int int0 = MathUtils.addAndCheck(191, 0);
      double double2 = MathUtils.factorialDouble(0);
      int int1 = 142;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(191, 142);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = MathUtils.pow(358, 358);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 358;
      intArray0[4] = 358;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.safeNorm(doubleArray0);
      short short0 = MathUtils.indicator((short)112);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1226L, 1226L);
      int int0 = MathUtils.indicator(0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1310.635985), (double) 1, 383.2624);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.sinh(0.0);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      int int3 = MathUtils.distance1(intArray0, intArray0);
      short short0 = MathUtils.sign((short)0);
      int int4 = MathUtils.pow(15, (long) 0);
      double double2 = MathUtils.indicator((double) 1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 1);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      short short0 = MathUtils.sign((short)1683);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (int) (short)1;
      int int0 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = MathUtils.factorialLog(647);
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-9223372036854775808L), (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -9,223,372,036,854,775,808 + -9,223,372,036,854,775,808
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
      long long0 = MathUtils.subAndCheck(0L, 0L);
      int int1 = MathUtils.indicator(1519);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3007.4805384197), (-3007.4805384197));
      int int0 = MathUtils.pow(2419, 416);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = MathUtils.lcm((-1558L), 2380L);
      float float0 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2380L;
      doubleArray0[1] = (double) 2380L;
      doubleArray0[2] = (double) 1854020L;
      doubleArray0[3] = (double) 1854020L;
      doubleArray0[4] = (double) 1854020L;
      doubleArray0[5] = (-4909.988304);
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) (-1558L);
      doubleArray0[8] = (double) 1854020L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1854020.0);
      double double0 = MathUtils.log((-1558.0), 1854020.0);
      long long1 = MathUtils.mulAndCheck((-1558L), 0L);
      int int0 = MathUtils.hash(doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,380 >= 2,380)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      long long0 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int int0 = MathUtils.addAndCheck(2499, 203);
      long long1 = MathUtils.subAndCheck((-643L), (long) 2702);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2499;
      doubleArray0[1] = (double) 203;
      doubleArray0[2] = (double) 2702;
      doubleArray0[3] = 0.14285714285714285;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.14285714285714285;
      doubleArray1[1] = (double) (-643L);
      doubleArray1[2] = 0.14285714285714285;
      doubleArray1[3] = 0.14285714285714285;
      doubleArray1[4] = (double) 203;
      doubleArray1[5] = 0.14285714285714285;
      doubleArray1[6] = 40.19140625;
      doubleArray1[7] = (-478.697472);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 2177;
      double double0 = MathUtils.factorialLog(2177);
      byte byte0 = MathUtils.sign((byte)52);
      double double1 = MathUtils.normalizeAngle(2177, (-1052.9903737944687));
      long long0 = MathUtils.subAndCheck((-381L), (long) (byte)52);
      byte byte1 = MathUtils.sign((byte)52);
      long long1 = (-3512299194304650054L);
      long long2 = (-1121L);
      try { 
        MathUtils.pow((-3512299194304650054L), (-1121L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,512,299,194,304,650,054^-1,121)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(755L, 525L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 525L;
      doubleArray0[1] = (double) 755L;
      doubleArray0[2] = (double) 396375L;
      doubleArray0[3] = (double) 525L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (525 < 755)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      int int0 = MathUtils.mulAndCheck((-3524), 178);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1146.3172629;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (short)0;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1262.0;
      doubleArray0[2] = 2161.4024672517226;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator(0L);
      double double1 = MathUtils.cosh((-0.09088450866185192));
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-0.09088450866185192);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0041328405526668;
      double double2 = MathUtils.safeNorm(doubleArray1);
      double double3 = MathUtils.normalizeAngle(1262.0, 0.0);
      short short0 = MathUtils.sign((short)3695);
      int int0 = 94;
      int int1 = MathUtils.lcm((int) (short)1, 94);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((short)3695, 94);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = 0;
      float float1 = MathUtils.round(0.0F, 0, 0);
      float float2 = MathUtils.indicator((float) 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (1 <= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = (-3462);
      double double0 = MathUtils.round((-1046.99233069832), (-3462));
      int int1 = MathUtils.subAndCheck((-3462), 41);
      double double1 = MathUtils.cosh((-1046.99233069832));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 1382.0, 1382.0);
      int int2 = MathUtils.addAndCheck(253, 2977);
      long long0 = 1712L;
      long long1 = MathUtils.pow(1712L, 0L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3230;
      doubleArray0[1] = (double) (-3462);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      long long2 = MathUtils.sign(984L);
      long long3 = MathUtils.gcd(0L, 0L);
      double double2 = MathUtils.cosh((-3462));
      int int3 = MathUtils.pow(253, (long) 41);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (3,230 >= -3,462)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = (-2507);
      int int1 = MathUtils.subAndCheck((-2507), (-2507));
      int int2 = MathUtils.lcm((-2507), (-24));
      long long0 = 0L;
      long long1 = MathUtils.gcd(0L, (long) 60168);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.clearBit(60168);
      int int3 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger2 = bigInteger0.abs();
      boolean boolean0 = bigInteger0.isProbablePrime(60168);
      try { 
        MathUtils.pow(bigInteger0, (-24));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-24)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 3131.1;
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 3131.1, (-1472));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = MathUtils.hash(3289.286828421762);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-4267615245585081135L), (-3183605296591799669L));
      double double0 = MathUtils.factorialDouble(128);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.8562048236263E215;
      doubleArray0[1] = 3.8562048236263E215;
      doubleArray0[2] = (double) (-7451220542176880804L);
      doubleArray0[3] = 0.0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)68;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = MathUtils.round(3522.4601788271707, (-4043));
      int int0 = MathUtils.lcm((-4043), (-4043));
      int[] intArray0 = new int[9];
      intArray0[0] = 4043;
      intArray0[1] = (-4043);
      intArray0[2] = (-4043);
      intArray0[3] = (-4043);
      intArray0[4] = 0;
      intArray0[5] = (-4043);
      intArray0[6] = (-4043);
      intArray0[7] = (-4043);
      intArray0[8] = (-4043);
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = (-4043);
      intArray1[4] = (-4043);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(0, 0);
      double double0 = MathUtils.factorialDouble(0);
      float float0 = MathUtils.indicator((float) 0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      short short0 = MathUtils.indicator((short)2605);
      double double0 = MathUtils.normalizeAngle((short)1, (short)2605);
      double double1 = MathUtils.factorialLog((short)2605);
      double double2 = MathUtils.log(17888.66618515842, 17888.66618515842);
      double double3 = MathUtils.log((-267.751), 1.0);
      double double4 = MathUtils.sign(365.0);
      int int0 = MathUtils.lcm(60, (int) (short)2605);
      int int1 = MathUtils.pow(31260, 2194L);
      long long0 = MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float float0 = MathUtils.round(Float.NaN, 61);
      byte byte0 = MathUtils.sign((byte)4);
      int int0 = MathUtils.pow((int) (byte)4, 0);
      double double0 = MathUtils.factorialDouble(3685);
      int[] intArray0 = new int[9];
      intArray0[0] = 61;
      intArray0[1] = 61;
      intArray0[2] = 0;
      intArray0[3] = 3685;
      intArray0[4] = 61;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = (int) (byte)1;
      intArray0[7] = 0;
      intArray0[8] = (int) (byte)4;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.sign((long) 4);
      long long1 = MathUtils.binomialCoefficient(1, 0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.2675934823758863E-8;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1465.0);
      double double0 = MathUtils.round((double) 0, 4156);
      double double1 = MathUtils.scalb(0, 9);
      double double2 = MathUtils.cosh(0.0);
      double double3 = MathUtils.cosh((-3753.7808315577));
      long long0 = MathUtils.factorial(12);
      int[] intArray0 = new int[3];
      intArray0[0] = 9;
      intArray0[1] = 12;
      intArray0[2] = 12;
      double double4 = MathUtils.distance(intArray0, intArray0);
      double double5 = MathUtils.safeNorm(doubleArray1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)116;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-107,365,203,852^-107,365,203,852)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.factorialDouble(31);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 31;
      doubleArray0[1] = (double) 31;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 8.22283865417801E33;
      doubleArray0[5] = 8.22283865417801E33;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 31;
      double double3 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = (-1784);
      double double0 = MathUtils.round(1902.912686, (-1784), 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) (-1784);
      doubleArray0[3] = (double) (-1784);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.030589580535888672;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1784));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,784
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = (-5968);
      double double0 = MathUtils.scalb((-1776.1582109978779), (-5968));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, (-1776.1582109978779), (-5968));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1891.4);
      doubleArray0[4] = 0.6666666269302368;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.058823529411764705, 3.834E-20, 191);
      float float0 = MathUtils.sign((float) 191);
      float float1 = MathUtils.round((float) 191, (-107));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.pow((-131L), 0L);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long1 = MathUtils.sign(0L);
      byte byte0 = MathUtils.indicator((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-107));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -107
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2030.1348489282047;
      doubleArray0[2] = 1.2675934823758863E-8;
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = 2850;
      int int1 = MathUtils.lcm((-1971), 2850);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(1872450, 1900);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = MathUtils.gcd((-999), (-999));
      double double0 = MathUtils.sign((double) 999);
      boolean boolean0 = MathUtils.equals((double) (-999), (double) (-999), (double) 999);
      long long0 = MathUtils.mulAndCheck(6002L, 1236L);
      byte byte0 = MathUtils.sign((byte)8);
      int[] intArray0 = new int[3];
      intArray0[0] = (-999);
      intArray0[1] = 0;
      intArray0[2] = (-999);
      double double1 = MathUtils.distance(intArray0, intArray0);
      short short0 = MathUtils.indicator((short)0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (-999), 2372.195622);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      short short0 = (short)1333;
      short short1 = MathUtils.indicator((short)1333);
      byte byte0 = MathUtils.indicator((byte) (-33));
      float float0 = MathUtils.indicator((float) (short)1);
      // Undeclared exception!
      try { 
        MathUtils.factorial((byte) (-33));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -33
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = MathUtils.indicator(6.283185307179586);
      int int0 = MathUtils.addAndCheck((-834), (-834));
      float float0 = MathUtils.indicator(1332.0F);
      int[] intArray0 = new int[1];
      intArray0[0] = (-306);
      int[] intArray1 = new int[6];
      intArray1[0] = (-834);
      intArray1[1] = (-1668);
      intArray1[2] = (-1668);
      intArray1[3] = (-306);
      intArray1[4] = (-306);
      intArray1[5] = (-834);
      int int1 = MathUtils.distanceInf(intArray0, intArray1);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[0];
      int int2 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.log(1.0, (-390.43730909304));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = MathUtils.sign(147);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.addAndCheck(1, 147);
      float float0 = MathUtils.indicator((float) 147);
      short short0 = MathUtils.sign((short)0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow((long) 1, 148);
      long long1 = MathUtils.indicator((-3569L));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 188;
      double double0 = MathUtils.scalb(3744.8, 188);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 3744.8);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 0;
      double double1 = MathUtils.scalb(0.0, 0);
      int int1 = 1849;
      int int2 = MathUtils.gcd(1849, 1849);
      int int3 = 0;
      int int4 = 153;
      // Undeclared exception!
      try { 
        MathUtils.round((-3577.0233572154643), 0, 153);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = MathUtils.sign((-298.67035F));
      double double0 = MathUtils.sign((double) (-1.0F));
      int int0 = (-1138);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1138));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,138
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1.9699272335463627E-8, (-0.0013888888689039883));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-0.0013888888689039883);
      doubleArray0[1] = 1.9699272335463627E-8;
      doubleArray0[2] = 1.9699272335463627E-8;
      doubleArray0[3] = 1.9699272335463627E-8;
      doubleArray0[4] = (-0.0013888888689039883);
      doubleArray0[5] = Double.NaN;
      double double1 = MathUtils.safeNorm(doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.intValue();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-39);
      BigInteger bigInteger1 = bigInteger0.not();
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-90);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      int int1 = bigInteger2.compareTo(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.gcd(bigInteger2);
      // Undeclared exception!
      try { 
        bigInteger0.modPow(bigInteger2, bigInteger2);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 1281;
      int int1 = MathUtils.mulAndCheck(1281, 1281);
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.round((double) 0, 4);
      int int2 = 0;
      int int3 = MathUtils.sign(0);
      int int4 = MathUtils.compareTo(915.3652403538836, 0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 915.3652403538836;
      doubleArray0[3] = 915.3652403538836;
      doubleArray0[4] = (double) 1640961;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1640961;
      int int5 = MathUtils.hash(doubleArray0);
      double double2 = MathUtils.log((-1823.655095), 4);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (4 > 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      double double1 = MathUtils.log(14.0, 0.09090909090909091);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      boolean boolean0 = MathUtils.equals(173.147, 0.0);
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
      int int0 = MathUtils.compareTo(0, 0, 0.0);
      int int1 = MathUtils.indicator(0);
      float float0 = MathUtils.indicator((-260.5552F));
      double double2 = MathUtils.sign(0.0);
      double double3 = MathUtils.factorialLog(3013);
      byte byte0 = MathUtils.indicator((byte)0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      short short0 = MathUtils.sign((short) (byte)0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
      int int1 = MathUtils.subAndCheck(1, 0);
      int int2 = MathUtils.hash((double) 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = MathUtils.pow(10, 0L);
      try { 
        MathUtils.pow(1, (-3176L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-3,176)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = MathUtils.hash(0.4342944622039795);
      float float0 = MathUtils.sign(1232.1F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 31;
      intArray0[1] = 31;
      intArray0[2] = 31;
      double double0 = MathUtils.distance(intArray0, intArray0);
      MathUtils.checkOrder(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1416.133364474703, 5688.118674142574);
      double double1 = MathUtils.factorialDouble(505);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4357.1950727346;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.5;
      doubleArray0[4] = 685.02707;
      doubleArray0[5] = 1050.9056;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.mulAndCheck((-1552L), (-1552L));
      int int0 = MathUtils.gcd(0, 1035);
      int[] intArray0 = new int[8];
      intArray0[0] = 1035;
      intArray0[1] = 0;
      intArray0[2] = 1035;
      intArray0[3] = 1035;
      intArray0[4] = 1035;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1035;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      double double0 = MathUtils.sinh(760.252659284);
      int int1 = MathUtils.pow(0, 0);
      boolean boolean0 = MathUtils.equals((double) 0, 648.2036743582);
      long long0 = MathUtils.indicator((long) 0);
      int int2 = MathUtils.indicator(1316);
      int int3 = MathUtils.compareTo(Double.POSITIVE_INFINITY, 0.0, (-1551.0));
      int[] intArray0 = new int[0];
      int int4 = MathUtils.distance1(intArray0, intArray0);
      double double1 = MathUtils.round((double) 1L, 14, 0);
      double double2 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-2569));
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.binomialCoefficient(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      long long1 = MathUtils.factorial(0);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double double1 = MathUtils.scalb(0.0, 0);
      long long2 = MathUtils.factorial(0);
      long long3 = MathUtils.binomialCoefficient(0, 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
      double double2 = MathUtils.log(1L, 3125.0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = MathUtils.sinh(723.21855);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 723.21855;
      doubleArray0[3] = 723.21855;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(723.21855, 723.21855);
      int[] intArray0 = new int[1];
      intArray0[0] = 160;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.binomialCoefficientDouble(160, 160);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals((-1162.25), 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.gcd(0, 0);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      short short0 = MathUtils.indicator((short)2447);
      int int0 = MathUtils.lcm(1030, 1030);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = 3780L;
      long long1 = MathUtils.addAndCheck(3780L, 3780L);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = (-527);
      long long0 = MathUtils.binomialCoefficient(21, (-527));
      boolean boolean0 = MathUtils.equals((double) (-527), (double) 1L, (double) 1L);
      long long1 = (-451L);
      try { 
        MathUtils.pow((-451L), (-527));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-451^-527)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = (-504L);
      long long1 = MathUtils.sign((-504L));
      int int0 = (-1587);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1587));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,587
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = MathUtils.factorialLog(211);
      boolean boolean0 = MathUtils.equals((-2029.94433), (-544.012081), 211);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2029.94433);
      doubleArray0[1] = 921.8373287078047;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 921.8373287078047;
      doubleArray0[4] = 921.8373287078047;
      double double1 = MathUtils.safeNorm(doubleArray0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.indicator(211);
      try { 
        MathUtils.pow(211, (-394));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (211^-394)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float float0 = MathUtils.round((-104.7843F), (-476));
      double double0 = MathUtils.log((-324.217), 1.125);
      byte byte0 = MathUtils.sign((byte)123);
      long long0 = MathUtils.sign((long) (-476));
      int int0 = MathUtils.subAndCheck((-1763), 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-104.7843F);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)123;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.modInverse(bigInteger1);
      // Undeclared exception!
      try { 
        bigInteger0.intValueExact();
      } catch(ArithmeticException e) {
         //
         // BigInteger out of int range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      short short0 = MathUtils.indicator((short)8);
      double double0 = MathUtils.cosh((short)8);
      long long0 = MathUtils.sign((long) (short)8);
      double double1 = MathUtils.sign(1785.388263592473);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.pow(1L, (int) (short)1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1785.388263592473;
      doubleArray0[1] = 1785.388263592473;
      doubleArray0[2] = 2.7553817452272217E-6;
      doubleArray0[3] = (double) (short)1;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,785.388 >= 1,785.388)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = MathUtils.indicator(12);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-908);
      try { 
        MathUtils.pow(5151L, (-908));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (5,151^-908)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)91);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)91;
      intArray0[1] = 34;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2737.1595806), 6.283185307179586, 0.5);
      double double0 = MathUtils.binomialCoefficientLog(0, (-2753));
      short short0 = MathUtils.indicator((short)174);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-476L), 121L);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-656));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -656
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      byte byte0 = bigInteger1.byteValueExact();
      BigInteger bigInteger2 = bigInteger1.shiftRight((byte)10);
      BigInteger bigInteger3 = bigInteger0.negate();
      BigInteger bigInteger4 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger5 = bigInteger0.modInverse(bigInteger1);
      double double0 = bigInteger0.doubleValue();
      int int0 = bigInteger0.intValueExact();
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 3274L);
      double double1 = MathUtils.factorialLog(2135);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = (-1253);
      try { 
        MathUtils.pow((-1253), (-1253));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,253^-1,253)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.factorialLog(2197);
      int int0 = MathUtils.lcm(0, 2197);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(3, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-396.1);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow(1030, 0);
      int int1 = MathUtils.gcd(1, 1486);
      int int2 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1030, 2867.782602997, 2.3841857910019882E-8);
      boolean boolean1 = MathUtils.equals(2.3841857910019882E-8, (double) 1030, 5297.42503028674);
      long long1 = MathUtils.gcd(1330L, 1L);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      boolean boolean0 = MathUtils.equals(1145.72294061056, (-1365.5211223742335), 1145.72294061056);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1145.72294061056;
      doubleArray0[1] = (-1365.5211223742335);
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (-1365.5211223742335);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1145.72294061056;
      doubleArray0[6] = (double) (short)0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd(40320L, 4294967295L);
      long long1 = MathUtils.pow(4398046511103L, 4294967295L);
      double double1 = MathUtils.binomialCoefficientLog(1769, 1769);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 3671;
      int int1 = 0;
      int int2 = MathUtils.addAndCheck(3671, 0);
      int int3 = 0;
      int int4 = MathUtils.mulAndCheck(3671, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("Z4C\"zB&\"z2+%b/)+s");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.Z4C\"zB&\"z2+%b/)+s
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)74);
      double double0 = MathUtils.normalizeAngle((byte)1, 2002.82594);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger1.not();
      BigInteger bigInteger3 = bigInteger1.not();
      int int0 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger4 = new BigInteger(byteArray0);
      BigInteger bigInteger5 = bigInteger0.andNot(bigInteger2);
      boolean boolean0 = bigInteger4.testBit(0);
      BigInteger bigInteger6 = bigInteger0.divide(bigInteger4);
      BigInteger bigInteger7 = bigInteger1.min(bigInteger4);
      BigInteger bigInteger8 = bigInteger0.not();
      BigInteger bigInteger9 = bigInteger0.remainder(bigInteger1);
      long long0 = (-1085L);
      try { 
        MathUtils.pow(bigInteger0, (-1085L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (74^-1,085)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 1877;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1877);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialDouble(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1349.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 1.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
      double double2 = MathUtils.normalizeAngle(0.0, 2.2250738585072014E-308);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = 6L;
      long long1 = MathUtils.lcm(6L, 0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 6L;
      doubleArray0[1] = (double) 6L;
      doubleArray0[2] = 717.7728410768239;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 6L;
      doubleArray0[5] = (double) 6L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 6L;
      doubleArray0[8] = (double) 0L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.normalizeAngle(3073.322, 6.0);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = 0;
      int int1 = 19;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 19);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 19
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-4163.6341773);
      doubleArray0[1] = 0.030589580535888672;
      doubleArray0[2] = 1015.652;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.normalizeAngle(0.0, 177.0);
      long long0 = MathUtils.subAndCheck(3913L, 3913L);
      byte byte0 = MathUtils.sign((byte)4);
      long long1 = MathUtils.pow((long) (byte)1, (long) (byte)4);
      int int0 = MathUtils.pow((-954), (long) (byte)4);
      int int1 = MathUtils.compareTo(1052.6905379966, 0.0, (-3192.08685224));
      int int2 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.round(0.0F, (int) (byte)1);
      int int3 = MathUtils.compareTo(0.0, (byte)4, 29.0352347);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-72));
      boolean boolean0 = MathUtils.equalsIncludingNaN(4429.4, (-3826.0));
      float float0 = MathUtils.indicator((float) (byte) (-72));
      float float1 = MathUtils.round((float) (byte) (-1), 126);
      long long0 = MathUtils.sign(0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger1, 126);
      boolean boolean1 = MathUtils.equals((double) (byte) (-1), (double) (-1.0F), 130);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int int0 = MathUtils.addAndCheck((-4085), 134);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = MathUtils.sinh(1.5);
      long long0 = MathUtils.lcm((-751L), 0L);
      int int0 = (-4217);
      int int1 = MathUtils.indicator((-4217));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-4217);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 2.1292794550948173;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = 2.1292794550948173;
      doubleArray0[5] = (double) (-751L);
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = 1.0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-1), (-4217));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -4,217, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialLog(0);
      long long0 = (-9218868437227405313L);
      try { 
        MathUtils.pow((BigInteger) null, (-9218868437227405313L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-9,218,868,437,227,405,313)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(291, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1L, 4487.287708, 1.0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-785), (-785));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = (-5313L);
      try { 
        MathUtils.pow((-9223372036854775808L), (-5313L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-9,223,372,036,854,775,808^-5,313)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = MathUtils.hash(Double.NaN);
      double double0 = MathUtils.scalb(0.0, 2146959360);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1886.3029591;
      doubleArray0[2] = 0.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.lcm(0L, 0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      int int0 = (-633);
      // Undeclared exception!
      try { 
        bigInteger0.flipBit((-633));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = MathUtils.indicator(345L);
      boolean boolean0 = MathUtils.equals((double) 1L, (double) 345L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 113);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 113
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = (-1080);
      int int1 = (-651);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1080), (-651));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,080, k = -651
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      intArray0[1] = 4184;
      intArray0[2] = (-4075);
      intArray0[3] = 1661;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathUtils.sign(1781.141);
      int int0 = 331;
      double double1 = MathUtils.binomialCoefficientLog(331, 331);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 331);
      int int1 = MathUtils.subAndCheck(0, 0);
      double double2 = MathUtils.log(0, 0.0);
      int int2 = 1879;
      int int3 = MathUtils.sign(1879);
      long long0 = MathUtils.gcd((long) 1, (long) 1);
      short short0 = (short)1;
      short short1 = MathUtils.indicator((short)1);
      float float0 = MathUtils.round((float) 1L, 0, 1);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1879;
      intArray0[2] = (int) (short)1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1879;
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = MathUtils.log(0.0, (-1585.5640425));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = MathUtils.cosh(648.942);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("ROUND_UP");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.ROUND_UP
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathUtils.cosh((-1628.0));
      boolean boolean0 = MathUtils.equals(1999.0, (-1628.0));
      double double1 = MathUtils.scalb((-1403.506793796), 801);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 1892;
      // Undeclared exception!
      try { 
        MathUtils.factorial(1892);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = 0.008336750013465571;
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.008336750013465571, 0.008336750013465571, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = (-238);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-238), (-238));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -238
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1626.64), (-1626.64));
      int int0 = (-489);
      try { 
        MathUtils.pow((-489), (long) (-489));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-489^-489)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-216.88);
      doubleArray0[0] = (-216.88);
      doubleArray0[1] = 0.5;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double1 = 0.0;
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck(7910884519577875640L, 2415L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(7910884519577875640L, 443L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      short short0 = (short)969;
      short short1 = MathUtils.indicator((short)969);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)1;
      double double0 = (-2592.3618604);
      doubleArray0[2] = (-2592.3618604);
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (short)969;
      doubleArray0[6] = (double) (short)969;
      doubleArray0[7] = (double) (short)969;
      doubleArray0[8] = (double) (short)969;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      long long0 = MathUtils.pow((long) (byte)0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 1L;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1L;
      doubleArray1[1] = 1885.312123;
      doubleArray1[2] = (double) (byte)0;
      doubleArray1[3] = (double) 1L;
      doubleArray1[4] = (double) (byte)0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      int int0 = MathUtils.sign(806);
      long long1 = MathUtils.addAndCheck((long) (byte)0, 3144L);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = MathUtils.indicator((-228));
      int int1 = MathUtils.sign((-228));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1), (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int int0 = MathUtils.sign((-4085));
      try { 
        MathUtils.pow(3, (-2713679700L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (3^-2,713,679,700)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1504.8), (-1504.8), (-1504.8));
      long long0 = 3952090531849364496L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(9223372036854775807L, 3952090531849364496L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-553.2633707331);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.1102230246251565E-16;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = MathUtils.pow(2554L, 1183);
      int int0 = MathUtils.sign(1183);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1381), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,381, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(2);
      byte byte0 = MathUtils.sign((byte)78);
      double double1 = MathUtils.binomialCoefficientDouble(552, (byte)78);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = MathUtils.cosh(2164.7644433048);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3286);
      intArray0[1] = 1121;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.lcm((-932L), (long) (-3286));
      double double0 = MathUtils.indicator((double) 1121);
      int int1 = MathUtils.subAndCheck(8, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-3286);
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals(0.0, 0.0, 75);
      // Undeclared exception!
      try { 
        MathUtils.round((-2774.22F), (-1252), 31);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 31, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      long long1 = MathUtils.lcm(1586L, 2661L);
      int[] intArray0 = new int[5];
      intArray0[0] = (-2412);
      intArray0[1] = 1123;
      intArray0[2] = 191;
      intArray0[3] = 17;
      intArray0[4] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 191, 191, (-2412));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = MathUtils.indicator(9.313225746154785E-10);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = MathUtils.gcd(2242L, (-180L));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-2029L), (-3958705157555305932L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(855, 855);
      double double0 = MathUtils.round((double) 855, 855);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1710;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(1710, Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      double double0 = MathUtils.normalizeAngle((-1694.07669737), (-1354.4590769435));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1275.183;
      doubleArray0[1] = 10.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,275.183 >= 10)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3206.011179;
      doubleArray0[1] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (3,206.011 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = MathUtils.pow(3284L, 9140269874627106967L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3284L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 3284L;
      doubleArray0[3] = (double) 9140269874627106967L;
      doubleArray0[4] = (double) 3284L;
      doubleArray0[5] = (double) 3284L;
      doubleArray0[6] = 1.28885939529E7;
      doubleArray0[7] = (double) 3284L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      byte byte0 = MathUtils.indicator((byte) (-15));
      double double1 = MathUtils.binomialCoefficientLog(13, 13);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      long long0 = MathUtils.mulAndCheck(2019L, 1395L);
      int int0 = MathUtils.pow(0, 0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(3622.6059661, 3622.6059661, 3622.6059661);
      boolean boolean1 = MathUtils.equals(870.400794509051, 870.400794509051, 6.283185307179586);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 247;
      intArray0[2] = 767;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 777;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-9));
      boolean boolean0 = MathUtils.equals((double) (byte) (-1), 0.08713622391223907, 7);
      long long0 = MathUtils.mulAndCheck(1941L, (long) (byte) (-9));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.08713622391223907;
      doubleArray0[1] = (double) (byte) (-9);
      doubleArray0[2] = (-1955.64639102);
      doubleArray0[3] = (double) (-17469L);
      doubleArray0[4] = (double) (-17469L);
      doubleArray0[5] = (double) (-17469L);
      doubleArray0[6] = (double) (byte) (-1);
      doubleArray0[7] = (double) (byte) (-1);
      doubleArray0[8] = (double) 1941L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 7);
      byte byte1 = MathUtils.indicator((byte)53);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathUtils.equals(400.92, (-17469.0), (-1));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = MathUtils.gcd(185, 21);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 21;
      doubleArray0[1] = (double) 21;
      doubleArray0[2] = (double) 185;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 185;
      int int1 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.scalb((-1196746593), 0);
      int int2 = MathUtils.compareTo(0.0, 1337.9214635559424, (-2103.2706573503));
      float float0 = MathUtils.round(741.709F, (-682));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short short0 = (short)400;
      short short1 = MathUtils.indicator((short)400);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)400;
      doubleArray0[2] = (double) (short)400;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = 143;
      int int1 = MathUtils.subAndCheck(143, 143);
      double double1 = 2.4384203044354907E-8;
      double double2 = MathUtils.normalizeAngle(2.4384203044354907E-8, 457.61254426058);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-2861), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,861, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.11113807559013367, 0.0, 1912);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.11113807559013367;
      doubleArray0[1] = (double) 1912;
      doubleArray0[2] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.addAndCheck((-58L), 795L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-69);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = MathUtils.pow(881, (long) 881);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = MathUtils.gcd((-2144L), 0L);
      int int0 = 0;
      int int1 = MathUtils.pow(0, 315L);
      float float0 = MathUtils.sign((float) 0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 2144L;
      doubleArray0[4] = (double) 2144L;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = 1922.27;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long1 = MathUtils.mulAndCheck(2503L, 0L);
      long long2 = MathUtils.subAndCheck(4607182418800017408L, 2503L);
      long long3 = MathUtils.pow(315L, 0L);
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int2 = 140;
      boolean boolean0 = MathUtils.equalsIncludingNaN(3590.0687950093657, (-1957.8462136143517), 140);
      // Undeclared exception!
      try { 
        MathUtils.factorial(140);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.scalb((-2293.0997759740603), 0);
      long long0 = 0L;
      long long1 = MathUtils.pow(0L, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-2293.0997759740603);
      doubleArray0[3] = (-2293.0997759740603);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
