/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:35:26 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 141;
      int int1 = MathUtils.gcd(141, (-2147483645));
      BigInteger bigInteger0 = BigInteger.ZERO;
      long long0 = bigInteger0.longValue();
      try { 
        MathUtils.pow(bigInteger0, (long) (-2147483645));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,147,483,645)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1855.532152002064), (-1855.532152002064), (-3.141592653589793));
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1855.532152002064);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3.141592653589793);
      doubleArray0[3] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      short short0 = (short) (-121);
      short short1 = MathUtils.indicator((short) (-121));
      long long0 = MathUtils.indicator(887L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.valueOf((short) (-121));
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigInteger bigInteger3 = bigInteger2.xor(bigInteger0);
      int int0 = bigInteger2.intValueExact();
      BigInteger bigInteger4 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger5 = bigInteger0.gcd(bigInteger2);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (double) (short) (-121);
      doubleArray0[5] = (double) 887L;
      doubleArray0[6] = (-0.25);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 887L;
      doubleArray1[1] = (double) 1L;
      doubleArray1[2] = (double) 887L;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (double) (short) (-121);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      BigInteger bigInteger6 = bigInteger0.andNot(bigInteger2);
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, 1318);
      double double0 = MathUtils.normalizeAngle(1L, 1318);
      int int1 = MathUtils.mulAndCheck((int) (short) (-1), 2654);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (-2654), (double) (short) (-121), (int) (short) (-121));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.round(0.0, (-1843));
      long long0 = MathUtils.mulAndCheck((long) (-1843), (long) (-1843));
      long long1 = MathUtils.gcd(2436L, 3396649L);
      int int0 = MathUtils.hash((double) 3396649L);
      int int1 = MathUtils.indicator((-1052120556));
      int int2 = MathUtils.pow((-1), 467L);
      int int3 = MathUtils.mulAndCheck((-1), 0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1052120556);
      intArray0[1] = (-1052120556);
      intArray0[2] = 1024;
      int int4 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = MathUtils.hash((double[]) null);
      long long0 = MathUtils.lcm((-1534L), (long) 0);
      double double0 = 0.0;
      double double1 = MathUtils.indicator(0.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1030, 1030);
      int[] intArray0 = new int[4];
      intArray0[0] = 1030;
      intArray0[1] = 0;
      intArray0[2] = 1030;
      intArray0[3] = 1030;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((double) 1030, (double) 1030);
      float float0 = MathUtils.round(0.0F, 218, 0);
      int int1 = MathUtils.compareTo((-150.01790912), 3.141592653589793, 2776.195049509);
      float float1 = MathUtils.indicator((float) 1L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = (double) 218;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int2 = MathUtils.pow(1030, 0L);
      // Undeclared exception!
      try { 
        MathUtils.round(281.5903979, 218, (-1650));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = MathUtils.sign((-4035746434778044925L));
      // Undeclared exception!
      try { 
        MathUtils.lcm(120L, (-4035746434778044925L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = MathUtils.pow(230, 230);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 230;
      doubleArray0[2] = (double) 230;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 230;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.round(0.0, 0);
      double double1 = MathUtils.indicator(230.0);
      long long0 = MathUtils.subAndCheck(1175L, (long) 0);
      long long1 = MathUtils.indicator((-765L));
      int int1 = 0;
      int int2 = MathUtils.subAndCheck(0, 0);
      long long2 = MathUtils.addAndCheck((-765L), (long) 0);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      short short0 = (short)3414;
      short short1 = MathUtils.indicator((short)3414);
      double double3 = MathUtils.scalb(230.0, 0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = MathUtils.hash((double[]) null);
      long long0 = MathUtils.pow((long) 0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.round(0.0F, 0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1L, (double) 0, (-1.0));
      int int1 = 28;
      // Undeclared exception!
      try { 
        MathUtils.factorial(28);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float float0 = MathUtils.round((-1.0F), 0, 0);
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
      long long1 = MathUtils.gcd(0L, (long) 0);
      long long2 = MathUtils.subAndCheck(0L, 0L);
      short short0 = MathUtils.sign((short) (-2609));
      long long3 = MathUtils.factorial(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(756.0, 2.2250738585072014E-308, 2.2250738585072014E-308);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long4 = MathUtils.addAndCheck(362880L, 0L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.5, (double) 0L, 1.5);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 362880L;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = MathUtils.lcm(1802, 1802);
      int[] intArray0 = new int[8];
      intArray0[0] = 1802;
      intArray0[1] = 1802;
      intArray0[2] = 1802;
      intArray0[3] = 1802;
      intArray0[4] = 1802;
      intArray0[5] = 1802;
      intArray0[6] = 1802;
      intArray0[7] = 1802;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1802;
      doubleArray0[1] = (double) 1802;
      doubleArray0[2] = (double) 1802;
      doubleArray0[3] = (-3041.11885526);
      doubleArray0[4] = (double) 1802;
      doubleArray0[5] = (double) 1802;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = MathUtils.pow((BigInteger) null, 0L);
      double double0 = MathUtils.cosh(0.0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = MathUtils.indicator(9218868437227405312L);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 24.4299291832055, (-1.0));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = 1572L;
      long long1 = MathUtils.subAndCheck(1572L, 674L);
      float float0 = MathUtils.round((float) 1572L, 21);
      int int0 = (-3573);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-3573), (-3573));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -3,573
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3632.8339306135113;
      doubleArray0[3] = 137.2418754565;
      doubleArray0[4] = 52.73028747;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = (-775.200539);
      int int0 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1677774544);
      intArray0[1] = (-1677774544);
      intArray0[2] = (-1677774544);
      intArray0[3] = (-1677774544);
      intArray0[4] = (-1677774544);
      int int1 = (-530);
      intArray0[5] = (-530);
      intArray0[6] = (-1677774544);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (3,632.834 > 137.242)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-2700.83853216946), (-2700.83853216946));
      int int0 = MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = MathUtils.round((-1582.378096445188), 1479, 0);
      int int0 = MathUtils.gcd(1479, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1479;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 2.384185791015625E-7;
      doubleArray0[4] = (-1582.378096445188);
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.mulAndCheck(0, 0);
      double double1 = MathUtils.normalizeAngle(1479, 0);
      int int3 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.indicator((long) 0);
      double double2 = MathUtils.normalizeAngle(0, 0.0);
      long long1 = MathUtils.lcm((long) 0, (long) 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int4 = bigInteger0.bitLength();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1479);
      int int5 = bigInteger1.intValue();
      try { 
        MathUtils.pow(bigInteger1, (-303L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-303)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = 282;
      int int1 = MathUtils.pow(282, 282);
      float float0 = 1.0F;
      float float1 = MathUtils.indicator(1.0F);
      double[] doubleArray0 = null;
      double double0 = 643.023653;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 643.023653);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 1930;
      double double0 = MathUtils.scalb(0.0, 1930);
      boolean boolean0 = MathUtils.equals(8.0E298, 490.281949093028);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("N.-=");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.N.-=
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 245.81749521;
      doubleArray0[1] = 453.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 997.6771752;
      doubleArray0[4] = (-1249.477);
      doubleArray0[5] = (-1339.01626);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.pow(420012843, 420012843);
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = bigInteger0.toString(1694587187);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.or(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.and(bigInteger1);
      long long0 = (-330L);
      try { 
        MathUtils.pow(bigInteger0, (-330L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-330)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 1030;
      double double0 = MathUtils.binomialCoefficientDouble(1059, 1030);
      double double1 = MathUtils.factorialLog(1030);
      long long0 = MathUtils.pow((-2864L), (long) 1059);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 6119.821180140363;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1030;
      doubleArray0[3] = 6119.821180140363;
      doubleArray0[4] = (double) 1059;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1059;
      intArray0[1] = 1030;
      intArray0[2] = 1059;
      intArray0[3] = (-1949);
      intArray0[4] = 1059;
      intArray0[5] = 1030;
      intArray0[6] = 1059;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-2329));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-2,329)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = 9218868437227405312L;
      // Undeclared exception!
      try { 
        MathUtils.lcm(2147483647L, 9218868437227405312L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = MathUtils.gcd(1368L, 1368L);
      boolean boolean0 = MathUtils.equals((-1.0), 0.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 54;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 54;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1368L;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 1368L;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = (-2293);
      int int1 = MathUtils.subAndCheck((-1), (-2293));
      long long0 = MathUtils.lcm((long) 2292, (long) (-2293));
      int int2 = MathUtils.sign((-1));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2293));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,293
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 668;
      long long0 = MathUtils.pow(656L, 668);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.distance(doubleArray0, (double[]) null);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (-1340.1), 668);
      boolean boolean2 = MathUtils.equals(doubleArray0, (double[]) null);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2418.81);
      doubleArray0[1] = (-1413.0984);
      doubleArray0[2] = 1837.84023684667;
      double double0 = 1273.8097;
      doubleArray0[3] = 1273.8097;
      doubleArray0[4] = 90.630274837;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2957.26351469;
      doubleArray0[7] = (-219.7892018547631);
      doubleArray0[8] = (-1001.8749319);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1273.8097;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.008333333333333333);
      short short0 = MathUtils.sign((short)0);
      long long0 = MathUtils.sign((long) (short)0);
      boolean boolean0 = MathUtils.equals((-833.2990996428601), (-1328.42), (double) 0);
      float float0 = MathUtils.indicator(2098.51F);
      double double0 = MathUtils.sinh(1493.8767916);
      double double1 = MathUtils.round((double) (short)0, 643);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      long long1 = MathUtils.factorial(0);
      double double0 = MathUtils.factorialLog(0);
      double double1 = MathUtils.normalizeAngle(0.0, 4934.97);
      long long2 = MathUtils.indicator(2596L);
      int int0 = MathUtils.subAndCheck(0, 31);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4578.0;
      doubleArray0[1] = (double) 2596L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 2596L;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 4932.3004661359755;
      doubleArray0[6] = (double) 31;
      doubleArray0[7] = (double) 1L;
      doubleArray0[8] = (double) 0L;
      int int1 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.sign((short) (-75));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int2 = MathUtils.pow((-500873599), (long) 0);
      boolean boolean0 = MathUtils.equals(Double.POSITIVE_INFINITY, (-260.45178045), 31);
      double double2 = MathUtils.indicator(0.0);
      long long3 = MathUtils.subAndCheck(0L, (long) 31);
      short short1 = MathUtils.indicator((short) (-75));
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(9, 1638);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 9, k = 1,638
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = 2453.496634;
      double double1 = MathUtils.indicator(2453.496634);
      double double2 = 1.570796251296997;
      int int0 = 0;
      double double3 = MathUtils.round(1.570796251296997, 0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = (-1767.12F);
      float float1 = MathUtils.sign((-1767.12F));
      int int1 = (-1847);
      try { 
        MathUtils.pow(0, (-1847));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,847)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.4342944622039795;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 213.296;
      doubleArray0[3] = 1.633123935319537E16;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.factorialLog(0);
      double double2 = MathUtils.factorialLog(0);
      int int0 = 3505;
      double double3 = MathUtils.factorialLog(3505);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.compareTo(0.0, 25107.619962346307, (-4066.19395));
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (double) 3505, 931.864);
      double double4 = MathUtils.sinh(0.0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      try { 
        MathUtils.pow(0, (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 80;
      boolean boolean0 = MathUtils.equals(9.313225746154785E-10, Double.POSITIVE_INFINITY, 80);
      long long0 = MathUtils.pow(0L, 0L);
      int int1 = MathUtils.addAndCheck(80, 80);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 9.313225746154785E-10;
      doubleArray0[1] = (double) 80;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 9.313225746154785E-10;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = 9.313225746154785E-10;
      doubleArray0[6] = (double) 160;
      doubleArray0[7] = (double) 1L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2089));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,089
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-141), (-141));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.indicator((short)3963);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      String string0 = bigInteger1.toString(0);
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      BigInteger bigInteger4 = bigInteger3.modInverse(bigInteger1);
      int int1 = bigInteger3.signum();
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger3);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, (long) (short)3963);
      double double0 = MathUtils.normalizeAngle((short)3963, (-400.473));
      short short1 = MathUtils.sign((short) (-931));
      double double1 = MathUtils.normalizeAngle((-397.53060318263306), 0.0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      long long0 = MathUtils.lcm(354L, 2276L);
      int int0 = MathUtils.pow(3094, 354L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) 354L;
      doubleArray0[2] = (double) 3094;
      doubleArray0[3] = (double) Float.NaN;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) 402852L;
      doubleArray0[6] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(0, 0);
      double double0 = MathUtils.normalizeAngle(0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 2181.155;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-568.9961661320428);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-3454.795);
      doubleArray1[5] = 10.0;
      doubleArray1[6] = 0.09090909090909091;
      doubleArray1[7] = 896.59817422;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly decreasing (-568.996 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialLog(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = (-1693.0257);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2643.75056, (-1693.0257));
      long long0 = MathUtils.sign(2413L);
      int int0 = 130;
      double double1 = MathUtils.scalb((-1693.0257), 130);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.058823529411764705, 2643.75056);
      short short0 = MathUtils.sign((short)1886);
      int int1 = MathUtils.subAndCheck((-2701), (-2159));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) (-542);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      short short1 = MathUtils.sign((short)1886);
      int int2 = MathUtils.pow((-2701), 0);
      int int3 = MathUtils.hash(Double.NaN);
      int int4 = MathUtils.lcm(1, 9);
      long long1 = MathUtils.gcd((-321L), 527L);
      double double2 = MathUtils.binomialCoefficientLog(7, (short)1);
      int int5 = MathUtils.indicator(2146959360);
      long long2 = MathUtils.mulAndCheck((long) 130, (long) (-2701));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 130, (double) 9, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.negate();
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger2.not();
      BigInteger bigInteger4 = bigInteger0.multiply(bigInteger2);
      int int0 = bigInteger0.bitCount();
      int int1 = bigInteger0.signum();
      BigInteger bigInteger5 = bigInteger0.pow((byte)1);
      int int2 = bigInteger0.intValue();
      long long0 = 1993L;
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 1993L);
      double double0 = MathUtils.log(1.01, 1.01);
      double double1 = MathUtils.indicator((double) 1993L);
      double double2 = 683.51782;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1.0, 683.51782, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-1014L), (-1014L));
      float float0 = MathUtils.round((-1.0F), 0, 0);
      double double0 = MathUtils.cosh((-2.0F));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2.0F);
      doubleArray0[1] = 3.7621956910836314;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2.0F);
      doubleArray0[4] = 2.2250738585072014E-308;
      doubleArray0[5] = (double) (-1.0F);
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.factorialLog(0);
      int int0 = MathUtils.subAndCheck((-819), 0);
      try { 
        MathUtils.pow((-819), (-819));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-819^-819)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = (-1804);
      int int1 = MathUtils.mulAndCheck((-1804), 251);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-452804));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -452,804
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = MathUtils.round(6.283185307179586, 0);
      boolean boolean0 = MathUtils.equals(618.945, 293.762463, (double) 0);
      int int0 = MathUtils.lcm(0, 1993);
      int int1 = (-1);
      long long0 = MathUtils.binomialCoefficient(0, (-1));
      byte byte0 = MathUtils.sign((byte)0);
      int int2 = MathUtils.lcm(5, 0);
      float float0 = MathUtils.round(0.0F, (-1514), 5);
      float float1 = MathUtils.round((float) (-1514), 5);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1514);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1993;
      doubleArray0[4] = (double) 0L;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (byte)0;
      doubleArray1[1] = 618.945;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = MathUtils.pow(529L, 529L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 529L;
      doubleArray0[1] = (double) 529L;
      doubleArray0[2] = (double) 529L;
      doubleArray0[3] = (double) 529L;
      doubleArray0[4] = (double) 529L;
      doubleArray0[5] = (double) (-7540063748587893999L);
      doubleArray0[6] = (double) (-7540063748587893999L);
      doubleArray0[7] = 1.5707963267948966;
      doubleArray0[8] = (double) (-7540063748587893999L);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long1 = MathUtils.pow(4577762542105553359L, 4577762542105553359L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.flipBit(59);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 529L);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 529L, (-944), (-944));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -944, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(2.0);
      boolean boolean1 = MathUtils.equals((-1900.6), 2.0, 1739);
      double double1 = MathUtils.round(2.0, (-363));
      double double2 = MathUtils.binomialCoefficientLog(755, 0);
      int int1 = MathUtils.addAndCheck((-301), 66);
      double double3 = MathUtils.binomialCoefficientDouble(1073741824, 66);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger[] bigIntegerArray0 = bigInteger2.divideAndRemainder(bigInteger0);
      BigInteger bigInteger3 = bigInteger1.max(bigInteger2);
      float float0 = bigInteger1.floatValue();
      int int0 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 4095L);
      float float1 = MathUtils.round((float) (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = 0.08713622391223907;
      boolean boolean0 = MathUtils.equalsIncludingNaN(1302.75998698, 3353.750208650233, 0.08713622391223907);
      short short0 = MathUtils.indicator((short)2537);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.cosh((short)2537);
      long long0 = MathUtils.indicator((-422L));
      boolean boolean1 = MathUtils.equals(1302.75998698, (-433.89344953656), 0.0);
      float float0 = MathUtils.round(499.3057F, (int) (short)2537);
      int int0 = 0;
      int int1 = MathUtils.lcm((int) (short)2537, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1302.75998698;
      doubleArray0[1] = (double) (short)2537;
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 3232;
      boolean boolean0 = MathUtils.equals(3.141592653589793, 3.141592653589793, 3232);
      long long0 = MathUtils.gcd((-9223372036854775808L), 1279L);
      double double0 = MathUtils.normalizeAngle(1L, 4.0);
      long long1 = MathUtils.lcm(0L, 4503599627370496L);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.cosh(1683.3129684566);
      boolean boolean0 = MathUtils.equals(2992.5141415621, 2992.5141415621, 4997);
      double double1 = MathUtils.log(Double.POSITIVE_INFINITY, (-2662.984778068));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1683.3129684566;
      doubleArray0[1] = 2992.5141415621;
      doubleArray0[2] = Double.NaN;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = 134;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 134);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = 0.0;
      int int0 = MathUtils.hash(0.0);
      long long0 = MathUtils.lcm(1215L, (long) 0);
      double double1 = MathUtils.normalizeAngle(0.0, 551.2);
      int int1 = 1665;
      // Undeclared exception!
      try { 
        MathUtils.round((-1567.77F), 0, 1665);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,665, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = MathUtils.pow((-1763L), 244);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1753.573791), (double) (-1763L), 7);
      int int0 = MathUtils.compareTo((-8203145751675245167L), (-612.820707), 662.0899);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (-1), 0.0);
      long long1 = MathUtils.gcd((-1763L), (-1018L));
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0.5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      int int1 = MathUtils.indicator(0);
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.mulAndCheck((-3033L), 0L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("uhk,");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.uhk,
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      double double0 = MathUtils.factorialDouble(19);
      double double1 = MathUtils.binomialCoefficientDouble(67, 67);
      double double2 = MathUtils.normalizeAngle(0.1428571343421936, 0.1428571343421936);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1494.7389;
      doubleArray0[1] = 0.1428571343421936;
      doubleArray0[2] = (-1075.0);
      doubleArray0[3] = 0.1428571343421936;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow((long) 19, (long) 67);
      double double3 = MathUtils.binomialCoefficientDouble(19, 19);
      double double4 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4166.4608);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3873.1961);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-834.82808414);
      doubleArray0[5] = 1526.0;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (-367.222643);
      doubleArray0[2] = 2082.0193872321415;
      doubleArray0[3] = (-1861.604091412112);
      doubleArray0[4] = (-435.64);
      doubleArray0[5] = 1267.857;
      doubleArray0[6] = 441.05395862271314;
      doubleArray0[7] = 389.25683004246;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.round(Double.NaN, 18);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.compareTo(Double.NaN, 2986.3478739, 0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 18, 0.0, 2986.3478739);
      int int1 = MathUtils.indicator(1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2986.3478739;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NaN;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int2 = bigInteger0.intValueExact();
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 1);
      int int3 = MathUtils.subAndCheck(1, 1);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 40320L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2108.1245961;
      doubleArray0[1] = 1284.9974245109306;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2493.69;
      doubleArray0[5] = (-1369.77619294);
      doubleArray0[6] = (-1731.98782);
      doubleArray0[7] = (-4.9E-324);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = MathUtils.pow(993L, 5);
      long long1 = MathUtils.sign(965486581988193L);
      int int0 = MathUtils.pow(15, 965L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 993L, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 965486581988193L, (double) 1L);
      BigInteger bigInteger0 = BigInteger.ONE;
      long long2 = bigInteger0.longValueExact();
      // Undeclared exception!
      try { 
        MathUtils.pow(bigInteger0, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 2808);
      short short0 = MathUtils.indicator((short) (-994));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 2808;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = (-3183605296591799669L);
      long long1 = MathUtils.sign((-3183605296591799669L));
      try { 
        MathUtils.pow((-1L), (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      try { 
        MathUtils.pow((-537L), (-537L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-537^-537)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      short short0 = MathUtils.indicator((short)19);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2695), (-3473));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,695
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = 2L;
      long long1 = MathUtils.addAndCheck(2L, 0L);
      float float0 = MathUtils.indicator((float) 2L);
      int int0 = 1261;
      int int1 = MathUtils.subAndCheck(1261, 1261);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = MathUtils.compareTo((-649.8), (-1021.81708), 2.404307984052299E-9);
      short short0 = MathUtils.indicator((short)14);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-14));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -14
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      long long0 = MathUtils.pow(590L, 590L);
      int[] intArray0 = new int[7];
      intArray0[0] = 2030;
      intArray0[1] = 301;
      intArray0[2] = (-105);
      intArray0[3] = 21;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-483);
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.TWO_PI;
      int int0 = MathUtils.gcd(1479, 0);
      int int1 = MathUtils.mulAndCheck(0, 0);
      double double1 = MathUtils.normalizeAngle(1479, 0);
      long long0 = MathUtils.indicator((long) 0);
      double double2 = MathUtils.normalizeAngle(0, 0.0);
      long long1 = MathUtils.lcm((long) 0, (long) 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1479);
      int int2 = MathUtils.lcm(1479, 1479);
      BigInteger bigInteger2 = BigInteger.ZERO;
      double double3 = MathUtils.sign(1178.215258);
      int int3 = MathUtils.indicator((-2991));
      boolean boolean0 = MathUtils.equals(0.0, 3873.1961, 1621.1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 1;
      int int1 = MathUtils.pow(1, 9218868437227405312L);
      double double0 = MathUtils.factorialLog(1);
      int int2 = 0;
      try { 
        MathUtils.pow(0, (-2001L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,001)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-94.23351100586802), (-94.23351100586802), 962.8);
      long long0 = MathUtils.sign((-479L));
      int int0 = 0;
      int int1 = MathUtils.pow(0, 0L);
      double[] doubleArray0 = new double[0];
      int int2 = MathUtils.hash(doubleArray0);
      int int3 = MathUtils.gcd((-4035), 0);
      int int4 = MathUtils.subAndCheck(0, 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      long long1 = (-1850L);
      // Undeclared exception!
      try { 
        bigInteger0.min((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = MathUtils.pow(479001600L, 479001600L);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2710.505853112924, (double) 479001600L, 0.0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        MathUtils.pow((-32666), (long) (-32666));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-32,666^-32,666)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = MathUtils.factorialLog(13);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-5379.126898554751);
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      MathUtils.checkOrder(doubleArray0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-782.574373305);
      doubleArray0[1] = 1.225743062930824E-8;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      int int1 = (-1605);
      double double0 = MathUtils.binomialCoefficientLog(1, (-1605));
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1605));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,605
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 4;
      boolean boolean0 = MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 4);
      double double0 = 2.85040095144011776E17;
      boolean boolean1 = MathUtils.equals(Double.POSITIVE_INFINITY, 2.85040095144011776E17, 4);
      double double1 = 2356.116419;
      boolean boolean2 = MathUtils.equals(2356.116419, Double.POSITIVE_INFINITY, 4);
      long long0 = MathUtils.lcm((long) 4, 2047L);
      int int1 = MathUtils.gcd(305, 4);
      long long1 = MathUtils.binomialCoefficient(305, 4);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("NOT_POSITIVE_MEAN");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.NOT_POSITIVE_MEAN
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = (-3383);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-3383), (-3383));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -3,383
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-507), (-715));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -507
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.factorial(0);
      int int1 = MathUtils.mulAndCheck(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 1777);
      long long0 = MathUtils.pow(6722166367014452318L, 0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, (-925.941051347));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-96));
      byte byte1 = MathUtils.indicator((byte) (-96));
      long long0 = MathUtils.addAndCheck((long) (byte) (-1), 6227020800L);
      int int0 = MathUtils.pow((int) (byte) (-96), 0L);
      int int1 = MathUtils.hash(0.19999999999923582);
      double double0 = MathUtils.sinh((byte) (-1));
      try { 
        MathUtils.pow((-717L), (-1504659564));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-717^-1,504,659,564)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-273L), (-1850L));
      double double0 = MathUtils.sinh(0.0);
      long long1 = MathUtils.gcd(505050L, (-2311L));
      double double1 = MathUtils.sign(0.0);
      int int0 = 0;
      int int1 = 426;
      // Undeclared exception!
      try { 
        MathUtils.round(2641.179F, 0, 426);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 426, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 67;
      double double0 = MathUtils.factorialDouble(67);
      // Undeclared exception!
      try { 
        MathUtils.factorial(67);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 52;
      // Undeclared exception!
      try { 
        MathUtils.factorial(52);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = MathUtils.pow(0, 15);
      double double0 = MathUtils.cosh(2425.8);
      long long0 = MathUtils.pow((long) 15, 0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-188.75816), (-188.75816), 255);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow(255, 127);
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.indicator((-1846.0));
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.subAndCheck((long) 255, (long) 127);
      int int1 = MathUtils.compareTo(0.14982303977012634, 0.0, 1056.98281456373);
      int int2 = MathUtils.subAndCheck(0, 255);
      double double4 = MathUtils.sign(1156.63057581);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2009.93;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-4744.415148120633);
      doubleArray0[6] = (-178.0562005401399);
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2009.93);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)106);
      long long0 = MathUtils.mulAndCheck((long) (byte)106, (long) (byte)106);
      short short0 = MathUtils.sign((short) (byte)1);
      boolean boolean0 = MathUtils.equals(42.0, (double) (short)1, 42.0);
      float float0 = MathUtils.round(Float.NaN, (int) (short)1, (int) (short)1);
      int int0 = MathUtils.sign((int) (short)1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 42.0;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) 11236L;
      doubleArray0[3] = (double) Float.NaN;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int1 = MathUtils.indicator(709);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.negate();
      BigInteger bigInteger3 = bigInteger1.not();
      String string0 = bigInteger0.toString(0);
      BigInteger bigInteger4 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 0);
      long long0 = MathUtils.subAndCheck((long) 0, (long) 0);
      double double0 = MathUtils.indicator(296.5517971195748);
      long long1 = MathUtils.mulAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.sign(0.0);
      int int0 = MathUtils.gcd(0, (-1530));
      byte byte0 = MathUtils.sign((byte) (-55));
      int int1 = MathUtils.gcd(1051, 31);
      double double2 = MathUtils.log(0.0, (-1530));
      long long0 = MathUtils.indicator((long) (byte) (-1));
      double double3 = MathUtils.factorialDouble(11);
      int int2 = MathUtils.indicator((int) (byte) (-1));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 11;
      doubleArray0[3] = 1196.373724;
      double double4 = MathUtils.distance1(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        bigInteger1.divide(bigInteger0);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = (-927);
      int int1 = (-1);
      try { 
        MathUtils.pow((-927), (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-927^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = 0L;
      int int0 = (-98);
      try { 
        MathUtils.pow(0L, (-98));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-98)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3483.0;
      doubleArray0[3] = 420.334252929;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 4565;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 4565, 4565);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = MathUtils.sign(1118);
      float float0 = MathUtils.indicator((float) 1118);
      double double0 = MathUtils.sign(1.4456468917292502E-16);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(590.2079656865, 590.2079656865, 335.94);
      int int0 = MathUtils.sign((-48));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(116, 116);
      int int1 = MathUtils.lcm(0, 0);
      long long0 = MathUtils.indicator((-2502L));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-2502L);
      doubleArray0[2] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.factorialLog(1077);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathUtils.sign(10.0);
      double double1 = MathUtils.factorialDouble(1015);
      float float0 = MathUtils.indicator((float) 1015);
      byte byte0 = MathUtils.sign((byte) (-124));
      double double2 = MathUtils.log(0.1538461446762085, 1.0);
      int int0 = MathUtils.indicator((int) (byte) (-1));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 0.1538461446762085;
      doubleArray0[2] = (double) (byte) (-124);
      doubleArray0[3] = (double) 1.0F;
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-124);
      intArray0[2] = (-1);
      intArray0[3] = (int) (byte) (-124);
      intArray0[4] = (int) (byte) (-124);
      intArray0[5] = 1015;
      int[] intArray1 = new int[7];
      intArray1[0] = (int) (byte) (-124);
      intArray1[1] = (-1);
      intArray1[2] = (int) (byte) (-1);
      intArray1[3] = 1015;
      intArray1[4] = (int) (byte) (-124);
      intArray1[5] = (-1);
      intArray1[6] = (-1);
      double double4 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      double double0 = MathUtils.factorialDouble(4);
      float float0 = MathUtils.round(1423.8F, 0);
      double double1 = MathUtils.factorialDouble(0);
      int int0 = MathUtils.pow(3168, (long) 0);
      byte byte0 = MathUtils.sign((byte)27);
      int int1 = MathUtils.pow(4, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1297.3555928), (double) 1, (int) (byte)27);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double double2 = MathUtils.round(0.0, 0, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      int int0 = MathUtils.gcd(1210, 1210);
      long long0 = MathUtils.subAndCheck((-3183605296591799669L), 0L);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      int int1 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(470, 0);
      double double1 = MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2132;
      intArray0[1] = (-9);
      intArray0[2] = 0;
      intArray0[3] = 1014;
      intArray0[4] = 63;
      intArray0[5] = 2223;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.1818181574344635, 0.1818181574344635);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-66);
      byteArray0[8] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      int int0 = (-1330);
      try { 
        MathUtils.pow(bigInteger0, (-1330));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1,330)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.round((-2745.3605655325773), 0);
      double double1 = MathUtils.round(1110.8128966, 2700);
      long long0 = MathUtils.mulAndCheck((-2976L), (long) 2700);
      byte byte0 = MathUtils.sign((byte)63);
      long long1 = MathUtils.indicator((long) 2700);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-8035200L), 0, 2700);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2707;
      intArray0[1] = 0;
      intArray0[2] = 3642;
      intArray0[3] = 1323;
      intArray0[4] = (-146);
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 377.24633719;
      doubleArray0[0] = 377.24633719;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 377.24633719);
      double double1 = MathUtils.safeNorm(doubleArray1);
      int int0 = MathUtils.hash(doubleArray1);
      double double2 = MathUtils.log((-1087078726), (-1087078726));
      double double3 = MathUtils.distance(doubleArray1, doubleArray0);
      boolean boolean0 = MathUtils.equals((-685.8325812350796), Double.NaN);
      BigInteger bigInteger0 = null;
      try { 
        MathUtils.pow((BigInteger) null, (-1087078726));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-1,087,078,726)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathUtils.round(0.0, (-1674));
      int int0 = MathUtils.gcd((-1674), 903);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)35;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals((-541.5), (-541.5), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 0.0, (-4006));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      float float0 = MathUtils.sign((-1.0F));
      double double1 = MathUtils.round((-110.8), 20);
      int[] intArray0 = new int[2];
      intArray0[0] = 20;
      intArray0[1] = 20;
      double double2 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.sign(1093L);
      byte byte0 = MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-9218868437227405313L), (-9218868437227405313L));
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -9,218,868,437,227,405,313 + -9,218,868,437,227,405,313
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-101L), (-101L));
      int int0 = MathUtils.hash((double) (-101L));
      double double0 = MathUtils.binomialCoefficientDouble(410, 64);
      double double1 = MathUtils.factorialDouble(100);
      int int1 = MathUtils.gcd(2, 410);
      byte byte0 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 1492);
      long long0 = MathUtils.addAndCheck((long) 1492, (long) 1492);
      double double0 = 21.0;
      int int0 = 460;
      // Undeclared exception!
      try { 
        MathUtils.round(21.0, 1492, 460);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = MathUtils.scalb((-4460.7459), 55);
      int[] intArray0 = new int[3];
      intArray0[0] = 55;
      intArray0[1] = 55;
      intArray0[2] = 55;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.log(55, 255.2459);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 55;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 55;
      doubleArray0[4] = (double) 55;
      doubleArray0[5] = (-1.6071530858427574E20);
      doubleArray0[6] = (double) 55;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 55)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 4318;
      int int1 = 0;
      int int2 = MathUtils.addAndCheck(4318, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4318;
      doubleArray0[1] = (double) 4318;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (4,318 <= 4,318)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathUtils.sinh(2119.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 182;
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.binomialCoefficient(182, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 182;
      doubleArray0[2] = 2119.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 182)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, (-652L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.normalizeAngle((-652L), (-652L));
      int[] intArray0 = new int[2];
      intArray0[0] = 2014;
      intArray0[1] = (-2195);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = MathUtils.indicator((-2255.76897));
      double double1 = MathUtils.factorialDouble(0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2255.76897);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1.0);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float float0 = MathUtils.round(Float.NaN, (-2136));
      double double0 = MathUtils.scalb(Float.NaN, (-2136));
      byte byte0 = MathUtils.sign((byte)0);
      short short0 = MathUtils.sign((short)0);
      double double1 = MathUtils.cosh((short)0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      float float0 = MathUtils.round(2777.3F, 0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = MathUtils.log(0.0, (-388.93555));
      double double1 = MathUtils.factorialDouble(0);
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-388.93555);
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = Double.NaN;
      double double3 = MathUtils.distance1(doubleArray0, doubleArray1);
      int int0 = MathUtils.compareTo(0.0, Double.NaN, Double.NaN);
      double double4 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm((long) 1, 2935890503282001226L);
      int int1 = MathUtils.subAndCheck((-3591), 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 2935890503282001226L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.lcm(3628800L, 2935890503282001226L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      int int0 = MathUtils.mulAndCheck(8, 8);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1686L, 139L);
      float float0 = MathUtils.sign((float) 139L);
      short short0 = (short) (-1923);
      short short1 = MathUtils.indicator((short) (-1923));
      long long1 = MathUtils.addAndCheck(20922789888000L, (long) (short) (-1));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 2);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = MathUtils.lcm((-92), 45);
      double double0 = MathUtils.scalb(4140, 902);
      int int1 = MathUtils.gcd(0, 0);
      boolean boolean0 = MathUtils.equals(2.479773539153719E-5, (double) 902, (double) 4140);
      long long0 = MathUtils.gcd(39916800L, (long) 45);
      long long1 = MathUtils.pow((long) 45, 0L);
      boolean boolean1 = MathUtils.equals(0.0, (double) 902);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) 0, 2.1018728, 45);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-92);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 45;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 45L;
      int int2 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.binomialCoefficientDouble(4140, 0);
      float float0 = MathUtils.indicator((-1.0F));
      double double2 = MathUtils.round((double) (-1.0F), 4140);
      double double3 = MathUtils.scalb(1.0, 1411);
      int[] intArray0 = new int[8];
      intArray0[0] = 3586;
      intArray0[1] = 167062751;
      intArray0[2] = 45;
      intArray0[3] = 45;
      intArray0[4] = 902;
      intArray0[5] = 0;
      intArray0[6] = (-2479);
      intArray0[7] = 902;
      int[] intArray1 = new int[4];
      intArray1[0] = 3329;
      intArray1[1] = 0;
      intArray1[2] = 1411;
      intArray1[3] = 3586;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = 6402373705728000L;
      int int0 = (-1015);
      try { 
        MathUtils.pow(6402373705728000L, (-1015));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (6,402,373,705,728,000^-1,015)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 17;
      int int1 = MathUtils.pow(17, 17);
      float float0 = 0.0F;
      int int2 = 15;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 15, 1681328401);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,681,328,401, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = 2493.4185479753974;
      int int0 = (-1254);
      // Undeclared exception!
      try { 
        MathUtils.round(2493.4185479753974, (-1254), (-1254));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = 0.0;
      int int0 = MathUtils.hash(0.0);
      int int1 = (-1643);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1643));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,643
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(414.56, 2.7553817452272217E-6, (-181.39220672));
      boolean boolean1 = MathUtils.equals(0.0, (double) 0L);
      double double0 = MathUtils.indicator(0.0);
      int int0 = MathUtils.pow(1244, 876L);
      try { 
        MathUtils.pow(1244, (-3199));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,244^-3,199)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
