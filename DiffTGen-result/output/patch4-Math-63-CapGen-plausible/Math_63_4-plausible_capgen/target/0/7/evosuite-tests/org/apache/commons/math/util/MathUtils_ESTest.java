/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:35:34 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.factorial(17);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 17;
      doubleArray1[1] = (double) 17;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      short short0 = MathUtils.sign((short)0);
      int int0 = MathUtils.compareTo(0.0, 0.0, 3563.3125453971);
      double double1 = MathUtils.factorialDouble(0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float float0 = MathUtils.round(1.0F, 777, 6);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) Float.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 0;
      double double1 = MathUtils.scalb(0.0, 0);
      String string0 = "ROUND_HALF_DOWN";
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("ROUND_HALF_DOWN");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.ROUND_HALF_DOWN
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("AT_LEAST_ONE_COLUMN");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.AT_LEAST_ONE_COLUMN
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3622.879240309055;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.addAndCheck(0, (-92));
      double double1 = MathUtils.indicator((double) (-92));
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      MathUtils.checkOrder(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2572.48, (double) (-92), 11);
      int[] intArray0 = new int[7];
      intArray0[0] = (-92);
      intArray0[1] = 6;
      intArray0[2] = 1867;
      intArray0[3] = (-92);
      intArray0[4] = 11;
      intArray0[5] = (-92);
      intArray0[6] = 11;
      int[] intArray1 = new int[5];
      intArray1[0] = 6;
      intArray1[1] = 0;
      intArray1[2] = 1867;
      intArray1[3] = (-92);
      intArray1[4] = (-518);
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      float float0 = MathUtils.sign(0.0F);
      try { 
        MathUtils.pow((long) 0, (-908));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-908)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-638.9349731);
      doubleArray0[1] = 1406.76357785433;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 7.0;
      doubleArray0[4] = 10.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-638.935 < 1,406.764)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 0.9999997615814209;
      doubleArray0[2] = 13.0;
      doubleArray0[3] = (-996.94013383975);
      doubleArray0[4] = 1959.304679697888;
      doubleArray0[5] = 1.2393345855018391E-8;
      doubleArray0[6] = 1183.0990190614;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.subAndCheck((-2128), (-2128));
      short short0 = MathUtils.sign((short)0);
      long long0 = MathUtils.addAndCheck((long) 0, (long) (short)0);
      float float0 = MathUtils.round((float) (-2128), 28);
      float float1 = MathUtils.indicator((-3586.2F));
      double double1 = MathUtils.log(0.167, 13.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-251), 28);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -251, k = 28
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 1787;
      int int1 = MathUtils.pow(1787, 1787);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1132919523;
      doubleArray0[1] = (double) 1787;
      int int2 = MathUtils.hash(doubleArray0);
      int int3 = MathUtils.sign(1787);
      double double0 = MathUtils.sign((double) 1787);
      // Undeclared exception!
      MathUtils.factorialDouble(1132919523);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = MathUtils.sign((-214L));
      int[] intArray0 = new int[8];
      intArray0[0] = 5;
      intArray0[1] = (-506);
      intArray0[2] = 0;
      intArray0[3] = 130;
      intArray0[4] = 758;
      intArray0[5] = (-7);
      intArray0[6] = (-3605);
      intArray0[7] = (-4146);
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long1 = MathUtils.pow(0L, 229);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-128);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 2368);
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = MathUtils.sign((-4267615245585081135L));
      long long1 = MathUtils.indicator((-1L));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-4267615245585081135L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-4267615245585081135L);
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = MathUtils.pow(1978L, 4157);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1978L;
      doubleArray0[2] = (double) 1978L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 4157;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 1978L;
      doubleArray0[7] = (double) 4157;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.round((-219.0), 4157);
      int[] intArray0 = new int[5];
      intArray0[0] = 4157;
      intArray0[1] = 4157;
      intArray0[2] = 4157;
      intArray0[3] = 4157;
      intArray0[4] = 4157;
      int[] intArray1 = new int[6];
      intArray1[0] = 4157;
      intArray1[1] = 17;
      intArray1[2] = 4157;
      intArray1[3] = 4157;
      intArray1[4] = 1225;
      intArray1[5] = 4157;
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
      double double2 = MathUtils.indicator(3137.13619);
      long long1 = MathUtils.mulAndCheck((long) 4157, (-423L));
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.pow(16, 55L);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.479773539153719E-5;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1385.8782013974);
      doubleArray0[4] = 2658.139695461;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-948.044);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.factorialDouble(20);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.addAndCheck(20, (-69));
      int int1 = MathUtils.sign((-49));
      int int2 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-49));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -49
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = MathUtils.lcm((-1635), (-1635));
      boolean boolean0 = MathUtils.equals((double) 1635, (double) 1635, 1635);
      double double0 = MathUtils.round((double) (-1635), 1635);
      double double1 = MathUtils.indicator(0.0);
      int int1 = (-423);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-1635), 1635, (-423));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -423, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1035);
      short short1 = MathUtils.indicator((short)217);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)217, 2552.257571841, (int) (short)1);
      int int0 = MathUtils.hash((double) (short)1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)217;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = 2552.257571841;
      doubleArray0[4] = (double) (short)1035;
      doubleArray0[5] = (double) (short)1035;
      doubleArray0[6] = 2.0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (short)1;
      doubleArray1[1] = (double) (short)1;
      doubleArray1[2] = 2552.257571841;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      long long0 = MathUtils.mulAndCheck(1L, 1L);
      short short0 = (short)1423;
      short short1 = MathUtils.indicator((short)1423);
      int int0 = MathUtils.pow(746, 24L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-947.5), (double) 746, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      double double1 = MathUtils.normalizeAngle(0.0, 1.176342548272881E-8);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("nk\"hG`}-PW;pq$+/J");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.nk\"hG`}-PW;pq$+/J
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = MathUtils.gcd(6722166367014452318L, 6722166367014452318L);
      double double0 = MathUtils.log(0.0, 0.0);
      long long1 = MathUtils.subAndCheck((-1304L), 6722166367014452318L);
      int int0 = MathUtils.compareTo(0.0, 7.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, (-3358.1998603282254), (-1));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(222, 222);
      int[] intArray0 = new int[6];
      intArray0[0] = (-942);
      intArray0[1] = 222;
      intArray0[2] = 222;
      intArray0[3] = 222;
      intArray0[4] = 222;
      intArray0[5] = 222;
      int[] intArray1 = new int[3];
      intArray1[0] = 38;
      intArray1[1] = 222;
      intArray1[2] = 222;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.gcd(0L, 0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.25, 0.25);
      float float0 = MathUtils.round((-785.99F), (-1037), 1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = MathUtils.sinh((-4015.251358691));
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1443.83), (-1443.83), 1);
      int int1 = 59;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1, 59);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 59
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)0;
      byte byte0 = (byte)123;
      byteArray0[4] = (byte)123;
      byte byte1 = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger1.modInverse(bigInteger0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger1);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-18,402,152,443,870,720)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 5, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 0;
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float float0 = MathUtils.indicator(1.0F);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1819.00139), 0.0, (-1819.00139));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (-1808.3354676791);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (-1819.00139);
      doubleArray0[6] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.sinh(0.875);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(0, 0);
      long long0 = MathUtils.subAndCheck((long) 1, 2073L);
      long long1 = MathUtils.sign((long) 1);
      boolean boolean0 = MathUtils.equals((double) 1, (-145.591951), 1);
      long long2 = MathUtils.lcm((-1274L), 121645100408832000L);
      byte byte0 = MathUtils.sign((byte) (-95));
      boolean boolean1 = MathUtils.equals((double) (byte) (-95), 0.0, (-1584.834));
      float float0 = MathUtils.round(1763.2F, (int) (byte) (-1));
      double double0 = MathUtils.normalizeAngle(2050.7034863839, 5377.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 5377.0;
      doubleArray0[1] = (-1584.834);
      doubleArray0[2] = (double) 1760.0F;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-145.591951);
      doubleArray0[5] = 5377.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1763.2F;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (5,377 >= -1,584.834)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = MathUtils.sign((-2258L));
      try { 
        MathUtils.pow((-1L), (-1235));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1,235)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1.0E-6), (-270.0));
      boolean boolean1 = MathUtils.equals((-1.0E-6), (-270.0), (-270.0));
      float float0 = MathUtils.sign((-3100.0F));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-912.712598666), 1627.356, (-3298));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(3628800L, 0L);
      int int0 = (-77);
      int int1 = 1184;
      int int2 = MathUtils.mulAndCheck((-77), 1184);
      int int3 = (-2321);
      int int4 = (-672);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2321), (-672));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,321, k = -672
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = (-3622);
      try { 
        MathUtils.pow((-3622), (long) (-3622));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,622^-3,622)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.05;
      doubleArray0[2] = 85.80705822836;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 0.13333332538604736;
      doubleArray0[5] = (-422.0698154);
      doubleArray0[6] = 1024.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 1024.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 3
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = MathUtils.pow(14, 14);
      int int1 = 3;
      try { 
        MathUtils.pow(3, (-3833L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (3^-3,833)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = MathUtils.pow(1475, 1475);
      int int1 = (-2005);
      int int2 = MathUtils.lcm((-2005), 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1471214683;
      doubleArray0[2] = (double) 1475;
      doubleArray0[3] = (double) 1471214683;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-2005);
      doubleArray0[6] = 3263.0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 1471214683;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.scalb((-2662.24747504), Integer.MIN_VALUE);
      double double2 = MathUtils.factorialLog(0);
      double double3 = MathUtils.sign((-1752.451770307));
      byte byte0 = MathUtils.sign((byte) (-37));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = bigInteger0.toString(256);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 423.15097192);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.2958646899018938E-9;
      doubleArray0[3] = (-1957.02466653117);
      doubleArray0[4] = 1402.472;
      doubleArray0[5] = (-3047.35440678943);
      doubleArray0[6] = 442.70920800269;
      doubleArray0[7] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
      int[] intArray0 = new int[2];
      int int0 = 74;
      intArray0[0] = 74;
      intArray0[1] = 284;
      int[] intArray1 = new int[3];
      intArray1[0] = 74;
      intArray1[1] = 74;
      intArray1[2] = 284;
      double double1 = MathUtils.distance(intArray0, intArray1);
      int int1 = MathUtils.addAndCheck(74, 7);
      int int2 = MathUtils.pow(0, 284);
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray1, intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2763.09, 2763.09, 987);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, (long) 987);
      int int0 = MathUtils.gcd(987, (-600));
      float float0 = MathUtils.round((-1466.2F), 987);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1466.2F);
      doubleArray0[1] = (double) (-600);
      doubleArray0[2] = (double) (-600);
      doubleArray0[3] = (double) Float.NaN;
      doubleArray0[4] = (double) (-1466.2F);
      doubleArray0[5] = (double) (-1466.2F);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-600);
      short short1 = bigInteger0.shortValueExact();
      intArray0[1] = (int) (short)0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.normalizeAngle((-3.940510424527919E-20), (-600));
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-600.0));
      boolean boolean1 = MathUtils.equals((double) (-600), (-1989.4887488359), 1972);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-873.6118584);
      doubleArray0[1] = (-1169.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (-873.612 > -1,169)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1937.921707035329);
      doubleArray0[1] = 1523.561298385;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-0.1666666567325592);
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-581.1);
      doubleArray0[6] = 3.141592653589793;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = 10;
      double double0 = MathUtils.factorialLog(10);
      int int1 = MathUtils.gcd(10, 10);
      double double1 = MathUtils.log((-1.0), 0.0);
      long long0 = (-463L);
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(9223372036854775807L, (-463L));
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 463 + 9,223,372,036,854,775,807
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 688.58665;
      doubleArray0[1] = 1601.5;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1021.5);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1889.293229030693;
      doubleArray0[5] = (-571.461344);
      doubleArray0[6] = (-3074.8187058);
      doubleArray0[7] = 75.54;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathUtils.indicator(0.16666666666745392);
      double double1 = MathUtils.round(0.16666666666745392, 47);
      int int0 = MathUtils.sign(47);
      double double2 = MathUtils.sinh(0.0);
      long long0 = MathUtils.pow(94L, (long) 47);
      int int1 = MathUtils.subAndCheck(47, 47);
      double double3 = MathUtils.factorialDouble(1);
      int int2 = MathUtils.hash((double) 0);
      long long1 = MathUtils.lcm((long) 47, (-1779L));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-116);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-1885L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (566,950,951,820^-1,885)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 1446.237;
      double double2 = MathUtils.log(0.0, 1446.237);
      double double3 = (-3.141592653589793);
      int int0 = 19;
      boolean boolean0 = MathUtils.equalsIncludingNaN(-0.0, (-3.141592653589793), 19);
      // Undeclared exception!
      try { 
        MathUtils.round(-0.0, 19, 19);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = MathUtils.hash((-1055.847));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      short short0 = MathUtils.sign((short)0);
      int int1 = MathUtils.sign((int) (short)0);
      short short1 = MathUtils.indicator((short) (-1451));
      int int2 = MathUtils.compareTo((short)0, (short)0, 192.0);
      long long0 = MathUtils.pow((long) 0, (int) (short)0);
      long long1 = MathUtils.addAndCheck((long) (short)0, 0L);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.11113807559013367, 0.0, (-1268));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(5322.818510373584, 5322.818510373584, 95.68);
      double double0 = MathUtils.scalb(780.3616473, 0);
      double double1 = MathUtils.factorialDouble(52);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      float float0 = MathUtils.indicator(0.0F);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (double) 0.0F, (double) 0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 239.3221249319;
      doubleArray0[2] = (-1965.82731);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)0);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = MathUtils.cosh(0.7853981633974483);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.3246090892520057;
      doubleArray0[1] = 0.7853981633974483;
      doubleArray0[2] = 0.7853981633974483;
      doubleArray0[3] = 1504.185;
      doubleArray0[4] = 0.7853981633974483;
      doubleArray0[5] = 0.7853981633974483;
      doubleArray0[6] = 0.7853981633974483;
      doubleArray0[7] = 0.7853981633974483;
      doubleArray0[8] = 2.2250738585072014E-308;
      double double1 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.indicator((-1.0F));
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = MathUtils.compareTo(2590.618604, 2590.618604, 2590.618604);
      float float0 = MathUtils.indicator((float) 0);
      int int1 = MathUtils.hash(3673.5539426181817);
      short short0 = MathUtils.indicator((short)31);
      double double0 = MathUtils.binomialCoefficientDouble(203, (short)31);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.pow(0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (int) (short)1);
      int[] intArray0 = new int[4];
      intArray0[0] = 203;
      intArray0[1] = 54;
      intArray0[2] = (-554607876);
      intArray0[3] = 207;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)31, 1461.555, (-362.93829119526));
      byte byte0 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(255, (-1929));
      int[] intArray0 = new int[8];
      intArray0[0] = (-1929);
      intArray0[1] = 255;
      intArray0[2] = 1003;
      intArray0[3] = 255;
      intArray0[4] = (-1929);
      intArray0[5] = 255;
      intArray0[6] = (-1929);
      intArray0[7] = (-1929);
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.hash(1.0E-6);
      double double1 = MathUtils.binomialCoefficientLog(2520, 5);
      int int2 = MathUtils.hash((double) 255);
      long long0 = MathUtils.mulAndCheck(4503599627370496L, 1572L);
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)157);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (short)1;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 2520, 3837, 255);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 255, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = MathUtils.lcm((-509L), (-509L));
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.intValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int int1 = bigInteger0.intValue();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) 1);
      long long1 = MathUtils.subAndCheck(0L, 509L);
      MockRandom mockRandom0 = new MockRandom(1);
      BigInteger bigInteger3 = BigInteger.probablePrime(1140, mockRandom0);
      boolean boolean0 = MathUtils.equals((-1826.92), (double) 1, (-1629.66092311556));
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      int[] intArray1 = new int[4];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 1;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 1242.2814);
      double double0 = MathUtils.log(0.15, 3572.78);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathUtils.factorialLog(60);
      long long0 = MathUtils.indicator(2935890503282001226L);
      boolean boolean0 = MathUtils.equals((-820.9782468898807), 2246.2);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 60;
      doubleArray0[1] = 2246.2;
      doubleArray0[2] = (-820.9782468898807);
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = (-820.9782468898807);
      doubleArray0[5] = (double) 60;
      doubleArray0[6] = (double) 2935890503282001226L;
      doubleArray0[7] = (double) 2935890503282001226L;
      doubleArray0[8] = 2246.2;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1588.65686);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = MathUtils.pow(Integer.MIN_VALUE, 9154082963658192752L);
      int int1 = MathUtils.subAndCheck(Integer.MIN_VALUE, (-2723));
      double double0 = MathUtils.sinh((-1368.1674386));
      double double1 = MathUtils.scalb(9154082963658192752L, (-2147480925));
      byte byte0 = MathUtils.sign((byte)18);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = (-1L);
      long long1 = MathUtils.gcd(2174L, (-1L));
      int int0 = 0;
      int int1 = (-323);
      double double0 = MathUtils.binomialCoefficientLog(0, (-323));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2174L;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = MathUtils.sign(Integer.MIN_VALUE);
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MIN_VALUE;
      intArray0[1] = Integer.MIN_VALUE;
      intArray0[2] = Integer.MIN_VALUE;
      intArray0[3] = (-1);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.binomialCoefficientLog(353, Integer.MIN_VALUE);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 353;
      doubleArray0[1] = (double) Integer.MIN_VALUE;
      doubleArray0[2] = (double) Integer.MIN_VALUE;
      doubleArray0[3] = (double) Integer.MIN_VALUE;
      doubleArray0[4] = (double) Integer.MIN_VALUE;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = 0.0;
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1204.65);
      doubleArray0[2] = 118.928059947713;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-4680.18697722508);
      doubleArray0[5] = 8.0E298;
      doubleArray0[6] = (-5377.801);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.binomialCoefficientDouble(52, (-2861));
      int int0 = MathUtils.gcd(0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(0);
      BigInteger bigInteger2 = BigInteger.valueOf((-2861));
      String string0 = bigInteger0.toString(175);
      try { 
        MathUtils.pow(bigInteger0, (-2861));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-2,861)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = 6.283185307179586;
      double double1 = MathUtils.cosh(6.283185307179586);
      float float0 = Float.NaN;
      float float1 = MathUtils.sign(Float.NaN);
      int int0 = (-87);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(267.7467614837482, 6.283185307179586, (-87));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-793));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -793
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = (-1247);
      int int1 = 89;
      int int2 = MathUtils.subAndCheck((-1247), 89);
      double double0 = MathUtils.sign((double) (-1336));
      long long0 = MathUtils.pow((-1467L), 89);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1247));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,247
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = (short)12;
      short short1 = MathUtils.indicator((short)12);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)12;
      intArray0[3] = (int) (short)12;
      intArray0[4] = (int) (short)1;
      intArray0[5] = (int) (short)12;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 12;
      doubleArray0[2] = 0.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.indicator((-1449.4));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (12 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, Double.NEGATIVE_INFINITY);
      double double0 = MathUtils.binomialCoefficientLog(18, 18);
      double double1 = MathUtils.round(0.0, 18);
      long long0 = MathUtils.addAndCheck((long) 18, (-4368L));
      byte byte0 = MathUtils.indicator((byte)3);
      int int0 = MathUtils.gcd((-2064), (-2064));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2064;
      doubleArray0[2] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,064 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 1030;
      int int1 = 0;
      int int2 = MathUtils.lcm(1030, 0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(1030);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 116;
      double double0 = MathUtils.binomialCoefficientDouble(116, 116);
      boolean boolean0 = MathUtils.equals((double) 116, (double) 116, 116);
      long long0 = MathUtils.lcm((long) 116, (long) 116);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 116, 116, 116);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      double double1 = MathUtils.round(0.0, 8);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-771L), (-771L));
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1906;
      intArray0[1] = 116;
      intArray0[2] = 369;
      intArray0[3] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.lcm((long) 0, (long) 0);
      long long1 = MathUtils.mulAndCheck((long) 0, (long) 116);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-239), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -239, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = MathUtils.sign(56);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1, 236.8844318, 1.1102230246251565E-16);
      byte byte0 = MathUtils.indicator((byte) (-37));
      double double0 = MathUtils.indicator((double) 56);
      int int1 = MathUtils.mulAndCheck(56, 236);
      int int2 = MathUtils.gcd(13216, (-154));
      long long0 = MathUtils.subAndCheck((long) (byte) (-37), (long) 13216);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 7.549789948768648E-8;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 236;
      doubleArray0[4] = (double) 14;
      doubleArray0[5] = (double) 14;
      doubleArray0[6] = 1.1102230246251565E-16;
      doubleArray0[7] = (double) 14;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long1 = MathUtils.sign(0L);
      long long2 = MathUtils.subAndCheck(0L, 0L);
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long3 = MathUtils.lcm(0L, 0L);
      long long4 = MathUtils.subAndCheck(1L, (-3183605296591799669L));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      long long0 = bigInteger0.longValueExact();
      int int0 = bigInteger0.bitCount();
      int int1 = bigInteger0.bitCount();
      long long1 = 121645100408832000L;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 121645100408832000L);
      BigInteger bigInteger2 = bigInteger1.clearBit(0);
      long long2 = MathUtils.pow(121645100408832000L, 121645100408832000L);
      // Undeclared exception!
      try { 
        bigInteger0.remainder(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(87178291200L, 87178291200L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 87178291200L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals((double) 87178291200L, (-525.002), 13);
      boolean boolean2 = MathUtils.equals((-525.002), (double) 13, 0.625);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.2857142686843872;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2028.055);
      doubleArray0[5] = 5745.7928;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 5281;
      // Undeclared exception!
      try { 
        MathUtils.round((-2257.5501906), 5281, 5281);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.indicator(10.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 10.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = MathUtils.indicator((-2596.0));
      long long0 = MathUtils.gcd((-1L), 0L);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = MathUtils.factorialLog(152);
      int int0 = MathUtils.indicator((-3070));
      double double1 = MathUtils.sign((-633.613818610286));
      // Undeclared exception!
      try { 
        MathUtils.round((float) 152, (-3403), (-3403));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -3,403, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = Double.NaN;
      double double1 = MathUtils.sinh(Double.NaN);
      double double2 = MathUtils.sign(Double.NaN);
      BigInteger bigInteger0 = BigInteger.TEN;
      double double3 = bigInteger0.doubleValue();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)51;
      int int0 = bigInteger0.bitCount();
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)31;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.mod(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.cosh(10.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(11013.232920103324, 10.0, 11013.232920103324);
      double double1 = MathUtils.normalizeAngle(10.0, 10.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(10.0, (-2134.098281535), 2004);
      try { 
        MathUtils.pow((-289L), (-289L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-289^-289)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = MathUtils.pow((-403L), 2906L);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.indicator((-302932621132653753L));
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-1L), 0, (-3053));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -3,053, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 1.0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 5040L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(252, 252);
      int[] intArray0 = new int[3];
      intArray0[0] = 252;
      intArray0[1] = 252;
      intArray0[2] = 504;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = bigInteger0.toString();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 504);
      double double0 = MathUtils.round((double) 504, (-1761));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.normalizeAngle(2.479773539153719E-5, 504);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = 87178291200L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(87178291200L, 87178291200L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-1034), (-384));
      int int1 = 0;
      float float0 = MathUtils.round((float) (-650), 64, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 592.992122;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = (double) (-650);
      doubleArray0[3] = (double) (-384);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.normalizeAngle((-650), 0.0);
      short short0 = (short)120;
      short short1 = MathUtils.indicator((short)120);
      long long0 = MathUtils.subAndCheck(2147483647L, 1568L);
      try { 
        MathUtils.pow((int) (short)120, (-650));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (120^-650)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = MathUtils.sign(31);
      int int1 = (-1571);
      double double0 = MathUtils.round(0.0, (-1571));
      int int2 = MathUtils.subAndCheck((-1571), 31);
      short short0 = MathUtils.sign((short) (-829));
      float float0 = MathUtils.round((float) (short) (-829), 231, 0);
      float float1 = MathUtils.round(Float.NaN, (-820));
      try { 
        MathUtils.pow((-820), (-1571));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-820^-1,571)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-6181.653844482953);
      doubleArray0[3] = (-617.5638043);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (-2102.8587928);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = Double.NaN;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = 66;
      // Undeclared exception!
      try { 
        MathUtils.factorial(66);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = (-4421);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-4421));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,421
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-799.206349217);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      float float0 = MathUtils.sign(0.0F);
      double double0 = MathUtils.factorialDouble(0);
      short short0 = (short)1024;
      short short1 = MathUtils.indicator((short)1024);
      int int0 = MathUtils.addAndCheck(0, 0);
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      int int1 = bigInteger1.getLowestSetBit();
      int int2 = bigInteger1.intValueExact();
      BigInteger bigInteger2 = bigInteger1.or(bigInteger0);
      int int3 = bigInteger0.intValue();
      BigInteger bigInteger3 = bigInteger0.and(bigInteger1);
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, (short)1024);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1,024
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.58553;
      doubleArray0[3] = (-1792.86461);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.1102230246251565E-16;
      doubleArray0[6] = 3.141592653589793;
      doubleArray0[7] = 1791.5129;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.factorialDouble(0);
      double double2 = MathUtils.factorialDouble(0);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.valueOf((-2114L));
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 472);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 472
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[] intArray1 = new int[9];
      intArray1[0] = 93;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      intArray1[8] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.pow(2002, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2002;
      intArray0[1] = 0;
      intArray0[2] = 2002;
      intArray0[3] = 2002;
      intArray0[4] = 0;
      intArray0[5] = 2002;
      intArray0[6] = 0;
      intArray0[7] = 2002;
      intArray0[8] = 2002;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.087);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathUtils.sign(341.78);
      int int0 = MathUtils.hash((-2397.7972343));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (-272981992);
      doubleArray0[2] = (-2397.7972343);
      doubleArray0[3] = (-2397.7972343);
      doubleArray0[4] = (double) (-272981992);
      doubleArray0[5] = (-1339.0944081124);
      doubleArray0[6] = (-2397.7972343);
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 1.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      byte byte0 = (byte) (-115);
      byte byte1 = MathUtils.indicator((byte) (-115));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-272981992), 2340);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -272,981,992, k = 2,340
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = (-2101);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2101));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,101
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(195, 195);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.hash((double) 0);
      long long0 = MathUtils.indicator((long) 195);
      boolean boolean0 = MathUtils.equals((double) 1L, (double) 0, (double) 1L);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-4644.892220433459), 0.0, (-4644.892220433459));
      float float0 = MathUtils.sign((float) 0);
      int int3 = MathUtils.pow(12, (long) 0);
      int int4 = MathUtils.hash(0.0);
      long long1 = MathUtils.pow((long) 0, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      float float0 = MathUtils.sign((-1.0F));
      int int1 = MathUtils.compareTo(0.0, 0.0, (-532.2));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.0F);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = MathUtils.gcd((-643), (-1368));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, (-2156.7463059389584), 0.0);
      double double0 = MathUtils.factorialDouble(1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1586.736213;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (-2156.7463059389584);
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 327.076;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = MathUtils.lcm(197, 173);
      double double0 = MathUtils.sign(6.283185307179586);
      int int1 = MathUtils.gcd(0, 197);
      double double1 = MathUtils.round(0.0, 0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      int int0 = MathUtils.mulAndCheck(713, 713);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-751));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -751
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger3 = bigInteger1.max(bigInteger0);
      short short0 = bigInteger1.shortValueExact();
      BigInteger bigInteger4 = bigInteger0.and(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      int int0 = bigInteger1.intValue();
      int int1 = MathUtils.subAndCheck((-2749), 144);
      short short1 = MathUtils.sign((short)22);
      float float0 = MathUtils.round((float) (short)1, (-2626));
      long long0 = MathUtils.lcm(735L, (long) (short)1);
      float float1 = MathUtils.round(1.0F, 144);
      int int2 = MathUtils.lcm((int) (short)22, 144);
      float float2 = MathUtils.indicator(0.0F);
      int int3 = MathUtils.hash((double) 0.0F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 2855;
      int int1 = MathUtils.lcm(2855, 2855);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2855;
      doubleArray0[1] = (double) 2855;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (2,855 <= 2,855)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 1694);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (-1695.16412935);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 0L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = MathUtils.sinh(62.0);
      int int0 = (-772);
      float float0 = MathUtils.round(2680.3545F, (-772));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2680.3545F;
      doubleArray0[1] = 62.0;
      doubleArray0[2] = 62.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd((-9223372036854775808L), 2432902008176640000L);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-772));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -772
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 11);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 11
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 37;
      int int1 = MathUtils.subAndCheck(37, 37);
      double double0 = 55.0;
      boolean boolean0 = MathUtils.equals(0.0, 55.0, 37);
      double double1 = 0.5;
      // Undeclared exception!
      try { 
        MathUtils.equals(0.5, (double) 37, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = (-3452);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-3452));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,452
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-25.4352);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-25.4352));
      boolean boolean0 = MathUtils.equals(1001.289, 1001.289);
      long long0 = MathUtils.gcd((-2557L), (-2557L));
      long long1 = MathUtils.mulAndCheck(2557L, 615L);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-634));
      int int0 = MathUtils.compareTo(519.663801, (-1647.33), 3126.648317);
      byte byte0 = MathUtils.sign((byte)0);
      int int1 = MathUtils.pow(0, 522L);
      long long0 = MathUtils.lcm(522L, (-7321L));
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 0;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = MathUtils.gcd(1213L, 0L);
      double double0 = MathUtils.binomialCoefficientDouble(65, 21);
      short short0 = MathUtils.indicator((short)0);
      long long1 = MathUtils.addAndCheck(1213L, (long) (short)1);
      short short1 = MathUtils.indicator((short) (-1406));
      long long2 = MathUtils.indicator((long) 21);
      int int0 = MathUtils.addAndCheck(0, (-3512));
      int int1 = MathUtils.addAndCheck((-2040), (-3855));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 20;
      int int1 = MathUtils.pow(0, 20);
      double double0 = MathUtils.factorialLog(0);
      byte byte0 = MathUtils.sign((byte)66);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 1455.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      byte byte0 = MathUtils.indicator((byte) (-18));
      double double0 = MathUtils.log((byte) (-18), Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      int int0 = MathUtils.gcd(0, (-1766));
      double double1 = MathUtils.round(Double.NaN, 2411);
      double double2 = MathUtils.round(Double.NaN, (-496), 1766);
      int int1 = MathUtils.subAndCheck(2411, 1766);
      int int2 = MathUtils.sign((-1766));
      boolean boolean0 = MathUtils.equals((double) (-1766), 6.283185307179586, 811);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-3140), (-3140));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -3,140
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = 121645100408832000L;
      // Undeclared exception!
      try { 
        MathUtils.lcm(121645100408832000L, (-3051L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = MathUtils.hash(0.041666666666666664);
      long long0 = (-9218868437227405313L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((long) 1794113536, (-9218868437227405313L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-931L), (-4035746434778044925L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = MathUtils.gcd(1292L, 2819561105158720014L);
      int[] intArray0 = new int[2];
      intArray0[0] = 1899;
      intArray0[1] = (-205);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = MathUtils.pow(596, (long) 596);
      long long0 = MathUtils.mulAndCheck((long) 596, (long) 0);
      int int1 = MathUtils.lcm(0, 596);
      int int2 = MathUtils.indicator(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2111.1;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow((long) 0, 0);
      long long1 = MathUtils.mulAndCheck(1410L, (long) 0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1509L), (-1442L));
      double double0 = MathUtils.round((double) (-1509L), 0, 0);
      double double1 = MathUtils.scalb((-1509.0), 0);
      int int0 = MathUtils.mulAndCheck((-2412), 0);
      double double2 = MathUtils.cosh(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-2412), 1.0);
      byte byte0 = MathUtils.sign((byte) (-9));
      int int1 = MathUtils.addAndCheck((-3119), 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-3119);
      doubleArray0[1] = (double) (byte) (-9);
      doubleArray0[2] = (double) (-67L);
      doubleArray0[3] = 10.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1509L);
      double double3 = MathUtils.safeNorm(doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((float) (-67L), (int) (byte) (-9));
      long long1 = MathUtils.sign(0L);
      long long2 = MathUtils.indicator((-1442L));
      long long3 = MathUtils.mulAndCheck((long) (byte) (-1), 0L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-86.647895038116));
      short short0 = MathUtils.indicator((short)2194);
      double double4 = MathUtils.distance(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      int int0 = MathUtils.mulAndCheck((-38), 0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-38);
      intArray0[1] = 0;
      intArray0[2] = (-38);
      intArray0[3] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.round((double) (-38), 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1334.859), (double) (-38), (double) 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-38.0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-0.16624879837036133), (double) 0, (-658));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      long long0 = bigInteger0.longValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.clearBit(925);
      BigInteger bigInteger4 = bigInteger0.setBit(925);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      long long1 = MathUtils.subAndCheck((-3014L), 0L);
      int int0 = MathUtils.pow((-819), 3);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, (-851.1306888144032), (-26));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 1288);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1288;
      doubleArray0[1] = (double) 1288;
      doubleArray0[2] = (double) 0L;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1544.6448), (-1544.6448));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1544.6448);
      doubleArray0[1] = (-1544.6448);
      doubleArray0[2] = (-1544.6448);
      doubleArray0[3] = (-1544.6448);
      doubleArray0[4] = (-1544.6448);
      doubleArray0[5] = (-1544.6448);
      doubleArray0[6] = (-1544.6448);
      doubleArray0[7] = (-1544.6448);
      doubleArray0[8] = (-1544.6448);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1,544.645 >= -1,544.645)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(479001600L, 479001600L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 479001600L, (-110.410128564), 2089);
      double double0 = MathUtils.sinh(479001600L);
      double double1 = MathUtils.cosh(479001600L);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-110.410128564), (double) 479001600L);
      double double2 = MathUtils.round(0.0, 2089);
      float float0 = MathUtils.round((float) 2089, 2089);
      short short0 = MathUtils.indicator((short)220);
      long long1 = MathUtils.indicator(0L);
      long long2 = MathUtils.lcm((long) (short)220, 0L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.indicator(2766);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)220;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 0L;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 2766;
      doubleArray1[1] = (double) 2089;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = MathUtils.lcm(0, (-1925));
      int int1 = MathUtils.pow(0, 0L);
      double double0 = MathUtils.binomialCoefficientLog(2838, 0);
      double double1 = MathUtils.normalizeAngle((-2152.552451529572), (-3370.420095511));
      long long0 = MathUtils.indicator((long) 2838);
      long long1 = MathUtils.gcd((-44L), (-44L));
      int[] intArray0 = new int[3];
      intArray0[0] = (-1925);
      intArray0[1] = 0;
      intArray0[2] = 1;
      double double2 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals(1816.8781016915768, 6.283185307179586, 0.0);
      long long2 = MathUtils.indicator(1L);
      float float0 = MathUtils.indicator((float) 1);
      int int2 = MathUtils.pow(0, 1);
      short short0 = MathUtils.sign((short)18);
      long long3 = MathUtils.subAndCheck((-44L), 120L);
      double double3 = MathUtils.sinh((-1552.915138));
      float float1 = MathUtils.sign(1.0F);
      int int3 = MathUtils.gcd((-2884), 0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1445.578384172, (-1988.7556537919018));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1988.7556537919018);
      doubleArray0[1] = 1445.578384172;
      doubleArray0[2] = (-1988.7556537919018);
      doubleArray0[3] = (-1988.7556537919018);
      doubleArray0[4] = 0.05;
      doubleArray0[5] = 17.0;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.pow(1204284027, 1204284027);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(1204284027, (-849802397));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = MathUtils.log(72.0, 72.0);
      double double1 = MathUtils.sinh(1223.581);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 11;
      intArray0[2] = 2;
      intArray0[3] = 3;
      intArray0[4] = 9;
      intArray0[5] = 1835;
      intArray0[6] = 0;
      double double2 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = MathUtils.lcm(44, 7);
      int int1 = MathUtils.pow(0, 44);
      int int2 = MathUtils.gcd(0, (-533));
      double double0 = MathUtils.sinh(20.65679);
      double double1 = MathUtils.factorialDouble(533);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, 20.65679);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 308;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 4.678427623013278E8;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(828.865, Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 533);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 533
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
