/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 11:39:24 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1098);
      intArray0[1] = (-514);
      intArray0[2] = (-1778);
      int[] intArray1 = new int[1];
      intArray1[0] = (-514);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-0.33333333333333287);
      doubleArray0[1] = 943.544524339635;
      doubleArray0[2] = (-1778.9785117741242);
      doubleArray0[3] = (-2592.47715782575);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.125;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-4.9E-324);
      doubleArray0[8] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.sign(43L);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = MathUtils.lcm(0, (-2783));
      float float0 = MathUtils.sign(0.0F);
      short short0 = MathUtils.indicator((short) (-894));
      double double0 = MathUtils.normalizeAngle((short) (-894), (-2608.62));
      double double1 = MathUtils.factorialDouble(0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-894);
      MathUtils.checkOrder(doubleArray0);
      MathUtils.checkOrder(doubleArray0);
      long long0 = MathUtils.mulAndCheck((long) 0, (long) (-2783));
      // Undeclared exception!
      try { 
        MathUtils.round(1.0, 0, (int) (short) (-894));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(498);
      byte byte0 = MathUtils.sign((byte) (-8));
      int int0 = MathUtils.sign(498);
      short short0 = MathUtils.indicator((short) (byte) (-1));
      long long0 = MathUtils.gcd(1231L, (long) (short) (-1));
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, (double) (short) (-1), 0.5);
      float float0 = MathUtils.indicator((-1567.7694F));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = (double) (-1567.7694F);
      doubleArray0[3] = (double) 498;
      doubleArray0[4] = (double) (byte) (-1);
      int int1 = MathUtils.hash(doubleArray0);
      long long1 = MathUtils.mulAndCheck(2360L, 6227020800L);
      long long2 = MathUtils.mulAndCheck(0L, 1944L);
      int int2 = MathUtils.hash(498.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-1,567.769 < 498)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1019.0);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 840.03622;
      doubleArray0[3] = (-1313.12519361);
      doubleArray0[4] = (-3140.553904);
      doubleArray0[5] = 2.0;
      doubleArray0[6] = (-1868.17257);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      long long1 = MathUtils.sign(0L);
      long long2 = MathUtils.subAndCheck(1146L, 0L);
      long long3 = MathUtils.pow((-442L), 3439L);
      long long4 = MathUtils.indicator(0L);
      int[] intArray0 = new int[4];
      intArray0[0] = 2033;
      intArray0[1] = 850;
      intArray0[2] = 0;
      intArray0[3] = 76;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = (-1720L);
      long long1 = MathUtils.sign((-1720L));
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1720L);
      doubleArray0[1] = (double) (-1720L);
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (-1720L);
      doubleArray0[6] = (double) (byte)0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (byte)0;
      doubleArray1[1] = (double) (-1720L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = 18;
      long long2 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = bigInteger0.clearBit(18);
      Object object0 = new Object();
      boolean boolean1 = bigInteger0.equals(object0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.097;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-2358.7191344202256);
      doubleArray0[5] = (-594.2369);
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2910.9614);
      doubleArray0[1] = (-3066.0);
      double double0 = MathUtils.safeNorm(doubleArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)120;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-105,290,816,470,664^-105,290,816,470,664)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(0, 0);
      int int2 = (-566);
      int int3 = MathUtils.lcm(1586, (-566));
      float float0 = MathUtils.sign(4447.7363F);
      int int4 = 1137;
      long long0 = MathUtils.binomialCoefficient(1137, 0);
      int int5 = MathUtils.hash(3.141592653589793);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 1L);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-3075.5829487453298), (-3075.5829487453298));
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      long long0 = MathUtils.mulAndCheck(0L, (long) (byte)0);
      float float0 = 977.1818F;
      int int0 = 2518;
      // Undeclared exception!
      try { 
        MathUtils.round(977.1818F, (int) (byte)0, 2518);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,518, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.sign((-982.0646934472035));
      long long0 = MathUtils.addAndCheck((long) 0, 87178291200L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 87178291200L, (double) 87178291200L, 0.0);
      int int0 = MathUtils.pow((-884), (long) 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) 1);
      double double3 = MathUtils.binomialCoefficientDouble(1, 1);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
      long long1 = MathUtils.sign(87178291200L);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, (-1231.149366298358));
      double double0 = MathUtils.factorialLog(0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (-6.032174644509064E-23), 0.2857142686843872);
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-652);
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = (double) (-652);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = MathUtils.pow(767L, 767L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 8830772010016570623L;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long1 = MathUtils.sign(8830772010016570623L);
      double double1 = MathUtils.normalizeAngle(2.2250738585072014E-308, 1L);
      int int0 = MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 3672;
      double double0 = MathUtils.binomialCoefficientDouble(3672, 3672);
      long long0 = (-3183605296591799669L);
      long long1 = MathUtils.pow((-3183605296591799669L), 3672);
      double double1 = MathUtils.normalizeAngle((-947.251), (-3183605296591799669L));
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1870.75727318);
      doubleArray0[1] = 1463.48703983509;
      doubleArray0[2] = (-426.8);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.49999999999999994;
      doubleArray0[5] = 2096.2;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte) (-8);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger4 = null;
      // Undeclared exception!
      try { 
        bigInteger0.add((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = Double.NaN;
      boolean boolean0 = MathUtils.equals(Double.NaN, Double.NaN);
      double double1 = 0.0;
      boolean boolean1 = MathUtils.equals(0.0, Double.NaN);
      int int0 = (-1337);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1337), (-1337));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,337
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = (-2773);
      double double0 = MathUtils.round(3908.0827, (-2773));
      double double1 = MathUtils.round(0.0, (-2773));
      float float0 = MathUtils.round(842.7F, (-2773));
      long long0 = (-3958705157555305932L);
      long long1 = MathUtils.gcd((-3958705157555305932L), (-3958705157555305932L));
      long long2 = MathUtils.indicator((long) (-2773));
      int int1 = MathUtils.hash((-267.42403104));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-3958705157555305932L);
      doubleArray0[1] = (double) (-3958705157555305932L);
      doubleArray0[2] = 3908.0827;
      doubleArray0[3] = (double) (-2773);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-1L);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(9223372036854775807L, (long) (-2773));
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 2,773 + 9,223,372,036,854,775,807
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 1.986821492305628E-8);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = MathUtils.cosh(57.2957763671875);
      boolean boolean0 = MathUtils.equals(57.2957763671875, 57.2957763671875);
      float float0 = MathUtils.round(0.0F, 20);
      double double1 = MathUtils.round((-1410.7417622206), 0, 0);
      float float1 = MathUtils.indicator((float) 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = 3.821285769159739E24;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = 57.2957763671875;
      doubleArray0[7] = (-1411.0);
      doubleArray0[8] = (-1411.0);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (double) 0.0F);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)126;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      float float2 = bigInteger0.floatValue();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = MathUtils.log((-618.6112589), 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-618.6112589);
      doubleArray0[3] = (-618.6112589);
      doubleArray0[4] = 0.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = MathUtils.hash((-1811.0));
      short short0 = (short)281;
      short short1 = MathUtils.indicator((short)281);
      int int1 = MathUtils.pow(1030, 1030);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1030;
      doubleArray0[1] = (double) 0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int2 = MathUtils.indicator(0);
      long long0 = 3628800L;
      long long1 = MathUtils.lcm(2902L, 3628800L);
      boolean boolean0 = MathUtils.equals((-1304.0), 0.0, 1030);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,030 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      long long0 = MathUtils.mulAndCheck((long) (short)1, (long) (short)1);
      long long1 = MathUtils.binomialCoefficient((short)1, 0);
      double double0 = MathUtils.binomialCoefficientDouble(1620, 1620);
      byte byte0 = MathUtils.indicator((byte)0);
      long long2 = MathUtils.subAndCheck((long) (short)0, (long) (byte)1);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.indicator(0);
      int int1 = MathUtils.addAndCheck((int) (short)1, 1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 1620;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) (byte)1;
      doubleArray0[6] = (double) 1L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = MathUtils.lcm(2681, 796);
      int int1 = 6;
      int int2 = MathUtils.lcm(6, 2134076);
      // Undeclared exception!
      try { 
        MathUtils.factorial(6402228);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 635);
      float float0 = MathUtils.sign(893.64F);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 635;
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equals((double) 893.64F, 0.0);
      long long0 = MathUtils.lcm(37L, 0L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 1652.0, (double) 893.64F);
      long long1 = MathUtils.gcd(997L, 0L);
      long long2 = MathUtils.addAndCheck(1123L, 113236205062349959L);
      int int1 = MathUtils.addAndCheck(635, 1082382367);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 84;
      // Undeclared exception!
      try { 
        MathUtils.factorial(84);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = MathUtils.scalb(0.14285714285714285, 19);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1195.928);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1195.928);
      doubleArray1[1] = (-1195.928);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1195.928);
      doubleArray1[5] = (-1195.928);
      doubleArray1[6] = (-1195.928);
      doubleArray1[7] = (-1195.928);
      doubleArray1[8] = (-1195.928);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      double double0 = MathUtils.cosh(0.0);
      int int0 = MathUtils.hash(doubleArray0);
      short short0 = MathUtils.sign((short)17);
      int int1 = MathUtils.hash(doubleArray1);
      short short1 = MathUtils.indicator((short) (-734));
      int int2 = MathUtils.addAndCheck((int) (short) (-1), (-2060228296));
      int int3 = MathUtils.hash((-1195.928));
      int int4 = MathUtils.subAndCheck(466828790, 315);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (short) (-734);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1195.928);
      doubleArray2[3] = (-1195.928);
      doubleArray2[4] = (double) 466828790;
      doubleArray2[5] = (double) 466828475;
      doubleArray2[6] = (double) 466828475;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = (double) (short)1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray2, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (0 > -1,195.928)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 61;
      double double0 = MathUtils.round(475.0, 61);
      long long0 = MathUtils.mulAndCheck(0L, 2147483648L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 61;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.normalizeAngle(475.0, (-5.34752570253));
      int int1 = MathUtils.hash(3876.135503079251);
      float float0 = MathUtils.sign((float) 0L);
      boolean boolean0 = MathUtils.equals(0.0, 507.13, (-5.34752570253));
      float float1 = MathUtils.round((float) 0L, 537301901, 0);
      double double3 = MathUtils.cosh(957.9);
      long long1 = MathUtils.lcm(1678L, 0L);
      int int2 = MathUtils.addAndCheck(61, 537301901);
      boolean boolean1 = MathUtils.equals(3682.72378, 957.9);
      long long2 = MathUtils.pow(0L, 537301962);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.testBit((-442));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 967.9;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-267.29077539698073);
      doubleArray0[3] = 247.489;
      doubleArray0[4] = 154.05904118;
      doubleArray0[5] = (-2714.2969399);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.round((-1.0), 0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      double double0 = MathUtils.log(0.0, 0);
      long long0 = MathUtils.subAndCheck(2451L, 274L);
      double double1 = MathUtils.round((double) 0, 0);
      float float0 = MathUtils.round((float) 0, 509);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.sign(0L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("vcEH$");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.vcEH$
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 68.5;
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 3017.8126158794;
      doubleArray0[4] = (-1482.12425536738);
      doubleArray0[5] = (-2512.1267951);
      doubleArray0[6] = (-3794.15286343);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = (-258L);
      try { 
        MathUtils.pow(0L, (-258L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-258)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 380L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = (-521L);
      try { 
        MathUtils.pow((-521L), (-521L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-521^-521)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.indicator((-332));
      long long0 = MathUtils.sign(0L);
      double double1 = MathUtils.cosh((-1));
      int int1 = MathUtils.distance1(intArray0, (int[]) null);
      long long1 = MathUtils.sign(0L);
      boolean boolean0 = MathUtils.equals(1.5430806348152437, 3106.7, (double) 0L);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-5340.63492967498), (double) (-332));
      double double2 = MathUtils.round(1.1430250008909141E-8, (-1), 0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(0.0, (-417.057874945269), (-1268.12163759));
      boolean boolean3 = MathUtils.equalsIncludingNaN(0.0, 0.0, (-1967.223581382));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 12;
      double double0 = MathUtils.round((-1378.0), 12);
      double double1 = MathUtils.round((-2396.21089), 12, 0);
      int int1 = MathUtils.indicator(12);
      int int2 = 0;
      int int3 = MathUtils.pow(0, 0L);
      float float0 = MathUtils.round(2831.7002F, 0);
      short short0 = MathUtils.sign((short)0);
      int int4 = MathUtils.compareTo(2.2250738585072014E-308, (-3.141592653589793), 0.0);
      double double2 = MathUtils.sign((-570.762944484));
      // Undeclared exception!
      try { 
        MathUtils.round((-847.9379F), 0, 6335);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 6,335, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      short short0 = MathUtils.sign((short)19);
      boolean boolean0 = MathUtils.equals(Double.NEGATIVE_INFINITY, (double) (short)19, (-282.4));
      short short1 = MathUtils.sign((short)1);
      long long0 = MathUtils.pow((long) (short)1, 121);
      int int0 = MathUtils.gcd(0, (int) (short)1);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (-1131.0015501860369), (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = 1937L;
      long long1 = MathUtils.sign(1937L);
      float float0 = MathUtils.sign(0.0F);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      int int0 = bigInteger0.compareTo(bigInteger1);
      int int1 = (-1118);
      try { 
        MathUtils.pow(bigInteger0, (-1118));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1,118)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = MathUtils.indicator(Double.NEGATIVE_INFINITY);
      boolean boolean0 = MathUtils.equals(120.523175, (-1.0), (-256.28));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = Double.NaN;
      boolean boolean0 = MathUtils.equals(0.3333333333333333, Double.NaN, 0.3333333333333333);
      long long0 = MathUtils.subAndCheck((-1924L), (-9223372036854775808L));
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.intValue();
      double double1 = bigInteger0.doubleValue();
      BigInteger bigInteger1 = bigInteger0.flipBit(1);
      int int1 = bigInteger1.bitCount();
      int int2 = (-958);
      byte[] byteArray0 = bigInteger0.toByteArray();
      try { 
        MathUtils.pow(bigInteger0, (-958));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-958)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4576.42459);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-155.3498970619);
      doubleArray0[4] = (-2524.9266059);
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-4576.42459));
      boolean boolean0 = MathUtils.equals((-2524.9266059), 0.0, (-764.8874566286828));
      float float0 = MathUtils.round(240.0389F, 13);
      int int0 = MathUtils.gcd(13, 13);
      long long0 = MathUtils.gcd((-295L), (-159L));
      float float1 = MathUtils.sign((-276.42053F));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(2759L, 4577762542105553359L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.5707963267948966);
      doubleArray0[2] = 0.5;
      doubleArray0[3] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(355687428096000L, 355687428096000L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.sign((-982.0646934472035));
      long long0 = MathUtils.addAndCheck((long) 0, 87178291200L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 87178291200L, (double) 87178291200L, 0.0);
      int int0 = MathUtils.pow((-884), (long) 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-2987.58);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) 1);
      double double3 = MathUtils.binomialCoefficientDouble(1, 1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-1572), (-1572));
      int int1 = MathUtils.hash(0.3333333333333333);
      boolean boolean0 = MathUtils.equals((-500.5936743547), 0.3333333333333333);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1572);
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.sign((-2127L));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1558.006);
      doubleArray0[1] = (double) (-2127L);
      doubleArray0[2] = (double) (-3144);
      doubleArray0[3] = (double) (-1572);
      doubleArray0[4] = (double) (-1572);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.sign((-1036.952372702443));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = (-664);
      int int1 = MathUtils.mulAndCheck((-3078), (-664));
      int[] intArray0 = new int[4];
      intArray0[0] = (-664);
      intArray0[1] = 2043792;
      intArray0[2] = (-3189);
      intArray0[3] = (-664);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      int int3 = 97;
      double double0 = MathUtils.binomialCoefficientDouble(2043792, 97);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 97, (-664), 2043792);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,043,792, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = MathUtils.pow(1577L, 2130);
      double double0 = MathUtils.indicator(818.66);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte byte0 = (byte)44;
      byte byte1 = MathUtils.indicator((byte)44);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)44;
      doubleArray0[3] = (double) (byte)44;
      doubleArray0[4] = (double) (byte)1;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      byte byte2 = MathUtils.indicator((byte)18);
      int int0 = MathUtils.indicator((int) (byte)44);
      boolean boolean1 = MathUtils.equals(2834.616202701, 0.0, 3181.0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)44;
      double double0 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 44, (-1975));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,975, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1678.209916650434);
      doubleArray0[1] = 149.963;
      doubleArray0[2] = (-361.0);
      doubleArray0[3] = 1.125;
      doubleArray0[4] = (-650.628);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 3801.498359159173;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1150.9149016460192);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals(3801.498359159173, 3801.498359159173, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 71;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 898;
      intArray0[4] = (-2134);
      intArray0[5] = (-1239);
      intArray0[6] = 1014;
      intArray0[7] = (-1710);
      intArray0[8] = 1336;
      double double0 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.indicator(Float.NaN);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-334));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -334
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      short short0 = (short)215;
      short short1 = MathUtils.indicator((short)215);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (int) (short)215);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      short short0 = MathUtils.indicator((short)13);
      int int0 = MathUtils.lcm(1365, (int) (short)1);
      int int1 = MathUtils.gcd(1365, 1365);
      double double0 = MathUtils.sinh(1365);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1;
      MathUtils.checkOrder(doubleArray0);
      int int2 = MathUtils.pow((int) (short)13, 1365);
      double double1 = MathUtils.factorialDouble(0);
      int int3 = MathUtils.hash(1.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int4 = bigInteger0.bitCount();
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger3 = bigInteger0.pow(341);
      byte byte0 = bigInteger0.byteValueExact();
      // Undeclared exception!
      try { 
        bigInteger0.testBit((-718));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 397.500298297862;
      doubleArray0[1] = (-2019.6147695670008);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.indicator(21);
      boolean boolean2 = MathUtils.equals(397.500298297862, 397.500298297862);
      long long0 = MathUtils.subAndCheck(0L, (long) 21);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 397.500298297862, (-3605));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 15);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      double double0 = MathUtils.factorialDouble(31);
      boolean boolean2 = MathUtils.equals(0.0, (double) 15, 0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean3 = MathUtils.equalsIncludingNaN((double) 31, 0.0, 0.0);
      long long0 = MathUtils.pow((long) 31, 0);
      long long1 = MathUtils.factorial(0);
      long long2 = MathUtils.addAndCheck((-1019L), 1307674368000L);
      int int0 = (-2346);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2346));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,346
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.scalb((-469.49381282), 0);
      int int0 = MathUtils.sign(0);
      double double1 = MathUtils.binomialCoefficientLog(540, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2199.66), 0.0, (-469.49381282));
      double double2 = MathUtils.log(0, Double.POSITIVE_INFINITY);
      double double3 = MathUtils.round(Double.NaN, 0, (-1522));
      double double4 = MathUtils.log(10.0, Double.POSITIVE_INFINITY);
      boolean boolean1 = MathUtils.equals((double) (-1522), Double.POSITIVE_INFINITY);
      boolean boolean2 = MathUtils.equals(0.3333333333332802, 0.0, 1604);
      long long0 = MathUtils.indicator(2997L);
      int int1 = MathUtils.subAndCheck(1495, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(528, 1495);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 528, k = 1,495
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-2887L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,887)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(0, 0);
      double double0 = MathUtils.normalizeAngle((-456.487), 1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-456.487);
      doubleArray0[1] = 2.1855274241097504;
      doubleArray0[2] = 2.1855274241097504;
      doubleArray0[3] = 2.1855274241097504;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      int int2 = MathUtils.hash(doubleArray0);
      int int3 = MathUtils.gcd(0, 0);
      double double1 = MathUtils.normalizeAngle(0.0, 2.1855274241097504);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2.186 >= 2.186)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float float0 = MathUtils.round((-1.0F), 6);
      boolean boolean0 = MathUtils.equals((double) (-1.0F), (double) (-1.0F), 0.0);
      int int0 = MathUtils.gcd(6, 6);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) 6;
      doubleArray0[7] = (double) 6;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (6 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 2684;
      double double0 = MathUtils.factorialLog(2684);
      byte byte0 = (byte) (-1);
      byte byte1 = MathUtils.indicator((byte) (-1));
      long long0 = 609L;
      long long1 = MathUtils.pow((long) (byte) (-1), 609L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((byte) (-1), (byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(456, 11);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 5016);
      short short0 = MathUtils.sign((short)123);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(817L, 817L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 667489L;
      doubleArray0[1] = (double) 667489L;
      doubleArray0[2] = (double) 817L;
      doubleArray0[3] = (double) 817L;
      doubleArray0[4] = (double) 667489L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (667,489 >= 667,489)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = (-384);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-384));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -384
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      short short0 = (short) (-3083);
      short short1 = MathUtils.sign((short) (-3083));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1108.2776168), (double) (short) (-1));
      // Undeclared exception!
      try { 
        MathUtils.round((-4317.12601565797), (int) (short) (-1), (int) (short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 40;
      double double0 = MathUtils.factorialLog(40);
      int int1 = (-1052);
      try { 
        MathUtils.pow(4503599627370496L, (-1052));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4,503,599,627,370,496^-1,052)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-599.1938308);
      doubleArray0[3] = (-1070.6212282117872);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.sign((-0.12502530217170715));
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-0.12502530217170715), 1.304E19, 519.08849590342);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = 0;
      double double3 = MathUtils.scalb((-1070.6212282117872), 0);
      // Undeclared exception!
      try { 
        MathUtils.round(1.304E19, 0, 440);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = MathUtils.pow(40320L, 0L);
      double double0 = MathUtils.round((double) 40320L, (-228));
      double double1 = MathUtils.sinh((-228));
      double double2 = MathUtils.scalb(0L, (-228));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-5.225307804268378E98);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (-5.225307804268378E98);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (1 > -522,530,780,426,837,800,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1.0), (-1.0));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(2321L, (-99L));
      int int0 = 0;
      int int1 = MathUtils.addAndCheck(0, (-3218));
      // Undeclared exception!
      try { 
        MathUtils.factorial((-3218));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,218
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1894.204), 0.0);
      double double0 = MathUtils.cosh((-1894.204));
      int int0 = 20;
      float float0 = MathUtils.round(766.1898F, 20);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("DOFFv7#crK5");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.DOFFv7#crK5
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 11;
      intArray0[1] = (-3019);
      int[] intArray1 = new int[6];
      intArray1[0] = (-3019);
      intArray1[1] = (-3019);
      intArray1[2] = 11;
      intArray1[3] = 11;
      intArray1[4] = 11;
      intArray1[5] = (-3019);
      double double0 = MathUtils.distance(intArray0, intArray1);
      long long0 = MathUtils.binomialCoefficient(11, (-341));
      double double1 = MathUtils.scalb(11, (-3019));
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.indicator(0.0);
      int int1 = MathUtils.compareTo((-706.55372001), 1104.65, 0.5);
      byte byte0 = MathUtils.indicator((byte)14);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0);
      int int0 = 0;
      int int1 = MathUtils.pow(0, 0);
      int[] intArray0 = new int[0];
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      int int3 = 0;
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0, 0, (-972));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -972, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.bitCount();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.andNot(bigInteger0);
      BigInteger bigInteger3 = bigInteger1.shiftRight(2);
      BigInteger bigInteger4 = bigInteger1.divide(bigInteger0);
      BigInteger bigInteger5 = bigInteger1.remainder(bigInteger0);
      BigInteger bigInteger6 = bigInteger1.not();
      BigInteger bigInteger7 = bigInteger0.min(bigInteger1);
      int int1 = 0;
      BigInteger bigInteger8 = MathUtils.pow(bigInteger0, 0);
      int int2 = 2231;
      long long0 = MathUtils.binomialCoefficient(2231, (-940));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1209.1684219, 1305.90125660204, (-940));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = MathUtils.hash((-1033.736));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1768669596;
      doubleArray0[1] = (-1033.736);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow((long) 1768669596, 1768669596);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (-1033.736);
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = 2570.59;
      doubleArray1[4] = (-1033.736);
      doubleArray1[5] = (double) 1768669596;
      doubleArray1[6] = (-1033.736);
      doubleArray1[7] = (double) 1768669596;
      doubleArray1[8] = (double) 1768669596;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 32;
      intArray0[1] = 56;
      intArray0[2] = 0;
      intArray0[3] = (-329);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-3099);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = MathUtils.pow(0L, 2592);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-329);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-329 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 148;
      float float0 = MathUtils.round(0.0F, 148);
      int int1 = (-74);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0.0F, (double) 0.0F, (-74));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(3.141592653589793, 3.141592653589793);
      long long0 = MathUtils.sign(2716L);
      double double1 = MathUtils.cosh(1L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = bigInteger0.intValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1049L);
      int int1 = MathUtils.pow(0, 0L);
      int int2 = MathUtils.subAndCheck(1, 0);
      float float0 = MathUtils.round((float) 1, 1, 1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.9F;
      int int3 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 121, 14);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 14, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.subAndCheck(0L, 0L);
      int int0 = MathUtils.gcd(1555, 1555);
      double double0 = MathUtils.sign(0.0);
      long long2 = MathUtils.binomialCoefficient(1555, (-4634));
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3676.222);
      doubleArray0[1] = (-4472.44560133483);
      doubleArray0[2] = (-3115.011737);
      doubleArray0[3] = (-609.6773639576);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2886.46968611463);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-4,472.446 < -3,115.012)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.log((-303.947174), (-303.947174));
      int int0 = MathUtils.gcd(0, 0);
      long long0 = MathUtils.subAndCheck((long) 0, (long) 0);
      long long1 = MathUtils.addAndCheck((long) 0, (long) 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1128.969);
      int int1 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.clearBit(0);
      byte byte0 = bigInteger0.byteValueExact();
      int int2 = bigInteger1.signum();
      int int3 = bigInteger1.bitCount();
      BigInteger bigInteger2 = BigInteger.valueOf(1675L);
      boolean boolean0 = bigInteger0.isProbablePrime(0);
      BigInteger bigInteger3 = BigInteger.valueOf((-2129095477));
      BigInteger bigInteger4 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger5 = bigInteger0.shiftRight(0);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, bigInteger0);
      double double2 = MathUtils.binomialCoefficientDouble(464, 464);
      int int4 = MathUtils.lcm(464, 0);
      double double3 = MathUtils.safeNorm(doubleArray0);
      double double4 = MathUtils.safeNorm(doubleArray0);
      long long2 = MathUtils.indicator((long) (-2129095477));
      long long3 = MathUtils.addAndCheck((long) (-2129095477), 0L);
      int int5 = MathUtils.sign(0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2129095477), (byte)0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,129,095,477, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.intValue();
      int int1 = bigInteger0.intValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = MathUtils.pow((-2098), 251);
      long long0 = MathUtils.binomialCoefficient(251, 251);
      long long1 = MathUtils.indicator(0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (-2098);
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 0L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long2 = MathUtils.factorial(0);
      int int1 = MathUtils.lcm(251, 0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 251);
      double double1 = MathUtils.normalizeAngle((-943.461207731), 1.0);
      float float0 = MathUtils.round((float) 0, (-2098));
      long long3 = MathUtils.subAndCheck((-3923L), 1L);
      long long4 = MathUtils.indicator(2819561105158720014L);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 1.0);
      float float0 = MathUtils.round((-1807.717F), (-208), 0);
      int int0 = MathUtils.gcd(0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      try { 
        MathUtils.normalizeArray(doubleArray0, (-1807.717F));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = (-2308L);
      long long1 = MathUtils.mulAndCheck((-2308L), (-2308L));
      long long2 = MathUtils.mulAndCheck((-2308L), 1023L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2308L);
      doubleArray0[1] = (double) 5326864L;
      doubleArray0[2] = (double) (-2361084L);
      doubleArray0[3] = (double) (-2308L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      short short0 = bigInteger0.shortValueExact();
      long long3 = bigInteger1.longValueExact();
      int int0 = bigInteger1.compareTo(bigInteger0);
      int int1 = (-3514);
      BigInteger bigInteger2 = bigInteger0.not();
      BigInteger bigInteger3 = bigInteger0.clearBit(1531);
      BigInteger bigInteger4 = bigInteger0.flipBit(20);
      // Undeclared exception!
      try { 
        bigInteger1.pow((-3514));
      } catch(ArithmeticException e) {
         //
         // Negative exponent
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(234, (-345));
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2788.081), 0.0);
      boolean boolean1 = MathUtils.equals(0.0, 0.0, (double) 234);
      long long0 = MathUtils.gcd(0L, (long) 0);
      double double1 = MathUtils.round((-1904.8857), 0);
      long long1 = MathUtils.lcm((long) 234, 3343L);
      long long2 = MathUtils.mulAndCheck((-305L), (-580L));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-580L);
      doubleArray0[1] = 1.1102230246251565E-16;
      doubleArray0[2] = (-319.90338104757);
      doubleArray0[3] = (double) 234;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1493.472447539;
      doubleArray0[6] = (double) 234;
      doubleArray0[7] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-580 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathUtils.cosh(1326.2658);
      boolean boolean0 = MathUtils.equalsIncludingNaN(5968.88, 0.0);
      int int0 = 0;
      long long0 = MathUtils.factorial(0);
      int int1 = (-1970);
      int int2 = MathUtils.subAndCheck((-1970), (-1970));
      int int3 = 8;
      try { 
        MathUtils.pow(8, (-3279L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (8^-3,279)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = MathUtils.log(5.0, 2089.503807);
      int int0 = MathUtils.pow(9, (long) 9);
      double double1 = MathUtils.factorialDouble(9);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 5.0;
      doubleArray0[1] = 4.749907930459732;
      doubleArray0[2] = 5.0;
      doubleArray0[3] = 2089.503807;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = 4.749907930459732;
      doubleArray0[6] = 5.0;
      doubleArray0[7] = 2089.503807;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 5.0;
      doubleArray1[1] = 4.749907930459732;
      doubleArray1[2] = 4.749907930459732;
      doubleArray1[3] = (double) 9;
      doubleArray1[4] = 4.749907930459732;
      doubleArray1[5] = 362880.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = MathUtils.sign(51);
      long long0 = 24L;
      int int1 = MathUtils.pow(1, 24L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, (double) 1);
      try { 
        MathUtils.pow(0, (-1069L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,069)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.11111095942313305, 272.0738543866, 0.11111095942313305);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 272.0738543866;
      doubleArray0[1] = 0.11111095942313305;
      doubleArray0[2] = 0.11111095942313305;
      doubleArray0[3] = 0.11111095942313305;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign(3198.0F);
      long long0 = MathUtils.gcd((-4616189618054758400L), 113236205062349959L);
      double double0 = MathUtils.sign(1131.43575547577);
      byte byte0 = MathUtils.indicator((byte) (-53));
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.subAndCheck(1659, 102);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      long long0 = MathUtils.indicator(0L);
      float float1 = MathUtils.round((float) 0L, 242);
      int int0 = MathUtils.sign(242);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 242;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 242;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 1;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = MathUtils.scalb((-3627.6), 228);
      boolean boolean0 = MathUtils.equals(484.480967, (-1.5647984404760905E72), 5);
      long long0 = MathUtils.factorial(5);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 484.480967;
      doubleArray0[1] = (-3627.6);
      doubleArray0[3] = (-4300.206);
      doubleArray0[5] = 1307.501;
      doubleArray0[6] = (double) 120L;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.indicator(4);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(48L, 48L);
      double double0 = MathUtils.log(48L, 0.0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = MathUtils.indicator((-1355));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-166.98263674902952);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.factorialDouble(10);
      long long0 = MathUtils.pow((long) 10, 495L);
      byte byte0 = MathUtils.indicator((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2874), 52);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,874, k = 52
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathUtils.indicator(20.0);
      boolean boolean0 = MathUtils.equals(0.0, (-1222.70966094886));
      boolean boolean1 = MathUtils.equals(3.141592653589793, 0.0);
      double double1 = MathUtils.factorialLog(0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      int int0 = (-95);
      intArray0[1] = (-95);
      double double2 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-95);
      int int1 = MathUtils.hash(doubleArray0);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign(0.0F);
      long long0 = MathUtils.gcd((-3554L), (-3554L));
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigInteger0.and((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      double double1 = MathUtils.sinh(0.0);
      int int0 = MathUtils.indicator(19);
      int int1 = MathUtils.mulAndCheck(1, 1);
      int int2 = MathUtils.hash((double) 1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = MathUtils.scalb((-859.8901409244673), 224);
      byte byte0 = MathUtils.sign((byte)96);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 224;
      doubleArray0[1] = (double) (byte)96;
      doubleArray0[2] = (double) (byte)96;
      doubleArray0[3] = (double) (byte)96;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-443.14600313), 0.0);
      short short0 = MathUtils.sign((short)0);
      double double0 = MathUtils.binomialCoefficientDouble(369, (short)0);
      long long0 = MathUtils.mulAndCheck((long) 369, 0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 369;
      doubleArray0[1] = (-443.14600313);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (-443.14600313);
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(223, 66);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = MathUtils.indicator((-2010));
      boolean boolean0 = MathUtils.equals((double) (-2010), (double) (-2010), (double) (-1));
      double double0 = MathUtils.normalizeAngle((-2010), 0.0);
      int int1 = MathUtils.mulAndCheck(0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(3.834E-20, (-1910.8135099215), (-5237.7));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-80));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      long long0 = MathUtils.gcd(3272L, 3272L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3272L;
      doubleArray0[1] = (double) 3272L;
      doubleArray0[2] = (double) 3272L;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 3272L;
      doubleArray0[7] = (double) 0.0F;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = MathUtils.lcm(12, 12);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) 12;
      doubleArray0[2] = (double) 12;
      doubleArray0[3] = (double) 12;
      doubleArray0[4] = (double) 12;
      doubleArray0[5] = (double) 12;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.subAndCheck(0L, (long) 12);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 12, (double) 12, 12);
      long long1 = MathUtils.lcm((-12L), 0L);
      short short0 = MathUtils.indicator((short)0);
      short short1 = MathUtils.indicator((short)0);
      int int1 = MathUtils.compareTo(12.0, 3.145894820876798E-6, 12.0);
      int int2 = MathUtils.pow(0, (int) (short)0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = MathUtils.indicator(10.0);
      double double1 = MathUtils.factorialLog(4);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 10.0;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = 1.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathUtils.cosh((-1737.1177));
      long long0 = MathUtils.pow(570L, 6722166367014452318L);
      long long1 = MathUtils.subAndCheck(1307674368000L, 570L);
      double double1 = MathUtils.factorialLog(1128);
      int int0 = MathUtils.subAndCheck(1128, 1128);
      int int1 = MathUtils.pow(0, 0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathUtils.round((-2080.713010657297), 0);
      long long0 = MathUtils.pow((long) 0, 0);
      int int0 = MathUtils.subAndCheck(0, 0);
      double double1 = MathUtils.sinh(0.0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 158;
      int int0 = (-2483);
      intArray0[1] = (-2483);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.indicator(2087.43358744);
      double double1 = (-2400.9520200700863);
      double double2 = MathUtils.sign((-2400.9520200700863));
      long long0 = MathUtils.mulAndCheck((long) 158, (long) (-2483));
      double double3 = MathUtils.round((double) (-2483), (-466));
      int int2 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 1493);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1,493
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long long0 = 1537L;
      long long1 = MathUtils.mulAndCheck(1537L, 0L);
      int int0 = (-863);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-863));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -863
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = MathUtils.compareTo(2.2250738585072014E-308, (-2811.5585693034604), 1058.9700487618);
      double double0 = MathUtils.cosh(Double.NaN);
      double double1 = MathUtils.sign((-2811.5585693034604));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(340L, 4208363204685324176L);
      int int0 = MathUtils.mulAndCheck(0, 0);
      double double0 = MathUtils.sinh(4208363204685324176L);
      boolean boolean0 = MathUtils.equals((-504.9), (double) 340L);
      short short0 = MathUtils.indicator((short)66);
      double double1 = MathUtils.sign(Double.POSITIVE_INFINITY);
      short short1 = MathUtils.sign((short)118);
      int int1 = MathUtils.subAndCheck(35, 2591);
      double double2 = MathUtils.round((double) 0, (int) (short)1, 0);
      int int2 = MathUtils.hash((-719.22124));
      long long1 = MathUtils.lcm((-3367L), 2147483648L);
      long long2 = MathUtils.mulAndCheck(0L, 0L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (double) 0L, (-1311.6617673));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign((-1.0F));
      // Undeclared exception!
      try { 
        MathUtils.lcm((-9223372036854775808L), 3952090531849364496L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.sign((-441));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = MathUtils.factorialLog(1669);
      double double1 = MathUtils.normalizeAngle(10719.575471016722, 10719.575471016722);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 18;
      double double0 = MathUtils.round(1.304E19, 18);
      long long0 = (-1953L);
      long long1 = MathUtils.gcd((-1953L), (-1953L));
      int int1 = MathUtils.gcd((-3110), 1333);
      int int2 = 0;
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-3110), 0, 18);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 3;
      int int1 = MathUtils.pow(3, 0L);
      int int2 = MathUtils.hash((double[]) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 3;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-29));
      int int0 = (-1319);
      double double0 = MathUtils.scalb(0.07842259109020233, (-1319));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.07842259109020233, (double) (byte) (-1));
      boolean boolean1 = MathUtils.equals((double) (-1319), 0.0, (-2.2146649191679807E218));
      float float0 = MathUtils.indicator((float) (-1319));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.subAndCheck((long) (byte) (-1), (-86L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.flipBit((byte) (-1));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = MathUtils.gcd((-1891L), (-1891L));
      long long1 = MathUtils.gcd(0L, (-1891L));
      int int0 = MathUtils.pow(2, 2);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distance1(intArray0, intArray0);
      float float0 = MathUtils.sign((float) 4);
      long long2 = 9218868437227405312L;
      long long3 = MathUtils.mulAndCheck(9218868437227405312L, (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(2, 61);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 2, k = 61
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = MathUtils.scalb((-2116.872401), (-434));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = MathUtils.pow((-2288), 2672L);
      long long0 = MathUtils.subAndCheck(0L, 2672L);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = MathUtils.pow(1131L, 9218868437227405312L);
      int int0 = MathUtils.pow(231, 778L);
      short short0 = MathUtils.sign((short)0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-843));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -843
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1047.92885, 1047.92885, 1047.92885);
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.sinh(1.304E19);
      long long0 = MathUtils.addAndCheck((long) 0, 6227020800L);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      short short0 = MathUtils.indicator((short)151);
      long long0 = MathUtils.lcm(720L, (long) (short)1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 720L;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) 720L;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = (double) 720L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (720 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = MathUtils.gcd(2819561105158720014L, 2819561105158720014L);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      long long1 = MathUtils.subAndCheck((-960L), 2819561105158720014L);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      long long0 = MathUtils.gcd(0L, 24L);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathUtils.sign(1772.1220450237486);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = (-2272);
      try { 
        MathUtils.pow((-2272), (-2272));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,272^-2,272)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 93;
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, 1.1102230246251565E-16, 93);
      float float0 = MathUtils.indicator((float) 93);
      int int1 = MathUtils.subAndCheck(93, 1721);
      int int2 = 151;
      int int3 = MathUtils.gcd(151, (-1628));
      // Undeclared exception!
      try { 
        MathUtils.round(3630.659, 3251, 151);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0036, (-1631.70094096));
      int int0 = MathUtils.sign((-4190));
      int int1 = MathUtils.subAndCheck((-1), 52);
      long long0 = MathUtils.sign(412L);
      double double0 = MathUtils.sinh(412L);
      double double1 = MathUtils.indicator((double) 412L);
      long long1 = MathUtils.binomialCoefficient(1248, 1248);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-53);
      doubleArray0[1] = (-1631.70094096);
      doubleArray0[2] = (double) 1248;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 412L;
      doubleArray0[6] = 0.0036;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-53 >= -1,631.701)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.addAndCheck(746, 0);
      double double1 = MathUtils.sinh((-2842.1964615874));
      int int1 = MathUtils.pow(746, 1307674368000L);
      int int2 = MathUtils.subAndCheck(746, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = (-2842.1964615874);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-2842.1964615874);
      doubleArray0[6] = (double) 746;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 746;
      intArray0[1] = 746;
      int int3 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.scalb(0.0, 312);
      long long0 = MathUtils.addAndCheck((long) 184, 4503599627370496L);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(Integer.MIN_VALUE, Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,147,483,648
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(6304);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigInteger bigInteger3 = bigInteger2.remainder(bigInteger1);
      BigInteger bigInteger4 = bigInteger2.shiftRight(147);
      BigInteger bigInteger5 = bigInteger0.multiply(bigInteger2);
      BigInteger bigInteger6 = bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, 1803);
      boolean boolean0 = MathUtils.equals((double) 1803, 0.0);
      int int0 = MathUtils.subAndCheck(6304, (-992));
      int int1 = MathUtils.compareTo(1766.476966, 6304, 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-11);
      doubleArray0[1] = (double) (byte)32;
      int int2 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.lcm(0L, (long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = MathUtils.lcm((-1328), 421);
      short short0 = MathUtils.indicator((short) (-1696));
      byte byte0 = MathUtils.indicator((byte)0);
      long long0 = MathUtils.pow(1950L, 2338);
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      double double0 = MathUtils.round(678.61, (-704));
      int int1 = MathUtils.hash((double) (short) (-1696));
      float float0 = MathUtils.sign((float) 1950L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float1 = MathUtils.indicator(0.0F);
      int int2 = MathUtils.indicator(Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
      byte byte0 = MathUtils.sign((byte)0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) 1;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (-1500.124), 0.0);
      int int1 = MathUtils.addAndCheck((int) (byte)0, 1);
      long long0 = MathUtils.lcm((long) (byte)0, (-582L));
      float float0 = MathUtils.sign((float) (byte)0);
      long long1 = MathUtils.pow((-1969L), 0);
      boolean boolean2 = MathUtils.equals((double) (-1969L), (double) 0L, 1476.94027656);
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = bigInteger0.toString();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 233);
      short short0 = MathUtils.sign((short) (byte)0);
      double double0 = MathUtils.binomialCoefficientLog((byte)0, (-189));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = (-534);
      int int1 = 67;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-534), 67);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -534, k = 67
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3031.7052049);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4537.412549;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 3.834E-20);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 3.834E-20);
      double double1 = MathUtils.cosh(1.5707963267948966);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-2037);
      intArray0[2] = (-3048);
      intArray0[3] = 722;
      intArray0[4] = (-1555);
      intArray0[5] = 582;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 362.0416543819;
      doubleArray0[1] = (-1540.0);
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-4786.728452);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd(13, 13);
      boolean boolean1 = MathUtils.equals(0.0, (-4786.728452));
      int[] intArray0 = new int[8];
      intArray0[0] = 13;
      intArray0[1] = 13;
      intArray0[2] = 13;
      intArray0[3] = 98;
      intArray0[4] = 13;
      intArray0[5] = 2;
      intArray0[6] = 13;
      intArray0[7] = 13;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }
}
