/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 12:15:13 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 883);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.ONE.divide(complex1);
      Complex complex4 = complex0.ZERO.atan();
      String string0 = complex0.NaN.toString();
      Complex complex5 = complex0.acos();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, 883);
      double double1 = complex3.getArgument();
      boolean boolean0 = complex1.isInfinite();
      double double2 = complex5.getImaginary();
      Complex complex7 = complex0.add(complex6);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1750.1731);
      Complex complex1 = Complex.I;
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.cos();
      int int0 = complex2.ZERO.hashCode();
      Complex complex4 = complex2.INF.sinh();
      Complex complex5 = complex0.I.createComplex(2.0, 0.0);
      Complex complex6 = complex0.ZERO.asin();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex0.INF.multiply(Double.POSITIVE_INFINITY);
      int int1 = complex8.ZERO.hashCode();
      ComplexField complexField0 = complex7.getField();
      boolean boolean0 = complex7.isNaN();
      String string0 = complex7.toString();
      Complex complex9 = complex3.I.cos();
      Complex complex10 = complex1.subtract(complex0);
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex11.INF.exp();
      int int2 = complex12.I.hashCode();
      Complex complex13 = complex1.atan();
      Complex complex14 = complex1.multiply(Double.POSITIVE_INFINITY);
      Object object0 = complex1.readResolve();
      double double0 = complex6.getArgument();
      Complex complex15 = complex0.ONE.exp();
      Complex complex16 = complex14.negate();
      ComplexField complexField1 = complex5.getField();
      Object object1 = complex3.readResolve();
      double double1 = complex14.getImaginary();
      Object object2 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex2.ZERO.multiply(complex1);
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.createComplex(776.07991, 2500.0);
      double double0 = complex4.getImaginary();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex7.ONE.createComplex(0.0, (-765.0089));
      int int1 = complex4.hashCode();
      Complex complex9 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex3.INF.cosh();
      double double0 = complex3.NaN.abs();
      Complex complex5 = complex3.ZERO.tanh();
      Complex complex6 = complex5.multiply(complex3);
      Object object0 = complex4.ZERO.readResolve();
      Complex complex7 = complex4.negate();
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex0.acos();
      Object object1 = complex8.ZERO.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Complex complex10 = complex2.ZERO.tan();
      double double1 = complex2.getArgument();
      Complex complex11 = complex4.I.acos();
      Complex complex12 = complex7.log();
      Complex complex13 = complex8.sinh();
      List<Complex> list0 = complex13.nthRoot(6222);
      // Undeclared exception!
      complex1.nthRoot(8388608);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.sinh();
      int int0 = complex2.NaN.hashCode();
      boolean boolean0 = complex1.isNaN();
      Complex complex3 = complex1.ZERO.acos();
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex1.INF.log();
      Complex complex7 = complex1.log();
      Complex complex8 = complex7.I.createComplex(0.0, 1683.96255828113);
      Complex complex9 = complex1.atan();
      Complex complex10 = complex2.sqrt1z();
      Complex complex11 = complex10.ONE.sin();
      Complex complex12 = complex1.exp();
      String string0 = complex12.I.toString();
      Complex complex13 = complex0.sqrt1z();
      Complex complex14 = complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex2.ZERO.asin();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex4 = complex0.I.conjugate();
      double double0 = complex4.NaN.abs();
      Complex complex5 = complex4.INF.tan();
      double double1 = complex4.ZERO.abs();
      Complex complex6 = complex4.multiply(0.0);
      Complex complex7 = complex0.INF.exp();
      Complex complex8 = complex0.I.sin();
      Complex complex9 = complex8.NaN.negate();
      Complex complex10 = complex0.NaN.add(complex7);
      Complex complex11 = complex8.ZERO.sqrt1z();
      double double2 = complex0.abs();
      Complex complex12 = complex0.atan();
      Complex complex13 = complex0.createComplex(2736.6117214512, 0.0);
      Complex complex14 = complex6.sqrt();
      int int0 = complex12.hashCode();
      Object object0 = complex14.readResolve();
      double double3 = complex10.getArgument();
      Complex complex15 = new Complex(580.785828, Double.NaN);
      Complex complex16 = complex15.ONE.cosh();
      Complex complex17 = complex4.pow(complex15);
      double double4 = complex6.getImaginary();
      Complex complex18 = complex8.negate();
      Complex complex19 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-0.0013888888689039883), (-0.0013888888689039883));
      Complex complex1 = complex0.INF.sinh();
      int int0 = complex0.I.hashCode();
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.pow(complex1);
      double double0 = complex1.INF.abs();
      Complex complex3 = complex1.ONE.conjugate();
      double double1 = complex1.abs();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex1.ONE.negate();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex3.ONE.pow(complex1);
      double double0 = complex1.ZERO.getArgument();
      double double1 = complex0.NaN.abs();
      Complex complex6 = complex0.NaN.acos();
      Complex complex7 = complex6.NaN.exp();
      Complex complex8 = complex7.tanh();
      String string0 = complex6.INF.toString();
      double double2 = complex0.getImaginary();
      Complex complex9 = complex0.cosh();
      int int0 = complex9.hashCode();
      boolean boolean0 = complex1.isNaN();
      double double3 = complex0.abs();
      Complex complex10 = complex2.cosh();
      boolean boolean1 = complex5.equals(complex0);
      Complex complex11 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.conjugate();
      int int0 = 2326;
      List<Complex> list0 = complex0.INF.nthRoot(2326);
      Complex complex3 = complex2.ONE.multiply(Double.NaN);
      Complex complex4 = complex2.ZERO.subtract(complex0);
      Complex complex5 = complex3.ZERO.cos();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.NaN.atan();
      Object object0 = complex6.INF.readResolve();
      Complex complex8 = complex7.ZERO.subtract(complex3);
      try { 
        complex7.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cosh();
      String string0 = complex1.I.toString();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex2.ONE.pow(complex1);
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex0.divide(complex6);
      Complex complex9 = complex8.I.pow(complex6);
      Complex complex10 = complex8.I.log();
      Complex complex11 = complex8.log();
      double double0 = complex7.abs();
      Complex complex12 = complex11.ONE.exp();
      List<Complex> list0 = complex8.nthRoot(17);
      boolean boolean0 = complex0.isNaN();
      Complex complex13 = complex8.ONE.multiply(complex11);
      Complex complex14 = complex0.INF.pow(complex1);
      String string0 = complex11.toString();
      boolean boolean1 = complex6.isInfinite();
      Complex complex15 = complex11.cos();
      Object object0 = complex15.readResolve();
      boolean boolean2 = complex6.equals((Object) null);
      Complex complex16 = complex1.NaN.atan();
      Complex complex17 = complex1.createComplex((-2739.6285063), (-2790.1454));
      Complex complex18 = complex11.negate();
      Complex complex19 = complex18.add(complex15);
      Complex complex20 = complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(0.008336750013465571, 4050.2047679);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex2.INF.pow(complex1);
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex0.NaN.subtract(complex4);
      double double0 = complex0.getImaginary();
      Complex complex7 = complex0.divide(complex2);
      try { 
        complex4.nthRoot((-1049));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,049
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.tan();
      boolean boolean1 = complex0.isNaN();
      Complex complex2 = complex1.ONE.multiply(complex0);
      boolean boolean2 = complex0.isNaN();
      double double0 = complex0.getArgument();
      double double1 = complex0.abs();
      Complex complex3 = complex0.acos();
      double double2 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = new Complex(1316.033979695, 1316.033979695);
      Complex complex4 = complex0.ONE.add(complex3);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex3.exp();
      Complex complex9 = complex7.asin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = complex1.atan();
      Complex complex7 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(590.33916, 590.33916);
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex1.ONE.atan();
      Complex complex5 = complex1.ONE.createComplex(0.0, 590.33916);
      String string0 = complex0.ONE.toString();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex4.divide(complex5);
      double double0 = complex1.ONE.getArgument();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex3.I.sinh();
      Complex complex10 = complex7.acos();
      Complex complex11 = complex7.asin();
      Complex complex12 = complex3.cosh();
      Complex complex13 = complex11.ZERO.subtract(complex1);
      Complex complex14 = complex6.subtract(complex12);
      Complex complex15 = complex11.multiply(4121.0);
      double double1 = complex4.getImaginary();
      double double2 = complex5.getImaginary();
      Complex complex16 = complex10.tanh();
      double double3 = complex13.getReal();
      double double4 = complex6.getArgument();
      Complex complex17 = complex3.cosh();
      Complex complex18 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.INF.add(complex0);
      String string0 = complex0.INF.toString();
      String string1 = complex0.toString();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex0.ZERO.createComplex(1810.95, 1810.95);
      Complex complex7 = complex3.sin();
      Complex complex8 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(2109.414208959042, 2109.414208959042);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.conjugate();
      Object object0 = complex0.NaN.readResolve();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex0.ONE.sinh();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex0.cosh();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.ZERO.pow(complex8);
      Complex complex10 = complex7.I.multiply(complex5);
      Complex complex11 = complex7.sqrt();
      Complex complex12 = complex4.I.conjugate();
      Complex complex13 = complex1.subtract(complex3);
      Complex complex14 = complex2.multiply(506.1);
      double double0 = complex5.getReal();
      boolean boolean1 = complex13.equals("c+s0LHpzJlx<ai-Pu");
      ComplexField complexField0 = complex0.getField();
      Complex complex15 = complex12.exp();
      Complex complex16 = complex14.sin();
      Complex complex17 = complex1.exp();
      Complex complex18 = complex17.I.subtract(complex14);
      Complex complex19 = complex9.cos();
      double double1 = complex13.getArgument();
      Complex complex20 = complex8.cos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(2315.3464, 2315.3464);
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.I.sqrt();
      Complex complex5 = complex4.ZERO.subtract(complex3);
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex2.multiply(complex0);
      int int1 = complex8.hashCode();
      boolean boolean0 = complex1.isNaN();
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex8.sin();
      Complex complex11 = complex0.subtract(complex9);
      double double0 = complex7.ONE.getArgument();
      Complex complex12 = complex9.cos();
      double double1 = complex9.I.abs();
      Complex complex13 = complex7.asin();
      Complex complex14 = complex11.multiply(1823.1976);
      Complex complex15 = complex14.I.cos();
      Complex complex16 = complex2.ONE.negate();
      Complex complex17 = complex8.asin();
      Complex complex18 = complex2.ZERO.sqrt1z();
      Complex complex19 = complex12.cos();
      ComplexField complexField0 = complex7.getField();
      Complex complex20 = complex2.tan();
      Complex complex21 = complex7.createComplex((-992.9996552489546), 266.0827658764);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex1.createComplex((-996.0968), 312.90628);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.ONE.add(complex6);
      Complex complex8 = complex0.add(complex2);
      Complex complex9 = complex1.pow(complex5);
      Complex complex10 = complex6.sqrt1z();
      Complex complex11 = complex2.conjugate();
      Complex complex12 = complex11.ZERO.exp();
      Complex complex13 = complex2.divide(complex3);
      Complex complex14 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.I.acos();
      int int0 = complex1.I.hashCode();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.exp();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.INF.sqrt1z();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.ONE.exp();
      Complex complex4 = complex0.tanh();
      Object object1 = complex4.readResolve();
      double double1 = complex4.getReal();
      double double2 = complex4.abs();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex4.I.pow(complex5);
      Complex complex7 = complex3.sqrt();
      String string0 = complex7.NaN.toString();
      boolean boolean0 = complex7.equals(complex4);
      Complex complex8 = complex7.add(complex0);
      Complex complex9 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.sinh();
      String string0 = complex3.INF.toString();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex5.ONE.cosh();
      int int0 = complex3.I.hashCode();
      Complex complex7 = complex2.acos();
      ComplexField complexField0 = complex3.getField();
      double double0 = complex3.getReal();
      Complex complex8 = complex7.INF.acos();
      Complex complex9 = complex8.NaN.exp();
      Complex complex10 = complex5.cosh();
      double double1 = complex7.abs();
      Complex complex11 = complex10.INF.multiply(0.0);
      ComplexField complexField1 = complex10.ONE.getField();
      Complex complex12 = complex10.sinh();
      String string1 = complex10.toString();
      Complex complex13 = Complex.I;
      Object object0 = complex13.ZERO.readResolve();
      boolean boolean0 = complex2.equals(complex13);
      Complex complex14 = complex5.sinh();
      Complex complex15 = complex5.createComplex(0.0, 0.5);
      Complex complex16 = complex13.ONE.cos();
      boolean boolean1 = complex4.isNaN();
      boolean boolean2 = complex13.isNaN();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = new Complex(2.0, (-1443.871101820505));
      Complex complex4 = complex1.INF.add(complex3);
      String string0 = complex4.ZERO.toString();
      Complex complex5 = complex2.pow(complex1);
      Complex complex6 = complex4.I.atan();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex4.multiply((-1443.871101820505));
      Complex complex9 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.hashCode();
      Complex complex1 = new Complex(751.7258432262, 751.7258432262);
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.INF.exp();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex3 = complex1.ZERO.sinh();
      double double1 = complex0.getArgument();
      double double2 = complex0.getReal();
      int int0 = complex0.hashCode();
      double double3 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-2558.027949), (-2558.027949));
      Complex complex1 = new Complex(0.0, (-1811.53001));
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.I.add(complex0);
      Complex complex5 = complex4.INF.tanh();
      List<Complex> list0 = complex5.ZERO.nthRoot(234);
      Complex complex6 = complex0.exp();
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex4.negate();
      Complex complex9 = complex8.ZERO.sinh();
      Complex complex10 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.I.acos();
      int int1 = complex0.hashCode();
      String string0 = complex0.toString();
      Complex complex4 = complex3.subtract(complex1);
      double double0 = complex3.getImaginary();
      Complex complex5 = complex0.tanh();
      Complex complex6 = new Complex((-0.8813735870195429), (-0.8813735870195429));
      Complex complex7 = complex4.add(complex6);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.3333333134651184, 0.3333333134651184);
      String string0 = complex0.INF.toString();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex2.NaN.tan();
      Complex complex6 = complex5.INF.log();
      int int0 = complex3.NaN.hashCode();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex1.createComplex(0.3333333134651184, 0.3333333134651184);
      double double0 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-0.12502530217170715), (-0.12502530217170715));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.multiply((-0.12502530217170715));
      Complex complex4 = complex3.NaN.sin();
      List<Complex> list0 = complex4.NaN.nthRoot(129);
      Complex complex5 = complex3.multiply(0.0);
      ComplexField complexField0 = complex5.NaN.getField();
      double double0 = complex2.getReal();
      Complex complex6 = complex3.subtract(complex1);
      boolean boolean0 = complex6.isInfinite();
      boolean boolean1 = complex2.equals("");
      Complex complex7 = complex0.multiply(complex4);
      Complex complex8 = complex7.tanh();
      double double1 = complex8.INF.abs();
      Complex complex9 = complex3.divide(complex6);
      Complex complex10 = complex2.conjugate();
      double double2 = complex8.getArgument();
      ComplexField complexField1 = complex5.getField();
      Complex complex11 = complex10.atan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.tanh();
      Object object0 = complex0.ONE.readResolve();
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Complex complex4 = complex0.cos();
      double double0 = complex1.ONE.getArgument();
      Complex complex5 = complex4.ONE.createComplex(2.0, 2.0);
      Complex complex6 = complex0.acos();
      ComplexField complexField0 = complex6.getField();
      Complex complex7 = complex4.multiply(complex6);
      Complex complex8 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 813.91668227);
      Complex complex1 = new Complex(375.0, (-539.9232787665738));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.tanh();
      boolean boolean0 = complex4.isInfinite();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex6.log();
      Complex complex9 = complex8.ONE.multiply(0.0);
      Complex complex10 = complex4.log();
      Complex complex11 = complex1.atan();
      Complex complex12 = complex11.tanh();
      Complex complex13 = complex11.createComplex(0.0, 375.0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.I.acos();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.subtract(complex0);
      double double0 = complex3.getArgument();
      double double1 = complex3.getImaginary();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(0.0, 1115.0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.ONE.divide(complex1);
      boolean boolean0 = complex2.isInfinite();
      double double0 = complex1.getArgument();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.I.getField();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.createComplex(Double.NaN, (-1.0));
      double double0 = complex1.ZERO.abs();
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.INF.getArgument();
      double double1 = complex0.INF.abs();
      Complex complex1 = complex0.createComplex((-34.17345216), (-34.17345216));
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.multiply(complex1);
      String string0 = complex1.toString();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-2471.5245), (-2471.5245));
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.NaN.multiply((-2471.5245));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.I.sqrt1z();
      double double0 = complex3.abs();
      ComplexField complexField1 = complex1.getField();
      Complex complex5 = complex3.INF.divide(complex0);
      Complex complex6 = complex5.I.multiply(complex1);
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex1.NaN.pow(complex3);
      double double1 = complex1.getImaginary();
      Complex complex9 = complex7.add(complex1);
      double double2 = complex3.getImaginary();
      Complex complex10 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex4.INF.atan();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex4.log();
      Complex complex9 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-1832.0), (-1832.0));
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex6.NaN.asin();
      List<Complex> list0 = complex7.NaN.nthRoot(1948);
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex8.ONE.asin();
      Complex complex10 = complex8.exp();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.INF.acos();
      Object object0 = complex2.I.readResolve();
      Complex complex4 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex2.asin();
      double double1 = complex2.ONE.getArgument();
      Complex complex4 = complex1.tanh();
      boolean boolean0 = complex4.equals("z{");
      Complex complex5 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(1321.505946, 1321.505946);
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(15.0, 15.0);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.I.tan();
      double double0 = complex0.abs();
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex0.createComplex(15.0, 1.0);
      Complex complex7 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ONE.multiply(1426.0);
      Complex complex4 = complex3.atan();
      try { 
        complex2.nthRoot((-292));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -292
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = complex0.ZERO.add(complex4);
      String string0 = complex4.ZERO.toString();
      Complex complex6 = complex3.ZERO.pow(complex0);
      Complex complex7 = complex0.createComplex(Double.POSITIVE_INFINITY, 1755.5861283839924);
      Object object0 = complex2.readResolve();
      double double0 = complex2.getImaginary();
      Complex complex8 = complex3.ONE.subtract(complex4);
      double double1 = complex7.abs();
      Complex complex9 = complex4.subtract(complex0);
      Complex complex10 = complex9.ONE.tanh();
      Complex complex11 = complex9.NaN.acos();
      Complex complex12 = complex9.conjugate();
      Complex complex13 = complex12.ZERO.sqrt1z();
      int int0 = (-1250);
      try { 
        complex0.nthRoot((-1250));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,250
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex1.ZERO.add(complex0);
      Complex complex4 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.INF.cosh();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.divide(complex2);
      Complex complex7 = complex6.INF.exp();
      Complex complex8 = complex1.I.sqrt1z();
      double double0 = complex1.abs();
      Complex complex9 = complex1.acos();
      String string0 = complex9.INF.toString();
      Complex complex10 = complex9.NaN.tanh();
      Complex complex11 = complex0.log();
      Complex complex12 = complex11.ZERO.sin();
      Complex complex13 = complex11.INF.sin();
      Complex complex14 = complex0.multiply(Double.NaN);
      Complex complex15 = complex9.multiply((-1819.12556));
      Complex complex16 = complex14.acos();
      Complex complex17 = complex15.sin();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.multiply(1.0);
      Complex complex3 = complex2.NaN.subtract(complex1);
      Complex complex4 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.multiply((-1028.71910279));
      Complex complex3 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-194.3), 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.ZERO.multiply(2327.729908047644);
      Complex complex3 = complex1.I.atan();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex4 = complex2.INF.multiply(complex1);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ONE.sinh();
      Complex complex7 = complex0.acos();
      String string0 = complex0.toString();
      Complex complex8 = complex7.sin();
      Complex complex9 = complex2.conjugate();
      double double0 = complex0.getArgument();
      Complex complex10 = complex6.log();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex1.ONE.cosh();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex3.tan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex6.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex3.add(complex0);
      Complex complex9 = complex8.createComplex(2032.4, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = new Object();
      Complex complex1 = complex0.ONE.createComplex(2534.3955414, 2534.3955414);
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex0.I.tanh();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.NaN.pow(complex0);
      int int0 = complex6.ONE.hashCode();
      Complex complex7 = complex2.NaN.log();
      Object object1 = complex5.ZERO.readResolve();
      boolean boolean1 = complex5.isNaN();
      Complex complex8 = complex5.NaN.multiply(complex6);
      String string0 = complex2.toString();
      Complex complex9 = complex7.acos();
      double double0 = complex5.getImaginary();
      Complex complex10 = complex2.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Object object0 = complex0.readResolve();
      List<Complex> list0 = complex0.nthRoot(111);
      List<Complex> list1 = complex1.nthRoot(1211);
      Complex complex2 = complex1.conjugate();
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.ONE.multiply(complex0);
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex5.NaN.negate();
      ComplexField complexField0 = complex1.ONE.getField();
      Object object0 = complex0.readResolve();
      Object object1 = new Object();
      boolean boolean0 = complex0.equals(object1);
      Complex complex7 = complex0.sqrt();
      ComplexField complexField1 = complex7.getField();
      double double1 = complex7.abs();
      Complex complex8 = complex2.ONE.atan();
      Complex complex9 = complex0.sqrt1z();
      boolean boolean1 = complex2.isNaN();
      List<Complex> list0 = complex9.nthRoot(1173);
      Complex complex10 = complex0.sqrt1z();
      String string0 = complex7.ONE.toString();
      Complex complex11 = complex7.NaN.cos();
      Complex complex12 = complex11.I.sinh();
      Complex complex13 = complex8.acos();
      Complex complex14 = complex13.INF.multiply(complex9);
      double double2 = complex13.INF.abs();
      Complex complex15 = complex8.tan();
      Complex complex16 = Complex.ZERO;
      Complex complex17 = complex15.NaN.multiply(complex16);
      String string1 = complex15.toString();
      Complex complex18 = complex15.multiply(complex8);
      boolean boolean2 = complex7.isInfinite();
      Complex complex19 = complex4.tan();
      Complex complex20 = complex11.negate();
      double double3 = complex8.getArgument();
      Complex complex21 = complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      String string0 = complex1.ZERO.toString();
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex4.INF.sqrt1z();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(2790.2, 0.625);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.I.cosh();
      String string0 = complex2.I.toString();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.NaN.tanh();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.ZERO.pow(complex2);
      Complex complex9 = complex8.INF.sinh();
      double double0 = complex7.getImaginary();
      Complex complex10 = complex6.tan();
      Complex complex11 = complex3.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.createComplex(1.176342548272881E-8, 0.0);
      Complex complex3 = complex1.sqrt();
      boolean boolean0 = complex1.isNaN();
      double double0 = complex1.abs();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.divide(complex2);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex2.acos();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex3.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.sqrt();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      ComplexField complexField0 = complex1.ZERO.getField();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.NaN.tan();
      Object object1 = complex3.readResolve();
      Object object2 = complex3.ONE.readResolve();
      Complex complex4 = complex0.sqrt1z();
      List<Complex> list0 = complex4.INF.nthRoot(565);
      Complex complex5 = complex0.INF.tanh();
      Complex complex6 = complex3.NaN.tanh();
      Complex complex7 = complex0.pow(complex4);
      Complex complex8 = complex7.NaN.tan();
      Complex complex9 = complex7.NaN.sqrt();
      int int0 = complex3.hashCode();
      Complex complex10 = complex1.acos();
      double double0 = complex10.getArgument();
      Complex complex11 = complex10.multiply(complex0);
      Object object3 = complex3.readResolve();
      Complex complex12 = complex4.negate();
      Complex complex13 = complex6.cosh();
      Complex complex14 = new Complex(565, 1.0);
      boolean boolean0 = complex9.equals(complex14);
  }
}
