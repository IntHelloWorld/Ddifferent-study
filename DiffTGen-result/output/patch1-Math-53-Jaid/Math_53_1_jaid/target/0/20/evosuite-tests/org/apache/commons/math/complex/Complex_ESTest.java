/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 12:15:08 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-772.51110662782), 1601.309);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.atan();
      double double0 = complex3.abs();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.INF.multiply((-528.0));
      Complex complex6 = complex5.INF.divide(complex0);
      Complex complex7 = complex6.INF.acos();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex8 = complex1.log();
      Complex complex9 = complex2.pow(complex8);
      Complex complex10 = new Complex(1601.309, Double.NaN);
      Complex complex11 = complex0.sqrt1z();
      ComplexField complexField0 = complex2.getField();
      double double1 = complex8.ONE.abs();
      Complex complex12 = complex9.cos();
      int int0 = complex12.hashCode();
      Complex complex13 = complex11.sqrt1z();
      Complex complex14 = complex12.log();
      Complex complex15 = Complex.NaN;
      Complex complex16 = complex14.INF.pow(complex15);
      Complex complex17 = complex16.NaN.createComplex(1601.309, (-528.0));
      Complex complex18 = complex9.subtract(complex14);
      Complex complex19 = complex7.cosh();
      double double2 = complex13.abs();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.abs();
      double double1 = complex0.ZERO.getArgument();
      Complex complex1 = new Complex(Double.NaN, 0.041666666666666664);
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex0.ONE.sin();
      int int0 = complex0.hashCode();
      String string0 = complex0.toString();
      Complex complex6 = complex0.ONE.sin();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.NaN.acos();
      Complex complex9 = complex0.divide(complex7);
      Complex complex10 = complex9.ONE.createComplex(0.0, Double.NaN);
      Complex complex11 = complex9.INF.sqrt();
      boolean boolean0 = complex9.equals("(0.0, 1.0)");
      Complex complex12 = complex3.pow(complex9);
      Complex complex13 = complex3.negate();
      boolean boolean1 = complex10.isNaN();
      Complex complex14 = complex0.divide(complex12);
      Object object0 = complex14.readResolve();
      Complex complex15 = complex8.multiply(complex13);
      boolean boolean2 = complex1.equals(complex12);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-2558.14707957), (-2558.14707957));
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.ONE.divide(complex2);
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.I.add(complex2);
      Complex complex6 = complex0.cosh();
      ComplexField complexField0 = complex6.ONE.getField();
      Complex complex7 = complex0.INF.exp();
      Complex complex8 = complex5.tan();
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex4.ONE.asin();
      Complex complex11 = complex2.tan();
      Complex complex12 = complex11.INF.sinh();
      Complex complex13 = complex4.pow(complex2);
      Complex complex14 = complex13.NaN.asin();
      double double0 = complex0.getReal();
      Complex complex15 = complex5.subtract(complex4);
      int int1 = complex15.INF.hashCode();
      double double1 = complex15.abs();
      String string0 = complex12.toString();
      boolean boolean0 = complex5.isInfinite();
      boolean boolean1 = complex14.equals(complex8);
      Complex complex16 = complex15.cos();
      Complex complex17 = complex2.exp();
      Complex complex18 = complex17.divide(complex1);
      Complex complex19 = complex0.asin();
      double double2 = complex16.getArgument();
      Complex complex20 = complex8.cosh();
      String string1 = complex5.toString();
      Complex complex21 = complex9.sqrt1z();
      double double3 = complex16.getArgument();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(15.0, 15.0);
      Complex complex1 = complex0.ZERO.cos();
      int int0 = complex1.I.hashCode();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.INF.multiply(15.0);
      Complex complex4 = complex0.NaN.asin();
      ComplexField complexField1 = complex2.ZERO.getField();
      Object object0 = complex2.NaN.readResolve();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.conjugate();
      String string0 = complex6.ONE.toString();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex4.ONE.add(complex7);
      Complex complex9 = complex5.pow(complex2);
      Complex complex10 = complex4.I.subtract(complex3);
      Complex complex11 = complex10.I.sqrt1z();
      Complex complex12 = complex4.negate();
      Complex complex13 = complex8.tanh();
      Complex complex14 = complex13.ONE.sqrt1z();
      double double0 = complex3.getImaginary();
      Complex complex15 = complex12.sinh();
      Complex complex16 = complex12.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex17 = complex16.NaN.multiply(complex6);
      Complex complex18 = complex1.log();
      Complex complex19 = complex7.conjugate();
      boolean boolean0 = complex4.isInfinite();
      Complex complex20 = complex13.createComplex(2515.6, 0.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.multiply((-22.528));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-2901.0), (-932.0));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.ONE.divide(complex1);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.NaN.createComplex(1.0, (-2588.1519767));
      Complex complex6 = complex5.ZERO.multiply((-932.0));
      List<Complex> list0 = complex6.ZERO.nthRoot(1);
      Complex complex7 = complex4.INF.pow(complex0);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex8.NaN.atan();
      Complex complex11 = complex0.INF.cosh();
      Complex complex12 = complex9.multiply((-1021.9295827882));
      int int0 = complex12.I.hashCode();
      double double0 = complex12.ZERO.abs();
      Complex complex13 = complex1.cosh();
      Complex complex14 = complex7.negate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(15.0, 15.0);
      Complex complex1 = complex0.ZERO.cos();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.INF.multiply(15.0);
      Complex complex4 = complex0.NaN.asin();
      ComplexField complexField1 = complex2.ZERO.getField();
      Object object0 = complex2.NaN.readResolve();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.conjugate();
      String string0 = complex6.ONE.toString();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex4.ONE.add(complex7);
      Complex complex9 = complex5.pow(complex2);
      Complex complex10 = complex4.I.subtract(complex3);
      Complex complex11 = complex10.I.sqrt1z();
      Complex complex12 = complex4.negate();
      Complex complex13 = complex8.tanh();
      Complex complex14 = complex13.ONE.sqrt1z();
      Complex complex15 = complex12.sinh();
      Complex complex16 = complex1.log();
      Complex complex17 = complex7.conjugate();
      boolean boolean0 = complex4.isInfinite();
      Complex complex18 = complex13.createComplex(2515.6, 0.0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.ZERO.divide(complex0);
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex1.ONE.multiply(2456.538);
      Complex complex4 = complex1.NaN.sin();
      Complex complex5 = complex4.negate();
      String string0 = complex0.toString();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex6.ONE.exp();
      Complex complex9 = complex6.pow(complex0);
      Complex complex10 = complex4.atan();
      int int1 = complex6.hashCode();
      Complex complex11 = complex0.pow(complex5);
      Complex complex12 = complex5.add(complex7);
      Complex complex13 = complex12.ONE.sin();
      double double0 = complex7.getArgument();
      Complex complex14 = complex12.acos();
      boolean boolean0 = complex10.isInfinite();
      double double1 = complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex2.NaN.negate();
      double double0 = complex2.ONE.abs();
      int int0 = complex0.hashCode();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.ONE.add(complex3);
      Complex complex6 = complex1.ONE.cosh();
      Complex complex7 = complex4.I.pow(complex2);
      Complex complex8 = complex0.sqrt1z();
      List<Complex> list0 = complex7.nthRoot(50);
      boolean boolean0 = complex7.isNaN();
      boolean boolean1 = complex3.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(1283.3895424, 983.99174211281);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex0.NaN.asin();
      Complex complex4 = complex3.NaN.sqrt();
      List<Complex> list0 = complex3.I.nthRoot(1);
      Object object0 = complex0.readResolve();
      List<Complex> list1 = complex3.I.nthRoot(1);
      Object object1 = complex0.readResolve();
      Object object2 = complex0.readResolve();
      Complex complex5 = complex3.NaN.acos();
      Complex complex6 = complex3.exp();
      String string0 = complex0.toString();
      Complex complex7 = complex3.cos();
      int int0 = complex7.hashCode();
      Complex complex8 = complex1.multiply(873.25588762);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.I.multiply(complex0);
      Complex complex5 = complex3.I.cos();
      Complex complex6 = complex5.pow(complex0);
      Complex complex7 = complex5.multiply(complex2);
      Complex complex8 = complex0.pow(complex3);
      Complex complex9 = complex8.ZERO.sin();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(1024.0, 0.0);
      String string0 = complex0.I.toString();
      double double0 = complex0.abs();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.createComplex((-1719.0), (-1719.0));
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex4.ZERO.multiply((-543.0072));
      Object object0 = complex1.readResolve();
      Complex complex9 = complex7.createComplex(1024.0, (-1719.0));
      String string1 = complex7.toString();
      Complex complex10 = complex5.sqrt1z();
      Complex complex11 = complex4.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(1275.35, 1275.35);
      Complex complex1 = complex0.ZERO.exp();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex1.NaN.atan();
      Complex complex5 = complex4.INF.subtract(complex0);
      Complex complex6 = complex1.createComplex(0.0, 2925.70072189);
      Complex complex7 = complex1.add(complex4);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      Complex complex2 = complex0.INF.sqrt();
      double double0 = complex2.ONE.abs();
      int int0 = complex2.NaN.hashCode();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.createComplex(Double.POSITIVE_INFINITY, 88.0);
      Object object0 = complex1.ONE.readResolve();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.NaN.exp();
      double double0 = complex0.getArgument();
      double double1 = complex0.abs();
      Complex complex4 = complex1.asin();
      double double2 = complex4.getArgument();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex5.ZERO.acos();
      Complex complex7 = complex0.INF.divide(complex1);
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex1.pow(complex8);
      Complex complex10 = complex9.sin();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex2.ONE.subtract(complex3);
      Complex complex6 = complex5.I.atan();
      Complex complex7 = complex6.subtract(complex1);
      Complex complex8 = complex7.INF.asin();
      String string0 = complex3.INF.toString();
      Complex complex9 = complex2.multiply((-602.9196));
      Complex complex10 = complex9.multiply(complex2);
      Complex complex11 = complex10.I.conjugate();
      Complex complex12 = complex10.cosh();
      Complex complex13 = complex12.ONE.multiply(complex10);
      Object object0 = complex1.readResolve();
      int int0 = complex12.hashCode();
      String string1 = complex0.toString();
      Complex complex14 = complex1.sinh();
      Complex complex15 = complex11.subtract(complex0);
      double double0 = complex12.abs();
      boolean boolean0 = complex10.isNaN();
      double double1 = complex3.getImaginary();
      boolean boolean1 = complex10.isInfinite();
      Complex complex16 = complex3.pow(complex2);
      try { 
        complex14.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.asin();
      double double0 = complex0.NaN.getArgument();
      double double1 = complex0.getArgument();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex2.NaN.conjugate();
      double double2 = complex2.NaN.abs();
      double double3 = complex0.abs();
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-3582.0168359), (-8.0E298));
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.ONE.tanh();
      int int0 = complex0.I.hashCode();
      double double0 = complex0.INF.abs();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex6.I.tanh();
      Complex complex9 = complex8.subtract(complex6);
      Complex complex10 = complex9.exp();
      Complex complex11 = complex4.ZERO.tan();
      Complex complex12 = complex4.multiply(complex0);
      Complex complex13 = complex0.ONE.cosh();
      Complex complex14 = complex12.NaN.acos();
      boolean boolean0 = complex12.isInfinite();
      double double1 = complex4.getArgument();
      double double2 = complex9.getArgument();
      Complex complex15 = complex12.cos();
      double double3 = complex11.getImaginary();
      Complex complex16 = complex12.add(complex5);
      Complex complex17 = complex8.sqrt();
      Complex complex18 = complex9.sqrt1z();
      Complex complex19 = complex13.pow(complex8);
      String string0 = complex12.toString();
      Object object0 = complex9.readResolve();
      Complex complex20 = complex5.atan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex2.I.cos();
      Complex complex6 = complex4.INF.createComplex(639.98789, (-135.72));
      int int0 = complex1.I.hashCode();
      Complex complex7 = complex6.ONE.createComplex((-3928.4278645), (-399.7885152577));
      boolean boolean0 = complex0.isInfinite();
      List<Complex> list0 = complex0.nthRoot(37);
      Complex complex8 = complex0.negate();
      Complex complex9 = complex8.INF.multiply((double) 37);
      Complex complex10 = complex8.exp();
      Complex complex11 = complex10.acos();
      Complex complex12 = complex6.tan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex1.tan();
      ComplexField complexField0 = complex1.getField();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex0.pow(complex5);
      Complex complex8 = complex3.pow(complex0);
      Complex complex9 = complex4.log();
      Object object0 = complex6.readResolve();
      boolean boolean0 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      List<Complex> list0 = complex1.nthRoot(207);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex4.multiply(complex0);
      double double0 = complex5.getReal();
      String string0 = complex6.toString();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.equals("(1.5707963267948966, -1.0120948455406893)");
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex7.atan();
      double double1 = complex2.getImaginary();
      Complex complex9 = complex3.sin();
      String string1 = complex4.toString();
      Complex complex10 = complex8.createComplex(41.9174, (-1894.84));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      List<Complex> list0 = complex1.nthRoot(269);
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      double double0 = complex0.INF.abs();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex0.I.add(complex2);
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex4.ONE.sinh();
      Complex complex7 = complex0.I.sqrt1z();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex6.ZERO.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex10 = complex0.subtract(complex7);
      Complex complex11 = complex10.ONE.add(complex7);
      ComplexField complexField0 = complex11.NaN.getField();
      Complex complex12 = complex11.INF.pow(complex6);
      Complex complex13 = complex10.NaN.negate();
      Complex complex14 = complex10.acos();
      double double1 = complex10.getReal();
      Object object0 = complex14.readResolve();
      Complex complex15 = complex13.sqrt();
      boolean boolean0 = complex6.isInfinite();
      Complex complex16 = complex14.multiply(Double.POSITIVE_INFINITY);
      Complex complex17 = complex3.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex5.INF.atan();
      Complex complex7 = complex0.I.sqrt();
      double double0 = complex2.abs();
      boolean boolean0 = complex6.isNaN();
      double double1 = complex1.abs();
      Object object1 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1585.49571050159), (-1585.49571050159));
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.createComplex(1.0, 1.0);
      Complex complex3 = complex2.ZERO.sin();
      double double0 = complex1.getReal();
      Complex complex4 = complex2.negate();
      Object object1 = complex2.I.readResolve();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex4.NaN.multiply(complex2);
      ComplexField complexField0 = complex6.ONE.getField();
      Object object2 = complex5.NaN.readResolve();
      boolean boolean0 = complex2.isNaN();
      double double1 = complex5.INF.getArgument();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex8.INF.pow(complex2);
      Complex complex10 = complex3.add(complex5);
      Complex complex11 = complex5.sinh();
      Complex complex12 = complex4.asin();
      Complex complex13 = complex1.multiply(0.7853981633974483);
      List<Complex> list0 = complex13.INF.nthRoot(121);
      double double2 = complex2.abs();
      Complex complex14 = complex5.multiply(complex0);
      double double3 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0.0);
      double double0 = complex0.abs();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.NaN.negate();
      String string0 = complex1.I.toString();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex5 = complex0.ZERO.cos();
      Complex complex6 = complex5.ZERO.multiply(1.633123935319537E16);
      Complex complex7 = complex1.ONE.conjugate();
      List<Complex> list0 = complex0.nthRoot(1744);
      Complex complex8 = complex2.add(complex1);
      Complex complex9 = complex2.ONE.sin();
      Complex complex10 = complex9.ZERO.divide(complex8);
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex9.ZERO.multiply(complex11);
      Complex complex13 = complex12.NaN.add(complex7);
      Complex complex14 = complex2.multiply((-1166.29979718814));
      Complex complex15 = complex5.add(complex2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex1.sqrt();
      boolean boolean1 = complex2.isInfinite();
      Complex complex3 = complex2.INF.asin();
      boolean boolean2 = complex0.equals(complex1);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex2.sqrt();
      boolean boolean3 = complex5.isNaN();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex1.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ZERO.getArgument();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.cos();
      int int0 = complex0.hashCode();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.multiply(0.0);
      Complex complex6 = complex5.add(complex4);
      Complex complex7 = complex2.acos();
      double double1 = complex7.NaN.abs();
      Complex complex8 = complex7.cos();
      Complex complex9 = complex7.atan();
      Complex complex10 = complex9.NaN.pow(complex5);
      Complex complex11 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.createComplex(0.0, Double.NaN);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-2119.19496013), (-2119.19496013));
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.exp();
      double double0 = complex4.NaN.abs();
      Complex complex5 = complex2.multiply((-2119.19496013));
      Complex complex6 = complex3.multiply(complex5);
      double double1 = complex5.getImaginary();
      boolean boolean0 = complex3.isInfinite();
      Complex complex7 = complex2.divide(complex0);
      Complex complex8 = complex6.exp();
      Complex complex9 = complex5.pow(complex2);
      Complex complex10 = complex4.divide(complex8);
      Complex complex11 = complex10.cos();
      Complex complex12 = complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2856.2868639));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex1.conjugate();
      Object object0 = complex2.readResolve();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex5.subtract(complex4);
      Complex complex10 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.atan();
      double double1 = complex4.abs();
      Complex complex5 = complex0.sqrt1z();
      int int0 = complex3.hashCode();
      int int1 = complex3.hashCode();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex2.createComplex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Object object0 = complex0.NaN.readResolve();
      Complex complex2 = complex1.divide(complex0);
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 6.283185307179586);
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.ONE.multiply(0.6931470632553101);
      String string0 = complex0.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex4.NaN.log();
      double double0 = complex4.getReal();
      boolean boolean1 = complex4.isInfinite();
      Complex complex6 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(1441.501136, 1.633123935319537E16);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.INF.sqrt1z();
      double double0 = complex0.abs();
      Complex complex7 = complex4.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.hashCode();
      double double0 = complex0.INF.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex1.ZERO.subtract(complex0);
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex1.I.atan();
      Complex complex7 = complex6.INF.conjugate();
      Complex complex8 = complex0.acos();
      double double0 = complex0.abs();
      Complex complex9 = complex0.ONE.multiply(complex4);
      try { 
        complex6.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex3.ZERO.negate();
      Complex complex6 = complex0.createComplex(1.0, 1.0);
      String string0 = complex6.I.toString();
      Complex complex7 = Complex.I;
      Complex complex8 = complex1.NaN.add(complex7);
      boolean boolean0 = complex2.isNaN();
      int int0 = complex3.hashCode();
      Complex complex9 = complex2.multiply(complex0);
      double double0 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-4252.4769531636475));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.I.multiply(complex2);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex1.sin();
      Complex complex10 = complex1.createComplex(0.3999999761581421, 1180.1820112);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ZERO.conjugate();
      double double0 = complex0.ONE.getArgument();
      Complex complex4 = complex1.ZERO.multiply(0.125);
      Complex complex5 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      String string0 = complex0.toString();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex1.ZERO.cosh();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.INF.atan();
      Object object0 = complex1.INF.readResolve();
      double double1 = (-3414.150734685048);
      Complex complex2 = new Complex((-717.6212845709), (-3414.150734685048));
      Complex complex3 = complex0.ZERO.multiply(complex2);
      Complex complex4 = complex3.I.cosh();
      double double2 = complex0.getReal();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = complex5.I.tanh();
      Complex complex9 = complex3.cosh();
      Complex complex10 = complex3.NaN.tan();
      double double3 = complex8.NaN.getArgument();
      Complex complex11 = complex0.sinh();
      Complex complex12 = complex2.log();
      double double4 = complex12.I.abs();
      double double5 = complex3.getReal();
      Complex complex13 = complex3.NaN.createComplex(1.0, 0.0);
      Complex complex14 = complex13.cosh();
      try { 
        complex3.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.875, 0.875);
      Complex complex1 = Complex.ZERO;
      String string0 = complex1.ZERO.toString();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex3.ZERO.multiply(3285.221826);
      double double0 = complex0.getReal();
      double double1 = complex0.getReal();
      ComplexField complexField0 = complex2.getField();
      Complex complex5 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      List<Complex> list0 = complex0.NaN.nthRoot(516);
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.I.createComplex(516, 0.0);
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex2.ONE.exp();
      Complex complex6 = complex4.ONE.sqrt();
      double double0 = complex0.getReal();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.ZERO.atan();
      String string0 = complex3.I.toString();
      Complex complex4 = complex2.I.sqrt();
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex5.ONE.multiply(1.0);
      double double0 = complex4.abs();
      Complex complex7 = complex4.INF.subtract(complex0);
      Complex complex8 = complex0.subtract(complex2);
      Complex complex9 = complex4.exp();
      Complex complex10 = complex9.NaN.multiply(1.0);
      String string1 = complex10.INF.toString();
      Complex complex11 = complex1.sin();
      Complex complex12 = complex2.ZERO.negate();
      Complex complex13 = complex0.atan();
      Complex complex14 = complex5.INF.pow(complex10);
      Complex complex15 = complex0.I.subtract(complex6);
      Complex complex16 = complex1.createComplex((-9.7766953), 1.0);
      Complex complex17 = complex16.ZERO.pow(complex3);
      Complex complex18 = complex8.multiply((-3114.8524053395718));
      Complex complex19 = complex3.multiply(complex11);
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex5.isNaN();
      int int0 = complex4.hashCode();
      try { 
        complex1.nthRoot((-2392));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,392
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex0.ONE.log();
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex3.INF.createComplex(0.0, 0.0);
      Complex complex6 = complex0.ZERO.createComplex(0.0, 0.0);
      List<Complex> list0 = complex3.ONE.nthRoot(7);
      List<Complex> list1 = complex0.ONE.nthRoot(89);
      List<Complex> list2 = complex0.nthRoot(1);
      List<Complex> list3 = complex0.nthRoot(1);
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.INF.tanh();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex4.createComplex(0.19999999999923582, 0.0);
      Complex complex11 = complex10.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-772.51110662782), 1601.309);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.atan();
      double double0 = complex3.abs();
      Complex complex4 = complex1.INF.atan();
      Complex complex5 = complex0.INF.multiply((-528.0));
      Complex complex6 = complex5.INF.divide(complex0);
      Complex complex7 = complex6.INF.acos();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex8 = complex1.log();
      Complex complex9 = complex2.pow(complex8);
      Complex complex10 = complex6.exp();
      Complex complex11 = complex0.sqrt1z();
      ComplexField complexField0 = complex2.getField();
      double double1 = complex8.ONE.abs();
      Complex complex12 = complex9.cos();
      int int0 = complex12.hashCode();
      Complex complex13 = complex11.sqrt1z();
      Complex complex14 = complex12.log();
      Complex complex15 = Complex.NaN;
      Complex complex16 = complex14.INF.pow(complex15);
      Complex complex17 = complex16.NaN.createComplex(1601.309, (-528.0));
      Complex complex18 = complex9.subtract(complex14);
      Complex complex19 = complex7.cosh();
      double double2 = complex13.abs();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = Complex.ONE;
      int int0 = complex1.hashCode();
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex6.ZERO.conjugate();
      Complex complex8 = complex7.ZERO.sqrt();
      Complex complex9 = complex2.NaN.tan();
      Object object0 = complex8.readResolve();
      boolean boolean0 = complex4.equals("hfFADo`z2w&7u(oUtB");
      Complex complex10 = complex2.multiply(complex0);
      Complex complex11 = complex10.NaN.tan();
      Complex complex12 = complex7.pow(complex2);
      Complex complex13 = complex3.cosh();
      Complex complex14 = complex2.sqrt();
      Complex complex15 = complex8.sin();
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-803.971457), 0.0875862700108075);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.INF.multiply(0.99);
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = complex1.ONE.log();
      int int0 = complex3.NaN.hashCode();
      int int1 = complex2.INF.hashCode();
      double double0 = complex2.ZERO.abs();
      Complex complex5 = complex0.NaN.negate();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex6.I.asin();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex1.I.add(complex8);
      Complex complex10 = complex6.ONE.pow(complex7);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex11 = complex6.ZERO.sqrt1z();
      double double1 = complex1.INF.abs();
      Complex complex12 = complex0.tanh();
      Complex complex13 = complex1.sqrt1z();
      Complex complex14 = complex1.NaN.acos();
      Object object0 = complex6.readResolve();
      Complex complex15 = complex6.tan();
      Complex complex16 = complex5.NaN.tanh();
      Complex complex17 = complex15.ZERO.sqrt();
      boolean boolean0 = complex10.isInfinite();
      Complex complex18 = complex13.asin();
      Complex complex19 = complex18.INF.divide(complex11);
      int int2 = complex18.I.hashCode();
      boolean boolean1 = complex1.isInfinite();
      Complex complex20 = complex15.tanh();
      ComplexField complexField1 = complex20.ONE.getField();
      Complex complex21 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = complex0.INF.negate();
      double double0 = complex0.abs();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex7.ONE.asin();
      ComplexField complexField0 = complex9.ZERO.getField();
      Complex complex10 = complex8.ZERO.sqrt1z();
      Complex complex11 = complex8.add(complex3);
      boolean boolean0 = complex1.isInfinite();
      Complex complex12 = complex8.exp();
      List<Complex> list0 = complex12.INF.nthRoot(248);
      Complex complex13 = complex7.add(complex0);
      Complex complex14 = complex1.negate();
      Complex complex15 = complex14.pow(complex1);
      Complex complex16 = complex15.sinh();
      double double1 = complex11.getReal();
      Complex complex17 = complex14.sin();
      Complex complex18 = complex0.sin();
      Complex complex19 = complex11.asin();
      int int0 = complex18.hashCode();
      String string0 = complex14.toString();
      boolean boolean1 = complex10.equals(complex0);
      Complex complex20 = complex16.divide(complex2);
      Complex complex21 = complex7.conjugate();
      Complex complex22 = complex6.sinh();
      Complex complex23 = complex14.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.NaN.cosh();
      double double0 = complex0.getArgument();
      double double1 = complex0.getReal();
      double double2 = complex0.I.abs();
      Complex complex3 = complex1.I.negate();
      double double3 = complex3.abs();
      Complex complex4 = complex3.ONE.subtract(complex1);
      List<Complex> list0 = complex0.ZERO.nthRoot(6);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.ONE.subtract(complex1);
      int int1 = complex6.ONE.hashCode();
      Complex complex7 = complex5.ZERO.divide(complex1);
      double double4 = complex7.ONE.getArgument();
      double double5 = complex5.INF.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex8 = complex0.ONE.pow(complex1);
      double double6 = complex5.getArgument();
      double double7 = complex2.getArgument();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex1.log();
      Complex complex11 = complex10.log();
      Complex complex12 = complex2.negate();
      Object object1 = new Object();
      boolean boolean0 = complex11.equals(object1);
      double double8 = complex5.getImaginary();
      Complex complex13 = complex1.add(complex2);
      Complex complex14 = complex6.sqrt();
      Complex complex15 = complex7.sqrt();
      Complex complex16 = complex10.sinh();
      Complex complex17 = complex16.INF.tan();
      ComplexField complexField0 = complex7.getField();
      double double9 = complex8.abs();
      Complex complex18 = complex5.tanh();
  }
}
