/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 12:11:16 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(9174109.856336458, 2472.9052649622777);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.INF.pow(complex1);
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex4.ONE.sqrt1z();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex7.multiply(2.141272545511354);
      Complex complex10 = complex9.tan();
      Complex complex11 = complex1.negate();
      Complex complex12 = complex6.add(complex9);
      Complex complex13 = complex10.sin();
      Complex complex14 = complex10.cos();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(1521.46730542, 0.11764700710773468);
      Complex complex2 = new Complex(1521.46730542, (-1405.5009292526888));
      Complex complex3 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(0.008336750013465571, 0.008336750013465571);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.I.tan();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex1.ZERO.cosh();
      String string0 = complex0.INF.toString();
      double double0 = complex0.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex4.createComplex(3150.8269602388145, (-3562.0));
      List<Complex> list0 = complex5.NaN.nthRoot(281);
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex6.ZERO.atan();
      Complex complex8 = complex1.divide(complex0);
      Complex complex9 = complex8.pow(complex3);
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex10.I.multiply(0.0);
      Complex complex12 = complex3.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(211.5499, (-3036.257929841677));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex1.ONE.atan();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex0.tan();
      boolean boolean0 = complex1.equals(complex2);
      Complex complex6 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex1.NaN.tanh();
      Complex complex6 = complex5.NaN.add(complex1);
      Complex complex7 = complex0.ZERO.tan();
      Complex complex8 = complex7.NaN.sqrt1z();
      ComplexField complexField0 = complex8.getField();
      double double0 = complex0.ZERO.abs();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex10.multiply(complex0);
      Complex complex12 = complex8.multiply(complex7);
      Complex complex13 = complex12.ONE.cos();
      Complex complex14 = complex12.ZERO.sqrt1z();
      Complex complex15 = complex11.log();
      Complex complex16 = complex1.atan();
      Complex complex17 = complex10.INF.log();
      Complex complex18 = complex16.I.exp();
      Complex complex19 = complex11.log();
      Complex complex20 = complex19.ZERO.createComplex(1, 412.67);
      Complex complex21 = complex10.tan();
      Complex complex22 = complex21.I.sqrt();
      Complex complex23 = complex7.createComplex(0.0, 1);
      Complex complex24 = complex6.acos();
      Complex complex25 = complex1.log();
      Complex complex26 = complex5.multiply(complex10);
      List<Complex> list1 = complex10.nthRoot(1205);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = complex0.NaN.multiply((-1410.591648303782));
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex1.NaN.sin();
      Complex complex7 = complex0.INF.sin();
      Complex complex8 = complex3.tanh();
      int int0 = complex0.ZERO.hashCode();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex7.conjugate();
      Complex complex11 = complex4.INF.conjugate();
      Complex complex12 = complex6.sin();
      Complex complex13 = complex1.tan();
      Complex complex14 = complex3.subtract(complex7);
      Complex complex15 = complex14.ONE.sinh();
      Complex complex16 = complex5.add(complex3);
      Complex complex17 = complex8.multiply((-1410.591648303782));
      Complex complex18 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.tanh();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex4 = complex1.ONE.negate();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex0.ONE.sin();
      String string0 = complex6.ONE.toString();
      double double0 = complex0.getArgument();
      double double1 = complex1.getArgument();
      Complex complex7 = complex6.I.conjugate();
      String string1 = complex1.toString();
      int int0 = complex5.hashCode();
      double double2 = complex0.getArgument();
      Complex complex8 = complex0.asin();
      boolean boolean0 = complex6.isNaN();
      Complex complex9 = complex0.exp();
      List<Complex> list0 = complex6.nthRoot(86);
      Complex complex10 = complex0.negate();
      boolean boolean1 = complex4.equals(complex5);
      Complex complex11 = complex8.sqrt1z();
      Object object0 = complex10.readResolve();
      Complex complex12 = complex5.tan();
      int int1 = complex10.hashCode();
      Complex complex13 = complex11.multiply((double) 86);
      Object object1 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.INF.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 2258.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(1506.7606, (-1031.4722031));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.ONE.tan();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex4 = complex0.createComplex((-1031.4722031), 0.0);
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex5.ONE.sinh();
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex7.sin();
      double double0 = complex5.NaN.abs();
      ComplexField complexField1 = complex4.getField();
      Complex complex9 = complex5.ZERO.multiply(complex0);
      String string0 = complex9.ONE.toString();
      Complex complex10 = complex4.sin();
      Complex complex11 = complex5.ONE.atan();
      Complex complex12 = complex10.pow(complex4);
      Complex complex13 = complex5.exp();
      Complex complex14 = complex0.NaN.log();
      Complex complex15 = complex13.cosh();
      Complex complex16 = complex10.add(complex13);
      Complex complex17 = complex16.NaN.divide(complex1);
      Complex complex18 = complex0.sinh();
      Complex complex19 = complex10.createComplex((-1.7976931348623157E308), Double.NaN);
      Complex complex20 = complex19.createComplex(0.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.asin();
      String string0 = complex1.ZERO.toString();
      Complex complex2 = new Complex(3.0, 3.0);
      Complex complex3 = complex0.ONE.log();
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex0.pow(complex2);
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex0.I.negate();
      Complex complex7 = complex0.ONE.subtract(complex5);
      Object object0 = complex5.ZERO.readResolve();
      String string1 = complex5.INF.toString();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex8.I.subtract(complex6);
      Complex complex10 = complex2.conjugate();
      Complex complex11 = complex8.sin();
      Complex complex12 = complex11.I.log();
      Complex complex13 = complex3.sin();
      Complex complex14 = complex6.divide(complex13);
      double double0 = complex14.getArgument();
      Complex complex15 = complex10.sqrt();
      Complex complex16 = complex0.pow(complex8);
      Complex complex17 = complex15.exp();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-708.115271325661), (-708.115271325661));
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.NaN.pow(complex0);
      String string0 = complex1.ONE.toString();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.I.pow(complex1);
      String string1 = complex3.ZERO.toString();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex5.ONE.conjugate();
      double double0 = complex0.getArgument();
      boolean boolean0 = complex5.isInfinite();
      double double1 = complex0.getImaginary();
      Complex complex7 = complex5.atan();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex2.I.atan();
      double double0 = complex1.getArgument();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.INF.tanh();
      double double1 = complex6.I.abs();
      Complex complex8 = complex6.divide(complex2);
      Complex complex9 = complex8.ZERO.atan();
      double double2 = complex8.abs();
      Complex complex10 = complex1.asin();
      Complex complex11 = complex8.sqrt1z();
      Complex complex12 = complex11.INF.cosh();
      Complex complex13 = complex7.log();
      String string0 = complex13.INF.toString();
      double double3 = complex4.NaN.getArgument();
      Complex complex14 = complex3.sin();
      double double4 = complex0.abs();
      int int0 = complex4.hashCode();
      Complex complex15 = complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.tanh();
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex3.INF.multiply(complex2);
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = complex2.I.log();
      int int0 = complex4.ZERO.hashCode();
      Complex complex8 = complex4.ONE.cosh();
      Complex complex9 = complex2.multiply(complex3);
      double double1 = complex3.getReal();
      double double2 = complex1.getArgument();
      Complex complex10 = complex9.ZERO.sqrt1z();
      Complex complex11 = complex2.acos();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex2.subtract(complex12);
      String string0 = complex4.toString();
      Complex complex14 = complex3.conjugate();
      Complex complex15 = complex4.exp();
      int int1 = complex9.hashCode();
      Complex complex16 = complex8.cosh();
      Complex complex17 = complex1.acos();
      Complex complex18 = complex17.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex19 = complex2.subtract(complex17);
      Complex complex20 = complex12.multiply(0.0);
      Complex complex21 = complex20.I.divide(complex11);
      boolean boolean0 = complex14.isNaN();
      Complex complex22 = complex3.sqrt();
      Complex complex23 = complex21.atan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      double double0 = complex1.getArgument();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex2.INF.multiply(complex1);
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex0.I.log();
      int int0 = complex3.ZERO.hashCode();
      Complex complex7 = complex3.ONE.cosh();
      double double1 = complex2.getReal();
      double double2 = complex1.getArgument();
      Complex complex8 = complex4.ZERO.sqrt1z();
      Complex complex9 = complex1.acos();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex0.subtract(complex10);
      String string0 = complex3.toString();
      Complex complex12 = complex2.conjugate();
      Complex complex13 = complex3.exp();
      int int1 = complex6.hashCode();
      Complex complex14 = complex7.cosh();
      Complex complex15 = complex1.acos();
      Complex complex16 = complex15.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex17 = complex0.subtract(complex15);
      Complex complex18 = complex10.multiply(0.0);
      Complex complex19 = complex18.I.divide(complex9);
      boolean boolean0 = complex12.isNaN();
      Complex complex20 = complex2.sqrt();
      Complex complex21 = complex19.atan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.I.pow(complex1);
      double double0 = complex0.getReal();
      boolean boolean1 = complex1.isNaN();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex6.createComplex(Double.POSITIVE_INFINITY, 0.875);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(4.455505956692757, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.sqrt();
      int int0 = complex1.hashCode();
      Complex complex3 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.ONE.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.multiply(complex1);
      double double0 = complex0.ONE.abs();
      int int0 = complex0.I.hashCode();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.INF.cos();
      Complex complex5 = complex3.ONE.sqrt1z();
      Complex complex6 = complex0.subtract(complex3);
      double double1 = complex2.getArgument();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex6.asin();
      Complex complex9 = complex5.cos();
      Complex complex10 = complex6.sqrt1z();
      String string0 = complex6.toString();
      boolean boolean0 = complex3.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.add(complex0);
      double double0 = complex0.INF.abs();
      String string0 = complex1.toString();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.INF.divide(complex3);
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex1.I.pow(complex0);
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex0.multiply(complex1);
      double double1 = complex7.I.abs();
      double double2 = complex7.getImaginary();
      Complex complex8 = complex1.NaN.tan();
      Complex complex9 = complex8.ZERO.add(complex4);
      Complex complex10 = complex0.NaN.add(complex4);
      try { 
        complex6.nthRoot((-1157));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,157
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(324.50259046228, 324.50259046228);
      Complex complex1 = new Complex((-1.0), 324.50259046228);
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.atan();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex4 = complex3.INF.tanh();
      String string0 = complex3.toString();
      Complex complex5 = complex0.createComplex((-183.17), (-183.17));
      Complex complex6 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-66.8609938), 1.2599210498948732);
      Complex complex1 = complex0.INF.log();
      Object object0 = complex0.ONE.readResolve();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.I.multiply(0.0);
      Complex complex4 = complex3.INF.conjugate();
      double double0 = complex0.getArgument();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(149.5219744, 149.5219744);
      Complex complex2 = complex1.INF.sqrt();
      List<Complex> list0 = complex1.nthRoot(1952);
      Complex complex3 = complex0.ZERO.subtract(complex1);
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex3.atan();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex3.ZERO.pow(complex5);
      Complex complex8 = complex4.conjugate();
      Object object0 = complex8.INF.readResolve();
      Complex complex9 = complex5.ONE.multiply(Double.NaN);
      Complex complex10 = complex0.cos();
      Complex complex11 = complex4.tanh();
      Complex complex12 = complex5.cos();
      Complex complex13 = complex12.createComplex(149.5219744, 232.4323329);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.multiply(Double.NaN);
      Complex complex4 = complex2.INF.log();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex2.INF.divide(complex1);
      Complex complex8 = complex0.acos();
      Complex complex9 = complex5.NaN.divide(complex2);
      Complex complex10 = complex2.add(complex1);
      Complex complex11 = complex8.pow(complex4);
      Complex complex12 = complex10.INF.tanh();
      Complex complex13 = complex8.multiply(0.0);
      Complex complex14 = complex8.log();
      double double0 = complex5.getImaginary();
      Complex complex15 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(11.0, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.I.subtract(complex1);
      String string0 = complex4.NaN.toString();
      Complex complex5 = complex3.multiply(0.0);
      Complex complex6 = complex5.ONE.exp();
      Complex complex7 = complex1.createComplex((-1436.4), 6.283185307179586);
      Complex complex8 = complex2.subtract(complex3);
      Complex complex9 = complex8.cos();
      Complex complex10 = complex3.sin();
      Complex complex11 = complex3.ONE.createComplex(11.0, 6.283185307179586);
      int int0 = complex6.hashCode();
      Complex complex12 = complex3.I.tanh();
      Complex complex13 = complex7.sqrt();
      boolean boolean0 = complex6.isNaN();
      Complex complex14 = complex1.multiply(1.997844754509471E-9);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex0.createComplex(Double.NaN, (-5582.8));
      Complex complex4 = complex0.NaN.multiply(Double.NaN);
      double double0 = complex3.ZERO.abs();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.INF.acos();
      Complex complex7 = complex0.I.sqrt1z();
      Complex complex8 = complex5.ZERO.divide(complex3);
      Complex complex9 = complex3.add(complex5);
      Complex complex10 = complex3.pow(complex5);
      double double1 = complex10.ONE.abs();
      Complex complex11 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3095.6740871461934));
      Complex complex1 = complex0.tanh();
      List<Complex> list0 = complex1.ZERO.nthRoot(180);
      Complex complex2 = complex0.multiply((-3095.6740871461934));
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex2.log();
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex1.add(complex3);
      double double0 = complex1.INF.getArgument();
      Complex complex6 = complex5.pow(complex3);
      Complex complex7 = complex3.INF.sqrt();
      Complex complex8 = complex6.ONE.conjugate();
      Complex complex9 = complex2.exp();
      Complex complex10 = complex6.tan();
      double double1 = complex3.getReal();
      Complex complex11 = complex2.NaN.negate();
      Complex complex12 = complex9.subtract(complex2);
      Complex complex13 = complex12.conjugate();
      Complex complex14 = complex13.sinh();
      Complex complex15 = complex7.INF.log();
      int int0 = complex15.hashCode();
      Complex complex16 = complex12.I.sqrt();
      Complex complex17 = complex2.pow(complex3);
      Complex complex18 = complex10.asin();
      double double2 = complex16.abs();
      Complex complex19 = complex7.multiply(complex2);
      Complex complex20 = complex2.tan();
      Complex complex21 = complex19.exp();
      Complex complex22 = complex19.acos();
      Complex complex23 = complex22.sqrt();
      int int1 = complex20.hashCode();
      String string0 = complex7.toString();
      Complex complex24 = complex16.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.I.sqrt1z();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.ZERO.log();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(1533.566072, 1533.566072);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex0.negate();
      ComplexField complexField0 = complex1.ZERO.getField();
      double double0 = complex4.getArgument();
      Complex complex5 = complex2.I.subtract(complex0);
      Complex complex6 = complex4.add(complex0);
      Complex complex7 = complex2.asin();
      Complex complex8 = complex7.ZERO.sin();
      Complex complex9 = complex7.ZERO.add(complex4);
      Complex complex10 = complex4.ZERO.asin();
      Complex complex11 = complex1.sqrt();
      Object object0 = complex4.readResolve();
      List<Complex> list0 = complex4.nthRoot(1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex12 = complex4.exp();
      double double1 = complex1.getImaginary();
      Complex complex13 = complex10.negate();
      Complex complex14 = complex12.createComplex((-2585.848957), (-2.356194490192345));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-1654.2069312), 569.53133718088);
      double double0 = complex1.ZERO.getArgument();
      Complex complex2 = complex1.NaN.asin();
      double double1 = complex1.getImaginary();
      String string0 = complex1.toString();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex4.subtract(complex0);
      int int0 = complex5.ONE.hashCode();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.NaN.exp();
      double double2 = complex3.getArgument();
      Complex complex8 = complex3.divide(complex2);
      Complex complex9 = complex5.tanh();
      Complex complex10 = complex2.exp();
      double double3 = complex1.abs();
      Complex complex11 = complex3.multiply(0.0);
      Complex complex12 = complex11.sinh();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex0.acos();
      double double0 = complex5.ONE.abs();
      int int0 = complex4.hashCode();
      List<Complex> list0 = complex1.nthRoot(189);
      Complex complex6 = complex4.NaN.divide(complex0);
      double double1 = complex3.ONE.abs();
      Complex complex7 = complex4.ZERO.multiply(0.49999999999999994);
      Complex complex8 = complex3.NaN.cosh();
      Object object0 = complex8.readResolve();
      Complex complex9 = complex4.createComplex((-4.503599627370496E15), (-2281.0));
      double double2 = complex4.getImaginary();
      boolean boolean0 = complex3.isNaN();
      Complex complex10 = complex1.cos();
      Complex complex11 = complex1.tan();
      String string0 = complex0.toString();
      Complex complex12 = complex9.asin();
      Complex complex13 = complex2.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.I.acos();
      Object object0 = complex5.INF.readResolve();
      double double0 = complex4.getImaginary();
      double double1 = complex0.getReal();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex1.asin();
      boolean boolean0 = complex2.isInfinite();
      Complex complex8 = complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(742.465693472327, 0.0);
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getReal();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(1633.0944937589313, (-2658.7963376993507));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.divide(complex1);
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.multiply(complex1);
      int int0 = complex0.INF.hashCode();
      Complex complex3 = complex0.I.multiply((-0.12502530217170715));
      Complex complex4 = complex3.INF.divide(complex2);
      Complex complex5 = complex3.I.divide(complex0);
      Complex complex6 = complex0.I.conjugate();
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.INF.acos();
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Object object0 = complex0.ONE.readResolve();
      List<Complex> list0 = complex1.NaN.nthRoot(1);
      Object object1 = complex0.I.readResolve();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cosh();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.sqrt1z();
      try { 
        complex2.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(8.0, 1713.666737335654);
      Complex complex1 = complex0.ZERO.cosh();
      int int0 = complex1.hashCode();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.ZERO.pow(complex2);
      Complex complex4 = complex2.ONE.sinh();
      double double0 = complex0.NaN.abs();
      Complex complex5 = complex0.INF.conjugate();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex2.ZERO.tanh();
      Complex complex8 = complex6.log();
      Complex complex9 = complex8.ONE.acos();
      String string0 = complex2.toString();
      double double1 = complex0.ONE.getArgument();
      Complex complex10 = complex4.cos();
      Complex complex11 = complex3.multiply(8.0);
      double double2 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-4215.7201), 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.INF.asin();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex1.INF.cosh();
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex0.conjugate();
      Object object0 = complex1.readResolve();
      Complex complex7 = complex3.atan();
      double double0 = complex2.getReal();
      Complex complex8 = complex1.asin();
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex7.equals(object1);
      Complex complex9 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.INF.conjugate();
      int int0 = complex2.ZERO.hashCode();
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex0.subtract(complex5);
      Complex complex9 = complex6.cos();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-0.16666666666666666), (-3266.47514135));
      Complex complex1 = complex0.INF.log();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex1.INF.negate();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.multiply(1.5707963267948966);
      Complex complex6 = complex1.ONE.tan();
      Complex complex7 = complex0.atan();
      double double0 = complex7.ZERO.abs();
      Complex complex8 = complex1.asin();
      Complex complex9 = complex8.add(complex1);
      Complex complex10 = complex0.add(complex1);
      Complex complex11 = complex4.add(complex10);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex0.atan();
      int int0 = complex4.I.hashCode();
      String string0 = complex0.toString();
      Complex complex5 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex1.ONE.atan();
      Complex complex5 = complex0.ZERO.subtract(complex1);
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex0.asin();
      double double0 = complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.ZERO.sinh();
      Complex complex4 = complex3.INF.add(complex0);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.ZERO.negate();
      ComplexField complexField0 = complex4.getField();
      int int0 = complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = Complex.NaN;
      int int0 = complex3.I.hashCode();
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex4.conjugate();
      String string0 = complex7.ONE.toString();
      ComplexField complexField0 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-1749.945852032), 1623.327413385);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.divide(complex1);
      String string0 = complex1.ZERO.toString();
      List<Complex> list0 = complex0.I.nthRoot(550);
      Complex complex3 = complex1.sqrt();
      double double0 = complex1.getArgument();
      Complex complex4 = complex3.createComplex((-153.2054), (-153.2054));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ONE.cos();
      double double0 = complex2.INF.abs();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.INF.conjugate();
      ComplexField complexField0 = complex4.INF.getField();
      int int0 = complex4.hashCode();
      Complex complex6 = complex4.atan();
      Object object0 = complex0.INF.readResolve();
      Complex complex7 = complex6.I.createComplex((-1.5707963267948966), (-3021.41));
      Complex complex8 = complex0.atan();
      Complex complex9 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex4.NaN.pow(complex0);
      Complex complex6 = complex4.INF.sin();
      Complex complex7 = complex3.NaN.log();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex8.atan();
      Complex complex11 = complex10.exp();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(3876.1825121728, 3876.1825121728);
      Complex complex1 = complex0.ONE.log();
      try { 
        complex0.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex0.NaN.sinh();
      List<Complex> list0 = complex3.nthRoot(192);
      Complex complex6 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(1155.3, 1155.3);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.NaN.asin();
      Object object0 = complex0.NaN.readResolve();
      Complex complex3 = complex1.INF.multiply(1155.3);
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex1.ZERO.multiply(complex6);
      Complex complex8 = complex3.I.negate();
      ComplexField complexField0 = complex8.I.getField();
      Complex complex9 = complex1.cosh();
      Complex complex10 = complex6.multiply(1155.3);
      Complex complex11 = complex10.ZERO.conjugate();
      Complex complex12 = complex1.cosh();
      Complex complex13 = complex0.divide(complex5);
      int int0 = complex4.hashCode();
      Complex complex14 = complex12.exp();
      Complex complex15 = complex0.ONE.multiply((-260.894622));
      Complex complex16 = complex10.asin();
      Complex complex17 = complex8.multiply(1155.3);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex4.ZERO.sin();
      Complex complex7 = complex3.sin();
      List<Complex> list0 = complex7.NaN.nthRoot(1);
      Complex complex8 = complex7.exp();
      String string0 = complex1.toString();
      Object object0 = complex4.INF.readResolve();
      Complex complex9 = complex8.multiply(complex4);
      Complex complex10 = complex9.createComplex(0.0, (-2528.1796956301387));
      Complex complex11 = complex10.INF.log();
      Complex complex12 = complex0.INF.log();
      Complex complex13 = complex4.tan();
      boolean boolean0 = complex3.equals(complex9);
      Complex complex14 = complex8.conjugate();
      Complex complex15 = complex14.NaN.sqrt();
      Complex complex16 = complex4.tanh();
      Complex complex17 = complex16.NaN.multiply(complex5);
      int int0 = complex4.hashCode();
      Complex complex18 = complex4.NaN.multiply(complex6);
      Complex complex19 = complex8.sqrt1z();
      String string1 = complex19.NaN.toString();
      boolean boolean1 = complex1.isNaN();
      double double0 = complex9.abs();
      Complex complex20 = complex3.multiply(1680.5260999456);
      Complex complex21 = complex13.exp();
      int int1 = complex4.hashCode();
      String string2 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex0.NaN.cosh();
      double double0 = complex0.abs();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.NaN.hashCode();
      double double0 = complex0.getArgument();
      double double1 = complex0.getImaginary();
      ComplexField complexField0 = complex0.getField();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.acos();
      double double0 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.NaN.sqrt();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.INF.sqrt1z();
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.cos();
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex1.log();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.NaN.atan();
      String string0 = complex1.NaN.toString();
      Complex complex4 = complex0.tan();
      boolean boolean0 = complex4.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.cos();
      double double0 = complex2.INF.abs();
      String string0 = complex2.I.toString();
      Complex complex3 = complex0.sin();
      ComplexField complexField0 = complex3.INF.getField();
      Complex complex4 = complex3.ONE.conjugate();
      ComplexField complexField1 = complex0.INF.getField();
      Complex complex5 = complex0.NaN.conjugate();
      Complex complex6 = complex0.sinh();
      Object object0 = complex6.readResolve();
      double double1 = complex6.abs();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex7.sinh();
      Complex complex9 = Complex.ZERO;
      boolean boolean0 = complex7.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.NaN.nthRoot(1039);
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex2.I.pow(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.exp();
      boolean boolean1 = complex0.isNaN();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex2.INF.pow(complex0);
      Complex complex7 = complex6.add(complex5);
      Complex complex8 = complex6.ONE.log();
      Complex complex9 = complex8.multiply(0.7249995199969751);
      Complex complex10 = complex9.ZERO.log();
      Complex complex11 = complex8.INF.atan();
      boolean boolean2 = complex2.equals("org.apache.commons.math.complex.Complex");
      Complex complex12 = complex2.add(complex0);
      Complex complex13 = complex12.INF.multiply(complex6);
      Complex complex14 = complex12.INF.cos();
      Complex complex15 = complex2.log();
      Object object0 = complex0.readResolve();
      int int0 = complex15.hashCode();
      Complex complex16 = complex8.multiply(0.7249995199969751);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex3.I.pow(complex0);
      Complex complex5 = complex4.negate();
      Object object0 = complex5.readResolve();
      double double0 = complex2.NaN.abs();
      Complex complex6 = complex2.ZERO.negate();
      Complex complex7 = complex3.NaN.pow(complex4);
      boolean boolean0 = complex1.isInfinite();
      Complex complex8 = complex3.asin();
      String string0 = complex8.I.toString();
      Complex complex9 = complex8.asin();
      Object object1 = complex1.readResolve();
      double double1 = complex0.getArgument();
      double double2 = complex0.abs();
      Complex complex10 = complex3.exp();
      Complex complex11 = complex6.sqrt1z();
      String string1 = complex6.toString();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(795.82479699, (-1251.990883));
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.multiply(complex1);
      Complex complex6 = complex1.ZERO.multiply(1538.414308316113);
      Complex complex7 = complex6.ONE.atan();
      ComplexField complexField0 = complex1.ONE.getField();
      String string0 = complex1.toString();
      Complex complex8 = complex5.cos();
      boolean boolean0 = complex1.isInfinite();
      Complex complex9 = complex7.ZERO.tanh();
      Complex complex10 = complex9.I.negate();
      Complex complex11 = complex2.divide(complex7);
      Complex complex12 = complex11.ONE.sqrt1z();
      Complex complex13 = complex3.sin();
      Complex complex14 = complex12.exp();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-1419.656268), (-915.2));
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.multiply(complex1);
      Object object0 = complex0.ONE.readResolve();
      String string0 = complex0.toString();
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex0.sinh();
      Object object1 = complex5.readResolve();
      Complex complex6 = complex5.ONE.multiply(complex3);
      boolean boolean0 = complex4.equals(object0);
      Object object2 = complex3.readResolve();
      Complex complex7 = complex5.sqrt();
      try { 
        complex5.nthRoot((-1495));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,495
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.ZERO.multiply(2545.37550329841);
      Complex complex2 = null;
      Complex complex3 = complex0.ZERO.acos();
      Complex complex4 = complex3.ZERO.add(complex0);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex((-1405.5009292526888), (-1405.5009292526888));
      Complex complex1 = complex0.ONE.createComplex((-1405.5009292526888), (-1405.5009292526888));
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.INF.cosh();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex4.I.cosh();
      String string0 = complex6.I.toString();
      Complex complex9 = complex5.divide(complex0);
      Complex complex10 = complex9.NaN.sin();
      boolean boolean0 = complex1.isNaN();
      double double0 = complex4.abs();
      Complex complex11 = complex9.tan();
      double double1 = complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex1.I.createComplex(0.0, 1.0);
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex4.I.sqrt();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex0.INF.asin();
      Complex complex9 = complex7.cos();
      List<Complex> list0 = complex9.ONE.nthRoot(1074);
      double double0 = complex0.getReal();
      Complex complex10 = complex7.exp();
      Complex complex11 = Complex.ONE;
      ComplexField complexField0 = complex11.ZERO.getField();
      Complex complex12 = complex10.NaN.multiply(complex11);
      Complex complex13 = complex10.ONE.sqrt();
      double double1 = complex7.abs();
      Complex complex14 = complex9.multiply(0.0);
      Complex complex15 = complex14.ZERO.atan();
      Complex complex16 = complex14.I.sin();
      Complex complex17 = complex1.tan();
      boolean boolean0 = complex10.isNaN();
      Complex complex18 = complex11.cosh();
      Complex complex19 = complex3.createComplex(1969.6513332, 0.0);
  }
}
