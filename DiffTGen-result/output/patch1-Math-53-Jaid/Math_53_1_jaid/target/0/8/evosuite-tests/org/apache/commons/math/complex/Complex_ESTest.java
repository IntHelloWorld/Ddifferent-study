/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 12:11:45 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex0.ZERO.createComplex(1158.6, 4690.543907813126);
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex0.ZERO.createComplex(1158.6, 908.4621141885294);
      Complex complex6 = complex5.ZERO.sinh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex2.divide(complex0);
      Complex complex8 = complex2.acos();
      Complex complex9 = complex8.NaN.multiply(complex2);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex8.NaN.add(complex10);
      Complex complex12 = complex11.multiply((-2099.1308));
      Object object0 = complex7.readResolve();
      Complex complex13 = complex1.acos();
      Complex complex14 = complex1.atan();
      Complex complex15 = complex8.asin();
      Complex complex16 = complex9.I.createComplex(4690.543907813126, 4690.543907813126);
      String string0 = complex0.toString();
      double double0 = complex14.getReal();
      Complex complex17 = complex9.multiply((-1.5707963267948966));
      Complex complex18 = new Complex(1158.6, 1158.6);
      Complex complex19 = complex9.subtract(complex18);
      Complex complex20 = complex10.atan();
      Complex complex21 = complex5.negate();
      Complex complex22 = complex8.exp();
      Complex complex23 = complex22.sqrt();
      Complex complex24 = complex2.log();
      boolean boolean1 = complex8.isNaN();
      boolean boolean2 = complex12.isInfinite();
      Complex complex25 = complex11.createComplex(4690.543907813126, 0.19999998807907104);
      Complex complex26 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex3.INF.add(complex2);
      Complex complex5 = complex0.multiply(2.0);
      Complex complex6 = complex5.NaN.sinh();
      Complex complex7 = complex6.tan();
      boolean boolean0 = complex3.equals(complex5);
      String string0 = complex0.toString();
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex8.asin();
      Complex complex10 = complex8.tanh();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex2.subtract(complex11);
      Complex complex13 = complex0.negate();
      Complex complex14 = complex11.tanh();
      Complex complex15 = Complex.ONE;
      Complex complex16 = complex9.add(complex15);
      Complex complex17 = complex16.I.sqrt1z();
      Complex complex18 = complex12.tan();
      int int0 = complex18.INF.hashCode();
      Complex complex19 = complex11.ONE.multiply((-556.4));
      double double0 = complex12.getImaginary();
      Complex complex20 = complex11.acos();
      Complex complex21 = complex2.tanh();
      Complex complex22 = complex11.cos();
      Complex complex23 = complex4.sqrt1z();
      boolean boolean1 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(5.650007086920087E-9);
      Complex complex2 = complex0.createComplex(Double.NaN, 0.0);
      Complex complex3 = complex2.ONE.multiply((-3028.075));
      double double0 = complex2.ONE.getArgument();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex6.INF.tanh();
      Complex complex9 = complex1.NaN.negate();
      double double1 = complex1.I.abs();
      int int0 = complex4.I.hashCode();
      Complex complex10 = complex0.NaN.sqrt();
      String string0 = complex7.NaN.toString();
      double double2 = complex4.getArgument();
      Complex complex11 = complex5.sqrt();
      Complex complex12 = complex11.cos();
      Complex complex13 = complex12.INF.sinh();
      Complex complex14 = complex13.ZERO.atan();
      Complex complex15 = complex1.cos();
      int int1 = complex7.hashCode();
      Object object0 = complex11.NaN.readResolve();
      double double3 = complex1.abs();
      double double4 = complex11.getReal();
      Complex complex16 = complex1.log();
      String string1 = complex1.toString();
      Complex complex17 = complex10.log();
      Complex complex18 = complex9.sqrt();
      Complex complex19 = complex18.I.sqrt1z();
      Complex complex20 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-1154.209), 182.3850742112718);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.NaN.createComplex(182.3850742112718, 182.3850742112718);
      int int0 = complex0.I.hashCode();
      Complex complex4 = complex1.INF.multiply((-979.864879822));
      int int1 = complex1.INF.hashCode();
      int int2 = complex1.hashCode();
      Complex complex5 = Complex.INF;
      boolean boolean0 = complex4.equals(complex5);
      Complex complex6 = complex1.ZERO.add(complex3);
      Complex complex7 = complex2.INF.multiply((-1154.209));
      boolean boolean1 = complex5.isNaN();
      Complex complex8 = complex5.sqrt1z();
      Object object0 = complex8.INF.readResolve();
      Complex complex9 = complex1.subtract(complex3);
      List<Complex> list0 = complex9.nthRoot(185);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cos();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex0.createComplex(2.0, (-0.49999999999999994));
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.ZERO.subtract(complex3);
      Complex complex7 = complex1.acos();
      double double0 = complex7.ZERO.abs();
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex2.cosh();
      Complex complex10 = complex9.ZERO.cos();
      Complex complex11 = complex8.tan();
      Complex complex12 = complex8.sinh();
      Complex complex13 = complex11.sinh();
      Object object1 = complex8.readResolve();
      Complex complex14 = complex11.pow(complex0);
      Complex complex15 = complex2.ZERO.tanh();
      Complex complex16 = complex2.exp();
      Complex complex17 = complex16.ONE.pow(complex2);
      Complex complex18 = complex8.add(complex1);
      double double1 = complex18.getArgument();
      Complex complex19 = complex12.log();
      List<Complex> list0 = complex11.nthRoot(32);
      Complex complex20 = complex15.cos();
      Complex complex21 = complex8.tanh();
      List<Complex> list1 = complex21.ONE.nthRoot(32);
      Complex complex22 = complex16.asin();
      Complex complex23 = complex15.sqrt();
      Complex complex24 = complex8.atan();
      Object object2 = complex21.readResolve();
      double double2 = complex1.abs();
      Complex complex25 = complex22.sin();
      Complex complex26 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.negate();
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex1.ZERO.cos();
      List<Complex> list0 = complex0.nthRoot(689);
      Complex complex5 = complex1.tan();
      List<Complex> list1 = complex5.ZERO.nthRoot(689);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.INF.add(complex3);
      Complex complex8 = complex6.sin();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex2.cosh();
      boolean boolean0 = complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.acos();
      String string0 = complex2.ZERO.toString();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex4.ZERO.multiply(Double.NaN);
      Complex complex7 = complex4.atan();
      Complex complex8 = complex2.acos();
      Complex complex9 = complex0.add(complex2);
      Complex complex10 = complex4.sqrt1z();
      Complex complex11 = complex10.sin();
      Complex complex12 = complex11.INF.asin();
      Complex complex13 = complex12.ONE.sqrt1z();
      Complex complex14 = complex8.cos();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 0.0;
      double double1 = Double.NaN;
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = complex0.ONE.sqrt1z();
      try { 
        complex0.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Object object0 = complex2.readResolve();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex2.tan();
      boolean boolean0 = complex1.equals(object0);
      String string0 = object0.toString();
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = complex1.divide(complex2);
      Complex complex7 = complex4.NaN.sqrt1z();
      double double0 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(14.67783, 3.5994);
      Complex complex1 = new Complex((-341.3), (-893.572092593));
      Complex complex2 = complex1.I.asin();
      double double0 = complex1.abs();
      Complex complex3 = complex1.NaN.createComplex((-341.3), (-341.3));
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex3.I.subtract(complex0);
      Complex complex6 = complex1.ZERO.cosh();
      Complex complex7 = complex0.subtract(complex1);
      Complex complex8 = complex7.INF.negate();
      Complex complex9 = complex7.asin();
      Complex complex10 = complex9.I.exp();
      Complex complex11 = complex8.INF.sqrt1z();
      Complex complex12 = complex2.negate();
      double double1 = complex8.getArgument();
      Complex complex13 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex0.NaN.sin();
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex4.multiply((-3873.819921801386));
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = complex7.INF.atan();
      double double0 = complex3.NaN.getArgument();
      Complex complex9 = complex0.I.acos();
      String string0 = complex9.ZERO.toString();
      Object object0 = complex0.readResolve();
      int int0 = complex0.I.hashCode();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex10 = complex0.tan();
      Complex complex11 = complex10.INF.add(complex9);
      Complex complex12 = complex3.multiply(complex6);
      Complex complex13 = complex0.multiply(complex2);
      double double1 = complex13.abs();
      Complex complex14 = complex9.subtract(complex2);
      Complex complex15 = complex4.createComplex(Double.NaN, (-3873.819921801386));
      Complex complex16 = complex4.I.divide(complex14);
      Complex complex17 = complex5.conjugate();
      Complex complex18 = complex17.I.exp();
      Complex complex19 = complex18.NaN.subtract(complex11);
      boolean boolean0 = complex0.isNaN();
      Complex complex20 = complex14.subtract(complex4);
      Complex complex21 = complex0.divide(complex16);
      double double2 = complex5.abs();
      Complex complex22 = complex20.atan();
      Complex complex23 = complex7.divide(complex9);
      Complex complex24 = complex20.acos();
      Complex complex25 = complex17.cosh();
      List<Complex> list0 = complex2.nthRoot(500);
      boolean boolean1 = complex12.equals(complex20);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.createComplex(0.0, Double.NaN);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-987.57659467454), (-1932.6));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.negate();
      String string0 = complex1.ONE.toString();
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex1.ZERO.multiply(complex0);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.subtract(complex0);
      double double0 = complex6.abs();
      Complex complex7 = complex4.asin();
      Complex complex8 = complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      double double1 = complex0.ZERO.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex1.INF.multiply(complex0);
      try { 
        complex0.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt();
      List<Complex> list0 = complex0.INF.nthRoot(758);
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex2.I.cos();
      Complex complex5 = complex0.negate();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex1.INF.add(complex6);
      Complex complex8 = complex5.INF.negate();
      Complex complex9 = complex0.ONE.multiply(complex1);
      Complex complex10 = complex5.INF.sqrt1z();
      Object object0 = complex5.NaN.readResolve();
      Complex complex11 = complex0.INF.cosh();
      Complex complex12 = complex10.I.sqrt();
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex0.getField();
      double double0 = complex0.getArgument();
      Complex complex13 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex14 = complex11.sqrt();
      Complex complex15 = complex0.sqrt1z();
      Complex complex16 = complex5.sinh();
      Complex complex17 = complex8.conjugate();
      Complex complex18 = complex13.tan();
      boolean boolean0 = complex10.isInfinite();
      Complex complex19 = complex1.sinh();
      int int0 = complex19.ONE.hashCode();
      Complex complex20 = complex8.atan();
      Complex complex21 = complex8.createComplex(0.0, 1489.0);
      Complex complex22 = complex20.negate();
      Complex complex23 = complex22.cosh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1659.86);
      Complex complex1 = new Complex(0.0, 2245.4860971443527);
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex1.INF.exp();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex1.ONE.sqrt();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex3.ONE.log();
      Complex complex7 = complex6.ONE.multiply(complex4);
      Complex complex8 = complex0.exp();
      boolean boolean0 = complex3.isNaN();
      Complex complex9 = complex8.I.multiply((-1.0));
      Complex complex10 = complex8.cos();
      int int0 = complex10.hashCode();
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex0.cos();
      Complex complex13 = complex12.I.log();
      Complex complex14 = complex11.acos();
      Complex complex15 = complex4.tan();
      Complex complex16 = complex10.tan();
      boolean boolean1 = complex5.isNaN();
      int int1 = complex11.hashCode();
      double double0 = complex13.getImaginary();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.subtract(complex1);
      double double1 = complex0.ONE.abs();
      Complex complex5 = complex3.I.asin();
      Complex complex6 = complex0.multiply((-1799.9021));
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex4.log();
      Complex complex9 = complex2.cos();
      Complex complex10 = complex3.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex11 = complex9.ZERO.tan();
      List<Complex> list0 = complex2.NaN.nthRoot(104);
      double double2 = complex3.abs();
      double double3 = complex8.INF.abs();
      Complex complex12 = complex3.tan();
      boolean boolean0 = complex8.isNaN();
      double double4 = complex0.getReal();
      List<Complex> list1 = complex0.nthRoot(104);
      boolean boolean1 = complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex2.NaN.multiply(2.0);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.INF.divide(complex1);
      Complex complex6 = complex4.I.tanh();
      Complex complex7 = complex4.subtract(complex2);
      String string0 = complex5.I.toString();
      Complex complex8 = complex4.I.sinh();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex5.asin();
      Complex complex11 = complex1.exp();
      double double0 = complex5.abs();
      ComplexField complexField0 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex0.I.getField();
      double double0 = complex0.getReal();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      double double1 = complex2.I.getArgument();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex2.divide(complex0);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex5.acos();
      boolean boolean0 = complex0.isNaN();
      double double2 = complex2.getArgument();
      Object object0 = complex2.readResolve();
      Complex complex8 = complex2.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-0.33333333333333287), (-2539.567733654));
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.asin();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex4.add(complex2);
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      int int0 = complex2.I.hashCode();
      double double0 = complex0.ONE.abs();
      Complex complex3 = complex1.ZERO.multiply(complex2);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex1.pow(complex0);
      ComplexField complexField1 = complex5.I.getField();
      ComplexField complexField2 = complex5.getField();
      ComplexField complexField3 = complex1.getField();
      Complex complex6 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex2.ONE.sin();
      String string0 = complex0.toString();
      Complex complex5 = complex3.INF.pow(complex2);
      Complex complex6 = complex2.tan();
      Object object0 = complex3.readResolve();
      Complex complex7 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.exp();
      Complex complex4 = complex1.I.multiply(complex2);
      Complex complex5 = complex4.ONE.pow(complex0);
      Complex complex6 = complex4.I.conjugate();
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = complex6.ZERO.pow(complex0);
      Complex complex9 = complex2.ONE.acos();
      Complex complex10 = complex1.INF.multiply(complex2);
      Complex complex11 = complex10.negate();
      int int0 = complex10.NaN.hashCode();
      Complex complex12 = complex0.tan();
      Complex complex13 = complex12.sqrt();
      Complex complex14 = complex0.createComplex(1.9868161777724352E-8, 0.0);
      int int1 = complex14.ONE.hashCode();
      Object object0 = complex12.I.readResolve();
      Complex complex15 = complex3.createComplex(0.0, 323.751733768);
      Complex complex16 = complex15.ONE.sqrt1z();
      Complex complex17 = complex15.I.sinh();
      Complex complex18 = complex13.sinh();
      Complex complex19 = complex15.cosh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-3668.28069007061));
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = Complex.ZERO;
      double double0 = complex1.INF.getArgument();
      Complex complex3 = complex0.atan();
      String string0 = complex0.toString();
      Complex complex4 = complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.subtract(complex0);
      double double0 = complex4.abs();
      double double1 = complex4.ZERO.abs();
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex5.INF.subtract(complex0);
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex8.ZERO.tan();
      Complex complex10 = complex8.INF.tan();
      Object object0 = complex3.readResolve();
      Complex complex11 = complex7.atan();
      Complex complex12 = complex5.asin();
      Complex complex13 = complex12.ONE.subtract(complex10);
      Complex complex14 = complex1.ZERO.atan();
      Complex complex15 = complex12.ZERO.add(complex2);
      List<Complex> list0 = complex15.ZERO.nthRoot(470);
      Complex complex16 = complex1.asin();
      Complex complex17 = complex16.I.acos();
      Complex complex18 = complex11.conjugate();
      Complex complex19 = complex7.INF.sin();
      Complex complex20 = complex18.NaN.sqrt();
      Complex complex21 = complex11.multiply((-1.0));
      Complex complex22 = complex15.createComplex((-1030.917732), (-1.0));
      Complex complex23 = complex1.cos();
      Complex complex24 = complex23.atan();
      Complex complex25 = complex24.ZERO.log();
      try { 
        complex21.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.INF.multiply(2309.7617375833966);
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex1.ZERO.multiply(complex2);
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex0.readResolve();
      boolean boolean1 = complex2.equals(object0);
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex2.INF.acos();
      List<Complex> list0 = complex5.I.nthRoot(67);
      boolean boolean2 = complex3.isNaN();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex1.add(complex3);
      ComplexField complexField0 = complex9.I.getField();
      Complex complex10 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-485.2), (-485.2));
      Complex complex1 = complex0.sin();
      double double0 = complex0.NaN.getArgument();
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex4.acos();
      double double1 = complex0.getArgument();
      Complex complex8 = complex0.log();
      Complex complex9 = complex5.add(complex1);
      boolean boolean1 = complex0.isNaN();
      Complex complex10 = complex3.sqrt();
      Complex complex11 = complex9.tanh();
      Complex complex12 = complex7.tanh();
      Complex complex13 = complex12.INF.conjugate();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.NaN.multiply(0.0);
      Complex complex4 = complex3.ONE.conjugate();
      double double1 = complex0.getImaginary();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = (-747.0817);
      Complex complex0 = new Complex((-747.0817), 175.2906467926);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.add(complex1);
      Object object0 = complex0.NaN.readResolve();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.I.multiply(complex2);
      Complex complex5 = complex3.I.tanh();
      String string0 = complex2.ZERO.toString();
      Complex complex6 = complex1.multiply(1.0);
      Complex complex7 = complex2.cos();
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex7.INF.sqrt1z();
      Complex complex10 = complex1.createComplex(938.35111510485, 938.35111510485);
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex10.I.pow(complex11);
      Complex complex13 = complex10.ONE.tan();
      try { 
        complex1.nthRoot((-33));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -33
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.NaN.conjugate();
      ComplexField complexField0 = complex3.ZERO.getField();
      double double0 = complex2.INF.getArgument();
      Complex complex4 = complex0.INF.pow(complex1);
      Complex complex5 = complex4.I.add(complex3);
      Complex complex6 = complex4.ONE.asin();
      Object object0 = complex6.readResolve();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex0.exp();
      int int0 = complex4.hashCode();
      Complex complex9 = complex8.ONE.pow(complex3);
      Complex complex10 = complex2.sinh();
      Complex complex11 = complex8.atan();
      Complex complex12 = complex11.exp();
      boolean boolean0 = complex10.isInfinite();
      try { 
        complex11.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex1.ZERO.add(complex2);
      Complex complex4 = complex0.atan();
      double double0 = complex4.ONE.abs();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex2.atan();
      boolean boolean0 = complex5.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1741.79503));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.NaN.atan();
      double double0 = complex2.ONE.abs();
      Complex complex3 = complex0.NaN.tanh();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex4.exp();
      Complex complex7 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(1198.9104, (-745.7217266287932));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex0.sin();
      Complex complex4 = new Complex((-1323.43), (-1323.43));
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex4.acos();
      ComplexField complexField0 = complex6.getField();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-539.1300477295996), (-539.1300477295996));
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.NaN.add(complex4);
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex0.getField();
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex1.ZERO.add(complex2);
      Complex complex4 = complex0.atan();
      double double0 = complex4.ONE.abs();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = Complex.ZERO;
      boolean boolean0 = complex5.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex1.subtract(complex2);
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex5.multiply((-40.6767));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex0.NaN.asin();
      Complex complex4 = complex0.I.divide(complex3);
      Complex complex5 = complex0.exp();
      String string0 = complex0.I.toString();
      Object object0 = complex5.readResolve();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex0.NaN.multiply(0.0);
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex0.NaN.atan();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex5.ONE.exp();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex0.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      try { 
        complex0.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex0.NaN.divide(complex2);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex2.ZERO.pow(complex0);
      Complex complex8 = complex6.ZERO.add(complex1);
      String string0 = complex8.ONE.toString();
      Complex complex9 = complex1.sqrt1z();
      String string1 = complex2.toString();
      Complex complex10 = complex2.ZERO.multiply(complex7);
      Complex complex11 = complex10.NaN.multiply((-1098.290901311));
      Complex complex12 = complex3.sin();
      Complex complex13 = complex6.ONE.asin();
      List<Complex> list0 = complex3.nthRoot(535);
      double double0 = complex5.getReal();
      Complex complex14 = complex6.sin();
      Complex complex15 = complex14.cos();
      Complex complex16 = complex14.multiply(complex0);
      Complex complex17 = complex16.ZERO.sqrt();
      Object object0 = complex1.readResolve();
      Complex complex18 = complex7.sqrt1z();
      try { 
        complex16.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.INF.atan();
      List<Complex> list0 = complex0.nthRoot(256);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.INF.nthRoot(1);
      String string0 = complex0.toString();
      List<Complex> list1 = complex0.nthRoot(1);
      Complex complex1 = complex0.cos();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = complex3.INF.log();
      Complex complex6 = complex5.I.pow(complex1);
      Complex complex7 = complex2.NaN.asin();
      Complex complex8 = complex3.I.cos();
      Complex complex9 = complex7.NaN.multiply(1.2675934823758863E-8);
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex6.exp();
      Complex complex12 = complex11.add(complex1);
      Complex complex13 = complex11.asin();
      Complex complex14 = complex0.createComplex(0.0, 1.2675934823758863E-8);
      double double0 = complex6.getArgument();
      Complex complex15 = complex0.add(complex4);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.asin();
      String string0 = complex0.toString();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.createComplex(142.0, 142.0);
      Complex complex5 = complex2.multiply(142.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.NaN.nthRoot(1784);
      Complex complex1 = complex0.createComplex(0.0, 770.8753);
      Complex complex2 = complex0.ZERO.createComplex((-967.9407006288735), 770.8753);
      Complex complex3 = complex0.ZERO.tan();
      boolean boolean0 = complex1.equals(complex0);
      double double0 = complex0.abs();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.sinh();
      Object object0 = complex2.readResolve();
      Complex complex4 = complex0.tanh();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.INF.cos();
      Object object1 = complex0.INF.readResolve();
      double double0 = complex0.abs();
      Complex complex4 = complex0.tan();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = new Complex((-1.0), 0.0);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex1.NaN.divide(complex3);
      Complex complex6 = complex2.sqrt();
      boolean boolean0 = complex1.equals(complex0);
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.ZERO.conjugate();
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.subtract(complex4);
      int int0 = complex4.hashCode();
      Complex complex6 = complex5.exp();
      double double1 = 0.0;
      int int1 = complex6.hashCode();
      Complex complex7 = complex2.add(complex6);
      Complex complex8 = complex6.ONE.multiply(0.0);
      Complex complex9 = complex6.I.sinh();
      try { 
        complex8.nthRoot((-476));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -476
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.NaN.cosh();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex5.I.atan();
      double double0 = complex4.getArgument();
      Object object0 = complex6.readResolve();
      boolean boolean0 = complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-321.6), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.ZERO.divide(complex0);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-1252.7953), (-3233.643069811));
      Complex complex1 = Complex.I;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.I.pow(complex0);
      boolean boolean0 = complex0.equals("*LoI^&0f1,M5v}&/9pI");
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex3.NaN.sqrt();
      Complex complex6 = complex3.INF.tanh();
      double double0 = complex0.getImaginary();
      int int0 = complex3.hashCode();
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex0.NaN.conjugate();
      ComplexField complexField0 = complex3.getField();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex9.I.asin();
      Complex complex11 = complex10.INF.add(complex8);
      Object object0 = complex6.ZERO.readResolve();
      Complex complex12 = complex1.cos();
      Complex complex13 = complex0.asin();
      double double1 = complex4.getReal();
      Complex complex14 = complex6.multiply((-135.729636666));
      Complex complex15 = complex3.NaN.log();
      double double2 = complex7.abs();
      Complex complex16 = complex3.createComplex((-985.780496), 640.7469);
      Complex complex17 = complex14.acos();
      String string0 = complex7.toString();
      Complex complex18 = complex13.multiply(1.1892071150027212);
      int int1 = complex18.hashCode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt1z();
      double double0 = complex0.getReal();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      String string0 = complex0.INF.toString();
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex0.ONE.divide(complex1);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.INF.sqrt();
      int int0 = complex6.INF.hashCode();
      double double0 = complex4.ZERO.abs();
      Complex complex7 = complex5.ZERO.acos();
      String string1 = complex4.toString();
      double double1 = complex1.getArgument();
      Complex complex8 = complex4.multiply(0.0);
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.INF.acos();
      Complex complex11 = complex9.ZERO.multiply(complex2);
      Complex complex12 = complex9.INF.cosh();
      Complex complex13 = complex4.pow(complex9);
      double double2 = complex10.getReal();
      Complex complex14 = complex11.acos();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.divide(complex3);
      Object object1 = complex3.I.readResolve();
      Complex complex5 = complex4.NaN.multiply(complex1);
      Complex complex6 = complex3.I.asin();
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = complex4.asin();
      Complex complex9 = complex8.ONE.tan();
      List<Complex> list0 = complex9.ZERO.nthRoot(2103);
      Complex complex10 = complex8.exp();
      double double0 = complex2.getArgument();
      Complex complex11 = complex8.cosh();
      Complex complex12 = complex2.sin();
      Complex complex13 = complex9.I.cosh();
      Complex complex14 = complex12.cosh();
      Complex complex15 = complex6.sqrt1z();
      Complex complex16 = complex11.ZERO.subtract(complex9);
      Complex complex17 = complex7.sinh();
      double double1 = complex9.abs();
      Complex complex18 = complex5.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex3.INF.add(complex2);
      Complex complex5 = complex4.INF.exp();
      Complex complex6 = complex2.ONE.multiply((-1.0000000000000004));
      Complex complex7 = complex0.multiply(2.0);
      Complex complex8 = complex7.NaN.sinh();
      Complex complex9 = complex8.tan();
      boolean boolean0 = complex3.equals(complex7);
      String string0 = complex0.toString();
      Complex complex10 = complex2.sqrt1z();
      Complex complex11 = complex10.asin();
      Complex complex12 = complex10.tanh();
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex2.subtract(complex13);
      Complex complex15 = complex0.negate();
      Complex complex16 = complex13.tanh();
      Complex complex17 = Complex.ONE;
      Complex complex18 = complex11.add(complex17);
      Complex complex19 = complex18.I.sqrt1z();
      Complex complex20 = complex14.tan();
      int int0 = complex20.INF.hashCode();
      Complex complex21 = complex13.ONE.multiply((-556.4));
      Complex complex22 = complex21.NaN.asin();
      double double0 = complex14.getImaginary();
      Complex complex23 = complex13.acos();
      Complex complex24 = complex2.tanh();
      Complex complex25 = complex13.cos();
      Complex complex26 = complex4.sqrt1z();
      boolean boolean1 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-6.601647720117306), (-6.601647720117306));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.sinh();
      String string0 = complex2.toString();
      Complex complex3 = complex1.NaN.divide(complex0);
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex3.negate();
      try { 
        complex3.nthRoot((-1346));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,346
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex3.ZERO.asin();
      int int0 = complex2.hashCode();
      double double0 = complex3.abs();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.ZERO.negate();
      String string0 = complex6.toString();
      Complex complex8 = complex3.acos();
      double double1 = complex0.abs();
      Complex complex9 = complex4.divide(complex2);
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.ZERO.atan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.pow(complex1);
      ComplexField complexField0 = complex2.ONE.getField();
      double double0 = complex1.ONE.abs();
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = complex1.ZERO.multiply(1727.3594956940753);
      Complex complex5 = complex4.NaN.pow(complex1);
      Complex complex6 = complex5.log();
      ComplexField complexField1 = complex0.getField();
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex7.I.createComplex(1727.3594956940753, 0.0);
      Complex complex9 = complex7.ZERO.asin();
      boolean boolean1 = complex4.isNaN();
      Complex complex10 = complex4.cos();
      Complex complex11 = complex10.tan();
      boolean boolean2 = complex1.equals(complexField0);
      Complex complex12 = complex7.cos();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.cosh();
      ComplexField complexField1 = complex1.getField();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.I.exp();
      ComplexField complexField2 = complex0.I.getField();
      Complex complex4 = complex1.INF.sqrt();
      Complex complex5 = complex2.ONE.createComplex((-595.6006676755), (-2725.2160493622946));
      Complex complex6 = complex5.I.add(complex1);
      Complex complex7 = complex4.NaN.tanh();
      Complex complex8 = complex0.add(complex1);
      Complex complex9 = complex2.cosh();
      double double0 = complex0.getReal();
      Complex complex10 = complex1.INF.pow(complex4);
      Complex complex11 = complex3.divide(complex1);
      Complex complex12 = complex1.cosh();
      Complex complex13 = complex12.NaN.cosh();
      List<Complex> list0 = complex12.nthRoot(1237);
      double double1 = complex10.ONE.abs();
      Complex complex14 = complex3.multiply(complex4);
      Complex complex15 = complex4.divide(complex10);
      double double2 = complex15.ONE.getArgument();
      Complex complex16 = complex1.log();
      double double3 = complex16.ZERO.getArgument();
      Complex complex17 = complex1.ONE.negate();
      double double4 = complex3.abs();
      Complex complex18 = complex14.sqrt1z();
      List<Complex> list1 = complex4.nthRoot(37);
      Complex complex19 = complex7.cosh();
      Complex complex20 = complex19.pow(complex18);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.ZERO.readResolve();
      List<Complex> list0 = complex0.nthRoot(2518);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.add(complex2);
      Complex complex5 = complex0.createComplex(3345.658203688562, 3345.658203688562);
      Complex complex6 = complex5.NaN.add(complex0);
      double double0 = complex1.I.abs();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex6.cos();
      Complex complex9 = complex0.INF.exp();
      Complex complex10 = complex1.I.sqrt1z();
      Complex complex11 = complex9.createComplex(3345.658203688562, 3345.658203688562);
      Complex complex12 = complex9.INF.tan();
      Complex complex13 = complex8.sqrt1z();
      double double1 = complex13.getArgument();
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex14.NaN.atan();
      boolean boolean0 = complex7.equals(complex14);
      Complex complex16 = complex1.sinh();
      Complex complex17 = complex5.conjugate();
      Complex complex18 = complex17.exp();
      Complex complex19 = complex18.sqrt();
      ComplexField complexField0 = complex13.getField();
      Complex complex20 = complex4.multiply(complex0);
      Complex complex21 = complex16.sqrt1z();
      boolean boolean1 = complex6.isNaN();
      double double2 = complex15.getArgument();
      double double3 = complex3.abs();
      Complex complex22 = complex3.sqrt();
      Complex complex23 = complex0.atan();
      Complex complex24 = complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-316.391592280112), (-316.391592280112));
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.NaN.conjugate();
      Complex complex4 = complex0.multiply((-1599.9964135468));
      Complex complex5 = complex1.ONE.divide(complex0);
      Object object0 = complex3.readResolve();
      Complex complex6 = complex2.INF.sqrt1z();
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = new Complex((-1.0), 1.0);
      Complex complex9 = complex3.ZERO.multiply(complex0);
      Complex complex10 = complex1.ONE.exp();
      int int0 = complex2.NaN.hashCode();
      Complex complex11 = complex4.ZERO.subtract(complex8);
      boolean boolean0 = complex0.equals(object0);
      Complex complex12 = complex2.tan();
      Complex complex13 = complex4.exp();
      double double0 = complex1.getArgument();
      Complex complex14 = complex4.exp();
      double double1 = complex4.getReal();
      boolean boolean1 = complex14.equals(complex12);
  }
}
