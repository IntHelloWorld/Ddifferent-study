/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 12:07:49 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(0.3999999761581421, 0.3999999761581421);
      double double0 = complex0.getReal();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ONE.sqrt1z();
      double double1 = complex2.getImaginary();
      Complex complex4 = complex2.INF.divide(complex1);
      Complex complex5 = complex4.ONE.conjugate();
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = new Complex(0.3999999761581421, Double.NaN);
      Complex complex8 = complex6.divide(complex7);
      Complex complex9 = complex4.ZERO.negate();
      Complex complex10 = complex0.multiply(Double.NaN);
      int int0 = complex10.hashCode();
      Complex complex11 = complex9.sinh();
      double double2 = complex1.abs();
      Complex complex12 = complex0.log();
      Complex complex13 = complex3.atan();
      double double3 = complex2.abs();
      Complex complex14 = complex2.add(complex13);
      Complex complex15 = complex14.sqrt();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-777.0294), 0.0);
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.exp();
      double double1 = complex0.abs();
      double double2 = complex1.I.getArgument();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex2.I.createComplex(777.0294, (-777.0294));
      Complex complex5 = complex2.INF.tanh();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex0.ZERO.exp();
      Complex complex8 = complex6.ZERO.subtract(complex0);
      double double3 = complex1.abs();
      Complex complex9 = complex6.conjugate();
      double double4 = complex4.abs();
      boolean boolean0 = complex6.equals(complex0);
      Complex complex10 = complex8.multiply((-457.781028863562));
      double double5 = complex6.getArgument();
      Complex complex11 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Object object0 = complex0.ONE.readResolve();
      Object object1 = complex0.I.readResolve();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex0.ONE.divide(complex1);
      Complex complex4 = complex3.ONE.divide(complex0);
      Complex complex5 = complex1.NaN.tanh();
      Complex complex6 = complex5.INF.asin();
      Complex complex7 = complex0.I.tan();
      Complex complex8 = complex7.ONE.createComplex(1904.465254922844, 2539.18);
      double double0 = complex0.getArgument();
      int int0 = complex3.ZERO.hashCode();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex1.ONE.pow(complex9);
      Complex complex11 = complex9.cosh();
      Complex complex12 = complex0.negate();
      Complex complex13 = complex12.I.tanh();
      double double1 = complex1.getImaginary();
      Complex complex14 = complex0.tan();
      Complex complex15 = complex12.multiply(3035.797889351461);
      Complex complex16 = complex12.exp();
      Complex complex17 = complex4.divide(complex1);
      boolean boolean0 = complex11.isInfinite();
      Complex complex18 = complex13.add(complex4);
      Complex complex19 = complex18.acos();
      Complex complex20 = Complex.INF;
      boolean boolean1 = complex6.equals(complex20);
      double double2 = complex5.abs();
      Complex complex21 = complex12.acos();
      String string0 = complex12.toString();
      Complex complex22 = complex15.asin();
      Complex complex23 = complex5.pow(complex8);
      Complex complex24 = complex11.multiply(complex23);
      Complex complex25 = complex5.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.atan();
      List<Complex> list0 = complex1.nthRoot(274);
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = complex0.NaN.createComplex(Double.NaN, (-2497.18650869381));
      Complex complex5 = complex0.INF.tan();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex6.ZERO.subtract(complex4);
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex9.tan();
      Complex complex11 = complex3.subtract(complex1);
      Complex complex12 = complex11.createComplex((-2497.18650869381), 1177.813);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.cosh();
      double double0 = complex0.I.getArgument();
      List<Complex> list0 = complex1.ZERO.nthRoot(371);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.ZERO.conjugate();
      Complex complex4 = complex1.tan();
      List<Complex> list1 = complex4.I.nthRoot(371);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex0.log();
      Complex complex7 = complex4.negate();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex0.log();
      double double1 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.ZERO.add(complex1);
      Complex complex5 = complex0.INF.multiply(3893.41765);
      Complex complex6 = complex5.NaN.exp();
      Complex complex7 = complex6.I.log();
      Complex complex8 = complex2.ONE.cosh();
      Complex complex9 = complex6.ZERO.multiply(complex1);
      Complex complex10 = complex0.ONE.sin();
      Complex complex11 = complex10.I.sinh();
      Complex complex12 = complex0.ZERO.pow(complex3);
      Complex complex13 = complex0.tanh();
      double double0 = complex5.getReal();
      Object object0 = complex5.ZERO.readResolve();
      ComplexField complexField0 = complex12.getField();
      Complex complex14 = complex0.negate();
      Complex complex15 = complex14.NaN.createComplex(3893.41765, Double.POSITIVE_INFINITY);
      boolean boolean0 = complex2.isInfinite();
      Complex complex16 = complex4.multiply(3893.41765);
      Complex complex17 = complex16.INF.tanh();
      Complex complex18 = complex12.multiply(3893.41765);
      Complex complex19 = complex15.negate();
      String string0 = complex18.ZERO.toString();
      Complex complex20 = complex1.createComplex(3893.41765, 2.0);
      boolean boolean1 = complex14.isInfinite();
      Complex complex21 = complex18.sqrt1z();
      Object object1 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.negate();
      String string0 = complex3.I.toString();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.NaN.asin();
      double double0 = complex0.abs();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex1.createComplex(0.0, (-20.0));
      Complex complex4 = complex3.I.cos();
      Complex complex5 = Complex.I;
      boolean boolean1 = complex0.equals(complex5);
      Complex complex6 = complex3.NaN.tanh();
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex0.sqrt1z();
      int int0 = complex5.ZERO.hashCode();
      Complex complex10 = complex9.multiply((-20.0));
      Complex complex11 = complex0.atan();
      double double1 = complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.sin();
      Object object0 = complex0.ONE.readResolve();
      Complex complex3 = complex0.ONE.multiply(2946.59487114026);
      Complex complex4 = complex3.ZERO.tan();
      Object object1 = complex0.readResolve();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex0.INF.acos();
      Complex complex9 = complex7.I.divide(complex5);
      Complex complex10 = complex3.INF.subtract(complex1);
      double double0 = complex5.getReal();
      Complex complex11 = complex3.add(complex0);
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex11.I.log();
      ComplexField complexField0 = complex13.INF.getField();
      Complex complex14 = complex6.sqrt1z();
      double double1 = complex0.getImaginary();
      Complex complex15 = complex11.exp();
      Complex complex16 = complex5.ONE.log();
      Complex complex17 = complex1.INF.tan();
      String string0 = complex16.INF.toString();
      double double2 = complex10.getReal();
      boolean boolean0 = complex6.isInfinite();
      Complex complex18 = Complex.NaN;
      boolean boolean1 = complex6.equals(complex18);
      double double3 = complex6.getImaginary();
      Complex complex19 = complex10.multiply((-882.13));
      Object object2 = complex16.readResolve();
      Complex complex20 = complex16.conjugate();
      double double4 = complex17.getReal();
      Complex complex21 = Complex.ZERO;
      Complex complex22 = complex16.subtract(complex21);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1051.55317806));
      Complex complex1 = complex0.ONE.sin();
      double double0 = complex0.ONE.getArgument();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.pow(complex1);
      int int1 = complex3.NaN.hashCode();
      double double1 = complex0.abs();
      Complex complex5 = complex1.divide(complex4);
      ComplexField complexField0 = complex4.getField();
      Complex complex6 = complex2.createComplex((-2993.911), 0.0);
      double double2 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(2928.76558, 2928.76558);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex0.ZERO.cos();
      Complex complex5 = complex0.INF.tanh();
      Complex complex6 = complex0.sinh();
      ComplexField complexField0 = complex6.ZERO.getField();
      Complex complex7 = complex6.sin();
      boolean boolean0 = complex6.isInfinite();
      try { 
        complex7.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex4.subtract(complex2);
      double double0 = complex4.abs();
      try { 
        complex1.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = new Complex(2.0, 2.0);
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex3.I.sqrt1z();
      Complex complex6 = complex0.ONE.divide(complex3);
      Complex complex7 = complex6.ONE.divide(complex3);
      Complex complex8 = complex7.INF.cos();
      double double1 = complex0.getImaginary();
      double double2 = complex0.getImaginary();
      Complex complex9 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-1056.9112938), 2591.0);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = Complex.ZERO;
      String string0 = complex7.INF.toString();
      Complex complex8 = complex0.multiply(complex7);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(1183.8822427);
      try { 
        complex1.I.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.NaN.divide(complex3);
      Complex complex5 = complex4.ZERO.sin();
      double double0 = complex5.INF.abs();
      Complex complex6 = complex0.sqrt();
      boolean boolean0 = complex6.isNaN();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex4.ZERO.sinh();
      Complex complex9 = complex6.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.cosh();
      Complex complex11 = complex10.tan();
      Complex complex12 = complex5.createComplex(0.0, 156.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply((-750.5947467));
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex1.ZERO.add(complex0);
      Complex complex4 = complex1.ONE.acos();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.INF.createComplex((-750.5947467), 0.0);
      Complex complex7 = complex0.tanh();
      Object object1 = complex7.ONE.readResolve();
      Complex complex8 = complex1.ZERO.acos();
      Complex complex9 = complex1.pow(complex7);
      Complex complex10 = complex9.ONE.subtract(complex0);
      double double0 = complex4.getReal();
      Complex complex11 = complex5.atan();
      Complex complex12 = complex11.ZERO.sqrt();
      String string0 = complex12.NaN.toString();
      List<Complex> list0 = complex4.nthRoot(1);
      Complex complex13 = complex7.cos();
      Complex complex14 = complex1.sqrt();
      String string1 = complex8.toString();
      Complex complex15 = complex2.add(complex11);
      Complex complex16 = complex0.createComplex((-998.062175), (-2513.0940846061812));
      Complex complex17 = complex2.sqrt();
      Complex complex18 = complex13.cosh();
      Complex complex19 = complex18.NaN.atan();
      Complex complex20 = complex14.acos();
      Complex complex21 = complex15.cos();
      int int0 = complex20.NaN.hashCode();
      Complex complex22 = complex21.NaN.divide(complex13);
      Complex complex23 = complex7.asin();
      Complex complex24 = complex9.subtract(complex23);
      Complex complex25 = complex20.log();
      Complex complex26 = complex5.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = new Complex(3391.704225949, 0.0);
      Complex complex3 = complex0.pow(complex2);
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = new Complex(453.58278265822, 0.0);
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex2.exp();
      Complex complex7 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      try { 
        complex0.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-504.3696184), 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.exp();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex1.INF.multiply(0.0);
      Complex complex4 = complex3.I.add(complex0);
      double double0 = complex4.NaN.abs();
      Complex complex5 = complex4.I.cosh();
      double double1 = complex0.getImaginary();
      double double2 = complex3.getReal();
      Complex complex6 = complex0.createComplex(0.0, (-504.3696184));
      Complex complex7 = complex1.cos();
      Complex complex8 = complex7.INF.sinh();
      double double3 = complex8.NaN.getArgument();
      Object object0 = complex3.readResolve();
      Complex complex9 = complex7.INF.divide(complex1);
      Complex complex10 = complex2.ONE.negate();
      Complex complex11 = complex7.asin();
      Complex complex12 = complex11.NaN.divide(complex4);
      Complex complex13 = complex0.NaN.conjugate();
      Complex complex14 = complex0.sin();
      boolean boolean0 = complex2.equals(complex3);
      Complex complex15 = complex6.cosh();
      double double4 = complex6.getArgument();
      Complex complex16 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply((-8.0E298));
      Complex complex2 = complex1.ONE.multiply(complex0);
      double double0 = complex0.INF.getArgument();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.exp();
      String string0 = complex1.I.toString();
      String string1 = complex1.NaN.toString();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex3.atan();
      List<Complex> list0 = complex3.I.nthRoot(952);
      Object object0 = complex1.ZERO.readResolve();
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex2.atan();
      List<Complex> list1 = complex4.ZERO.nthRoot(1131);
      Object object1 = complex2.NaN.readResolve();
      Complex complex8 = complex7.INF.tanh();
      boolean boolean0 = complex5.isInfinite();
      Complex complex9 = complex6.divide(complex1);
      Complex complex10 = complex9.INF.sin();
      Complex complex11 = complex5.cosh();
      Complex complex12 = complex2.sqrt1z();
      Complex complex13 = complex12.NaN.pow(complex8);
      String string2 = complex3.toString();
      String string3 = complex12.toString();
      Complex complex14 = complex4.acos();
      Complex complex15 = complex0.cosh();
      Complex complex16 = complex3.multiply(complex2);
      int int0 = complex2.hashCode();
      String string4 = complex16.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.multiply(complex0);
      List<Complex> list0 = complex0.nthRoot(1413);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex2.ONE.divide(complex0);
      Object object0 = complex0.readResolve();
      Complex complex5 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = (-402.62874);
      Complex complex1 = new Complex((-402.62874), 1299.546722129);
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex4.I.asin();
      Complex complex7 = complex4.tanh();
      String string0 = complex4.I.toString();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex8.INF.asin();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex10.I.log();
      Complex complex12 = complex11.ZERO.tanh();
      Complex complex13 = complex8.tan();
      Complex complex14 = complex11.NaN.divide(complex9);
      Complex complex15 = complex14.ZERO.divide(complex2);
      try { 
        complex8.INF.nthRoot((-2602));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,602
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.ONE.multiply(complex2);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex1.ZERO.log();
      int int0 = complex5.I.hashCode();
      Complex complex6 = complex0.ONE.add(complex1);
      Complex complex7 = complex4.multiply((-1.0));
      String string0 = complex4.toString();
      Complex complex8 = complex1.asin();
      Complex complex9 = complex5.sinh();
      Complex complex10 = complex7.log();
      double double0 = complex10.getArgument();
      Complex complex11 = complex1.createComplex((-1.0), (-1.0));
      int int1 = complex9.hashCode();
      Complex complex12 = complex7.sqrt1z();
      Complex complex13 = complex4.divide(complex7);
      Complex complex14 = complex1.NaN.add(complex4);
      double double1 = complex14.ZERO.getArgument();
      Complex complex15 = complex14.NaN.sqrt();
      Complex complex16 = complex2.multiply((-5217.772247158779));
      try { 
        complex13.nthRoot((-2573));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,573
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.tan();
      int int0 = complex0.ONE.hashCode();
      double double0 = complex0.abs();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.ONE.acos();
      String string0 = complex0.NaN.toString();
      boolean boolean0 = complex4.isNaN();
      boolean boolean1 = complex3.isInfinite();
      Object object0 = complex2.readResolve();
      Complex complex7 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ZERO.multiply(0.0);
      Complex complex3 = complex1.I.acos();
      Complex complex4 = complex3.log();
      double double0 = complex3.ONE.getArgument();
      Complex complex5 = complex4.ONE.asin();
      double double1 = complex0.getImaginary();
      Complex complex6 = complex0.cos();
      boolean boolean0 = complex1.isInfinite();
      Complex complex7 = complex1.divide(complex0);
      Complex complex8 = complex6.conjugate();
      Complex complex9 = complex0.multiply(complex3);
      Complex complex10 = complex3.cosh();
      Complex complex11 = complex8.createComplex((-2654.5065508), 0.0);
      Complex complex12 = complex11.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.add(complex1);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex1.I.acos();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex3.ZERO.add(complex0);
      double double0 = complex0.abs();
      double double1 = complex3.NaN.getArgument();
      Complex complex6 = complex0.tan();
      List<Complex> list0 = complex1.nthRoot(1);
      ComplexField complexField0 = complex1.getField();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex7.ZERO.tan();
      List<Complex> list1 = complex7.INF.nthRoot(1);
      Complex complex9 = complex4.negate();
      Complex complex10 = complex5.pow(complex2);
      Complex complex11 = complex7.sin();
      Complex complex12 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.ZERO.log();
      Complex complex5 = complex3.INF.exp();
      Complex complex6 = complex0.ONE.add(complex2);
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = complex4.ZERO.asin();
      Complex complex9 = complex2.NaN.divide(complex0);
      Complex complex10 = complex4.INF.tanh();
      Complex complex11 = complex10.ONE.sqrt1z();
      Complex complex12 = complex6.pow(complex1);
      Complex complex13 = complex5.acos();
      Complex complex14 = complex5.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex15 = complex1.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex16 = complex3.ONE.conjugate();
      Complex complex17 = complex16.INF.sinh();
      Complex complex18 = complex14.ONE.subtract(complex4);
      ComplexField complexField0 = complex18.getField();
      Complex complex19 = complex9.ZERO.sqrt();
      double double0 = complex18.ZERO.getArgument();
      double double1 = complex3.abs();
      Complex complex20 = complex0.atan();
      Complex complex21 = complex20.ONE.sqrt1z();
      Complex complex22 = complex9.sin();
      double double2 = complex22.ZERO.abs();
      Complex complex23 = complex6.tan();
      double double3 = complex23.I.abs();
      Complex complex24 = complex23.ONE.conjugate();
      boolean boolean0 = complex6.isNaN();
      Complex complex25 = complex14.sqrt1z();
      Complex complex26 = complex2.conjugate();
      Complex complex27 = complex11.tanh();
      double double4 = complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.exp();
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex1.INF.atan();
      Complex complex5 = complex3.multiply(complex2);
      Complex complex6 = complex5.I.cos();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex7.ZERO.exp();
      boolean boolean0 = complex3.equals(complex5);
      String string0 = complex0.toString();
      Complex complex9 = complex5.sinh();
      Complex complex10 = Complex.NaN;
      boolean boolean1 = complex8.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.exp();
      String string0 = complex2.NaN.toString();
      double double0 = complex0.INF.abs();
      double double1 = complex1.abs();
      Object object0 = complex1.readResolve();
      Complex complex3 = complex2.INF.add(complex1);
      Complex complex4 = complex2.multiply(Double.NaN);
      Complex complex5 = complex2.ONE.sqrt1z();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex4.atan();
      ComplexField complexField0 = complex7.I.getField();
      Complex complex8 = complex7.ZERO.negate();
      Object object1 = complex2.readResolve();
      Object object2 = complex2.readResolve();
      boolean boolean0 = complex2.isInfinite();
      String string1 = complex2.toString();
      Complex complex9 = complex5.negate();
      Complex complex10 = complex9.atan();
      Complex complex11 = complex1.conjugate();
      boolean boolean1 = complex11.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.INF.multiply(760.8136588);
      Complex complex2 = complex0.log();
      double double1 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-619.3886), (-2541.8));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.NaN.conjugate();
      double double0 = complex0.ONE.abs();
      String string0 = complex1.ZERO.toString();
      Complex complex3 = complex0.I.acos();
      Complex complex4 = complex2.ONE.add(complex0);
      Complex complex5 = complex0.NaN.sqrt();
      Complex complex6 = complex3.NaN.atan();
      double double1 = complex0.abs();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex6.acos();
      Complex complex9 = complex2.ONE.atan();
      Complex complex10 = complex9.I.multiply((-2541.8));
      ComplexField complexField0 = complex7.ONE.getField();
      Complex complex11 = complex1.atan();
      double double2 = complex2.getReal();
      Complex complex12 = complex1.subtract(complex7);
      double double3 = complex5.getArgument();
      Complex complex13 = complex4.createComplex(Double.NaN, 1.0);
      Complex complex14 = complex8.multiply(0.0);
      Complex complex15 = complex14.cos();
      Complex complex16 = complex11.negate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex3.NaN.add(complex2);
      Complex complex5 = complex4.I.subtract(complex1);
      Complex complex6 = complex5.INF.add(complex4);
      Complex complex7 = complex0.I.atan();
      double double0 = complex0.ZERO.getArgument();
      int int0 = complex0.hashCode();
      String string0 = complex0.toString();
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex1.negate();
      double double1 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ONE.cosh();
      double double1 = complex0.getImaginary();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex3.ONE.subtract(complex2);
      Complex complex5 = complex3.I.divide(complex1);
      ComplexField complexField0 = complex4.INF.getField();
      String string0 = complex0.toString();
      int int0 = complex4.hashCode();
      List<Complex> list0 = complex5.nthRoot(227);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(992.174842669, (-3117.483744051143));
      Complex complex2 = complex1.NaN.multiply((-1637.062375582004));
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex1.ONE.pow(complex0);
      Complex complex5 = complex0.INF.sqrt();
      double double0 = complex1.INF.abs();
      int int0 = complex1.hashCode();
      Complex complex6 = complex0.divide(complex1);
      double double1 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.log();
      Object object0 = complex1.ONE.readResolve();
      Complex complex3 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 1.0;
      Complex complex1 = complex0.ZERO.createComplex(1.0, 0.0);
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = Complex.ONE;
      String string0 = complex3.INF.toString();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex0.divide(complex1);
      boolean boolean0 = complex5.equals(complex4);
      boolean boolean1 = complex0.isInfinite();
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex5.NaN.sinh();
      Complex complex8 = complex6.ZERO.cos();
      double double1 = complex8.INF.getArgument();
      Complex complex9 = complex1.ONE.sinh();
      Complex complex10 = complex9.ZERO.multiply((-1786.17));
      try { 
        complex6.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex1.createComplex(0.0, 0.0);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex2.tan();
      double double0 = complex1.getArgument();
      Complex complex7 = complex3.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      double double0 = complex1.INF.abs();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.I.pow(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.NaN.sqrt1z();
      double double0 = complex5.abs();
      double double1 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex((-2.2250738585072014E-308), (-2.2250738585072014E-308));
      Complex complex3 = complex1.INF.subtract(complex2);
      Complex complex4 = complex0.NaN.add(complex1);
      Complex complex5 = complex0.NaN.cos();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.subtract(complex6);
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex2.multiply(2265.0);
      Complex complex10 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.I.sqrt1z();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex0.sqrt();
      ComplexField complexField1 = complex3.ONE.getField();
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex2.INF.add(complex1);
      Complex complex8 = complex2.I.pow(complex0);
      Complex complex9 = complex8.ONE.sqrt1z();
      ComplexField complexField2 = complex0.getField();
      String string0 = complex0.toString();
      Complex complex10 = complex0.NaN.log();
      Complex complex11 = complex2.asin();
      Object object0 = complex11.readResolve();
      Complex complex12 = complex10.INF.subtract(complex8);
      try { 
        complex11.nthRoot((-2259));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,259
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.multiply(2.479773539153719E-5);
      Complex complex3 = complex0.NaN.subtract(complex1);
      Complex complex4 = complex3.ZERO.add(complex0);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex5.ZERO.sqrt1z();
      Object object0 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.INF.sqrt1z();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.I.multiply(complex0);
      Complex complex7 = complex1.ONE.asin();
      Complex complex8 = complex1.add(complex0);
      Complex complex9 = complex1.INF.conjugate();
      Complex complex10 = complex8.I.conjugate();
      List<Complex> list0 = complex1.nthRoot(232);
      Object object0 = complex4.readResolve();
      Complex complex11 = complex8.atan();
      Complex complex12 = complex10.conjugate();
      Complex complex13 = complex11.exp();
      boolean boolean0 = complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.acos();
      String string0 = complex1.toString();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex2.multiply(947.9655227075);
      Complex complex5 = complex4.sqrt();
      String string1 = complex1.toString();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex5.divide(complex0);
      Complex complex8 = complex6.atan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(3332.1522862228503);
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex1.I.multiply(3332.1522862228503);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex1.cos();
      String string0 = complex0.toString();
      Complex complex7 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.NaN.createComplex(2822.55, (-1817.45696742136));
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.createComplex((-3440.549489571624), 1409.835341691323);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.createComplex(0.3333333134651184, 988.092);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.I.sin();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      double double0 = complex1.ZERO.abs();
      Complex complex2 = complex0.multiply(Double.NaN);
      Complex complex3 = complex1.NaN.pow(complex0);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex2.ONE.sin();
      Complex complex6 = complex5.I.subtract(complex3);
      Object object0 = complex5.I.readResolve();
      Object object1 = complex3.INF.readResolve();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex7 = complex1.INF.sin();
      Complex complex8 = complex1.multiply(1578.065276002);
      double double1 = complex8.ONE.abs();
      String string0 = complex1.toString();
      Complex complex9 = complex1.sqrt();
      boolean boolean0 = complex9.isNaN();
      Complex complex10 = complex9.sqrt1z();
      Complex complex11 = complex4.divide(complex9);
      Complex complex12 = complex11.ONE.atan();
      Complex complex13 = complex1.atan();
      Complex complex14 = complex11.I.add(complex2);
      Complex complex15 = complex11.I.cos();
      int int0 = complex10.hashCode();
      Complex complex16 = complex1.ZERO.createComplex(1578.065276002, 2033.839446312915);
      Complex complex17 = complex11.ONE.cos();
      Complex complex18 = complex11.pow(complex7);
      Complex complex19 = complex8.I.cosh();
      Complex complex20 = complex18.pow(complex8);
      Complex complex21 = complex20.INF.multiply(complex5);
      String string1 = complex13.toString();
      double double2 = complex2.getArgument();
      Complex complex22 = complex5.sinh();
      Complex complex23 = complex5.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sinh();
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex1.ZERO.add(complex0);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex5.NaN.add(complex0);
      Complex complex7 = complex5.INF.cos();
      Complex complex8 = complex3.INF.exp();
      Complex complex9 = complex4.INF.asin();
      Complex complex10 = complex4.divide(complex1);
      Complex complex11 = complex10.I.subtract(complex3);
      double double0 = complex0.getReal();
      Complex complex12 = complex3.multiply(2354.55946);
      Complex complex13 = complex12.INF.pow(complex10);
      double double1 = complex12.INF.getArgument();
      Complex complex14 = complex12.I.atan();
      Complex complex15 = complex12.log();
      Complex complex16 = complex10.sin();
      Complex complex17 = complex15.multiply((-3226.315229677382));
      boolean boolean1 = complex0.equals(complex3);
      double double2 = complex17.getReal();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.NaN.divide(complex2);
      Complex complex4 = complex3.INF.log();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = complex2.ONE.tanh();
      Complex complex8 = complex2.INF.sqrt();
      Complex complex9 = complex2.multiply(3113.257355908);
      Complex complex10 = complex0.ONE.sqrt();
      Complex complex11 = complex10.INF.sqrt1z();
      Complex complex12 = complex1.tan();
      double double0 = complex12.getImaginary();
      Object object0 = complex2.readResolve();
      Complex complex13 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-500.85313699), (-500.85313699));
      Complex complex1 = complex0.multiply((-500.85313699));
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.INF.sqrt();
      Complex complex6 = complex3.createComplex(3.141592653589793, 0.0);
      Complex complex7 = complex1.sin();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex3.NaN.asin();
      Complex complex10 = complex6.exp();
      Complex complex11 = complex10.asin();
      int int1 = complex4.hashCode();
      Complex complex12 = complex6.I.multiply(complex0);
      Complex complex13 = complex1.cos();
      Complex complex14 = complex7.subtract(complex1);
      Complex complex15 = complex14.ONE.cos();
      Complex complex16 = complex14.NaN.add(complex1);
      int int2 = complex16.NaN.hashCode();
      Complex complex17 = complex4.add(complex3);
      Complex complex18 = complex17.ZERO.atan();
      Complex complex19 = complex18.tanh();
      Complex complex20 = complex6.subtract(complex4);
      Complex complex21 = complex20.ZERO.sqrt();
      Complex complex22 = complex19.asin();
      Complex complex23 = complex0.conjugate();
      Complex complex24 = complex11.asin();
      double double0 = complex10.getImaginary();
      Complex complex25 = complex6.log();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      double double0 = complex1.ZERO.abs();
      double double1 = complex0.getImaginary();
      double double2 = complex0.getImaginary();
      int int0 = complex1.hashCode();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.I.cos();
      Complex complex4 = new Complex(3078.940224, 3078.940224);
      Complex complex5 = complex2.INF.multiply(complex4);
      Complex complex6 = complex0.multiply(complex2);
      List<Complex> list0 = complex2.ONE.nthRoot(29);
      Complex complex7 = complex6.ZERO.pow(complex2);
      Complex complex8 = complex0.conjugate();
      List<Complex> list1 = complex2.nthRoot(440);
      Complex complex9 = complex6.tan();
      Complex complex10 = complex9.exp();
      Complex complex11 = complex10.I.multiply(complex8);
      Complex complex12 = complex0.negate();
      Complex complex13 = complex2.pow(complex5);
      Complex complex14 = complex2.log();
      String string0 = complex8.toString();
      double double3 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.createComplex(3868.3269106, 3868.3269106);
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = complex4.I.multiply(3868.3269106);
      double double0 = complex4.abs();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.INF.log();
      Complex complex8 = complex0.negate();
      double double1 = complex8.INF.abs();
      Complex complex9 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex1.INF.sinh();
      Complex complex4 = complex2.INF.divide(complex3);
      Complex complex5 = complex2.multiply(complex4);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex6 = complex0.NaN.tan();
      Complex complex7 = complex2.multiply(complex6);
      Complex complex8 = complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex9 = complex8.I.asin();
      Complex complex10 = complex9.ZERO.multiply(complex8);
      boolean boolean1 = complex2.isNaN();
      boolean boolean2 = complex0.equals(complex1);
      Complex complex11 = complex8.I.sqrt();
      double double0 = complex3.abs();
      List<Complex> list0 = complex8.nthRoot(3933);
      Complex complex12 = complex6.atan();
      String string0 = complex0.toString();
  }
}
