/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 12:15:19 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sin();
      int int0 = 1073741824;
      Complex complex2 = complex1.INF.sqrt();
      // Undeclared exception!
      complex0.ONE.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex0.I.pow(complex1);
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex1.divide(complex3);
      double double0 = complex0.getImaginary();
      Complex complex6 = complex1.ZERO.pow(complex2);
      Complex complex7 = complex1.acos();
      Complex complex8 = complex3.acos();
      boolean boolean0 = complex1.isNaN();
      Object object0 = complex1.readResolve();
      double double1 = complex0.NaN.abs();
      Complex complex9 = complex2.sqrt();
      ComplexField complexField0 = complex0.getField();
      double double2 = complex0.getReal();
      Complex complex10 = complex5.divide(complex4);
      Complex complex11 = complex5.I.cosh();
      Complex complex12 = complex3.subtract(complex2);
      Complex complex13 = complex5.sinh();
      String string0 = complex13.INF.toString();
      Complex complex14 = complex5.NaN.conjugate();
      Complex complex15 = complex3.pow(complex5);
      Complex complex16 = complex0.divide(complex12);
      int int0 = complex13.hashCode();
      boolean boolean1 = complex6.isInfinite();
      Complex complex17 = complex8.negate();
      Complex complex18 = complex16.tanh();
      double double3 = complex8.getImaginary();
      Complex complex19 = complex13.conjugate();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      double double0 = complex1.ZERO.abs();
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex0.I.createComplex(6.283185307179586, (-1361.94832));
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex3.ZERO.asin();
      int int0 = complex5.NaN.hashCode();
      Complex complex6 = complex5.ONE.negate();
      Object object0 = complex3.readResolve();
      Complex complex7 = complex0.multiply((-2495.4598804058));
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex8.ONE.sqrt();
      Complex complex10 = complex4.divide(complex8);
      Complex complex11 = complex3.acos();
      ComplexField complexField0 = complex3.getField();
      Complex complex12 = new Complex(0.0, 1310.676);
      Complex complex13 = complex7.add(complex12);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = new Complex(1137.32430990458, 1280.6817112825997);
      Complex complex4 = complex3.ONE.subtract(complex0);
      Complex complex5 = complex3.ONE.negate();
      double double0 = complex5.NaN.abs();
      Complex complex6 = complex0.add(complex3);
      List<Complex> list0 = complex3.nthRoot(286);
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.getArgument();
      int int0 = 4901;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.NaN.pow(complex1);
      List<Complex> list0 = complex0.ONE.nthRoot(4901);
      Complex complex4 = complex0.INF.sin();
      Complex complex5 = complex1.INF.multiply(complex3);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.ZERO.nthRoot(37);
      double double0 = complex0.getReal();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex1.ZERO.add(complex0);
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex0.add(complex1);
      Object object0 = complex2.INF.readResolve();
      Complex complex8 = complex5.NaN.tan();
      double double1 = complex8.NaN.getArgument();
      double double2 = complex7.getArgument();
      Complex complex9 = complex5.createComplex((-1.0), 37);
      double double3 = complex9.ZERO.abs();
      Complex complex10 = complex2.conjugate();
      List<Complex> list1 = complex10.I.nthRoot(41);
      int int0 = complex10.hashCode();
      Complex complex11 = complex9.ONE.tan();
      List<Complex> list2 = complex7.nthRoot(1389);
      Complex complex12 = complex10.tanh();
      Complex complex13 = complex12.exp();
      Complex complex14 = complex13.ONE.subtract(complex3);
      Complex complex15 = complex9.cos();
      Object object1 = complex7.readResolve();
      Complex complex16 = complex11.tan();
      Complex complex17 = complex9.asin();
      ComplexField complexField0 = complex17.ONE.getField();
      Complex complex18 = complex15.asin();
      Complex complex19 = complex8.asin();
      double double4 = complex12.getImaginary();
      Complex complex20 = complex19.log();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.NaN.getArgument();
      String string0 = complex0.toString();
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex1.INF.cosh();
      Complex complex4 = complex0.negate();
      double double1 = complex0.getReal();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.ZERO.sqrt();
      double double2 = complex4.getReal();
      Complex complex7 = complex3.divide(complex4);
      Complex complex8 = complex4.add(complex3);
      Complex complex9 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      double double0 = complex1.INF.abs();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex3.INF.sqrt1z();
      double double1 = complex2.abs();
      String string0 = complex2.ONE.toString();
      Complex complex5 = complex0.ONE.atan();
      boolean boolean0 = complex0.equals(")");
      Complex complex6 = complex2.negate();
      ComplexField complexField0 = complex6.ONE.getField();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex4.asin();
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = complex7.multiply(Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.ONE.asin();
      Complex complex12 = complex0.ZERO.acos();
      Complex complex13 = complex2.cos();
      double double2 = complex10.getReal();
      Complex complex14 = complex10.INF.sqrt1z();
      double double3 = complex14.ONE.abs();
      Complex complex15 = complex5.atan();
      String string1 = complex6.toString();
      boolean boolean1 = complex8.isNaN();
      Complex complex16 = complex11.cosh();
      Complex complex17 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      boolean boolean2 = complex5.equals(complex17);
      Complex complex18 = complex4.sqrt1z();
      Complex complex19 = complex8.negate();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.atan();
      double double0 = complex1.ONE.abs();
      Complex complex3 = complex1.ONE.conjugate();
      List<Complex> list0 = complex0.ONE.nthRoot(1);
      double double1 = complex0.getArgument();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex4.ZERO.tan();
      String string0 = complex4.ONE.toString();
      Complex complex7 = complex5.exp();
      String string1 = complex5.I.toString();
      Complex complex8 = complex5.sinh();
      double double2 = complex8.NaN.abs();
      Object object0 = complex0.readResolve();
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex4.multiply((-1.0));
      Complex complex10 = new Complex(0.0, 2.0);
      boolean boolean0 = complex4.equals(complex10);
      Complex complex11 = complex6.createComplex((-1.0), 1124.759);
      Complex complex12 = complex2.sin();
      Complex complex13 = complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cosh();
      double double0 = complex0.INF.getArgument();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex0.INF.divide(complex2);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(928.0, 928.0);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.I.tan();
      String string0 = complex1.I.toString();
      Complex complex2 = complex0.ONE.asin();
      Object object0 = complex2.I.readResolve();
      Object object1 = complex0.NaN.readResolve();
      Complex complex3 = complex2.INF.createComplex(928.0, 0.0);
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex5.I.asin();
      Complex complex8 = complex2.INF.cos();
      Complex complex9 = complex3.tan();
      double double0 = complex4.I.abs();
      double double1 = complex1.getArgument();
      int int0 = complex6.hashCode();
      Complex complex10 = complex3.tan();
      int int1 = complex4.hashCode();
      Complex complex11 = complex5.conjugate();
      Complex complex12 = complex10.exp();
      Complex complex13 = complex12.acos();
      Complex complex14 = complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(3437.4758296, Double.NaN);
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = complex0.I.subtract(complex1);
      double double0 = complex0.getReal();
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.conjugate();
      String string0 = complex0.toString();
      Complex complex5 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ZERO.abs();
      try { 
        complex0.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(2297.3431633945415, 2297.3431633945415);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.exp();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex3 = complex0.cosh();
      double double0 = complex3.I.getArgument();
      Object object1 = new Object();
      double double1 = complex2.abs();
      boolean boolean0 = complex2.equals(object1);
      boolean boolean1 = complex2.equals(object0);
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex3.log();
      Complex complex6 = complex5.multiply(complex4);
      double double2 = complex4.abs();
      Complex complex7 = complex4.exp();
      double double3 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.I.toString();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.log();
      ComplexField complexField0 = complex0.INF.getField();
      ComplexField complexField1 = complex0.getField();
      Complex complex2 = complex0.I.add(complex1);
      double double0 = complex1.getArgument();
      int int0 = complex0.hashCode();
      Complex complex3 = complex1.conjugate();
      Object object1 = complex1.INF.readResolve();
      Complex complex4 = complex3.sqrt();
      double double1 = complex4.NaN.getArgument();
      Complex complex5 = complex4.multiply(complex3);
      Complex complex6 = complex4.log();
      Complex complex7 = new Complex(0.0, (-1642.30882277511));
      Complex complex8 = complex3.I.multiply(complex7);
      Complex complex9 = complex4.ONE.conjugate();
      Complex complex10 = complex9.I.sqrt();
      Complex complex11 = complex1.createComplex(3.141592653589793, 3.141592653589793);
      Complex complex12 = complex11.sqrt();
      Complex complex13 = complex12.ZERO.atan();
      Complex complex14 = complex13.ONE.exp();
      Complex complex15 = complex4.multiply(3.141592653589793);
      Complex complex16 = complex11.tan();
      Complex complex17 = complex4.log();
      ComplexField complexField2 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      double double0 = complex0.ONE.getArgument();
      Complex complex3 = complex0.cosh();
      ComplexField complexField0 = complex1.INF.getField();
      String string0 = complex0.NaN.toString();
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex1.exp();
      ComplexField complexField1 = complex5.getField();
      double double1 = complex0.getReal();
      Complex complex6 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex3.negate();
      int int0 = complex1.hashCode();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex1.ONE.divide(complex6);
      Complex complex8 = complex7.ONE.cosh();
      int int1 = complex0.hashCode();
      Complex complex9 = complex0.pow(complex1);
      Complex complex10 = complex9.ONE.sqrt();
      ComplexField complexField0 = complex9.I.getField();
      double double0 = complex2.getArgument();
      Complex complex11 = complex9.atan();
      Object object0 = complex1.readResolve();
      Complex complex12 = complex4.asin();
      Complex complex13 = complex12.ONE.createComplex(Double.NaN, (-1955.0));
      Complex complex14 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex1.ZERO.multiply(1.0);
      Complex complex3 = complex2.ONE.cos();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex0.INF.add(complex3);
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex3.multiply(1.0);
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex5.I.sinh();
      Complex complex8 = complex5.ONE.multiply(0.0);
      Complex complex9 = new Complex(1.0, 0.0);
      Complex complex10 = complex1.NaN.sqrt();
      Complex complex11 = complex5.sin();
      Complex complex12 = complex8.I.subtract(complex9);
      double double0 = complex5.getImaginary();
      Complex complex13 = complex4.negate();
      Complex complex14 = complex13.ZERO.exp();
      Complex complex15 = complex14.log();
      Complex complex16 = complex15.ZERO.sinh();
      Complex complex17 = complex9.sin();
      String string0 = complex12.I.toString();
      Complex complex18 = complex12.sinh();
      int int1 = complex12.hashCode();
      double double1 = complex5.abs();
      Complex complex19 = complex0.sin();
      Complex complex20 = complex12.divide(complex9);
      Complex complex21 = complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex3.NaN.sqrt();
      ComplexField complexField0 = complex2.getField();
      boolean boolean0 = complex3.isInfinite();
      double double0 = complex4.getReal();
      boolean boolean1 = complex2.equals(complex1);
      List<Complex> list0 = complex2.ONE.nthRoot(204);
      Complex complex7 = complex0.cos();
      Complex complex8 = complex2.sinh();
      ComplexField complexField1 = complex0.getField();
      Complex complex9 = complex7.add(complex1);
      Complex complex10 = complex1.I.sqrt();
      Object object0 = complex10.I.readResolve();
      Object object1 = complex7.readResolve();
      double double1 = complex8.getReal();
      Complex complex11 = complex10.log();
      boolean boolean2 = complex2.isNaN();
      boolean boolean3 = complex4.isInfinite();
      Complex complex12 = complex5.cosh();
      Complex complex13 = complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(546.119, 546.119);
      Complex complex1 = complex0.conjugate();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex2.multiply((-445.59088044258));
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.divide(complex0);
      boolean boolean0 = complex1.isNaN();
      double double0 = complex1.getImaginary();
      boolean boolean1 = complex0.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.createComplex((-270.69734), 0.0);
      Complex complex2 = complex0.INF.log();
      int int0 = complex0.I.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.ONE.log();
      Complex complex6 = complex5.ZERO.cosh();
      List<Complex> list0 = complex1.nthRoot(17);
      Complex complex7 = complex3.add(complex0);
      Complex complex8 = complex4.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex1.I.multiply(complex3);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex3.multiply((-5298.5643));
      Complex complex8 = complex7.NaN.tanh();
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex8.INF.asin();
      Complex complex11 = complex3.I.conjugate();
      Complex complex12 = complex0.log();
      int int0 = complex12.NaN.hashCode();
      try { 
        complex11.ONE.nthRoot((-2044));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,044
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      List<Complex> list0 = complex0.nthRoot(3253);
      double double0 = complex0.getReal();
      double double1 = complex0.getImaginary();
      boolean boolean0 = complex0.equals(list0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex0.multiply(0.0);
      String string0 = complex0.toString();
      Complex complex5 = complex4.createComplex(9.219544613762692E-9, 0.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(2049.828, 2049.828);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.acos();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex2.asin();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      String string0 = complex0.toString();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(1783.2777667910552, 1783.2777667910552);
      Complex complex2 = complex1.INF.multiply(1783.2777667910552);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.sin();
      Complex complex5 = Complex.I;
      Complex complex6 = complex1.pow(complex5);
      Complex complex7 = complex3.pow(complex1);
      Complex complex8 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-3164.4394677441), 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.I.cosh();
      List<Complex> list0 = complex2.NaN.nthRoot(175);
      Complex complex4 = complex2.NaN.acos();
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex1.divide(complex2);
      Complex complex7 = complex6.NaN.createComplex(330.065028008241, 824.6191);
      Complex complex8 = complex0.pow(complex1);
      Complex complex9 = complex0.exp();
      try { 
        complex9.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      Complex complex1 = Complex.NaN;
      double double0 = complex1.ONE.abs();
      Complex complex2 = complex0.INF.subtract(complex1);
      double double1 = complex0.getArgument();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex3.sin();
      double double2 = complex3.abs();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = new Complex(0.0, (-586.176895));
      Complex complex4 = complex3.ZERO.add(complex0);
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex0.ZERO.divide(complex3);
      Complex complex7 = complex1.ONE.multiply((-1545.03));
      int int0 = complex6.I.hashCode();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex8 = complex0.log();
      Complex complex9 = complex5.ZERO.sqrt1z();
      Complex complex10 = complex8.sin();
      int int1 = complex3.hashCode();
      Complex complex11 = complex0.tan();
      Complex complex12 = complex0.ZERO.sinh();
      Complex complex13 = complex12.ZERO.pow(complex6);
      Complex complex14 = complex5.atan();
      Complex complex15 = complex14.sin();
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.NaN, (-662.082134927482));
      Complex complex2 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.INF.subtract(complex2);
      double double0 = complex0.getImaginary();
      double double1 = complex0.getArgument();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex4.INF.log();
      boolean boolean0 = complex1.isInfinite();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex6.ONE.multiply(complex1);
      Complex complex8 = new Complex(0.6666666269302368, 0.3333333134651184);
      Complex complex9 = complex2.add(complex8);
      Complex complex10 = complex8.atan();
      try { 
        complex10.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-2085.498132776172), (-2085.498132776172));
      Complex complex1 = complex0.INF.multiply((-2085.498132776172));
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.I.tanh();
      Complex complex4 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.ZERO.multiply(complex4);
      Complex complex6 = complex1.I.sin();
      Complex complex7 = complex2.createComplex((-2357.0), (-2357.0));
      Complex complex8 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-2570.0), (-2570.0));
      Complex complex1 = complex0.ZERO.tanh();
      int int0 = complex0.hashCode();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-1486.40194), (-123.28134876419));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.ONE.cos();
      double double0 = complex5.I.getArgument();
      Complex complex7 = complex0.ZERO.negate();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex0.ONE.multiply((-2134.0));
      Complex complex10 = complex8.sqrt();
      Complex complex11 = complex1.NaN.multiply(7.0);
      boolean boolean0 = complex2.equals(complex8);
      double double1 = complex1.getArgument();
      Complex complex12 = complex9.asin();
      double double2 = complex12.I.abs();
      Complex complex13 = complex7.pow(complex10);
      Complex complex14 = complex7.createComplex(7.0, Double.NaN);
      Complex complex15 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex8.INF.multiply(0.0);
      Complex complex10 = complex8.add(complex1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.ONE.multiply((-3887.5622987702));
      Complex complex5 = complex0.I.createComplex((-3887.5622987702), (-3887.5622987702));
      Object object0 = complex1.INF.readResolve();
      double double0 = complex1.ONE.abs();
      double double1 = complex2.NaN.getArgument();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.INF.add(complex3);
      int int0 = complex6.I.hashCode();
      Complex complex9 = complex2.createComplex(2354.059385621, 0.0);
      double double2 = complex1.getReal();
      double double3 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.NaN.createComplex((-1.0), (-1.0));
      Complex complex3 = complex0.createComplex((-1.0), 0.0);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.sinh();
      ComplexField complexField0 = complex3.NaN.getField();
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex3.tan();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex7 = complex3.exp();
      Complex complex8 = complex4.asin();
      ComplexField complexField1 = complex8.NaN.getField();
      double double0 = complex7.getReal();
      try { 
        complex0.nthRoot((-4011));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,011
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.atan();
      String string0 = complex1.INF.toString();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex2.INF.cos();
      double double0 = complex1.getReal();
      double double1 = complex1.getReal();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex5.subtract(complex2);
      Complex complex8 = complex0.acos();
      Complex complex9 = Complex.I;
      boolean boolean0 = complex2.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(1204.372101507442, 1204.372101507442);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.ZERO.sqrt();
      double double0 = complex2.ZERO.abs();
      Complex complex4 = complex1.NaN.cosh();
      Complex complex5 = complex1.INF.cos();
      Complex complex6 = complex0.I.pow(complex1);
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex1.NaN.log();
      Complex complex9 = complex6.I.pow(complex0);
      Complex complex10 = complex9.ZERO.acos();
      String string0 = complex8.ONE.toString();
      Complex complex11 = complex6.add(complex0);
      ComplexField complexField0 = complex11.INF.getField();
      Complex complex12 = complex8.ONE.sqrt1z();
      double double1 = complex2.abs();
      try { 
        complex8.nthRoot((-1650));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,650
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex2.I.log();
      Complex complex5 = complex4.ONE.tanh();
      int int0 = complex1.hashCode();
      Complex complex6 = complex1.multiply(complex2);
      Complex complex7 = complex6.add(complex0);
      int int1 = complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex3.multiply((-554.1212035151202));
      Complex complex6 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(595.770940195975, 595.770940195975);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex3.ZERO.tan();
      Complex complex6 = complex0.conjugate();
      boolean boolean0 = complex0.equals(complex6);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.NaN.multiply(595.770940195975);
      Complex complex9 = complex7.asin();
      Complex complex10 = complex9.ONE.cos();
      Complex complex11 = complex9.ONE.divide(complex1);
      Complex complex12 = complex1.conjugate();
      Complex complex13 = complex12.INF.sqrt1z();
      Complex complex14 = complex7.log();
      Complex complex15 = complex9.add(complex6);
      Complex complex16 = complex15.INF.cos();
      Complex complex17 = complex2.tanh();
      Complex complex18 = complex5.divide(complex17);
      double double0 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply((-728.2527764059));
      Complex complex2 = complex1.NaN.sin();
      String string0 = complex1.INF.toString();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex3 = complex0.INF.createComplex((-728.2527764059), (-728.2527764059));
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex3.ONE.log();
      List<Complex> list0 = complex2.ZERO.nthRoot(272);
      boolean boolean0 = complex0.equals("tNy\"L");
      int int0 = complex0.hashCode();
      Complex complex6 = complex1.INF.pow(complex0);
      Object object0 = complex0.readResolve();
      String string1 = complex2.toString();
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.tanh();
      double double0 = complex4.getReal();
      double double1 = complex0.getImaginary();
      boolean boolean1 = complex8.isNaN();
      Complex complex9 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-2211.5074114070308), (-2211.5074114070308));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      String string0 = complex1.INF.toString();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ZERO.subtract(complex0);
      Complex complex4 = complex2.ZERO.sqrt1z();
      Complex complex5 = complex2.multiply(complex1);
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex6.ONE.createComplex(0.0, 0.0);
      Complex complex8 = complex6.ONE.sinh();
      double double0 = complex2.getReal();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex10.ONE.cos();
      Complex complex12 = complex1.NaN.exp();
      Complex complex13 = complex12.I.multiply(complex11);
      Complex complex14 = complex10.ZERO.add(complex0);
      Complex complex15 = complex14.INF.createComplex(0.0, (-0.49999999999999994));
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex0.isNaN();
      Complex complex16 = complex3.sqrt();
      Complex complex17 = complex11.exp();
      Complex complex18 = complex0.pow(complex8);
      double double1 = complex12.getImaginary();
      double double2 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex1.pow(complex0);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.add(complex1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.createComplex(6.283185307179586, (-921.98112));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.createComplex((-42.367686), (-42.367686));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.multiply(Double.NaN);
      Complex complex3 = complex0.divide(complex1);
      double double0 = complex3.abs();
      Complex complex4 = complex1.sin();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-2623.755886502913), (-2623.755886502913));
      Complex complex1 = Complex.INF;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      List<Complex> list0 = complex1.nthRoot(198);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(1111.67);
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex3.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.I.atan();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex1.sqrt();
      String string0 = complex4.ZERO.toString();
      Complex complex5 = complex4.I.log();
      int int0 = complex5.I.hashCode();
      Complex complex6 = complex5.ZERO.subtract(complex0);
      Complex complex7 = complex2.INF.atan();
      Complex complex8 = complex6.NaN.atan();
      double double0 = complex4.I.getArgument();
      Complex complex9 = complex4.INF.exp();
      Complex complex10 = complex9.ZERO.asin();
      Complex complex11 = complex5.INF.cos();
      List<Complex> list0 = complex1.nthRoot(1775);
      int int1 = complex0.hashCode();
      Complex complex12 = complex8.sin();
      Complex complex13 = complex6.NaN.sinh();
      Complex complex14 = complex6.ZERO.conjugate();
      boolean boolean0 = complex2.isNaN();
      double double1 = complex2.abs();
      Complex complex15 = complex3.cos();
      Complex complex16 = complex9.conjugate();
      Complex complex17 = complex8.negate();
      boolean boolean1 = complex5.equals(complex17);
      try { 
        complex13.nthRoot((-878));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -878
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.6299605249474366);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.INF.cosh();
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.NaN.sqrt1z();
      Complex complex5 = complex2.ZERO.sqrt();
      List<Complex> list0 = complex2.ONE.nthRoot(162);
      Complex complex6 = complex1.NaN.tanh();
      int int0 = complex0.I.hashCode();
      boolean boolean0 = complex0.equals("4");
      String string0 = complex0.toString();
      int int1 = complex1.hashCode();
      Complex complex7 = complex1.conjugate();
      ComplexField complexField0 = complex7.getField();
      double double1 = complex7.abs();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex7.INF.atan();
      Complex complex10 = complex7.cosh();
      List<Complex> list1 = complex10.nthRoot(162);
      Complex complex11 = complex10.INF.acos();
      Complex complex12 = complex10.INF.pow(complex2);
      Complex complex13 = complex10.I.pow(complex0);
      Complex complex14 = complex13.NaN.atan();
      Complex complex15 = complex6.tanh();
      Complex complex16 = complex8.exp();
      Complex complex17 = complex0.sqrt();
      Complex complex18 = complex2.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      Complex complex4 = complex3.NaN.sqrt1z();
      List<Complex> list0 = complex4.ZERO.nthRoot(7);
      Complex complex5 = complex2.ONE.multiply(1.0);
      double double0 = complex3.I.abs();
      Complex complex6 = complex1.multiply(complex0);
      Complex complex7 = complex6.I.multiply(complex2);
      Complex complex8 = complex7.I.negate();
      Complex complex9 = complex6.I.sin();
      Complex complex10 = complex2.I.sinh();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex10.INF.divide(complex0);
      Complex complex13 = complex6.I.sin();
      Complex complex14 = complex13.NaN.atan();
      int int0 = complex13.INF.hashCode();
      boolean boolean1 = complex3.equals(complex2);
      Complex complex15 = new Complex(1.0, 0.0);
      try { 
        complex3.nthRoot((-3587));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,587
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.I.multiply(0.0);
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex0.INF.negate();
      Complex complex6 = complex5.INF.exp();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex5.NaN.pow(complex7);
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex9.I.asin();
      Complex complex11 = complex5.ONE.asin();
      Complex complex12 = complex11.ONE.sqrt();
      int int0 = complex11.I.hashCode();
      Complex complex13 = complex0.asin();
      Complex complex14 = complex8.log();
      double double0 = complex12.getImaginary();
      String string0 = complex5.toString();
      boolean boolean0 = complex13.isInfinite();
      Complex complex15 = new Complex(0.0, 0.0);
      Complex complex16 = complex15.multiply(0.0);
      Complex complex17 = complex4.pow(complex15);
      Complex complex18 = complex17.ONE.divide(complex16);
      Complex complex19 = complex12.exp();
      Complex complex20 = complex19.subtract(complex17);
      Complex complex21 = complex4.log();
      Object object0 = complex0.readResolve();
      boolean boolean1 = complex21.isNaN();
      Object object1 = new Object();
      boolean boolean2 = complex2.equals(object1);
      Complex complex22 = complex12.tanh();
      double double1 = complex22.getImaginary();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.multiply(1250.726017805898);
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.sqrt();
      int int0 = complex4.ZERO.hashCode();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex1.subtract(complex0);
      boolean boolean0 = complex4.isInfinite();
      Complex complex8 = complex6.cosh();
      double double1 = complex6.I.abs();
      Complex complex9 = complex8.add(complex5);
      Complex complex10 = complex9.NaN.atan();
      Complex complex11 = complex1.createComplex(1250.726017805898, 0.7853981633974483);
      double double2 = complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.I.sinh();
      double double1 = complex2.NaN.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.sqrt1z();
      int int0 = complex0.hashCode();
      Complex complex4 = complex3.I.sqrt1z();
      double double2 = complex4.ZERO.getArgument();
      double double3 = complex0.getImaginary();
      double double4 = complex4.getReal();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex1.createComplex(1.4142135623730951, Double.NaN);
      Complex complex8 = complex7.INF.sqrt();
      double double5 = complex1.getImaginary();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex4.pow(complex9);
      Complex complex11 = complex0.sin();
      List<Complex> list0 = complex11.ZERO.nthRoot(3540);
      double double6 = complex1.abs();
      boolean boolean0 = complex3.isNaN();
      Complex complex12 = complex1.sqrt1z();
      Complex complex13 = complex7.atan();
      Object object0 = complex3.readResolve();
      Complex complex14 = complex12.createComplex(1.0, 1.4142135623730951);
      int int1 = complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex1.multiply(4796.4118819);
      Object object0 = complex1.NaN.readResolve();
      Complex complex3 = complex2.ZERO.divide(complex1);
      Object object1 = complex2.I.readResolve();
      try { 
        complex0.nthRoot((-1705));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,705
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
