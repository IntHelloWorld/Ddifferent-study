/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 12:07:51 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.sqrt1z();
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex1.atan();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.add(complex4);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.ZERO.add(complex2);
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.INF.acos();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex6.ONE.exp();
      int int0 = complex0.hashCode();
      Complex complex9 = complex8.pow(complex5);
      boolean boolean0 = complex5.isInfinite();
      String string0 = complex0.toString();
      Complex complex10 = complex3.cosh();
      Complex complex11 = complex8.tan();
      Complex complex12 = complex11.INF.sqrt();
      boolean boolean1 = complex3.isNaN();
      Complex complex13 = Complex.INF;
      Complex complex14 = complex2.I.multiply(complex13);
      Complex complex15 = complex8.sinh();
      double double0 = complex6.getArgument();
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex16 = complex4.pow(complex5);
      Complex complex17 = new Complex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.INF.nthRoot(1);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.ONE.divide(complex1);
      double double0 = complex1.getImaginary();
      double double1 = complex1.abs();
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex3.NaN.sinh();
      double double2 = complex1.getImaginary();
      Complex complex5 = complex1.INF.createComplex(0.0, 1.0);
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex2.acos();
      double double3 = complex1.getArgument();
      double double4 = complex2.getArgument();
      int int0 = complex7.hashCode();
      Complex complex8 = complex6.NaN.log();
      Complex complex9 = complex0.divide(complex7);
      String string0 = complex5.ZERO.toString();
      int int1 = complex6.hashCode();
      boolean boolean0 = complex5.isNaN();
      Complex complex10 = complex5.atan();
      double double5 = complex7.I.getArgument();
      Complex complex11 = complex10.asin();
      String string1 = complex9.toString();
      Complex complex12 = complex9.createComplex((-1.0), 68.82355);
      Complex complex13 = complex0.NaN.asin();
      Complex complex14 = complex11.conjugate();
      List<Complex> list1 = complex6.nthRoot(1);
      Complex complex15 = complex9.exp();
      Complex complex16 = complex12.sqrt1z();
      Complex complex17 = complex11.log();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = new Complex(0.7853981633974483, 0.0);
      Complex complex2 = complex1.INF.multiply(0.7853981633974483);
      Complex complex3 = complex2.ZERO.subtract(complex1);
      double double1 = complex3.ONE.getArgument();
      Complex complex4 = complex0.NaN.subtract(complex1);
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex4.I.acos();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex0.INF.tanh();
      Complex complex9 = complex4.I.atan();
      Complex complex10 = complex0.acos();
      Complex complex11 = complex8.ONE.add(complex4);
      Complex complex12 = complex11.I.multiply(0.0875862700108075);
      Complex complex13 = complex11.I.exp();
      Complex complex14 = complex13.ONE.multiply(complex1);
      Complex complex15 = complex10.pow(complex8);
      Complex complex16 = complex15.acos();
      Complex complex17 = complex15.acos();
      Complex complex18 = complex8.log();
      Complex complex19 = complex10.INF.sinh();
      Complex complex20 = complex18.I.log();
      Complex complex21 = complex10.sqrt();
      Complex complex22 = complex4.tanh();
      Complex complex23 = complex15.exp();
      Complex complex24 = complex5.subtract(complex0);
      double double2 = complex0.getReal();
      Complex complex25 = complex12.multiply(complex24);
      Complex complex26 = complex8.exp();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-2936.43288639), (-2936.43288639));
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.ONE.sqrt1z();
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.NaN.atan();
      Complex complex9 = complex8.cosh();
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex7.equals(object0);
      boolean boolean1 = complex0.isInfinite();
      List<Complex> list0 = complex5.ONE.nthRoot(1);
      Complex complex10 = complex5.INF.createComplex(0.0, (-1.0));
      Complex complex11 = complex1.atan();
      Complex complex12 = complex11.asin();
      int int0 = complex5.hashCode();
      Complex complex13 = complex4.divide(complex11);
      Complex complex14 = complex1.I.sinh();
      boolean boolean2 = complex10.isNaN();
      Complex complex15 = complex12.asin();
      Complex complex16 = complex6.subtract(complex5);
      Complex complex17 = complex8.atan();
      Complex complex18 = complex8.tanh();
      boolean boolean3 = complex3.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-360.542656742675), (-360.542656742675));
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.INF.sinh();
      double double0 = complex0.ONE.getArgument();
      Complex complex3 = complex0.multiply((-360.542656742675));
      Complex complex4 = complex0.createComplex((-360.542656742675), 417.657);
      Complex complex5 = complex3.tanh();
      double double1 = complex3.getArgument();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex3.ONE.atan();
      Complex complex8 = complex6.ZERO.divide(complex4);
      Complex complex9 = complex1.ZERO.atan();
      double double2 = complex4.abs();
      Complex complex10 = complex2.multiply(0.7853981633974483);
      Complex complex11 = complex4.ZERO.negate();
      Complex complex12 = complex11.INF.conjugate();
      Complex complex13 = Complex.ZERO;
      Complex complex14 = complex10.add(complex13);
      ComplexField complexField0 = complex2.getField();
      boolean boolean0 = complex0.isNaN();
      Complex complex15 = complex8.pow(complex2);
      Complex complex16 = complex10.conjugate();
      Complex complex17 = complex15.conjugate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.INF.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt();
      double double0 = complex0.NaN.abs();
      double double1 = complex1.getArgument();
      Complex complex2 = complex0.I.tan();
      String string0 = complex2.INF.toString();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex3.INF.createComplex(0.0, 0.0);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.pow(complex1);
      Complex complex7 = complex6.NaN.add(complex2);
      Complex complex8 = complex6.ONE.multiply(complex1);
      double double2 = complex3.ZERO.getArgument();
      Complex complex9 = complex0.ONE.subtract(complex2);
      Complex complex10 = complex1.ZERO.divide(complex8);
      Complex complex11 = complex5.exp();
      Complex complex12 = complex11.I.atan();
      Complex complex13 = complex12.sin();
      Complex complex14 = complex3.ZERO.exp();
      Complex complex15 = complex14.ZERO.divide(complex1);
      Complex complex16 = complex1.tanh();
      Complex complex17 = complex16.exp();
      Complex complex18 = complex16.ZERO.sqrt();
      Complex complex19 = complex3.add(complex16);
      Complex complex20 = complex2.tanh();
      boolean boolean0 = complex14.isNaN();
      Complex complex21 = complex0.tan();
      Complex complex22 = complex8.multiply(complex14);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt1z();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex1.multiply(0.09090909090909091);
      Complex complex3 = complex2.ZERO.add(complex1);
      double double0 = complex1.I.abs();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.pow(complex1);
      boolean boolean0 = complex2.isNaN();
      Complex complex6 = complex4.I.createComplex(0.0, (-1.0));
      boolean boolean1 = complex1.equals("");
      Complex complex7 = complex5.multiply(1.0);
      Complex complex8 = complex6.sqrt();
      Complex complex9 = complex5.createComplex(0.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-194.2174633), (-194.2174633));
      Complex complex1 = complex0.multiply(0.0);
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex0.cosh();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex4 = complex0.INF.cos();
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex6.I.exp();
      Complex complex8 = complex6.sinh();
      int int0 = complex8.INF.hashCode();
      Complex complex9 = complex7.ZERO.sqrt1z();
      Complex complex10 = complex0.NaN.cosh();
      double double0 = complex2.abs();
      Complex complex11 = complex2.exp();
      Complex complex12 = complex11.INF.sin();
      boolean boolean1 = complex7.isNaN();
      Complex complex13 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.INF.tan();
      Object object0 = complex0.INF.readResolve();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex0.ZERO.cosh();
      Complex complex7 = complex6.INF.asin();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = complex9.divide(complex5);
      ComplexField complexField0 = complex9.ZERO.getField();
      Complex complex11 = complex1.sin();
      Complex complex12 = complex10.I.subtract(complex9);
      Complex complex13 = complex0.subtract(complex3);
      int int0 = complex13.NaN.hashCode();
      double double0 = complex13.NaN.abs();
      String string0 = complex0.ONE.toString();
      Complex complex14 = complex2.conjugate();
      Complex complex15 = complex14.NaN.negate();
      Complex complex16 = complex14.INF.sinh();
      Complex complex17 = complex11.I.sqrt1z();
      Complex complex18 = complex10.tan();
      Complex complex19 = complex11.cosh();
      Complex complex20 = complex14.sin();
      double double1 = complex10.getArgument();
      Complex complex21 = complex14.asin();
      Complex complex22 = new Complex(125.71, Double.NaN);
      Complex complex23 = complex8.add(complex22);
      Complex complex24 = complex20.pow(complex3);
      Complex complex25 = complex15.acos();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-3664.734), (-5486.534797399439));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.NaN.cos();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex3.subtract(complex1);
      Complex complex7 = complex3.multiply(complex1);
      double double0 = complex7.I.getArgument();
      double double1 = complex0.getReal();
      Complex complex8 = complex1.ZERO.sqrt();
      double double2 = complex2.getImaginary();
      double double3 = complex2.abs();
      Complex complex9 = complex6.NaN.divide(complex2);
      double double4 = complex3.getImaginary();
      Complex complex10 = complex6.createComplex(2.4384203044354907E-8, 0.0);
      List<Complex> list0 = complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.ZERO.createComplex(4.0, 4.0);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex5.ZERO.negate();
      Complex complex8 = complex4.pow(complex5);
      String string0 = complex6.NaN.toString();
      Complex complex9 = complex6.I.multiply(complex3);
      int int0 = complex9.hashCode();
      boolean boolean0 = complex6.isInfinite();
      Complex complex10 = complex6.INF.subtract(complex3);
      Complex complex11 = complex10.ZERO.sinh();
      Complex complex12 = complex11.NaN.multiply(complex1);
      List<Complex> list0 = complex1.nthRoot(336);
      Complex complex13 = complex3.divide(complex2);
      double double0 = complex5.getReal();
      double double1 = complex2.NaN.getArgument();
      Complex complex14 = complex6.multiply(complex5);
      Complex complex15 = complex3.exp();
      Complex complex16 = complex0.INF.cosh();
      Complex complex17 = complex5.conjugate();
      Complex complex18 = complex1.multiply(Double.NaN);
      String string1 = complex3.toString();
      List<Complex> list1 = complex15.nthRoot(336);
      Complex complex19 = complex13.log();
      Object object0 = new Object();
      boolean boolean1 = complex0.equals(object0);
      Complex complex20 = complex4.sqrt();
      Complex complex21 = complex17.cos();
      Complex complex22 = complex2.tan();
      Complex complex23 = complex22.cos();
      Complex complex24 = complex18.acos();
      Object object1 = complex21.readResolve();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.divide(complex0);
      Object object0 = complex1.INF.readResolve();
      Complex complex3 = complex1.ZERO.pow(complex0);
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex4.ONE.subtract(complex3);
      Complex complex6 = complex0.ZERO.acos();
      Complex complex7 = complex6.INF.log();
      Complex complex8 = complex6.asin();
      Complex complex9 = complex0.pow(complex1);
      Complex complex10 = complex9.cosh();
      Complex complex11 = complex9.pow(complex0);
      Complex complex12 = complex11.ZERO.sqrt();
      Complex complex13 = complex3.cosh();
      Complex complex14 = complex13.I.tanh();
      String string0 = complex9.toString();
      Complex complex15 = complex8.sin();
      double double0 = complex0.abs();
      int int0 = complex5.hashCode();
      Complex complex16 = complex13.log();
      Complex complex17 = complex2.divide(complex6);
      Complex complex18 = complex2.createComplex(Double.POSITIVE_INFINITY, 6.123233995736766E-17);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.I.multiply(0.0);
      Complex complex4 = complex2.I.multiply((-0.16624882440418567));
      Complex complex5 = complex0.tan();
      double double0 = complex2.getReal();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex7.ZERO.tanh();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex9.ZERO.sinh();
      Object object0 = complex0.readResolve();
      Complex complex11 = complex7.divide(complex9);
      Complex complex12 = complex11.NaN.pow(complex7);
      int int0 = complex3.hashCode();
      Complex complex13 = complex6.createComplex((-680.8828497728), (-680.8828497728));
      Complex complex14 = complex5.subtract(complex2);
      ComplexField complexField0 = complex4.getField();
      int int1 = complex3.hashCode();
      Complex complex15 = complex7.createComplex(0.0, (-1644.5531847));
      double double1 = complex3.getReal();
      Complex complex16 = complex4.tan();
      Complex complex17 = complex11.cosh();
      Complex complex18 = complex17.ONE.createComplex((-1644.5531847), (-1644.5531847));
      Complex complex19 = complex15.conjugate();
      Complex complex20 = complex8.log();
      Complex complex21 = complex0.I.conjugate();
      Complex complex22 = complex1.ONE.cosh();
      Complex complex23 = complex2.ZERO.divide(complex1);
      Complex complex24 = complex11.divide(complex6);
      double double2 = complex16.getArgument();
      String string0 = complex14.toString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex0.I.conjugate();
      Complex complex5 = complex0.ZERO.negate();
      Complex complex6 = complex0.conjugate();
      String string0 = complex0.toString();
      ComplexField complexField0 = complex6.getField();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex1.I.negate();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex6.add(complex1);
      Object object0 = complex10.INF.readResolve();
      Complex complex11 = complex10.acos();
      Complex complex12 = complex0.log();
      Complex complex13 = complex6.multiply(complex5);
      double double0 = complex13.abs();
      Complex complex14 = complex9.conjugate();
      double double1 = complex14.getArgument();
      Complex complex15 = complex1.cos();
      String string1 = complex15.toString();
      double double2 = complex15.getImaginary();
      Complex complex16 = complex9.asin();
      Complex complex17 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 1;
      List<Complex> list0 = complex0.ZERO.nthRoot(1);
      Complex complex1 = complex0.ZERO.acos();
      try { 
        complex1.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex1.pow(complex0);
      double double0 = complex0.NaN.getArgument();
      Complex complex4 = complex0.NaN.sinh();
      Complex complex5 = complex2.pow(complex1);
      Complex complex6 = complex3.I.exp();
      Complex complex7 = complex1.NaN.createComplex((-9.564177143), Double.NaN);
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex3.multiply(complex9);
      int int0 = complex2.hashCode();
      Complex complex11 = complex1.subtract(complex0);
      Complex complex12 = complex11.INF.negate();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex11.multiply(complex13);
      Complex complex15 = complex9.multiply(Double.NaN);
      Complex complex16 = complex14.tanh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex1.INF.sinh();
      Complex complex5 = complex1.tan();
      double double0 = complex1.getImaginary();
      Complex complex6 = complex2.ZERO.asin();
      Complex complex7 = complex6.ONE.divide(complex0);
      Complex complex8 = complex7.INF.cos();
      Complex complex9 = complex2.cosh();
      String string0 = complex9.NaN.toString();
      double double1 = complex2.ONE.abs();
      List<Complex> list0 = complex9.ONE.nthRoot(1);
      Complex complex10 = complex4.cos();
      String string1 = complex3.toString();
      Complex complex11 = complex10.NaN.tanh();
      Complex complex12 = complex2.I.log();
      List<Complex> list1 = complex10.nthRoot(1);
      Complex complex13 = complex2.sqrt1z();
      Complex complex14 = complex13.I.log();
      Complex complex15 = complex6.NaN.subtract(complex7);
      Complex complex16 = complex3.multiply(complex5);
      Object object0 = complex13.readResolve();
      Complex complex17 = complex7.cosh();
      double double2 = complex9.getReal();
      Complex complex18 = complex16.sin();
      int int0 = complex1.hashCode();
      try { 
        complex14.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex1.ONE.getArgument();
      String string0 = complex1.I.toString();
      Complex complex2 = complex1.ZERO.tanh();
      String string1 = complex2.ONE.toString();
      Complex complex3 = complex2.I.log();
      int int0 = complex0.hashCode();
      Complex complex4 = complex1.ONE.tan();
      double double1 = complex4.I.abs();
      boolean boolean0 = complex0.equals(complex1);
      String string2 = complex2.ZERO.toString();
      Complex complex5 = complex1.multiply((-1141.747));
      double double2 = complex5.I.getArgument();
      Object object0 = complex3.readResolve();
      Complex complex6 = complex2.conjugate();
      boolean boolean1 = complex1.isNaN();
      Complex complex7 = complex1.sqrt();
      double double3 = complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex0.ZERO.acos();
      Complex complex4 = complex3.multiply((-1.0E-6));
      Object object0 = complex0.readResolve();
      Complex complex5 = complex1.subtract(complex0);
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex0.createComplex((-970.49470702788), (-970.49470702788));
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex9.acos();
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex8.asin();
      double double0 = complex8.getImaginary();
      double double1 = complex8.getImaginary();
      Complex complex13 = complex2.log();
      Complex complex14 = complex13.NaN.cosh();
      Complex complex15 = complex5.subtract(complex11);
      Complex complex16 = complex9.add(complex2);
      Complex complex17 = complex0.createComplex((-970.49470702788), (-970.49470702788));
      Complex complex18 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.multiply((-1897.045));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.I.createComplex(2.0, 2.0);
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex0.NaN.multiply(0.0);
      Complex complex7 = complex3.multiply(2.0);
      Complex complex8 = complex1.ONE.subtract(complex5);
      ComplexField complexField1 = complex7.ONE.getField();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex1.equals(complex7);
      Complex complex9 = complex6.asin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.divide(complex0);
      Object object0 = complex3.readResolve();
      Complex complex5 = complex0.tanh();
      double double0 = complex5.abs();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex5.cos();
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex9 = complex6.createComplex(Double.NaN, 1);
      double double1 = complex6.getReal();
      Complex complex10 = complex3.atan();
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.ZERO.multiply(1.0);
      double double1 = complex0.getReal();
      Complex complex4 = complex0.log();
      boolean boolean0 = complex4.isNaN();
      Complex complex5 = complex3.ONE.sqrt();
      Complex complex6 = complex5.ZERO.subtract(complex1);
      Complex complex7 = complex4.divide(complex0);
      double double2 = complex4.ZERO.abs();
      Complex complex8 = complex7.ZERO.log();
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex4.ONE.atan();
      Complex complex11 = complex10.I.log();
      ComplexField complexField0 = complex7.getField();
      ComplexField complexField1 = complex4.getField();
      Complex complex12 = complex7.multiply(0.0);
      Complex complex13 = complex3.tan();
      Complex complex14 = complex13.asin();
      double double3 = complex7.getArgument();
      Complex complex15 = complex13.atan();
      Complex complex16 = complex8.multiply(complex3);
      Complex complex17 = complex13.sinh();
      Complex complex18 = complex10.multiply(complex1);
      double double4 = complex15.getReal();
      int int0 = complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.asin();
      Object object0 = complex2.NaN.readResolve();
      Complex complex3 = complex1.ZERO.cos();
      double double0 = complex1.INF.getArgument();
      Complex complex4 = complex0.sqrt();
      String string0 = complex4.ONE.toString();
      Complex complex5 = complex1.ONE.sqrt1z();
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex0.add(complex6);
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex0.createComplex((-978.0), (-978.0));
      Complex complex10 = complex9.atan();
      List<Complex> list0 = complex10.INF.nthRoot(3517);
      Complex complex11 = complex9.I.cos();
      ComplexField complexField0 = complex11.INF.getField();
      int int0 = complex3.hashCode();
      Complex complex12 = complex1.multiply(complex7);
      Complex complex13 = complex10.log();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      ComplexField complexField0 = complex1.getField();
      Object object0 = complex0.NaN.readResolve();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.INF.cosh();
      Object object1 = complex0.readResolve();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.I.multiply(1.986821492305628E-8);
      Complex complex6 = complex5.divide(complex4);
      ComplexField complexField1 = complex5.ZERO.getField();
      Complex complex7 = complex4.ONE.divide(complex2);
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex8.subtract(complex5);
      Complex complex10 = complex0.ZERO.asin();
      Complex complex11 = complex4.atan();
      Complex complex12 = complex2.log();
      Complex complex13 = complex0.sqrt1z();
      Complex complex14 = complex11.conjugate();
      double double0 = complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.NaN.multiply(1086.145787514069);
      Complex complex3 = complex2.ZERO.pow(complex0);
      Complex complex4 = complex1.NaN.log();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = Complex.I;
      Complex complex6 = complex1.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = null;
      Complex complex3 = complex1.ONE.divide(complex0);
      Complex complex4 = complex3.I.tan();
      try { 
        complex0.INF.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-781.3));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.negate();
      double double0 = complex3.I.getArgument();
      Complex complex4 = complex3.ZERO.createComplex((-781.3), (-781.3));
      Complex complex5 = complex0.INF.cos();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex6 = complex3.multiply(290.6059889);
      Complex complex7 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      double double0 = complex1.I.abs();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.cos();
      double double1 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 2177.3592082116);
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(0.097, 0.097);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex2.INF.tanh();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.INF.tanh();
      Complex complex7 = complex6.exp();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex0.ZERO.pow(complex8);
      double double0 = complex5.NaN.abs();
      Complex complex10 = complex5.pow(complex2);
      Complex complex11 = complex10.NaN.acos();
      List<Complex> list0 = complex11.I.nthRoot(3255);
      boolean boolean0 = complex1.equals(complex10);
      List<Complex> list1 = complex5.nthRoot(272);
      int int0 = complex1.hashCode();
      Complex complex12 = complex0.cos();
      Complex complex13 = complex1.sin();
      ComplexField complexField0 = complex8.ONE.getField();
      Complex complex14 = complex12.asin();
      Complex complex15 = complex5.add(complex8);
      Complex complex16 = complex14.sqrt();
      Complex complex17 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.nthRoot(7);
      List<Complex> list1 = complex0.nthRoot(227);
      Complex complex1 = complex0.tanh();
      List<Complex> list2 = complex0.nthRoot(1);
      Complex complex2 = Complex.I;
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.ONE.subtract(complex2);
      Complex complex5 = complex3.NaN.cosh();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.atan();
      double double0 = complex1.I.abs();
      Complex complex2 = complex1.ONE.sin();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex2.I.cosh();
      Complex complex5 = complex2.tan();
      double double1 = complex5.getArgument();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex4.log();
      Complex complex9 = complex7.log();
      Complex complex10 = complex6.divide(complex8);
      Complex complex11 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.NaN.subtract(complex0);
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex6.acos();
      try { 
        complex0.nthRoot((-1228));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,228
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2474.264217), (-2474.264217));
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = complex1.ONE.pow(complex0);
      Complex complex5 = complex0.INF.subtract(complex1);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.ONE.createComplex(1.0, 1.0);
      Complex complex3 = new Complex(1.0, 1.0);
      Complex complex4 = complex0.ZERO.subtract(complex3);
      Complex complex5 = complex0.ONE.negate();
      Complex complex6 = complex0.I.multiply(complex4);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.INF.pow(complex7);
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex10.INF.conjugate();
      Complex complex12 = complex11.INF.exp();
      Complex complex13 = complex10.asin();
      List<Complex> list0 = complex13.INF.nthRoot(17);
      Complex complex14 = complex1.multiply(1.0);
      Complex complex15 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      String string0 = complex0.toString();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-1743.7477303), 140.715043);
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex1.NaN.pow(complex0);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.INF.sqrt();
      Complex complex5 = complex1.ONE.cosh();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex5.exp();
      Complex complex10 = complex4.INF.sqrt1z();
      int int0 = complex4.hashCode();
      Complex complex11 = complex4.sinh();
      double double0 = complex9.abs();
      double double1 = complex2.abs();
      Complex complex12 = complex11.cos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-951.29567726189), (-951.29567726189));
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.NaN.sqrt1z();
      boolean boolean0 = complex0.equals("non self-adjoint linear operator: |x' A y - y' A x| > {0} when x is {1} and y is {2}");
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.NaN.sin();
      Complex complex4 = complex0.INF.cos();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex4.ZERO.conjugate();
      Complex complex7 = complex5.I.createComplex(716.299997, 716.299997);
      Complex complex8 = complex7.ONE.conjugate();
      Complex complex9 = complex0.log();
      Complex complex10 = complex7.sinh();
      Complex complex11 = complex2.tanh();
      Complex complex12 = complex11.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex13 = complex11.ONE.negate();
      Complex complex14 = complex10.atan();
      Complex complex15 = complex1.subtract(complex6);
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.INF.multiply(0.0);
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex1.ZERO.conjugate();
      Complex complex6 = complex0.ONE.cos();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.acos();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex2.atan();
      int int0 = complex1.hashCode();
      double double0 = complex1.getReal();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.multiply(553.2857303472);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.ONE.divide(complex3);
      Complex complex5 = complex0.NaN.sinh();
      Complex complex6 = complex0.conjugate();
      double double0 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.multiply(complex1);
      String string0 = complex0.toString();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.NaN.multiply(0.04168701738764507);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.ZERO.multiply(complex0);
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.INF.divide(complex0);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.I.exp();
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.NaN.createComplex(1.7029898543501842E-8, (-227.0));
      Complex complex7 = complex5.INF.conjugate();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      double double0 = complex0.getReal();
      List<Complex> list0 = complex1.nthRoot(1799);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      String string0 = complex0.toString();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.multiply(complex1);
      List<Complex> list0 = complex2.ONE.nthRoot(1321);
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex3.ZERO.log();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex5.sin();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex2.cosh();
      boolean boolean0 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex1.ZERO.createComplex(1405.0, 0.0);
      double double0 = complex1.abs();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex4 = complex0.INF.sqrt();
      Complex complex5 = complex4.ZERO.pow(complex3);
      double double1 = complex0.ONE.abs();
      Complex complex6 = complex1.ONE.multiply(0.0);
      double double2 = complex6.ONE.abs();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex0.multiply(complex1);
      List<Complex> list0 = complex2.nthRoot(375);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex3.I.pow(complex2);
      Complex complex6 = complex5.NaN.multiply((double) 375);
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex3.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(1.0);
      Complex complex2 = complex0.cosh();
      double double0 = complex1.getArgument();
      Complex complex3 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.cosh();
      String string0 = complex0.toString();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.nthRoot((-3062));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,062
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.divide(complex1);
      double double0 = complex0.abs();
      Complex complex3 = complex2.NaN.negate();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      double double1 = complex2.getArgument();
      String string0 = complex0.ZERO.toString();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex4.INF.conjugate();
      boolean boolean1 = complex4.isInfinite();
      double double2 = complex2.abs();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex6.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      double double0 = complex1.I.getArgument();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ONE.multiply(complex0);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex0.exp();
      Object object0 = complex2.ONE.readResolve();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex3.ZERO.multiply(complex4);
      Complex complex7 = complex5.ONE.pow(complex4);
      Complex complex8 = complex3.log();
      Complex complex9 = complex4.negate();
      Complex complex10 = complex9.I.multiply((-891.754936834093));
      Complex complex11 = complex4.ZERO.atan();
      double double1 = complex8.getArgument();
      Complex complex12 = complex1.tan();
      Complex complex13 = complex8.asin();
      Complex complex14 = complex13.NaN.exp();
      Complex complex15 = complex5.sinh();
      Complex complex16 = complex15.NaN.sin();
      Complex complex17 = complex13.sinh();
      Complex complex18 = complex0.divide(complex3);
      double double2 = complex2.abs();
      ComplexField complexField0 = complex11.getField();
      Complex complex19 = complex4.acos();
      double double3 = complex19.I.abs();
      double double4 = complex8.getImaginary();
      String string0 = complex6.toString();
      Complex complex20 = Complex.ONE;
      Complex complex21 = complex19.add(complex20);
      Complex complex22 = complex21.divide(complex16);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      double double0 = complex0.NaN.getArgument();
      Complex complex3 = complex0.ONE.cos();
      Complex complex4 = complex3.NaN.add(complex0);
      Complex complex5 = complex0.ZERO.atan();
      Complex complex6 = new Complex(0.0, 0.0);
      Complex complex7 = complex6.NaN.log();
      boolean boolean0 = complex2.equals(complex6);
      double double1 = complex6.getArgument();
      Complex complex8 = complex3.multiply(complex6);
      Complex complex9 = complex8.NaN.atan();
      Complex complex10 = complex8.add(complex4);
      Complex complex11 = complex10.INF.cosh();
      int int0 = complex0.hashCode();
      Complex complex12 = complex9.atan();
      Complex complex13 = complex9.asin();
      boolean boolean1 = complex13.isNaN();
      Complex complex14 = complex2.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.createComplex(1710.5339782494, 0.0);
      Complex complex3 = complex1.asin();
      double double0 = complex0.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex1.cos();
      ComplexField complexField0 = complex2.INF.getField();
      String string0 = complex4.INF.toString();
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex5.tan();
      ComplexField complexField1 = complex9.I.getField();
      Complex complex10 = complex0.INF.createComplex(2223.6126, 0.0);
      List<Complex> list0 = complex7.I.nthRoot(2152);
      Complex complex11 = complex5.multiply(0.0);
      double double1 = complex1.ONE.abs();
      Complex complex12 = complex0.add(complex2);
      Complex complex13 = complex12.log();
      Complex complex14 = complex3.subtract(complex7);
      String string1 = complex0.toString();
      Complex complex15 = complex4.negate();
      Complex complex16 = complex8.subtract(complex14);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex0.pow(complex1);
      Object object0 = complex3.INF.readResolve();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex1.NaN.negate();
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex5.INF.negate();
      Complex complex8 = complex4.ZERO.sinh();
      Complex complex9 = complex7.ONE.sqrt1z();
      double double0 = complex5.INF.getArgument();
      Complex complex10 = complex1.pow(complex4);
      double double1 = complex4.ZERO.abs();
      Complex complex11 = Complex.I;
      Complex complex12 = complex8.subtract(complex11);
      Complex complex13 = complex7.divide(complex4);
      Complex complex14 = complex13.ONE.negate();
      double double2 = complex8.NaN.getArgument();
      Object object1 = complex8.readResolve();
      Complex complex15 = complex14.ONE.log();
      Object object2 = complex12.ONE.readResolve();
      Complex complex16 = complex14.INF.sqrt();
      Complex complex17 = complex1.conjugate();
      int int0 = complex12.hashCode();
      Complex complex18 = complex1.tanh();
      boolean boolean0 = complex7.isInfinite();
      Complex complex19 = complex13.NaN.negate();
      double double3 = complex5.getArgument();
      boolean boolean1 = complex7.isNaN();
      Complex complex20 = new Complex(2293.09602883889, 2293.09602883889);
      Complex complex21 = complex15.pow(complex20);
      Complex complex22 = complex19.add(complex20);
      Complex complex23 = complex6.multiply(0.3333333134651184);
      double double4 = complex13.abs();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex2.INF.pow(complex1);
      Complex complex4 = complex1.ONE.createComplex(0.0, 0.0);
      Complex complex5 = complex4.ZERO.divide(complex2);
      double double1 = complex4.abs();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex6 = complex5.NaN.acos();
      String string0 = complex1.INF.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex1.multiply(0.0);
      Complex complex8 = complex7.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex9 = complex5.log();
      double double2 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(2136.1967808, 67.327666095);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ONE.sin();
      int int0 = complex0.hashCode();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.ZERO.sinh();
      double double0 = complex0.getArgument();
      Complex complex5 = complex1.subtract(complex2);
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = complex5.NaN.sqrt();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex1.ONE.cosh();
      double double1 = complex2.NaN.getArgument();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex2.multiply(67.327666095);
      List<Complex> list0 = complex10.nthRoot(1);
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }
}
