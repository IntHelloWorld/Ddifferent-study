/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 12:18:41 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-79.748858057), Double.NaN);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.ONE.subtract(complex2);
      Complex complex4 = complex2.NaN.sinh();
      Complex complex5 = complex1.INF.log();
      ComplexField complexField0 = complex0.INF.getField();
      List<Complex> list0 = complex1.ZERO.nthRoot(120);
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex6.cos();
      Complex complex9 = complex2.I.negate();
      ComplexField complexField1 = complex9.ZERO.getField();
      Complex complex10 = complex8.atan();
      String string0 = complex10.NaN.toString();
      Complex complex11 = complex3.asin();
      Complex complex12 = complex3.add(complex1);
      Complex complex13 = complex0.createComplex((-3962.789281958062), 0.4860324551651173);
      Complex complex14 = complex13.sinh();
      Complex complex15 = complex8.acos();
      Complex complex16 = complex15.conjugate();
      Complex complex17 = complex6.cos();
      Complex complex18 = complex17.NaN.cosh();
      Complex complex19 = complex17.pow(complex4);
      Complex complex20 = complex11.sqrt1z();
      List<Complex> list1 = complex8.nthRoot(37);
      Complex complex21 = complex10.createComplex(1.5707963267948966, (-2117.4));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.NaN.getField();
      int int0 = 1073741757;
      // Undeclared exception!
      complex0.I.nthRoot(1073741757);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.ONE.subtract(complex1);
      double double0 = complex1.abs();
      Complex complex4 = complex0.NaN.tan();
      Complex complex5 = complex3.I.atan();
      Complex complex6 = complex4.INF.acos();
      ComplexField complexField0 = complex4.I.getField();
      Object object0 = complex6.readResolve();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex1.ZERO.cos();
      Complex complex9 = complex8.I.cosh();
      Complex complex10 = complex7.INF.multiply(complex0);
      Object object1 = complex1.readResolve();
      Complex complex11 = complex4.sinh();
      ComplexField complexField1 = complex4.getField();
      Complex complex12 = complex3.log();
      Complex complex13 = complex3.INF.acos();
      Complex complex14 = complex1.add(complex2);
      Complex complex15 = complex3.acos();
      Complex complex16 = complex6.createComplex((-1353.09671), Double.NaN);
      Complex complex17 = complex7.sin();
      Complex complex18 = complex14.divide(complex13);
      Complex complex19 = complex3.NaN.negate();
      Complex complex20 = complex18.ONE.log();
      Complex complex21 = complex18.I.pow(complex3);
      boolean boolean0 = complex18.isInfinite();
      Complex complex22 = complex8.log();
      Complex complex23 = complex11.add(complex17);
      Complex complex24 = complex11.createComplex((-1.0), 0.0);
      Complex complex25 = complex23.acos();
      Complex complex26 = complex8.exp();
      Complex complex27 = complex22.multiply(complex7);
      double double1 = complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-1249.64874398), 3222.19766645);
      Complex complex1 = complex0.createComplex((-1249.64874398), (-1249.64874398));
      ComplexField complexField0 = complex0.ZERO.getField();
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex1.NaN.tanh();
      double double1 = complex1.getArgument();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex2.I.subtract(complex3);
      Object object0 = new Object();
      boolean boolean0 = complex3.equals(object0);
      Complex complex6 = complex2.multiply(3222.19766645);
      Complex complex7 = complex3.subtract(complex4);
      Complex complex8 = complex3.INF.createComplex(Double.NaN, (-1249.64874398));
      Complex complex9 = complex8.ONE.multiply(complex5);
      Complex complex10 = complex6.log();
      Complex complex11 = complex10.INF.divide(complex6);
      Complex complex12 = complex6.divide(complex1);
      Complex complex13 = complex5.acos();
      List<Complex> list0 = complex7.nthRoot(1);
      double double2 = complex12.getImaginary();
      Object object1 = complex13.readResolve();
      Complex complex14 = complex13.add(complex1);
      Complex complex15 = complex0.cos();
      Complex complex16 = complex15.ZERO.exp();
      Complex complex17 = complex13.I.sqrt();
      boolean boolean1 = complex15.isInfinite();
      Complex complex18 = complex12.add(complex14);
      Object object2 = complex12.readResolve();
      Complex complex19 = complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.ONE.sinh();
      Complex complex6 = complex1.NaN.createComplex(2536.0, 1882.4643288571);
      int int0 = complex6.hashCode();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex4.ONE.exp();
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex9.asin();
      Complex complex11 = complex9.NaN.cosh();
      Complex complex12 = complex0.sqrt();
      Complex complex13 = complex9.createComplex(0.7853981633974483, 0.7853981633974483);
      Complex complex14 = complex13.INF.pow(complex4);
      Complex complex15 = complex12.asin();
      double double1 = complex15.NaN.getArgument();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex4.equals(object0);
      Complex complex16 = complex11.tanh();
      Complex complex17 = complex16.I.sqrt();
      Complex complex18 = complex2.pow(complex0);
      boolean boolean1 = complex6.isNaN();
      Complex complex19 = complex10.cos();
      Complex complex20 = complex9.log();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.I;
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply(0.14285714285714285);
      Complex complex2 = complex1.INF.sin();
      List<Complex> list0 = complex1.INF.nthRoot(434);
      Complex complex3 = complex0.NaN.createComplex(292.074603844, (-1362.5149516091333));
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex5.I.acos();
      int int0 = complex8.ONE.hashCode();
      Complex complex9 = complex7.NaN.exp();
      Object object0 = complex7.readResolve();
      Complex complex10 = complex6.multiply(complex7);
      Complex complex11 = complex3.INF.asin();
      Complex complex12 = complex4.NaN.tan();
      Complex complex13 = complex4.sqrt();
      String string0 = complex4.toString();
      int int1 = complex11.hashCode();
      Complex complex14 = complex6.tanh();
      ComplexField complexField0 = complex4.getField();
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.NaN.tanh();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.subtract(complex1);
      int int0 = complex2.NaN.hashCode();
      double double0 = complex0.abs();
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.ONE.add(complex3);
      Complex complex6 = complex0.I.add(complex5);
      Complex complex7 = complex3.ONE.add(complex4);
      double double1 = complex7.I.getArgument();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex8.ONE.sqrt1z();
      boolean boolean0 = complex0.isInfinite();
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex7.cos();
      Complex complex12 = complex7.tanh();
      int int1 = complex8.hashCode();
      Complex complex13 = complex12.atan();
      int int2 = complex2.hashCode();
      Complex complex14 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1111.0, 0.0);
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.INF.sinh();
      double double0 = complex4.NaN.getArgument();
      Complex complex5 = complex1.ONE.tan();
      Object object0 = complex5.NaN.readResolve();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.INF.createComplex((-635.0), 16.987109613);
      Complex complex4 = complex2.I.createComplex((-635.0), (-635.0));
      boolean boolean0 = complex0.equals("Continued fraction convergents diverged to +/- infinity for value {0}");
      double double1 = complex0.getImaginary();
      double double2 = complex0.getImaginary();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-0.16624879837036133), 0.0);
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.ZERO.subtract(complex2);
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex2.I.readResolve();
      Complex complex4 = complex3.log();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex0.NaN.asin();
      double double0 = complex7.NaN.getArgument();
      Object object1 = complex2.INF.readResolve();
      Complex complex9 = complex6.NaN.sqrt1z();
      double double1 = complex5.getImaginary();
      double double2 = complex7.getImaginary();
      boolean boolean0 = complex9.equals((Object) null);
      double double3 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.I.sin();
      Complex complex5 = complex0.INF.sqrt();
      Complex complex6 = complex0.NaN.sin();
      Complex complex7 = complex6.ZERO.cosh();
      Complex complex8 = complex6.acos();
      Complex complex9 = complex5.add(complex3);
      String string0 = complex0.ONE.toString();
      double double0 = complex0.abs();
      Complex complex10 = complex5.ONE.tan();
      Complex complex11 = complex10.ONE.atan();
      Complex complex12 = complex10.INF.log();
      Complex complex13 = complex0.cosh();
      Complex complex14 = complex4.log();
      Complex complex15 = complex5.NaN.atan();
      Complex complex16 = complex15.NaN.log();
      boolean boolean0 = complex5.isNaN();
      Complex complex17 = complex4.I.conjugate();
      double double1 = complex4.abs();
      Complex complex18 = complex14.ONE.atan();
      boolean boolean1 = complex5.isNaN();
      Complex complex19 = complex14.multiply(1.0);
      Complex complex20 = complex19.cos();
      String string1 = complex20.INF.toString();
      Complex complex21 = complex4.conjugate();
      double double2 = complex20.abs();
      Complex complex22 = complex1.tanh();
      Complex complex23 = complex15.tan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sin();
      double double0 = complex2.INF.abs();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.createComplex(Double.POSITIVE_INFINITY, (-413.4116758));
      Complex complex5 = complex4.ONE.add(complex0);
      Complex complex6 = complex2.sqrt();
      String string0 = complex6.ONE.toString();
      Complex complex7 = complex4.NaN.sqrt();
      String string1 = complex2.toString();
      ComplexField complexField0 = complex2.getField();
      Complex complex8 = complex1.sqrt1z();
      int int0 = complex8.hashCode();
      Complex complex9 = complex0.add(complex8);
      Complex complex10 = complex8.log();
      Object object0 = complex8.readResolve();
      Complex complex11 = complex0.exp();
      int int1 = complex9.hashCode();
      boolean boolean0 = complex8.isNaN();
      double double1 = complex8.getReal();
      Complex complex12 = complex10.NaN.acos();
      Complex complex13 = complex10.sqrt1z();
      double double2 = complex4.getImaginary();
      Complex complex14 = complex10.acos();
      Complex complex15 = complex8.atan();
      Complex complex16 = complex0.cos();
      Complex complex17 = complex15.multiply(Double.POSITIVE_INFINITY);
      Complex complex18 = complex1.cosh();
      Complex complex19 = complex16.add(complex13);
      Complex complex20 = complex16.divide(complex0);
      Complex complex21 = complex13.add(complex3);
      String string2 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.negate();
      boolean boolean1 = complex1.isInfinite();
      Complex complex2 = complex1.divide(complex0);
      String string0 = complex2.toString();
      double double0 = complex2.NaN.abs();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex2.I.multiply(Double.NaN);
      Complex complex5 = complex1.INF.negate();
      Object object0 = complex0.readResolve();
      boolean boolean2 = complex0.equals(object0);
      Object object1 = complex0.I.readResolve();
      int int0 = complex1.hashCode();
      boolean boolean3 = complex1.isInfinite();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex1.ZERO.tanh();
      int int1 = complex3.hashCode();
      try { 
        complex1.nthRoot((-1639));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,639
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.exp();
      List<Complex> list0 = complex0.ONE.nthRoot(1884);
      Complex complex2 = complex0.sqrt1z();
      boolean boolean0 = complex1.isNaN();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.INF.sqrt();
      String string0 = complex5.INF.toString();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex3.ONE.add(complex4);
      Complex complex8 = complex6.ONE.tanh();
      Complex complex9 = complex0.sqrt1z();
      Object object0 = complex9.NaN.readResolve();
      Complex complex10 = complex1.multiply(complex2);
      Complex complex11 = complex3.I.sinh();
      Complex complex12 = complex3.acos();
      Complex complex13 = complex10.I.atan();
      Complex complex14 = complex12.cos();
      Complex complex15 = complex10.sinh();
      Object object1 = complex12.readResolve();
      boolean boolean1 = complex11.equals(complex4);
      Complex complex16 = complex5.add(complex8);
      Object object2 = complex0.readResolve();
      Complex complex17 = complex16.log();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-3555.5171), (-3555.5171));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex5.I.createComplex((-3555.5171), 0.0);
      Complex complex7 = complex0.conjugate();
      int int0 = complex6.NaN.hashCode();
      double double0 = complex6.NaN.abs();
      Complex complex8 = complex6.conjugate();
      double double1 = complex0.abs();
      Complex complex9 = complex0.exp();
      int int1 = complex9.ONE.hashCode();
      double double2 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.createComplex(363.2034, 2.0);
      double double0 = complex0.abs();
      Complex complex2 = complex1.exp();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-3321.99), (-1343.6167575));
      Complex complex1 = new Complex((-1343.6167575), (-3157.94));
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex1.I.acos();
      Object object0 = complex0.readResolve();
      double double0 = complex1.getReal();
      Complex complex4 = complex0.NaN.sqrt1z();
      String string0 = complex0.toString();
      Complex complex5 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.INF.multiply(complex1);
      Complex complex6 = complex5.ONE.multiply((-1.0));
      Complex complex7 = complex0.divide(complex4);
      Complex complex8 = complex7.INF.createComplex((-0.2499999701976776), (-0.2499999701976776));
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex8.add(complex4);
      double double0 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.sinh();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex0.isInfinite();
      Complex complex2 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.toString();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.acos();
      ComplexField complexField0 = complex3.getField();
      Object object0 = complex3.I.readResolve();
      Object object1 = complex2.readResolve();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex1.ZERO.atan();
      Complex complex6 = complex0.acos();
      String string0 = complex3.toString();
      Complex complex7 = complex1.pow(complex0);
      Complex complex8 = complex2.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      double double0 = (-2010.8746255017927);
      double double1 = 376.9697318708;
      Object object0 = complex1.NaN.readResolve();
      try { 
        complex1.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      try { 
        complex1.nthRoot((-26));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -26
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex2.sinh();
      ComplexField complexField0 = complex5.I.getField();
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.NaN.sqrt1z();
      Complex complex7 = complex0.ZERO.asin();
      Object object0 = complex0.readResolve();
      Complex complex8 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 488.821680811);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex3.cosh();
      double double0 = complex5.abs();
      Object object0 = complex3.readResolve();
      Complex complex6 = complex3.cosh();
      double double1 = complex6.getImaginary();
      double double2 = complex4.getImaginary();
      boolean boolean0 = complex6.isInfinite();
      boolean boolean1 = complex4.isInfinite();
      boolean boolean2 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = (-981.33);
      Complex complex0 = new Complex((-981.33), (-767.414));
      int int0 = complex0.INF.hashCode();
      Object object0 = complex0.readResolve();
      double double1 = complex0.NaN.abs();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.I.negate();
      Object object0 = complex0.I.readResolve();
      Complex complex4 = complex0.NaN.sqrt();
      Complex complex5 = complex1.NaN.divide(complex3);
      Complex complex6 = complex4.I.pow(complex2);
      Complex complex7 = complex6.I.pow(complex3);
      Complex complex8 = complex7.ZERO.divide(complex4);
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex9 = complex1.NaN.tanh();
      Object object1 = complex0.readResolve();
      Complex complex10 = complex0.sin();
      Complex complex11 = complex10.ONE.cos();
      Complex complex12 = complex3.ONE.exp();
      Complex complex13 = complex10.INF.atan();
      Complex complex14 = complex3.sqrt();
      double double0 = complex4.abs();
      Complex complex15 = complex6.tan();
      Complex complex16 = complex15.I.tanh();
      Complex complex17 = complex0.asin();
      try { 
        complex17.INF.nthRoot((-1723));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,723
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      Complex complex1 = complex0.NaN.atan();
      double double0 = complex0.INF.getArgument();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex2.I.tanh();
      double double1 = complex0.NaN.abs();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex6.I.exp();
      Complex complex8 = complex6.subtract(complex5);
      Complex complex9 = complex0.acos();
      Complex complex10 = complex2.tan();
      double double2 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      double double0 = complex1.I.abs();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex2.INF.cosh();
      int int0 = complex2.NaN.hashCode();
      Complex complex8 = complex6.ONE.conjugate();
      Complex complex9 = complex4.divide(complex6);
      String string0 = complex9.ONE.toString();
      double double1 = complex1.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex10 = complex1.atan();
      double double2 = complex10.INF.getArgument();
      Complex complex11 = complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(269.0, 269.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-409.94367), (-409.94367));
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.pow(complex1);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex3 = complex1.ZERO.multiply(complex0);
      Complex complex4 = complex0.subtract(complex1);
      String string0 = complex3.toString();
      Complex complex5 = complex3.multiply(0.7937005259840998);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-1312.0), (-1303.430049267));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex1.ZERO.add(complex0);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex1.ZERO.multiply((-1303.430049267));
      Complex complex7 = complex5.INF.pow(complex2);
      Complex complex8 = complex1.acos();
      Complex complex9 = complex2.log();
      Complex complex10 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.createComplex((-3691.12662139), (-3691.12662139));
      double double0 = complex1.I.abs();
      Complex complex2 = complex0.conjugate();
      double double1 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex2.exp();
      Complex complex5 = complex3.log();
      double double0 = complex0.getReal();
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex3.getField();
      Complex complex6 = complex5.acos();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.9841269659586505E-4));
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.exp();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.ONE.multiply(complex0);
      Complex complex4 = complex1.ONE.acos();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex2.negate();
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex4.ONE.divide(complex1);
      double double0 = complex2.getArgument();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(2105.7, 465.144143731);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.I.sqrt();
      Object object0 = complex1.INF.readResolve();
      String string0 = complex0.toString();
      double double0 = complex0.abs();
      ComplexField complexField1 = complex0.getField();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.exp();
      List<Complex> list0 = complex2.NaN.nthRoot(1);
      Complex complex4 = complex0.exp();
      boolean boolean0 = complex4.equals(complex0);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0875862700108075, 0.0875862700108075);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex0.ZERO.divide(complex2);
      Complex complex5 = complex4.ZERO.divide(complex1);
      Complex complex6 = complex3.ONE.add(complex1);
      Complex complex7 = complex3.sin();
      Complex complex8 = complex0.multiply(complex2);
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex2.multiply((-1346.918527732));
      Complex complex5 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex3.ZERO.cos();
      double double0 = complex1.getArgument();
      ComplexField complexField0 = complex2.getField();
      Complex complex5 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex1.NaN.pow(complex3);
      Complex complex5 = complex0.multiply(2800.265082878132);
      Complex complex6 = complex0.add(complex2);
      Complex complex7 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.INF;
      int int0 = complex0.hashCode();
      String string0 = complex1.ONE.toString();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex2.cos();
      double double0 = complex4.ONE.getArgument();
      double double1 = complex3.ZERO.abs();
      double double2 = complex3.INF.abs();
      Complex complex5 = complex2.log();
      boolean boolean1 = complex5.equals(complex3);
      Object object0 = new Object();
      boolean boolean2 = complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(708.315, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex3.ZERO.log();
      double double1 = complex3.INF.getArgument();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex0.INF.divide(complex1);
      Object object0 = complex7.I.readResolve();
      Complex complex8 = complex7.add(complex1);
      Complex complex9 = complex5.ZERO.sinh();
      Object object1 = complex0.readResolve();
      String string0 = complex2.ZERO.toString();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex7.ONE.tan();
      Complex complex12 = complex11.divide(complex4);
      Complex complex13 = complex12.ZERO.pow(complex0);
      Complex complex14 = complex1.asin();
      Complex complex15 = complex2.acos();
      Complex complex16 = complex10.INF.negate();
      double double2 = complex5.abs();
      int int0 = complex2.hashCode();
      Complex complex17 = complex10.multiply(708.315);
      try { 
        complex8.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(1236.6);
      Object object0 = complex1.readResolve();
      try { 
        complex0.ZERO.nthRoot((-3032));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,032
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      int int0 = complex1.hashCode();
      boolean boolean0 = complex0.equals(complex1);
      String string0 = complex0.toString();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.ONE.sqrt1z();
      double double0 = complex1.getArgument();
      Complex complex5 = complex1.sqrt();
      double double1 = complex0.getReal();
      Complex complex6 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1228.4));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex0.atan();
      ComplexField complexField0 = complex4.I.getField();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex0.INF.atan();
      Complex complex7 = complex4.ONE.asin();
      Complex complex8 = complex4.createComplex(7.0, 0.0);
      Complex complex9 = complex4.asin();
      ComplexField complexField1 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.I.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex1.I.sqrt();
      String string1 = complex1.I.toString();
      String string2 = complex0.toString();
      Complex complex4 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex1.NaN.sqrt1z();
      double double0 = complex0.getReal();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex5.multiply(Double.NaN);
      Complex complex8 = complex6.asin();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.ZERO.log();
      String string0 = complex0.NaN.toString();
      List<Complex> list0 = complex2.NaN.nthRoot(3989);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.conjugate();
      try { 
        complex3.nthRoot((-669));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -669
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.I.sqrt1z();
      double double1 = complex0.getReal();
      Complex complex2 = complex0.I.sqrt();
      int int0 = complex2.I.hashCode();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex4.log();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex0.divide(complex6);
      Complex complex8 = complex7.I.multiply((-4739.521773296));
      double double2 = complex0.NaN.getArgument();
      Complex complex9 = complex6.divide(complex0);
      Complex complex10 = complex6.atan();
      Complex complex11 = complex1.cosh();
      Complex complex12 = complex11.sinh();
      Complex complex13 = complex9.createComplex(Double.NaN, 6682.518);
      Complex complex14 = complex8.sin();
      boolean boolean0 = complex1.isInfinite();
      Complex complex15 = complex4.sinh();
      Complex complex16 = complex15.INF.sin();
      String string0 = complex13.toString();
      Complex complex17 = complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = complex3.ONE.negate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.ZERO.conjugate();
      Complex complex6 = complex4.ONE.add(complex0);
      Complex complex7 = complex1.createComplex(0.3333333333333333, 0.3333333333333333);
      Complex complex8 = complex4.cos();
      boolean boolean1 = complex2.equals(complex7);
      Complex complex9 = complex1.pow(complex2);
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex0.tanh();
      Object object0 = complex0.readResolve();
      Complex complex12 = complex4.tan();
      Complex complex13 = complex3.atan();
      boolean boolean2 = complex1.isInfinite();
      double double0 = complex2.abs();
      Complex complex14 = complex1.add(complex10);
      double double1 = complex5.getArgument();
      double double2 = complex14.getArgument();
      int int0 = complex14.hashCode();
      double double3 = complex6.getReal();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      Complex complex1 = complex0.NaN.createComplex(0.0, 243.75351073978);
      Complex complex2 = complex1.ONE.atan();
      ComplexField complexField0 = complex1.ZERO.getField();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.ZERO.sin();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex1.getImaginary();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex2.createComplex(0.9999997615814209, 1344.3208438398);
      Complex complex7 = complex6.asin();
      double double1 = complex6.I.getArgument();
      Object object1 = complex5.readResolve();
      boolean boolean1 = complex4.isNaN();
      double double2 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.subtract(complex0);
      Object object0 = complex1.I.readResolve();
      Complex complex3 = complex1.multiply(130.468);
      Complex complex4 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.INF.readResolve();
      String string0 = complex0.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex1.ZERO.cos();
      List<Complex> list0 = complex0.INF.nthRoot(3659);
      Complex complex4 = complex0.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.divide(complex1);
      double double0 = complex3.getArgument();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.I.negate();
      double double1 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex3.tan();
      Complex complex6 = complex4.ONE.cosh();
      double double0 = complex6.ZERO.getArgument();
      Complex complex7 = Complex.I;
      Complex complex8 = complex6.ZERO.add(complex7);
      double double1 = complex0.INF.abs();
      List<Complex> list0 = complex5.I.nthRoot(829);
      Complex complex9 = complex5.NaN.subtract(complex4);
      Complex complex10 = complex0.asin();
      Object object0 = complex10.readResolve();
      Complex complex11 = complex9.sqrt1z();
      double double2 = complex10.getImaginary();
      Complex complex12 = complex0.sinh();
      Complex complex13 = complex12.NaN.asin();
      Complex complex14 = complex4.conjugate();
      Complex complex15 = complex13.sqrt1z();
      Complex complex16 = complex13.acos();
      double double3 = complex13.ZERO.abs();
      Complex complex17 = complex4.atan();
      Complex complex18 = complex17.ZERO.cos();
      Complex complex19 = complex11.atan();
      ComplexField complexField0 = complex19.getField();
      Complex complex20 = complex17.sqrt1z();
      boolean boolean0 = complex0.equals(complex4);
      Complex complex21 = complex5.acos();
      Complex complex22 = complex18.negate();
      Complex complex23 = complex4.asin();
  }
}
