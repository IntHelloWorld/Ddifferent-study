/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 12:18:41 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-774.671), 0.0);
      Complex complex1 = complex0.ZERO.pow(complex0);
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex0.ZERO.negate();
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = new Complex((-4637.6662558352), (-4637.6662558352));
      Complex complex6 = complex0.ONE.sin();
      Complex complex7 = complex3.ONE.subtract(complex5);
      Complex complex8 = complex2.INF.multiply(complex0);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex9 = complex0.cos();
      double double0 = complex2.getArgument();
      List<Complex> list1 = complex1.ZERO.nthRoot(1);
      Complex complex10 = complex7.log();
      Complex complex11 = complex10.INF.tanh();
      Complex complex12 = complex11.I.asin();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(836.07204384908, (-1566.9188139));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex2.multiply((-1566.9188139));
      Complex complex4 = complex1.ZERO.conjugate();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex5 = complex1.ZERO.subtract(complex2);
      Complex complex6 = complex0.INF.createComplex((-2552.664240953), 2376.1405);
      Complex complex7 = complex6.INF.tan();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex9.ONE.atan();
      Complex complex11 = Complex.I;
      Complex complex12 = complex6.pow(complex11);
      List<Complex> list0 = complex12.INF.nthRoot(128);
      Complex complex13 = complex1.cosh();
      Complex complex14 = complex5.createComplex(3756752.393758, (-562.2293930108426));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-2358.59592385091), (-571.9731501));
      ComplexField complexField0 = complex0.INF.getField();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.INF.sqrt1z();
      ComplexField complexField1 = complex0.getField();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex8.log();
      double double0 = complex8.INF.getArgument();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex10.INF.atan();
      int int0 = complex10.hashCode();
      Complex complex12 = complex3.I.tan();
      boolean boolean0 = complex7.equals("");
      Complex complex13 = complex1.multiply(complex3);
      List<Complex> list0 = complex13.ZERO.nthRoot(1);
      Complex complex14 = complex12.sinh();
      double double1 = complex14.NaN.abs();
      Complex complex15 = complex12.tan();
      Complex complex16 = complex11.I.conjugate();
      Complex complex17 = Complex.I;
      Complex complex18 = complex15.ZERO.subtract(complex17);
      Complex complex19 = complex14.cos();
      Complex complex20 = complex19.ONE.sinh();
      Complex complex21 = complex19.NaN.tan();
      Complex complex22 = complex9.sqrt();
      Complex complex23 = complex6.tanh();
      Complex complex24 = complex1.multiply(complex4);
      double double2 = complex13.abs();
      Complex complex25 = complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.asin();
      int int0 = complex5.ZERO.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.NaN.createComplex(0.0, 0.0);
      Complex complex8 = complex2.INF.negate();
      Complex complex9 = complex7.INF.subtract(complex1);
      Complex complex10 = complex9.ONE.cos();
      double double0 = complex1.getReal();
      Object object0 = complex2.I.readResolve();
      Complex complex11 = complex2.createComplex(0.0, 3566.951757);
      int int1 = complex11.ONE.hashCode();
      Complex complex12 = complex11.atan();
      try { 
        complex6.nthRoot((-51));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -51
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.I.pow(complex0);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.NaN.cosh();
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.cos();
      Complex complex7 = complex4.ZERO.add(complex5);
      Complex complex8 = complex2.sqrt();
      Complex complex9 = complex3.I.subtract(complex8);
      int int0 = complex0.hashCode();
      Complex complex10 = complex3.ONE.createComplex(0.0, (-1398.46080028562));
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex3.exp();
      Complex complex13 = complex11.INF.sinh();
      Complex complex14 = complex0.ONE.divide(complex1);
      Complex complex15 = complex3.createComplex(3498.087868379, 3498.087868379);
      Complex complex16 = complex8.divide(complex11);
      double double0 = complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.acos();
      double double0 = complex0.getImaginary();
      double double1 = complex1.getReal();
      Complex complex4 = complex1.ZERO.cosh();
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = complex2.tan();
      Complex complex8 = complex3.pow(complex1);
      double double2 = complex8.INF.getArgument();
      Complex complex9 = complex2.divide(complex7);
      Complex complex10 = complex9.exp();
      Complex complex11 = complex10.acos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = new Complex((-1.0), (-2722.9256127238));
      String string0 = complex2.ZERO.toString();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.NaN.sqrt();
      Object object0 = complex3.ONE.readResolve();
      int int0 = complex3.hashCode();
      Complex complex5 = complex0.sqrt1z();
      double double0 = complex3.getReal();
      ComplexField complexField0 = complex0.getField();
      List<Complex> list0 = complex0.nthRoot(202);
      Complex complex6 = complex1.log();
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex0.cosh();
      double double1 = complex7.abs();
      Complex complex9 = complex1.divide(complex3);
      Object object1 = new Object();
      boolean boolean0 = complex3.equals(object1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.atan();
      Object object0 = new Object();
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex3.NaN.sqrt();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex6.ONE.divide(complex7);
      Complex complex9 = complex6.ONE.negate();
      Complex complex10 = complex2.ZERO.add(complex5);
      Complex complex11 = complex3.ONE.exp();
      boolean boolean0 = complex0.equals(object0);
      Complex complex12 = complex4.NaN.createComplex(0.0, 2584.78687462386);
      Complex complex13 = complex1.createComplex(Double.NaN, (-2649.0));
      double double0 = complex11.getArgument();
      boolean boolean1 = complex2.equals(complex4);
      Complex complex14 = complex1.ONE.sqrt();
      String string0 = complex4.toString();
      ComplexField complexField0 = complex6.getField();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex2.NaN.cos();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex4.NaN.cos();
      double double0 = complex0.getImaginary();
      double double1 = complex5.getArgument();
      ComplexField complexField1 = complex2.getField();
      boolean boolean0 = complex5.isNaN();
      int int0 = complex1.INF.hashCode();
      Complex complex8 = complex1.exp();
      ComplexField complexField2 = complex8.ONE.getField();
      double double2 = complex4.getArgument();
      double double3 = complex2.abs();
      Complex complex9 = complex0.divide(complex8);
      String string0 = complex9.toString();
      Complex complex10 = complex7.sinh();
      double double4 = complex4.getArgument();
      Complex complex11 = complex1.ONE.negate();
      Complex complex12 = complex10.multiply(1.0);
      Complex complex13 = complex4.tanh();
      Complex complex14 = complex2.tanh();
      Complex complex15 = complex11.log();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.NaN.subtract(complex1);
      Complex complex5 = complex2.ZERO.atan();
      Complex complex6 = complex2.multiply(complex0);
      Complex complex7 = complex6.ZERO.sqrt1z();
      Complex complex8 = complex0.multiply(4186.54);
      int int0 = complex1.I.hashCode();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex2.acos();
      ComplexField complexField0 = complex10.ZERO.getField();
      Complex complex11 = complex2.cos();
      Complex complex12 = complex9.sin();
      Complex complex13 = complex3.ONE.multiply(1487.436);
      Complex complex14 = complex2.NaN.createComplex(4186.54, 2878.035);
      Complex complex15 = complex14.I.negate();
      Complex complex16 = complex11.INF.tanh();
      Complex complex17 = complex16.exp();
      Complex complex18 = complex1.INF.sqrt1z();
      Complex complex19 = complex16.INF.sin();
      try { 
        complex19.INF.nthRoot((-935));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -935
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.atan();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex0.INF.cosh();
      double double0 = complex0.getReal();
      boolean boolean0 = complex1.isInfinite();
      Complex complex5 = complex0.ONE.multiply(complex4);
      int int1 = complex5.ONE.hashCode();
      Complex complex6 = complex4.multiply(complex1);
      Complex complex7 = complex1.ONE.sqrt();
      double double1 = complex0.abs();
      Complex complex8 = complex4.I.atan();
      List<Complex> list0 = complex6.nthRoot(1472);
      Complex complex9 = complex4.createComplex(308.022567336, Double.POSITIVE_INFINITY);
      Complex complex10 = complex4.conjugate();
      Complex complex11 = complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(10.0);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.ONE.atan();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex2.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(643.93977, (-7.800414592973399E-9));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.multiply(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.ZERO.cosh();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex3.divide(complex0);
      Complex complex8 = complex5.ONE.asin();
      Complex complex9 = complex7.I.asin();
      Complex complex10 = complex9.ZERO.conjugate();
      Complex complex11 = complex10.tan();
      double double0 = complex11.INF.abs();
      Complex complex12 = complex1.ZERO.pow(complex7);
      double double1 = complex1.I.abs();
      boolean boolean1 = complex0.equals(complex7);
      Complex complex13 = complex7.pow(complex4);
      double double2 = complex6.getArgument();
      ComplexField complexField0 = complex3.getField();
      Complex complex14 = complex12.pow(complex11);
      List<Complex> list0 = complex9.nthRoot(1925);
      double double3 = complex2.getReal();
      int int0 = complex12.hashCode();
      Complex complex15 = complex9.tanh();
      Complex complex16 = complex3.cos();
      ComplexField complexField1 = complex10.getField();
      Complex complex17 = complex13.tanh();
      boolean boolean2 = complex16.isNaN();
      Complex complex18 = complex17.createComplex((-254.54099599997), (-7.800414592973399E-9));
      Complex complex19 = complex0.sqrt();
      try { 
        complex14.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.ZERO.sqrt1z();
      Complex complex4 = complex2.I.pow(complex1);
      Complex complex5 = complex1.ZERO.exp();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex4.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.041666666666621166, 2188.74780146);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.NaN.subtract(complex1);
      String string0 = complex1.INF.toString();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex2.INF.sqrt();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.INF.negate();
      double double0 = complex0.getArgument();
      Complex complex9 = complex4.multiply(complex2);
      boolean boolean0 = complex4.isNaN();
      Complex complex10 = complex1.log();
      Complex complex11 = complex7.exp();
      Complex complex12 = complex8.add(complex10);
      boolean boolean1 = complex7.isInfinite();
      Complex complex13 = complex2.sqrt1z();
      Complex complex14 = complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.ZERO.subtract(complex0);
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = complex4.NaN.conjugate();
      Complex complex7 = complex0.add(complex0);
      Complex complex8 = complex7.tan();
      Complex complex9 = complex7.tan();
      Object object0 = complex7.readResolve();
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex10.NaN.createComplex(8.652909751762209, 1649.6703701204838);
      Complex complex12 = complex10.conjugate();
      Complex complex13 = complex10.sin();
      Complex complex14 = complex1.atan();
      Complex complex15 = complex12.createComplex(8.652909751762209, 1649.6703701204838);
      double double0 = complex15.getImaginary();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.createComplex((-446.71149), (-446.71149));
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.multiply((-446.71149));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-3859.365241), (-3859.365241));
      Object object0 = complex1.ZERO.readResolve();
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.ZERO.multiply(complex2);
      int int0 = complex2.INF.hashCode();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex1.NaN.multiply(0.0);
      Complex complex8 = complex6.ONE.add(complex2);
      Object object1 = complex8.I.readResolve();
      Complex complex9 = complex6.cosh();
      String string0 = complex9.I.toString();
      Complex complex10 = complex9.add(complex8);
      Complex complex11 = complex10.NaN.log();
      Complex complex12 = complex11.ZERO.createComplex(Double.POSITIVE_INFINITY, (-647.23));
      double double1 = complex12.ZERO.abs();
      int int1 = complex11.ONE.hashCode();
      Complex complex13 = complex9.INF.sqrt();
      double double2 = complex10.ONE.abs();
      double double3 = complex0.getImaginary();
      Complex complex14 = complex6.NaN.subtract(complex5);
      Complex complex15 = complex2.divide(complex0);
      Complex complex16 = complex0.sqrt1z();
      ComplexField complexField0 = complex9.getField();
      Complex complex17 = complex1.multiply(complex2);
      int int2 = complex9.hashCode();
      Complex complex18 = complex8.subtract(complex17);
      Complex complex19 = complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-1439.992), 487.7316044);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Object object0 = complex0.ONE.readResolve();
      String string0 = complex0.NaN.toString();
      double double0 = complex0.NaN.abs();
      Complex complex4 = complex0.sqrt();
      double double1 = complex4.getArgument();
      Complex complex5 = complex4.exp();
      int int0 = complex3.I.hashCode();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = complex6.I.createComplex((-1439.992), 1.25);
      Complex complex9 = complex3.sin();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex10 = complex6.sin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2119.23279640876));
      Complex complex1 = new Complex(0.0, 0.0);
      double double0 = complex1.I.abs();
      Complex complex2 = complex1.INF.log();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex2.INF.tan();
      List<Complex> list0 = complex0.nthRoot(3441);
      Complex complex5 = complex3.I.tan();
      double double0 = complex0.abs();
      double double1 = complex0.getImaginary();
      Complex complex6 = complex0.sqrt1z();
      double double2 = complex4.getReal();
      Complex complex7 = complex3.subtract(complex1);
      Complex complex8 = complex7.ONE.sin();
      Complex complex9 = complex8.add(complex3);
      double double3 = complex5.getReal();
      Complex complex10 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(563.85633, (-591.152534817));
      int int0 = complex0.NaN.hashCode();
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex0.ONE.negate();
      try { 
        complex1.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.createComplex((-1727.0), 0.0);
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex1.NaN.sin();
      Complex complex4 = complex1.log();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.NaN.tanh();
      Complex complex7 = complex3.exp();
      Complex complex8 = complex4.pow(complex0);
      Complex complex9 = complex8.NaN.exp();
      Complex complex10 = complex9.ONE.pow(complex4);
      Complex complex11 = complex8.pow(complex0);
      boolean boolean0 = complex4.equals(complex2);
      boolean boolean1 = complex0.isInfinite();
      ComplexField complexField0 = complex1.getField();
      Object object0 = complex7.readResolve();
      Complex complex12 = complex2.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-774.671), 0.0);
      Complex complex1 = new Complex(0.0, (-4637.6662558352));
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex1.ZERO.negate();
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = new Complex((-4637.6662558352), (-2664.7));
      Complex complex7 = complex0.ONE.sin();
      Complex complex8 = complex4.ONE.subtract(complex6);
      Complex complex9 = complex3.INF.multiply(complex1);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex10 = complex1.cos();
      double double0 = complex3.getArgument();
      List<Complex> list1 = complex2.ZERO.nthRoot(1);
      Complex complex11 = complex8.log();
      Complex complex12 = complex11.INF.tanh();
      Complex complex13 = complex12.I.asin();
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex2.exp();
      String string0 = complex3.toString();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.INF.acos();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex3.asin();
      Complex complex11 = Complex.I;
      boolean boolean0 = complex9.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-4168.54603239074), 2194.560138895843);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.divide(complex1);
      int int0 = complex0.INF.hashCode();
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.sin();
      Object object0 = complex4.readResolve();
      Complex complex7 = complex1.sin();
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.exp();
      String string0 = complex2.INF.toString();
      Object object0 = complex1.readResolve();
      Complex complex3 = complex0.NaN.multiply(complex1);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex3.I.multiply(complex1);
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = complex5.I.divide(complex2);
      try { 
        complex6.ZERO.nthRoot((-99));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -99
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex1.ZERO.tan();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = (-910.549);
      Complex complex1 = new Complex(0.0, (-910.549));
      Complex complex2 = null;
      try { 
        complex1.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(Double.NaN, 0.0);
      Complex complex2 = complex1.subtract(complex0);
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.multiply(651.523866899);
      Complex complex4 = complex3.I.subtract(complex1);
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex3.NaN.acos();
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex7.INF.atan();
      Complex complex9 = complex2.multiply(651.523866899);
      double double1 = complex9.abs();
      Complex complex10 = complex9.cos();
      Complex complex11 = complex3.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex0.log();
      Complex complex6 = complex0.sqrt1z();
      List<Complex> list0 = complex0.NaN.nthRoot(227);
      Complex complex7 = complex6.INF.conjugate();
      double double0 = complex0.abs();
      Complex complex8 = complex1.sqrt1z();
      double double1 = complex8.ZERO.abs();
      Complex complex9 = complex6.asin();
      Complex complex10 = complex0.cos();
      Complex complex11 = complex1.atan();
      Complex complex12 = complex9.sinh();
      Complex complex13 = complex12.ZERO.multiply(complex9);
      Complex complex14 = complex5.multiply(complex12);
      Complex complex15 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-3399.726), (-3399.726));
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.ZERO.pow(complex5);
      Complex complex7 = complex6.ONE.sinh();
      Complex complex8 = complex4.ONE.conjugate();
      Object object0 = complex1.readResolve();
      Complex complex9 = complex4.cos();
      Complex complex10 = complex4.add(complex5);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      String string0 = complex1.I.toString();
      List<Complex> list0 = complex1.nthRoot(483);
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex4.log();
      Complex complex6 = complex0.sinh();
      double double0 = complex6.getArgument();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex7.NaN.multiply(complex1);
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex8.asin();
      Complex complex11 = complex10.ONE.cosh();
      int int1 = complex11.ONE.hashCode();
      Complex complex12 = complex1.asin();
      Complex complex13 = complex6.pow(complex10);
      Complex complex14 = complex11.sqrt1z();
      Complex complex15 = complex11.log();
      Complex complex16 = complex6.cosh();
      ComplexField complexField0 = complex9.getField();
      Complex complex17 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(1.0, (-2597.267042));
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex5.add(complex1);
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex5.exp();
      try { 
        complex9.INF.nthRoot((-1466));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,466
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.ONE.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sinh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1376.2841), 0.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.log();
      double double0 = complex2.getImaginary();
      Complex complex3 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.abs();
      double double1 = complex0.getArgument();
      Complex complex2 = complex0.NaN.log();
      boolean boolean1 = complex1.isNaN();
      Complex complex3 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      double double0 = complex1.ZERO.getArgument();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex0.exp();
      List<Complex> list0 = complex4.I.nthRoot(574);
      Object object0 = complex4.I.readResolve();
      Complex complex5 = complex2.NaN.pow(complex0);
      Complex complex6 = complex1.tan();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.I.acos();
      Complex complex9 = complex8.ZERO.tan();
      Complex complex10 = complex7.I.createComplex(0.0, 558.1);
      Complex complex11 = complex10.INF.asin();
      Complex complex12 = complex6.sinh();
      Complex complex13 = complex12.INF.divide(complex0);
      Complex complex14 = complex2.tan();
      Complex complex15 = complex14.ZERO.sqrt1z();
      Complex complex16 = complex15.ONE.sqrt1z();
      Complex complex17 = complex13.I.exp();
      Complex complex18 = complex14.NaN.atan();
      Complex complex19 = complex13.log();
      try { 
        complex19.nthRoot((-1661));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,661
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      double double0 = complex0.INF.abs();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.ONE.cos();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.I.tan();
      Complex complex7 = complex1.acos();
      String string0 = complex3.toString();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex3.add(complex8);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.sqrt();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex0.NaN.sinh();
      Complex complex5 = complex3.ONE.cosh();
      Complex complex6 = complex0.I.multiply(complex1);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex6.ZERO.divide(complex1);
      Complex complex10 = complex8.NaN.conjugate();
      Complex complex11 = complex10.I.atan();
      List<Complex> list0 = complex7.nthRoot(1);
      String string0 = complex11.toString();
      Complex complex12 = complex1.negate();
      Complex complex13 = complex6.multiply((-5260.910301965356));
      Complex complex14 = complex13.INF.createComplex(1, 1);
      Complex complex15 = complex9.acos();
      double double0 = complex12.abs();
      Complex complex16 = complex2.sqrt1z();
      Complex complex17 = complex7.exp();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      try { 
        complex0.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ZERO.createComplex((-789.27577079), (-789.27577079));
      Complex complex4 = complex2.ONE.sin();
      Complex complex5 = complex1.I.sqrt1z();
      ComplexField complexField0 = complex2.getField();
      Complex complex6 = complex2.divide(complex3);
      Complex complex7 = complex2.conjugate();
      List<Complex> list0 = complex3.nthRoot(566);
      Complex complex8 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Object object0 = complex1.NaN.readResolve();
      ComplexField complexField0 = complex0.getField();
      Object object1 = complex0.INF.readResolve();
      Complex complex2 = complex0.cosh();
      double double0 = complex2.ONE.abs();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = new Complex((-2228.74008554), (-2228.74008554));
      Complex complex5 = complex0.ONE.subtract(complex4);
      Complex complex6 = complex0.negate();
      ComplexField complexField1 = complex6.INF.getField();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex7.sqrt1z();
      boolean boolean0 = complex3.isInfinite();
      Complex complex9 = complex2.acos();
      Complex complex10 = complex9.I.sin();
      Object object2 = complex5.readResolve();
      boolean boolean1 = complex0.equals(object2);
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex5.acos();
      Complex complex13 = complex9.multiply(1.0);
      String string0 = complex9.toString();
      Complex complex14 = complex3.sinh();
      Complex complex15 = complex8.createComplex((-2228.74008554), (-437.97205));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply((-2275.3817019));
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex1.INF.cosh();
      Complex complex4 = complex1.INF.conjugate();
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex4.ZERO.asin();
      Complex complex7 = complex4.NaN.tanh();
      Complex complex8 = complex7.I.tan();
      double double0 = complex7.ONE.getArgument();
      double double1 = complex0.getReal();
      Complex complex9 = complex2.cos();
      Complex complex10 = complex9.multiply(complex7);
      Complex complex11 = complex9.INF.atan();
      boolean boolean0 = complex2.isNaN();
      Complex complex12 = complex0.atan();
      Complex complex13 = complex12.ZERO.exp();
      Complex complex14 = complex13.I.acos();
      Complex complex15 = complex4.divide(complex0);
      Complex complex16 = complex5.divide(complex2);
      Complex complex17 = Complex.NaN;
      Complex complex18 = complex2.subtract(complex17);
      Complex complex19 = complex18.log();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.createComplex(2007.949615, 0.0);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex0.createComplex((-3468.22278963), 0.1428571343421936);
      Complex complex3 = complex2.tan();
      String string0 = complex2.NaN.toString();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex2.ONE.tanh();
      Complex complex6 = complex2.tanh();
      ComplexField complexField1 = complex6.ONE.getField();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex7.multiply(2007.949615);
      double double0 = complex8.I.getArgument();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex9.I.negate();
      Complex complex11 = complex10.INF.multiply(2007.949615);
      boolean boolean0 = complex9.equals("(NaN, NaN)");
      Complex complex12 = complex6.exp();
      Complex complex13 = complex6.pow(complex4);
      Complex complex14 = complex13.INF.sqrt();
      Complex complex15 = complex9.log();
      Complex complex16 = complex6.negate();
      Complex complex17 = complex1.add(complex12);
      Complex complex18 = complex5.log();
      Complex complex19 = complex17.log();
      Complex complex20 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex1.INF.sin();
      Complex complex4 = complex1.NaN.createComplex((-649.6205922864953), (-649.6205922864953));
      Complex complex5 = complex1.I.asin();
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex5.ONE.pow(complex2);
      int int0 = complex0.hashCode();
      Complex complex8 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = complex3.ONE.multiply(Double.NaN);
      Complex complex6 = complex1.ZERO.exp();
      Complex complex7 = complex6.ONE.sin();
      ComplexField complexField0 = complex0.ONE.getField();
      ComplexField complexField1 = complex0.getField();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex9.atan();
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex9.atan();
      Complex complex13 = complex10.sinh();
      Complex complex14 = complex13.ONE.cosh();
      double double0 = complex0.abs();
      Complex complex15 = complex10.I.sinh();
      Complex complex16 = complex9.add(complex8);
      Complex complex17 = Complex.ZERO;
      Complex complex18 = complex11.INF.add(complex17);
      Complex complex19 = complex16.ONE.sin();
      ComplexField complexField2 = complex19.INF.getField();
      Complex complex20 = complex10.pow(complex11);
      int int0 = complex19.hashCode();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex1.ZERO.atan();
      Complex complex5 = complex4.ONE.sqrt1z();
      List<Complex> list0 = complex0.nthRoot(180);
      Complex complex6 = complex1.ONE.tan();
      Complex complex7 = complex6.NaN.tan();
      Complex complex8 = complex1.NaN.createComplex((-2891.06853608719), (-1854.94777356));
      Complex complex9 = complex0.atan();
      int int0 = complex9.NaN.hashCode();
      Complex complex10 = complex9.INF.multiply(complex1);
      String string0 = complex10.ONE.toString();
      boolean boolean0 = complex1.equals(complex0);
      String string1 = complex0.toString();
      Complex complex11 = complex9.add(complex0);
      String string2 = complex11.ZERO.toString();
      Complex complex12 = complex1.tanh();
      double double0 = complex11.getImaginary();
      Complex complex13 = complex9.sqrt();
      Complex complex14 = complex9.pow(complex8);
      boolean boolean1 = complex4.isInfinite();
      boolean boolean2 = complex14.isNaN();
      Complex complex15 = complex5.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.INF.sqrt1z();
      int int0 = complex0.I.hashCode();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex2.divide(complex1);
      Complex complex7 = complex2.NaN.asin();
      Complex complex8 = complex1.I.multiply(complex6);
      Complex complex9 = complex1.INF.multiply(0.0);
      Complex complex10 = complex9.I.negate();
      String string0 = complex10.INF.toString();
      Complex complex11 = complex0.asin();
      Complex complex12 = complex7.I.conjugate();
      Complex complex13 = complex9.ZERO.atan();
      Complex complex14 = complex11.I.tanh();
      Complex complex15 = complex11.INF.tanh();
      Object object0 = complex0.readResolve();
      Complex complex16 = complex1.sqrt1z();
      Complex complex17 = complex0.atan();
      int int1 = complex9.hashCode();
      Complex complex18 = complex1.atan();
      Complex complex19 = complex9.cosh();
      Complex complex20 = complex2.INF.sqrt();
      Complex complex21 = complex4.atan();
      double double0 = complex18.getArgument();
      Complex complex22 = complex16.cos();
      boolean boolean0 = complex7.isInfinite();
      Complex complex23 = complex11.cosh();
      Complex complex24 = complex16.sin();
      Complex complex25 = complex5.sqrt1z();
      Complex complex26 = complex13.sinh();
      Complex complex27 = complex15.negate();
      Complex complex28 = complex6.sqrt1z();
  }
}
