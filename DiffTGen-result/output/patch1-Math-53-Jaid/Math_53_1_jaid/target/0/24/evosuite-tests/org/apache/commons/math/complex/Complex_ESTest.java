/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 12:18:40 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.INF.readResolve();
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.ZERO.asin();
      double double1 = complex2.NaN.abs();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.I.createComplex(0.0, 2.85040095144011776E17);
      Complex complex7 = complex6.I.sin();
      Complex complex8 = complex2.I.cos();
      Complex complex9 = complex7.NaN.sinh();
      double double2 = complex6.getArgument();
      Complex complex10 = complex0.exp();
      boolean boolean0 = complex5.equals(")");
      List<Complex> list0 = complex5.ONE.nthRoot(1);
      Complex complex11 = complex1.cos();
      Complex complex12 = complex6.I.multiply(complex7);
      Complex complex13 = new Complex(Double.NaN, 0.0);
      ComplexField complexField0 = complex13.getField();
      String string0 = complex3.toString();
      boolean boolean1 = complex9.isNaN();
      Complex complex14 = complex7.divide(complex2);
      Complex complex15 = complex5.exp();
      Complex complex16 = complex12.add(complex9);
      Complex complex17 = complex15.tan();
      Complex complex18 = complex5.add(complex4);
      Complex complex19 = complex17.sinh();
      Complex complex20 = complex19.NaN.atan();
      Complex complex21 = complex15.sqrt();
      ComplexField complexField1 = complex15.getField();
      Object object1 = new Object();
      boolean boolean2 = complex9.equals(object1);
      Complex complex22 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.ZERO.acos();
      String string0 = complex0.ONE.toString();
      double double0 = complex1.ONE.getArgument();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex4.INF.atan();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex0.ZERO.conjugate();
      Complex complex9 = complex3.NaN.asin();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex10 = complex0.acos();
      Complex complex11 = complex10.NaN.cosh();
      Complex complex12 = complex0.I.conjugate();
      Complex complex13 = complex11.NaN.conjugate();
      Complex complex14 = complex2.INF.atan();
      Complex complex15 = complex14.NaN.tan();
      Complex complex16 = complex9.asin();
      Complex complex17 = complex16.ZERO.sinh();
      Complex complex18 = complex16.I.tanh();
      boolean boolean1 = complex1.isNaN();
      Complex complex19 = complex3.multiply(complex8);
      Complex complex20 = complex19.tanh();
      Complex complex21 = complex19.sinh();
      double double1 = complex2.getImaginary();
      boolean boolean2 = complex0.isInfinite();
      Complex complex22 = complex11.multiply(complex13);
      Complex complex23 = complex14.exp();
      Complex complex24 = complex12.atan();
      String string1 = complex8.toString();
      Complex complex25 = complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 2.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.NaN.multiply(2.0);
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex6 = complex3.I.subtract(complex4);
      Complex complex7 = complex6.sqrt1z();
      double double0 = complex3.I.abs();
      double double1 = Double.NaN;
      Complex complex8 = new Complex(6.283185307179586, Double.NaN);
      Complex complex9 = complex0.subtract(complex8);
      int int0 = (-2369);
      Complex complex10 = complex9.NaN.negate();
      try { 
        complex8.nthRoot((-2369));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,369
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(3668.62, 3668.62);
      Object object0 = complex0.ZERO.readResolve();
      double double0 = complex0.INF.abs();
      double double1 = complex0.abs();
      double double2 = complex0.abs();
      Complex complex1 = new Complex(0.0, (-3564.69));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.INF.pow(complex0);
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex5.INF.sqrt();
      Object object1 = complex5.ZERO.readResolve();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex1.NaN.sqrt1z();
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex4.subtract(complex0);
      Complex complex11 = complex10.NaN.conjugate();
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex12 = complex1.ZERO.add(complex4);
      int int0 = complex10.I.hashCode();
      boolean boolean0 = complex1.isInfinite();
      double double3 = complex3.getArgument();
      Complex complex13 = complex1.atan();
      Complex complex14 = complex13.I.divide(complex10);
      Complex complex15 = complex9.cos();
      Complex complex16 = complex13.tan();
      Complex complex17 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-2410.52), (-2410.52));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex2.ZERO.divide(complex0);
      ComplexField complexField0 = complex3.I.getField();
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.INF.multiply((-2410.52));
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.ZERO.add(complex8);
      double double0 = complex4.INF.abs();
      Complex complex10 = complex6.INF.asin();
      Complex complex11 = complex4.NaN.tan();
      Complex complex12 = complex3.pow(complex4);
      boolean boolean0 = complex6.isNaN();
      Complex complex13 = complex5.tan();
      Complex complex14 = complex12.subtract(complex1);
      Complex complex15 = complex3.acos();
      Complex complex16 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-436.2618598));
      Complex complex1 = complex0.sin();
      double double0 = complex1.I.abs();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.INF.asin();
      Complex complex4 = complex2.ZERO.divide(complex0);
      Complex complex5 = complex4.ONE.createComplex((-377.20838073289093), 4686.82308702);
      Complex complex6 = complex5.exp();
      ComplexField complexField0 = complex2.getField();
      Complex complex7 = complex2.sqrt1z();
      double double1 = complex7.I.abs();
      Complex complex8 = complex3.multiply(92.39309);
      Complex complex9 = complex3.I.tanh();
      Complex complex10 = complex8.ZERO.sin();
      double double2 = complex8.getArgument();
      Complex complex11 = complex3.cosh();
      Complex complex12 = complex6.I.tan();
      Complex complex13 = complex12.INF.subtract(complex5);
      Complex complex14 = complex2.ZERO.conjugate();
      Complex complex15 = complex10.atan();
      Complex complex16 = complex6.conjugate();
      Complex complex17 = complex15.createComplex((-377.20838073289093), (-254.87421268809055));
      Complex complex18 = complex17.I.sinh();
      Complex complex19 = complex18.ONE.createComplex(0.0, (-8.0E298));
      Complex complex20 = complex17.createComplex((-377.20838073289093), (-377.20838073289093));
      double double3 = complex16.getImaginary();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.INF.multiply(complex2);
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.I.add(complex3);
      Complex complex8 = complex2.ZERO.divide(complex6);
      Complex complex9 = complex6.ONE.conjugate();
      Complex complex10 = complex9.ONE.cos();
      Complex complex11 = complex1.NaN.divide(complex9);
      Complex complex12 = complex0.multiply(1.570796251296997);
      Complex complex13 = complex12.log();
      List<Complex> list0 = complex0.nthRoot(50);
      Complex complex14 = complex2.sqrt();
      ComplexField complexField0 = complex0.getField();
      String string0 = complex14.toString();
      boolean boolean0 = complex12.isInfinite();
      Complex complex15 = complex12.cos();
      boolean boolean1 = complex12.isNaN();
      List<Complex> list1 = complex3.nthRoot(50);
      Complex complex16 = complex13.cos();
      Complex complex17 = complex15.divide(complex7);
      Complex complex18 = complex9.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cos();
      List<Complex> list0 = complex0.NaN.nthRoot(2930);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      List<Complex> list0 = complex1.nthRoot(148);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ONE.exp();
      Object object0 = complex2.readResolve();
      String string0 = complex0.toString();
      Complex complex4 = complex2.ZERO.sqrt();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.multiply(complex1);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex2.acos();
      Complex complex9 = complex8.cosh();
      double double0 = complex0.abs();
      List<Complex> list1 = complex3.nthRoot(17);
      boolean boolean0 = complex1.isInfinite();
      double double1 = complex3.getReal();
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex2.multiply(2.835);
      Complex complex12 = complex2.cos();
      Complex complex13 = complex10.cos();
      Complex complex14 = complex13.subtract(complex1);
      Complex complex15 = complex12.tan();
      Complex complex16 = complex4.sinh();
      Complex complex17 = complex15.tan();
      Complex complex18 = complex17.I.sqrt();
      String string1 = complex17.toString();
      Object object1 = complex16.readResolve();
      Complex complex19 = complex4.tanh();
      boolean boolean1 = complex0.equals(complex16);
      Complex complex20 = complex4.exp();
      Complex complex21 = complex4.sqrt();
      Complex complex22 = complex1.tanh();
      boolean boolean2 = complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.I.cosh();
      String string0 = complex2.ONE.toString();
      Complex complex3 = complex2.INF.log();
      ComplexField complexField0 = complex0.getField();
      int int0 = complex0.INF.hashCode();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex2.ZERO.tanh();
      Complex complex6 = complex4.INF.negate();
      Complex complex7 = complex0.divide(complex4);
      Complex complex8 = complex0.INF.exp();
      Complex complex9 = complex8.I.sqrt1z();
      Complex complex10 = complex1.createComplex(0.0, 2475.2934);
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex11.NaN.divide(complex3);
      try { 
        complex12.ONE.nthRoot((-4104));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,104
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.createComplex((-1.0), (-1.0));
      Complex complex2 = complex1.I.cosh();
      double double0 = complex1.I.abs();
      Complex complex3 = complex1.I.add(complex0);
      Object object0 = complex3.INF.readResolve();
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex4.NaN.createComplex(0.0, 1.0);
      double double1 = complex5.ONE.getArgument();
      Complex complex6 = complex4.NaN.atan();
      Complex complex7 = complex4.I.atan();
      Complex complex8 = complex0.cosh();
      Object object1 = complex8.ZERO.readResolve();
      Complex complex9 = complex1.I.cosh();
      int int0 = complex1.hashCode();
      Complex complex10 = complex0.tan();
      boolean boolean0 = complex10.isNaN();
      Complex complex11 = complex10.divide(complex6);
      Complex complex12 = complex8.multiply((-687.939975376716));
      Complex complex13 = complex10.log();
      try { 
        complex2.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = Complex.NaN;
      double double0 = complex0.ONE.getArgument();
      Complex complex4 = complex3.ONE.sin();
      String string0 = complex3.NaN.toString();
      Complex complex5 = complex3.tanh();
      boolean boolean0 = complex0.equals(complex3);
      int int0 = complex5.NaN.hashCode();
      Complex complex6 = complex0.createComplex((-111.42709386), (-111.42709386));
      double double1 = complex6.getReal();
      double double2 = complex3.getImaginary();
      Complex complex7 = complex5.divide(complex0);
      Complex complex8 = complex7.NaN.asin();
      Complex complex9 = complex7.NaN.divide(complex5);
      Complex complex10 = complex7.INF.negate();
      Complex complex11 = complex5.pow(complex1);
      Complex complex12 = complex7.asin();
      Complex complex13 = complex3.divide(complex7);
      Complex complex14 = complex3.tan();
      Complex complex15 = complex0.cosh();
      Complex complex16 = complex14.conjugate();
      Complex complex17 = complex11.sqrt();
      String string1 = complex16.toString();
      Complex complex18 = complex16.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(complex0);
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex0.NaN.acos();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-269.0), (-269.0));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.createComplex((-2.356194490192345), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.NaN.sqrt1z();
      double double0 = complex2.abs();
      Complex complex3 = complex1.INF.sin();
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex1.I.divide(complex0);
      double double1 = complex0.abs();
      Complex complex6 = complex5.INF.asin();
      double double2 = complex6.INF.abs();
      Complex complex7 = complex0.negate();
      List<Complex> list0 = complex5.NaN.nthRoot(3101);
      double double3 = complex3.abs();
      boolean boolean0 = complex0.isInfinite();
      double double4 = complex5.getReal();
      boolean boolean1 = complex3.isInfinite();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex3.subtract(complex8);
      Complex complex10 = complex9.sqrt1z();
      Complex complex11 = complex10.INF.atan();
      Complex complex12 = complex10.tanh();
      Complex complex13 = complex6.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.ONE.createComplex((-1641.46871), (-1641.46871));
      Complex complex4 = complex0.NaN.add(complex1);
      Complex complex5 = complex0.INF.multiply(complex3);
      double double0 = (-897.629);
      Complex complex6 = new Complex((-897.629), (-897.629));
      Complex complex7 = complex0.pow(complex6);
      Object object0 = complex6.readResolve();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-492.54806321286867), (-492.54806321286867));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.log();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.tanh();
      List<Complex> list0 = complex3.INF.nthRoot(1967);
      boolean boolean0 = complex1.isInfinite();
      double double0 = complex0.abs();
      ComplexField complexField1 = complex0.INF.getField();
      String string0 = complex1.toString();
      Complex complex4 = complex1.multiply((-492.54806321286867));
      double double1 = complex4.getReal();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = complex7.INF.sin();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex0.asin();
      Complex complex11 = complex8.ZERO.tanh();
      Complex complex12 = complex6.multiply(complex4);
      Complex complex13 = complex12.I.atan();
      List<Complex> list1 = complex13.NaN.nthRoot(1967);
      Complex complex14 = complex2.cos();
      double double2 = complex5.getImaginary();
      Complex complex15 = complex8.conjugate();
      Complex complex16 = complex2.sinh();
      String string1 = complex13.toString();
      Complex complex17 = complex6.multiply(complex14);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex2.INF.multiply(complex1);
      Object object0 = complex2.I.readResolve();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex1.INF.cos();
      Complex complex6 = complex5.INF.multiply(complex2);
      Complex complex7 = complex4.ONE.cos();
      int int0 = complex5.ZERO.hashCode();
      Complex complex8 = complex7.INF.sinh();
      String string0 = complex0.toString();
      Complex complex9 = complex2.multiply(complex0);
      Complex complex10 = complex1.add(complex4);
      Complex complex11 = complex5.cosh();
      Complex complex12 = complex7.cosh();
      Complex complex13 = complex11.asin();
      Complex complex14 = complex13.cosh();
      Complex complex15 = complex12.createComplex(730.36247505578, 730.36247505578);
      Complex complex16 = complex10.asin();
      Complex complex17 = complex10.cosh();
      Complex complex18 = complex17.sinh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.negate();
      double double0 = complex4.ZERO.abs();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ZERO.pow(complex2);
      Complex complex7 = complex6.ZERO.sin();
      Complex complex8 = complex3.divide(complex2);
      List<Complex> list0 = complex2.nthRoot(803);
      int int0 = complex8.hashCode();
      Complex complex9 = complex4.exp();
      Complex complex10 = complex2.tanh();
      Complex complex11 = complex10.NaN.sinh();
      Complex complex12 = complex3.tan();
      Complex complex13 = complex1.multiply(120.2490849299);
      Complex complex14 = complex0.divide(complex13);
      Complex complex15 = complex12.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.multiply(Double.NaN);
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-54.7385964), (-54.7385964));
      Complex complex2 = complex1.ONE.sinh();
      String string0 = complex2.ZERO.toString();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.NaN.exp();
      Complex complex5 = complex1.NaN.tanh();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.INF.sqrt();
      Complex complex8 = complex6.I.conjugate();
      ComplexField complexField0 = complex2.getField();
      Complex complex9 = complex0.ZERO.multiply(complex4);
      Complex complex10 = complex9.atan();
      boolean boolean0 = complex3.isNaN();
      Complex complex11 = complex0.atan();
      double double0 = complex6.getReal();
      Complex complex12 = complex8.add(complex5);
      Complex complex13 = complex8.log();
      Complex complex14 = complex0.pow(complex11);
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      boolean boolean0 = complex1.isInfinite();
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.cosh();
      int int1 = complex1.hashCode();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.createComplex((-52.076889396), (-52.076889396));
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex2.ZERO.negate();
      double double0 = complex1.ZERO.abs();
      Complex complex5 = complex0.exp();
      double double1 = complex1.INF.getArgument();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex6.I.tanh();
      Complex complex8 = complex7.add(complex0);
      double double2 = complex8.INF.abs();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex1.sin();
      Complex complex11 = complex9.negate();
      boolean boolean0 = complex0.isNaN();
      Complex complex12 = complex9.cosh();
      Complex complex13 = complex12.exp();
      Complex complex14 = complex2.tan();
      Complex complex15 = complex10.createComplex(0.7853981633974483, 0.7853981633974483);
      Complex complex16 = complex15.ZERO.pow(complex6);
      Complex complex17 = complex16.INF.multiply(complex2);
      Complex complex18 = complex9.exp();
      Complex complex19 = complex18.cos();
      Complex complex20 = complex19.INF.tanh();
      Complex complex21 = complex0.ZERO.negate();
      Complex complex22 = complex7.negate();
      Complex complex23 = complex19.negate();
      Complex complex24 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-1566.13793082), (-1566.13793082));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = complex1.NaN.divide(complex0);
      Complex complex7 = complex6.INF.multiply(complex2);
      int int0 = complex7.NaN.hashCode();
      Complex complex8 = complex1.INF.asin();
      Complex complex9 = complex2.ONE.conjugate();
      Complex complex10 = Complex.ZERO;
      double double0 = complex9.INF.abs();
      Complex complex11 = complex0.subtract(complex10);
      Complex complex12 = complex11.INF.pow(complex0);
      Complex complex13 = complex9.sqrt1z();
      String string0 = complex8.toString();
      double double1 = complex11.getImaginary();
      Complex complex14 = complex11.cos();
      int int1 = complex14.I.hashCode();
      double double2 = complex13.abs();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.createComplex(0.0, 2.0);
      String string0 = complex0.toString();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.createComplex(2.0, 1);
      Complex complex3 = complex2.ZERO.sqrt1z();
      List<Complex> list0 = complex0.I.nthRoot(1);
      ComplexField complexField0 = complex0.getField();
      int int0 = complex0.hashCode();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex4.INF.divide(complex0);
      double double0 = complex2.abs();
      Complex complex6 = complex3.ZERO.multiply(2.0);
      double double1 = complex1.getArgument();
      boolean boolean0 = complex4.isInfinite();
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex7.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = new Complex((-367.6333942678862), (-367.6333942678862));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.INF.sqrt1z();
      Complex complex4 = complex2.createComplex(Double.NaN, Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex2.INF.acos();
      Complex complex7 = complex2.NaN.log();
      Complex complex8 = complex6.ONE.atan();
      Complex complex9 = complex1.divide(complex2);
      Complex complex10 = complex1.ONE.acos();
      Complex complex11 = complex0.sqrt();
      Complex complex12 = complex1.exp();
      try { 
        complex6.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1306.27411163531), (-2239.102908827));
      Complex complex1 = complex0.sin();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.I.createComplex(0.1428571343421936, (-341.555276));
      String string0 = complex1.ZERO.toString();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex3.I.createComplex(0.1428571343421936, 0.0);
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex0.atan();
      int int1 = complex3.INF.hashCode();
      List<Complex> list0 = complex4.I.nthRoot(17);
      Complex complex7 = complex0.log();
      Complex complex8 = complex1.divide(complex7);
      double double0 = complex5.getImaginary();
      Complex complex9 = complex3.ONE.tanh();
      Complex complex10 = complex7.NaN.sqrt();
      boolean boolean0 = complex4.equals((Object) null);
      Complex complex11 = complex2.divide(complex7);
      Complex complex12 = complex10.tanh();
      boolean boolean1 = complex12.isInfinite();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.INF.sqrt1z();
      boolean boolean0 = complex2.isInfinite();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex2.createComplex((-3778.939726), 1.0);
      Complex complex6 = complex5.ONE.sqrt1z();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex5.atan();
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.ONE.exp();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex3 = complex0.ZERO.log();
      Complex complex4 = complex0.I.atan();
      String string0 = complex0.toString();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.log();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.ONE.divide(complex6);
      Object object0 = complex6.readResolve();
      String string1 = complex0.toString();
      Complex complex9 = complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(2922.3124739409545, 2922.3124739409545);
      Complex complex1 = complex0.I.negate();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.negate();
      double double1 = complex1.getArgument();
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = complex0.NaN.tan();
      boolean boolean0 = complex2.isNaN();
      Object object0 = complex2.INF.readResolve();
      Object object1 = complex2.readResolve();
      Complex complex5 = complex1.ONE.sqrt();
      Complex complex6 = complex5.NaN.exp();
      Complex complex7 = new Complex(1181.6, 2461.14567613);
      Complex complex8 = complex1.divide(complex7);
      Complex complex9 = complex0.tanh();
      double double2 = complex9.NaN.abs();
      Complex complex10 = complex7.acos();
      Complex complex11 = complex0.ONE.pow(complex2);
      Complex complex12 = complex11.NaN.acos();
      Complex complex13 = complex3.multiply(complex0);
      Complex complex14 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(3123.2, 3123.2);
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex1.ONE.asin();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex4.add(complex1);
      Complex complex8 = complex7.ZERO.divide(complex2);
      double double0 = complex4.abs();
      Complex complex9 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-3227.549557165), (-3227.549557165));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex2.createComplex((-3227.549557165), (-3227.549557165));
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex3.multiply(2.0);
      Complex complex9 = complex8.ZERO.tan();
      Complex complex10 = complex9.ONE.asin();
      Complex complex11 = complex10.INF.log();
      double double0 = complex10.ONE.abs();
      Complex complex12 = complex5.log();
      Complex complex13 = complex3.add(complex7);
      Complex complex14 = Complex.ZERO;
      boolean boolean0 = complex7.equals(complex14);
      Object object0 = complex9.readResolve();
      Complex complex15 = complex6.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-1005.90074), 1689.9577530251065);
      Complex complex1 = complex0.ZERO.atan();
      try { 
        complex0.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex0.NaN.cosh();
      Complex complex4 = complex2.ZERO.divide(complex0);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      boolean boolean0 = complex0.equals("org.apache.commons.math.complex.Complex");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.ONE.log();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex4.subtract(complex0);
      Complex complex7 = complex4.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(0.2857142686843872);
      Complex complex2 = complex0.ONE.tanh();
      double double0 = complex0.I.getArgument();
      ComplexField complexField0 = complex0.getField();
      double double1 = complex0.getArgument();
      Complex complex3 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.negate();
      boolean boolean0 = complex2.equals(complex3);
      Complex complex4 = complex0.INF.multiply(complex3);
      Complex complex5 = complex0.multiply(0.008336750013465571);
      Object object0 = complex0.readResolve();
      boolean boolean1 = complex5.isInfinite();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      List<Complex> list0 = complex0.ZERO.nthRoot(3968);
      Complex complex2 = complex1.ONE.divide(complex0);
      boolean boolean0 = complex0.equals(complex1);
      String string0 = complex2.toString();
      Complex complex3 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex0.createComplex(0.7249995199969751, (-2341.173558924751));
      Complex complex6 = complex5.sin();
      boolean boolean0 = complex2.equals(complex3);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.add(complex3);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt();
      double double0 = complex0.INF.getArgument();
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(1449.3771923, 1.0);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      ComplexField complexField0 = complex0.getField();
      double double0 = Double.NaN;
      try { 
        complex0.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1330.5726919357));
      Complex complex1 = complex0.NaN.log();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.INF.exp();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-1005.90074), 1689.9577530251065);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.conjugate();
      List<Complex> list0 = complex0.nthRoot(1709);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.I.pow(complex1);
      boolean boolean0 = complex2.equals("");
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.sinh();
      List<Complex> list0 = complex3.nthRoot(26);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-18.13275162552156), (-18.13275162552156));
      Complex complex1 = complex0.ONE.negate();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      try { 
        complex0.nthRoot((-1923));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,923
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.multiply(0.0);
      Complex complex3 = complex0.ZERO.multiply(complex1);
      double double0 = complex3.ZERO.getArgument();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.NaN.sqrt1z();
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex2.ZERO.acos();
      double double1 = complex0.getReal();
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex1.tanh();
      boolean boolean1 = complex3.equals(complex2);
      Complex complex9 = complex4.log();
      double double2 = complex8.getImaginary();
      Complex complex10 = complex3.add(complex0);
      double double3 = complex0.getImaginary();
      Complex complex11 = complex3.INF.conjugate();
      double double4 = complex0.NaN.getArgument();
      String string0 = complex9.NaN.toString();
      ComplexField complexField0 = complex8.getField();
      ComplexField complexField1 = complex3.getField();
      Complex complex12 = complex1.conjugate();
      boolean boolean2 = complex9.isNaN();
      Complex complex13 = complex8.acos();
      boolean boolean3 = complex5.isInfinite();
      Complex complex14 = complex0.ONE.sqrt();
      Complex complex15 = complex9.sinh();
      boolean boolean4 = complex13.isInfinite();
      Complex complex16 = complex6.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex0.log();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.ONE.multiply((-3670.93));
      List<Complex> list0 = complex3.nthRoot(37);
      Complex complex7 = complex3.ONE.multiply(complex5);
      Complex complex8 = complex7.ZERO.log();
      double double1 = complex1.getArgument();
      double double2 = complex3.abs();
      Complex complex9 = complex3.ONE.acos();
      Complex complex10 = complex9.I.subtract(complex4);
      Complex complex11 = complex1.createComplex(Double.NaN, 37);
      Complex complex12 = complex0.pow(complex2);
      Complex complex13 = Complex.I;
      Complex complex14 = complex3.ZERO.atan();
      Complex complex15 = complex4.pow(complex3);
      Complex complex16 = complex0.tanh();
      String string0 = complex16.toString();
      Complex complex17 = complex16.sqrt();
      Complex complex18 = complex3.sqrt1z();
      Complex complex19 = complex3.add(complex15);
      Complex complex20 = complex11.atan();
      Complex complex21 = complex13.sinh();
      List<Complex> list1 = complex21.nthRoot(2424);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.I.atan();
      Complex complex4 = complex3.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.ONE.sinh();
      Complex complex6 = complex5.NaN.subtract(complex1);
      Object object0 = complex5.ONE.readResolve();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.INF.cosh();
      Complex complex6 = complex3.ZERO.sin();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex3.conjugate();
      Complex complex9 = complex7.NaN.log();
      int int0 = complex2.INF.hashCode();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex2.INF.pow(complex4);
      Complex complex12 = complex10.NaN.acos();
      Complex complex13 = complex2.sin();
      Complex complex14 = complex7.atan();
      Complex complex15 = complex12.multiply(0.0);
      boolean boolean0 = complex15.isNaN();
      Complex complex16 = complex15.cosh();
      Complex complex17 = complex11.tan();
      Complex complex18 = complex11.exp();
      Complex complex19 = complex8.cosh();
      Complex complex20 = complex5.atan();
      Complex complex21 = complex7.divide(complex13);
      Complex complex22 = complex21.NaN.pow(complex1);
      double double1 = complex20.getReal();
      Complex complex23 = complex12.cos();
      ComplexField complexField0 = complex15.getField();
      Object object0 = new Object();
      boolean boolean1 = complex7.equals(object0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-560.82), 191.01448202);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.I.pow(complex1);
      Complex complex4 = complex1.ONE.createComplex(1329.982605, (-20.0));
      List<Complex> list0 = complex0.ONE.nthRoot(72);
      Complex complex5 = complex0.ZERO.sqrt1z();
      double double0 = complex5.ONE.abs();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = complex1.ZERO.multiply((double) 72);
      Complex complex9 = complex5.ONE.tanh();
      Complex complex10 = complex5.conjugate();
      Complex complex11 = complex0.NaN.cosh();
      Complex complex12 = complex11.ZERO.subtract(complex6);
      Complex complex13 = complex12.atan();
      Complex complex14 = complex6.NaN.sqrt1z();
      Complex complex15 = complex1.conjugate();
      Complex complex16 = complex0.NaN.sinh();
      Complex complex17 = complex16.NaN.cosh();
      Complex complex18 = complex10.NaN.log();
      double double1 = complex3.abs();
      Complex complex19 = complex0.sin();
      Complex complex20 = complex10.tanh();
      Complex complex21 = complex6.acos();
      Complex complex22 = complex21.tan();
      Complex complex23 = complex10.exp();
      Complex complex24 = complex5.asin();
      Complex complex25 = complex24.createComplex(72, 1.0);
      Complex complex26 = complex7.sinh();
      Complex complex27 = complex20.conjugate();
      boolean boolean0 = complex10.equals(complex4);
      Complex complex28 = complex20.asin();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex0.subtract(complex3);
      double double0 = complex5.getArgument();
      Complex complex6 = complex5.NaN.acos();
      Complex complex7 = complex5.ZERO.subtract(complex0);
      Complex complex8 = complex3.cosh();
      String string0 = complex3.toString();
      int int0 = complex8.hashCode();
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex9.cosh();
      Complex complex11 = complex10.I.sin();
      String string1 = complex11.INF.toString();
      ComplexField complexField0 = complex9.getField();
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex3.add(complex12);
      Complex complex14 = complex0.I.acos();
      String string2 = complex13.INF.toString();
      Object object0 = complex3.readResolve();
      Complex complex15 = complex13.exp();
      Complex complex16 = complex10.conjugate();
      Complex complex17 = complex16.ZERO.cosh();
      Complex complex18 = complex17.ONE.exp();
      Complex complex19 = complex3.negate();
      Object object1 = complex4.readResolve();
      Complex complex20 = complex3.sinh();
      Complex complex21 = complex10.pow(complex9);
      Complex complex22 = complex18.exp();
      boolean boolean0 = complex12.isInfinite();
      Complex complex23 = complex20.tan();
      Complex complex24 = complex8.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex0.ZERO.cosh();
      double double0 = complex1.NaN.getArgument();
      double double1 = complex0.abs();
      double double2 = complex0.getImaginary();
      ComplexField complexField0 = complex1.getField();
      double double3 = complex0.getImaginary();
      try { 
        complex1.nthRoot((-1378));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,378
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = new Complex(0.0, 0.0);
      int int0 = complex3.I.hashCode();
      Complex complex4 = complex3.ZERO.createComplex(0.041666666666666664, 0.0);
      List<Complex> list0 = complex3.NaN.nthRoot(273);
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex1.equals(object0);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.ZERO.sin();
      Complex complex7 = complex6.NaN.cos();
      boolean boolean1 = complex0.isInfinite();
      Complex complex8 = complex0.subtract(complex3);
      String string0 = complex4.toString();
      Complex complex9 = complex5.subtract(complex8);
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex8.log();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex1.I.subtract(complex0);
      Complex complex7 = complex5.ONE.log();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.ZERO.sqrt();
      Complex complex10 = complex7.add(complex0);
      Complex complex11 = complex0.divide(complex8);
      Object object0 = complex1.readResolve();
      Complex complex12 = complex9.I.subtract(complex1);
      Complex complex13 = complex8.tan();
      boolean boolean0 = complex9.isInfinite();
      Complex complex14 = complex7.sinh();
      List<Complex> list0 = complex7.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.ONE.divide(complex2);
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex0.NaN.sin();
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex6 = complex2.INF.cosh();
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = complex2.acos();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex2.ZERO.tanh();
      int int0 = complex10.INF.hashCode();
      Complex complex12 = complex10.atan();
      Complex complex13 = complex12.asin();
      Object object1 = complex7.readResolve();
      Complex complex14 = complex2.multiply(0.0);
      Complex complex15 = complex11.NaN.divide(complex10);
      Complex complex16 = complex0.ZERO.tanh();
      Complex complex17 = complex10.add(complex9);
      Object object2 = complex10.readResolve();
      Complex complex18 = complex9.add(complex1);
      Complex complex19 = complex0.asin();
      Complex complex20 = complex6.tan();
      double double0 = complex14.ZERO.abs();
      int int1 = (-462);
      try { 
        complex20.nthRoot((-462));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -462
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
