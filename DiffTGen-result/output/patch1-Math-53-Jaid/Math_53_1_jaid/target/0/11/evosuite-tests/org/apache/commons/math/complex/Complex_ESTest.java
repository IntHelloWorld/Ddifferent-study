/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 12:11:14 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = complex0.exp();
      double double0 = complex4.ZERO.getArgument();
      Complex complex5 = complex1.ZERO.sinh();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex2.ZERO.tan();
      double double1 = complex6.ONE.getArgument();
      String string0 = complex6.ONE.toString();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex6.exp();
      Complex complex10 = complex0.ONE.sqrt1z();
      Complex complex11 = complex4.divide(complex0);
      Complex complex12 = complex11.NaN.cos();
      Object object0 = complex3.readResolve();
      double double2 = complex0.abs();
      Complex complex13 = complex6.NaN.sinh();
      ComplexField complexField0 = complex4.getField();
      Complex complex14 = complex9.acos();
      Complex complex15 = complex11.sqrt();
      Complex complex16 = complex15.subtract(complex4);
      Complex complex17 = complex14.ONE.exp();
      Complex complex18 = complex3.acos();
      Complex complex19 = complex18.acos();
      int int0 = 0;
      try { 
        complex13.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 2745.049208);
      int int0 = complex0.INF.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex3.NaN.conjugate();
      boolean boolean0 = complex0.equals("d[Y'9Oy+?MG");
      Complex complex5 = complex0.atan();
      ComplexField complexField1 = complex1.getField();
      Complex complex6 = complex2.ONE.asin();
      String string0 = complex5.toString();
      String string1 = complex0.I.toString();
      Complex complex7 = complex2.sqrt();
      ComplexField complexField2 = complex7.ONE.getField();
      Complex complex8 = complex5.log();
      Complex complex9 = complex2.asin();
      Complex complex10 = complex5.add(complex0);
      Complex complex11 = complex10.I.asin();
      Complex complex12 = complex3.sinh();
      Complex complex13 = complex8.log();
      Complex complex14 = complex11.exp();
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(1026.404375443497, 1026.404375443497);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex1.NaN.sin();
      Complex complex5 = complex1.INF.divide(complex0);
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      List<Complex> list1 = complex4.NaN.nthRoot(1);
      double double0 = complex0.abs();
      Complex complex6 = complex0.sqrt1z();
      double double1 = complex6.ONE.getArgument();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex0.exp();
      String string0 = complex4.toString();
      boolean boolean0 = complex4.isInfinite();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex6.acos();
      String string1 = complex7.toString();
      String string2 = complex5.toString();
      boolean boolean1 = complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-658.78685212816), (-658.78685212816));
      Complex complex1 = complex0.createComplex(0.00806197, 0.0);
      Complex complex2 = complex0.I.createComplex((-658.78685212816), (-3409.1));
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex1.ZERO.sqrt1z();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex1.NaN.add(complex2);
      Complex complex7 = complex1.ONE.sin();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex7.I.multiply(complex8);
      Complex complex10 = complex8.multiply(7333.0);
      Complex complex11 = complex8.divide(complex1);
      ComplexField complexField0 = complex7.getField();
      ComplexField complexField1 = complex11.getField();
      boolean boolean0 = complex2.equals("uO^T0R");
      ComplexField complexField2 = complex3.getField();
      Complex complex12 = complex5.sqrt();
      Complex complex13 = complex2.pow(complex0);
      Complex complex14 = complex13.ONE.conjugate();
      Complex complex15 = complex4.asin();
      Complex complex16 = complex1.ONE.exp();
      Complex complex17 = complex15.I.multiply((-3409.1));
      double double0 = complex15.getArgument();
      Complex complex18 = complex5.atan();
      Complex complex19 = complex18.I.cos();
      double double1 = complex19.ONE.abs();
      int int0 = complex0.hashCode();
      Complex complex20 = complex14.sqrt1z();
      Complex complex21 = complex20.divide(complex15);
      ComplexField complexField3 = complex20.getField();
      Complex complex22 = complex17.sinh();
      Complex complex23 = complex12.cos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2600.8120894));
      Complex complex1 = new Complex(0.0, 1787.499274462886);
      Complex complex2 = complex1.INF.createComplex(1787.499274462886, 0.0);
      Complex complex3 = complex1.INF.cos();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.I.acos();
      double double0 = complex3.getArgument();
      Complex complex6 = complex4.pow(complex0);
      Complex complex7 = complex6.I.exp();
      List<Complex> list0 = complex7.NaN.nthRoot(1530);
      Complex complex8 = complex4.ONE.atan();
      Complex complex9 = complex7.sin();
      Complex complex10 = complex0.pow(complex6);
      double double1 = complex3.getImaginary();
      Complex complex11 = complex0.createComplex(0.0, Double.NaN);
      Complex complex12 = complex11.INF.createComplex(0.0, 0.0);
      Complex complex13 = complex0.sin();
      Complex complex14 = complex13.ONE.sin();
      Complex complex15 = complex13.acos();
      Complex complex16 = complex2.log();
      double double2 = complex1.getArgument();
      boolean boolean0 = complex10.isNaN();
      Complex complex17 = complex6.sqrt1z();
      ComplexField complexField0 = complex1.getField();
      double double3 = complex16.abs();
      Complex complex18 = complex8.sqrt();
      Complex complex19 = complex18.ONE.sin();
      Complex complex20 = complex1.cosh();
      Complex complex21 = complex19.subtract(complex7);
      double double4 = complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-696.8415822361486), (-634.159291329));
      double double0 = complex0.ONE.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.subtract(complex1);
      double double1 = complex0.getReal();
      List<Complex> list0 = complex0.I.nthRoot(1);
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ONE.multiply(Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex3.I.nthRoot(660);
      Complex complex6 = complex5.multiply(1.0);
      Complex complex7 = complex6.ONE.multiply(complex3);
      Complex complex8 = complex6.ZERO.multiply(0.0);
      Complex complex9 = complex8.sinh();
      ComplexField complexField0 = complex0.getField();
      Complex complex10 = complex4.subtract(complex5);
      Complex complex11 = complex0.acos();
      Complex complex12 = complex2.sqrt1z();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex13.ZERO.tan();
      Complex complex15 = complex12.ZERO.pow(complex13);
      int int0 = complex11.hashCode();
      String string0 = complex1.toString();
      double double0 = complex6.abs();
      Complex complex16 = complex3.sinh();
      Complex complex17 = complex15.add(complex7);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.tanh();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex complex5 = complex4.NaN.createComplex(1694.93, 1694.93);
      Complex complex6 = complex5.NaN.exp();
      Complex complex7 = complex2.I.negate();
      Complex complex8 = complex7.asin();
      Complex complex9 = complex0.cos();
      Complex complex10 = complex9.conjugate();
      boolean boolean0 = complex2.isInfinite();
      boolean boolean1 = complex9.isNaN();
      Complex complex11 = complex7.multiply((-2911.32320039209));
      ComplexField complexField1 = complex2.ONE.getField();
      int int0 = complex7.I.hashCode();
      Complex complex12 = complex7.sqrt();
      Complex complex13 = complex10.ONE.sqrt();
      Complex complex14 = complex7.multiply(3150.6512);
      Complex complex15 = complex14.sqrt1z();
      double double0 = complex9.getImaginary();
      double double1 = complex3.getReal();
      Complex complex16 = complex10.NaN.asin();
      Complex complex17 = complex1.cosh();
      Complex complex18 = complex0.NaN.tanh();
      Complex complex19 = complex2.multiply(complex3);
      Complex complex20 = complex10.negate();
      Complex complex21 = complex12.sin();
      Complex complex22 = complex21.ZERO.multiply((-2911.32320039209));
      Complex complex23 = complex14.tanh();
      boolean boolean2 = complex3.isInfinite();
      Complex complex24 = complex2.sqrt();
      Complex complex25 = complex24.tan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.createComplex(3351.1116, 3351.1116);
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex1.NaN.createComplex(3351.1116, 3351.1116);
      Complex complex6 = complex0.I.cosh();
      Complex complex7 = complex1.NaN.createComplex(3351.1116, 3351.1116);
      Complex complex8 = complex0.INF.add(complex3);
      Complex complex9 = complex1.log();
      Complex complex10 = complex3.cosh();
      Complex complex11 = complex5.cosh();
      Complex complex12 = complex5.asin();
      Complex complex13 = complex11.add(complex12);
      Complex complex14 = complex13.multiply(complex8);
      Complex complex15 = complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(1.2675934823758863E-8, 1.2675934823758863E-8);
      Complex complex1 = new Complex(1.2675934823758863E-8, (-595.761706747559));
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex0.subtract(complex1);
      boolean boolean0 = complex0.isInfinite();
      String string0 = complex0.toString();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex1.I.acos();
      Complex complex6 = complex4.I.negate();
      Complex complex7 = complex6.ONE.atan();
      Object object0 = complex4.NaN.readResolve();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex2.I.pow(complex0);
      Complex complex10 = complex0.log();
      Complex complex11 = complex10.I.sinh();
      Complex complex12 = complex8.NaN.sin();
      double double1 = complex0.getArgument();
      Complex complex13 = complex8.add(complex3);
      Complex complex14 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.log();
      double double0 = complex1.getReal();
      Complex complex3 = complex1.add(complex2);
      double double1 = complex1.getImaginary();
      double double2 = complex1.getReal();
      boolean boolean0 = complex2.isNaN();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.multiply(951.765879826264);
      Complex complex3 = complex1.ONE.conjugate();
      Complex complex4 = complex1.I.log();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.INF.multiply((-2048.40682088));
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex2.pow(complex0);
      Complex complex8 = complex3.asin();
      double double0 = complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex1.ONE.sqrt();
      Complex complex4 = complex0.NaN.acos();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex5 = complex0.exp();
      ComplexField complexField1 = complex0.getField();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex7.INF.sin();
      Complex complex9 = complex8.pow(complex4);
      String string0 = complex3.toString();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex10 = complex1.sqrt();
      List<Complex> list1 = complex3.ONE.nthRoot(1);
      Complex complex11 = complex2.divide(complex6);
      Complex complex12 = complex11.NaN.sqrt1z();
      double double0 = complex3.getImaginary();
      Complex complex13 = complex2.multiply(complex0);
      double double1 = complex11.getReal();
      Complex complex14 = complex4.subtract(complex9);
      Complex complex15 = complex14.sinh();
      Complex complex16 = complex4.createComplex(Double.NaN, 6.283185307179586);
      Complex complex17 = complex7.divide(complex5);
      Complex complex18 = complex17.ZERO.log();
      Complex complex19 = complex7.divide(complex14);
      Complex complex20 = complex17.sin();
      Complex complex21 = complex20.INF.pow(complex4);
      Complex complex22 = complex11.atan();
      try { 
        complex8.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-3071.234417), 0.036);
      Complex complex1 = complex0.INF.exp();
      List<Complex> list0 = complex0.nthRoot(1);
      double double0 = complex0.INF.abs();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.NaN.createComplex(Double.POSITIVE_INFINITY, 9.219544613762692E-9);
      Complex complex6 = complex3.NaN.sqrt();
      Complex complex7 = complex4.divide(complex1);
      Complex complex8 = complex7.INF.add(complex4);
      Complex complex9 = complex3.tanh();
      double double1 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-0.2499999997677497), 0.0);
      double double0 = complex0.INF.getArgument();
      try { 
        complex0.NaN.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.tan();
      double double1 = complex0.getArgument();
      Complex complex5 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex1.NaN.sinh();
      Complex complex4 = complex0.createComplex(2670.0, (-741.7000729428506));
      boolean boolean0 = complex1.equals((Object) null);
      Object object0 = complex2.readResolve();
      boolean boolean1 = complex0.equals(object0);
      Complex complex5 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(5966.486, (-2161.638));
      Complex complex1 = new Complex(5966.486, (-1248.9989));
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = new Complex(5966.486, 2029.4014527595493);
      Complex complex4 = complex3.I.log();
      String string0 = complex4.I.toString();
      Object object1 = complex3.readResolve();
      Complex complex5 = complex0.ZERO.acos();
      boolean boolean0 = complex0.equals(object1);
      int int0 = complex3.hashCode();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = complex7.INF.multiply(complex3);
      Complex complex9 = complex2.multiply(complex4);
      Complex complex10 = complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = Complex.I;
      Complex complex7 = complex4.ZERO.add(complex6);
      Complex complex8 = complex4.ZERO.sin();
      Complex complex9 = complex0.multiply(complex4);
      Complex complex10 = complex9.ONE.subtract(complex3);
      Complex complex11 = complex2.exp();
      Complex complex12 = complex6.sin();
      String string0 = complex9.toString();
      Complex complex13 = complex7.subtract(complex4);
      Complex complex14 = complex7.exp();
      Complex complex15 = complex14.negate();
      Complex complex16 = complex15.tan();
      Object object0 = complex6.readResolve();
      Complex complex17 = complex0.tanh();
      Complex complex18 = complex5.atan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(219.017738, 0.0);
      Complex complex1 = complex0.NaN.negate();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.INF.multiply(complex4);
      Complex complex6 = complex2.ZERO.sqrt1z();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.NaN.sqrt1z();
      double double0 = complex0.getReal();
      double double1 = complex0.getImaginary();
      double double2 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.asin();
      String string0 = complex0.ZERO.toString();
      Complex complex2 = complex0.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex0.pow(complex2);
      ComplexField complexField0 = complex2.getField();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-1584.0), (-1584.0));
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.I.multiply((-3284.943223));
      double double0 = complex4.getArgument();
      Complex complex6 = complex3.acos();
      ComplexField complexField0 = complex4.getField();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex4.ONE.pow(complex1);
      double double1 = complex7.abs();
      Complex complex9 = Complex.I;
      Complex complex10 = complex1.divide(complex9);
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex6.ZERO.pow(complex7);
      boolean boolean0 = complex1.equals(complex11);
      Complex complex13 = complex6.exp();
      Complex complex14 = complex0.add(complex13);
      double double2 = complex0.getImaginary();
      Complex complex15 = complex6.createComplex((-3284.943223), (-885.29626502771));
      Complex complex16 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply((-1965.0));
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.ONE.atan();
      boolean boolean0 = complex1.equals(object0);
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex2.INF.divide(complex0);
      boolean boolean1 = complex0.isNaN();
      Complex complex7 = complex3.ZERO.cosh();
      Complex complex8 = complex5.I.sinh();
      Complex complex9 = complex8.NaN.divide(complex2);
      Complex complex10 = complex9.INF.multiply(complex5);
      Complex complex11 = complex3.ZERO.sqrt();
      Complex complex12 = complex2.I.exp();
      String string0 = complex10.ZERO.toString();
      Complex complex13 = complex3.cos();
      Complex complex14 = complex1.asin();
      Complex complex15 = complex5.conjugate();
      double double0 = complex15.getReal();
      Complex complex16 = complex2.add(complex6);
      Complex complex17 = complex15.exp();
      Complex complex18 = Complex.ONE;
      Complex complex19 = complex10.multiply(complex18);
      Complex complex20 = complex2.ONE.sqrt1z();
      Complex complex21 = complex6.cosh();
      ComplexField complexField0 = complex14.getField();
      Complex complex22 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.exp();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.createComplex(1766.585, 0.0);
      Complex complex5 = complex4.INF.tan();
      String string0 = complex5.I.toString();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = complex3.add(complex4);
      Complex complex9 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex0.multiply((-3372.3336272006));
      Complex complex5 = complex3.add(complex0);
      Object object0 = complex0.readResolve();
      Complex complex6 = complex4.divide(complex3);
      Complex complex7 = complex1.cos();
      Complex complex8 = complex4.divide(complex0);
      Complex complex9 = complex7.sqrt1z();
      String string0 = complex0.toString();
      Complex complex10 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(1270.85762967938, 1270.85762967938);
      Complex complex1 = complex0.I.multiply(2412.4755920032917);
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.ONE.atan();
      Complex complex5 = complex3.INF.log();
      Complex complex6 = complex0.ZERO.atan();
      Complex complex7 = complex6.I.createComplex(548.81357124, 0.0);
      Complex complex8 = complex3.I.negate();
      Complex complex9 = complex0.pow(complex3);
      Complex complex10 = complex9.INF.exp();
      Complex complex11 = complex8.ZERO.sinh();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex9.divide(complex12);
      Complex complex14 = complex0.ZERO.divide(complex1);
      Complex complex15 = complex0.cos();
      String string0 = complex8.toString();
      Complex complex16 = complex1.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.createComplex((-1552.932449), (-1552.932449));
      Complex complex2 = new Complex((-1394.1207814318), (-2116.92051));
      Complex complex3 = complex2.createComplex(1.073741824E9, (-4549.593));
      Complex complex4 = complex2.multiply(complex0);
      Complex complex5 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2730.72), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex1.NaN.acos();
      Complex complex4 = complex2.I.sin();
      Complex complex5 = complex0.createComplex(0.0, 0.0);
      Complex complex6 = complex5.ZERO.subtract(complex1);
      Complex complex7 = complex5.NaN.sqrt();
      int int0 = complex0.hashCode();
      Complex complex8 = complex5.INF.subtract(complex7);
      Complex complex9 = complex2.atan();
      double double0 = complex5.abs();
      double double1 = complex4.getArgument();
      boolean boolean0 = complex0.isInfinite();
      double double2 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-2216.4), 234.81917921);
      Complex complex1 = complex0.I.cos();
      Object object0 = complex0.I.readResolve();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.multiply((-2216.4));
      Complex complex4 = complex3.NaN.multiply(6.283185307179586);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      int int0 = complex0.NaN.hashCode();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(3486.18, 3486.18);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.ZERO.divide(complex2);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.NaN.pow(complex4);
      Complex complex6 = complex0.pow(complex1);
      double double0 = complex2.getReal();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ONE.negate();
      boolean boolean0 = complex0.equals(complex1);
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.ONE.exp();
      Complex complex4 = complex3.multiply(complex1);
      List<Complex> list0 = complex0.nthRoot(2105);
      Complex complex5 = complex2.exp();
      double double1 = complex5.NaN.getArgument();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.I.add(complex6);
      Complex complex9 = complex4.multiply(Double.NaN);
      ComplexField complexField0 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      double double0 = complex2.getReal();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.multiply(Double.NaN);
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.INF.pow(complex0);
      Complex complex4 = complex0.ZERO.log();
      double double0 = complex0.abs();
      Complex complex5 = complex4.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.625, 0.5000000000042687);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.I.sin();
      double double0 = complex3.ZERO.abs();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex3.I.acos();
      Complex complex6 = complex5.INF.tanh();
      ComplexField complexField0 = complex3.NaN.getField();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex7 = complex5.add(complex1);
      Complex complex8 = complex1.tan();
      Complex complex9 = complex8.INF.sinh();
      Complex complex10 = complex3.log();
      Complex complex11 = complex8.acos();
      Complex complex12 = complex10.ZERO.createComplex(0.625, 0.0);
      List<Complex> list0 = complex8.nthRoot(37);
      Complex complex13 = complex3.negate();
      Object object0 = complex13.readResolve();
      Complex complex14 = complex10.sinh();
      boolean boolean1 = complex4.isNaN();
      Complex complex15 = complex13.sin();
      Complex complex16 = complex15.ZERO.asin();
      String string0 = complex10.toString();
      Complex complex17 = complex10.negate();
      Complex complex18 = complex5.sin();
      boolean boolean2 = complex7.isNaN();
      ComplexField complexField1 = complex13.getField();
      ComplexField complexField2 = complex12.getField();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ONE.add(complex2);
      Complex complex5 = complex3.ZERO.createComplex(Double.NEGATIVE_INFINITY, (-3.940510424527919E-20));
      Complex complex6 = complex0.ONE.acos();
      Complex complex7 = complex0.log();
      boolean boolean0 = complex3.isNaN();
      Complex complex8 = complex5.exp();
      boolean boolean1 = complex0.isInfinite();
      Complex complex9 = complex8.sin();
      int int0 = complex3.hashCode();
      double double0 = complex1.abs();
      Complex complex10 = complex8.sin();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex0.ZERO.asin();
      Complex complex5 = complex0.INF.multiply(0.0);
      Complex complex6 = complex4.ONE.sinh();
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = complex3.ONE.pow(complex2);
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex3.conjugate();
      String string0 = complex0.toString();
      double double0 = complex5.abs();
      Complex complex11 = Complex.I;
      Complex complex12 = complex8.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ONE.createComplex(1092.3667419, 1092.3667419);
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.multiply((-223.4016083));
      Complex complex6 = complex2.createComplex(1092.3667419, (-204.0));
      Complex complex7 = complex2.add(complex6);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      double double0 = 3005.153470023;
      double double1 = (-1460.8177852523);
      Complex complex3 = null;
      try { 
        complex1.NaN.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      Complex complex1 = complex0.asin();
      boolean boolean0 = complex1.isNaN();
      Complex complex2 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.multiply(complex1);
      String string0 = complex0.toString();
      double double0 = complex1.I.getArgument();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex2.NaN.cos();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex0.sqrt1z();
      int int0 = complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex3 = complex2.INF.sqrt1z();
      int int0 = complex2.I.hashCode();
      Complex complex4 = complex0.I.exp();
      Complex complex5 = complex4.INF.tan();
      double double0 = complex4.NaN.getArgument();
      Complex complex6 = new Complex(1374.2867864334, (-1376.2779399));
      Complex complex7 = complex0.multiply(complex6);
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex8 = complex0.subtract(complex6);
      Complex complex9 = complex8.NaN.asin();
      List<Complex> list1 = complex6.nthRoot(517);
      Complex complex10 = complex0.asin();
      Complex complex11 = complex1.sinh();
      Complex complex12 = complex11.I.cosh();
      double double1 = complex10.getArgument();
      boolean boolean0 = complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      double double0 = complex0.getArgument();
      List<Complex> list0 = complex1.nthRoot(146);
      Complex complex2 = complex0.exp();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1314.6964877709938);
      Complex complex1 = complex0.asin();
      String string0 = complex1.ZERO.toString();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double double0 = 10.02152016;
      Complex complex0 = new Complex(10.02152016, 10.02152016);
      Complex complex1 = new Complex(10.02152016, 10.02152016);
      Complex complex2 = complex0.NaN.subtract(complex1);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex3 = complex0.cos();
      try { 
        complex1.nthRoot((-3318));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,318
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(3326.949, 4649.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.multiply(3326.949);
      Complex complex3 = complex0.createComplex(0.0, 4649.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.NaN.hashCode();
      try { 
        complex0.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.tan();
      double double1 = complex0.getArgument();
      Complex complex4 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex3.INF.cosh();
      Object object1 = complex0.readResolve();
      List<Complex> list0 = complex2.NaN.nthRoot(2130);
      Complex complex5 = complex2.createComplex((-2225.6337495), (-2225.6337495));
      Complex complex6 = complex5.I.tan();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex3.conjugate();
      Complex complex9 = complex3.add(complex0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex4.INF.sqrt();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.log();
      Complex complex6 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.ONE.sqrt1z();
      double double0 = complex1.I.getArgument();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.NaN.acos();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex4.exp();
      Complex complex9 = complex7.add(complex0);
      Complex complex10 = complex9.ONE.tan();
      Complex complex11 = complex9.ZERO.exp();
      Complex complex12 = complex3.atan();
      Complex complex13 = complex12.ONE.log();
      Complex complex14 = complex4.sqrt();
      ComplexField complexField0 = complex3.getField();
      Complex complex15 = complex3.exp();
      Complex complex16 = complex7.INF.tanh();
      List<Complex> list0 = complex15.nthRoot(6756);
      Complex complex17 = complex4.multiply(complex14);
      String string0 = complex0.ONE.toString();
      Complex complex18 = complex17.ONE.add(complex14);
      Complex complex19 = complex11.tan();
      ComplexField complexField1 = complex13.getField();
      Complex complex20 = complex14.acos();
      Complex complex21 = complex14.log();
      Complex complex22 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.I.acos();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex0.INF.atan();
      String string0 = complex1.toString();
      double double0 = complex0.getArgument();
      Complex complex5 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.ZERO.pow(complex0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex2.cos();
      List<Complex> list0 = complex3.nthRoot(150);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.I.hashCode();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Object object0 = complex1.ONE.readResolve();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex0.ONE.asin();
      Complex complex5 = complex4.I.sin();
      ComplexField complexField0 = complex4.ZERO.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex6.ZERO.sinh();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex8.ONE.tan();
      Complex complex10 = complex6.ONE.divide(complex0);
      Complex complex11 = complex4.I.subtract(complex2);
      Object object1 = complex1.ZERO.readResolve();
      List<Complex> list0 = complex1.nthRoot(1);
      boolean boolean1 = complex0.equals(complex6);
      Complex complex12 = complex2.multiply((double) 1);
      Complex complex13 = complex12.ONE.exp();
      Complex complex14 = complex12.NaN.tanh();
      Object object2 = new Object();
      boolean boolean2 = complex10.equals(object2);
      Complex complex15 = complex5.sinh();
      Complex complex16 = complex8.sinh();
      Complex complex17 = complex16.INF.log();
      Complex complex18 = complex9.divide(complex16);
      Complex complex19 = complex2.cosh();
      Complex complex20 = complex11.NaN.cosh();
      Complex complex21 = complex10.add(complex16);
      Complex complex22 = complex11.createComplex(1, (-64.42));
      Complex complex23 = complex2.cos();
      Complex complex24 = complex18.negate();
      double double0 = complex5.getImaginary();
      Object object3 = complex21.readResolve();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.INF.hashCode();
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.negate();
      double double1 = complex1.abs();
      double double2 = complex0.getReal();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.INF.conjugate();
      Complex complex4 = complex0.NaN.subtract(complex1);
      Complex complex5 = complex1.subtract(complex2);
      Complex complex6 = complex1.createComplex(0.0, 1.0);
      Complex complex7 = complex6.INF.add(complex4);
      double double3 = complex7.I.abs();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex1.negate();
      double double4 = complex3.getImaginary();
      Complex complex10 = complex2.cos();
      boolean boolean0 = complex10.isNaN();
      Complex complex11 = complex0.sin();
      Complex complex12 = complex11.ZERO.negate();
      Complex complex13 = complex10.NaN.divide(complex0);
      Complex complex14 = complex12.I.sqrt1z();
      double double5 = complex2.NaN.abs();
      Complex complex15 = complex11.ONE.sin();
      Complex complex16 = complex0.conjugate();
      Complex complex17 = complex0.sqrt();
      double double6 = complex17.NaN.getArgument();
      Complex complex18 = complex0.asin();
      Complex complex19 = complex5.multiply((-4604.6177522));
      Complex complex20 = complex1.createComplex(0.0, 1.0);
      ComplexField complexField0 = complex8.getField();
      Object object0 = complex9.readResolve();
      double double7 = complex1.getArgument();
      Complex complex21 = complex10.atan();
      double double8 = complex6.getImaginary();
      ComplexField complexField1 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.INF.sqrt1z();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.ONE.asin();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex6.I.atan();
      double double0 = complex3.getReal();
      Complex complex8 = complex4.log();
      double double1 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.ZERO.negate();
      Complex complex4 = complex1.ONE.sinh();
      Complex complex5 = complex2.INF.cos();
      List<Complex> list0 = complex5.I.nthRoot(1);
      Complex complex6 = complex2.log();
      String string0 = complex2.I.toString();
      Complex complex7 = complex0.multiply(0.0);
      Complex complex8 = complex0.conjugate();
      String string1 = complex0.toString();
      Complex complex9 = complex0.INF.exp();
      Complex complex10 = complex9.I.sqrt();
      List<Complex> list1 = complex1.nthRoot(1);
      Complex complex11 = complex0.negate();
      Complex complex12 = complex11.atan();
      Object object0 = complex12.readResolve();
      ComplexField complexField0 = complex6.getField();
      Complex complex13 = complex2.multiply(complex6);
      Complex complex14 = complex2.multiply(complex13);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex3.ONE.sqrt1z();
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex1.sqrt1z();
      double double0 = complex6.ONE.abs();
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex0.multiply(0.0);
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex9.INF.cos();
      Complex complex11 = complex10.ONE.cos();
      String string0 = complex9.I.toString();
      Complex complex12 = complex9.ONE.pow(complex0);
      String string1 = complex1.toString();
      Complex complex13 = complex7.multiply(complex1);
      Complex complex14 = complex6.multiply(0.0);
      Complex complex15 = complex0.add(complex6);
      Complex complex16 = complex2.cosh();
      Complex complex17 = complex7.sqrt1z();
      Complex complex18 = complex17.NaN.asin();
      Complex complex19 = complex15.createComplex(2180.718674704466, 0.0875862700108075);
      Complex complex20 = complex13.negate();
      boolean boolean1 = complex12.equals(complex2);
      boolean boolean2 = complex19.equals(complex17);
      int int0 = complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex1.ZERO.createComplex(1.0, 1015.6079432437);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.INF.exp();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.ONE.acos();
      double double0 = complex5.abs();
      Complex complex7 = complex5.INF.acos();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex7.ZERO.multiply(complex0);
      Complex complex10 = complex0.negate();
      String string0 = complex0.INF.toString();
      Complex complex11 = complex10.NaN.add(complex3);
      Complex complex12 = complex11.ONE.multiply(complex10);
      Complex complex13 = complex10.atan();
      Complex complex14 = complex13.divide(complex5);
      Complex complex15 = complex14.NaN.multiply(complex3);
      double double1 = complex5.NaN.getArgument();
      Complex complex16 = complex0.conjugate();
      String string1 = complex16.NaN.toString();
      Complex complex17 = complex5.divide(complex4);
      Complex complex18 = complex10.cos();
      Object object0 = complex18.ONE.readResolve();
      Complex complex19 = complex15.sin();
      List<Complex> list0 = complex19.ONE.nthRoot(1);
      Complex complex20 = complex0.sqrt();
      Complex complex21 = complex3.cosh();
      Object object1 = complex16.readResolve();
      Complex complex22 = complex14.divide(complex9);
  }
}
