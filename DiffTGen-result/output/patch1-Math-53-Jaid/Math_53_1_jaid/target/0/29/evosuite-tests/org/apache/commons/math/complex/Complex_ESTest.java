/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 12:18:38 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.ONE.conjugate();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex2.NaN.divide(complex5);
      Complex complex7 = complex6.log();
      Complex complex8 = complex4.NaN.pow(complex1);
      String string0 = complex8.INF.toString();
      Complex complex9 = complex1.NaN.atan();
      Complex complex10 = complex9.ONE.negate();
      Complex complex11 = complex1.ONE.multiply(0.0);
      Complex complex12 = complex1.asin();
      double double0 = complex12.getReal();
      Complex complex13 = complex11.I.pow(complex9);
      boolean boolean0 = complex2.equals(complex12);
      Complex complex14 = complex0.tanh();
      Complex complex15 = complex11.sin();
      double double1 = complex6.abs();
      Complex complex16 = complex0.sqrt();
      boolean boolean1 = complex15.isInfinite();
      double double2 = complex1.abs();
      ComplexField complexField0 = complex7.getField();
      Complex complex17 = complex16.atan();
      Complex complex18 = complex14.multiply(complex15);
      Complex complex19 = complex12.pow(complex7);
      double double3 = complex4.abs();
      Complex complex20 = complex1.multiply(complex5);
      Complex complex21 = complex13.cos();
      Complex complex22 = complex19.cosh();
      Complex complex23 = complex4.tanh();
      Complex complex24 = complex9.negate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.createComplex((-431.707082305), 402.24415);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.NaN.asin();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex4.ONE.atan();
      Complex complex8 = complex6.INF.tanh();
      Complex complex9 = complex6.divide(complex3);
      Complex complex10 = complex2.exp();
      Complex complex11 = complex10.ZERO.exp();
      Complex complex12 = complex1.asin();
      Complex complex13 = complex12.I.cos();
      Complex complex14 = complex12.asin();
      String string0 = complex14.ZERO.toString();
      List<Complex> list0 = complex14.nthRoot(37);
      Complex complex15 = Complex.ZERO;
      Complex complex16 = complex0.divide(complex15);
      Complex complex17 = complex0.atan();
      List<Complex> list1 = complex17.INF.nthRoot(37);
      Complex complex18 = complex0.subtract(complex6);
      Complex complex19 = complex18.NaN.sinh();
      double double0 = complex19.I.abs();
      Complex complex20 = complex18.cos();
      Object object0 = complex4.readResolve();
      Complex complex21 = complex17.atan();
      Complex complex22 = complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      String string0 = complex1.toString();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex1.ZERO.multiply(complex2);
      List<Complex> list0 = complex0.INF.nthRoot(1160);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex5.INF.negate();
      Complex complex10 = complex5.log();
      double double0 = complex7.I.getArgument();
      Complex complex11 = complex7.log();
      Complex complex12 = complex11.NaN.multiply(complex9);
      Complex complex13 = complex4.I.sinh();
      ComplexField complexField0 = complex13.NaN.getField();
      Complex complex14 = complex10.multiply(0.0);
      Complex complex15 = complex14.atan();
      Complex complex16 = complex5.createComplex(0.0, 1160);
      String string1 = complex1.INF.toString();
      Complex complex17 = complex16.createComplex(0.0, 5926.6);
      Complex complex18 = complex1.divide(complex16);
      boolean boolean0 = complex17.isNaN();
      Complex complex19 = complex5.atan();
      boolean boolean1 = complex10.isNaN();
      Complex complex20 = complex14.pow(complex19);
      Complex complex21 = complex20.cos();
      Complex complex22 = complex20.ONE.divide(complex15);
      Complex complex23 = complex7.sqrt();
      Complex complex24 = complex3.multiply(complex13);
      Complex complex25 = complex9.divide(complex13);
      try { 
        complex2.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sinh();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.createComplex((-8.0E298), (-8.0E298));
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex3.pow(complex1);
      Object object0 = complex4.NaN.readResolve();
      ComplexField complexField1 = complex0.ZERO.getField();
      double double0 = complex2.getArgument();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex0.add(complex2);
      String string0 = complex7.ONE.toString();
      Complex complex8 = complex1.conjugate();
      double double1 = complex4.ZERO.getArgument();
      String string1 = complex8.ONE.toString();
      Complex complex9 = complex0.ONE.createComplex((-2.356194490192345), Double.POSITIVE_INFINITY);
      Complex complex10 = complex7.divide(complex1);
      double double2 = complex6.getReal();
      Complex complex11 = complex4.conjugate();
      double double3 = complex7.abs();
      Complex complex12 = complex6.pow(complex1);
      Complex complex13 = complex8.multiply(Double.POSITIVE_INFINITY);
      double double4 = complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.I.nthRoot(1);
      Complex complex1 = complex0.NaN.createComplex(0.0, (-2053.8863175426177));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex1.I.log();
      Complex complex5 = complex3.ONE.sqrt();
      Complex complex6 = complex5.add(complex0);
      double double0 = complex2.abs();
      Complex complex7 = complex1.sin();
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = Complex.I;
      Complex complex9 = complex6.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      double double0 = complex1.getImaginary();
      Complex complex2 = complex1.multiply((-0.8813735870195429));
      Complex complex3 = complex1.multiply((-2058.5543390335));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-1901.5484825597564), 1196.6593);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.conjugate();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex3 = complex2.ONE.multiply(complex0);
      Complex complex4 = complex0.asin();
      Object object0 = complex4.INF.readResolve();
      Complex complex5 = complex0.ZERO.asin();
      Complex complex6 = complex3.INF.tan();
      Complex complex7 = complex2.subtract(complex0);
      Complex complex8 = complex0.ZERO.sqrt1z();
      Complex complex9 = complex8.INF.acos();
      boolean boolean0 = complex0.isNaN();
      Complex complex10 = complex8.I.sqrt();
      Complex complex11 = complex3.sqrt();
      Complex complex12 = complex11.sinh();
      double double0 = complex2.getArgument();
      Complex complex13 = complex0.log();
      Complex complex14 = new Complex((-2.5799015872425133), (-2.5799015872425133));
      Complex complex15 = complex10.add(complex14);
      Complex complex16 = complex1.negate();
      Complex complex17 = complex16.ZERO.asin();
      double double1 = complex9.getArgument();
      Complex complex18 = complex14.subtract(complex16);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(3992.58269, 3992.58269);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex1.ONE.pow(complex0);
      Complex complex4 = Complex.ZERO;
      String string0 = complex4.toString();
      Object object0 = complex4.readResolve();
      Complex complex5 = complex0.divide(complex4);
      double double0 = complex4.getImaginary();
      Complex complex6 = complex1.exp();
      double double1 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.add(complex1);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.ONE.sqrt();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex4 = complex0.INF.atan();
      Complex complex5 = complex1.atan();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex1.divide(complex6);
      Complex complex8 = complex0.negate();
      double double0 = 0.0;
      double double1 = (-2870.5123789325967);
      Complex complex9 = complex6.I.divide(complex5);
      try { 
        complex5.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.createComplex(0.6299605249474366, 0.097);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex2.INF.cosh();
      Complex complex7 = complex1.ZERO.cos();
      Complex complex8 = complex2.sqrt1z();
      int int0 = complex8.ZERO.hashCode();
      Complex complex9 = complex0.multiply(complex1);
      try { 
        complex0.I.nthRoot((-1199));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,199
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(396.8865013, 396.8865013);
      Complex complex1 = complex0.cos();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.NaN.asin();
      Object object0 = complex3.readResolve();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex3.equals(object0);
      Object object1 = complex0.readResolve();
      Complex complex5 = complex2.INF.cosh();
      List<Complex> list0 = complex1.NaN.nthRoot(1);
      Complex complex6 = complex2.ZERO.asin();
      double double0 = complex2.abs();
      double double1 = complex2.getArgument();
      ComplexField complexField1 = complex3.getField();
      Complex complex7 = complex0.asin();
      double double2 = complex4.getArgument();
      Complex complex8 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(2903.18346205854, 2903.18346205854);
      double double0 = complex0.getArgument();
      List<Complex> list0 = complex0.ONE.nthRoot(170);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.NaN.createComplex((-2082.0), 2.718281828459045);
      Complex complex4 = complex0.I.conjugate();
      Complex complex5 = complex3.I.asin();
      Complex complex6 = complex5.sinh();
      double double1 = complex0.getArgument();
      Complex complex7 = complex3.I.sqrt();
      String string0 = complex0.toString();
      int int0 = complex0.hashCode();
      Complex complex8 = complex3.I.atan();
      ComplexField complexField0 = complex3.getField();
      int int1 = complex0.hashCode();
      boolean boolean0 = complex4.equals((Object) null);
      Complex complex9 = complex0.divide(complex3);
      List<Complex> list1 = complex4.nthRoot(170);
      double double2 = complex5.getReal();
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex9.add(complex0);
      String string1 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex2.INF.conjugate();
      try { 
        complex2.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 564.143602788364);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.ONE.cosh();
      double double0 = complex0.I.getArgument();
      Complex complex3 = complex1.INF.cos();
      Complex complex4 = complex3.INF.createComplex(1384.512386, 0.0);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex2.ZERO.sinh();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.NaN.sin();
      Complex complex9 = complex8.NaN.conjugate();
      Complex complex10 = complex8.ZERO.cos();
      boolean boolean0 = complex2.isInfinite();
      Complex complex11 = complex8.sqrt1z();
      Complex complex12 = complex2.I.multiply((-386.09));
      boolean boolean1 = complex2.equals(complex0);
      Complex complex13 = complex2.negate();
      Complex complex14 = complex8.divide(complex2);
      Complex complex15 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex2.ONE.exp();
      Complex complex5 = complex0.ZERO.divide(complex1);
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex1.ZERO.asin();
      double double0 = complex0.I.getArgument();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.NaN.sqrt1z();
      Complex complex10 = complex1.negate();
      Complex complex11 = complex10.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.cosh();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex2.cos();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.add(complex3);
      Complex complex7 = complex3.divide(complex0);
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(1118.48671369, 1118.48671369);
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.ONE.asin();
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex0.createComplex((-1267.5958804621628), 1552.91245);
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex4.conjugate();
      double double0 = complex3.ONE.getArgument();
      Object object0 = complex1.readResolve();
      double double1 = complex3.getReal();
      double double2 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-342.805309921168), (-840.7757));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex3 = complex1.asin();
      double double0 = complex2.abs();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex0.cos();
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-144.81835483), Double.NaN);
      Complex complex1 = complex0.sqrt();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.tanh();
      double double1 = complex1.abs();
      Complex complex3 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.ZERO.divide(complex4);
      ComplexField complexField0 = complex5.ONE.getField();
      Complex complex6 = complex4.NaN.tan();
      double double0 = complex4.abs();
      Complex complex7 = complex4.INF.acos();
      String string0 = complex6.toString();
      Complex complex8 = complex3.subtract(complex6);
      double double1 = complex8.INF.getArgument();
      Complex complex9 = complex3.multiply(Double.NaN);
      Complex complex10 = complex9.ZERO.asin();
      Complex complex11 = complex0.tanh();
      Complex complex12 = complex11.INF.acos();
      Complex complex13 = complex2.tan();
      Complex complex14 = complex13.NaN.pow(complex4);
      Complex complex15 = complex13.I.cosh();
      List<Complex> list0 = complex9.nthRoot(17);
      Complex complex16 = complex1.sqrt1z();
      Complex complex17 = complex2.atan();
      Complex complex18 = complex1.pow(complex6);
      Complex complex19 = complex18.NaN.sqrt1z();
      double double2 = complex7.getReal();
      Complex complex20 = complex3.sin();
      Complex complex21 = Complex.NaN;
      Complex complex22 = complex9.subtract(complex21);
      Complex complex23 = Complex.NaN;
      Complex complex24 = complex20.subtract(complex23);
      Complex complex25 = complex2.negate();
      Complex complex26 = complex25.sqrt();
      List<Complex> list1 = complex16.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.NaN.sinh();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.cos();
      double double1 = 1.0;
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = new Complex(1.0, 0.0);
      Complex complex7 = complex4.divide(complex6);
      Complex complex8 = complex7.subtract(complex0);
      Complex complex9 = complex1.multiply(complex3);
      int int0 = complex3.I.hashCode();
      boolean boolean0 = complex1.isInfinite();
      Complex complex10 = complex3.INF.sinh();
      try { 
        complex3.INF.nthRoot((-1743));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,743
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.createComplex(0.0, Double.NaN);
      Complex complex3 = complex2.I.createComplex(Double.NaN, (-1.0));
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.exp();
      double double0 = complex1.getImaginary();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex0.tan();
      ComplexField complexField0 = complex7.ONE.getField();
      try { 
        complex2.nthRoot((-4700));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,700
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(1612.6746, 1612.6746);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex3.I.conjugate();
      Complex complex6 = complex5.INF.multiply(complex3);
      double double0 = complex1.NaN.abs();
      List<Complex> list0 = complex3.nthRoot(2990);
      Complex complex7 = complex1.divide(complex3);
      Complex complex8 = complex7.createComplex(2990, Double.NaN);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.ONE.multiply((-3288.2812655225));
      Complex complex11 = complex3.subtract(complex9);
      Object object0 = complex11.INF.readResolve();
      Complex complex12 = complex2.log();
      Complex complex13 = complex12.conjugate();
      Complex complex14 = complex11.sinh();
      Object object1 = complex7.readResolve();
      Complex complex15 = complex8.log();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-850.1240482017884), (-850.1240482017884));
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-2909.265), (-2909.265));
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.negate();
      int int0 = complex0.hashCode();
      Complex complex3 = complex2.ZERO.sin();
      List<Complex> list0 = complex1.nthRoot(2121);
      Complex complex4 = complex1.cos();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex5 = complex4.multiply((double) 2121);
      try { 
        complex5.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex1.ONE.cos();
      Object object1 = complex2.readResolve();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex0.exp();
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex7 = complex0.log();
      Complex complex8 = complex0.multiply(complex6);
      Complex complex9 = complex8.NaN.log();
      double double0 = complex8.NaN.getArgument();
      Complex complex10 = complex1.exp();
      double double1 = complex10.ONE.abs();
      Complex complex11 = complex10.ZERO.sin();
      double double2 = complex1.getReal();
      Complex complex12 = complex1.log();
      List<Complex> list0 = complex12.I.nthRoot(7);
      Complex complex13 = complex12.I.multiply(1.5707963267948966);
      Complex complex14 = complex12.ONE.negate();
      Object object2 = complex1.readResolve();
      Complex complex15 = complex7.sqrt1z();
      Complex complex16 = complex15.tan();
      Complex complex17 = complex6.tanh();
      Complex complex18 = complex2.sqrt();
      Complex complex19 = complex7.tan();
      Complex complex20 = complex4.createComplex(1.5707963267948966, 0.19999954104423523);
      Complex complex21 = complex5.pow(complex16);
      Complex complex22 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.createComplex(2500.0381962555302, 2500.0381962555302);
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex2.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.INF.sqrt();
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex2.NaN.sqrt1z();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex0.I.createComplex(0.0, 0.0);
      Complex complex7 = complex3.pow(complex2);
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2537.88342);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex1.ZERO.atan();
      Complex complex4 = complex0.ONE.pow(complex2);
      Complex complex5 = complex3.NaN.multiply(0.0);
      Complex complex6 = complex0.exp();
      Complex complex7 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      int int0 = complex1.hashCode();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.I.multiply(complex0);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex0.multiply((-250.520633051235));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      Complex complex1 = complex0.atan();
      double double0 = complex0.INF.getArgument();
      Complex complex2 = complex0.createComplex((-1.0), (-1.0));
      Complex complex3 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(4485.633249244, 4485.633249244);
      Complex complex1 = complex0.I.negate();
      String string0 = complex0.ZERO.toString();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.sqrt();
      double double0 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      double double0 = complex1.abs();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex1.INF.cosh();
      Complex complex5 = complex2.NaN.sinh();
      Complex complex6 = complex4.ZERO.tanh();
      double double1 = complex2.ZERO.abs();
      Complex complex7 = complex2.add(complex1);
      String string0 = complex7.I.toString();
      boolean boolean0 = complex2.equals(complex1);
      Complex complex8 = complex0.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(1002.08206, 1002.08206);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.ZERO.acos();
      boolean boolean1 = complex0.equals("");
      Complex complex3 = complex1.NaN.multiply(complex2);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-323.012821), (-323.012821));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.I.createComplex((-323.012821), 3045.26);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.NaN.log();
      double double0 = complex0.getReal();
      Complex complex4 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.sinh();
      double double0 = complex1.abs();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.exp();
      boolean boolean0 = complex4.isNaN();
      Complex complex5 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.log();
      List<Complex> list0 = complex1.I.nthRoot(78);
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-1259.84059), 0.0);
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.I.atan();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      List<Complex> list0 = complex1.INF.nthRoot(162);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.add(complex0);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.I.asin();
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex1.ONE.multiply(complex2);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex2.sinh();
      try { 
        complex5.I.nthRoot((-983));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -983
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex0.ZERO.cos();
      Complex complex4 = complex0.ZERO.divide(complex1);
      double double0 = complex0.abs();
      Complex complex5 = complex1.conjugate();
      Object object0 = complex5.ZERO.readResolve();
      Complex complex6 = complex5.sqrt1z();
      String string0 = complex4.toString();
      Complex complex7 = complex4.pow(complex0);
      Complex complex8 = complex0.exp();
      boolean boolean0 = complex1.equals(complex3);
      Complex complex9 = complex3.subtract(complex7);
      List<Complex> list0 = complex7.nthRoot(1);
      List<Complex> list1 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.ONE.tan();
      String string0 = complex0.ONE.toString();
      Complex complex4 = complex1.acos();
      boolean boolean0 = complex1.equals(complex2);
      double double0 = complex2.getReal();
      Object object0 = complex1.readResolve();
      Object object1 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      String string0 = complex0.toString();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex0.ZERO.tan();
      Complex complex4 = complex0.createComplex(3.0, 0.0);
      double double0 = complex4.I.abs();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex4.multiply(complex5);
      Complex complex7 = complex1.INF.sin();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex6.tan();
      Object object0 = complex9.INF.readResolve();
      Complex complex10 = complex4.sqrt();
      boolean boolean0 = complex6.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex1.tanh();
      Object object0 = complex2.ONE.readResolve();
      Complex complex3 = complex0.multiply((-1.0));
      Object object1 = new Object();
      boolean boolean0 = complex2.equals(object1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      List<Complex> list0 = complex2.nthRoot(1);
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex1.tan();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.subtract(complex0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex1.ONE.createComplex(872.8315, 872.8315);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex0.asin();
      int int0 = complex4.hashCode();
      Complex complex6 = complex1.INF.sqrt1z();
      ComplexField complexField0 = complex4.ZERO.getField();
      int int1 = complex4.hashCode();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex0.cos();
      ComplexField complexField1 = complex8.INF.getField();
      Complex complex9 = complex6.cos();
      Complex complex10 = complex1.add(complex3);
      Complex complex11 = complex10.acos();
      Complex complex12 = complex9.INF.tan();
      Object object0 = complex11.readResolve();
      Object object1 = complex9.readResolve();
      boolean boolean1 = complex2.equals(object1);
      double double0 = complex3.getReal();
      Complex complex13 = complex9.conjugate();
      Complex complex14 = complex12.exp();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.acos();
      double double0 = complex1.abs();
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = complex2.ZERO.cosh();
      Complex complex5 = complex3.subtract(complex2);
      double double1 = complex5.I.abs();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex6.NaN.sin();
      Complex complex8 = complex1.multiply((-117.9813));
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex9.INF.negate();
      Complex complex11 = complex9.INF.atan();
      Complex complex12 = complex11.INF.sqrt();
      Complex complex13 = complex1.ONE.sqrt1z();
      Complex complex14 = new Complex(1.0, 1.0);
      Complex complex15 = complex13.I.sqrt1z();
      Complex complex16 = complex14.asin();
      Complex complex17 = complex13.log();
      Complex complex18 = complex16.atan();
      Complex complex19 = complex13.multiply((-1525415.3177845));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.ONE.sqrt1z();
      int int0 = complex3.ONE.hashCode();
      double double0 = complex0.abs();
      double double1 = complex0.abs();
      Complex complex4 = complex0.tan();
      double double2 = complex0.abs();
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = new Complex(0.0, 1.0);
      Complex complex7 = complex5.multiply(complex6);
      String string0 = complex0.ONE.toString();
      double double3 = complex4.getImaginary();
      Object object0 = complex0.readResolve();
      ComplexField complexField1 = complex4.getField();
      Complex complex8 = complex1.divide(complex2);
      Complex complex9 = complex0.log();
      Complex complex10 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.ONE.sin();
      double double0 = complex1.ONE.abs();
      Complex complex4 = complex1.cos();
      double double1 = complex4.getImaginary();
      Complex complex5 = complex4.multiply(complex1);
      Complex complex6 = complex1.INF.multiply(complex0);
      double double2 = complex0.INF.abs();
      String string0 = complex0.ONE.toString();
      Complex complex7 = complex4.pow(complex2);
      int int0 = complex2.hashCode();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex8.INF.asin();
      Complex complex10 = complex9.ONE.tan();
      Complex complex11 = complex9.ONE.divide(complex0);
      Complex complex12 = complex11.I.sinh();
      int int1 = complex8.I.hashCode();
      Complex complex13 = complex4.conjugate();
      Complex complex14 = complex5.sin();
      Complex complex15 = complex14.NaN.tan();
      boolean boolean0 = complex2.equals(complex4);
      double double3 = complex14.getImaginary();
      Complex complex16 = complex5.log();
      Complex complex17 = complex4.INF.sqrt1z();
      Complex complex18 = complex2.tanh();
      Complex complex19 = complex18.ZERO.multiply(complex7);
      Complex complex20 = complex18.INF.sinh();
      Complex complex21 = complex0.add(complex8);
      Complex complex22 = complex8.atan();
      boolean boolean1 = complex5.isInfinite();
      Object object0 = complex8.readResolve();
      int int2 = complex3.hashCode();
      Complex complex23 = complex15.atan();
      Complex complex24 = complex1.sqrt();
      Complex complex25 = complex20.conjugate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.sinh();
      double double0 = complex5.getImaginary();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex6.ZERO.asin();
      double double1 = complex6.NaN.getArgument();
      Complex complex8 = complex7.createComplex(Double.NaN, 2.0);
      int int0 = complex7.INF.hashCode();
      Complex complex9 = complex8.NaN.tan();
      Object object0 = complex5.readResolve();
      String string0 = complex4.toString();
      Complex complex10 = complex3.atan();
      Complex complex11 = complex8.negate();
      Complex complex12 = complex8.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.NaN.divide(complex1);
      Complex complex4 = complex3.ZERO.asin();
      int int0 = complex0.I.hashCode();
      Complex complex5 = complex4.ONE.sqrt();
      String string0 = complex2.ONE.toString();
      Complex complex6 = complex0.ONE.add(complex2);
      Complex complex7 = complex6.I.log();
      Complex complex8 = complex7.asin();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex6.I.pow(complex9);
      Complex complex11 = complex10.NaN.sinh();
      ComplexField complexField0 = complex1.I.getField();
      int int1 = complex0.I.hashCode();
      double double1 = complex1.I.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex12 = complex4.cosh();
      Complex complex13 = complex1.acos();
      Complex complex14 = complex13.cosh();
      double double2 = complex14.abs();
      Complex complex15 = complex4.sinh();
      Complex complex16 = complex15.I.sinh();
      boolean boolean1 = complex4.isNaN();
      Complex complex17 = complex13.NaN.asin();
      Complex complex18 = complex17.NaN.tan();
      Object object0 = complex0.readResolve();
      Complex complex19 = complex9.multiply(1.0);
      Complex complex20 = complex5.log();
      Complex complex21 = complex14.cosh();
      int int2 = complex10.hashCode();
      Object object1 = complex15.readResolve();
      boolean boolean2 = complex6.isInfinite();
      int int3 = complex21.hashCode();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex2.add(complex1);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex3.INF.sqrt();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex7 = complex0.multiply((double) 1);
      double double0 = complex5.getImaginary();
      Complex complex8 = complex2.sinh();
      String string0 = complex8.I.toString();
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex2.conjugate();
      Complex complex11 = complex10.ONE.log();
      Complex complex12 = complex10.log();
      Complex complex13 = complex1.atan();
      double double1 = complex13.getArgument();
      boolean boolean0 = complex11.isInfinite();
      String string1 = complex3.toString();
      double double2 = complex5.abs();
      Complex complex14 = complex12.tanh();
      Complex complex15 = complex6.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1.0), 641.123);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.I.sqrt1z();
      String string0 = complex0.I.toString();
      int int0 = complex2.I.hashCode();
      Complex complex4 = complex0.INF.createComplex(159.282409775, 159.282409775);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.INF.multiply(641.123);
      Complex complex7 = complex0.conjugate();
      List<Complex> list0 = complex0.nthRoot(1258);
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex8.I.tanh();
      Complex complex10 = complex0.negate();
      Complex complex11 = complex10.ZERO.sin();
      Object object0 = complex10.INF.readResolve();
      Complex complex12 = complex10.I.sin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex13 = complex0.pow(complex2);
      Complex complex14 = complex8.INF.exp();
      Complex complex15 = complex9.add(complex6);
      double double0 = complex9.abs();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt1z();
      String string0 = complex0.INF.toString();
      Complex complex2 = complex0.negate();
      double double0 = complex2.getReal();
      Complex complex3 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.ZERO.tanh();
      ComplexField complexField0 = complex2.getField();
      int int0 = complex2.ZERO.hashCode();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
