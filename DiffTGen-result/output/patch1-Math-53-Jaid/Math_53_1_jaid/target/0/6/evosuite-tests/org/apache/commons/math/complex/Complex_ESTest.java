/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 12:07:55 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.sinh();
      double double0 = complex1.ZERO.getArgument();
      List<Complex> list0 = complex0.nthRoot(1);
      String string0 = complex0.toString();
      Complex complex2 = complex0.sinh();
      String string1 = complex1.toString();
      Complex complex3 = complex1.exp();
      int int0 = complex3.INF.hashCode();
      int int1 = complex1.hashCode();
      Complex complex4 = complex1.createComplex((-2527.60152), 0.0);
      double double1 = complex0.getReal();
      Complex complex5 = complex3.sqrt();
      Object object0 = complex5.INF.readResolve();
      double double2 = complex3.getImaginary();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex0.tanh();
      Complex complex9 = new Complex(0.7456241416655579, 0.7456241416655579);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(4030.10462, 4030.10462);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      double double0 = complex1.abs();
      Complex complex3 = complex1.ZERO.asin();
      Complex complex4 = complex1.negate();
      int int0 = complex4.I.hashCode();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.ONE.tan();
      Complex complex7 = complex2.multiply(complex3);
      Object object0 = complex5.readResolve();
      Complex complex8 = complex2.multiply(1.0);
      Complex complex9 = complex8.NaN.createComplex((-1.0), 4030.10462);
      Complex complex10 = complex4.negate();
      double double1 = complex10.NaN.getArgument();
      Complex complex11 = complex4.cosh();
      Complex complex12 = complex5.tan();
      Complex complex13 = complex1.multiply(1.0);
      Complex complex14 = complex13.ONE.conjugate();
      Complex complex15 = complex13.I.sin();
      Complex complex16 = complex6.divide(complex5);
      Complex complex17 = complex11.sqrt1z();
      Complex complex18 = complex11.sqrt1z();
      Complex complex19 = complex3.subtract(complex0);
      Complex complex20 = complex18.sin();
      Complex complex21 = complex20.ONE.multiply(complex4);
      ComplexField complexField0 = complex16.getField();
      Complex complex22 = complex3.atan();
      Object object1 = complex0.readResolve();
      Complex complex23 = complex22.asin();
      Complex complex24 = complex8.multiply(complex19);
      Complex complex25 = complex3.asin();
      Complex complex26 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex3.subtract(complex2);
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex8.tan();
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex7.acos();
      Complex complex12 = complex8.ZERO.createComplex(0.0, (-1780.67017238));
      Complex complex13 = complex6.negate();
      Complex complex14 = complex8.negate();
      boolean boolean0 = complex14.equals(complex7);
      Complex complex15 = complex0.cosh();
      Complex complex16 = complex2.divide(complex1);
      Complex complex17 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex3.ONE.tanh();
      List<Complex> list0 = complex3.I.nthRoot(1);
      Complex complex5 = complex3.ONE.divide(complex0);
      Complex complex6 = complex2.NaN.multiply(complex1);
      String string0 = complex0.toString();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex3.tan();
      Complex complex9 = complex1.ZERO.pow(complex6);
      Complex complex10 = complex9.INF.log();
      Complex complex11 = complex7.sin();
      int int0 = complex5.ONE.hashCode();
      Complex complex12 = complex4.log();
      Complex complex13 = complex12.tanh();
      Complex complex14 = complex5.cos();
      Complex complex15 = complex14.INF.log();
      int int1 = complex15.ONE.hashCode();
      Complex complex16 = complex12.negate();
      Complex complex17 = complex7.exp();
      Complex complex18 = complex11.sqrt1z();
      Complex complex19 = complex0.ONE.exp();
      Complex complex20 = complex18.NaN.atan();
      Complex complex21 = complex18.createComplex(0.0, (-1423.2342755196912));
      Complex complex22 = complex16.sqrt();
      Complex complex23 = complex17.sinh();
      boolean boolean0 = complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(2292.43, 2292.43);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.createComplex(39.3793, 2292.43);
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex0.ZERO.tanh();
      Complex complex5 = complex4.ONE.tan();
      int int0 = complex4.I.hashCode();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex8.divide(complex0);
      Complex complex10 = complex6.sqrt();
      String string0 = complex5.toString();
      Complex complex11 = complex8.conjugate();
      Complex complex12 = complex11.I.log();
      Complex complex13 = complex8.cosh();
      Complex complex14 = complex1.negate();
      Complex complex15 = complex6.INF.multiply(complex11);
      Complex complex16 = complex14.ZERO.multiply(0.0);
      Complex complex17 = complex6.multiply(complex14);
      Complex complex18 = complex12.cos();
      double double0 = complex9.getReal();
      Complex complex19 = complex4.divide(complex11);
      double double1 = complex9.abs();
      boolean boolean0 = complex10.isInfinite();
      double double2 = complex19.getReal();
      List<Complex> list1 = complex18.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.INF.tan();
      Complex complex5 = complex3.I.atan();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex5.ONE.multiply(Double.NaN);
      Complex complex9 = complex8.ONE.cos();
      double double0 = complex3.abs();
      String string0 = complex2.toString();
      Complex complex10 = complex4.pow(complex0);
      Complex complex11 = complex1.negate();
      boolean boolean0 = complex0.equals(complex2);
      boolean boolean1 = complex4.isNaN();
      Complex complex12 = complex0.I.atan();
      Complex complex13 = complex8.ZERO.subtract(complex9);
      Complex complex14 = complex13.tan();
      double double1 = complex11.getReal();
      List<Complex> list0 = complex11.nthRoot(1792);
      Complex complex15 = complex9.conjugate();
      Complex complex16 = complex9.multiply(0.0);
      Complex complex17 = complex11.acos();
      Complex complex18 = complex15.sin();
      Complex complex19 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex0.I.cosh();
      Complex complex4 = complex2.NaN.tan();
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex2.I.add(complex0);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex0.acos();
      double double0 = complex8.INF.abs();
      Complex complex9 = complex2.add(complex3);
      int int0 = complex3.hashCode();
      int int1 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 3943.57;
      try { 
        complex0.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 784.52;
      Complex complex0 = new Complex(784.52, 2.2250738585072014E-308);
      Complex complex1 = complex0.NaN.createComplex(2.2250738585072014E-308, 2345.522701836577);
      double double1 = 0.0;
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex3.sqrt1z();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(401.81, 401.81);
      Complex complex1 = complex0.INF.multiply(401.81);
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.INF.cosh();
      Complex complex8 = complex4.I.divide(complex0);
      Complex complex9 = complex8.I.sqrt();
      boolean boolean0 = complex4.equals(complex0);
      double double1 = complex4.getImaginary();
      Complex complex10 = complex1.ONE.cos();
      Complex complex11 = complex9.tan();
      Complex complex12 = complex3.cos();
      Complex complex13 = complex11.multiply((-1489.7074754986));
      Complex complex14 = complex1.sinh();
      Complex complex15 = complex6.pow(complex4);
      Complex complex16 = complex15.ZERO.sqrt();
      Complex complex17 = complex1.pow(complex2);
      double double2 = complex17.I.abs();
      Complex complex18 = complex15.sin();
      String string0 = complex13.toString();
      Complex complex19 = Complex.I;
      Complex complex20 = complex5.add(complex19);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 7.549789948768648E-8;
      Complex complex1 = complex0.createComplex(1429.54157, 7.549789948768648E-8);
      double double1 = complex0.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.NaN.add(complex1);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex2.I.createComplex(7.549789948768648E-8, 7.549789948768648E-8);
      Complex complex7 = complex4.NaN.acos();
      int int0 = complex7.ZERO.hashCode();
      int int1 = complex1.NaN.hashCode();
      int int2 = complex4.hashCode();
      Complex complex8 = complex1.subtract(complex7);
      Complex complex9 = complex4.ZERO.sin();
      // Undeclared exception!
      complex9.I.nthRoot(5031);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-434.0), (-434.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.divide(complex1);
      double double0 = complex3.ONE.getArgument();
      Complex complex4 = complex0.tanh();
      double double1 = complex4.INF.abs();
      Complex complex5 = complex4.I.multiply(complex0);
      boolean boolean0 = complex4.isNaN();
      Complex complex6 = complex4.acos();
      boolean boolean1 = complex5.isInfinite();
      String string0 = complex2.toString();
      Complex complex7 = complex1.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.multiply((-1.0));
      Complex complex3 = complex1.INF.cos();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex1.ZERO.subtract(complex4);
      Complex complex6 = complex5.NaN.tanh();
      Complex complex7 = complex5.NaN.createComplex(0.0, 0.0);
      Complex complex8 = complex0.divide(complex1);
      Complex complex9 = complex1.multiply(complex0);
      Complex complex10 = complex0.createComplex(1348.6057165563814, 16.0);
      Complex complex11 = complex5.cos();
      int int0 = complex10.hashCode();
      Complex complex12 = complex10.cosh();
      Object object0 = complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex1.cos();
      List<Complex> list0 = complex0.nthRoot(746);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex4.NaN.acos();
      Complex complex7 = complex6.I.add(complex3);
      Complex complex8 = complex6.NaN.sin();
      int int0 = complex7.ZERO.hashCode();
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex0.negate();
      Complex complex11 = complex2.createComplex((-2186.91879209977), (-2186.91879209977));
      Object object0 = complex11.ZERO.readResolve();
      Object object1 = complex0.ZERO.readResolve();
      Complex complex12 = complex2.createComplex(746, 1.0);
      int int1 = complex1.ONE.hashCode();
      Complex complex13 = complex2.multiply((double) 746);
      Complex complex14 = complex11.cos();
      Complex complex15 = complex4.divide(complex0);
      Complex complex16 = complex10.cosh();
      double double0 = complex4.getArgument();
      Complex complex17 = complex7.log();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex((-0.25), (-0.25));
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex2.INF.tanh();
      List<Complex> list0 = complex1.nthRoot(1724);
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex6.exp();
      boolean boolean0 = complex1.isNaN();
      boolean boolean1 = complex4.equals(complex6);
      double double0 = complex1.getArgument();
      Complex complex8 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-1761.7193136445), (-1761.7193136445));
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.NaN.multiply(0.0);
      int int1 = complex2.I.hashCode();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex1.ONE.sqrt1z();
      double double0 = complex5.I.abs();
      Complex complex6 = complex4.NaN.log();
      Complex complex7 = complex6.ZERO.asin();
      String string0 = complex6.NaN.toString();
      Complex complex8 = complex4.multiply(0.0);
      Object object0 = complex0.readResolve();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex0.divide(complex8);
      Complex complex11 = complex10.divide(complex8);
      Complex complex12 = complex4.cosh();
      Complex complex13 = complex12.I.sinh();
      Complex complex14 = complex13.NaN.pow(complex4);
      Complex complex15 = complex12.conjugate();
      Complex complex16 = complex6.cosh();
      String string1 = complex16.INF.toString();
      Complex complex17 = complex16.ZERO.conjugate();
      double double1 = complex0.getArgument();
      Complex complex18 = complex7.pow(complex1);
      Complex complex19 = complex18.ONE.createComplex(1.0, Double.POSITIVE_INFINITY);
      Complex complex20 = complex4.multiply(1.5707963267948966);
      boolean boolean0 = complex5.isInfinite();
      Complex complex21 = complex1.cosh();
      Complex complex22 = complex2.tan();
      boolean boolean1 = complex18.isNaN();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex((-3341.47189112), (-1446.05619481));
      Complex complex2 = complex1.NaN.asin();
      double double0 = complex1.abs();
      Complex complex3 = complex1.ZERO.createComplex((-3270.3), (-797.2036519736631));
      Complex complex4 = complex0.NaN.sinh();
      int int0 = complex1.I.hashCode();
      Complex complex5 = complex3.log();
      int int1 = complex5.ONE.hashCode();
      Complex complex6 = complex2.add(complex1);
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex7.I.cosh();
      Complex complex9 = complex8.INF.atan();
      Complex complex10 = complex7.multiply(complex0);
      Complex complex11 = complex10.ONE.acos();
      Complex complex12 = complex3.ONE.tanh();
      List<Complex> list0 = complex12.NaN.nthRoot(3520);
      Complex complex13 = complex2.sin();
      double double1 = complex1.abs();
      Complex complex14 = complex3.exp();
      Complex complex15 = complex14.I.asin();
      Complex complex16 = complex14.asin();
      Complex complex17 = complex5.ONE.negate();
      Complex complex18 = complex3.atan();
      Complex complex19 = complex18.ONE.createComplex((-797.2036519736631), 57.2957763671875);
      ComplexField complexField0 = complex1.getField();
      Complex complex20 = complex5.acos();
      boolean boolean0 = complex18.isInfinite();
      Complex complex21 = complex4.createComplex((-797.2036519736631), (-1446.05619481));
      Complex complex22 = complex7.asin();
      Complex complex23 = complex4.exp();
      String string0 = complex4.toString();
      Complex complex24 = complex19.tan();
      Complex complex25 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.exp();
      double double0 = complex3.abs();
      int int0 = complex2.hashCode();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.divide(complex3);
      Complex complex6 = complex4.I.tan();
      double double1 = complex4.NaN.getArgument();
      double double2 = complex6.ONE.getArgument();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex7.ONE.divide(complex2);
      Complex complex9 = complex5.ONE.tan();
      Complex complex10 = complex7.I.add(complex0);
      Complex complex11 = complex10.I.negate();
      Complex complex12 = complex0.conjugate();
      Complex complex13 = complex0.I.exp();
      try { 
        complex5.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.multiply(0.0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.NaN.pow(complex1);
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex1.ZERO.tan();
      double double0 = complex4.ONE.abs();
      Complex complex7 = complex0.ONE.sqrt();
      String string0 = complex3.toString();
      Complex complex8 = complex0.pow(complex3);
      double double1 = complex1.NaN.getArgument();
      double double2 = complex1.getImaginary();
      double double3 = complex8.abs();
      Complex complex9 = complex3.exp();
      Complex complex10 = new Complex(2517.9204016, Double.NaN);
      boolean boolean0 = complex7.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-654.986905), (-654.986905));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex0.I.acos();
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex7.NaN.cosh();
      Complex complex9 = complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, (-1.0));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.sqrt();
      double double0 = complex4.abs();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex5.ONE.sqrt1z();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex7 = complex6.NaN.divide(complex3);
      Complex complex8 = complex7.NaN.atan();
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex4.NaN.conjugate();
      Complex complex11 = complex9.acos();
      Complex complex12 = complex6.asin();
      double double1 = complex12.getArgument();
      Complex complex13 = complex12.NaN.acos();
      Complex complex14 = complex0.I.subtract(complex6);
      Complex complex15 = complex3.add(complex5);
      double double2 = complex15.NaN.abs();
      double double3 = complex3.INF.getArgument();
      boolean boolean1 = complex15.isNaN();
      Complex complex16 = complex7.multiply(complex9);
      Complex complex17 = complex3.multiply(Double.NaN);
      String string0 = complex6.toString();
      Complex complex18 = complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-1.7976931348623157E308), 1023.6);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.log();
      String string0 = complex2.I.toString();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex1.multiply((-2949.2267522));
      Complex complex7 = complex0.multiply((-1932.9133289518822));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.NaN.multiply(complex3);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(919.39303743, (-469.218635));
      Complex complex1 = complex0.sinh();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex3.sqrt1z();
      double double0 = complex0.getArgument();
      Object object1 = complex3.ONE.readResolve();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex2.divide(complex0);
      double double1 = complex5.getArgument();
      double double2 = complex0.abs();
      Complex complex7 = complex2.add(complex5);
      double double3 = complex7.NaN.abs();
      double double4 = complex0.getArgument();
      double double5 = complex5.getArgument();
      Complex complex8 = complex1.subtract(complex3);
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex9.conjugate();
      ComplexField complexField0 = complex0.getField();
      Complex complex11 = complex1.add(complex7);
      Complex complex12 = complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply((-41.1));
      Complex complex2 = complex1.ONE.multiply(0.0);
      String string0 = complex1.NaN.toString();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex3.ZERO.sin();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.NaN.conjugate();
      Complex complex5 = complex3.ONE.cosh();
      Complex complex6 = complex5.ONE.tanh();
      int int0 = complex4.ONE.hashCode();
      Complex complex7 = complex3.ONE.acos();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex7.NaN.subtract(complex3);
      double double0 = complex3.abs();
      Complex complex10 = complex8.divide(complex6);
      Complex complex11 = complex3.add(complex0);
      Complex complex12 = complex9.exp();
      Complex complex13 = complex11.exp();
      try { 
        complex13.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(2930.3896095211, (-3.141592653589793));
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-366.002548), (-366.002548));
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.NaN.sqrt1z();
      ComplexField complexField0 = complex0.I.getField();
      double double0 = complex0.NaN.abs();
      ComplexField complexField1 = complex0.getField();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.I.acos();
      ComplexField complexField2 = complex1.I.getField();
      Complex complex5 = complex4.ONE.subtract(complex0);
      Complex complex6 = complex0.divide(complex3);
      Complex complex7 = complex6.ZERO.sqrt();
      List<Complex> list0 = complex0.nthRoot(2271);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex4.multiply(complex1);
      Complex complex10 = complex3.tanh();
      int int0 = complex1.hashCode();
      Object object0 = complex9.INF.readResolve();
      Complex complex11 = complex3.exp();
      Complex complex12 = complex10.divide(complex2);
      Complex complex13 = complex8.conjugate();
      double double1 = complex9.getImaginary();
      Complex complex14 = complex5.log();
      Complex complex15 = complex8.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(2449.3, 2449.3);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.conjugate();
      String string0 = complex2.toString();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex3.INF.subtract(complex1);
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex5.I.sqrt1z();
      Complex complex10 = complex1.sin();
      Complex complex11 = complex10.multiply(2449.3);
      Complex complex12 = complex9.sin();
      Complex complex13 = complex12.tan();
      Complex complex14 = complex2.sqrt();
      List<Complex> list0 = complex14.INF.nthRoot(1);
      Complex complex15 = complex3.sinh();
      Complex complex16 = complex15.ZERO.tan();
      double double0 = complex9.getArgument();
      Complex complex17 = complex1.cos();
      Complex complex18 = complex14.sin();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, 346.8738360058558);
      Complex complex2 = complex0.I.add(complex1);
      Object object0 = complex0.INF.readResolve();
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = complex3.I.pow(complex1);
      String string0 = complex2.NaN.toString();
      Complex complex5 = complex1.acos();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex2.atan();
      double double0 = complex6.getImaginary();
      double double1 = complex4.abs();
      Complex complex8 = complex3.subtract(complex0);
      Complex complex9 = complex3.createComplex(346.8738360058558, 2.3268596768579254E-237);
      double double2 = complex8.getImaginary();
      Complex complex10 = complex7.I.acos();
      Complex complex11 = complex1.acos();
      Complex complex12 = complex2.pow(complex7);
      Complex complex13 = complex12.ONE.tan();
      Complex complex14 = complex13.ZERO.divide(complex5);
      try { 
        complex2.nthRoot((-1846));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,846
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.divide(complex2);
      double double0 = complex0.getReal();
      Complex complex4 = complex3.cos();
      double double1 = complex2.abs();
      Complex complex5 = complex0.sqrt1z();
      double double2 = complex4.getReal();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex6.ZERO.conjugate();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      String string0 = complex0.NaN.toString();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex5.INF.sqrt1z();
      Complex complex8 = complex4.sinh();
      Complex complex9 = complex4.tanh();
      String string1 = complex5.toString();
      Object object0 = complex3.readResolve();
      Complex complex10 = complex4.multiply(complex0);
      Complex complex11 = complex8.tanh();
      Complex complex12 = complex11.subtract(complex7);
      Complex complex13 = complex12.ZERO.createComplex((-400.7846), 0.0);
      Complex complex14 = complex3.conjugate();
      Complex complex15 = complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.negate();
      try { 
        complex0.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.INF.divide(complex0);
      Complex complex4 = complex0.sqrt1z();
      double double0 = complex0.abs();
      double double1 = complex0.abs();
      Complex complex5 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = Complex.ONE;
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.INF.cos();
      int int1 = complex4.INF.hashCode();
      Complex complex6 = complex5.ONE.tanh();
      int int2 = complex4.I.hashCode();
      Complex complex7 = complex4.I.multiply(394.4);
      List<Complex> list0 = complex3.NaN.nthRoot(2659);
      double double0 = complex0.getReal();
      Complex complex8 = complex3.exp();
      Complex complex9 = complex8.I.tanh();
      Complex complex10 = complex8.cos();
      Complex complex11 = complex10.cosh();
      int int3 = complex5.hashCode();
      Complex complex12 = complex11.negate();
      Complex complex13 = complex7.tanh();
      Complex complex14 = complex0.sqrt1z();
      Complex complex15 = complex3.divide(complex5);
      Complex complex16 = complex8.sinh();
      boolean boolean0 = complex15.isInfinite();
      Complex complex17 = complex6.exp();
      boolean boolean1 = complex14.isNaN();
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex2.divide(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.NaN.acos();
      String string0 = complex3.NaN.toString();
      Complex complex4 = complex0.ONE.tan();
      Complex complex5 = complex4.INF.divide(complex3);
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.ONE.divide(complex3);
      Complex complex9 = complex1.exp();
      Complex complex10 = complex2.ONE.createComplex((-325.70031272604), 0.0);
      Complex complex11 = complex0.log();
      Complex complex12 = complex1.NaN.multiply(0.0);
      Complex complex13 = complex7.sin();
      Complex complex14 = complex3.pow(complex11);
      Complex complex15 = complex7.cosh();
      Complex complex16 = complex7.cos();
      Complex complex17 = complex11.sqrt1z();
      Complex complex18 = complex7.cosh();
      Complex complex19 = Complex.ZERO;
      Complex complex20 = complex4.subtract(complex19);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-1339.61365), 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex3.I.asin();
      List<Complex> list0 = complex3.INF.nthRoot(37);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex5.multiply((-1339.61365));
      double double0 = complex5.INF.getArgument();
      double double1 = complex6.I.abs();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.ONE.tan();
      boolean boolean0 = complex6.isInfinite();
      Complex complex9 = complex5.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.negate();
      Complex complex6 = complex4.ZERO.divide(complex0);
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex5.divide(complex4);
      Complex complex10 = complex7.pow(complex9);
      Complex complex11 = complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 6.283185307179586);
      int int0 = (-1);
      Complex complex1 = complex0.ZERO.acos();
      try { 
        complex0.I.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.INF.add(complex1);
      double double0 = complex0.NaN.getArgument();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex2.ONE.cosh();
      Complex complex6 = complex3.tanh();
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.ONE.sqrt();
      Complex complex9 = complex5.asin();
      Complex complex10 = complex9.NaN.cos();
      Complex complex11 = complex1.INF.pow(complex5);
      Complex complex12 = complex11.ONE.conjugate();
      ComplexField complexField1 = complex9.ONE.getField();
      Complex complex13 = complex7.ONE.createComplex(Double.NaN, (-1.0));
      Complex complex14 = complex0.subtract(complex2);
      double double1 = complex5.getReal();
      Complex complex15 = complex3.sin();
      double double2 = complex15.abs();
      boolean boolean0 = complex5.equals(complex14);
      Complex complex16 = complex0.createComplex(1.5430806348152437, 0.2);
      double double3 = complex1.abs();
      Complex complex17 = complex15.multiply(866.0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex3.INF.conjugate();
      Complex complex6 = complex2.NaN.sqrt1z();
      Complex complex7 = complex6.NaN.sinh();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex8.add(complex2);
      double double0 = complex9.getArgument();
      double double1 = complex2.getArgument();
      Object object0 = complex2.readResolve();
      Complex complex10 = complex9.log();
      Complex complex11 = complex10.I.multiply(complex2);
      Complex complex12 = complex5.sin();
      double double2 = complex9.abs();
      Complex complex13 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.ONE.sin();
      try { 
        complex0.nthRoot((-1561));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,561
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.multiply(230.355593);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex1.sqrt();
      double double0 = complex4.I.getArgument();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.I.divide(complex2);
      String string0 = complex4.toString();
      Complex complex7 = complex0.asin();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex7.multiply(complex8);
      double double1 = complex6.getArgument();
      Complex complex10 = complex1.multiply(complex0);
      Complex complex11 = complex10.cos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1.7168146928204135));
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.INF.sqrt();
      Complex complex5 = complex1.ZERO.conjugate();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-1285.0), (-1285.0));
      String string0 = complex0.toString();
      Complex complex1 = Complex.INF;
      String string1 = complex1.ONE.toString();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex1.add(complex0);
      Complex complex7 = Complex.NaN;
      boolean boolean0 = complex3.equals(complex7);
      Complex complex8 = complex2.subtract(complex3);
      Complex complex9 = complex8.ONE.multiply(complex7);
      Complex complex10 = complex0.asin();
      Object object0 = complex10.I.readResolve();
      double double0 = complex2.I.getArgument();
      Complex complex11 = complex10.ZERO.log();
      Complex complex12 = complex6.cosh();
      Complex complex13 = complex12.pow(complex6);
      Complex complex14 = complex13.pow(complex7);
      Complex complex15 = complex12.INF.sqrt();
      Complex complex16 = complex10.subtract(complex6);
      double double1 = complex8.getReal();
      Complex complex17 = complex6.add(complex16);
      Complex complex18 = complex14.exp();
      double double2 = complex8.getImaginary();
      Complex complex19 = complex17.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex5.createComplex((-8.0E298), Double.NaN);
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.ZERO.negate();
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex6.ZERO.pow(complex7);
      Complex complex11 = complex1.subtract(complex6);
      Complex complex12 = complex0.ONE.divide(complex8);
      Complex complex13 = complex0.ONE.log();
      Complex complex14 = complex11.INF.cos();
      Complex complex15 = complex14.ONE.log();
      Complex complex16 = complex4.atan();
      Complex complex17 = complex0.NaN.negate();
      Complex complex18 = complex5.createComplex((-119.3896727), (-8.0E298));
      Complex complex19 = complex1.subtract(complex16);
      Complex complex20 = complex5.negate();
      Complex complex21 = complex6.add(complex19);
      String string0 = complex19.toString();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.ZERO.createComplex(3170.0, 3170.0);
      String string0 = complex0.toString();
      Complex complex3 = complex0.sqrt();
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.conjugate();
      String string0 = complex1.toString();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.conjugate();
      int int0 = complex1.hashCode();
      double double0 = complex0.getArgument();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      int int0 = complex0.hashCode();
      Complex complex3 = complex1.tanh();
      double double0 = complex0.getArgument();
      double double1 = complex0.abs();
      Complex complex4 = complex0.sqrt();
      double double2 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.NaN.subtract(complex1);
      Complex complex5 = complex1.sin();
      Object object0 = complex5.readResolve();
      Complex complex6 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.multiply((-2072.02221));
      Complex complex4 = complex1.ONE.createComplex((-2072.02221), (-2072.02221));
      Complex complex5 = complex3.ZERO.log();
      Complex complex6 = complex0.INF.multiply((-2072.02221));
      Complex complex7 = complex5.ZERO.sinh();
      Complex complex8 = complex7.INF.createComplex((-2072.02221), (-2072.02221));
      Complex complex9 = complex7.tan();
      Complex complex10 = complex7.I.sinh();
      double double0 = complex0.getReal();
      Complex complex11 = complex5.tanh();
      Complex complex12 = complex0.cos();
      Complex complex13 = complex5.ONE.sqrt1z();
      Complex complex14 = complex13.ONE.tanh();
      Complex complex15 = complex11.asin();
      Complex complex16 = complex1.INF.conjugate();
      Complex complex17 = complex2.createComplex((-2072.02221), 6.283185307179586);
      Complex complex18 = complex8.sinh();
      Complex complex19 = complex3.tan();
      Complex complex20 = complex7.sinh();
      Complex complex21 = complex20.INF.sqrt();
      Complex complex22 = complex11.cos();
      Complex complex23 = complex7.tanh();
      Complex complex24 = complex11.sqrt1z();
      Complex complex25 = complex15.sqrt1z();
      double double1 = complex3.getArgument();
      Complex complex26 = complex24.subtract(complex3);
      boolean boolean0 = complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 1.1430250008909141E-8);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.ONE.pow(complex1);
      Complex complex4 = complex0.cos();
      Object object0 = complex4.ONE.readResolve();
      Complex complex5 = complex2.INF.log();
      Complex complex6 = complex1.INF.sin();
      double double0 = complex6.ZERO.abs();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex7 = complex4.exp();
      boolean boolean1 = complex3.equals(object0);
      Complex complex8 = complex4.INF.multiply(1.1430250008909141E-8);
      Complex complex9 = complex7.acos();
      Complex complex10 = complex3.pow(complex7);
      Complex complex11 = complex3.subtract(complex6);
      ComplexField complexField0 = complex10.getField();
      Complex complex12 = complex7.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex0.I.sqrt();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.acos();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex5.ONE.acos();
      ComplexField complexField0 = complex5.getField();
      double double0 = complex5.getImaginary();
      Complex complex9 = complex0.cos();
      Complex complex10 = complex7.multiply(6.283185307179586);
      Complex complex11 = complex6.cos();
      Object object0 = complex10.readResolve();
      Complex complex12 = complex7.tan();
      double double1 = complex8.ZERO.getArgument();
      Complex complex13 = complex6.asin();
      String string0 = complex13.toString();
      Object object1 = complex8.readResolve();
      double double2 = complex9.abs();
      Complex complex14 = complex7.cos();
      Complex complex15 = complex6.pow(complex2);
      Complex complex16 = complex15.ZERO.log();
      Complex complex17 = complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.INF.negate();
      int int0 = complex0.hashCode();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex0.ZERO.multiply(complex4);
      List<Complex> list0 = complex0.nthRoot(320);
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.I.exp();
      Object object0 = complex0.readResolve();
      boolean boolean1 = complex6.equals(object0);
      Complex complex8 = complex3.asin();
      Complex complex9 = complex8.sinh();
      boolean boolean2 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.multiply(4671.20126);
      double double0 = complex0.abs();
      Complex complex5 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.pow(complex0);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex1.ZERO.sin();
      List<Complex> list0 = complex1.nthRoot(1191);
      Complex complex6 = complex3.I.cos();
      double double0 = complex3.INF.abs();
      Complex complex7 = complex0.negate();
      int int0 = complex0.hashCode();
      double double1 = complex2.ONE.getArgument();
      Complex complex8 = complex3.sin();
      int int1 = complex1.ONE.hashCode();
      Complex complex9 = complex0.ONE.sinh();
      Object object0 = complex8.INF.readResolve();
      int int2 = complex2.hashCode();
      Complex complex10 = complex8.pow(complex3);
      Complex complex11 = complex4.add(complex1);
      Object object1 = complex7.readResolve();
      Complex complex12 = complex7.add(complex4);
      double double2 = complex12.I.getArgument();
      Complex complex13 = complex4.multiply(complex2);
      Complex complex14 = complex10.I.sqrt1z();
      Complex complex15 = complex8.ZERO.exp();
      Complex complex16 = complex11.ZERO.sin();
      double double3 = complex0.abs();
      Complex complex17 = complex4.multiply(complex11);
      Complex complex18 = complex17.ONE.cosh();
      Complex complex19 = complex18.pow(complex15);
      Complex complex20 = complex10.tan();
      Complex complex21 = complex3.divide(complex0);
      Complex complex22 = complex19.INF.subtract(complex9);
      double double4 = complex12.abs();
      Complex complex23 = complex0.cos();
      Complex complex24 = complex19.sin();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.NaN.sqrt();
      List<Complex> list0 = complex0.NaN.nthRoot(7);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.log();
      Complex complex6 = complex4.NaN.asin();
      boolean boolean0 = complex4.equals(complex2);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex8.ZERO.asin();
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex10.sinh();
      double double0 = complex2.getArgument();
      boolean boolean1 = complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.atan();
      boolean boolean0 = complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.ONE.cosh();
      double double1 = complex1.I.getArgument();
      double double2 = complex0.getArgument();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex3.INF.cosh();
      Complex complex6 = complex3.NaN.createComplex(0.0, 0.0);
      Complex complex7 = complex6.ONE.negate();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex3.equals(object0);
      Complex complex8 = complex3.ONE.sin();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex3.add(complex5);
      Complex complex11 = complex4.multiply(complex7);
      Complex complex12 = complex10.add(complex5);
      List<Complex> list0 = complex1.nthRoot(8);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      double double0 = complex2.ONE.abs();
      double double1 = complex0.getImaginary();
      Complex complex3 = complex0.ONE.subtract(complex2);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.NaN.log();
      Complex complex8 = complex6.INF.add(complex1);
      Complex complex9 = complex1.sqrt();
      Complex complex10 = new Complex(2.0, 0.0);
      Complex complex11 = complex5.NaN.subtract(complex10);
      Complex complex12 = complex1.exp();
      Complex complex13 = complex2.sinh();
      double double2 = complex0.abs();
      Complex complex14 = complex5.sin();
      Complex complex15 = complex5.NaN.add(complex2);
      List<Complex> list0 = complex14.I.nthRoot(1);
      Complex complex16 = complex14.exp();
      ComplexField complexField0 = complex9.getField();
      String string0 = complex13.toString();
      Complex complex17 = complex13.acos();
      Complex complex18 = complex4.exp();
      ComplexField complexField1 = complex12.getField();
      Complex complex19 = complex3.tanh();
  }
}
