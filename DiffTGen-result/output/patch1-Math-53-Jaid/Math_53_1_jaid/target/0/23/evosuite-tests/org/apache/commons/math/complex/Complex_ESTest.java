/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 12:15:16 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cosh();
      List<Complex> list0 = complex1.I.nthRoot(265);
      int int0 = complex0.hashCode();
      String string0 = complex0.ZERO.toString();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex1.I.createComplex(86.666025656, (-1378.344));
      double double0 = complex5.I.getArgument();
      Complex complex7 = complex2.subtract(complex5);
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex8.I.negate();
      String string1 = complex2.toString();
      Complex complex10 = complex2.exp();
      Complex complex11 = complex10.NaN.multiply((double) 265);
      Complex complex12 = complex11.subtract(complex0);
      boolean boolean0 = complex0.equals("(0.0, 0.0)");
      Complex complex13 = complex11.ZERO.divide(complex8);
      Complex complex14 = complex1.divide(complex4);
      String string2 = complex4.toString();
      Complex complex15 = complex12.ZERO.atan();
      Complex complex16 = complex15.NaN.subtract(complex12);
      ComplexField complexField0 = complex9.getField();
      Complex complex17 = new Complex(Double.NaN, 2.0);
      Complex complex18 = complex10.ONE.pow(complex17);
      Complex complex19 = complex12.exp();
      Complex complex20 = complex19.log();
      Complex complex21 = complex1.cosh();
      Complex complex22 = complex10.acos();
      Complex complex23 = complex9.log();
      Complex complex24 = complex7.sinh();
      Complex complex25 = complex5.sinh();
      Complex complex26 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(0.3999999761581421, 0.3999999761581421);
      Complex complex1 = complex0.I.multiply(371.3);
      Complex complex2 = complex1.cos();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.pow(complex2);
      double double1 = complex3.INF.getArgument();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex0.cosh();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.NaN.sqrt();
      Complex complex8 = complex6.ZERO.asin();
      Complex complex9 = complex5.ONE.add(complex6);
      Complex complex10 = complex8.sqrt();
      Complex complex11 = complex5.atan();
      Complex complex12 = complex11.NaN.multiply(1.5707963267948966);
      double double2 = complex4.getImaginary();
      Complex complex13 = complex1.atan();
      Complex complex14 = complex8.subtract(complex2);
      Complex complex15 = complex8.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex0.ONE.exp();
      Complex complex6 = complex0.ONE.cos();
      Complex complex7 = complex0.INF.divide(complex1);
      Complex complex8 = complex7.INF.negate();
      Complex complex9 = complex8.cosh();
      int int0 = complex0.INF.hashCode();
      String string0 = complex8.INF.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex10 = complex3.INF.negate();
      Complex complex11 = complex1.sinh();
      ComplexField complexField0 = complex11.NaN.getField();
      Complex complex12 = complex11.INF.asin();
      Object object0 = complex12.ONE.readResolve();
      Complex complex13 = complex11.log();
      double double0 = complex2.getImaginary();
      Complex complex14 = complex3.log();
      Complex complex15 = complex13.cosh();
      String string1 = complex11.NaN.toString();
      Complex complex16 = complex4.sqrt();
      Complex complex17 = complex13.exp();
      Object object1 = complex8.readResolve();
      Complex complex18 = complex14.sqrt1z();
      Complex complex19 = complex5.sqrt();
      Complex complex20 = complex19.createComplex(1560.807697819843, 1560.807697819843);
      Complex complex21 = complex1.multiply(complex6);
      Complex complex22 = complex0.exp();
      Complex complex23 = complex22.sinh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply(1.633123935319537E16);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.ZERO.multiply(1.9699272335463627E-8);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex4.NaN.createComplex(1.633123935319537E16, (-558.540355));
      Complex complex7 = complex1.acos();
      Complex complex8 = complex0.sqrt1z();
      double double0 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.log();
      double double0 = complex1.getReal();
      Complex complex2 = complex0.ONE.sin();
      double double1 = complex0.getImaginary();
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex4.add(complex3);
      double double2 = complex6.ZERO.abs();
      Complex complex7 = complex0.NaN.add(complex1);
      Object object0 = complex5.readResolve();
      boolean boolean1 = complex3.equals(complex0);
      Complex complex8 = complex1.divide(complex3);
      Complex complex9 = complex4.ZERO.asin();
      Complex complex10 = complex9.NaN.sqrt();
      ComplexField complexField0 = complex9.getField();
      Complex complex11 = complex3.ONE.sqrt();
      Complex complex12 = complex9.NaN.exp();
      Complex complex13 = complex4.ONE.negate();
      List<Complex> list0 = complex8.INF.nthRoot(1);
      Complex complex14 = complex3.exp();
      double double3 = complex14.NaN.getArgument();
      Complex complex15 = complex4.pow(complex8);
      int int0 = complex14.hashCode();
      Complex complex16 = complex9.tan();
      Complex complex17 = complex8.atan();
      double double4 = complex4.getImaginary();
      Complex complex18 = complex2.asin();
      ComplexField complexField1 = complex18.getField();
      double double5 = complex14.ONE.getArgument();
      Complex complex19 = complex17.exp();
      Complex complex20 = complex4.atan();
      double double6 = complex9.getImaginary();
      Complex complex21 = complex14.cos();
      ComplexField complexField2 = complex17.getField();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.createComplex(0.0, 0.0);
      Complex complex3 = complex1.ZERO.divide(complex0);
      Complex complex4 = complex3.ZERO.divide(complex1);
      Complex complex5 = complex0.I.exp();
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex0.log();
      double double0 = complex0.getReal();
      Complex complex9 = complex8.atan();
      Complex complex10 = complex0.createComplex(0.0, 1764.2638461839);
      Complex complex11 = complex6.sinh();
      double double1 = complex7.abs();
      Complex complex12 = complex8.sinh();
      Complex complex13 = complex4.add(complex2);
      Complex complex14 = complex9.createComplex(1607.813, 0.0);
      Complex complex15 = complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(3.391783, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex0.multiply(3.391783);
      Complex complex4 = complex3.NaN.atan();
      Object object0 = complex0.readResolve();
      double double0 = complex3.abs();
      Complex complex5 = complex3.NaN.sqrt1z();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex2.multiply(complex0);
      Complex complex8 = complex6.ONE.cos();
      Complex complex9 = complex2.atan();
      Complex complex10 = complex1.sin();
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex6.add(complex11);
      Complex complex13 = complex3.multiply(3.391783);
      Complex complex14 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 6.283185307179586);
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex0.ZERO.negate();
      Complex complex5 = complex4.ZERO.sin();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.INF.divide(complex1);
      Complex complex7 = complex6.ZERO.multiply(0.0);
      Complex complex8 = complex2.ZERO.multiply(complex0);
      Complex complex9 = complex6.ZERO.subtract(complex3);
      Complex complex10 = complex0.ZERO.acos();
      Complex complex11 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex11);
      Object object0 = complex1.readResolve();
      double double0 = complex6.NaN.abs();
      Complex complex12 = complex2.conjugate();
      double double1 = complex1.getReal();
      Complex complex13 = complex1.I.sin();
      double double2 = complex7.getArgument();
      Complex complex14 = complex7.asin();
      double double3 = complex6.getArgument();
      Complex complex15 = complex10.subtract(complex6);
      Complex complex16 = complex0.sqrt();
      String string0 = complex2.toString();
      Complex complex17 = complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply((-629.904));
      String string0 = complex0.INF.toString();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex2 = complex0.negate();
      double double0 = complex0.ONE.getArgument();
      Complex complex3 = complex2.INF.createComplex((-55.147), 6.283185307179586);
      String string1 = complex2.toString();
      Complex complex4 = complex2.tan();
      List<Complex> list0 = complex0.nthRoot(17);
      int int0 = complex4.hashCode();
      double double1 = complex1.abs();
      Complex complex5 = complex1.sinh();
      boolean boolean0 = complex1.isInfinite();
      Complex complex6 = complex0.I.pow(complex1);
      Complex complex7 = complex4.divide(complex3);
      Complex complex8 = complex2.pow(complex5);
      Complex complex9 = complex7.cos();
      Object object0 = complex4.readResolve();
      Complex complex10 = complex9.INF.negate();
      Complex complex11 = complex9.asin();
      List<Complex> list1 = complex11.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-3631.0), (-3631.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex4.exp();
      double double0 = complex2.getReal();
      Complex complex7 = complex0.conjugate();
      ComplexField complexField0 = complex6.getField();
      double double1 = complex1.abs();
      Complex complex8 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-234.44762294));
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.negate();
      double double1 = complex3.ZERO.getArgument();
      int int0 = complex2.hashCode();
      String string0 = complex2.toString();
      Complex complex4 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      ComplexField complexField0 = complex1.ZERO.getField();
      // Undeclared exception!
      complex1.ONE.nthRoot(5137);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-4231.83));
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex0.ZERO.add(complex1);
      List<Complex> list0 = complex3.NaN.nthRoot(1982);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.multiply(2244.0);
      boolean boolean0 = complex5.equals(complex4);
      try { 
        complex4.nthRoot((-507));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -507
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.multiply(576.0);
      boolean boolean0 = complex0.isNaN();
      double double0 = complex1.getReal();
      Complex complex2 = complex1.I.createComplex(576.0, (-446.8));
      Complex complex3 = complex1.acos();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex4.pow(complex0);
      Complex complex7 = complex2.cos();
      Complex complex8 = complex3.I.createComplex(Double.NaN, (-727.6577245752463));
      Complex complex9 = complex4.cosh();
      Complex complex10 = complex9.multiply(0.0);
      Complex complex11 = new Complex(576.0, 1.0);
      Complex complex12 = complex11.INF.negate();
      Complex complex13 = complex2.pow(complex11);
      Complex complex14 = complex6.divide(complex0);
      double double1 = complex3.getImaginary();
      Complex complex15 = complex14.asin();
      int int0 = complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.subtract(complex1);
      boolean boolean0 = complex0.isInfinite();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex1.NaN.sqrt();
      Complex complex5 = complex1.I.tanh();
      Complex complex6 = complex5.ZERO.conjugate();
      Complex complex7 = Complex.I;
      boolean boolean1 = complex0.equals(complex7);
      Complex complex8 = complex1.exp();
      Complex complex9 = complex7.multiply(complex0);
      Complex complex10 = complex8.ONE.createComplex((-3486.69789570058), 169.2770730929787);
      String string0 = complex7.NaN.toString();
      Complex complex11 = complex8.acos();
      Complex complex12 = complex7.multiply(complex11);
      Complex complex13 = complex10.atan();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      List<Complex> list0 = complex0.nthRoot(7);
      Complex complex1 = complex0.negate();
      String string0 = complex1.NaN.toString();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.atan();
      Object object0 = complex2.readResolve();
      Complex complex5 = complex4.createComplex((-126.732754150688), 7);
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex6.ONE.pow(complex0);
      String string1 = complex5.toString();
      Complex complex8 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(118.6, (-1.5707963267948966));
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex1.INF.pow(complex0);
      Complex complex4 = complex0.I.pow(complex1);
      Complex complex5 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.createComplex(0.5000000000042687, 0.5000000000042687);
      ComplexField complexField0 = complex1.ONE.getField();
      String string0 = complex0.I.toString();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.asin();
      ComplexField complexField1 = complex3.NaN.getField();
      Complex complex4 = complex2.atan();
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex2.INF.sqrt1z();
      Complex complex5 = complex3.I.exp();
      double double0 = complex0.getImaginary();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex2.exp();
      Complex complex8 = complex6.cosh();
      boolean boolean0 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.log();
      Object object0 = complex2.NaN.readResolve();
      Complex complex3 = new Complex(638.886476, 638.886476);
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = complex4.I.multiply(1117.702);
      int int0 = complex0.hashCode();
      Complex complex6 = complex4.divide(complex3);
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex7.I.divide(complex1);
      Complex complex9 = complex4.sin();
      Complex complex10 = complex6.INF.exp();
      double double0 = complex9.I.abs();
      Complex complex11 = complex6.ONE.sinh();
      Complex complex12 = complex0.pow(complex4);
      Complex complex13 = complex12.acos();
      boolean boolean0 = complex6.isInfinite();
      Complex complex14 = complex4.atan();
      List<Complex> list0 = complex12.nthRoot(1215);
      Complex complex15 = complex12.log();
      boolean boolean1 = complex3.equals(object0);
      boolean boolean2 = complex13.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.exp();
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex0.sin();
      List<Complex> list0 = complex2.INF.nthRoot(1190);
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex0.negate();
      double double0 = complex3.getArgument();
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex0.NaN.sinh();
      double double1 = complex5.getReal();
      Complex complex9 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-1455.014728436698), (-1455.014728436698));
      Complex complex1 = complex0.cos();
      String string0 = complex1.I.toString();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex1.multiply((-1455.014728436698));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(1744.23406962, 1744.23406962);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = complex0.cosh();
      int int0 = complex4.ONE.hashCode();
      Complex complex5 = complex4.I.sin();
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex3.acos();
      double double0 = complex4.getReal();
      double double1 = complex0.getReal();
      Complex complex8 = complex3.I.tan();
      double double2 = complex8.I.abs();
      double double3 = complex4.getImaginary();
      Complex complex9 = complex3.subtract(complex0);
      Object object0 = complex3.readResolve();
      Complex complex10 = complex0.sqrt1z();
      double double4 = complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(0.3333333333332802, (-1599.15334161001));
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.ONE.sqrt1z();
      Complex complex5 = complex0.INF.sqrt1z();
      Complex complex6 = complex3.ONE.tanh();
      Complex complex7 = complex6.INF.conjugate();
      Complex complex8 = complex7.I.divide(complex3);
      Complex complex9 = complex6.ZERO.tanh();
      ComplexField complexField0 = complex0.ONE.getField();
      boolean boolean0 = complex1.equals(complex3);
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex1.negate();
      double double0 = complex0.getImaginary();
      Complex complex12 = complex3.divide(complex11);
      Complex complex13 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.INF.multiply(2.0);
      Object object0 = complex0.I.readResolve();
      Object object1 = complex1.INF.readResolve();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex1.INF.multiply(complex4);
      Complex complex6 = complex5.pow(complex4);
      List<Complex> list0 = complex1.nthRoot(359);
      Complex complex7 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex4.ONE.acos();
      Complex complex7 = complex4.ONE.tan();
      Complex complex8 = complex7.ONE.tanh();
      boolean boolean0 = complex2.isInfinite();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex9.createComplex(0.333333333333333, 0.333333333333333);
      Complex complex11 = complex10.pow(complex4);
      Complex complex12 = complex9.I.tan();
      Complex complex13 = complex1.tan();
      Complex complex14 = complex13.exp();
      Complex complex15 = complex3.conjugate();
      Complex complex16 = complex10.I.log();
      Complex complex17 = complex15.NaN.pow(complex2);
      ComplexField complexField0 = complex17.ONE.getField();
      double double0 = complex10.getReal();
      Complex complex18 = complex4.conjugate();
      int int0 = 0;
      try { 
        complex9.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex6.I.multiply(0.0);
      Complex complex8 = complex5.add(complex0);
      ComplexField complexField0 = complex6.getField();
      double double0 = complex5.getImaginary();
      Complex complex9 = complex3.sin();
      Complex complex10 = complex7.createComplex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      double double1 = complex0.getArgument();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex1.I.multiply(282.0);
      Complex complex4 = complex1.NaN.createComplex((-0.49999999999999994), (-1052.8286));
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.I.multiply(complex0);
      double double2 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex0.pow(complex1);
      int int0 = complex3.NaN.hashCode();
      int int1 = complex3.hashCode();
      Complex complex4 = complex1.subtract(complex2);
      int int2 = complex3.I.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex2.negate();
      String string0 = complex5.NaN.toString();
      Complex complex6 = complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.createComplex(645.5517079, 2226.221628079762);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.INF.cosh();
      double double0 = complex0.ZERO.getArgument();
      Complex complex5 = complex3.I.createComplex(Double.NaN, Double.NaN);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex3.divide(complex0);
      Complex complex8 = complex5.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(2244.6323055155, 2244.6323055155);
      double double0 = complex1.abs();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex2.I.createComplex(2244.6323055155, 2244.6323055155);
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex0.ONE.acos();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex6.NaN.pow(complex7);
      Complex complex9 = complex6.cosh();
      int int0 = complex0.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex10 = complex1.sinh();
      double double1 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.sqrt();
      ComplexField complexField0 = complex2.I.getField();
      Object object1 = complex1.readResolve();
      Complex complex3 = complex1.log();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-459.932432437481), (-459.932432437481));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.sinh();
      Object object0 = complex3.NaN.readResolve();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex2.negate();
      double double0 = complex2.getImaginary();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      double double1 = complex0.abs();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex1.NaN.exp();
      String string0 = complex0.toString();
      Complex complex4 = complex1.INF.multiply(complex0);
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex3.conjugate();
      double double2 = complex5.ONE.getArgument();
      Complex complex6 = Complex.INF;
      boolean boolean1 = complex5.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.log();
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.INF.acos();
      Complex complex6 = complex4.I.sqrt1z();
      Complex complex7 = complex4.ONE.divide(complex6);
      Complex complex8 = null;
      try { 
        complex7.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.ZERO.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex2.sinh();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.ZERO.add(complex5);
      int int1 = complex2.I.hashCode();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-2.356194490192345), (-90.8655061421));
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex1.cosh();
      double double0 = complex0.getReal();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex4.multiply((-1835.90799758));
      Complex complex7 = complex3.exp();
      Complex complex8 = complex7.sin();
      Complex complex9 = complex4.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.NaN.createComplex(Double.NEGATIVE_INFINITY, 6.283185307179586);
      Complex complex6 = complex5.add(complex4);
      int int0 = complex6.hashCode();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex4.ONE.divide(complex7);
      Complex complex9 = complex7.add(complex1);
      Complex complex10 = complex4.log();
      Complex complex11 = complex9.INF.cosh();
      String string0 = complex1.toString();
      Complex complex12 = complex9.sqrt1z();
      Complex complex13 = complex0.sinh();
      Complex complex14 = complex10.add(complex6);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.createComplex(1.0, 1554.8);
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex1.INF.add(complex0);
      int int0 = complex0.I.hashCode();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex6.log();
      int int1 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = complex1.add(complex3);
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex5.divide(complex3);
      double double0 = complex5.INF.abs();
      Complex complex8 = complex3.divide(complex1);
      Complex complex9 = complex4.negate();
      Complex complex10 = complex9.ONE.cos();
      Complex complex11 = complex10.ONE.tanh();
      Complex complex12 = complex9.INF.sinh();
      Complex complex13 = complex3.add(complex1);
      Complex complex14 = complex11.pow(complex13);
      Complex complex15 = complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.I.hashCode();
      double double0 = complex0.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex1.I.multiply((-1.0));
      Complex complex4 = complex1.NaN.subtract(complex0);
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex4.INF.negate();
      String string0 = complex5.NaN.toString();
      Complex complex7 = complex1.INF.cos();
      Complex complex8 = complex4.log();
      ComplexField complexField0 = complex1.getField();
      try { 
        complex8.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex6.NaN.tanh();
      boolean boolean0 = complex5.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.sqrt1z();
      Object object0 = complex1.I.readResolve();
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex3.ONE.sqrt1z();
      double double0 = complex3.getImaginary();
      Complex complex6 = complex2.pow(complex1);
      ComplexField complexField0 = complex3.ONE.getField();
      List<Complex> list0 = complex5.ONE.nthRoot(3596);
      List<Complex> list1 = complex0.nthRoot(3596);
      Complex complex7 = complex0.divide(complex4);
      Complex complex8 = complex2.cos();
      Complex complex9 = complex8.NaN.cosh();
      Complex complex10 = complex5.sqrt1z();
      Complex complex11 = complex10.ZERO.multiply(Double.NaN);
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex11.ONE.sinh();
      Complex complex14 = complex12.INF.divide(complex3);
      Complex complex15 = complex14.NaN.multiply(complex11);
      boolean boolean0 = complex1.equals(complex12);
      int int1 = complex2.ONE.hashCode();
      Complex complex16 = complex10.I.divide(complex3);
      Complex complex17 = complex6.conjugate();
      Complex complex18 = complex3.pow(complex10);
      Complex complex19 = complex2.tan();
      Complex complex20 = complex3.cosh();
      Complex complex21 = complex18.ONE.subtract(complex3);
      Complex complex22 = complex20.ONE.cosh();
      Complex complex23 = complex2.sqrt();
      double double1 = complex18.getImaginary();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(0.0);
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      int int0 = complex0.hashCode();
      String string0 = complex0.toString();
      double double0 = complex1.getImaginary();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex2.multiply(-0.0);
      Complex complex7 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      double double0 = complex0.I.getArgument();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex1.ONE.add(complex0);
      double double1 = complex1.getReal();
      int int0 = complex4.hashCode();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ONE.divide(complex1);
      double double0 = complex3.abs();
      Complex complex5 = complex4.NaN.createComplex(1.1752011936438014, 1.1752011936438014);
      int int0 = complex1.hashCode();
      Complex complex6 = complex4.add(complex0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex2.ONE.cos();
      Object object0 = complex1.readResolve();
      boolean boolean1 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-1466.730843241164), 0.0);
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double double0 = (-2040.445507);
      Complex complex0 = new Complex((-2040.445507), (-2040.445507));
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ZERO.sqrt();
      double double1 = complex3.getArgument();
      Complex complex5 = complex4.INF.tanh();
      List<Complex> list0 = complex3.ONE.nthRoot(91);
      int int0 = complex3.hashCode();
      Complex complex6 = complex4.subtract(complex0);
      Complex complex7 = complex3.log();
      Complex complex8 = null;
      try { 
        complex0.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.divide(complex0);
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex3 = complex1.sinh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.ZERO.asin();
      int int0 = complex4.hashCode();
      Complex complex6 = complex5.INF.cosh();
      boolean boolean0 = complex0.equals(complex4);
      int int1 = complex4.hashCode();
      Object object0 = complex5.I.readResolve();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex5.subtract(complex7);
      Complex complex9 = complex2.cosh();
      boolean boolean1 = complex5.isNaN();
      Complex complex10 = complex9.asin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.tan();
      boolean boolean0 = complex1.isInfinite();
      boolean boolean1 = complex2.equals(complex0);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.I.tan();
      List<Complex> list0 = complex0.ONE.nthRoot(255);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.log();
      double double0 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex1.ZERO.cosh();
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex5 = complex2.createComplex((-86.3832816681), (-86.3832816681));
      Complex complex6 = complex1.I.subtract(complex0);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.log();
      double double0 = complex1.getImaginary();
      Complex complex9 = complex1.tanh();
      boolean boolean0 = complex7.isInfinite();
      Complex complex10 = complex5.tan();
      Complex complex11 = complex9.multiply(complex10);
      double double1 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex1 = complex0.negate();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex1.pow(complex7);
      Complex complex9 = complex8.ZERO.multiply(complex2);
      Complex complex10 = complex6.tanh();
      Complex complex11 = complex6.asin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      String string0 = complex0.ONE.toString();
      Complex complex2 = complex0.INF.subtract(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex1.ONE.atan();
      double double0 = complex0.getImaginary();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex1.ZERO.multiply(complex6);
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex3.atan();
      Complex complex11 = complex2.sin();
      boolean boolean1 = complex10.isInfinite();
      Complex complex12 = complex11.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.NaN.pow(complex1);
      int int0 = complex1.INF.hashCode();
      Complex complex4 = complex0.acos();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex1.tan();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.NaN.divide(complex6);
      double double1 = complex2.getArgument();
      double double2 = complex4.getImaginary();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex4.sin();
      double double3 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.NaN.sin();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex2.exp();
      Complex complex8 = complex4.NaN.tan();
      double double1 = complex2.I.getArgument();
      List<Complex> list0 = complex2.ONE.nthRoot(245);
      Complex complex9 = complex3.ONE.conjugate();
      Complex complex10 = complex3.createComplex(0.0, 0.0);
      Complex complex11 = complex0.sqrt();
      Complex complex12 = complex4.add(complex1);
      try { 
        complex11.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sin();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex3.INF.pow(complex0);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex2.tanh();
      ComplexField complexField1 = complex0.getField();
      Complex complex7 = complex6.INF.conjugate();
      Object object0 = complex2.readResolve();
      try { 
        complex1.nthRoot((-2098));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,098
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex1.ONE.tanh();
      Complex complex4 = complex0.ONE.cos();
      Complex complex5 = complex0.NaN.divide(complex1);
      Complex complex6 = complex5.I.pow(complex4);
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex7.I.sqrt();
      Complex complex9 = complex1.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.INF.toString();
      double double0 = complex0.INF.getArgument();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex3.tan();
      String string1 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex0.equals("W61OOO4KV");
      Complex complex2 = complex1.tanh();
      boolean boolean1 = complex0.equals(complex2);
      Complex complex3 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      try { 
        complex1.ZERO.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.asin();
      int int0 = complex1.hashCode();
      Object object0 = complex0.I.readResolve();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.INF.atan();
      double double0 = complex2.getArgument();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.NaN.cosh();
      Complex complex7 = complex4.sinh();
      ComplexField complexField0 = complex3.I.getField();
      Complex complex8 = complex7.INF.cos();
      ComplexField complexField1 = complex4.ONE.getField();
      Complex complex9 = complex0.NaN.atan();
      Complex complex10 = complex4.negate();
      Complex complex11 = complex0.NaN.multiply(0.0);
      int int1 = complex7.ZERO.hashCode();
      boolean boolean0 = complex4.isInfinite();
      Complex complex12 = complex3.multiply(complex7);
      Complex complex13 = complex12.sqrt();
      Complex complex14 = complex12.NaN.sqrt();
      Complex complex15 = complex8.sinh();
      double double1 = complex4.abs();
      Complex complex16 = complex6.add(complex4);
      Complex complex17 = complex15.tan();
      Complex complex18 = complex6.conjugate();
      Complex complex19 = complex18.ZERO.tan();
      double double2 = complex15.abs();
      Complex complex20 = complex6.atan();
      Complex complex21 = complex20.tanh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Complex complex4 = complex0.NaN.sinh();
      Complex complex5 = complex0.createComplex(1.2675934823758863E-8, 1460.956);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex5.conjugate();
      int int0 = 936;
      Complex complex9 = complex7.NaN.divide(complex4);
      int int1 = complex5.hashCode();
      List<Complex> list0 = complex8.ZERO.nthRoot(936);
      try { 
        complex7.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.I.exp();
      double double0 = complex3.INF.getArgument();
      Complex complex4 = complex2.I.pow(complex0);
      List<Complex> list0 = complex4.NaN.nthRoot(56);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex5.ZERO.sinh();
      Complex complex8 = complex5.subtract(complex1);
      ComplexField complexField0 = complex8.getField();
      Object object0 = complex2.readResolve();
      List<Complex> list1 = complex2.nthRoot(17);
      Complex complex9 = complex1.atan();
      Complex complex10 = complex9.ONE.subtract(complex5);
      Complex complex11 = complex10.sqrt();
      Complex complex12 = complex5.pow(complex7);
      Complex complex13 = complex12.cosh();
      Complex complex14 = complex13.I.acos();
      boolean boolean0 = complex13.isNaN();
      Complex complex15 = complex3.sinh();
      Complex complex16 = complex15.I.log();
      Complex complex17 = complex2.sin();
      Complex complex18 = new Complex((-0.3058015757857271), 0.7853981633974483);
      Complex complex19 = complex14.pow(complex18);
      Complex complex20 = complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1008.45837298955));
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.INF.acos();
      List<Complex> list0 = complex0.ZERO.nthRoot(569);
      Complex complex2 = complex0.INF.createComplex((-1.7976931348623157E308), 0.0);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex2.INF.pow(complex4);
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex0.ZERO.sqrt1z();
      Complex complex8 = complex7.ZERO.pow(complex0);
      Complex complex9 = complex8.I.conjugate();
      double double0 = complex1.getReal();
      Complex complex10 = complex1.divide(complex0);
      double double1 = complex7.I.getArgument();
      boolean boolean1 = complex3.equals(complex0);
      Complex complex11 = complex0.exp();
      String string0 = complex8.toString();
      Complex complex12 = complex1.atan();
      Complex complex13 = complex11.asin();
      Complex complex14 = complex9.tan();
      Complex complex15 = complex10.cos();
      Complex complex16 = complex15.ZERO.sqrt();
      Complex complex17 = complex11.sqrt();
      Complex complex18 = complex12.divide(complex7);
      Complex complex19 = complex18.NaN.multiply(0.0);
      double double2 = complex3.getArgument();
      Complex complex20 = complex15.tan();
      List<Complex> list1 = complex11.nthRoot(569);
      Complex complex21 = complex13.createComplex(0.0, (-1697.953));
      Complex complex22 = complex20.exp();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.ONE.sqrt();
      ComplexField complexField0 = complex1.getField();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex1.pow(complex0);
      Complex complex9 = complex1.cosh();
      double double0 = complex8.INF.getArgument();
      Complex complex10 = complex8.INF.createComplex(0.0, 1024.0);
      Complex complex11 = complex1.log();
      Complex complex12 = complex8.multiply(1024.0);
      Complex complex13 = complex5.multiply(1024.0);
      Complex complex14 = complex0.negate();
      Complex complex15 = complex14.NaN.add(complex6);
      Complex complex16 = complex15.I.createComplex((-1428.0647369155), 1024.0);
      Complex complex17 = complex15.ONE.pow(complex1);
      String string0 = complex13.INF.toString();
      Complex complex18 = complex10.NaN.sqrt();
      List<Complex> list0 = complex13.nthRoot(272);
      Complex complex19 = complex10.multiply(1024.0);
      Complex complex20 = complex14.add(complex13);
      Complex complex21 = complex20.ONE.add(complex9);
      Complex complex22 = complex2.sqrt();
      Complex complex23 = complex3.log();
      Complex complex24 = complex0.add(complex18);
      Complex complex25 = complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.sinh();
      double double1 = complex1.getArgument();
      Complex complex3 = complex0.ONE.pow(complex1);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex2.multiply(complex4);
      Complex complex7 = complex5.tan();
      Object object0 = complex7.INF.readResolve();
      Complex complex8 = complex2.add(complex1);
      Complex complex9 = complex0.atan();
      Complex complex10 = complex2.I.asin();
      Complex complex11 = complex2.I.sin();
      double double2 = complex11.I.getArgument();
      boolean boolean0 = complex2.equals(complex5);
      Complex complex12 = complex6.sin();
      Complex complex13 = complex1.tan();
      Complex complex14 = complex6.sqrt1z();
      double double3 = complex4.abs();
      Complex complex15 = complex1.multiply(0.0);
      Complex complex16 = complex15.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex17 = complex15.tanh();
      ComplexField complexField0 = complex12.getField();
      Complex complex18 = complex2.atan();
      Complex complex19 = complex17.cos();
      Complex complex20 = complex12.asin();
      String string0 = complex19.toString();
      Complex complex21 = complex0.subtract(complex3);
      Complex complex22 = complex4.atan();
      double double4 = complex1.abs();
      Complex complex23 = complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.NaN.subtract(complex3);
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex5.INF.sqrt1z();
      Complex complex7 = complex6.INF.cosh();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex8 = complex0.acos();
      double double0 = complex0.getImaginary();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex7.divide(complex9);
  }
}
