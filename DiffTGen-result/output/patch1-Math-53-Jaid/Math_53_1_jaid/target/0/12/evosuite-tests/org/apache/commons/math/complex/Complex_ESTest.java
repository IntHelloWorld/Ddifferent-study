/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 12:11:22 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = complex3.NaN.log();
      double double0 = complex0.NaN.getArgument();
      Complex complex5 = complex0.INF.multiply(0.0);
      Complex complex6 = new Complex(0.0, 0.06666666666666667);
      Complex complex7 = complex2.divide(complex6);
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex8 = complex1.add(complex0);
      Complex complex9 = complex0.exp();
      Complex complex10 = complex2.sqrt1z();
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex10.atan();
      Complex complex13 = complex12.ONE.exp();
      Complex complex14 = complex11.NaN.conjugate();
      Complex complex15 = complex3.sinh();
      Complex complex16 = complex8.tanh();
      Complex complex17 = complex16.asin();
      Complex complex18 = complex17.ONE.divide(complex10);
      Complex complex19 = complex16.ONE.sin();
      Complex complex20 = complex11.subtract(complex9);
      Complex complex21 = complex20.ZERO.tanh();
      Complex complex22 = complex8.exp();
      Complex complex23 = complex9.sin();
      Complex complex24 = complex11.acos();
      Complex complex25 = complex15.sin();
      Complex complex26 = complex25.cosh();
      Complex complex27 = complex9.sin();
      Complex complex28 = complex20.sinh();
      ComplexField complexField1 = complex4.getField();
      Complex complex29 = complex25.atan();
      Complex complex30 = complex12.atan();
      Complex complex31 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex0.ONE.multiply(complex2);
      Complex complex5 = complex2.I.cosh();
      Complex complex6 = complex0.ONE.sinh();
      Complex complex7 = complex6.INF.multiply(complex4);
      List<Complex> list0 = complex0.nthRoot(137);
      Complex complex8 = complex2.I.divide(complex4);
      Object object0 = complex8.NaN.readResolve();
      Complex complex9 = complex4.I.conjugate();
      Complex complex10 = complex0.log();
      Complex complex11 = complex10.ONE.negate();
      Complex complex12 = complex10.sqrt();
      Complex complex13 = complex2.tanh();
      Complex complex14 = complex1.pow(complex4);
      Complex complex15 = complex14.ONE.subtract(complex1);
      double double0 = complex14.ONE.getArgument();
      Complex complex16 = complex4.sqrt();
      int int0 = complex1.hashCode();
      Complex complex17 = complex4.tanh();
      List<Complex> list1 = complex12.nthRoot(137);
      Complex complex18 = complex17.atan();
      Complex complex19 = complex18.ONE.subtract(complex9);
      Complex complex20 = complex9.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(2770.729776215534, 2770.729776215534);
      Complex complex1 = Complex.ONE;
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.NaN.createComplex(0.0, Double.NaN);
      Complex complex5 = new Complex(2770.729776215534, Double.NaN);
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.createComplex(88.0438889, 88.0438889);
      Complex complex3 = complex0.ZERO.subtract(complex1);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex4 = complex0.I.tan();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex0.conjugate();
      Object object0 = complex6.readResolve();
      List<Complex> list0 = complex0.nthRoot(2765);
      Complex complex7 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      double double0 = 0.0;
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex1.INF.multiply(0.0);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex3.I.conjugate();
      Complex complex7 = complex6.ONE.tanh();
      Complex complex8 = complex2.add(complex1);
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex0.negate();
      Complex complex12 = complex11.cos();
      Complex complex13 = complex10.sinh();
      Object object0 = new Object();
      boolean boolean0 = complex10.equals(object0);
      Complex complex14 = complex9.cosh();
      Object object1 = complex12.INF.readResolve();
      try { 
        complex9.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(876.1474368814715, 1.5874010519681994);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.multiply(complex1);
      List<Complex> list0 = complex0.INF.nthRoot(5352);
      ComplexField complexField1 = complex0.NaN.getField();
      Complex complex3 = complex0.INF.sqrt1z();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.ZERO.exp();
      // Undeclared exception!
      complex4.nthRoot(5352);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      String string0 = complex2.toString();
      Complex complex3 = complex0.ONE.multiply(complex1);
      double double0 = complex0.getArgument();
      Complex complex4 = complex1.sqrt1z();
      double double1 = complex2.getArgument();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex6.INF.add(complex3);
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex8.NaN.cosh();
      double double2 = complex2.getReal();
      double double3 = complex1.abs();
      Complex complex10 = complex4.acos();
      boolean boolean0 = complex3.isNaN();
      Complex complex11 = complex4.add(complex2);
      Object object0 = complex3.readResolve();
      Complex complex12 = complex3.atan();
      Complex complex13 = complex10.asin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.NaN.createComplex((-1346.9241648477464), 1.0);
      String string0 = complex0.toString();
      Complex complex4 = complex3.divide(complex0);
      int int0 = complex0.INF.hashCode();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex2.NaN.add(complex5);
      Object object0 = complex2.readResolve();
      Complex complex7 = complex3.add(complex4);
      Complex complex8 = complex3.ONE.multiply(complex1);
      List<Complex> list0 = complex8.ZERO.nthRoot(1934);
      Complex complex9 = complex8.ZERO.tan();
      Complex complex10 = complex4.divide(complex3);
      Complex complex11 = complex10.ZERO.atan();
      double double0 = complex7.getReal();
      Complex complex12 = complex2.I.asin();
      Complex complex13 = complex3.exp();
      Complex complex14 = complex13.ZERO.cosh();
      Complex complex15 = complex13.I.atan();
      double double1 = complex4.getImaginary();
      Complex complex16 = complex4.sinh();
      Complex complex17 = complex16.sqrt();
      Complex complex18 = complex17.ZERO.sqrt1z();
      ComplexField complexField0 = complex2.getField();
      Complex complex19 = complex16.I.sin();
      Complex complex20 = complex16.acos();
      Complex complex21 = complex5.createComplex((-1346.9241648477464), 6.283185307179586);
      Complex complex22 = complex17.multiply(6.283185307179586);
      int int1 = complex11.hashCode();
      int int2 = complex22.hashCode();
      Object object1 = complex10.readResolve();
      Complex complex23 = complex12.cosh();
      Complex complex24 = complex10.negate();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.INF.multiply(complex4);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.pow(complex2);
      Complex complex8 = complex3.cosh();
      ComplexField complexField0 = complex7.getField();
      Complex complex9 = complex2.sin();
      Complex complex10 = complex4.sqrt();
      Complex complex11 = complex7.cos();
      double double0 = complex9.getReal();
      Complex complex12 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.createComplex(745.8912010699, 745.8912010699);
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = complex0.sinh();
      Object object0 = complex1.I.readResolve();
      Complex complex6 = complex0.multiply(9.0);
      ComplexField complexField0 = complex6.INF.getField();
      Complex complex7 = complex6.ONE.cosh();
      String string0 = complex6.toString();
      int int0 = complex2.I.hashCode();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.INF.acos();
      Complex complex10 = complex5.ONE.log();
      Complex complex11 = complex6.sin();
      Complex complex12 = complex3.multiply(complex2);
      double double0 = complex3.abs();
      Complex complex13 = complex7.add(complex0);
      Complex complex14 = complex13.I.sqrt1z();
      Complex complex15 = complex4.sin();
      Complex complex16 = complex13.sin();
      Complex complex17 = new Complex(Double.NaN, 745.8912010699);
      Complex complex18 = complex16.ZERO.divide(complex17);
      double double1 = complex2.getImaginary();
      Complex complex19 = complex8.asin();
      ComplexField complexField1 = complex4.getField();
      Complex complex20 = complex9.pow(complex2);
      try { 
        complex8.nthRoot((-1674));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,674
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-0.1666666567325592), (-0.1666666567325592));
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.ONE.tan();
      String string0 = complex1.toString();
      Complex complex5 = complex3.I.cosh();
      try { 
        complex5.ONE.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.createComplex(2891.155806, (-2254.739380358));
      double double0 = complex1.abs();
      Complex complex2 = new Complex(3250.560222, 3250.560222);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex4.pow(complex2);
      List<Complex> list0 = complex2.INF.nthRoot(143);
      Complex complex6 = complex0.multiply(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex6.INF.getField();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex3.divide(complex7);
      Complex complex9 = complex8.createComplex(965.0, 965.0);
      Complex complex10 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-629.157617024), (-629.157617024));
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.ZERO.add(complex1);
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex4 = complex1.I.negate();
      Complex complex5 = complex4.NaN.sqrt1z();
      Complex complex6 = complex5.I.pow(complex4);
      Complex complex7 = complex3.ZERO.pow(complex2);
      Complex complex8 = complex7.I.cosh();
      Complex complex9 = complex6.ZERO.conjugate();
      Complex complex10 = complex9.I.multiply(complex8);
      Complex complex11 = complex0.NaN.sqrt1z();
      Complex complex12 = complex3.log();
      Complex complex13 = complex11.ZERO.exp();
      ComplexField complexField1 = complex2.I.getField();
      Complex complex14 = complex5.INF.cos();
      List<Complex> list0 = complex0.nthRoot(136);
      Complex complex15 = complex5.sin();
      boolean boolean0 = complex3.isNaN();
      Complex complex16 = complex4.sqrt();
      Complex complex17 = complex11.sqrt();
      Complex complex18 = complex12.sinh();
      Complex complex19 = complex18.INF.divide(complex5);
      Complex complex20 = complex18.tan();
      Complex complex21 = complex12.add(complex16);
      ComplexField complexField2 = complex15.getField();
      Complex complex22 = complex12.atan();
      int int0 = complex22.I.hashCode();
      Complex complex23 = complex3.sqrt();
      double double0 = complex6.getImaginary();
      Complex complex24 = complex11.pow(complex1);
      double double1 = complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.conjugate();
      int int0 = complex1.ZERO.hashCode();
      Complex complex3 = complex2.I.tanh();
      double double0 = complex0.abs();
      double double1 = complex0.ZERO.getArgument();
      boolean boolean0 = complex2.isNaN();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.ZERO.tan();
      Complex complex8 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.createComplex(1542.319, (-1866.6));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex3.I.sinh();
      int int0 = complex5.ZERO.hashCode();
      Complex complex6 = complex4.ONE.multiply(complex3);
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex7.INF.createComplex(0.0, 0.0);
      double double0 = complex4.getReal();
      Complex complex9 = complex3.I.exp();
      Complex complex10 = complex7.multiply((-1041.815700943));
      Complex complex11 = complex3.ZERO.negate();
      Complex complex12 = complex3.subtract(complex7);
      double double1 = complex4.getImaginary();
      double double2 = complex7.getImaginary();
      int int1 = complex2.hashCode();
      Complex complex13 = complex7.sin();
      Complex complex14 = complex7.sin();
      Complex complex15 = complex14.ONE.asin();
      Complex complex16 = complex6.conjugate();
      String string0 = complex10.toString();
      boolean boolean0 = complex16.equals(complex3);
      Complex complex17 = complex14.sin();
      Complex complex18 = complex17.log();
      double double3 = complex7.abs();
      Complex complex19 = complex14.cosh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(4892.52637776172);
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex0.multiply(complex3);
      String string0 = complex5.NaN.toString();
      Complex complex6 = complex4.subtract(complex2);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex7.pow(complex6);
      Complex complex10 = complex9.ZERO.asin();
      Complex complex11 = complex8.asin();
      Complex complex12 = complex3.multiply(4892.52637776172);
      Complex complex13 = complex2.sinh();
      double double0 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-1518.8), (-1518.8));
      Complex complex1 = complex0.conjugate();
      String string0 = complex1.INF.toString();
      double double0 = complex1.getArgument();
      String string1 = complex1.toString();
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex1.tanh();
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex4.pow(complex0);
      double double1 = complex5.abs();
      Complex complex8 = complex5.pow(complex0);
      Complex complex9 = complex4.cos();
      Complex complex10 = complex9.I.tanh();
      ComplexField complexField0 = complex0.NaN.getField();
      int int0 = complex1.hashCode();
      Complex complex11 = complex6.sqrt1z();
      double double2 = complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-2242.9438244), (-2242.9438244));
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.NaN.cosh();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(2665.4851655);
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex2.ONE.multiply(2857.3);
      Complex complex5 = complex2.ZERO.log();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex6 = complex5.divide(complex1);
      Complex complex7 = complex5.acos();
      ComplexField complexField1 = complex5.getField();
      Object object0 = complex0.readResolve();
      Complex complex8 = complex3.multiply(2665.4851655);
      Complex complex9 = complex8.ZERO.multiply(complex5);
      boolean boolean0 = complex1.equals(complexField1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-476.9497951209186), (-476.9497951209186));
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex2.I.tan();
      Object object0 = complex2.readResolve();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.INF.asin();
      Complex complex6 = complex5.ZERO.multiply((-476.9497951209186));
      int int0 = complex4.ONE.hashCode();
      Complex complex7 = complex4.NaN.sin();
      ComplexField complexField0 = complex7.INF.getField();
      Complex complex8 = complex0.sinh();
      int int1 = complex8.hashCode();
      Complex complex9 = complex4.divide(complex1);
      Complex complex10 = complex4.cos();
      Complex complex11 = complex1.I.negate();
      double double0 = complex10.getArgument();
      double double1 = complex1.abs();
      Complex complex12 = complex10.exp();
      Complex complex13 = complex0.sqrt1z();
      Complex complex14 = complex5.tanh();
      Complex complex15 = complex14.I.tanh();
      Complex complex16 = complex10.ONE.cos();
      Complex complex17 = complex9.cosh();
      Complex complex18 = complex10.subtract(complex4);
      double double2 = complex2.getImaginary();
      Complex complex19 = complex8.cos();
      Complex complex20 = complex19.sqrt();
      Complex complex21 = complex12.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(227.4437678, 227.4437678);
      Complex complex1 = complex0.cos();
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.multiply(6.283185307179586);
      double double0 = complex3.ZERO.getArgument();
      String string0 = complex3.toString();
      Complex complex4 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      String string0 = complex2.ZERO.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.asin();
      boolean boolean1 = complex0.equals(complex3);
      try { 
        complex0.nthRoot((-2420));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,420
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-15.14283), 0.0);
      Complex complex1 = complex0.ZERO.multiply(0.0);
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.ONE.multiply(complex1);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.ZERO.add(complex4);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.createComplex((-260.9), (-260.9));
      double double0 = complex2.abs();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.divide(complex6);
      Complex complex8 = complex1.ONE.exp();
      Complex complex9 = complex7.I.sqrt1z();
      List<Complex> list0 = complex2.ZERO.nthRoot(11);
      Complex complex10 = complex9.ONE.multiply((-260.9));
      List<Complex> list1 = complex1.nthRoot(1);
      ComplexField complexField0 = complex9.getField();
      Complex complex11 = complex0.atan();
      ComplexField complexField1 = complex11.INF.getField();
      Complex complex12 = complex9.atan();
      Complex complex13 = complex7.negate();
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, (-1.0));
      Complex complex2 = complex0.I.add(complex1);
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.negate();
      double double0 = complex1.ONE.getArgument();
      double double1 = complex3.getReal();
      Complex complex5 = complex1.add(complex2);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-4.9E-324));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = complex0.atan();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(309.25, 309.25);
      Complex complex1 = complex0.sqrt();
      ComplexField complexField0 = complex1.I.getField();
      int int0 = complex1.hashCode();
      double double0 = complex0.abs();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.I.multiply(complex0);
      double double1 = complex2.getArgument();
      Complex complex4 = complex0.INF.exp();
      Complex complex5 = complex0.I.divide(complex3);
      try { 
        complex3.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(1851.012854916, 1851.012854916);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.add(complex0);
      double double0 = complex2.getImaginary();
      double double1 = complex2.getReal();
      Complex complex3 = complex0.asin();
      List<Complex> list0 = complex3.nthRoot(161);
      Complex complex4 = complex1.multiply(1851.7982530793975);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = 4861.882493871547;
      Complex complex0 = new Complex(4861.882493871547, 4861.882493871547);
      Complex complex1 = null;
      try { 
        complex0.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, (-1386.455972214877));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.NaN.asin();
      Complex complex4 = complex0.INF.asin();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex1.pow(complex3);
      Complex complex7 = complex6.ONE.subtract(complex0);
      double double0 = complex1.getArgument();
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex6.add(complex0);
      Complex complex10 = complex4.conjugate();
      Complex complex11 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex0.sinh();
      double double0 = complex0.abs();
      Complex complex5 = complex2.acos();
      List<Complex> list0 = complex2.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.atan();
      int int0 = complex2.I.hashCode();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex4.ZERO.sinh();
      Complex complex6 = complex2.ZERO.sqrt1z();
      Complex complex7 = complex3.NaN.tan();
      List<Complex> list0 = complex1.NaN.nthRoot(1);
      Complex complex8 = complex3.I.sqrt1z();
      int int1 = complex8.INF.hashCode();
      Complex complex9 = complex2.sqrt();
      ComplexField complexField0 = complex2.getField();
      Complex complex10 = complex0.divide(complex3);
      Complex complex11 = complex3.cos();
      Complex complex12 = complex11.ONE.cosh();
      Complex complex13 = complex10.sqrt();
      Complex complex14 = complex10.divide(complex1);
      Complex complex15 = complex3.log();
      Complex complex16 = complex15.ONE.multiply((double) 1);
      try { 
        complex6.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.ZERO.conjugate();
      Complex complex5 = complex0.conjugate();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.ZERO.log();
      boolean boolean0 = complex3.equals(complex6);
      Complex complex8 = complex5.negate();
      Complex complex9 = complex8.NaN.atan();
      Complex complex10 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex1.INF.conjugate();
      Complex complex4 = complex0.I.exp();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex4.cos();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.exp();
      double double0 = complex8.ONE.abs();
      Complex complex10 = complex5.add(complex7);
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex4.I.sin();
      Complex complex13 = complex6.divide(complex4);
      Complex complex14 = complex6.cos();
      Complex complex15 = complex14.sqrt1z();
      double double1 = complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.acos();
      boolean boolean0 = complex2.equals(complex1);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex2.ONE.multiply(complex0);
      Complex complex5 = complex1.atan();
      Complex complex6 = complex1.subtract(complex2);
      Complex complex7 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.asin();
      double double0 = complex1.getImaginary();
      boolean boolean1 = complex0.isInfinite();
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.INF.multiply(1.304E19);
      List<Complex> list0 = complex0.ZERO.nthRoot(876);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.tanh();
      String string0 = complex3.toString();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex1.ONE.conjugate();
      Complex complex7 = complex5.ONE.createComplex(1.304E19, 876);
      Complex complex8 = complex7.INF.subtract(complex2);
      Complex complex9 = complex4.log();
      boolean boolean0 = complex0.equals("(-Infinity, 0.0)");
      Complex complex10 = complex7.conjugate();
      String string1 = complex7.toString();
      double double0 = complex3.abs();
      Complex complex11 = complex10.asin();
      Complex complex12 = complex11.NaN.pow(complex7);
      Complex complex13 = complex8.acos();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.NaN.add(complex0);
      double double0 = complex0.getReal();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-4207.4994657573), (-4207.4994657573));
      Complex complex1 = complex0.ZERO.atan();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.acos();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.I.multiply((-4207.4994657573));
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex2.I.sinh();
      Complex complex8 = complex7.NaN.sinh();
      Complex complex9 = complex6.ZERO.tanh();
      Complex complex10 = complex5.sin();
      Complex complex11 = complex10.INF.negate();
      int int0 = 0;
      Complex complex12 = complex2.I.sqrt();
      Complex complex13 = complex12.ONE.atan();
      ComplexField complexField1 = complex4.ZERO.getField();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ONE.getField();
      String string0 = complex0.I.toString();
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex0.readResolve();
      double double0 = complex0.getReal();
      Complex complex1 = complex0.sqrt();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.multiply(2.0);
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex3.NaN.sqrt1z();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.INF.negate();
      double double0 = complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.I.sqrt();
      String string0 = complex0.NaN.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.add(complex1);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.09090909090909091, 0.09090909090909091);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt();
      int int0 = complex1.hashCode();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex3.INF.createComplex(1.9868161777724352E-8, 1.9868161777724352E-8);
      Complex complex5 = complex3.NaN.createComplex((-98.0), (-98.0));
      Complex complex6 = complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.NaN.divide(complex1);
      double double1 = complex0.ZERO.abs();
      double double2 = complex0.abs();
      Complex complex3 = complex1.createComplex(0.0, Double.NaN);
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.sin();
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-3384.858878107015), (-1938.8410881254));
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.INF.cos();
      String string0 = complex3.ZERO.toString();
      Complex complex4 = complex0.NaN.atan();
      double double0 = complex0.abs();
      Complex complex5 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = complex0.asin();
      Object object0 = complex0.readResolve();
      double double1 = complex1.getArgument();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex2.NaN.sinh();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.ONE.cos();
      double double2 = complex1.abs();
      Complex complex8 = complex1.sinh();
      boolean boolean0 = complex6.equals("}et`&L");
      Complex complex9 = complex0.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.ZERO.add(complex1);
      Complex complex5 = complex3.ONE.sinh();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex5.multiply(0.0);
      Complex complex8 = complex0.pow(complex3);
      int int0 = complex1.hashCode();
      Complex complex9 = complex5.NaN.tanh();
      Complex complex10 = complex0.log();
      Complex complex11 = complex10.NaN.multiply(0.0);
      boolean boolean0 = complex5.isInfinite();
      double double0 = complex0.abs();
      double double1 = complex8.getArgument();
      Complex complex12 = complex8.cos();
      Complex complex13 = complex1.sqrt1z();
      try { 
        complex13.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      boolean boolean0 = complex0.equals("(NaN, NaN)");
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.multiply((-3267.932));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex1.sin();
      try { 
        complex3.nthRoot((-2257));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,257
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.conjugate();
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ONE.cos();
      String string0 = complex0.INF.toString();
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex1.multiply(Double.NaN);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.acos();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex2.INF.multiply(complex3);
      Complex complex5 = complex3.I.multiply(4015.2155006626);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex2.I.cosh();
      Complex complex8 = complex6.ONE.multiply((-2440.81601));
      Complex complex9 = complex6.multiply(complex7);
      Complex complex10 = complex0.multiply((-2458.0));
      boolean boolean1 = complex0.equals(object0);
      Complex complex11 = complex2.tan();
      double double0 = complex6.getArgument();
      double double1 = complex1.getImaginary();
      Complex complex12 = complex0.tan();
      Complex complex13 = complex12.sinh();
      Complex complex14 = complex13.NaN.log();
      Object object1 = complex2.INF.readResolve();
      Complex complex15 = complex14.ZERO.sqrt1z();
      double double2 = complex15.ONE.abs();
      Complex complex16 = complex13.add(complex1);
      Complex complex17 = complex16.ZERO.cosh();
      Complex complex18 = complex4.atan();
      Object object2 = complex10.readResolve();
      Complex complex19 = complex0.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex2.NaN.log();
      int int0 = complex3.I.hashCode();
      int int1 = 0;
      Complex complex5 = complex3.ZERO.pow(complex4);
      Complex complex6 = complex5.exp();
      try { 
        complex3.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex3.ONE.divide(complex5);
      double double0 = complex5.INF.getArgument();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.NaN.tanh();
      String string0 = complex7.I.toString();
      int int0 = complex1.hashCode();
      Complex complex9 = complex0.pow(complex4);
      Complex complex10 = complex9.INF.pow(complex3);
      Complex complex11 = complex9.ONE.conjugate();
      String string1 = complex9.NaN.toString();
      ComplexField complexField0 = complex3.getField();
      Complex complex12 = complex1.ONE.sqrt();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex5.INF.pow(complex13);
      Complex complex15 = complex4.multiply(complex1);
      Complex complex16 = complex15.I.subtract(complex7);
      Complex complex17 = complex15.tanh();
      int int1 = complex17.INF.hashCode();
      Complex complex18 = new Complex(0.0, 0.7853981633974483);
      Complex complex19 = complex1.multiply(complex18);
      Complex complex20 = complex1.I.pow(complex15);
      List<Complex> list0 = complex5.nthRoot(188);
      Complex complex21 = complex4.divide(complex10);
      Complex complex22 = complex6.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex2.INF.sinh();
      Complex complex5 = complex4.I.multiply(complex3);
      int int0 = complex0.I.hashCode();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.cos();
      Object object0 = complex6.I.readResolve();
      Complex complex8 = complex6.cos();
      Complex complex9 = complex8.I.acos();
      Complex complex10 = complex7.ZERO.sinh();
      Complex complex11 = complex3.I.acos();
      Complex complex12 = complex10.INF.acos();
      Complex complex13 = complex7.subtract(complex6);
      double double0 = complex13.INF.getArgument();
      Complex complex14 = complex2.sqrt1z();
      Complex complex15 = complex13.atan();
      boolean boolean0 = complex2.isInfinite();
      Complex complex16 = complex3.atan();
      Complex complex17 = complex16.I.add(complex8);
      Complex complex18 = complex7.acos();
      Complex complex19 = complex0.tan();
      Complex complex20 = complex19.divide(complex15);
      Complex complex21 = complex20.NaN.exp();
      Object object1 = complex15.readResolve();
      String string0 = complex3.toString();
      Complex complex22 = complex4.log();
      int int1 = complex0.hashCode();
      Complex complex23 = complex19.cos();
      Complex complex24 = complex5.sinh();
      Complex complex25 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex3.I.atan();
      Object object0 = complex1.readResolve();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.negate();
      Object object1 = complex6.readResolve();
      String string0 = complex6.NaN.toString();
      Complex complex8 = complex3.add(complex1);
      double double0 = complex3.abs();
      double double1 = complex3.getArgument();
      Complex complex9 = complex8.cosh();
      boolean boolean0 = complex5.isNaN();
      Complex complex10 = complex8.INF.divide(complex0);
      Complex complex11 = complex10.INF.add(complex0);
      Complex complex12 = complex0.negate();
      Complex complex13 = complex12.ZERO.atan();
      int int0 = complex13.I.hashCode();
      Complex complex14 = complex6.exp();
      Complex complex15 = complex8.sqrt1z();
      Complex complex16 = complex1.subtract(complex6);
      String string1 = complex1.toString();
      Complex complex17 = complex6.tan();
      Complex complex18 = complex5.cosh();
      Complex complex19 = complex15.subtract(complex16);
      ComplexField complexField0 = complex18.getField();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex1.INF.sinh();
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex3.ONE.pow(complex2);
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex6.ONE.sinh();
      double double0 = complex0.getArgument();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex3.INF.cosh();
      Complex complex10 = complex8.subtract(complex2);
      double double1 = complex8.getImaginary();
      Complex complex11 = complex0.multiply(complex1);
      Complex complex12 = complex11.ZERO.add(complex8);
      int int0 = 0;
      try { 
        complex11.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      String string0 = complex0.toString();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.log();
      int int0 = complex3.I.hashCode();
      String string1 = complex3.toString();
      Complex complex4 = complex1.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.multiply(0.0);
      double double1 = complex3.getImaginary();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex6.ZERO.sinh();
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex1.tan();
      double double2 = complex10.getArgument();
      boolean boolean0 = complex4.equals(complex2);
      Complex complex11 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex4.sin();
      double double0 = complex4.abs();
      Complex complex7 = complex4.acos();
      Complex complex8 = complex0.NaN.tanh();
      double double1 = complex2.abs();
      double double2 = complex6.getArgument();
      Complex complex9 = complex4.acos();
      int int0 = complex9.ONE.hashCode();
      Complex complex10 = complex0.pow(complex3);
      Complex complex11 = complex7.INF.acos();
      Complex complex12 = complex5.ZERO.atan();
      Complex complex13 = complex7.log();
      Complex complex14 = complex13.subtract(complex10);
      Complex complex15 = complex1.I.atan();
      List<Complex> list0 = complex5.nthRoot(37);
      Complex complex16 = complex5.sin();
      Complex complex17 = complex16.NaN.cosh();
      Complex complex18 = complex17.ONE.sinh();
      Complex complex19 = complex6.acos();
      Complex complex20 = complex1.ONE.createComplex(1465.973, Double.NaN);
      Complex complex21 = complex6.sqrt1z();
      Complex complex22 = complex5.cos();
      boolean boolean0 = complex4.equals(complex6);
      Complex complex23 = complex19.pow(complex5);
      Complex complex24 = complex10.exp();
      Complex complex25 = complex14.acos();
      Complex complex26 = complex16.createComplex(Double.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.I.tan();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex0.sqrt1z();
  }
}
