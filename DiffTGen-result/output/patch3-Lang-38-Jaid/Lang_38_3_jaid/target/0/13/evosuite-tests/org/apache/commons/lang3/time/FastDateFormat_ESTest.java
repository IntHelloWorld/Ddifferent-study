/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 08:16:22 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.ChronoField;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      String string0 = locale0.getDisplayName();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale1 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule");
      StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      FieldPosition fieldPosition0 = new FieldPosition((-2081));
      StringBuffer stringBuffer2 = decimalFormat0.format((double) 0, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer3 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer2);
      int int0 = fastDateFormat0.hashCode();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Chinese");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMAN;
      ChronoField chronoField0 = ChronoField.DAY_OF_YEAR;
      boolean boolean0 = zoneOffset0.isSupported(chronoField0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-181), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -181
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("h:mm:ss a z");
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      String string0 = fastDateFormat0.getPattern();
      MockDate mockDate0 = new MockDate((-4363), (-1559), 3, (-4363), 2, 18);
      MockGregorianCalendar mockGregorianCalendar0 = null;
      try {
        mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      String string0 = locale0.getDisplayName();
      Locale locale1 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule");
      FieldPosition fieldPosition0 = new FieldPosition((-2081));
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Chinese");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      FieldPosition fieldPosition0 = new FieldPosition(3845);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "9 Yc!P==zn8");
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1, (TimeZone) simpleTimeZone0, locale0);
      Locale locale1 = Locale.CHINA;
      String string0 = FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, true, 1, locale1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      String string0 = locale0.getDisplayName();
      Locale locale1 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule");
      FieldPosition fieldPosition0 = new FieldPosition((-2081));
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("French");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      int int0 = 977;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      System.setCurrentTimeMillis(1L);
      Locale locale0 = Locale.ENGLISH;
      String string0 = fastDateFormat0.getPattern();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      String[] stringArray0 = new String[1];
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "A4 TmG 9F[+~6.";
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("A4 TmG 9F[+~6.", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      boolean boolean0 = locale0.hasExtensions();
      Locale.setDefault(locale0);
      Locale locale1 = Locale.ROOT;
      String string0 = locale1.getDisplayCountry(locale0);
      String string1 = locale1.getDisplayCountry();
      String string2 = locale1.getDisplayCountry(locale0);
      String string3 = locale0.getDisplayScript(locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale1);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("");
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      String string4 = fastDateFormat1.toString();
      MockDate mockDate0 = new MockDate((-698L));
      StringBuffer stringBuffer0 = new StringBuffer(48);
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      FastDateFormat fastDateFormat4 = FastDateFormat.getTimeInstance(0);
      int int0 = 0;
      int int1 = 0;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "", 48, 3, 2, 2, 2, 1127, 1, 1, 0, 1, 3);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 48
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "", 0, 0, (-1301), 0, 0, 0, (-1301), 0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      Locale locale0 = Locale.ROOT;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("W.)'lY$nCTZkR", (TimeZone) simpleTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("EEEE, MMMM d, yyyy");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("h:mm:ss a z", timeZone0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("y0:iD#zh?Ov`!%~:");
      TimeZone timeZone0 = TimeZone.getTimeZone("YtU");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("YtU", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      boolean boolean0 = locale0.hasExtensions();
      Locale.setDefault(locale0);
      Locale locale1 = Locale.ROOT;
      String string0 = locale1.getDisplayCountry(locale0);
      String string1 = locale1.getDisplayCountry();
      String string2 = locale1.getDisplayCountry(locale0);
      String string3 = locale0.getDisplayScript(locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("");
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      String string4 = fastDateFormat0.toString();
      StringBuffer stringBuffer0 = new StringBuffer(48);
      Locale locale2 = new Locale(".K_g%dR!~?4", "");
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateInstance(3, (TimeZone) null, locale2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("mq(3ah", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "The validated array contains null element at index: %d";
      Locale locale0 = new Locale("h:mm:ss a z", "h:mm:ss a z", "The validated array contains null element at index: %d");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("h:mm:ss a z", locale0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      String string1 = fastDateFormat0.parseToken("org.apache.commons.lang3.time.FastDateFormat$TwentyFourHourField", intArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale1 = Locale.lookup(linkedList0, linkedList1);
      ParsePosition parsePosition0 = null;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseObject("3", (ParsePosition) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("fLwSXN(SL)3{y");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "h:mm:ss a z";
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.forLanguageTag("ak7I");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("h:mm:ss a z", (TimeZone) null, locale0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean0 = locale0.hasExtensions();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(4, (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 4
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "j2\"a";
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("j2\"a", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("0$5[(Ha");
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockSimpleDateFormat mockSimpleDateFormat1 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat1.get2DigitYearStart();
      ChoiceFormat choiceFormat0 = new ChoiceFormat(".[AeW,SSYh$");
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.US;
      Object object0 = locale0.clone();
      Locale locale1 = Locale.JAPANESE;
      String string1 = locale0.getDisplayScript(locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      String string2 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", timeZone0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(664, timeZone0, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 664
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0);
      MockDate mockDate0 = new MockDate((-200L));
      MockDate mockDate1 = new MockDate((-452), 1259, 1, 2879, 0, (-818));
      boolean boolean0 = timeZone0.inDaylightTime(mockDate1);
      boolean boolean1 = timeZone0.inDaylightTime(mockDate0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string0 = fastDateFormat0.parseToken("W#TD", intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("=1");
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(2, 1);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "=1");
      StringBuffer stringBuffer1 = fastDateFormat0.format(4254L, stringBuffer0);
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat4 = FastDateFormat.getInstance("=1");
      String string0 = locale0.getDisplayLanguage();
      FastDateFormat fastDateFormat5 = FastDateFormat.getDateInstance(0, locale0);
      String string1 = fastDateFormat5.format((-1L));
      Object object0 = fastDateFormat2.clone();
      String string2 = fastDateFormat0.format((-841L));
      // Undeclared exception!
      try { 
        fastDateFormat5.format((Object) null);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("=1");
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(2, 1);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "=1");
      StringBuffer stringBuffer1 = fastDateFormat0.format(4254L, stringBuffer0);
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat4 = FastDateFormat.getInstance("=1");
      String string0 = locale0.getDisplayLanguage();
      FastDateFormat fastDateFormat5 = FastDateFormat.getDateInstance(0, locale0);
      Object object0 = fastDateFormat2.clone();
      String string1 = fastDateFormat0.format((-841L));
      // Undeclared exception!
      try { 
        fastDateFormat5.format((Object) null);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("x=lm=xdJ7h");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1);
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = locale0.stripExtensions();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean0 = linkedList0.offerLast((Locale.LanguageRange) null);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      String string1 = locale1.getExtension('h');
      boolean boolean1 = fastDateFormat0.equals(locale1);
      int int0 = 3969;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(3969, 1, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 3969
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3349, "");
      Locale locale0 = Locale.US;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale1 = Locale.lookup(linkedList0, linkedList1);
      String[] stringArray0 = Locale.getISOLanguages();
      boolean boolean0 = locale0.hasExtensions();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      fastDateFormat0.init();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Long long0 = new Long(0);
      String string0 = fastDateFormat0.format((Object) long0);
      intArray0[2] = 2;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((-683L), (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("x+\"M @}n[P)4r6x>/");
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale1);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(1);
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale1);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat(")tbZobdL?", dateFormatSymbols0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 't'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "M~QQZ\"Im";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("M~QQZ\"Im");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: QQ
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1783), "");
      Locale locale0 = Locale.CHINA;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 7;
      intArray0[2] = 1;
      Locale locale1 = Locale.forLanguageTag("");
      intArray0[3] = 3;
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = 0;
      intArray0[7] = 1;
      intArray0[8] = (-1783);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.applyRules(calendar0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      boolean boolean0 = locale0.hasExtensions();
      Locale.setDefault(locale0);
      Locale locale1 = Locale.ROOT;
      String string0 = locale1.getDisplayCountry(locale0);
      String string1 = locale1.getDisplayCountry();
      String string2 = locale1.getDisplayCountry(locale0);
      String string3 = locale0.getDisplayScript(locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale1);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("");
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      String string4 = fastDateFormat1.toString();
      MockDate mockDate0 = new MockDate(0L);
      StringBuffer stringBuffer0 = new StringBuffer(48);
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      FastDateFormat fastDateFormat4 = FastDateFormat.getTimeInstance(0);
      int int0 = 0;
      int int1 = 0;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "", 48, 3, 2, 2, 2, 1127, 1, 1, 0, 1, 3);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 48
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.FRANCE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      ParsePosition parsePosition0 = new ParsePosition((-939));
      Date date0 = mockSimpleDateFormat0.parse("9p5)OpD]wa7:GN_", parsePosition0);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      StringBuffer stringBuffer1 = fastDateFormat1.format(date0, stringBuffer0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, true, 0, locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "U\\{F95{Gnv0Za)";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("U{F95{Gnv0Za)", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("", "", "");
      FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 5;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(5, timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 5
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "s%!9ve9IS/";
      TimeZone timeZone0 = TimeZone.getTimeZone("+p/)(IHI#I}|A");
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("s%!9ve9IS/", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      String string0 = fastDateFormat0.format((long) 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "L8([darQ'sR");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Thursday, 1 January 1970", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "d?(( ";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("d?(( ");
      String string1 = fastDateFormat0.format((-3816L));
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("LS] o^DYna!3>");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("LS] o^DYna!3>", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getDefault();
      String string1 = timeZone0.getDisplayName();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Greenwich Mean Time");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0);
      String string0 = fastDateFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = ";nVu`E\\nmA";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(";nVu`E\nmA", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) null);
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = new Locale("", "", "{UH5%!LR.N8#}s'");
      String string1 = FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, true, 1, locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      String string2 = null;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      DecimalFormatSymbols decimalFormatSymbols1 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat((String) null, decimalFormatSymbols0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = new Locale("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0);
      MockDate mockDate0 = new MockDate((-200L));
      MockDate mockDate1 = new MockDate((-452), 1259, 1, 2879, 0, (-818));
      boolean boolean0 = mockDate1.before(mockDate0);
      boolean boolean1 = timeZone0.inDaylightTime(mockDate1);
      boolean boolean2 = timeZone0.inDaylightTime(mockDate0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string0 = fastDateFormat0.parseToken("W#TD", intArray0);
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("(njbooAe*", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "Illegal pattern component: ";
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Illegal pattern component: ", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "M/[!Q2__");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0);
      Locale locale0 = fastDateFormat0.getLocale();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "2kEYG8");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = (-1840);
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1840), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1840
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      String string0 = locale0.getScript();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      int int0 = (-1699);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "", (-2222), (-1699), (-1699), 2, (-1699), 16, 0, 0, 2897);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -2222
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 790;
      TimeZone timeZone0 = TimeZone.getTimeZone("mq(3ah");
      TimeZone.setDefault(timeZone0);
      String string0 = timeZone0.getDisplayName();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(790, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 790
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int int0 = 0;
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-308), "org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey", 0, 0, 0, 0, 2, 1, 0, 0, 2, 0, 1);
      Locale locale0 = Locale.CHINA;
      String string1 = simpleTimeZone0.getDisplayName(false, 1, locale0);
      TimeZone.setDefault(simpleTimeZone0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale locale1 = Locale.GERMAN;
      boolean boolean0 = linkedHashSet0.retainAll(linkedList0);
      boolean boolean1 = linkedHashSet0.add(locale1);
      Locale locale2 = Locale.lookup(linkedList0, linkedHashSet0);
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>(1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet1, locale_FilteringMode0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("'C=d(do{FE;H", (TimeZone) simpleTimeZone0, (Locale) null);
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(1, (TimeZone) simpleTimeZone0);
      FastDateFormat fastDateFormat4 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(2, (-306), (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -306
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = new Locale("");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0, locale0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(2, timeZone0);
      FastDateFormat fastDateFormat4 = FastDateFormat.getInstance("", timeZone0);
      FastDateFormat fastDateFormat5 = FastDateFormat.getDateTimeInstance(1, 3, timeZone0);
      String string0 = fastDateFormat2.getPattern();
      fastDateFormat1.init();
      FastDateFormat fastDateFormat6 = FastDateFormat.getDateTimeInstance(1, 0);
      FastDateFormat fastDateFormat7 = FastDateFormat.getDateTimeInstance(3, 1, timeZone0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        decimalFormat0.format((double) 2, stringBuffer0, (FieldPosition) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(2081);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2081
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      String string1 = locale0.getDisplayCountry();
      intArray0[1] = 3;
      // Undeclared exception!
      try { 
        timeZone0.getDisplayName(false, 476, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 476
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      String string1 = timeZone0.getDisplayName();
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      try { 
        fastDateFormat0.parseObject("");
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = TimeZone.getDefault();
      boolean boolean0 = timeZone0.observesDaylightTime();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(1, timeZone0);
      timeZone0.setID("yt");
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
      String string0 = "ln=\\69Pj}NS\"jcE";
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("ln=\u00069Pj}NS\"jcE", (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1205), (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1205
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String[] stringArray0 = Locale.getISOLanguages();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      long long0 = 3322L;
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("No date time pattern for locale: ");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale locale0 = Locale.lookup(linkedList0, linkedHashSet0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1232), (-1232), timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1232
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = (-1117);
      TimeZone timeZone0 = null;
      String string0 = "";
      Locale locale0 = new Locale("");
      Object object0 = locale0.clone();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(93, (-1117), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1117
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = Locale.ITALY;
      String string0 = locale0.getDisplayScript(locale1);
      Locale locale2 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, 3043, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 3043
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = locale0.getDisplayLanguage();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("R0f9|4(loY*Wa4WW!X", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("y0:iD#zh?Ov`!%~:");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-387), 45, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 45
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null);
      ParsePosition parsePosition0 = new ParsePosition(3);
      parsePosition0.setIndex((-3892));
      Object object0 = fastDateFormat0.parseObject("]", parsePosition0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1);
      Object object1 = fastDateFormat1.parseObject("]", parsePosition0);
      Locale locale0 = Locale.US;
      parsePosition0.setIndex(0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-3529), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -3529
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      String string0 = "";
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[1] = 3;
      Locale locale1 = Locale.GERMAN;
      String string1 = locale1.getDisplayScript(locale0);
      String string2 = locale0.getDisplayLanguage(locale1);
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 2;
      Locale locale2 = new Locale("", "", "");
      String string3 = locale0.getDisplayScript(locale2);
      intArray0[6] = 2;
      try { 
        fastDateFormat0.parseObject("");
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "D\"VG");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.ROOT;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition(3845);
      StringBuffer stringBuffer1 = decimalFormat0.format((long) 0, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = numberFormat0.format((long) 0, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer3 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer2);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(358, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 358
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "8g#>Lh9J9Pw";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("8g#>Lh9J9Pw");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 66;
      int int1 = 1852;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(66, 1852);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1852
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int int0 = 0;
      MockDate mockDate0 = new MockDate(0, 0, 0, 1, 3);
      long long0 = mockDate0.getTime();
      String string0 = fastDateFormat0.format((Date) mockDate0);
      String string1 = "%!+o";
      int int1 = 4435;
      int int2 = (-522);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("HKrjA+&Q'F");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'r'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("u%L}n)R|@!Ny#A028{4");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = fastDateFormat0.format(calendar0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("Friday, February 14, 2014");
      long long0 = 32L;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      FieldPosition fieldPosition0 = null;
      // Undeclared exception!
      try { 
        choiceFormat0.format((-3192L), stringBuffer0, (FieldPosition) null);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int int0 = 614;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(4852, "pY", 4852, 0, 0, 614, 4852, 0, 0, 4852, (-522));
      } catch(IllegalArgumentException e) {
         //
         // Illegal daylight saving value: -522
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      boolean boolean0 = timeZone0.observesDaylightTime();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, (-2546), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2546
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = (-974);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.KOREAN;
      String[] stringArray0 = Locale.getISOLanguages();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-974), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -974
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(784, "k4VKrrX%1");
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(784, 784, (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 784
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2826), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2826
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1));
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = "={d&eP9I0bam$";
      String string1 = "Cm*!daJ;eXNUo9.@dV";
      Locale locale0 = new Locale("={d&eP9I0bam$", "Cm*!daJ;eXNUo9.@dV", "Cm*!daJ;eXNUo9.@dV");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(13, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 13
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1, (TimeZone) null);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = TimeZone.getTimeZone("}(/j<}8[`Gkx*Q1~fn");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, timeZone0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("1PwzcFz[ (R", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String string0 = "(PXL=t5\\2@oG@BBJ";
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("(PXL=t5\u0002@oG@BBJ", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, timeZone0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(347, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 347
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      int int0 = (-3113);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-2115));
      // Undeclared exception!
      try { 
        ZoneId.ofOffset(">Hag|kFlk\u0006", zoneOffset0);
      } catch(IllegalArgumentException e) {
         //
         // prefix should be GMT, UTC or UT, is: >Hag|kFlk\u0006
         //
         verifyException("java.time.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 3, (TimeZone) null);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      Locale locale0 = Locale.TAIWAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      String string0 = fastDateFormat0.format(calendar0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      parsePosition0.setIndex(2);
      parsePosition0.setErrorIndex(3);
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      String string1 = fastDateFormat0.format(date0);
      int int0 = 1875;
      Locale locale1 = new Locale("", "");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, false, 1875, locale1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      DecimalFormat decimalFormat0 = new DecimalFormat("]7 *uEK~5D6RR}F:2).");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "]7 *uEK~5D6RR}F:2).");
      FieldPosition fieldPosition0 = new FieldPosition(2);
      StringBuffer stringBuffer1 = decimalFormat0.format(0L, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = stringBuffer1.append("]7 *uEK~5D6RR}F:2).");
      StringBuffer stringBuffer3 = decimalFormat0.format(0L, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer4 = fastDateFormat0.format(0L, stringBuffer3);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition1 = new FieldPosition(format_Field0, 0);
      fieldPosition1.setEndIndex(381);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) "7U~/rp.&U)]^W*./(", stringBuffer0, fieldPosition1);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      String string0 = "]";
      TimeZone timeZone0 = TimeZone.getTimeZone("]");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("\"g", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1451);
      intArray0[1] = 1068;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-20), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -20
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      int int0 = 2641;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(2641);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 2641
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      MockDate mockDate0 = new MockDate();
      Calendar calendar0 = null;
      String string0 = "";
      Instant instant0 = mockDate0.toInstant();
      // Undeclared exception!
      try { 
        MockDate.parse("");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      String string0 = "";
      Locale locale0 = new Locale("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      int int0 = 431;
      timeZone0.setRawOffset(0);
      timeZone0.setID("");
      int int1 = (-1168);
      // Undeclared exception!
      try { 
        timeZone0.getDisplayName(true, 2, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 2
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule";
      Locale locale0 = Locale.CHINESE;
      String string1 = locale0.getDisplayName();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }
}
