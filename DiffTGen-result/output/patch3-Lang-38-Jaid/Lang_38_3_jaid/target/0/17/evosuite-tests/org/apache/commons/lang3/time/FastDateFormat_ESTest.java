/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 08:19:57 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.text.ChoiceFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = "h`AH2B RG^ $&:Oiqg%";
      int[] intArray0 = new int[7];
      intArray0[0] = 119;
      intArray0[1] = 119;
      intArray0[2] = 3;
      intArray0[3] = 1;
      intArray0[4] = 3;
      intArray0[5] = 2;
      intArray0[6] = 3;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("h`AH2B RG^ $&:Oiqg%", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[6];
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, (Locale) null);
      intArray0[2] = 0;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ";83C1;YF+y 4W'a");
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, timeZone0);
      Instant instant0 = MockInstant.ofEpochSecond((long) 1, (long) 0);
      Date date0 = Date.from(instant0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      StringBuffer stringBuffer1 = mockSimpleDateFormat0.format(date0, stringBuffer0, fieldPosition0);
      // Undeclared exception!
      try { 
        choiceFormat0.format((double) 3, stringBuffer1, fieldPosition0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, locale1);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateFormat0.parseObject("EVwH1lG", parsePosition0);
      String string0 = fastDateFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      String string0 = "";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("yJ00:6w{q");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-25), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -25
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1167, "V *qVHmc!fS", 1167, 0, 1167, 266, 0, 0, 1167, 1167);
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, true, 1167, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 1167
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Z/G?$;uKV{ZuB*@");
      Locale locale0 = Locale.GERMAN;
      String string0 = locale0.getDisplayVariant();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Z/G?$;uKV{ZuB*@", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "mywnWBa#-:/==";
      Locale locale0 = new Locale("mywnWBa#-:/==", "mywnWBa#-:/==");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("mywnWBa#-:/==", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("");
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", timeZone0, locale0);
      ZoneId zoneId0 = timeZone0.toZoneId();
      long long0 = 0L;
      Object object0 = new Object();
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(2);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer(383);
      stringBuffer0.ensureCapacity(0);
      // Undeclared exception!
      try { 
        fastDateFormat1.format(object0, stringBuffer0, (FieldPosition) null);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      boolean boolean0 = timeZone0.inDaylightTime(date0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-262), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -262
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$TimeZoneNameRule";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TimeZoneNameRule");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Kdx*");
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      Locale locale1 = Locale.CHINA;
      String string0 = locale1.getDisplayLanguage(locale0);
      String string1 = locale0.getDisplayLanguage(locale1);
      MockDate mockDate0 = new MockDate(3, 1, 3, 5, 3);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setMaximumFractionDigits(1);
      decimalFormat0.setMaximumFractionDigits(0);
      String string2 = fastDateFormat0.format((long) 0);
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      try { 
        decimalFormat0.format(0.0, stringBuffer0, (FieldPosition) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(1, 1, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(722, 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 722
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("P]p=");
      TimeZone timeZone1 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      timeZone0.setID("P]p=");
      String string1 = fastDateFormat0.toString();
      String string2 = "dz@3/";
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("dz@3/", timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.getLeastMaximum((-1));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("a+Cfa!hT", "");
      Locale locale1 = locale0.stripExtensions();
      String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "", 1109, 0, 0, 2601, 1, 0, 3, 1109);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 1870;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 3;
      String string0 = fastDateFormat0.parseToken("a3YoC*BI7D3,B< :|!", intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      String string0 = locale0.toLanguageTag();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      MockDate mockDate0 = new MockDate(0, (-5621), 0, 0, 2486, (-5621));
      boolean boolean0 = timeZone0.inDaylightTime(mockDate0);
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale1);
      timeZone0.setRawOffset(29);
      Locale locale2 = Locale.forLanguageTag("No date pattern for locale: ");
      ZoneId zoneId0 = timeZone0.toZoneId();
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0, locale0);
      fastDateFormat0.init();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "No date pattern for locale: ");
      FieldPosition fieldPosition0 = new FieldPosition(2);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) "No date pattern for locale: ", stringBuffer0, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      parsePosition0.setErrorIndex((-3280));
      parsePosition0.setErrorIndex(0);
      Object object0 = fastDateFormat0.clone();
      Object object1 = fastDateFormat0.parseObject((String) null, parsePosition0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      int int0 = (-2747);
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.set((-2021), 0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2021
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-2061), 1347, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1347
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("BPF;v", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "1ZF CV2!i`f";
      int int0 = 4594;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4594, "1ZF CV2!i`f");
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("1ZF CV2!i`f", (TimeZone) simpleTimeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "1*FGwDaKyf<Q";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("1*FGwDaKyf<Q");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 1, (TimeZone) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(7, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 7
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      Locale locale0 = Locale.PRC;
      String string0 = locale0.getExtension('p');
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, locale0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Locale locale1 = Locale.ITALIAN;
      String string0 = locale0.getDisplayCountry(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(506, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 506
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(0);
      parsePosition0.setIndex(0);
      parsePosition0.setErrorIndex(0);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      Locale locale0 = new Locale("", "");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 0, locale0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, locale0);
      String string1 = fastDateFormat1.format(0L);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-801), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -801
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("k%1[<@48<aTl", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-3833), (-3833), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -3833
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "Unknown class: ";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Unknown class: ");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.format((-773L));
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("No date pattern for locale: ");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      FastDateFormat fastDateFormat0 = new FastDateFormat("cyg'S1hwJwcAu b2", timeZone0, locale0);
      TimeZone timeZone1 = fastDateFormat0.getTimeZone();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format(0L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(81, "~mj6!n");
      Locale locale0 = Locale.US;
      Set<Character> set0 = locale0.getExtensionKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateFormat0.formatToCharacterIterator(simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.util.SimpleTimeZone
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "4-;$nH3Sn]I(z5:";
      String string1 = "I\"Z0qr1Q";
      Locale locale0 = new Locale("4-;$nH3Sn]I(z5:", "I\"Z0qr1Q", "I\"Z0qr1Q");
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale1);
      boolean boolean0 = fastDateFormat0.equals("I\"Z0qr1Q");
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      Instant instant0 = MockInstant.ofEpochSecond((long) 0, (long) 2);
      Instant instant1 = MockInstant.plusMillis(instant0, 1L);
      ChronoUnit chronoUnit0 = ChronoUnit.CENTURIES;
      // Undeclared exception!
      try { 
        MockInstant.truncatedTo(instant1, chronoUnit0);
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unit is too large to be used for truncation
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1018), "", 0, 0, (-1018), 3806, 0, 0, 0, (-900));
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("};$c]&)?:8'Sq5wb", intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(445, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 445
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 2002;
      TimeZone timeZone0 = TimeZone.getDefault();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale locale0 = Locale.lookup(linkedList0, list0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(2002, timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2002
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "j8lbzuOLQIR~x";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-73), "j8lbzuOLQIR~x");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-73), (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -73
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "yqs(K2\\}K%5&HM";
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("yqs(K2}K%5&HM", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "]V";
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("]V", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = new Locale("No date time pattern for locale: ");
      String string0 = locale0.getDisplayScript();
      Object object0 = locale0.clone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) null, locale0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      StringBuffer stringBuffer0 = null;
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      String string1 = "";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("No date time pattern for locale: ", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = mockSimpleDateFormat0.parse("If#A:p|W,1]", parsePosition0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer1);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null, stringBuffer2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("N\"Zmfo");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("N\"Zmfo", timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone1 = TimeZone.getDefault();
      Set<Character> set0 = locale0.getExtensionKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      TimeZone.setDefault(timeZone0);
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      timeZone0.setID("}c1$zy4A.I");
      Set<Character> set2 = locale0.getExtensionKeys();
      boolean boolean0 = timeZone0.observesDaylightTime();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0);
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(2, 8, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 8
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, timeZone0);
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("");
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      ParsePosition parsePosition0 = new ParsePosition((-1));
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
      FieldPosition fieldPosition0 = new FieldPosition((-286));
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      StringBuffer stringBuffer2 = stringBuffer1.append((CharSequence) charBuffer0);
      fieldPosition0.setEndIndex(3);
      StringBuffer stringBuffer3 = decimalFormat0.format((double) 3, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer4 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = new Locale("w", "w");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      boolean boolean0 = locale0.hasExtensions();
      String[] stringArray0 = Locale.getISOLanguages();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("w", locale0);
      fastDateFormat0.init();
      ParsePosition parsePosition0 = new ParsePosition(0);
      parsePosition0.setIndex(0);
      Object object0 = fastDateFormat0.parseObject("w", parsePosition0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 1, 0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(3600000, 3600000);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 3600000
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = new Locale("'#8TG:.43[Lkin[V", "", "Negative values should not be possible");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'#8TG:.43[Lkin[V", locale0);
      MockDate mockDate0 = new MockDate((-1764), 157, 100);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Negative values should not be possible");
      FieldPosition fieldPosition0 = new FieldPosition(560);
      StringBuffer stringBuffer1 = numberFormat0.format(0.0, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      StringBuffer stringBuffer3 = fastDateFormat0.format(1L, stringBuffer2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("#6ypaqv01M[~Dj");
      Locale locale0 = new Locale("xUeCqSY`p", "Illegal pattern component: ", "#6ypaqv01M[~Dj");
      FastDateFormat fastDateFormat0 = new FastDateFormat("xUeCqSY`p", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 2, (-1026));
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      MockDate mockDate0 = new MockDate(0, (-2412), (-2412), 0, 40);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      System.setCurrentTimeMillis(2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = locale0.stripExtensions();
      Calendar calendar0 = MockCalendar.getInstance(locale1);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("xXwwkBb>.9v4Gugztq", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      String[] stringArray0 = Locale.getISOLanguages();
      String string0 = timeZone0.getDisplayName(locale0);
      Locale locale1 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("6W/x-9", timeZone0, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "";
      Locale locale0 = new Locale("", "", "");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1768, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1768
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = (-2200);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-2200));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2200
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>(1008, 1008);
      Locale locale1 = Locale.lookup(linkedList0, linkedHashSet0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      Locale locale2 = fastDateFormat0.getLocale();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Set<Character> set1 = locale0.getExtensionKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone1 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, (-2745), timeZone1, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2745
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1));
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(4091, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 4091
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-4699), (TimeZone) null, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -4699
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "(b<)nm;Bi;`he0<l";
      TimeZone timeZone0 = TimeZone.getTimeZone("(b<)nm;Bi;`he0<l");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("(b<)nm;Bi;`he0<l", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$TwelveHourField";
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TwelveHourField");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("gnQX&;t|", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      String string0 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(0);
      int int0 = 0;
      parsePosition0.setIndex(0);
      parsePosition0.setErrorIndex(0);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      Locale locale0 = new Locale("", "");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 0, locale0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, locale0);
      String string1 = fastDateFormat1.format(0L);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-801), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -801
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "", (-2371), 289, 289, (-1), 3, 435, 289, 0, 289);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -2371
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("\"8");
      ParsePosition parsePosition0 = new ParsePosition(0);
      parsePosition0.setIndex(0);
      Object object0 = fastDateFormat0.parseObject("\"8", parsePosition0);
      // Undeclared exception!
      try { 
        Date.from((Instant) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "i6wi3|*0OHa1FJB";
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("i6wi3|*0OHa1FJB", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = (-2105);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2105));
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2105
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 1941, 1, (-836), 1941, 1, (-789), 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month -836
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 4, (-1), (-2905), (-1), (-2905), (-2905), 4, (-2905), (-2905), 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start time -2905
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int int0 = fastDateFormat0.hashCode();
  }
}
