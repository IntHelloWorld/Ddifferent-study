/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 08:13:14 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeParseException;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      MockDate mockDate0 = new MockDate((-2934), 0, (-2934));
      StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
      // Undeclared exception!
      try { 
        decimalFormat0.format((-1.0), (StringBuffer) null, (FieldPosition) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(2, (TimeZone) null);
      // Undeclared exception!
      try { 
        MockCalendar.getInstance((TimeZone) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string0 = fastDateFormat0.toString();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "FastDateFormat[]");
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.forLanguageTag("EFxE$Idk,6EGYs`P");
      String string1 = locale0.getDisplayName(locale1);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("FastDateFormat[]", (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("fq{%D^)p@zZDWAC7 k");
      String string0 = locale0.toLanguageTag();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("[", locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(1, 0);
      String string1 = locale0.getScript();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", locale0);
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, (Locale) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-146), 2, 0, 0);
      StringWriter stringWriter0 = new StringWriter(0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", 60000, 60000);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$TwentyFourHourField";
      int[] intArray0 = null;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("()0XwEy&NOH");
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((-1834L), stringBuffer0);
      Format.Field format_Field0 = null;
      ParsePosition parsePosition0 = new ParsePosition(0);
      parsePosition0.setIndex(0);
      Object object0 = fastDateFormat0.parseObject("cC2<0hV+X\"o", parsePosition0);
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null);
      // Undeclared exception!
      try { 
        choiceFormat0.format((double) 0, stringBuffer1, fieldPosition0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      MockDate mockDate0 = new MockDate(1);
      long long0 = 0L;
      TimeZone timeZone0 = null;
      long long1 = mockDate0.getTime();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1, (TimeZone) null);
      long long2 = 0L;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      StringBuffer stringBuffer0 = new StringBuffer("a<5f% o>P\"H");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1038);
      StringBuffer stringBuffer1 = mockSimpleDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      // Undeclared exception!
      try { 
        choiceFormat0.format((double) 2, stringBuffer1, fieldPosition0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 10;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      int int1 = (-2168);
      simpleTimeZone0.setRawOffset((-2168));
      // Undeclared exception!
      try { 
        fastDateFormat0.format(date0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "TuDJ(cPq$kAy6(IF";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("TuDJ(cPq$kAy6(IF");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int int0 = 366;
      int int1 = 0;
      int int2 = 1134;
      String string0 = "";
      try { 
        fastDateFormat0.parseObject("");
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("%j`4bV 0+izhA4?C+");
      Locale locale0 = Locale.forLanguageTag("%j`4bV 0+izhA4?C+");
      Locale locale1 = locale0.stripExtensions();
      String string0 = locale0.getDisplayCountry(locale1);
      FastDateFormat fastDateFormat0 = new FastDateFormat("%j`4bV 0+izhA4?C+", timeZone0, locale1);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      int[] intArray0 = new int[9];
      String string1 = locale1.getDisplayCountry();
      boolean boolean1 = timeZone0.observesDaylightTime();
      String string2 = fastDateFormat0.toString();
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 3;
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 0;
      intArray0[8] = 42;
      String string3 = fastDateFormat0.parseToken("j+f6F_LfdSpdb", intArray0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format(1779L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "{E[+bW9uU5H6";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("{E[+bW9uU5H6");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 3;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      Locale locale1 = fastDateFormat0.getLocale();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(7, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 7
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      Locale locale0 = new Locale("", "", "Ke)Jd;(bCg`C<BS:g");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("IThRR%JCje)7.2h$P", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "YuMgjBd{pG)bhH/zfWu";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("YuMgjBd{pG)bhH/zfWu");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale1);
      String string0 = fastDateFormat0.getPattern();
      int int0 = 1017;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(2425, "", 2, 0, 0, 0, (-1), 0, 1, 94, 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal daylight saving value: 0
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.getPattern();
      int int0 = 31;
      int int1 = 3318;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "M/d/yy h:mm a", 31, 1481, 3318, 0, 0, 11, 0, 0, 2, 0, 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 31
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.KOREAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, locale0);
      boolean boolean0 = fastDateFormat0.equals((Object) null);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(3, "wSGK)(aUnW", 13, 1, 1, 0, (-2478), 1246, 1, 0, 0, 1, 13);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 13
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = ",CYf";
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(",CYf", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, timeZone0);
      String string0 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1, timeZone0);
      String string1 = "";
      int int0 = (-333);
      Locale locale0 = Locale.CHINESE;
      TimeZone.setDefault(timeZone0);
      String string2 = locale0.getDisplayLanguage();
      Object object0 = timeZone0.clone();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-333), 122, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 122
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "n?[=2m}h h]fe~N";
      TimeZone timeZone0 = TimeZone.getTimeZone("K#+U");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("n?[=2m}h h]fe~N", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "2Z0>+G};S(N";
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("2Z0>+G};S(N", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.ITALY;
      String[] stringArray0 = Locale.getISOLanguages();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-2462), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2462
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      String string0 = "Hu;:;";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(Integer.MIN_VALUE, "Hu;:;");
      simpleTimeZone0.setStartYear(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(Integer.MIN_VALUE, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2147483648
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ITALY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "xE8W>[dP61tcL*PI%RE";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("xE8W>[dP61tcL*PI%RE");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("H[^6dWaIN}<Q.6]&p[", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 1, (TimeZone) null, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      String string0 = null;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, (String) null, 3, (-2827), 0, 0, 3, 1819, 1751, (-4253), 1819);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("%j`4bV 0+izhA4?C+");
      Locale locale0 = Locale.forLanguageTag("%j`4bV 0+izhA4?C+");
      Locale locale1 = Locale.CHINESE;
      String string0 = locale0.getDisplayCountry(locale1);
      FastDateFormat fastDateFormat0 = new FastDateFormat("%j`4bV 0+izhA4?C+", timeZone0, locale1);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      int[] intArray0 = new int[9];
      String string1 = locale1.getDisplayCountry();
      boolean boolean1 = timeZone0.observesDaylightTime();
      String string2 = fastDateFormat0.toString();
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 3;
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 0;
      intArray0[8] = 42;
      String string3 = fastDateFormat0.parseToken("j+fEe6F_LfdSpdb", intArray0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format(1779L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("_i&", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(292, 292, timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 292
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", (TimeZone) null, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 11, 0, 2, 3);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      double double0 = (-1.0);
      StringBuffer stringBuffer0 = new StringBuffer("#N<<\"fk&L2Fc9");
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format(0L, stringBuffer1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "JY";
      TimeZone timeZone0 = null;
      Locale locale0 = new Locale("JY", "JY");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("JY", (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "1GP2<:5g|e{";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("1GP2<:5g|e{");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Object object0 = timeZone0.clone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      boolean boolean0 = timeZone0.observesDaylightTime();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(1581L, stringBuffer0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        MockInstant.parse(stringBuffer0);
      } catch(DateTimeParseException e) {
         //
         // Text '' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = null;
      int int0 = (-2);
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, false, (-2), locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("L,Js)wD@G#.>QVI%", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter(6632);
      mockGregorianCalendar0.clear(0);
      stringWriter0.flush();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone1 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(6632, 0, timeZone1, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 6632
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      Calendar calendar0 = null;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-1));
      // Undeclared exception!
      try { 
        choiceFormat0.format((Object) null, stringBuffer1, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.NumberFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2739), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2739
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("!/dEz/Yrq");
      Locale locale0 = Locale.JAPANESE;
      String string0 = timeZone0.getDisplayName(locale0);
      Locale locale1 = Locale.TAIWAN;
      String string1 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 1, locale1);
      int int0 = (-697);
      int int1 = 90;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1, "", 1, 90, (-987), (-1325), 456, (-3491), (-1325), (-2167));
      } catch(IllegalArgumentException e) {
         //
         // Illegal start time -1325
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.US;
      Set<Character> set0 = locale0.getExtensionKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      MockDate mockDate0 = new MockDate(2);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      Calendar calendar0 = null;
      StringBuffer stringBuffer0 = new StringBuffer("12:00:00 AM GMT");
      // Undeclared exception!
      try { 
        fastDateFormat0.applyRules((Calendar) null, stringBuffer0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TwelveHourField", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "9DW6l";
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("9DW6l", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      String string0 = "|=9az";
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(2, "", 1, 2, 3, 1, 711, 1, 0, 0, 2989);
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month 711
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "[Qi^.2sWa3o~srG6S";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("[Qi^.2sWa3o~srG6S");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      String string0 = locale0.toLanguageTag();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("~&4,`3Z-0?s");
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((ZoneId) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = "";
      int int0 = 1;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 3);
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((ZoneId) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "Illegal pattern component: ";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1280, "Illegal pattern component: ");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1280, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1280
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, (Locale) null);
      String string0 = fastDateFormat0.format((long) 1);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TextField");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule", (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, (-3065), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -3065
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "uDlmlpG]1O15PjA";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("uDlmlpG]1O15PjA", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) mockSimpleDateFormat0, (StringBuffer) null, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.evosuite.runtime.mock.java.text.MockSimpleDateFormat
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = ":gU\\%bo4";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ":gU%bo4", 0, 0, 60, 556, 60, 60, 0, 0, 0, 60, 556);
      Locale locale0 = new Locale(":gU%bo4");
      Locale.setDefault(locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(":gU%bo4", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      int int0 = (-699);
      MockDate mockDate0 = new MockDate((-699), 0, 2, 0, 3);
      int int1 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-699), 0, 2);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      FieldPosition fieldPosition0 = new FieldPosition(1);
      StringBuffer stringBuffer2 = mockSimpleDateFormat0.format((Date) mockDate0, stringBuffer1, fieldPosition0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) "", stringBuffer2, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      String string0 = locale0.getDisplayName();
      Locale locale1 = Locale.forLanguageTag("Italian");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, locale0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 1;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-322), "");
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-322), (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -322
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "[";
      TimeZone timeZone0 = TimeZone.getTimeZone("[");
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, (Locale) null);
      int int0 = fastDateFormat0.hashCode();
      String string1 = fastDateFormat0.toString();
      long long0 = 1352L;
      // Undeclared exception!
      try { 
        timeZone0.getDisplayName((Locale) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      int int0 = fastDateFormat0.hashCode();
      String string0 = fastDateFormat0.format(0L);
      Instant instant0 = MockInstant.ofEpochSecond(2598L);
      Date date0 = Date.from(instant0);
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, (float) 3);
      StringBuffer stringBuffer2 = fastDateFormat0.format(date0, stringBuffer0);
      int int1 = fastDateFormat0.getMaxLengthEstimate();
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, true, 3, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 3
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.CANADA_FRENCH;
      String string0 = locale0.getDisplayVariant(locale1);
      Object object0 = locale0.clone();
      Locale locale2 = Locale.forLanguageTag("Q#H1Op79r+KjkFx-");
      String[] stringArray0 = Locale.getISOCountries();
      FastDateFormat fastDateFormat0 = new FastDateFormat("", (TimeZone) null, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      TimeZone timeZone0 = fastDateFormat1.getTimeZone();
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0);
      // Undeclared exception!
      try { 
        fastDateFormat2.parseObject("Q#H1Op79r+KjkFx-", (ParsePosition) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Object object0 = timeZone0.clone();
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateTimeInstance(0, 1, timeZone0, locale0);
      Locale locale1 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(10, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 10
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.toString();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = Locale.CHINA;
      String string1 = locale0.getDisplayName(locale1);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("FastDateFormat[M/d/yy h:mm a]");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 't'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = null;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat((String) null, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("[");
      MockDate mockDate0 = new MockDate(1730, 1259, 296);
      String string0 = fastDateFormat0.format((Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2468);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(4, 2468, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2468
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 1330;
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(1330, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1330
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "UkKlT");
      int int0 = simpleTimeZone0.getOffset((long) (-3245));
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-3245), (TimeZone) simpleTimeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -3245
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = (-828);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-828));
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -828
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<s$t~Z\"X+.Y'");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, (-1433), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1433
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(4, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 4
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-384), (-32), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -32
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = 1618;
      Locale locale0 = Locale.forLanguageTag("VEY;%");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1618, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1618
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = 1179;
      int int1 = 0;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1179, 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1179
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1684, 1684);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1684
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = fastDateFormat0.format(calendar0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1347, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1347
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = "d/Q";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "d/Q");
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      // Undeclared exception!
      try { 
        ZoneId.ofOffset("d/Q", zoneOffset0);
      } catch(IllegalArgumentException e) {
         //
         // prefix should be GMT, UTC or UT, is: d/Q
         //
         verifyException("java.time.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int int0 = (-4422);
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-4422), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -4422
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ")^F#;q9Fc!fjl}W&Oss");
      String string0 = simpleTimeZone0.getDisplayName(false, 0);
      Object object0 = simpleTimeZone0.clone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0);
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(")^F#;q9Fc!fjl}W&Oss", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      String string0 = "[]^K";
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      // Undeclared exception!
      try { 
        ZoneId.ofOffset("[]^K", zoneOffset0);
      } catch(IllegalArgumentException e) {
         //
         // prefix should be GMT, UTC or UT, is: []^K
         //
         verifyException("java.time.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      int int0 = 1;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(851, "", 0, 0, 1, 851, 1, 851, 0, 0, 1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal end day 851
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }
}
