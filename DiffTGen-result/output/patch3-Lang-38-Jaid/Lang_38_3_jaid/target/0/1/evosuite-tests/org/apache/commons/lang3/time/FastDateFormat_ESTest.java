/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 08:13:16 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.text.AttributedCharacterIterator;
import java.text.ChoiceFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.Clock;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.JapaneseDate;
import java.time.chrono.MinguoDate;
import java.time.format.TextStyle;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Spliterator;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 1;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate(9, 635, 4172, (-319), 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 3);
      StringBuffer stringBuffer1 = numberFormat0.format((long) 2, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = mockSimpleDateFormat0.format((Date) mockDate0, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer3 = fastDateFormat0.format((Date) mockDate0, stringBuffer2);
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null, (String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.ENGLISH;
      String string0 = locale1.getDisplayLanguage(locale0);
      Locale locale2 = Locale.forLanguageTag("");
      String string1 = locale0.getDisplayName();
      String[] stringArray0 = Locale.getISOCountries();
      String string2 = locale0.getDisplayLanguage(locale1);
      String[] stringArray1 = Locale.getISOLanguages();
      String string3 = locale2.getDisplayVariant();
      Object object0 = locale1.clone();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Set<String> set1 = locale1.getUnicodeLocaleAttributes();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      String string4 = locale1.getDisplayLanguage(locale2);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, locale1);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, (TimeZone) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      String[] stringArray0 = Locale.getISOLanguages();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, false, 3, locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      boolean boolean0 = fastDateFormat0.equals(japaneseDate0);
      MockDate mockDate0 = new MockDate(2785, 1, 0, 1, 3);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      StringBuffer stringBuffer2 = stringBuffer1.replace(0, 0, "");
      StringBuffer stringBuffer3 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      StringBuffer stringBuffer4 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      String string0 = fastDateFormat0.toString();
      Locale locale0 = new Locale("eK`<>>6~~IY~;x:vlXQ", "n{@)|");
      String string1 = locale0.getDisplayVariant();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1908), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1908
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("!G5*u}?^\"f`aDY}LJ{");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "<,$Ve),g:7Fh43I";
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("<,$Ve),g:7Fh43I", locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Object object0 = timeZone0.clone();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = linkedHashSet0.add((String) null);
      String string0 = Locale.lookupTag(linkedList0, linkedHashSet0);
      boolean boolean1 = locale0.hasExtensions();
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat((String) null, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      int int0 = 0;
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, (-1311), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1311
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Spliterator<Locale.LanguageRange> spliterator0 = linkedList0.spliterator();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Object object0 = locale0.clone();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) null);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-3288), 3600000);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 3600000
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "$!.jy h*lME>FY@<,";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("$!.jy h*lME>FY@<,");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      long long0 = 0L;
      Clock clock0 = MockClock.systemDefaultZone();
      MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        numberFormat0.formatToCharacterIterator(clock0);
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      Locale locale0 = new Locale("6!hc>+:S;Ft/z", "%ISQ6#0H}}jYq`3", "%xt9}I(A:1k+<Y?`");
      Object object0 = locale0.clone();
      String string0 = locale0.getDisplayCountry();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 3, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1517), (-172), (-172));
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance();
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat1.formatToCharacterIterator(mockGregorianCalendar0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale1 = Locale.ITALY;
      String string1 = locale1.toLanguageTag();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0, locale1);
      boolean boolean0 = mockGregorianCalendar1.after("6!hc>+:S;Ft/z");
      boolean boolean1 = fastDateFormat0.equals(mockGregorianCalendar1);
      String string2 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 1, locale0);
      boolean boolean2 = fastDateFormat0.getTimeZoneOverridesCalendar();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1488), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1488
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "*C`UincZ}b:N85D({oA";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("*C`UincZ}b:N85D({oA");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "Sc\\y3K5D^d[/uG8\\|";
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Scy3K5D^d[/uG8|", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      String string0 = timeZone0.getDisplayName(false, 0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      String string1 = "phzW`>hIv}ClMqC";
      Locale locale0 = Locale.JAPANESE;
      String string2 = locale0.getDisplayVariant();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("phzW`>hIv}ClMqC", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) null);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, locale0);
      int int0 = fastDateFormat0.hashCode();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-674), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -674
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("]", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(2, 314, 314);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      double double0 = 0.0;
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = '+';
      charArray0[2] = 'y';
      charArray0[3] = 'C';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 1, 314);
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "+7s\\d2e% ";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("+7sd2e% ");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("D");
      int int0 = 45;
      MockDate mockDate0 = new MockDate(12, 3, 2, 45, 12);
      String string0 = "";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "D";
      stringArray0[1] = "D";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "D";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.TAIWAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        fastDateFormat0.applyRules(mockGregorianCalendar0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 3;
      intArray0[4] = 3;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      String string0 = fastDateFormat0.format(date0);
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(259, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 259
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      String[] stringArray0 = Locale.getISOLanguages();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
      String string0 = "%K?t]Rl?>.d4-`~";
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string1 = fastDateFormat1.format((Calendar) mockGregorianCalendar0);
      try { 
        fastDateFormat1.parseObject("{YL++i");
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string0 = fastDateFormat0.format(91L);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
      fieldPosition0.setEndIndex(0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) "", (StringBuffer) null, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1), (TimeZone) null, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      int int0 = (-1);
      int int1 = 15;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      mockSimpleDateFormat0.applyLocalizedPattern("");
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.trimToSize();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-785), "", 15, 0, 1025, 15, 3, 1025, 0, 0, (-869), (-2148), (-1));
      } catch(IllegalArgumentException e) {
         //
         // Illegal daylight saving value: -1
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = fastDateFormat0.getLocale();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("EU");
      boolean boolean0 = linkedList0.add(locale_LanguageRange0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0, locale_FilteringMode0);
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode0);
      List<String> list3 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list2);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1, locale0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string0 = "g~:A&lxWB)R-^Y3";
      int int0 = 1;
      ParsePosition parsePosition0 = new ParsePosition(1);
      int[] intArray0 = new int[9];
      intArray0[0] = 478;
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 3;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("g~:A&lxWB)R-^Y3", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Q*1.Ww'\"qO", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (Locale) null);
      String string0 = "Z[";
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("Z[", (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(10, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 10
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      long long0 = 924L;
      // Undeclared exception!
      try { 
        fastDateFormat0.format(924L, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1543);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1543
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "{b=c#Df;YG(6=";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("{b=c#Df;YG(6=", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "Mb1X9D~{ckup5";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Mb1X9D~{ckup5");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.setRawOffset(0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      Calendar calendar0 = null;
      String string0 = "P#Ob>3=vE|>>[)";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat("P#Ob>3=vE|>>[)");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(8, "", 1, (-1), 0, 8, 2, 0, 1, (-1260), 8, 3, (-1260));
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day -1
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      int int0 = 0;
      int int1 = (-1024);
      int int2 = 0;
      int int3 = 2869;
      TimeZone timeZone0 = TimeZone.getDefault();
      boolean boolean0 = false;
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = locale0.stripExtensions();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, 613, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 613
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = null;
      Locale locale0 = new Locale("", "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 1, (TimeZone) null, locale0);
      int int1 = 16;
      int int2 = (-1848);
      int int3 = (-11);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-11), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -11
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "The pattern must not be null";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("The pattern must not be null");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "R4^pnO,N]U";
      Locale locale0 = Locale.ITALY;
      String string1 = locale0.getDisplayLanguage();
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("R4^pnO,N]U", locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = "JU2!W;A^pELU%";
      TimeZone timeZone0 = TimeZone.getTimeZone("JU2!W;A^pELU%");
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, timeZone0);
      Object object0 = fastDateFormat1.clone();
      boolean boolean0 = fastDateFormat1.equals(object0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string1 = fastDateFormat0.format(calendar0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0);
      int int0 = (-244);
      int int1 = 634;
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(634, 0, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 634
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 1, (TimeZone) simpleTimeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(0, 3, timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("No date time pattern for locale: ");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ZoneId zoneId0 = ZoneId.ofOffset("", zoneOffset0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.CHINESE;
      TextStyle textStyle0 = TextStyle.FULL;
      String string0 = zoneOffset0.getDisplayName(textStyle0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1253), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1253
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(" -zi_ReK0x+6Zz");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "Z:(35sUv^(;5";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Z:(35sUv^(;5", (TimeZone) null, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      Object object0 = fastDateFormat0.clone();
      Locale locale0 = Locale.ENGLISH;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      Object object1 = new Object();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
      // Undeclared exception!
      try { 
        mockSimpleDateFormat0.format(object1, stringBuffer0, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ZoneId zoneId0 = timeZone0.toZoneId();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("No date time pattern for locale: ", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-863), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -863
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("No date pattern for locale: ");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("|1");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Object object0 = timeZone0.clone();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(1485, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1485
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = (-5897);
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale locale1 = Locale.lookup(linkedList0, list1);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-5897), 4, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 4
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      boolean boolean0 = fastDateFormat0.equals(mockSimpleDateFormat0);
      int int0 = (-4618);
      ParsePosition parsePosition0 = new ParsePosition((-4618));
      Object object0 = fastDateFormat0.parseObject((String) null, parsePosition0);
      int int1 = 1;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, (-4333));
      ZonedDateTime zonedDateTime0 = mockGregorianCalendar0.toZonedDateTime();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      String string0 = fastDateFormat0.format((Calendar) gregorianCalendar0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      timeZone0.setRawOffset(2);
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null, "Us.p_+O?7l*uTsk{");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", timeZone0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1263), (-1263));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1263
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      ZoneId zoneId1 = zoneId0.normalized();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId1);
      Locale locale0 = Locale.KOREAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-748));
      StringBuffer stringBuffer1 = decimalFormat0.format(2729.201910576415, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = decimalFormat0.format((long) 0, stringBuffer1, fieldPosition0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) locale0, stringBuffer2, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.util.Locale
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1391, (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1391
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField";
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      String string1 = timeZone0.getDisplayName(true, 0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "uP";
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("uP", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 0;
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      Locale locale0 = Locale.lookup(linkedList0, list0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale1 = Locale.PRC;
      Locale.setDefault(locale_Category0, locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, (Locale) null);
      int int1 = fastDateFormat0.hashCode();
      String string0 = fastDateFormat0.toString();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale1);
      DecimalFormat decimalFormat0 = new DecimalFormat("FastDateFormat[h:mm:ss a z]");
      StringBuffer stringBuffer0 = new StringBuffer("FastDateFormat[h:mm:ss a z]");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
      // Undeclared exception!
      try { 
        decimalFormat0.format(0L, stringBuffer1, (FieldPosition) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale1);
      String string0 = fastDateFormat0.getPattern();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "h:mm:ss a z");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 0, stringBuffer0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null, stringBuffer1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, (-3719), 2, 3, 3122, 1);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      String string1 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 0, locale0);
      Locale locale1 = Locale.CHINA;
      String string2 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 0, locale1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-964), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -964
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1357, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1357
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Locale locale0 = new Locale("", "", "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(1, 1, locale0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1, "k-f9[5f/uk)6nmM-2", 3, 0, (-2983), (-1542), (-1241), (-2983), 0, (-917), 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month -1241
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1537), (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1537
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-962), (-962), (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -962
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 31;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(2539, 31);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 31
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "w(ICeVCr:iI";
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("w(ICeVCr:iI", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("w!_vi");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = 0;
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      TimeZone timeZone1 = TimeZone.getTimeZone("");
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(1, 3, timeZone1, locale0);
      ZoneId zoneId0 = timeZone0.toZoneId();
      TimeZone timeZone2 = TimeZone.getDefault();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      try { 
        stringBuffer0.replace(9, 2, "");
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = (-2598);
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2598), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2598
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(1485);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1485
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, (Locale) null);
      fastDateFormat0.init();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-741));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -741
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      String string0 = fastDateFormat0.getPattern();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Locale locale0 = new Locale("", "Ki0", "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = (-2702);
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1139, "");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-2702), (-2702), (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2702
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      String[] stringArray0 = Locale.getISOLanguages();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
      String string0 = "%K?t]Rl?>.d4-`~";
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string1 = fastDateFormat1.format((Calendar) mockGregorianCalendar0);
      int int0 = 2755;
      int int1 = 98;
      int[] intArray0 = new int[3];
      intArray0[0] = 98;
      intArray0[1] = 3;
      intArray0[2] = 2;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("%K?t]Rl?>.d4-`~", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = "[FvB%Bl";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        Date.from((Instant) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) fastDateFormat1, (StringBuffer) null, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.apache.commons.lang3.time.FastDateFormat
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      int int0 = timeZone0.getOffset(0L);
      boolean boolean0 = true;
      int int1 = 0;
      // Undeclared exception!
      try { 
        timeZone0.getOffset(0, 0, 0, 0, 0, 0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(557, 557, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 557
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      int int0 = 1525;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1525, "=26=S");
      simpleTimeZone0.setRawOffset(0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = Locale.forLanguageTag("");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, true, 1525, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 1525
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, 1);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((-4223L), stringBuffer1);
      StringBuffer stringBuffer3 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer2);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 2);
      StringBuffer stringBuffer4 = fastDateFormat1.format((long) 2, stringBuffer2);
      StringBuffer stringBuffer5 = fastDateFormat1.format((Calendar) mockGregorianCalendar0, stringBuffer3);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 833;
      intArray0[3] = 3;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 2;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
