/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 08:22:39 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.ChoiceFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.stream.IntStream;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1, locale0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringBuffer stringBuffer1 = fastDateFormat2.format(0L, stringBuffer0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateTimeInstance(2, 1, timeZone0, locale0);
      String string0 = "";
      FastDateFormat fastDateFormat4 = FastDateFormat.getInstance("");
      FastDateFormat fastDateFormat5 = FastDateFormat.getTimeInstance(3);
      FastDateFormat fastDateFormat6 = FastDateFormat.getDateInstance(2, locale0);
      MockDate mockDate0 = new MockDate(97, (-363), 97, 1333, (-1183));
      String string1 = fastDateFormat2.format((Date) mockDate0);
      fastDateFormat6.init();
      FastDateFormat fastDateFormat7 = FastDateFormat.getInstance("2/28/67", locale0);
      fastDateFormat6.init();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1, locale0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringBuffer stringBuffer1 = fastDateFormat2.format(0L, stringBuffer0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateTimeInstance(2, 1, timeZone0, locale0);
      String string0 = "xE";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("xE");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("S+", locale0);
      // Undeclared exception!
      try { 
        fastDateFormat0.formatToCharacterIterator(locale0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.util.Locale
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone1 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Object[] objectArray0 = linkedList0.toArray();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-242));
      StringBuffer stringBuffer1 = decimalFormat0.format((double) 3, stringBuffer0, fieldPosition0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale locale0 = Locale.lookup(linkedList0, list0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, timeZone1, (Locale) null);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$StringLiteral", timeZone1, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      MockDate mockDate0 = new MockDate();
      long long0 = MockDate.UTC(1082, (-1539), 0, 2827, 3, 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Friday, February 14, 2014");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1);
      Locale locale0 = Locale.FRANCE;
      Locale.setDefault(locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Friday, February 14, 2014", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeZone timeZone1 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate(0, (-561), Integer.MIN_VALUE);
      MockDate mockDate1 = new MockDate((-1206), 0, (-241), 1296, (-1930));
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null);
      StringBuffer stringBuffer1 = new StringBuffer();
      IntStream intStream0 = stringBuffer1.codePoints();
      String string0 = fastDateFormat0.format((Date) mockDate0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1206), 90);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 90
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("S#zh?c");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0);
      fastDateFormat0.init();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("S#zh?c");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("HR:&^~TZ");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("HR:&^~TZ", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      MockDate mockDate0 = new MockDate();
      long long0 = MockDate.UTC(1082, (-1539), 0, 2827, 3, 0);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      boolean boolean0 = fastDateFormat0.equals(mockDate0);
      Object object0 = new Object();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Friday, February 14, 2014");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1);
      // Undeclared exception!
      try { 
        fastDateFormat0.format(object0, stringBuffer0, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis((-4053L));
      String string0 = "H6n";
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.GERMAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      String string1 = locale1.getDisplayLanguage();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList2);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      String string2 = locale0.getDisplayVariant(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("H6n", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1562, "", (-2973), 0, 0, 1030, (-1075), 0, (-656), 2950);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      int int0 = 3012;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2, locale_FilteringMode1);
      Locale locale1 = null;
      try {
        locale1 = new Locale((String) null, "", "");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "ad[h).W%";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("ad[h).W%");
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ad[h).W%";
      stringArray0[1] = "ad[h).W%";
      stringArray0[2] = "ad[h).W%";
      stringArray0[3] = "ad[h).W%";
      dateFormatSymbols0.setAmPmStrings(stringArray0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1814));
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1814
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "lrBSARXwp";
      Locale locale0 = Locale.US;
      Locale locale1 = locale0.stripExtensions();
      String string1 = locale0.getDisplayLanguage();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("lrBSARXwp", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(60, 0, 0, 12, 0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(",y$XS,Ty@3[{NB.129");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      int[] intArray0 = new int[2];
      intArray0[0] = 122;
      intArray0[1] = 0;
      String string0 = fastDateFormat0.toString();
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken((String) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2, locale_FilteringMode0);
      Locale locale0 = Locale.lookup(linkedList0, list3);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-1), (Locale) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.PRC;
      String string0 = locale0.getDisplayVariant(locale1);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      StringWriter stringWriter0 = new StringWriter(1);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      String string1 = "";
      ParsePosition parsePosition0 = new ParsePosition(2);
      Object object0 = fastDateFormat1.parseObject("", parsePosition0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = Locale.getISOLanguages();
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      // Undeclared exception!
      try { 
        choiceFormat0.format((Object) stringWriter0, stringBuffer0, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.NumberFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(696, "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      String string0 = Locale.lookupTag(linkedList0, set0);
      Set<Character> set1 = locale0.getExtensionKeys();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>(1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      LinkedHashSet<Locale> linkedHashSet1 = new LinkedHashSet<Locale>(list0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet1, locale_FilteringMode0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 0, locale0);
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(1803, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1803
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, 1);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer2 = stringBuffer1.append(1L);
      TimeZone timeZone0 = mockGregorianCalendar0.getTimeZone();
      StringBuffer stringBuffer3 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
      StringBuffer stringBuffer4 = stringBuffer0.append((StringBuffer) null);
      Locale locale0 = Locale.CHINA;
      String string0 = locale0.getDisplayLanguage();
      Set<Character> set0 = locale0.getExtensionKeys();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      StringBuffer stringBuffer5 = stringBuffer0.append('~');
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      Locale locale1 = Locale.CHINA;
      String string1 = locale0.getDisplayScript(locale1);
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) stringBuffer1, stringBuffer1, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.StringBuffer
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("y>+4<!3>|CYB", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("@S2");
      String string0 = timeZone0.getDisplayName();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("d|$}gjYjzC Pwx", intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
      long long0 = 0L;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      StringBuffer stringBuffer1 = mockSimpleDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      // Undeclared exception!
      try { 
        choiceFormat0.format((long) 2, stringBuffer1, fieldPosition0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      String string0 = fastDateFormat0.format((Object) mockDate0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      int int0 = 0;
      int int1 = 282;
      int int2 = (-1083);
      int int3 = (-1);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("Y'G@{;6uFOpj,:D", (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int int0 = fastDateFormat0.hashCode();
      int int1 = (-563);
      int int2 = (-125);
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(4983, ":mV.", (-3256), 40, 8, (-125), 4983, (-2267), 2, (-563), 0, 2, 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -3256
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(2181, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2181
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = new Locale("g6I~1Gg7^?1Hm`k|WF?", "0Wz@", "g6I~1Gg7^?1Hm`k|WF?");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, (-1959), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1959
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      parsePosition0.setErrorIndex(0);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, false, 1, locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2925, "2Pm-sa74bng");
      Locale locale0 = new Locale(")A2o'T'@g'6|\"7Zo", "", "2Pm-sa74bng");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("2Pm-sa74bng", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      long long0 = 0L;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      double double0 = 0.0;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      String string1 = fastDateFormat0.format(date0);
      String string2 = "org.apache.commons.lang3.time.FastDateFormat$TextField";
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormatSymbols decimalFormatSymbols1 = DecimalFormatSymbols.getInstance(locale0);
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("org.apache.commons.lang3.time.FastDateFormat$TextField", decimalFormatSymbols0);
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"org.apache.commons.lang3.time.FastDateFormat$TextField\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) null);
      // Undeclared exception!
      try { 
        ZoneOffset.of("[TP(");
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, invalid format: [TP(
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, false, 0, locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = (-1600);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1600), "");
      Locale locale0 = Locale.ITALY;
      String string0 = simpleTimeZone0.getDisplayName();
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat((String) null, simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      StringBuffer stringBuffer2 = decimalFormat0.format((double) 3, stringBuffer1, fieldPosition0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null, stringBuffer2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "ghdFr!r";
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("ghdFr!r", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("?+Vn,[Z[JPzM%k]^n", (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0, (Locale) null);
      fastDateFormat0.init();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(1);
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, (Locale) null);
      // Undeclared exception!
      try { 
        fastDateFormat1.format((Object) fastDateFormat2);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.apache.commons.lang3.time.FastDateFormat
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(2, locale0);
      Locale locale1 = Locale.ITALY;
      String string0 = locale1.getDisplayName();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale1);
      String string1 = fastDateFormat1.toString();
      Calendar calendar0 = null;
      fastDateFormat0.init();
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TwelveHourField", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(2, locale0);
      String string0 = fastDateFormat1.format((long) 0);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("00:00:00", dateFormatSymbols0);
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      int int0 = 65;
      MockDate mockDate0 = new MockDate(65, 7, 0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "00:00:00";
      stringArray0[1] = "";
      stringArray0[2] = "00:00:00";
      stringArray0[3] = "00:00:00";
      stringArray0[4] = "00:00:00";
      stringArray0[5] = "00:00:00";
      stringArray0[6] = "00:00:00";
      stringArray0[7] = "00:00:00";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat((double[]) null, stringArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "qL-";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("qL-");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      String string0 = locale0.getDisplayCountry();
      String string1 = locale0.getDisplayCountry();
      String string2 = fastDateFormat0.format(0L);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, locale0);
      // Undeclared exception!
      try { 
        fastDateFormat1.parseObject("", (ParsePosition) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Object object0 = new Object();
      StringBuffer stringBuffer0 = null;
      FieldPosition fieldPosition0 = new FieldPosition(3100);
      fieldPosition0.setBeginIndex(2);
      Locale locale0 = Locale.FRANCE;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      int int0 = mockGregorianCalendar0.getMaximum(0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 871;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(871);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 871
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "I0++ Wy);&^h";
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      String string1 = timeZone0.getDisplayName(locale0);
      TimeZone timeZone1 = TimeZone.getDefault();
      timeZone0.setRawOffset(2096);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("I0++ Wy);&^h", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("^U:0D^B");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("y;rt'/Evgl&[Mpk");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("I&");
      Object object0 = timeZone0.clone();
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat0 = new FastDateFormat("org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(116, 1095, 2459, (-152), 363, 363);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) mockDate0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 3107;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3107, "zH|!R");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(":]8^T9Z+X", (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(982);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 982
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "The validated object is null";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("The validated object is null");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "Kve";
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Kve", locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3057, "(7A@*.X)n~1ju\"");
      Locale locale0 = new Locale("(7A@*.X)n~1ju\"");
      String string0 = simpleTimeZone0.getDisplayName(locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      boolean boolean0 = simpleTimeZone0.observesDaylightTime();
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = 0;
      intArray0[7] = 3057;
      String string1 = fastDateFormat0.parseToken("D]Uz$H", intArray0);
      Locale locale1 = fastDateFormat0.getLocale();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-70), (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -70
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = new FastDateFormat("org.apache.commons.lang3.time.FastDateFormat$TwelveHourField", timeZone0, (Locale) null);
      TimeZone timeZone1 = fastDateFormat0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      String string0 = fastDateFormat0.getPattern();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      try { 
        fastDateFormat0.parseObject("wvy=l]psL=}t,aR`6EX", (ParsePosition) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      int int0 = fastDateFormat0.hashCode();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 3;
      intArray0[7] = 3;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale locale0 = new Locale("`{wN", "`{wN", "org.apache.commons.lang3.time.FastDateFormat");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("`{wN", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string0 = fastDateFormat0.getPattern();
      String string1 = fastDateFormat0.toString();
      fastDateFormat0.init();
      String string2 = fastDateFormat0.toString();
      StringBuffer stringBuffer0 = fastDateFormat0.format(0L, (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Locale locale0 = new Locale("");
      Locale locale1 = Locale.KOREAN;
      String string0 = locale1.getDisplayName(locale0);
      String string1 = locale0.getDisplayScript(locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      MockDate mockDate0 = new MockDate();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "Korean", (-1562), 0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = "f DQ\"";
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("f DQ\"", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "E{9Zt5)_>U{kGCb+d";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("E{9Zt5)_>U{kGCb+d");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 1443;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1443, "Z_L(H~B");
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Z_L(H~B", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1, locale0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringBuffer stringBuffer1 = fastDateFormat2.format(0L, stringBuffer0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateTimeInstance(2, 1, timeZone0, locale0);
      String string0 = "";
      FastDateFormat fastDateFormat4 = FastDateFormat.getInstance("");
      FastDateFormat fastDateFormat5 = FastDateFormat.getTimeInstance(3);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(122, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 122
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateFormat fastDateFormat0 = new FastDateFormat("W@}?c07Uy;T~ew*G", timeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 2);
      // Undeclared exception!
      try { 
        fastDateFormat0.format(1L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Tm3");
      String string0 = timeZone0.getDisplayName();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale.setDefault(locale0);
      Locale locale1 = Locale.US;
      String string1 = locale0.getDisplayCountry(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1448, 1448, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1448
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 1032;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      ParsePosition parsePosition0 = new ParsePosition(1032);
      parsePosition0.setIndex(1032);
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      boolean boolean0 = timeZone0.inDaylightTime(date0);
      TimeZone timeZone1 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1032, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1032
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = (-973);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-973), "");
      String string0 = simpleTimeZone0.getDisplayName();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string1 = locale0.getDisplayLanguage();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-973), (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -973
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = null;
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (Locale) null);
      int int0 = fastDateFormat0.hashCode();
      int int1 = fastDateFormat0.getMaxLengthEstimate();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Set<String> set1 = ZoneId.getAvailableZoneIds();
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, timeZone0, (Locale) null);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(2);
      parsePosition0.setIndex((-3202));
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(90, 10, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 10
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = (-1);
      String string0 = "h|X)=~5*zM+})gp4m:K";
      Locale locale0 = Locale.forLanguageTag("h|X)=~5*zM+})gp4m:K");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>(linkedHashSet0);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>(set0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet1);
      String string0 = locale0.getDisplayCountry(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 3;
      intArray0[2] = 2;
      ParsePosition parsePosition0 = new ParsePosition(0);
      parsePosition0.setIndex(1793);
      Object object0 = fastDateFormat0.parseObject("org.apache.commons.lang3.time.FastDateFormat$TwentyFourHourField", parsePosition0);
      intArray0[3] = 2;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Locale locale1 = Locale.CHINESE;
      String string0 = locale0.getDisplayVariant(locale1);
      boolean boolean0 = fastDateFormat0.equals((Object) null);
      MockDate mockDate0 = new MockDate(39, 2884, (-325));
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      StringBuffer stringBuffer0 = new StringBuffer("rz96w_t<kbMF;(F");
      FieldPosition fieldPosition0 = new FieldPosition(2);
      StringBuffer stringBuffer1 = decimalFormat0.format((-2262L), stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(2, timeZone0, locale0);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      boolean boolean1 = mockGregorianCalendar0.after(timeZone0);
      String string1 = fastDateFormat1.format((Calendar) mockGregorianCalendar0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(16, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 16
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = "";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale locale0 = Locale.lookup(linkedList0, linkedHashSet0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
      int int0 = 162;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      // Undeclared exception!
      try { 
        ZoneId.from(localDate0);
      } catch(DateTimeException e) {
         //
         // Unable to obtain ZoneId from TemporalAccessor: 1970-01-01 of type java.time.LocalDate
         //
         verifyException("java.time.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.format(245L, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      fastDateFormat0.init();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
      String string1 = fastDateFormat0.format((-1724L));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ",");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(",", (TimeZone) simpleTimeZone0);
      MockDate mockDate0 = new MockDate();
      String string0 = "z0+p>~4h+M";
      DecimalFormat decimalFormat0 = new DecimalFormat("z0+p>~4h+M");
      StringBuffer stringBuffer0 = new StringBuffer();
      Instant instant0 = MockInstant.ofEpochSecond((-541L));
      Date date0 = Date.from(instant0);
      FieldPosition fieldPosition0 = new FieldPosition(0);
      stringBuffer0.trimToSize();
      StringBuffer stringBuffer1 = decimalFormat0.format((long) 1, stringBuffer0, fieldPosition0);
      // Undeclared exception!
      try { 
        stringBuffer1.setCharAt((-1), 'c');
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-2695), (-2695));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2695
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = (-740);
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1646), (-740), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -740
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      String string0 = locale0.getDisplayLanguage();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-412), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -412
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      Locale.setDefault(locale0);
      Object object0 = locale0.clone();
      FastDateFormat fastDateFormat0 = new FastDateFormat(")23sQ4`#$", timeZone0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, 3, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 3
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string0 = fastDateFormat0.format(0L);
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(1, locale0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(2654, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2654
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1, locale0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringBuffer stringBuffer1 = fastDateFormat2.format(0L, stringBuffer0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateTimeInstance(2, 1, timeZone0, locale0);
      String string0 = "";
      FastDateFormat fastDateFormat4 = FastDateFormat.getInstance("");
      FastDateFormat fastDateFormat5 = FastDateFormat.getTimeInstance(3);
      FastDateFormat fastDateFormat6 = FastDateFormat.getDateInstance(1, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(122, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 122
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      String[] stringArray0 = Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      int int0 = 336;
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(336, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 336
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      int int0 = (-87);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-87), 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -87
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = (-2153);
      intArray0[3] = (-2153);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("S#zh?c");
      String string0 = timeZone0.getDisplayName();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0);
      fastDateFormat0.init();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("S#zh?c");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = locale0.stripExtensions();
      String string0 = locale1.getDisplayCountry();
      String string1 = locale0.getDisplayName(locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      StringBuffer stringBuffer0 = new StringBuffer("]+)dESaF=");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-3949));
      StringBuffer stringBuffer1 = numberFormat0.format((long) 0, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((long) 0, stringBuffer1);
      StringBuffer stringBuffer3 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer2);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.setRawOffset(141);
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-694), timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -694
         //
         verifyException("java.text.DateFormat", e);
      }
  }
}
