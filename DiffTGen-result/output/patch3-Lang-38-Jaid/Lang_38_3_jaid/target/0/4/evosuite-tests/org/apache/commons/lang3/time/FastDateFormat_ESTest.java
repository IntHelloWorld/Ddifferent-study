/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 08:13:15 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.ChoiceFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = Locale.JAPANESE;
      Locale locale2 = locale0.stripExtensions();
      Locale locale3 = locale0.stripExtensions();
      String string0 = locale1.getScript();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null);
      String string1 = locale1.getDisplayScript(locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) null);
      fastDateFormat1.init();
      Locale locale4 = fastDateFormat1.getLocale();
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, (TimeZone) null);
      Locale locale5 = Locale.GERMANY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale5);
      int int0 = fastDateFormat1.hashCode();
      String string2 = fastDateFormat2.format((Calendar) mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(3, 12, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 12
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale locale1 = Locale.lookup(linkedList0, list0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("=);h=8llrJ?nA?", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: ll
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = Locale.JAPANESE;
      Locale locale2 = locale0.stripExtensions();
      Locale locale3 = locale0.stripExtensions();
      String string0 = locale1.getScript();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null);
      String string1 = locale1.getDisplayScript(locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) null);
      fastDateFormat1.init();
      Locale locale4 = fastDateFormat1.getLocale();
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, (TimeZone) null);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(3, 12, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 12
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      MockGregorianCalendar mockGregorianCalendar0 = null;
      try {
        mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, (Locale) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(":u6+F");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1225;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(619, "gbu@hvPIJ");
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("gbu@hvPIJ");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(234, 0, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 234
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "z=C=yU?8H_Flm";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("z=C=yU?8H_Flm");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "]1_p";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("]1_p");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField";
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField", "org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField", "");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(">x<N$*[qGE", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 3;
      intArray0[4] = 0;
      intArray0[5] = 3;
      String string0 = fastDateFormat0.parseToken("No date time pattern for locale: ", intArray0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4253), "");
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      MockDate mockDate0 = new MockDate(0);
      String string1 = fastDateFormat0.format((Date) mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-865), (-7174), 0);
      Locale locale0 = Locale.ITALIAN;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("N", dateFormatSymbols0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'N'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("", "", "BXX>*HWj47:g/D-:$");
      String string0 = timeZone0.getDisplayName();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, timeZone0, locale0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3);
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      String string1 = fastDateFormat0.getPattern();
      fastDateFormat0.init();
      Locale locale1 = Locale.KOREAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, locale1);
      String string2 = fastDateFormat0.getPattern();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      mockGregorianCalendar0.setFirstDayOfWeek(3);
      boolean boolean0 = fastDateFormat0.equals(mockGregorianCalendar0);
      String string3 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(0, 1, timeZone0);
      int int0 = 0;
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat0.parseObject("8:21:21 PM GMT", parsePosition0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale1);
      try { 
        mockSimpleDateFormat0.parse("");
      } catch(ParseException e) {
         //
         // Unparseable date: \"\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      int int0 = 4;
      String string1 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "");
      Locale locale0 = Locale.TAIWAN;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
      MockDate mockDate0 = new MockDate((-4444L));
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) mockDate0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "!k&%5+VIA's5)p";
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("!k&%5+VIA's5)p", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, locale0);
      String string0 = "";
      String string1 = "iyy_<G~i-atq'Jy";
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1, "iyy_<G~i-atq'Jy", (-80), (-3778), 515, 0, 515, 5, 716, 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -80
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = null;
      String string0 = "";
      Locale locale0 = new Locale("", "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null, locale0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat((double[]) null, stringArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("@~w_b1dtv7TnVt~4S");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3);
      String string0 = "";
      Locale locale0 = new Locale("", "");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("{:<:=D^@HAL;i>P", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Illegal pattern component: ");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "`GTeJ\\58{Y!-9";
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("`GTeJ\u00058{Y!-9", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      Calendar calendar0 = MockCalendar.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      StringBuffer stringBuffer0 = new StringBuffer("");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      StringBuffer stringBuffer1 = decimalFormat0.format((long) 3, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = decimalFormat0.format((double) 0, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer3 = fastDateFormat0.applyRules(calendar0, stringBuffer2);
      StringBuffer stringBuffer4 = fastDateFormat0.format(0L, stringBuffer2);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      ZoneOffset zoneOffset1 = ZoneOffset.from(zoneOffset0);
      int int0 = zoneOffset0.compareTo(zoneOffset1);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = mockSimpleDateFormat0.parse(",fU\"0UOclU\f", parsePosition0);
      String string0 = fastDateFormat0.format(date0);
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("No date time pattern for locale: ", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "";
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.UK;
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale1);
      String string1 = "[";
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("[");
      int int0 = (-419);
      int int1 = (-615);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-419), (-419), 1, 1, (-615));
      String string2 = fastDateFormat1.format((Calendar) mockGregorianCalendar0);
      int int2 = (-3371);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-3371), timeZone0, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -3371
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-301), "");
      int int0 = 0;
      Locale locale0 = Locale.GERMAN;
      String string1 = simpleTimeZone0.getDisplayName(false, 0, locale0);
      Locale locale1 = Locale.CHINESE;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale1);
      int int1 = 0;
      String string2 = locale0.getDisplayCountry(locale1);
      int int2 = 0;
      simpleTimeZone0.setEndRule(0, 1, 0, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      // Undeclared exception!
      try { 
        fastDateFormat0.format(date0, stringBuffer0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "<NTWfLz";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("<NTWfLz", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Iterator<Locale.LanguageRange> iterator0 = linkedList0.iterator();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      String[] stringArray0 = Locale.getISOLanguages();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
      String string0 = fastDateFormat0.format((Calendar) null);
      String string1 = locale0.getDisplayCountry();
      String string2 = fastDateFormat0.format((Calendar) null);
      String string3 = fastDateFormat0.toString();
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, locale0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Unknown class: ");
      String string0 = "P<13sy*(!X\\lK.";
      timeZone0.setID("P<13sy*(!XlK.");
      Locale locale0 = Locale.TAIWAN;
      String string1 = timeZone0.getDisplayName(locale0);
      Object object0 = timeZone0.clone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('*');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-215));
      StringBuffer stringBuffer1 = numberFormat0.format((double) 3, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((-1502L), stringBuffer1);
      fastDateFormat0.init();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("P<13sy*(!XlK.");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate(0, 1, 0, 0, 848);
      String string0 = fastDateFormat0.format((Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(899, (TimeZone) null, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 899
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Unknown class: ");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("Unknown class: ");
      StringBuffer stringBuffer1 = stringBuffer0.append('d');
      Object object0 = fastDateFormat0.clone();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null, stringBuffer0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      boolean boolean0 = timeZone0.observesDaylightTime();
      int int0 = (-2178);
      Locale locale0 = Locale.PRC;
      String string1 = locale0.getDisplayName();
      boolean boolean1 = locale0.hasExtensions();
      String string2 = locale0.getDisplayLanguage();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-2178), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -2178
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.CANADA;
      String string0 = locale0.getDisplayScript(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("*8nF@(`}P{[=;aC7&nS", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) simpleTimeZone0);
      Locale locale0 = Locale.US;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      Locale locale1 = fastDateFormat0.getLocale();
      String string0 = fastDateFormat1.getPattern();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        fastDateFormat1.parseToken((String) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.setRawOffset((-230));
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-230), (-230), timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -230
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = TimeZone.getDefault();
      Object object0 = timeZone0.clone();
      Locale locale0 = Locale.CHINA;
      Locale.setDefault(locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      MockDate mockDate0 = new MockDate(122, 900, 900);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      FieldPosition fieldPosition0 = new FieldPosition(0);
      // Undeclared exception!
      try { 
        decimalFormat0.format(object0, stringBuffer0, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = null;
      int int0 = 0;
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, false, 0, locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = 0;
      intArray0[2] = (-503);
      intArray0[3] = 0;
      intArray0[4] = 3;
      intArray0[7] = 3;
      intArray0[6] = 0;
      intArray0[7] = 0;
      String string0 = fastDateFormat0.parseToken("dNOA{t\"B&1", intArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "[MxLEZT13&{w");
      Locale locale0 = Locale.ITALY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
      MockDate mockDate0 = new MockDate((-1691), 3, 3, 3, 795);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      int int0 = (-1);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      simpleTimeZone0.setRawOffset(0);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1));
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(403, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 403
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.forLanguageTag("GA^@>kBufj7XLW&");
      Locale locale2 = Locale.forLanguageTag("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", timeZone0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance("", timeZone0);
      FastDateFormat fastDateFormat4 = FastDateFormat.getDateTimeInstance(2, 0);
      String string0 = locale0.getDisplayVariant(locale1);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken((String) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, timeZone0);
      String string0 = fastDateFormat0.getPattern();
      boolean boolean0 = true;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("h:mm:ss a z", intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "?qMP!n^6=wSN.p`";
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("?qMP!n^6=wSN.p`", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("/!8c[");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 39;
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(39, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 39
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("F2{X$IeKu(%I<");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1), 31, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 31
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-107), "");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = new Locale("", " |fA(e^3&$rc\"(", "HEJS*&<g(8d;v$0");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 65;
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(65, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 65
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-283), 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -283
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      long long0 = 1915L;
      String string0 = "`YI_;FBh/";
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("`YI_;FBh/");
      } catch(IllegalArgumentException e) {
         //
         // Unquoted special character ';' in pattern \"`YI_;FBh/\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-3134));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -3134
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      String string0 = "w\\>d*ETk93N8d*w~";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("w>d*ETk93N8d*w~");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 573;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(573, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 573
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = (-1617);
      Locale locale0 = Locale.TAIWAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale1 = Locale.US;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1617), (-1617), timeZone0, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1617
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1860), (-1860), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1860
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 14;
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(14, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 14
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 151;
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(151, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 151
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
      String string0 = "";
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(3, "", 446, 0, 3, 2226, 1608, 799, (-1866), (-2264));
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month 1608
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 2316;
      Locale locale0 = Locale.ITALY;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Object object0 = linkedList0.clone();
      boolean boolean0 = linkedList1.add("");
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, 2316, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2316
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 192;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(192);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 192
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.JAPAN;
      Set<Character> set0 = locale0.getExtensionKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      String string0 = "";
      int int1 = (-1399);
      int int2 = (-539);
      int int3 = 2;
      // Undeclared exception!
      try { 
        fastDateFormat0.formatToCharacterIterator("");
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 13;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(13);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 13
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField", (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      String string0 = locale0.toLanguageTag();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-3480), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -3480
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField", (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("]jcBbqN", (TimeZone) null, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.KOREAN;
      String string0 = locale0.toLanguageTag();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateFormat0.parseObject("U@Dx-NK>gTQ7|Xb", parsePosition0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      String string1 = fastDateFormat0.toString();
      int int1 = Integer.MIN_VALUE;
      int int2 = 0;
      int int3 = 478;
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 478;
      intArray0[2] = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("ko", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
      try { 
        fastDateFormat0.parseObject("i%;02");
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int int0 = fastDateFormat0.hashCode();
      int int1 = fastDateFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = 0;
      intArray0[2] = (-503);
      intArray0[3] = 0;
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = 0;
      intArray0[7] = 0;
      String string0 = fastDateFormat0.parseToken("dNOA{t\"B&1", intArray0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1997), (-1997), (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1997
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = (-6053);
      Locale locale0 = Locale.GERMANY;
      Set<Character> set0 = locale0.getExtensionKeys();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-6053), 1830, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1830
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Locale locale0 = new Locale("*h#(", "*h#(");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, timeZone0, locale0);
      MockSimpleDateFormat mockSimpleDateFormat1 = new MockSimpleDateFormat();
      boolean boolean0 = fastDateFormat0.equals(mockSimpleDateFormat1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 1142;
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1142, (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1142
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      String string0 = fastDateFormat0.format((long) 0);
      boolean boolean0 = fastDateFormat0.equals(locale0);
      MockDate mockDate0 = new MockDate("Thursday, 1 January 1970");
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      NumberFormat numberFormat1 = NumberFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 3206);
      StringBuffer stringBuffer1 = numberFormat1.format((double) 1, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = stringBuffer0.append(">\"{ 11\"[]^=Ki");
      StringBuffer stringBuffer3 = stringBuffer1.append("A;b");
      Locale.setDefault(locale0);
      StringBuffer stringBuffer4 = numberFormat0.format(1L, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer5 = fastDateFormat0.format((Date) mockDate0, stringBuffer4);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, (TimeZone) null);
      String string1 = fastDateFormat0.getPattern();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      String string0 = fastDateFormat0.format((long) 0);
      boolean boolean0 = fastDateFormat0.equals(locale0);
      MockDate mockDate0 = new MockDate("Thursday, 1 January 1970");
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      long long0 = 1L;
      NumberFormat numberFormat1 = NumberFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-362), (CharSequence) "Thursday, 1 January 1970", 90, 100);
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -362
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(180, "", 0, 0, 1761, 11, 11, 0, (-1), 0);
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.US;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(11, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 11
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = (-1823);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1823));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      long long0 = 0L;
      // Undeclared exception!
      try { 
        fastDateFormat0.format(1L, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField", e);
      }
  }
}
