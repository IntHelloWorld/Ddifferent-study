/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:50:16 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.I.createComplex(0.0, 6.283185307179586);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex4.ONE.asin();
      List<Complex> list0 = complex3.NaN.nthRoot(157);
      Complex complex7 = complex0.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex8 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = Complex.NaN;
      Object object0 = complex2.INF.readResolve();
      Complex complex3 = complex1.ONE.atan();
      Complex complex4 = complex2.ONE.add(complex0);
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex2.divide(complex5);
      Complex complex7 = complex1.NaN.sin();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex3.INF.pow(complex6);
      String string0 = complex0.toString();
      Complex complex10 = complex1.log();
      Complex complex11 = complex0.atan();
      Object object1 = new Object();
      boolean boolean0 = complex3.equals(object1);
      Complex complex12 = complex6.ZERO.divide(complex0);
      Complex complex13 = complex8.atan();
      Complex complex14 = complex0.NaN.add(complex7);
      Object object2 = complex2.readResolve();
      Complex complex15 = complex8.divide(complex5);
      Complex complex16 = complex8.negate();
      String string1 = complex15.toString();
      Complex complex17 = complex9.log();
      Complex complex18 = complex4.cos();
      Complex complex19 = Complex.ZERO;
      boolean boolean1 = complex9.equals(complex19);
      Complex complex20 = complex14.negate();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.NaN.acos();
      Object object0 = complex1.ZERO.readResolve();
      String string0 = complex2.INF.toString();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      double double1 = 6.283185307179586;
      try { 
        complex1.ONE.nthRoot((-748));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -748
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex0.ZERO.tanh();
      Complex complex4 = complex0.createComplex((-265.89790473067), (-104.314344));
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex0.I.createComplex((-265.89790473067), 1024.788324);
      Complex complex8 = complex7.ONE.multiply(0.0);
      Complex complex9 = complex4.sqrt1z();
      Complex complex10 = complex0.subtract(complex6);
      Object object0 = complex6.readResolve();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex5.divide(complex11);
      Complex complex13 = complex11.INF.sqrt1z();
      Complex complex14 = complex13.ONE.log();
      Complex complex15 = complex10.pow(complex3);
      Complex complex16 = complex11.tan();
      Complex complex17 = complex9.sqrt1z();
      Complex complex18 = complex17.tanh();
      Complex complex19 = complex15.subtract(complex4);
      Complex complex20 = new Complex((-265.89790473067), Double.NaN);
      Complex complex21 = complex19.add(complex20);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.negate();
      Complex complex4 = new Complex((-1079.7285662056), 3710.05843);
      Complex complex5 = complex3.I.pow(complex4);
      double double0 = complex0.abs();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.ONE.sqrt1z();
      Complex complex9 = complex1.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex2.ZERO.cosh();
      Complex complex5 = complex2.I.sin();
      List<Complex> list0 = complex5.nthRoot(69);
      Complex complex6 = complex0.ONE.sinh();
      int int0 = complex1.NaN.hashCode();
      Complex complex7 = complex6.NaN.sin();
      Complex complex8 = complex0.add(complex1);
      Complex complex9 = complex7.INF.negate();
      Complex complex10 = complex1.NaN.asin();
      Complex complex11 = complex1.I.log();
      Complex complex12 = complex7.INF.tan();
      Complex complex13 = complex8.createComplex((-758.965054), 0.14982303977012634);
      Complex complex14 = complex11.INF.add(complex6);
      Complex complex15 = complex11.NaN.atan();
      int int1 = complex15.ONE.hashCode();
      Complex complex16 = complex7.multiply((-1133.0976360565217));
      Complex complex17 = complex11.subtract(complex6);
      Complex complex18 = complex9.atan();
      Complex complex19 = complex13.atan();
      Complex complex20 = complex19.ZERO.conjugate();
      Complex complex21 = complex7.acos();
      Complex complex22 = complex19.cosh();
      double double0 = complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-2429.17004740847), 1446.0);
      int int0 = complex0.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.INF.acos();
      ComplexField complexField1 = complex4.I.getField();
      Complex complex5 = complex4.INF.pow(complex2);
      List<Complex> list0 = complex4.INF.nthRoot(1170);
      boolean boolean0 = complex3.isNaN();
      Complex complex6 = complex0.ZERO.negate();
      Complex complex7 = complex4.ONE.multiply(896.6587);
      Complex complex8 = complex3.divide(complex0);
      String string0 = complex8.toString();
      int int1 = complex2.hashCode();
      Complex complex9 = complex8.ONE.cos();
      boolean boolean1 = complex4.isNaN();
      Complex complex10 = complex8.log();
      int int2 = complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = complex0.getArgument();
      String string0 = complex0.ONE.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex2.tan();
      Object object0 = complex1.readResolve();
      Complex complex5 = complex3.ZERO.cos();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = complex1.add(complex2);
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex5.ONE.add(complex8);
      boolean boolean0 = complex8.equals("8x4Tb.Tm7'g)1:cCLH");
      boolean boolean1 = complex2.isInfinite();
      double double1 = 9.219544613762692E-9;
      double double2 = 552.68360021107;
      try { 
        complex8.INF.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      // Undeclared exception!
      try { 
        complex0.ONE.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply((-1853.9554221024357));
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(4.0, 2035.0901740356258);
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.conjugate();
      String string1 = complex0.toString();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(1.0, 1390.3898);
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.tanh();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex1.divide(complex5);
      Complex complex7 = complex6.ONE.divide(complex2);
      double double0 = complex5.abs();
      ComplexField complexField0 = complex6.getField();
      Complex complex8 = complex1.subtract(complex6);
      Complex complex9 = complex1.cos();
      String string0 = complex0.ZERO.toString();
      Complex complex10 = complex1.createComplex((-278.2), Double.POSITIVE_INFINITY);
      Complex complex11 = complex9.createComplex((-278.2), 1390.3898);
      Complex complex12 = complex11.acos();
      String string1 = complex12.toString();
      Complex complex13 = complex0.sqrt();
      Complex complex14 = complex10.tanh();
      double double1 = complex5.getImaginary();
      Complex complex15 = complex9.asin();
      double double2 = complex13.abs();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.exp();
      double double0 = complex0.getReal();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isNaN();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.I.multiply(complex2);
      boolean boolean2 = complex0.equals(complex2);
      ComplexField complexField0 = complex0.getField();
      boolean boolean3 = complex0.isNaN();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex2.multiply((-1827.5392934509));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.asin();
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.ONE.createComplex((-5277.947013049905), (-5277.947013049905));
      Complex complex3 = complex2.ONE.tan();
      int int1 = complex0.ZERO.hashCode();
      Complex complex4 = complex2.ONE.divide(complex0);
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = complex0.NaN.cosh();
      Complex complex8 = new Complex((-5277.947013049905), (-5277.947013049905));
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex9.NaN.negate();
      Complex complex11 = complex4.INF.add(complex8);
      Complex complex12 = complex0.log();
      Complex complex13 = complex8.cosh();
      Complex complex14 = complex6.ZERO.sqrt1z();
      Complex complex15 = complex13.ONE.sqrt1z();
      Complex complex16 = complex15.I.acos();
      Complex complex17 = complex1.sin();
      Complex complex18 = complex8.sinh();
      int int2 = complex18.ONE.hashCode();
      Complex complex19 = complex8.ONE.exp();
      Complex complex20 = complex13.tan();
      Complex complex21 = complex20.INF.sinh();
      int int3 = complex11.hashCode();
      Complex complex22 = complex20.ONE.divide(complex1);
      Complex complex23 = complex22.NaN.exp();
      Object object0 = complex5.readResolve();
      Complex complex24 = complex21.INF.sqrt();
      ComplexField complexField0 = complex6.getField();
      Complex complex25 = complex21.acos();
      Complex complex26 = complex13.add(complex12);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-1667.853484338), 2757.612204387493);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex0.INF.subtract(complex2);
      Complex complex4 = complex2.I.tan();
      String string0 = complex2.ZERO.toString();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.createComplex((-1667.853484338), 2757.612204387493);
      boolean boolean0 = complex1.isInfinite();
      String string1 = complex0.toString();
      Complex complex7 = complex0.acos();
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.createComplex(0.0, (-1288.041864188992));
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.cosh();
      double double0 = complex4.getImaginary();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex1.subtract(complex3);
      Object object0 = new Object();
      boolean boolean0 = complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.NaN.multiply(Double.NaN);
      Complex complex4 = complex3.I.sinh();
      String string0 = complex3.INF.toString();
      Complex complex5 = complex3.I.negate();
      Complex complex6 = complex0.I.sqrt();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.ZERO.divide(complex7);
      Complex complex10 = complex8.NaN.sqrt();
      Complex complex11 = complex8.atan();
      Complex complex12 = complex11.NaN.multiply(0.0);
      Complex complex13 = complex8.I.divide(complex2);
      Complex complex14 = complex8.NaN.pow(complex11);
      Complex complex15 = complex9.sqrt();
      Complex complex16 = complex8.sinh();
      Complex complex17 = complex6.add(complex7);
      Complex complex18 = complex16.log();
      double double0 = complex10.getImaginary();
      Complex complex19 = complex15.createComplex(0.11764700710773468, 1725.255213576);
      Complex complex20 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.negate();
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex0.negate();
      String string0 = complex0.ZERO.toString();
      int int1 = complex0.hashCode();
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex3.I.createComplex(0.0, 0.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.subtract(complex1);
      Object object0 = complex2.readResolve();
      Complex complex7 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.acos();
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex2.NaN.acos();
      Complex complex5 = complex2.createComplex((-854.0), 2267.4979);
      Complex complex6 = complex5.ONE.add(complex4);
      Complex complex7 = complex0.multiply(complex2);
      Complex complex8 = complex2.I.tanh();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex3.add(complex9);
      Complex complex11 = complex7.conjugate();
      Complex complex12 = complex10.I.multiply(complex5);
      Complex complex13 = complex11.asin();
      Complex complex14 = complex13.ZERO.tan();
      Complex complex15 = complex2.sqrt();
      Complex complex16 = complex10.cosh();
      Complex complex17 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.I.cos();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex2.ONE.tan();
      Complex complex6 = complex4.ONE.acos();
      Complex complex7 = complex5.INF.sinh();
      Complex complex8 = complex2.ZERO.createComplex(Double.POSITIVE_INFINITY, 1224.07);
      double double1 = complex4.abs();
      List<Complex> list0 = complex1.nthRoot(1357);
      Object object0 = complex3.readResolve();
      Complex complex9 = complex4.cosh();
      double double2 = complex9.ZERO.abs();
      Complex complex10 = complex6.cos();
      Complex complex11 = complex2.createComplex((-1384.3), Double.POSITIVE_INFINITY);
      Complex complex12 = complex5.cos();
      Complex complex13 = complex6.createComplex(Double.NaN, Double.NaN);
      Complex complex14 = complex4.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex0.ONE.cos();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex0.multiply((-3347.5922951628454));
      int int0 = complex9.NaN.hashCode();
      Complex complex10 = complex9.INF.pow(complex0);
      String string0 = complex9.ONE.toString();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex11 = complex1.createComplex(0.0, 0.0);
      double double0 = complex11.NaN.getArgument();
      Complex complex12 = complex2.tanh();
      Complex complex13 = complex4.asin();
      Complex complex14 = complex13.multiply(Double.NaN);
      double double1 = complex4.getReal();
      boolean boolean0 = complex8.equals(complex13);
      Complex complex15 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-3018.41221094958), 1648.092495642);
      Complex complex1 = complex0.I.multiply(1475.62);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex0.I.subtract(complex2);
      Complex complex5 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.INF.acos();
      Complex complex4 = complex1.ONE.atan();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex5 = complex0.tanh();
      List<Complex> list0 = complex5.nthRoot(17);
      Complex complex6 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.add(complex0);
      double double0 = complex2.ONE.abs();
      Complex complex3 = complex0.cos();
      double double1 = complex3.ONE.abs();
      Complex complex4 = complex2.cos();
      String string0 = complex3.toString();
      Complex complex5 = complex4.ZERO.cos();
      Object object1 = complex1.ZERO.readResolve();
      ComplexField complexField1 = complex3.getField();
      List<Complex> list0 = complex2.nthRoot(17);
      Complex complex6 = complex0.sin();
      boolean boolean0 = complex2.isNaN();
      double double2 = complex6.getImaginary();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex4.cos();
      Object object2 = complex6.readResolve();
      Complex complex9 = complex8.acos();
      Complex complex10 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-176.70441153), (-176.70441153));
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex4.subtract(complex3);
      Complex complex6 = complex0.divide(complex2);
      boolean boolean0 = complex4.isNaN();
      Complex complex7 = complex5.createComplex(375.78, 0.0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      List<Complex> list0 = complex0.INF.nthRoot(290);
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.sqrt1z();
      double double0 = complex2.getArgument();
      Complex complex3 = complex2.NaN.asin();
      int int1 = complex3.hashCode();
      boolean boolean0 = complex2.isNaN();
      Complex complex4 = complex3.ZERO.sinh();
      boolean boolean1 = complex2.equals(complex1);
      boolean boolean2 = complex0.isNaN();
      boolean boolean3 = complex2.isInfinite();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex2.multiply(complex3);
      Complex complex8 = complex5.NaN.sqrt1z();
      Complex complex9 = complex8.NaN.subtract(complex1);
      Complex complex10 = complex7.I.conjugate();
      Complex complex11 = complex3.ONE.acos();
      int int2 = complex5.hashCode();
      Complex complex12 = complex7.sinh();
      Complex complex13 = complex7.asin();
      String string0 = complex7.toString();
      Complex complex14 = complex7.INF.atan();
      Complex complex15 = complex12.multiply(1.0);
      Complex complex16 = complex2.pow(complex15);
      Complex complex17 = complex3.tanh();
      double double1 = complex4.abs();
      Complex complex18 = complex12.multiply(0.0);
      Complex complex19 = complex3.sin();
      Complex complex20 = complex10.tan();
      Complex complex21 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(4968.715438744518, 0.0);
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.ONE.createComplex(4968.715438744518, 4968.715438744518);
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex0.ZERO.atan();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.ZERO.tan();
      Complex complex9 = complex1.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = new Complex((-1228.8350214), (-1228.8350214));
      Complex complex3 = complex0.ZERO.add(complex2);
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex5.sin();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex1.atan();
      Complex complex10 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.createComplex((-1248.9451932), (-1248.9451932));
      double double0 = complex1.getImaginary();
      Complex complex2 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.cosh();
      Object object0 = complex2.readResolve();
      boolean boolean1 = complex0.equals(object0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.conjugate();
      boolean boolean2 = complex0.equals(complex4);
      Complex complex6 = complex3.negate();
      Complex complex7 = complex3.conjugate();
      boolean boolean3 = complex2.isNaN();
      Complex complex8 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.ONE.asin();
      boolean boolean0 = complex0.isNaN();
      int int0 = complex2.I.hashCode();
      boolean boolean1 = complex0.isNaN();
      double double1 = complex1.getImaginary();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-1.0), 1.625);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.add(complex1);
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex4.ONE.tanh();
      Complex complex6 = complex4.NaN.sqrt1z();
      Complex complex7 = complex3.I.asin();
      Complex complex8 = complex3.negate();
      Complex complex9 = new Complex((-1405.4632571225704), 0.0);
      double double0 = complex8.INF.getArgument();
      Complex complex10 = complex4.ZERO.sqrt1z();
      double double1 = complex9.ONE.abs();
      boolean boolean0 = complex0.equals(complex9);
      int int0 = complex0.hashCode();
      int int1 = complex2.hashCode();
      Complex complex11 = complex4.ONE.log();
      boolean boolean1 = complex8.isInfinite();
      ComplexField complexField1 = complex1.getField();
      Complex complex12 = complex5.acos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-1790.002340236521), (-1790.002340236521));
      double double0 = complex0.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.cosh();
      String string0 = complex2.toString();
      Complex complex3 = complex0.INF.tanh();
      int int0 = complex0.hashCode();
      List<Complex> list0 = complex1.nthRoot(272);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex1.INF.tanh();
      Complex complex6 = complex5.I.tan();
      Object object0 = complex5.ONE.readResolve();
      try { 
        complex4.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.acos();
      double double0 = complex0.ONE.abs();
      Complex complex2 = complex0.sin();
      double double1 = complex0.getArgument();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = complex4.ZERO.exp();
      Complex complex7 = complex6.log();
      double double2 = complex0.getArgument();
      Complex complex8 = complex0.multiply(1.0);
      Complex complex9 = Complex.I;
      Complex complex10 = complex3.subtract(complex9);
      double double3 = complex5.getArgument();
      Complex complex11 = complex3.I.multiply(Double.NaN);
      String string0 = complex11.ZERO.toString();
      Complex complex12 = complex5.createComplex(1244.9333, 0.7853981633974483);
      boolean boolean0 = complex3.isNaN();
      Complex complex13 = complex0.acos();
      Complex complex14 = complex3.tanh();
      boolean boolean1 = complex11.equals(complex12);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.multiply(complex0);
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.abs();
      ComplexField complexField0 = complex3.getField();
      double double1 = complex0.abs();
      int int0 = complex0.hashCode();
      double double2 = complex3.abs();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.divide(complex0);
      ComplexField complexField0 = complex3.ZERO.getField();
      boolean boolean0 = complex2.equals(complex3);
      Complex complex4 = complex2.log();
      Complex complex5 = complex0.ZERO.asin();
      Complex complex6 = complex5.cos();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.multiply((-2669.727322445416));
      double double0 = complex0.getReal();
      String string1 = complex1.toString();
      double double1 = complex0.abs();
      String string2 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.sqrt();
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.sqrt1z();
      Object object0 = complex3.ONE.readResolve();
      Complex complex4 = complex3.ZERO.divide(complex2);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex4.exp();
      boolean boolean0 = complex6.isInfinite();
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.conjugate();
      List<Complex> list0 = complex0.nthRoot(252);
      Complex complex2 = complex0.multiply((double) 252);
      Complex complex3 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex0.subtract(complex4);
      Complex complex8 = complex4.cos();
      Complex complex9 = complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex0.INF.divide(complex1);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-4611.27097820988), 0.0);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.INF.toString();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.sqrt();
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.ONE.divide(complex2);
      Complex complex4 = complex2.ZERO.createComplex((-1261.59198), (-1261.59198));
      ComplexField complexField0 = complex0.INF.getField();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.I.cosh();
      double double0 = complex0.ONE.getArgument();
      try { 
        complex0.I.nthRoot((-2681));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,681
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex0.ZERO.sqrt1z();
      Complex complex5 = complex4.log();
      Complex complex6 = complex0.NaN.pow(complex1);
      Complex complex7 = complex4.NaN.acos();
      Complex complex8 = complex6.cosh();
      double double0 = complex6.NaN.abs();
      Complex complex9 = complex4.ZERO.asin();
      List<Complex> list0 = complex0.nthRoot(250);
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex10.I.sqrt1z();
      Complex complex12 = complex10.acos();
      Complex complex13 = complex10.I.cos();
      double double1 = complex10.getArgument();
      Complex complex14 = complex1.tanh();
      String string0 = complex3.NaN.toString();
      Complex complex15 = complex12.asin();
      Complex complex16 = complex15.NaN.atan();
      Complex complex17 = complex3.I.acos();
      Complex complex18 = complex10.I.tan();
      Complex complex19 = complex15.ONE.conjugate();
      boolean boolean0 = complex3.equals(complex2);
      Complex complex20 = complex4.exp();
      Complex complex21 = complex12.negate();
      Complex complex22 = complex11.atan();
      Complex complex23 = complex19.sqrt1z();
      Object object0 = complex2.readResolve();
      boolean boolean1 = complex21.equals(object0);
      Complex complex24 = complex22.atan();
      Complex complex25 = Complex.NaN;
      Complex complex26 = complex21.pow(complex25);
      Complex complex27 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sinh();
      double double0 = complex1.I.abs();
      Complex complex2 = complex0.ONE.add(complex1);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex3 = complex1.NaN.multiply(0.0);
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex0.ONE.negate();
      double double1 = complex6.abs();
      Complex complex7 = complex0.I.cos();
      Complex complex8 = complex5.ONE.cosh();
      Complex complex9 = complex8.ONE.cosh();
      Complex complex10 = complex9.ONE.divide(complex4);
      Complex complex11 = complex5.atan();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(658.1446340306, 1.0);
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.I.negate();
      Complex complex2 = Complex.NaN;
      double double0 = complex2.ONE.abs();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.atan();
      String string0 = complex4.toString();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex3.INF.multiply(complex5);
      Complex complex7 = complex5.cos();
      Complex complex8 = complex0.NaN.tan();
      Complex complex9 = complex8.ONE.atan();
      Complex complex10 = complex5.I.createComplex(1.0, 2456.756960532793);
      Complex complex11 = complex5.I.multiply(0.0);
      Complex complex12 = complex11.INF.multiply(0.0);
      Complex complex13 = complex0.tan();
      Complex complex14 = complex2.NaN.cosh();
      Complex complex15 = complex13.sqrt();
      Complex complex16 = complex13.conjugate();
      Complex complex17 = complex16.cos();
      Complex complex18 = complex16.ZERO.acos();
      double double1 = complex3.getReal();
      double double2 = complex16.abs();
      boolean boolean0 = complex7.isNaN();
      Complex complex19 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.conjugate();
      Object object0 = complex2.ONE.readResolve();
      Complex complex3 = complex1.ZERO.log();
      Complex complex4 = complex0.ONE.conjugate();
      Complex complex5 = complex2.I.acos();
      Complex complex6 = complex5.ZERO.sinh();
      Object object1 = complex6.readResolve();
      Complex complex7 = complex6.ONE.tanh();
      String string0 = complex2.ZERO.toString();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.INF.divide(complex4);
      Complex complex10 = complex8.ONE.subtract(complex0);
      Complex complex11 = complex0.add(complex1);
      Complex complex12 = complex11.INF.sin();
      Complex complex13 = complex1.tanh();
      Complex complex14 = complex8.multiply(complex2);
      Complex complex15 = complex14.NaN.tanh();
      Complex complex16 = complex6.sqrt();
      Complex complex17 = complex16.ZERO.divide(complex2);
      Complex complex18 = complex7.atan();
      List<Complex> list0 = complex1.nthRoot(1189);
      Complex complex19 = complex2.sin();
      List<Complex> list1 = complex13.nthRoot(1189);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex0.I.negate();
      Complex complex5 = complex4.INF.sinh();
      int int0 = complex4.NaN.hashCode();
      Object object0 = complex0.ONE.readResolve();
      Complex complex6 = complex1.I.multiply(0.0);
      double double0 = complex0.abs();
      double double1 = complex1.abs();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex7.acos();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cos();
      double double0 = complex0.getReal();
      double double1 = complex0.ONE.getArgument();
      Complex complex2 = complex0.log();
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex2.negate();
      double double2 = complex2.ONE.abs();
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex4.I.multiply(0.0);
      Complex complex6 = complex5.INF.atan();
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex0.multiply((-261.5049451));
      Complex complex10 = complex8.INF.tan();
      Complex complex11 = complex10.ZERO.cos();
      Complex complex12 = complex9.exp();
      Complex complex13 = complex12.NaN.divide(complex8);
      Object object1 = complex13.I.readResolve();
      Complex complex14 = complex13.ZERO.sqrt1z();
      boolean boolean0 = complex12.equals(object0);
      Complex complex15 = complex2.ZERO.conjugate();
      double double3 = complex8.NaN.getArgument();
      Complex complex16 = complex5.atan();
      Complex complex17 = complex2.I.createComplex(0.0, 729.616116164);
      Complex complex18 = complex8.sqrt1z();
      Complex complex19 = complex3.sin();
      Complex complex20 = complex1.log();
      Complex complex21 = complex5.divide(complex4);
      Complex complex22 = complex10.divide(complex14);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.asin();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex3 = complex0.NaN.add(complex2);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex1.NaN.add(complex0);
      Complex complex6 = complex0.INF.add(complex5);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex1.I.divide(complex0);
      Complex complex9 = complex8.NaN.exp();
      boolean boolean0 = complex0.equals(complex4);
      Complex complex10 = complex5.acos();
      Complex complex11 = complex10.INF.exp();
      double double0 = complex4.getImaginary();
      Complex complex12 = complex7.conjugate();
      Complex complex13 = complex0.sin();
      Complex complex14 = complex13.INF.multiply(1.0);
      double double1 = complex14.ONE.getArgument();
      double double2 = complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex2.ZERO.cos();
      int int0 = complex5.ONE.hashCode();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex0.subtract(complex2);
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex4.ONE.sqrt();
      Object object0 = complex6.readResolve();
      double double0 = complex0.getImaginary();
      Complex complex11 = complex8.multiply(4411.36477);
      Complex complex12 = complex8.INF.add(complex6);
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
