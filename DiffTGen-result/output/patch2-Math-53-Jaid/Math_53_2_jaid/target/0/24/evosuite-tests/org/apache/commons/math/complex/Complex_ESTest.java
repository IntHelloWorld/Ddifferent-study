/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:57:13 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex3.INF.log();
      Complex complex6 = complex5.ONE.add(complex4);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.INF.cosh();
      double double0 = complex8.ZERO.getArgument();
      Complex complex9 = complex7.negate();
      double double1 = complex7.NaN.abs();
      double double2 = complex3.ONE.getArgument();
      Complex complex10 = complex3.multiply(6180444.390439084);
      Object object0 = complex3.ZERO.readResolve();
      String string0 = complex10.INF.toString();
      Complex complex11 = complex0.createComplex(6180444.390439084, 6180444.390439084);
      Complex complex12 = complex9.ZERO.multiply((-1318.664));
      Complex complex13 = complex10.tan();
      Complex complex14 = complex9.conjugate();
      Complex complex15 = complex0.conjugate();
      Complex complex16 = complex11.sin();
      Complex complex17 = complex15.multiply(0.0);
      Complex complex18 = Complex.ZERO;
      Complex complex19 = complex17.add(complex18);
      Complex complex20 = complex3.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.atan();
      double double0 = complex3.abs();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.ZERO.createComplex((-1.5707963267948966), 1432.0);
      Complex complex4 = complex2.INF.acos();
      double double1 = complex3.I.abs();
      Complex complex5 = complex3.INF.sinh();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex1.ONE.divide(complex0);
      Complex complex8 = complex7.INF.negate();
      Complex complex9 = complex8.ONE.exp();
      Complex complex10 = complex0.ZERO.subtract(complex1);
      double double2 = complex2.I.getArgument();
      String string0 = complex0.toString();
      Complex complex11 = complex0.atan();
      Complex complex12 = complex1.ZERO.acos();
      Complex complex13 = complex2.multiply(complex10);
      Complex complex14 = complex10.tanh();
      Complex complex15 = complex3.log();
      Complex complex16 = complex10.tanh();
      Complex complex17 = complex15.NaN.tanh();
      Complex complex18 = complex17.ZERO.pow(complex2);
      Complex complex19 = complex14.conjugate();
      String string1 = complex19.NaN.toString();
      Complex complex20 = complex0.negate();
      String string2 = complex20.NaN.toString();
      Complex complex21 = complex13.sinh();
      Complex complex22 = complex19.tanh();
      List<Complex> list0 = complex14.nthRoot(4193);
      Complex complex23 = complex18.tan();
      Complex complex24 = complex21.cos();
      Complex complex25 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex4.createComplex((-585.3251), (-585.3251));
      Complex complex6 = complex2.log();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex6.exp();
      double double0 = complex3.ONE.getArgument();
      Complex complex9 = complex8.ONE.cos();
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex10.NaN.atan();
      ComplexField complexField0 = complex4.I.getField();
      boolean boolean0 = complex4.isNaN();
      String string0 = complex0.toString();
      double double1 = complex4.getImaginary();
      Complex complex12 = complex8.subtract(complex2);
      Object object0 = complex1.readResolve();
      Complex complex13 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.atan();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex3.NaN.log();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex6.INF.subtract(complex3);
      Complex complex8 = complex1.ZERO.cosh();
      Complex complex9 = complex4.acos();
      double double0 = complex0.getArgument();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex10.NaN.pow(complex6);
      Complex complex12 = complex10.ZERO.subtract(complex5);
      int int0 = complex5.hashCode();
      Complex complex13 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(548.0, 548.0);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex2.ZERO.createComplex(0.0, 548.0);
      String string0 = complex3.INF.toString();
      Complex complex5 = complex2.NaN.cos();
      Complex complex6 = complex1.INF.createComplex(0.0, 548.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex0.tanh();
      double double0 = complex7.NaN.getArgument();
      double double1 = complex1.ONE.getArgument();
      double double2 = complex6.getReal();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex2.multiply(complex8);
      Complex complex10 = complex9.ZERO.multiply(complex5);
      double double3 = complex9.abs();
      Complex complex11 = complex2.pow(complex4);
      Complex complex12 = complex6.NaN.negate();
      Complex complex13 = complex9.createComplex(2.0, 3318.2718399022);
      Complex complex14 = complex6.multiply(complex1);
      String string1 = complex10.toString();
      Complex complex15 = complex1.pow(complex13);
      try { 
        complex9.nthRoot((-2303));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,303
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-2012.8558084769), (-2012.8558084769));
      Complex complex2 = complex1.sinh();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex3 = complex1.INF.createComplex(0.0, (-2012.8558084769));
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex0.I.sqrt();
      Complex complex8 = complex2.ZERO.cosh();
      String string0 = complex2.toString();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex1.ONE.tan();
      Object object1 = complex4.readResolve();
      Object object2 = complex2.readResolve();
      boolean boolean0 = complex7.equals(object2);
      Object object3 = complex9.readResolve();
      String string1 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1781.145);
      int int0 = complex0.NaN.hashCode();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.createComplex(1781.145, 1244.5811985063306);
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex1.divide(complex0);
      ComplexField complexField1 = complex1.INF.getField();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.I.multiply(complex0);
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex8.asin();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex7.ZERO.tanh();
      Complex complex12 = complex10.negate();
      Complex complex13 = complex8.add(complex9);
      Complex complex14 = complex4.sqrt1z();
      double double0 = complex12.getArgument();
      Complex complex15 = complex12.ONE.exp();
      Complex complex16 = complex10.sinh();
      Complex complex17 = complex12.cos();
      String string0 = complex9.toString();
      Complex complex18 = complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-177.75));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ONE.asin();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex1.I.tanh();
      Complex complex5 = complex4.I.cos();
      int int0 = complex5.ONE.hashCode();
      Complex complex6 = complex5.ZERO.createComplex(0.0, 1861.9672619053);
      Complex complex7 = complex6.ONE.pow(complex4);
      Complex complex8 = complex3.I.tanh();
      Complex complex9 = complex7.ONE.sin();
      Complex complex10 = complex1.NaN.sinh();
      Complex complex11 = complex10.NaN.asin();
      Complex complex12 = complex11.multiply((-437.6146341620921));
      Complex complex13 = complex1.INF.subtract(complex0);
      Complex complex14 = complex13.createComplex((-177.75), (-177.75));
      Complex complex15 = complex13.multiply(0.0);
      Complex complex16 = complex15.ONE.add(complex11);
      String string0 = complex13.I.toString();
      String string1 = complex1.NaN.toString();
      Complex complex17 = complex1.ZERO.createComplex((-2960.47), 2138.214039968559);
      Object object1 = complex1.readResolve();
      Complex complex18 = complex4.conjugate();
      Complex complex19 = complex1.ONE.sqrt1z();
      boolean boolean0 = complex3.equals(complex1);
      Complex complex20 = complex14.exp();
      Complex complex21 = complex18.log();
      double double0 = complex20.getArgument();
      double double1 = complex8.getImaginary();
      Complex complex22 = complex7.add(complex0);
      Complex complex23 = complex18.atan();
      Complex complex24 = complex10.negate();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(1226.92313833045, 1911.8);
      Complex complex1 = complex0.tan();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex0.sqrt1z();
      double double0 = complex0.abs();
      Complex complex6 = complex5.subtract(complex4);
      Complex complex7 = complex5.ZERO.conjugate();
      Complex complex8 = complex6.ZERO.cosh();
      Complex complex9 = complex5.divide(complex2);
      Complex complex10 = complex1.INF.atan();
      Complex complex11 = complex0.ZERO.add(complex2);
      double double1 = complex2.getReal();
      double double2 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.createComplex(1122.367381409905, 1958.4167884817718);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.ONE.asin();
      double double0 = complex0.getReal();
      Complex complex4 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-1944.0));
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.I.sin();
      try { 
        complex3.INF.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.097, 0.097);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.ZERO.tan();
      Complex complex5 = new Complex(0.097, 1959.7107219991817);
      Complex complex6 = complex1.ZERO.add(complex5);
      Complex complex7 = complex6.NaN.sqrt();
      String string0 = complex3.I.toString();
      Complex complex8 = complex3.I.negate();
      int int0 = complex1.hashCode();
      Complex complex9 = complex8.multiply(complex0);
      Complex complex10 = complex8.ZERO.negate();
      Complex complex11 = complex9.asin();
      double double0 = complex11.ZERO.getArgument();
      Complex complex12 = complex5.atan();
      Complex complex13 = complex1.I.conjugate();
      double double1 = complex3.getReal();
      String string1 = complex1.toString();
      Complex complex14 = complex8.conjugate();
      int int1 = complex14.ZERO.hashCode();
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Complex complex15 = complex5.cosh();
      Complex complex16 = complex15.ONE.cosh();
      double double2 = complex9.getImaginary();
      Complex complex17 = complex5.add(complex7);
      Complex complex18 = complex9.cosh();
      Complex complex19 = complex18.NaN.divide(complex10);
      Complex complex20 = complex19.ZERO.sin();
      Complex complex21 = complex2.createComplex((-0.097), (-3152.043519289359));
      boolean boolean1 = complex11.equals(complex8);
      Complex complex22 = complex1.multiply(3.0);
      Complex complex23 = complex17.acos();
      int int2 = complex13.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.sinh();
      double double1 = complex0.getArgument();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex2.ONE.subtract(complex1);
      ComplexField complexField1 = complex2.INF.getField();
      Complex complex6 = complex2.ONE.divide(complex1);
      try { 
        complex1.nthRoot((-242));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -242
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex1.ZERO.log();
      Complex complex4 = complex3.ONE.cosh();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex5 = complex0.NaN.sqrt1z();
      Complex complex6 = complex3.INF.multiply(0.0);
      double double0 = complex0.getArgument();
      Complex complex7 = complex5.multiply(0.0);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex0.negate();
      Complex complex11 = complex3.log();
      double double1 = complex0.getArgument();
      Complex complex12 = complex11.ZERO.add(complex3);
      Complex complex13 = complex0.cosh();
      double double2 = complex2.getImaginary();
      Object object1 = complex11.readResolve();
      boolean boolean0 = complex6.equals(object1);
      try { 
        complex1.nthRoot((-1792));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,792
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.multiply(complex1);
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex0.multiply(complex1);
      Object object0 = complex3.NaN.readResolve();
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex3.I.acos();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex0.subtract(complex5);
      double double1 = complex4.getImaginary();
      int int0 = complex9.hashCode();
      ComplexField complexField0 = complex9.getField();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex3.exp();
      double double0 = complex3.abs();
      Complex complex6 = complex5.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = Complex.I;
      int int0 = complex2.I.hashCode();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex2.I.cos();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex3.I.sqrt();
      ComplexField complexField0 = complex8.ONE.getField();
      Object object0 = complex8.readResolve();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.I.tanh();
      Complex complex11 = complex9.I.cosh();
      int int1 = complex2.I.hashCode();
      Complex complex12 = complex3.divide(complex9);
      Complex complex13 = complex4.ONE.tanh();
      Complex complex14 = complex12.ZERO.sin();
      double double0 = complex5.getImaginary();
      Complex complex15 = complex2.sinh();
      Complex complex16 = Complex.ONE;
      Complex complex17 = complex4.subtract(complex16);
      Complex complex18 = complex17.ZERO.multiply(0.0);
      Complex complex19 = complex15.cosh();
      Object object1 = complex4.readResolve();
      boolean boolean0 = complex8.isInfinite();
      try { 
        complex5.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1195.4860483, 13.0);
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex0.NaN.readResolve();
      Object object1 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = complex0.createComplex(1195.4860483, 0.07692307692307693);
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex4.NaN.exp();
      ComplexField complexField1 = complex4.getField();
      boolean boolean0 = complex3.isInfinite();
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex2.cosh();
      Complex complex10 = complex9.acos();
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex9.ONE.createComplex(1195.4860483, Double.POSITIVE_INFINITY);
      Complex complex13 = complex1.multiply(1598.2934369112);
      Complex complex14 = complex13.ONE.multiply(1598.2934369112);
      Object object2 = complex13.INF.readResolve();
      Complex complex15 = complex14.INF.log();
      Complex complex16 = complex13.cos();
      Complex complex17 = complex16.sqrt();
      boolean boolean1 = complex16.isNaN();
      Complex complex18 = complex9.tan();
      Complex complex19 = new Complex(1598.2934369112, 1598.2934369112);
      Complex complex20 = complex7.multiply(complex19);
      Complex complex21 = complex20.sinh();
      Complex complex22 = complex20.sqrt1z();
      Complex complex23 = complex20.negate();
      Complex complex24 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ONE.sin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex1.multiply(3582.8302384872986);
      double double0 = complex1.NaN.abs();
      Complex complex4 = complex1.I.pow(complex3);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex3.tanh();
      boolean boolean1 = complex5.equals((Object) null);
      double double1 = complex3.getArgument();
      double double2 = complex5.getReal();
      Complex complex7 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = (-1948.553);
      Complex complex0 = new Complex(1.0, (-1948.553));
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = complex3.ZERO.createComplex((-1581.142667065402), 1.0);
      Complex complex5 = complex3.ONE.negate();
      Complex complex6 = new Complex(1.0, 0.058823529411764705);
      Complex complex7 = complex5.pow(complex6);
      Complex complex8 = complex0.cosh();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex9 = complex2.ONE.createComplex((-1948.553), (-1948.553));
      try { 
        complex9.ZERO.nthRoot((-191));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -191
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-119.0), (-119.0));
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex3.asin();
      String string0 = complex2.toString();
      Complex complex5 = complex1.add(complex2);
      Complex complex6 = complex5.NaN.exp();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex0.add(complex1);
      boolean boolean0 = complex1.equals("(NaN, NaN)");
      List<Complex> list0 = complex0.ONE.nthRoot(1527);
      ComplexField complexField0 = complex1.getField();
      String string1 = complex0.toString();
      double double0 = complex2.abs();
      boolean boolean1 = complex2.equals((Object) null);
      Complex complex9 = complex8.conjugate();
      double double1 = complex8.getReal();
      Complex complex10 = complex2.multiply(complex4);
      Complex complex11 = complex4.atan();
      Complex complex12 = complex5.acos();
      Complex complex13 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(0.0);
      double double0 = complex0.getImaginary();
      Complex complex2 = complex1.negate();
      double double1 = complex2.ZERO.getArgument();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex4.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex5.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.pow(complex0);
      double double0 = complex1.getArgument();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.ONE.multiply(-0.0);
      Complex complex5 = complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.INF.subtract(complex3);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex0.INF.asin();
      Complex complex9 = complex5.sqrt1z();
      List<Complex> list0 = complex3.nthRoot(1);
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1056.621), Double.NaN);
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex0.INF.add(complex1);
      double double0 = complex0.I.abs();
      double double1 = complex2.ONE.abs();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ZERO.add(complex2);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex2.multiply(complex1);
      boolean boolean0 = complex6.equals("");
      Complex complex7 = complex2.tan();
      Complex complex8 = complex7.INF.subtract(complex3);
      Complex complex9 = complex8.ZERO.tan();
      Complex complex10 = complex9.ONE.subtract(complex1);
      Complex complex11 = complex10.NaN.negate();
      Complex complex12 = complex0.log();
      Complex complex13 = complex3.sinh();
      double double2 = complex0.getReal();
      ComplexField complexField0 = complex6.getField();
      String string0 = complex13.toString();
      boolean boolean1 = complex11.isInfinite();
      Complex complex14 = complex1.conjugate();
      Complex complex15 = complex2.conjugate();
      Complex complex16 = complex11.sin();
      Complex complex17 = complex6.add(complex1);
      Complex complex18 = complex7.createComplex(1.0, 0.0);
      double double3 = complex15.getArgument();
      String string1 = complex7.toString();
      Complex complex19 = complex16.multiply(complex7);
      List<Complex> list0 = complex13.nthRoot(286);
      Complex complex20 = complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sin();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      ComplexField complexField0 = complex0.ONE.getField();
      List<Complex> list0 = complex0.nthRoot(3095);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex3.NaN.createComplex(Double.NaN, 3339.52245390798);
      boolean boolean0 = complex2.isInfinite();
      Complex complex6 = complex3.NaN.log();
      Complex complex7 = complex1.asin();
      boolean boolean1 = complex2.isInfinite();
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex0.createComplex(1.1430250008909141E-8, Double.NaN);
      Complex complex10 = complex1.sqrt();
      ComplexField complexField1 = complex3.getField();
      double double1 = complex10.abs();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.multiply(complex1);
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.NaN.cos();
      boolean boolean0 = complex4.isNaN();
      Complex complex6 = complex2.createComplex(0.0, (-372.14));
      Complex complex7 = complex6.ZERO.tan();
      Complex complex8 = complex6.ONE.divide(complex5);
      Complex complex9 = complex6.log();
      Complex complex10 = complex9.ZERO.multiply((-36.30804985888924));
      Complex complex11 = complex10.ONE.sinh();
      Complex complex12 = complex6.NaN.createComplex(1.8014398509481984E16, (-983.39));
      Complex complex13 = Complex.ZERO;
      Complex complex14 = complex2.ZERO.pow(complex13);
      ComplexField complexField0 = complex11.getField();
      Complex complex15 = complex2.sqrt();
      Complex complex16 = complex8.conjugate();
      double double1 = complex2.getReal();
      Complex complex17 = complex8.subtract(complex14);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.INF.atan();
      int int0 = complex1.I.hashCode();
      Complex complex4 = complex0.INF.multiply((-0.5));
      String string0 = complex0.toString();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.NaN.acos();
      double double0 = complex6.ONE.getArgument();
      Complex complex7 = complex6.I.subtract(complex4);
      Complex complex8 = complex7.I.sin();
      Complex complex9 = complex4.atan();
      Complex complex10 = Complex.I;
      boolean boolean0 = complex4.equals(complex10);
      int int1 = complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.I.multiply(0.0);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.I.add(complex0);
      Complex complex5 = complex0.sqrt();
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex4.divide(complex3);
      Complex complex7 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.INF.pow(complex0);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.I.divide(complex4);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex1.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex2.ZERO.exp();
      String string0 = complex3.ONE.toString();
      Complex complex4 = complex3.multiply(83.61022370373801);
      Complex complex5 = complex1.I.pow(complex0);
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(3569.424085225755);
      Complex complex2 = new Complex(2238.993616664, (-4218.227813482));
      Complex complex3 = complex0.INF.asin();
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex4.NaN.atan();
      String string0 = complex3.toString();
      Complex complex6 = complex2.ZERO.divide(complex0);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex0.subtract(complex2);
      Complex complex9 = complex8.asin();
      String string1 = complex0.ONE.toString();
      String string2 = complex6.toString();
      double double0 = complex2.getReal();
      Complex complex10 = complex6.subtract(complex2);
      boolean boolean0 = complex0.isInfinite();
      Complex complex11 = complex6.sqrt();
      Complex complex12 = complex4.sqrt1z();
      Complex complex13 = complex11.ZERO.asin();
      Complex complex14 = complex12.sqrt1z();
      Complex complex15 = complex12.multiply(5793.499617971);
      boolean boolean1 = complex11.equals(complex12);
      Complex complex16 = complex11.add(complex3);
      Complex complex17 = complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      int int0 = complex1.hashCode();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex3.ONE.pow(complex0);
      Complex complex6 = complex1.NaN.divide(complex5);
      Complex complex7 = complex0.add(complex3);
      Complex complex8 = complex7.ZERO.sin();
      Complex complex9 = complex0.I.sqrt();
      double double0 = complex5.getReal();
      boolean boolean0 = complex4.equals(complex1);
      Complex complex10 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(2322.513752052645, 2322.513752052645);
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex3.I.subtract(complex1);
      Complex complex6 = complex3.acos();
      Complex complex7 = complex6.ONE.negate();
      double double0 = complex1.ONE.abs();
      Complex complex8 = complex0.subtract(complex1);
      Complex complex9 = complex1.sinh();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex9.divide(complex10);
      Complex complex12 = complex1.tanh();
      Complex complex13 = complex12.ZERO.atan();
      String string0 = complex13.toString();
      List<Complex> list0 = complex9.nthRoot(217);
      ComplexField complexField0 = complex4.getField();
      Complex complex14 = complex5.multiply(Double.NaN);
      Complex complex15 = complex4.add(complex1);
      Complex complex16 = complex8.exp();
      double double1 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.I.atan();
      Complex complex4 = complex0.I.acos();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex5.multiply(complex2);
      Complex complex8 = complex7.add(complex3);
      Complex complex9 = complex4.asin();
      boolean boolean0 = complex4.isInfinite();
      String string0 = complex3.toString();
      Complex complex10 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex3.multiply((-2486.050158472086));
      double double0 = complex3.getArgument();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex6.acos();
      Complex complex9 = complex7.exp();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.ZERO.divide(complex3);
      Object object0 = complex1.I.readResolve();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(139.1, 139.1);
      Complex complex1 = Complex.I;
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.I.exp();
      Complex complex4 = complex2.ONE.sin();
      Complex complex5 = complex2.multiply(802.8);
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.I.sqrt1z();
      int int0 = complex0.hashCode();
      Complex complex9 = complex7.INF.atan();
      String string0 = complex3.toString();
      double double0 = complex7.getReal();
      ComplexField complexField0 = complex9.ONE.getField();
      boolean boolean0 = complex8.isInfinite();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex7.asin();
      Complex complex12 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.NaN.log();
      double double0 = complex0.I.abs();
      Complex complex5 = complex0.add(complex1);
      String string0 = complex5.toString();
      int int0 = complex0.hashCode();
      Complex complex6 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex0.ZERO.sinh();
      List<Complex> list0 = complex0.nthRoot(833);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(1209.415458950659);
      Complex complex2 = complex0.acos();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.multiply((-139.1849876070057));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.multiply(0.0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ZERO.multiply(complex2);
      Complex complex5 = complex0.INF.acos();
      Complex complex6 = complex3.multiply((-130.0));
      Complex complex7 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.ONE.nthRoot(288);
      Complex complex1 = complex0.conjugate();
      List<Complex> list1 = complex1.nthRoot(873);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tanh();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.asin();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex3.I.negate();
      Complex complex6 = complex3.log();
      int int0 = complex6.I.hashCode();
      double double1 = complex1.getArgument();
      Complex complex7 = complex2.cos();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-773.7168), (-773.7168));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.multiply((-773.7168));
      double double0 = complex2.getImaginary();
      Complex complex4 = complex3.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.divide(complex0);
      int int0 = complex1.INF.hashCode();
      Complex complex3 = complex0.cos();
      ComplexField complexField0 = complex3.I.getField();
      Complex complex4 = new Complex((-3022.0597121433775), (-1.0));
      Complex complex5 = complex3.ZERO.add(complex4);
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.ZERO.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.I.createComplex((-70.7303271), (-70.7303271));
      double double0 = complex1.ONE.abs();
      double double1 = complex0.getArgument();
      String string0 = complex0.toString();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.I.sqrt();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex6.NaN.multiply(0.0);
      double double0 = complex0.getImaginary();
      Complex complex8 = complex6.conjugate();
      Complex complex9 = complex4.tan();
      Complex complex10 = complex6.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(2427.8);
      int int0 = complex0.hashCode();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.tan();
      int int1 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.INF.multiply(complex2);
      Complex complex6 = complex4.atan();
      double double0 = complex4.getArgument();
      Complex complex7 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.createComplex(6.283185307179586, 6.283185307179586);
      double double0 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex1.NaN.subtract(complex3);
      List<Complex> list0 = complex1.INF.nthRoot(317);
      Complex complex5 = complex2.log();
      Complex complex6 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-0.25), (-0.25));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.divide(complex1);
      try { 
        complex2.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.ZERO.sqrt();
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex2.ONE.sqrt1z();
      double double1 = complex3.ZERO.getArgument();
      int int0 = complex0.I.hashCode();
      Complex complex4 = complex1.INF.add(complex3);
      Complex complex5 = complex1.INF.pow(complex0);
      int int1 = complex0.hashCode();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex7.ZERO.sqrt();
      Complex complex9 = complex8.sin();
      Complex complex10 = complex0.I.asin();
      Complex complex11 = complex5.sqrt();
      double double2 = complex0.ZERO.getArgument();
      Object object0 = complex6.INF.readResolve();
      Complex complex12 = complex0.multiply(Double.NaN);
      boolean boolean0 = complex0.isInfinite();
      Complex complex13 = complex1.atan();
      Complex complex14 = complex6.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex1.tanh();
      boolean boolean0 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.NaN.sin();
      double double0 = complex2.ZERO.getArgument();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      double double0 = complex1.abs();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.NaN.multiply(complex2);
      Complex complex6 = complex4.sin();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex6.acos();
      Complex complex9 = complex0.multiply(645.4834555);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.negate();
      double double0 = complex1.abs();
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.NaN.sqrt1z();
      double double1 = complex0.abs();
      Complex complex6 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.conjugate();
      double double0 = complex2.abs();
      double double1 = complex2.getImaginary();
      int int0 = complex1.hashCode();
      Complex complex7 = complex2.createComplex((-2185.02688991), Double.POSITIVE_INFINITY);
      boolean boolean0 = complex5.isNaN();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex2.subtract(complex0);
      boolean boolean1 = complex9.equals("3#K_k X?f*<~");
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.negate();
      List<Complex> list0 = complex2.nthRoot(1010);
      Complex complex3 = complex1.ZERO.multiply(complex0);
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex0.I.add(complex2);
      double double0 = complex5.getReal();
      Complex complex8 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex4.INF.divide(complex1);
      Complex complex6 = complex1.ZERO.cosh();
      int int0 = complex2.hashCode();
      int int1 = complex1.hashCode();
      Complex complex7 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.equals("");
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.NaN.readResolve();
      double double0 = complex0.abs();
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex4.INF.sinh();
      Complex complex7 = complex6.NaN.acos();
      Complex complex8 = complex0.multiply(Double.POSITIVE_INFINITY);
      double double1 = complex8.abs();
      Complex complex9 = complex1.subtract(complex8);
      Complex complex10 = complex8.I.subtract(complex1);
      Complex complex11 = complex2.conjugate();
      boolean boolean0 = complex2.equals(complex11);
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex12.INF.createComplex((-1126.0), (-3675.328662));
      Complex complex14 = complex12.ZERO.cos();
      Complex complex15 = complex8.exp();
      Complex complex16 = complex10.negate();
      Complex complex17 = complex16.INF.sinh();
      Complex complex18 = complex7.conjugate();
      Complex complex19 = complex15.add(complex18);
      Complex complex20 = complex17.sqrt();
      Complex complex21 = Complex.INF;
      double double2 = complex3.ONE.abs();
      int int0 = complex17.NaN.hashCode();
      Complex complex22 = complex16.ONE.pow(complex5);
      boolean boolean1 = complex13.equals(complex21);
      Complex complex23 = complex21.subtract(complex5);
      Complex complex24 = complex17.cosh();
      List<Complex> list0 = complex3.nthRoot(698);
      Complex complex25 = complex13.divide(complex11);
      Complex complex26 = complex23.sin();
      Complex complex27 = complex26.exp();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex6.ZERO.add(complex5);
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex4.subtract(complex5);
      Complex complex10 = complex4.ZERO.conjugate();
      boolean boolean0 = complex4.isNaN();
      Object object0 = complex7.readResolve();
      boolean boolean1 = complex5.equals(object0);
      Complex complex11 = complex2.tan();
      double double0 = complex6.ZERO.abs();
      try { 
        complex3.nthRoot((-2078));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,078
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3260.69842980506);
      Complex complex1 = complex0.NaN.createComplex(0.0, 4544.6);
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex0.ZERO.negate();
      Complex complex4 = complex0.ONE.conjugate();
      Complex complex5 = complex0.I.atan();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex6 = complex2.atan();
      Object object1 = complex1.readResolve();
      Complex complex7 = complex2.sqrt1z();
      try { 
        complex7.nthRoot((-1423));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,423
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex4.NaN.cos();
      double double0 = complex2.ZERO.getArgument();
      Complex complex6 = complex1.I.multiply(0.0);
      double double1 = complex6.ONE.getArgument();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex1.sqrt1z();
      double double2 = complex0.ONE.abs();
      Complex complex8 = complex7.asin();
      double double3 = complex1.getImaginary();
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex6.log();
      Complex complex11 = complex6.atan();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      double double0 = complex0.I.abs();
      double double1 = complex1.getReal();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex2.I.sin();
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = complex5.ZERO.multiply(complex0);
      Complex complex7 = complex6.I.sinh();
      double double2 = complex5.INF.getArgument();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex8.multiply(6.283185307179586);
      Complex complex10 = complex8.conjugate();
      Complex complex11 = complex10.NaN.sin();
      Complex complex12 = complex3.sin();
      Complex complex13 = complex8.ONE.asin();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex14 = complex8.ZERO.add(complex4);
      Complex complex15 = complex2.I.asin();
      double double3 = complex14.I.getArgument();
      Complex complex16 = complex2.I.conjugate();
      Complex complex17 = complex8.createComplex((-82.45), 2.0);
      Complex complex18 = complex8.log();
      double double4 = complex0.abs();
      Complex complex19 = complex0.exp();
      Complex complex20 = complex4.multiply(complex1);
      Complex complex21 = complex7.subtract(complex4);
      Complex complex22 = complex18.log();
      Complex complex23 = complex11.asin();
      Complex complex24 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      double double0 = complex0.abs();
      Complex complex2 = complex0.createComplex(0.0, 1.8014398509481984E16);
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = complex2.ZERO.divide(complex3);
      Complex complex5 = complex3.INF.acos();
      Complex complex6 = complex5.I.sinh();
      String string0 = complex5.toString();
      Complex complex7 = complex1.sin();
      Object object0 = complex1.readResolve();
      Complex complex8 = ((Complex) object0).ONE.subtract(complex2);
      double double1 = complex7.I.getArgument();
      Complex complex9 = complex7.ONE.subtract(complex1);
      double double2 = complex7.NaN.abs();
      Complex complex10 = complex2.NaN.divide(complex0);
      boolean boolean0 = complex1.isNaN();
      double double3 = complex7.getImaginary();
      Complex complex11 = complex0.add(complex2);
      double double4 = complex11.abs();
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = complex12.NaN.sinh();
      Complex complex14 = complex12.ONE.cosh();
      Complex complex15 = complex1.exp();
      Complex complex16 = complex13.createComplex(1.8014398509481984E16, 177.16641);
      Complex complex17 = complex16.tan();
      Complex complex18 = complex17.ZERO.acos();
      Complex complex19 = complex1.sin();
      Complex complex20 = complex18.NaN.pow(complex15);
      Complex complex21 = Complex.NaN;
      Complex complex22 = complex18.subtract(complex21);
      Complex complex23 = complex15.negate();
      Complex complex24 = complex19.cosh();
      Complex complex25 = complex13.negate();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-1089.20291));
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.log();
      String string0 = complex0.toString();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.negate();
      String string1 = complex2.toString();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex0.multiply(complex2);
      Complex complex7 = complex2.cos();
      Complex complex8 = complex0.pow(complex4);
      Complex complex9 = complex8.ONE.negate();
      Complex complex10 = Complex.NaN;
      boolean boolean0 = complex1.equals(complex10);
      Complex complex11 = complex8.cosh();
      Complex complex12 = complex10.I.acos();
      Complex complex13 = complex8.add(complex5);
      Complex complex14 = complex11.NaN.negate();
      Object object0 = complex10.readResolve();
      Complex complex15 = complex11.add(complex1);
      Complex complex16 = complex8.exp();
      Complex complex17 = complex11.multiply(complex2);
      Complex complex18 = complex17.INF.cosh();
      int int0 = complex11.hashCode();
      Complex complex19 = complex12.cos();
      Complex complex20 = complex19.cos();
      List<Complex> list0 = complex15.nthRoot(3133);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.multiply(complex1);
      int int0 = complex3.ONE.hashCode();
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex1.ONE.sin();
      Complex complex6 = complex4.tanh();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = complex7.ONE.log();
      Complex complex9 = complex5.sinh();
      Complex complex10 = complex0.I.exp();
      Complex complex11 = complex6.pow(complex1);
      Complex complex12 = complex5.sinh();
      Complex complex13 = complex1.createComplex(0.0, 0.0);
      Complex complex14 = complex13.INF.log();
      double double0 = complex5.getArgument();
      boolean boolean0 = complex4.isNaN();
      double double1 = complex13.abs();
      Complex complex15 = complex2.acos();
      Complex complex16 = complex15.ZERO.asin();
      double double2 = complex6.abs();
      String string0 = complex13.toString();
      List<Complex> list0 = complex2.nthRoot(1);
      int int1 = complex13.hashCode();
      Complex complex17 = complex4.exp();
      Complex complex18 = complex17.I.pow(complex5);
      Complex complex19 = complex13.sqrt();
      double double3 = complex19.abs();
      Object object1 = complex4.readResolve();
      Object object2 = complex16.readResolve();
  }
}
