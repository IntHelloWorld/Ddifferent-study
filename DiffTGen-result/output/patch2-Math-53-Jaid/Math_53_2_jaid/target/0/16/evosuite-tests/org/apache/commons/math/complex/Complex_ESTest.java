/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:53:51 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sinh();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(0.6366197723675814, (-4.503599627370496E15));
      Complex complex1 = complex0.ZERO.createComplex((-4.503599627370496E15), 1.2675934823758863E-8);
      Complex complex2 = complex1.INF.acos();
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex0.acos();
      double double0 = complex3.abs();
      double double1 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex3.NaN.exp();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex5 = complex0.ONE.exp();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, 2089.0);
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = complex7.I.sqrt1z();
      Complex complex9 = complex8.I.divide(complex2);
      Complex complex10 = complex7.INF.log();
      Complex complex11 = complex7.acos();
      Complex complex12 = complex6.cos();
      Complex complex13 = complex12.acos();
      Complex complex14 = complex1.multiply(2089.0);
      Complex complex15 = complex11.I.sqrt();
      ComplexField complexField0 = complex11.ONE.getField();
      Complex complex16 = complex2.conjugate();
      double double0 = complex11.getArgument();
      List<Complex> list0 = complex7.nthRoot(2873);
      double double1 = complex2.abs();
      Complex complex17 = complex16.I.sqrt();
      Complex complex18 = complex7.tanh();
      Complex complex19 = complex7.createComplex((-437.221701), 210.035);
      Complex complex20 = complex16.multiply(complex3);
      Complex complex21 = complex15.add(complex2);
      List<Complex> list1 = complex13.nthRoot(2873);
      Complex complex22 = complex17.cos();
      Complex complex23 = complex20.asin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(66.057053, 66.057053);
      Object object0 = complex0.INF.readResolve();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sin();
      Object object1 = complex0.readResolve();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.NaN.conjugate();
      double double0 = complex4.I.getArgument();
      Complex complex5 = complex3.ZERO.add(complex0);
      int int0 = complex0.NaN.hashCode();
      Complex complex6 = complex3.NaN.cosh();
      boolean boolean0 = complex0.equals(object0);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.ZERO.add(complex5);
      Complex complex9 = complex7.ZERO.tanh();
      boolean boolean1 = complex7.isNaN();
      boolean boolean2 = complex8.isInfinite();
      Complex complex10 = complex7.divide(complex8);
      Complex complex11 = complex5.conjugate();
      double double1 = complex11.getArgument();
      boolean boolean3 = complex3.equals("");
      Complex complex12 = complex7.atan();
      Complex complex13 = complex2.tanh();
      Complex complex14 = complex13.divide(complex12);
      Complex complex15 = complex13.NaN.pow(complex6);
      Complex complex16 = complex7.asin();
      Complex complex17 = complex2.multiply(complex11);
      Complex complex18 = complex1.divide(complex4);
      Complex complex19 = complex18.divide(complex4);
      double double2 = complex3.getImaginary();
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.I.subtract(complex1);
      Complex complex4 = complex0.createComplex(1316.0, 1316.0);
      Complex complex5 = complex2.acos();
      Complex complex6 = complex1.ZERO.negate();
      Complex complex7 = complex1.pow(complex4);
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex0.pow(complex7);
      double double0 = complex1.abs();
      Complex complex10 = complex8.NaN.exp();
      Complex complex11 = complex9.cos();
      List<Complex> list0 = complex6.nthRoot(1);
      int int0 = complex5.hashCode();
      Complex complex12 = complex1.divide(complex8);
      double double1 = complex6.getImaginary();
      Complex complex13 = Complex.I;
      boolean boolean0 = complex8.equals(complex13);
      Complex complex14 = complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-4947.218622574524), 1264.0);
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex2.sinh();
      double double0 = complex0.getReal();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex4.atan();
      Complex complex6 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.tanh();
      boolean boolean0 = complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.I.tanh();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex6.multiply(complex2);
      Complex complex8 = complex6.add(complex1);
      Complex complex9 = complex1.pow(complex7);
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex9.ZERO.pow(complex10);
      Complex complex12 = complex0.acos();
      Complex complex13 = complex12.sqrt();
      Complex complex14 = complex1.multiply(complex4);
      Complex complex15 = complex8.acos();
      double double1 = complex4.getImaginary();
      Complex complex16 = complex15.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex1.ZERO.subtract(complex0);
      List<Complex> list0 = complex1.nthRoot(1957);
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.NaN.asin();
      double double0 = complex0.getReal();
      double double1 = complex4.NaN.getArgument();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex4.INF.sin();
      Complex complex8 = complex0.multiply(complex4);
      Object object0 = complex8.readResolve();
      Complex complex9 = complex0.sqrt1z();
      double double2 = complex9.getArgument();
      double double3 = complex8.getImaginary();
      // Undeclared exception!
      complex2.nthRoot(3997);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.I.sqrt();
      String string0 = complex1.toString();
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.ZERO.sqrt();
      Complex complex5 = complex1.sinh();
      Object object0 = complex3.ONE.readResolve();
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex6.ONE.divide(complex1);
      int int0 = complex2.ZERO.hashCode();
      ComplexField complexField0 = complex6.I.getField();
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex1.multiply(0.0);
      Complex complex9 = complex0.tan();
      Complex complex10 = complex0.add(complex8);
      double double1 = complex10.ZERO.getArgument();
      Object object1 = complex3.readResolve();
      Complex complex11 = new Complex(0.0, Double.NaN);
      Complex complex12 = complex1.pow(complex11);
      Complex complex13 = complex11.sqrt1z();
      Complex complex14 = complex1.pow(complex13);
      double double2 = complex4.getArgument();
      Complex complex15 = complex8.sqrt1z();
      Complex complex16 = complex10.sinh();
      Complex complex17 = complex8.tanh();
      String string1 = complex12.toString();
      boolean boolean1 = complex14.isNaN();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex3.I.multiply((-607.46482));
      double double0 = complex0.getArgument();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex6.NaN.negate();
      Complex complex8 = complex5.ZERO.sin();
      Complex complex9 = complex1.multiply((-607.46482));
      Complex complex10 = complex9.I.negate();
      Complex complex11 = complex3.conjugate();
      Complex complex12 = complex1.tanh();
      Complex complex13 = complex10.ZERO.pow(complex2);
      int int0 = complex12.I.hashCode();
      Complex complex14 = complex0.tanh();
      String string0 = complex10.toString();
      Complex complex15 = complex0.pow(complex3);
      Complex complex16 = complex9.tanh();
      Complex complex17 = complex0.asin();
      Complex complex18 = complex5.atan();
      boolean boolean0 = complex2.equals("(-0.0, -1.0)");
      Complex complex19 = Complex.INF;
      Complex complex20 = complex8.multiply(complex19);
      int int1 = complex17.hashCode();
      Complex complex21 = complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.ZERO.tanh();
      Complex complex4 = complex2.I.add(complex1);
      int int0 = complex1.hashCode();
      Complex complex5 = complex2.I.conjugate();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.INF.conjugate();
      double double0 = complex6.INF.getArgument();
      Complex complex8 = complex2.NaN.sinh();
      Complex complex9 = complex2.ONE.cosh();
      Complex complex10 = complex5.INF.negate();
      double double1 = complex5.getArgument();
      Complex complex11 = complex0.INF.multiply(1925.428765659858);
      boolean boolean0 = complex0.equals("$)F7^h1");
      Complex complex12 = complex5.atan();
      double double2 = complex1.abs();
      Complex complex13 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.07842259109020233, (-354.23078));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.multiply(0.07842259109020233);
      List<Complex> list0 = complex0.NaN.nthRoot(212);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.ONE.asin();
      Complex complex5 = Complex.I;
      Complex complex6 = complex3.ONE.add(complex5);
      Complex complex7 = complex6.ZERO.acos();
      Complex complex8 = complex3.negate();
      Complex complex9 = complex0.subtract(complex3);
      Complex complex10 = complex2.sqrt1z();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex11.I.sqrt1z();
      Complex complex13 = complex7.subtract(complex11);
      Complex complex14 = complex5.sqrt1z();
      Complex complex15 = complex13.acos();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = new Complex((-919.431394486), (-919.431394486));
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex4.NaN.sqrt1z();
      Complex complex7 = complex0.tanh();
      Object object0 = complex2.I.readResolve();
      double double0 = complex7.ZERO.abs();
      Complex complex8 = complex2.pow(complex5);
      Complex complex9 = complex8.NaN.sqrt1z();
      Complex complex10 = complex7.tanh();
      List<Complex> list0 = complex5.nthRoot(90);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.nthRoot(4177);
      double double0 = complex0.getArgument();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.ONE.negate();
      Object object0 = complex1.readResolve();
      double double1 = complex0.getArgument();
      Complex complex2 = complex0.cos();
      double double2 = complex0.abs();
      Object object1 = new Object();
      Complex complex3 = complex0.I.sin();
      boolean boolean0 = complex0.equals(object1);
      double double3 = complex0.getImaginary();
      Complex complex4 = complex0.ONE.divide(complex1);
      Complex complex5 = complex4.I.tan();
      Object object2 = complex2.readResolve();
      Complex complex6 = complex1.multiply(complex0);
      Complex complex7 = complex6.INF.createComplex(0.0, (-1799.87293867289));
      Complex complex8 = complex0.INF.createComplex(0.99, 0.99);
      double double4 = complex1.abs();
      Complex complex9 = complex1.divide(complex6);
      Complex complex10 = complex9.acos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex1.ONE.pow(complex3);
      boolean boolean0 = complex0.equals(complex4);
      Complex complex6 = complex4.NaN.sin();
      int int0 = complex6.ZERO.hashCode();
      Complex complex7 = complex6.NaN.log();
      // Undeclared exception!
      try { 
        complex6.I.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.log();
      double double0 = complex1.I.abs();
      String string0 = complex0.I.toString();
      int int0 = complex0.hashCode();
      ComplexField complexField0 = complex0.getField();
      double double1 = complex0.getReal();
      List<Complex> list0 = complex0.INF.nthRoot(750);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = complex2.ONE.divide(complex1);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.NaN.divide(complex1);
      double double2 = complex6.INF.getArgument();
      double double3 = complex5.ZERO.abs();
      Complex complex7 = complex5.NaN.log();
      List<Complex> list1 = complex5.I.nthRoot(1);
      Complex complex8 = complex1.exp();
      Complex complex9 = complex8.ZERO.cosh();
      Complex complex10 = complex3.add(complex1);
      try { 
        complex10.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.multiply((-54.0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(1882.75852756389, 0.14285714285714285);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.createComplex(0.0, 1882.75852756389);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.INF.sqrt();
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      Complex complex6 = complex4.ZERO.cosh();
      Complex complex7 = complex6.ZERO.sin();
      ComplexField complexField0 = complex0.getField();
      String string0 = complex4.toString();
      double double0 = complex6.getImaginary();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex8.ONE.asin();
      Object object0 = complex8.ZERO.readResolve();
      Complex complex10 = complex7.ZERO.sin();
      Object object1 = complex0.readResolve();
      Complex complex11 = complex4.acos();
      Complex complex12 = complex7.divide(complex11);
      Complex complex13 = complex11.tan();
      Complex complex14 = complex12.sqrt();
      Complex complex15 = complex8.asin();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-238.5411765785527), (-238.5411765785527));
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.ZERO.sinh();
      Complex complex5 = complex1.add(complex0);
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.I.multiply(1.5707963267948966);
      Complex complex8 = complex6.INF.createComplex((-238.5411765785527), (-7.800414592973399E-9));
      ComplexField complexField0 = complex6.getField();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.asin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex0.subtract(complex1);
      List<Complex> list0 = complex6.nthRoot(81);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.ONE.add(complex2);
      Complex complex9 = complex6.subtract(complex4);
      Complex complex10 = complex7.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.ONE.conjugate();
      String string0 = complex0.ONE.toString();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex1.ZERO.multiply(Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.ONE.sinh();
      Object object1 = complex4.INF.readResolve();
      Complex complex6 = complex4.createComplex((-1714.02313), (-746.058770482791));
      int int0 = complex6.ZERO.hashCode();
      Complex complex7 = complex4.subtract(complex3);
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(3513.7, 3513.7);
      int int0 = complex0.ONE.hashCode();
      boolean boolean0 = complex0.equals((Object) null);
      double double0 = complex0.abs();
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex2.tan();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex2.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex3.NaN.divide(complex1);
      Complex complex7 = complex0.atan();
      double double0 = complex7.I.abs();
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex6.INF.asin();
      Complex complex10 = complex0.cos();
      Complex complex11 = complex10.NaN.exp();
      double double1 = complex7.getReal();
      Complex complex12 = complex10.I.cosh();
      double double2 = complex3.ONE.getArgument();
      int int0 = complex1.hashCode();
      double double3 = complex1.getArgument();
      int int1 = complex0.hashCode();
      Complex complex13 = complex3.exp();
      Complex complex14 = complex13.I.tanh();
      Complex complex15 = complex0.ONE.sin();
      Complex complex16 = complex15.INF.multiply((-3055.53));
      Complex complex17 = complex0.subtract(complex10);
      double double4 = complex0.getArgument();
      boolean boolean0 = complex6.isInfinite();
      Complex complex18 = complex0.NaN.negate();
      double double5 = complex7.getReal();
      Complex complex19 = complex17.exp();
      Complex complex20 = complex1.NaN.multiply((-1859.22177529));
      Complex complex21 = complex10.ZERO.createComplex(1.0, 1.2599210498948732);
      Object object0 = complex1.readResolve();
      boolean boolean1 = complex11.equals(object0);
      ComplexField complexField0 = complex4.getField();
      double double6 = complex18.getReal();
      Complex complex22 = complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.multiply(complex1);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      double double0 = complex0.abs();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex5.ZERO.sqrt();
      Complex complex7 = complex0.INF.add(complex3);
      List<Complex> list0 = complex1.nthRoot(1245);
      double double0 = complex1.getImaginary();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex3.createComplex(0.0, 1245);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3227.604015912992);
      Complex complex1 = complex0.sinh();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.I.subtract(complex1);
      Complex complex6 = complex3.multiply(complex4);
      ComplexField complexField0 = complex6.ZERO.getField();
      Complex complex7 = complex0.NaN.tanh();
      Complex complex8 = complex3.cos();
      double double0 = complex8.ZERO.abs();
      Complex complex9 = complex2.ONE.multiply(0.0);
      Complex complex10 = complex2.subtract(complex0);
      Complex complex11 = Complex.I;
      Complex complex12 = complex11.I.acos();
      Complex complex13 = complex6.INF.divide(complex11);
      Complex complex14 = complex1.acos();
      double double1 = complex4.getArgument();
      double double2 = complex6.getArgument();
      double double3 = complex10.getReal();
      Complex complex15 = complex10.sqrt();
      int int0 = complex14.hashCode();
      Complex complex16 = complex10.acos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      Complex complex1 = complex0.sqrt();
      try { 
        complex0.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-2305.12638732284), (-2305.12638732284));
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.acos();
      String string0 = complex1.I.toString();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.add(complex1);
      int int0 = complex0.hashCode();
      ComplexField complexField1 = complex1.getField();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.ONE.cosh();
      ComplexField complexField2 = complex1.ZERO.getField();
      Complex complex6 = complex4.tanh();
      Complex complex7 = Complex.I;
      Complex complex8 = complex5.add(complex7);
      Complex complex9 = complex4.INF.subtract(complex0);
      Complex complex10 = complex3.atan();
      int int1 = complex10.ONE.hashCode();
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex11.INF.add(complex1);
      boolean boolean0 = complex1.isNaN();
      Complex complex13 = complex5.multiply(complex0);
      Complex complex14 = complex7.ONE.tanh();
      int int2 = complex14.INF.hashCode();
      Complex complex15 = complex11.ZERO.multiply(complex14);
      Complex complex16 = complex14.ONE.exp();
      Complex complex17 = complex9.divide(complex1);
      Complex complex18 = complex0.asin();
      Complex complex19 = complex1.sqrt();
      Complex complex20 = complex2.exp();
      boolean boolean1 = complex3.isNaN();
      Complex complex21 = complex3.pow(complex9);
      Complex complex22 = complex2.cos();
      Object object0 = complex6.readResolve();
      Complex complex23 = complex12.sin();
      Complex complex24 = complex8.atan();
      boolean boolean2 = complex14.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.I.multiply(3044.6173);
      Complex complex3 = complex2.ZERO.acos();
      List<Complex> list0 = complex0.nthRoot(3986);
      double double0 = complex1.ONE.getArgument();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex5.ZERO.subtract(complex0);
      Complex complex7 = complex2.ZERO.tanh();
      Complex complex8 = complex1.sqrt1z();
      List<Complex> list1 = complex8.nthRoot(236);
      Complex complex9 = complex8.NaN.subtract(complex0);
      double double1 = complex0.getImaginary();
      Complex complex10 = complex2.exp();
      Complex complex11 = complex10.multiply(complex0);
      double double2 = complex11.abs();
      int int0 = complex4.hashCode();
      Complex complex12 = complex3.cos();
      Complex complex13 = complex8.multiply(complex1);
      Complex complex14 = complex4.divide(complex0);
      Complex complex15 = complex5.tan();
      Complex complex16 = complex15.ONE.acos();
      Complex complex17 = complex10.sin();
      Complex complex18 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.I.sqrt();
      double double0 = complex3.ONE.abs();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex5.ZERO.add(complex4);
      Complex complex7 = complex0.divide(complex3);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex1.NaN.tanh();
      Complex complex10 = complex8.ONE.acos();
      Complex complex11 = complex4.INF.log();
      Complex complex12 = complex1.I.multiply(1.0);
      Complex complex13 = complex12.ZERO.sin();
      String string0 = complex8.toString();
      Complex complex14 = complex1.negate();
      Complex complex15 = complex14.divide(complex7);
      Complex complex16 = complex5.tan();
      Complex complex17 = complex7.conjugate();
      Complex complex18 = complex14.add(complex16);
      Complex complex19 = complex17.sqrt();
      boolean boolean0 = complex9.isNaN();
      Complex complex20 = Complex.ZERO;
      Complex complex21 = complex8.multiply(complex20);
      Complex complex22 = complex8.negate();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.ONE.atan();
      Object object0 = complex0.I.readResolve();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex1.ONE.add(complex0);
      Complex complex4 = complex3.ONE.negate();
      double double1 = complex0.getImaginary();
      Complex complex5 = complex3.atan();
      Object object1 = complex0.readResolve();
      double double2 = complex1.getArgument();
      Complex complex6 = complex4.add(complex0);
      double double3 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 4.455505956692757);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.multiply((-363.24));
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex0.ZERO.pow(complex1);
      Complex complex5 = complex0.createComplex(998.062, 4.455505956692757);
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex6.add(complex1);
      Complex complex8 = complex0.atan();
      Complex complex9 = complex0.add(complex8);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sinh();
      ComplexField complexField0 = complex1.I.getField();
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex0.INF.log();
      int int0 = complex3.ONE.hashCode();
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex0.I.asin();
      Complex complex7 = complex5.NaN.createComplex(0.0, (-1874.21758491755));
      int int1 = complex0.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex8.sin();
      Complex complex10 = complex9.multiply((-1874.21758491755));
      Complex complex11 = complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(0.3333333333333333, 0.3333333333333333);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = new Complex(0.0, (-4304.0590853178));
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex2.INF.subtract(complex3);
      Complex complex6 = complex1.ZERO.divide(complex3);
      Complex complex7 = complex2.negate();
      Complex complex8 = complex7.ONE.asin();
      Complex complex9 = complex0.add(complex1);
      Complex complex10 = complex0.negate();
      Complex complex11 = complex1.createComplex(0.0, 0.3333333333333333);
      boolean boolean0 = complex7.isInfinite();
      Complex complex12 = complex11.log();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.NaN.cos();
      List<Complex> list0 = complex2.NaN.nthRoot(270);
      Complex complex4 = complex1.INF.acos();
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = complex5.multiply(complex4);
      Complex complex7 = complex6.ZERO.conjugate();
      Complex complex8 = complex6.I.asin();
      Complex complex9 = complex8.ONE.sqrt();
      Complex complex10 = complex6.ZERO.sqrt();
      Complex complex11 = complex0.exp();
      Complex complex12 = complex11.I.divide(complex6);
      Complex complex13 = complex0.tanh();
      Complex complex14 = complex11.acos();
      Complex complex15 = complex10.ZERO.sqrt();
      double double0 = complex0.INF.abs();
      Complex complex16 = complex14.ZERO.asin();
      Complex complex17 = complex14.subtract(complex8);
      Complex complex18 = complex1.log();
      double double1 = complex18.ONE.abs();
      Complex complex19 = complex7.cosh();
      boolean boolean0 = complex19.equals(complex0);
      Complex complex20 = complex10.negate();
      Complex complex21 = complex0.createComplex(1.0, Double.POSITIVE_INFINITY);
      Complex complex22 = complex20.atan();
      Complex complex23 = complex13.tan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.atan();
      double double0 = complex2.getArgument();
      Complex complex4 = complex1.asin();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex1.INF.multiply(complex5);
      Object object0 = complex3.readResolve();
      Complex complex7 = complex4.subtract(complex1);
      boolean boolean0 = complex4.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.createComplex(2108.918243376831, (-1850.1776728083385));
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex0.sqrt();
      Object object0 = complex1.I.readResolve();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex5.ZERO.pow(complex3);
      Complex complex7 = complex5.ZERO.createComplex((-4732.40614659379), 2.0);
      Complex complex8 = complex1.atan();
      int int0 = complex8.NaN.hashCode();
      Complex complex9 = complex2.multiply(Double.NaN);
      String string0 = complex2.toString();
      boolean boolean0 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Object object0 = complex1.I.readResolve();
      boolean boolean0 = complex1.isInfinite();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.NaN.sin();
      Complex complex5 = complex3.ONE.negate();
      Complex complex6 = complex1.I.sqrt();
      Complex complex7 = complex2.ONE.acos();
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex8.divide(complex1);
      Object object1 = complex8.readResolve();
      boolean boolean1 = complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 9.219544613762692E-9);
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.sqrt();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.ZERO.subtract(complex2);
      double double1 = complex1.abs();
      Complex complex4 = complex0.sin();
      try { 
        complex4.nthRoot((-3281));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,281
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.NaN.exp();
      Complex complex4 = complex2.NaN.sin();
      Complex complex5 = complex4.ZERO.pow(complex1);
      Complex complex6 = complex4.ZERO.exp();
      Complex complex7 = complex2.I.cosh();
      double double0 = complex7.getArgument();
      String string0 = complex0.NaN.toString();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex0.ONE.cos();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex0.NaN.divide(complex10);
      Complex complex12 = complex7.INF.subtract(complex8);
      Complex complex13 = complex0.atan();
      Complex complex14 = complex9.log();
      Complex complex15 = complex14.ZERO.tanh();
      Complex complex16 = complex7.sinh();
      boolean boolean0 = complex14.equals(complex13);
      Object object0 = complex0.readResolve();
      Complex complex17 = complex1.pow(complex0);
      Complex complex18 = complex17.tan();
      Complex complex19 = complex0.multiply(0.0);
      Complex complex20 = complex6.cos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.INF.multiply(0.2222222089767456);
      boolean boolean0 = complex0.equals(complex2);
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(661.2267234, 661.2267234);
      double double0 = complex0.I.getArgument();
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.NaN.add(complex1);
      Object object1 = complex2.readResolve();
      ComplexField complexField0 = complex2.getField();
      Complex complex4 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-1903.6349140433), 3954.433);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.ZERO.cosh();
      Complex complex4 = complex3.INF.subtract(complex2);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex0.cos();
      Object object0 = complex6.INF.readResolve();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.INF.add(complex2);
      int int0 = complex7.I.hashCode();
      Complex complex9 = complex7.log();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex6.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex2.I.subtract(complex1);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex4 = complex2.NaN.exp();
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex4.INF.negate();
      String string0 = complex0.toString();
      double double0 = complex1.getArgument();
      Complex complex7 = complex6.conjugate();
      double double1 = complex1.abs();
      double double2 = complex5.getReal();
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex1.ZERO.sinh();
      double double0 = complex3.I.abs();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex6.ONE.multiply(complex0);
      Complex complex8 = complex6.sin();
      double double1 = complex4.getImaginary();
      double double2 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.createComplex((-1013.82), (-1013.82));
      Complex complex3 = complex0.createComplex(6.283185307179586, (-1013.82));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-942.0), (-1.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex0.pow(complex1);
      double double0 = complex0.getArgument();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.createComplex(1952.1285, 1952.1285);
      Complex complex4 = complex3.ZERO.log();
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.add((Complex) null);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex5.INF.multiply(complex4);
      Complex complex7 = complex4.acos();
      double double0 = 0.0;
      Complex complex8 = complex7.NaN.createComplex(0.0, 0.0);
      Complex complex9 = complex8.NaN.pow(complex6);
      Complex complex10 = complex5.ZERO.sqrt1z();
      Complex complex11 = complex3.I.createComplex(0.0, 0.0);
      try { 
        complex2.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ZERO.createComplex(3.141592653589793, Double.NaN);
      String string0 = complex1.NaN.toString();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex3.I.conjugate();
      Complex complex6 = complex0.pow(complex1);
      double double0 = complex0.abs();
      Complex complex7 = complex3.ONE.add(complex2);
      Complex complex8 = complex7.ONE.multiply(complex6);
      Complex complex9 = complex5.ONE.acos();
      Complex complex10 = complex7.subtract(complex3);
      try { 
        complex7.INF.nthRoot((-1316));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,316
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.ONE.tan();
      Object object0 = complex0.NaN.readResolve();
      Complex complex3 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      double double0 = complex1.ZERO.abs();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Object object0 = complex2.NaN.readResolve();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.multiply(complex3);
      String string0 = complex0.toString();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = complex6.I.tanh();
      Complex complex8 = complex0.subtract(complex4);
      Complex complex9 = complex3.divide(complex5);
      Complex complex10 = complex3.asin();
      Object object1 = complex8.ZERO.readResolve();
      Complex complex11 = complex8.pow(complex3);
      Complex complex12 = complex8.cos();
      Complex complex13 = complex8.I.sin();
      Complex complex14 = complex13.ZERO.atan();
      Complex complex15 = complex4.acos();
      Complex complex16 = complex11.createComplex((-1387.45380881849), (-3109.684908289515));
      Complex complex17 = complex16.multiply(complex9);
      double double0 = complex12.abs();
      Complex complex18 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      Object object0 = complex1.NaN.readResolve();
      double double0 = complex0.INF.abs();
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex0.createComplex(0.0, (-1132.77));
      List<Complex> list0 = complex2.ZERO.nthRoot(2250);
      Complex complex3 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = new Complex(1.0, 1.0);
      double double0 = complex2.ONE.getArgument();
      Complex complex3 = complex0.pow(complex2);
      int int1 = complex0.hashCode();
      double double1 = complex3.ONE.getArgument();
      Complex complex4 = complex2.INF.atan();
      Complex complex5 = complex2.divide(complex0);
      boolean boolean0 = complex2.isNaN();
      Complex complex6 = complex2.cosh();
      boolean boolean1 = complex2.isNaN();
      Complex complex7 = complex6.multiply(complex3);
      String string0 = complex0.toString();
      Complex complex8 = complex7.exp();
      String string1 = complex8.ONE.toString();
      Complex complex9 = complex7.log();
      Complex complex10 = complex9.ONE.multiply(complex3);
      Complex complex11 = complex8.cosh();
      Complex complex12 = complex9.cosh();
      Complex complex13 = complex9.NaN.atan();
      Complex complex14 = complex2.ONE.sinh();
      Complex complex15 = complex14.I.acos();
      double double2 = complex4.getReal();
      Complex complex16 = complex5.log();
      Complex complex17 = complex0.pow(complex3);
      Complex complex18 = complex4.log();
      Complex complex19 = complex15.log();
      boolean boolean2 = complex4.isNaN();
      double double3 = complex15.getReal();
      Complex complex20 = complex8.pow(complex14);
      Complex complex21 = complex12.exp();
      Complex complex22 = complex14.sqrt1z();
      Object object0 = complex20.readResolve();
      Complex complex23 = complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(1113.534884, 0.0);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.ZERO.exp();
      double double0 = complex0.abs();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex1.I.asin();
      Complex complex6 = complex2.I.sin();
      Complex complex7 = complex6.NaN.add(complex3);
      Complex complex8 = complex0.pow(complex4);
      Complex complex9 = complex2.INF.atan();
      boolean boolean0 = complex1.equals(complex8);
      int int0 = complex1.ONE.hashCode();
      Complex complex10 = complex8.asin();
      Complex complex11 = complex8.I.divide(complex0);
      Complex complex12 = complex2.pow(complex4);
      String string0 = complex8.toString();
      Complex complex13 = complex11.cos();
      Complex complex14 = complex8.add(complex0);
      Complex complex15 = complex4.ZERO.acos();
      Complex complex16 = complex14.atan();
      Complex complex17 = complex0.add(complex11);
      boolean boolean1 = complex0.equals(complex16);
      boolean boolean2 = complex10.isInfinite();
      Object object0 = complex12.readResolve();
      Complex complex18 = complex12.tan();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.sinh();
      Object object0 = complex2.I.readResolve();
      int int0 = complex0.ONE.hashCode();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.I.add(complex3);
      Complex complex5 = complex0.ONE.atan();
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex6.ONE.multiply(950.9);
      Object object1 = complex0.readResolve();
      Complex complex8 = complex0.I.divide(complex2);
      String string0 = complex8.ZERO.toString();
      Complex complex9 = complex8.ONE.exp();
      List<Complex> list0 = complex5.nthRoot(1);
      Complex complex10 = complex5.tanh();
      Complex complex11 = complex2.tan();
      Complex complex12 = complex10.sqrt1z();
      Complex complex13 = complex0.I.conjugate();
      Complex complex14 = complex0.multiply(1204.0);
      Complex complex15 = complex4.ZERO.conjugate();
      Object object2 = complex14.readResolve();
      List<Complex> list1 = complex3.nthRoot(1);
      Complex complex16 = complex4.sinh();
      double double0 = complex8.getReal();
      Complex complex17 = complex14.tanh();
      String string1 = complex0.NaN.toString();
      Complex complex18 = complex6.sqrt();
      Object object3 = complex10.readResolve();
      Object object4 = complex2.readResolve();
      double double1 = complex1.getArgument();
      double double2 = complex4.getImaginary();
      Complex complex19 = complex2.sinh();
      Object object5 = complex7.readResolve();
      double double3 = complex6.getImaginary();
      Complex complex20 = complex2.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.createComplex(0.0, 0.375);
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex2.INF.exp();
      Complex complex5 = complex0.INF.subtract(complex1);
      Complex complex6 = complex5.ONE.divide(complex2);
      Complex complex7 = complex2.ZERO.conjugate();
      Complex complex8 = complex5.ZERO.cosh();
      double double0 = complex0.getReal();
      Complex complex9 = complex8.acos();
      Complex complex10 = complex5.pow(complex9);
      Complex complex11 = complex1.I.tan();
      boolean boolean0 = complex4.isInfinite();
      double double1 = complex5.abs();
      Complex complex12 = complex10.exp();
      Complex complex13 = complex10.tan();
      Complex complex14 = complex10.exp();
      Complex complex15 = complex14.createComplex(0.375, Double.NaN);
      ComplexField complexField0 = complex14.ONE.getField();
      Complex complex16 = complex1.multiply(0.0);
      Complex complex17 = complex14.subtract(complex15);
      int int0 = complex0.hashCode();
      Complex complex18 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.conjugate();
      double double0 = complex2.I.getArgument();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex2.INF.exp();
      Complex complex5 = complex4.I.atan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.multiply((-1946.7553920909174));
      Complex complex8 = complex7.NaN.asin();
      Complex complex9 = complex2.conjugate();
      String string0 = complex4.toString();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex10 = complex2.negate();
      Complex complex11 = complex4.acos();
      Object object0 = complex0.ONE.readResolve();
      Complex complex12 = complex4.negate();
      Complex complex13 = complex12.ZERO.exp();
      Complex complex14 = complex12.ZERO.pow(complex2);
      Complex complex15 = complex12.add(complex2);
      boolean boolean1 = complex0.isNaN();
      Complex complex16 = complex6.tanh();
      Complex complex17 = complex14.cos();
      Complex complex18 = complex7.pow(complex11);
      Complex complex19 = complex11.add(complex14);
      Complex complex20 = complex10.multiply(complex3);
      double double1 = complex9.abs();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.divide(complex0);
      try { 
        complex2.INF.nthRoot((-244));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -244
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.ZERO.subtract(complex1);
      Complex complex4 = complex0.ZERO.cosh();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.sinh();
      double double0 = complex1.getImaginary();
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.NaN.cosh();
      Complex complex6 = complex3.subtract(complex4);
      Complex complex7 = complex0.ONE.add(complex2);
      Complex complex8 = complex7.I.subtract(complex2);
      Complex complex9 = complex2.asin();
      Complex complex10 = complex8.INF.divide(complex1);
      Complex complex11 = complex9.INF.sqrt();
      Complex complex12 = complex3.cos();
      boolean boolean0 = complex2.equals(object0);
      Complex complex13 = complex1.divide(complex4);
      double double1 = complex7.getArgument();
      int int0 = complex9.hashCode();
      Complex complex14 = complex7.sinh();
      Complex complex15 = complex8.sin();
      Complex complex16 = complex11.negate();
      double double2 = complex8.getImaginary();
      Complex complex17 = complex15.pow(complex0);
  }
}
