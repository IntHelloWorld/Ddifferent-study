/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:46:52 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex1.I.negate();
      double double0 = complex0.getReal();
      double double1 = complex2.getArgument();
      Complex complex7 = complex6.negate();
      int int0 = complex7.ZERO.hashCode();
      Complex complex8 = complex1.divide(complex0);
      Complex complex9 = complex6.cos();
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex8.sinh();
      String string0 = complex6.toString();
      Complex complex12 = complex6.cosh();
      Complex complex13 = new Complex(0.0, 0.0);
      Complex complex14 = complex11.subtract(complex13);
      Complex complex15 = complex1.divide(complex6);
      Complex complex16 = complex9.acos();
      Complex complex17 = complex16.NaN.multiply(complex13);
      Complex complex18 = complex15.sin();
      try { 
        complex18.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-2111.5939312455), (-2111.5939312455));
      Complex complex1 = complex0.createComplex((-2111.5939312455), (-2111.5939312455));
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = complex0.ONE.tanh();
      Complex complex5 = complex0.cosh();
      boolean boolean0 = complex5.isInfinite();
      Complex complex6 = complex5.ONE.subtract(complex0);
      Complex complex7 = complex0.divide(complex5);
      ComplexField complexField0 = complex7.ZERO.getField();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex8.ZERO.pow(complex9);
      Complex complex11 = complex10.INF.log();
      Complex complex12 = complex7.subtract(complex8);
      Complex complex13 = complex5.acos();
      Complex complex14 = complex3.cosh();
      boolean boolean1 = complex3.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-524.065424), (-524.065424));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.ZERO.multiply((-524.065424));
      double double0 = complex3.NaN.abs();
      double double1 = complex0.getArgument();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex2.subtract(complex0);
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex0.divide(complex3);
      Complex complex8 = complex2.ONE.multiply(complex1);
      Complex complex9 = complex8.NaN.acos();
      Complex complex10 = complex4.INF.exp();
      Complex complex11 = complex6.ONE.asin();
      Complex complex12 = complex11.exp();
      String string0 = complex10.NaN.toString();
      ComplexField complexField0 = complex7.getField();
      Complex complex13 = complex4.cos();
      Complex complex14 = complex13.multiply((-1.5707963267948966));
      ComplexField complexField1 = complex14.ZERO.getField();
      Complex complex15 = complex5.INF.cosh();
      ComplexField complexField2 = complex13.getField();
      boolean boolean0 = complex10.isNaN();
      Complex complex16 = complex1.tan();
      Complex complex17 = complex6.log();
      List<Complex> list0 = complex17.INF.nthRoot(3454);
      Complex complex18 = complex5.multiply(complex6);
      boolean boolean1 = complex6.isNaN();
      Complex complex19 = complex6.log();
      Complex complex20 = complex4.cos();
      Complex complex21 = complex5.cosh();
      Complex complex22 = Complex.ONE;
      boolean boolean2 = complex7.equals(complex22);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 3328;
      List<Complex> list0 = complex0.nthRoot(3328);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.ZERO.multiply((double) 3328);
      Complex complex5 = complex4.INF.divide(complex3);
      Complex complex6 = complex2.tan();
      Complex complex7 = complex6.INF.add(complex1);
      Complex complex8 = complex2.I.conjugate();
      Object object0 = complex6.I.readResolve();
      // Undeclared exception!
      complex1.nthRoot(3328);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(1865.24, 1865.24);
      List<Complex> list0 = complex0.NaN.nthRoot(271);
      Complex complex1 = complex0.ZERO.createComplex(0.0, 86.64151654433);
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.INF;
      double double0 = complex2.getReal();
      ComplexField complexField1 = complex1.getField();
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.negate();
      ComplexField complexField0 = complex1.NaN.getField();
      List<Complex> list0 = complex1.nthRoot(232);
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex3.I.conjugate();
      Complex complex6 = Complex.I;
      double double0 = complex6.ZERO.abs();
      Complex complex7 = complex1.multiply(complex6);
      Complex complex8 = complex6.sin();
      double double1 = complex8.getArgument();
      boolean boolean0 = complex8.equals(complex1);
      Complex complex9 = complex2.cosh();
      double double2 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 628.7697909);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.INF.createComplex(628.7697909, 280.0263054934517);
      Complex complex4 = complex1.log();
      Complex complex5 = complex3.NaN.negate();
      Complex complex6 = complex4.NaN.cosh();
      Complex complex7 = complex6.ZERO.add(complex3);
      Complex complex8 = complex7.ZERO.log();
      double double0 = complex0.getArgument();
      double double1 = complex1.getArgument();
      Complex complex9 = complex1.exp();
      Complex complex10 = complex1.NaN.cos();
      Object object0 = complex9.ONE.readResolve();
      Complex complex11 = complex4.createComplex((-1500.68783561181), 1.5707963267948966);
      Complex complex12 = complex9.sinh();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0036, 1979.0);
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.ZERO.cos();
      List<Complex> list0 = complex0.ZERO.nthRoot(2278);
      Complex complex3 = complex0.ONE.subtract(complex1);
      Complex complex4 = complex3.I.multiply((double) 2278);
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex0.subtract(complex1);
      List<Complex> list1 = complex5.NaN.nthRoot(17);
      Complex complex6 = complex0.sqrt1z();
      Object object1 = complex6.ONE.readResolve();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex4.subtract(complex1);
      Complex complex9 = complex1.cos();
      Complex complex10 = complex5.divide(complex1);
      Complex complex11 = complex7.acos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = complex4.ZERO.sinh();
      int int0 = complex1.hashCode();
      Complex complex7 = complex1.INF.cos();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex8.ONE.sin();
      Complex complex10 = complex9.NaN.multiply(complex2);
      Complex complex11 = complex3.exp();
      ComplexField complexField0 = complex11.I.getField();
      Complex complex12 = complex11.I.sinh();
      Complex complex13 = complex11.INF.conjugate();
      Complex complex14 = complex2.acos();
      String string0 = complex14.I.toString();
      Complex complex15 = complex5.NaN.sqrt();
      String string1 = complex14.toString();
      boolean boolean0 = complex14.isInfinite();
      double double0 = complex0.abs();
      Complex complex16 = complex11.NaN.sin();
      boolean boolean1 = complex12.isNaN();
      boolean boolean2 = complex5.equals(complex2);
      Complex complex17 = complex11.multiply(complex7);
      int int1 = complex17.ONE.hashCode();
      Complex complex18 = complex12.divide(complex3);
      Complex complex19 = complex12.multiply(Double.NaN);
      Object object0 = complex18.NaN.readResolve();
      Complex complex20 = complex18.I.sqrt();
      ComplexField complexField1 = complex2.getField();
      Complex complex21 = complex14.conjugate();
      Complex complex22 = complex21.conjugate();
      Complex complex23 = complex0.exp();
      double double1 = complex4.getReal();
      String string2 = complex3.toString();
      double double2 = complex16.getReal();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-4844.02228), Double.NaN);
      Complex complex1 = complex0.ZERO.multiply(Double.NaN);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex3.cos();
      double double0 = complex3.NaN.abs();
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex0.log();
      Complex complex8 = complex2.INF.createComplex((-0.3058015757857271), Double.NaN);
      Complex complex9 = complex0.negate();
      double double1 = complex9.INF.abs();
      Complex complex10 = complex7.I.negate();
      String string0 = complex9.INF.toString();
      Complex complex11 = complex6.log();
      int int0 = complex11.ONE.hashCode();
      Complex complex12 = complex5.multiply(Double.NaN);
      Object object0 = new Object();
      boolean boolean0 = complex7.equals(object0);
      Complex complex13 = complex8.pow(complex12);
      List<Complex> list0 = complex8.nthRoot(17);
      double double2 = complex13.abs();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(618.6746, 618.6746);
      Complex complex1 = complex0.ONE.createComplex(618.6746, 618.6746);
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.NaN.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex0.acos();
      String string0 = complex5.ONE.toString();
      Complex complex6 = complex1.I.tanh();
      Complex complex7 = complex4.pow(complex5);
      Complex complex8 = complex7.INF.multiply(complex0);
      double double1 = complex5.INF.abs();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex4.subtract(complex9);
      int int0 = complex9.I.hashCode();
      String string1 = complex0.toString();
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex11.negate();
      Complex complex13 = complex11.add(complex6);
      Complex complex14 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-1404.1), 7049.7034);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex1.ZERO.atan();
      double double0 = complex0.NaN.getArgument();
      Complex complex4 = complex1.INF.multiply(complex0);
      Complex complex5 = complex0.ONE.add(complex1);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.log();
      Complex complex9 = complex7.NaN.tan();
      Complex complex10 = complex9.acos();
      Complex complex11 = complex0.sin();
      Complex complex12 = complex6.I.tan();
      int int0 = complex11.NaN.hashCode();
      Complex complex13 = complex3.atan();
      Complex complex14 = complex6.multiply(7049.7034);
      double double1 = complex3.getImaginary();
      Complex complex15 = complex2.acos();
      Complex complex16 = complex7.exp();
      Complex complex17 = complex5.asin();
      Complex complex18 = complex13.tan();
      Complex complex19 = complex18.NaN.sin();
      String string0 = complex11.toString();
      Complex complex20 = complex11.cosh();
      Complex complex21 = complex15.acos();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-654.0376342431623), (-1.0));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.add(complex0);
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex0.ONE.log();
      Complex complex5 = complex0.I.createComplex(316.8677, (-3087.8));
      int int1 = complex5.ZERO.hashCode();
      Complex complex6 = complex0.sin();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.tanh();
      Object object1 = complex1.INF.readResolve();
      int int0 = complex0.I.hashCode();
      // Undeclared exception!
      try { 
        complex0.ONE.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-653.141202421), (-1.0));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.add(complex0);
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex0.ONE.log();
      Complex complex5 = complex0.I.createComplex(316.8677, (-3087.8));
      int int1 = complex5.ZERO.hashCode();
      Complex complex6 = complex0.sin();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.createComplex(174.87794478, (-418.15722));
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex0.negate();
      boolean boolean0 = complex1.isNaN();
      try { 
        complex3.nthRoot((-1389));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,389
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(722.745459222, 722.745459222);
      Complex complex1 = complex0.ONE.multiply(722.745459222);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.asin();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex4 = complex0.cos();
      double double0 = complex4.ZERO.abs();
      Complex complex5 = complex3.ONE.add(complex1);
      Complex complex6 = complex0.tanh();
      ComplexField complexField1 = complex3.getField();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex2.asin();
      Complex complex9 = complex6.sqrt();
      ComplexField complexField2 = complex2.getField();
      Complex complex10 = complex8.divide(complex9);
      Complex complex11 = complex1.cos();
      String string0 = complex8.toString();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex2.ONE.multiply(615.24573598);
      Complex complex4 = complex0.I.sinh();
      int int0 = complex2.I.hashCode();
      Complex complex5 = complex0.NaN.sin();
      Complex complex6 = complex5.INF.exp();
      Complex complex7 = complex1.INF.sin();
      Complex complex8 = complex0.ZERO.conjugate();
      int int1 = complex7.ONE.hashCode();
      Complex complex9 = complex8.cos();
      Complex complex10 = complex0.add(complex1);
      Complex complex11 = complex4.atan();
      Complex complex12 = complex4.pow(complex11);
      Object object0 = complex12.ZERO.readResolve();
      String string0 = complex7.toString();
      Complex complex13 = complex4.pow(complex2);
      Complex complex14 = complex0.acos();
      Complex complex15 = complex14.NaN.add(complex7);
      int int2 = complex6.hashCode();
      Complex complex16 = complex14.exp();
      double double0 = complex16.getArgument();
      Complex complex17 = complex16.acos();
      Complex complex18 = complex3.atan();
      Complex complex19 = complex9.multiply(0.0);
      Complex complex20 = complex5.createComplex(0.0, (-842.763));
      Object object1 = complex20.INF.readResolve();
      Complex complex21 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex3.INF.tanh();
      Complex complex6 = complex3.pow(complex1);
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.ZERO.exp();
      Complex complex9 = complex7.multiply(complex0);
      double double0 = complex8.getReal();
      Complex complex10 = complex0.negate();
      Complex complex11 = complex3.cosh();
      Complex complex12 = complex6.sqrt1z();
      Complex complex13 = complex2.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.sqrt1z();
      String string0 = complex1.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.I.divide(complex1);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex3.sqrt();
      double double1 = complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex0.ONE.multiply((-0.09088450866185192));
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.cosh();
      double double0 = complex7.abs();
      Complex complex9 = complex1.subtract(complex6);
      double double1 = complex6.abs();
      Complex complex10 = complex3.acos();
      Complex complex11 = complex7.cos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(1356.32614768, 1356.32614768);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.NaN.createComplex((-271.338806216694), 1356.32614768);
      Complex complex3 = complex1.ZERO.cosh();
      Complex complex4 = complex0.I.sqrt1z();
      Complex complex5 = complex3.NaN.cosh();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.divide(complex1);
      Complex complex8 = complex6.NaN.asin();
      Complex complex9 = complex8.INF.multiply(10.0);
      Complex complex10 = complex6.NaN.tan();
      int int0 = complex8.I.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex11 = complex6.tan();
      Complex complex12 = complex5.cos();
      Complex complex13 = complex12.log();
      int int1 = complex11.hashCode();
      Complex complex14 = complex7.sinh();
      int int2 = complex8.hashCode();
      Object object1 = complex11.readResolve();
      Complex complex15 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt1z();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex2 = complex0.multiply(2753.7706129);
      Complex complex3 = complex1.I.exp();
      Complex complex4 = complex1.atan();
      boolean boolean0 = complex2.isNaN();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.ZERO.atan();
      double double0 = complex1.I.getArgument();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex7.asin();
      double double1 = complex0.getArgument();
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex7.negate();
      Complex complex11 = complex0.atan();
      Complex complex12 = complex8.asin();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex5.pow(complex13);
      String string0 = complex12.toString();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-1586.29404962), (-2048.2426));
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex0.I.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex2.atan();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex6 = complex1.subtract(complex0);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.ZERO.add(complex0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = complex0.tan();
      String string0 = complex7.I.toString();
      String string1 = complex0.NaN.toString();
      Complex complex8 = complex0.multiply(complex5);
      Complex complex9 = complex8.conjugate();
      double double0 = complex0.getImaginary();
      Complex complex10 = complex7.tanh();
      ComplexField complexField0 = complex10.ONE.getField();
      Complex complex11 = complex8.sinh();
      try { 
        complex7.nthRoot((-3134));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,134
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-3214.06481), (-1097.186432891214));
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.cos();
      double double0 = complex0.abs();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ZERO.pow(complex2);
      Complex complex5 = complex0.atan();
      boolean boolean0 = complex4.isNaN();
      Complex complex6 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ZERO.createComplex(0.0, 0.0);
      Object object0 = complex0.readResolve();
      Complex complex4 = complex1.negate();
      boolean boolean0 = complex4.equals(complex2);
      Complex complex5 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sinh();
      double double0 = complex0.ZERO.abs();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.exp();
      Object object0 = complex2.readResolve();
      Complex complex4 = complex0.asin();
      double double1 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-67.2413238619293), (-3133.0657273398356));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex3.NaN.multiply(complex2);
      Complex complex5 = complex4.add(complex1);
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex4.ZERO.cos();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex6.ZERO.subtract(complex8);
      Complex complex10 = complex0.ONE.exp();
      Complex complex11 = complex0.NaN.cos();
      Complex complex12 = complex10.ZERO.subtract(complex0);
      Complex complex13 = null;
      ComplexField complexField0 = complex12.getField();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(39);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex0.multiply(complex1);
      double double0 = complex0.abs();
      Complex complex5 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.NaN.negate();
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex1.negate();
      double double0 = complex3.getImaginary();
      Complex complex5 = complex1.conjugate();
      int int0 = complex5.ZERO.hashCode();
      double double1 = complex5.ONE.getArgument();
      Complex complex6 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.I.atan();
      List<Complex> list0 = complex2.ZERO.nthRoot(238);
      double double1 = complex1.INF.getArgument();
      Complex complex3 = complex2.I.createComplex(Double.NaN, Double.NaN);
      Complex complex4 = complex3.negate();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex2.ZERO.atan();
      boolean boolean1 = complex0.isInfinite();
      Complex complex7 = complex2.multiply(Double.NaN);
      Complex complex8 = complex5.multiply(complex0);
      double double2 = complex1.abs();
      double double3 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.conjugate();
      double double0 = complex0.abs();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.exp();
      List<Complex> list0 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.createComplex((-1.7168146928204135), (-1.7168146928204135));
      Complex complex3 = complex1.INF.exp();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex4 = complex2.I.tan();
      double double0 = complex2.ONE.abs();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex1.isNaN();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sinh();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(258.14174508, 9.0);
      Complex complex1 = complex0.exp();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex0.tan();
      int int0 = complex2.hashCode();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex4.I.createComplex(258.14174508, 9.0);
      Object object0 = complex5.ONE.readResolve();
      Complex complex6 = complex2.divide(complex4);
      try { 
        complex6.nthRoot((-1498));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,498
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(5338.4399869, 1597.8935);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.atan();
      ComplexField complexField0 = complex1.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.acos();
      Object object0 = complex1.readResolve();
      boolean boolean1 = complex1.equals(object0);
      Complex complex5 = complex1.multiply(889.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.acos();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex5 = complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.NaN.createComplex(1938.7651938476947, 0.19999999999923582);
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex2.I.add(complex0);
      Object object0 = complex1.readResolve();
      String string0 = complex3.toString();
      Complex complex4 = complex3.add(complex0);
      int int0 = complex4.ZERO.hashCode();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex6.ZERO.exp();
      ComplexField complexField0 = complex1.getField();
      Complex complex9 = complex4.tanh();
      Complex complex10 = complex9.multiply(Double.POSITIVE_INFINITY);
      double double0 = complex10.getArgument();
      Complex complex11 = complex8.acos();
      Complex complex12 = complex11.sqrt1z();
      Complex complex13 = complex7.log();
      Complex complex14 = complex13.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.pow(complex1);
      ComplexField complexField0 = complex3.ONE.getField();
      ComplexField complexField1 = complex1.NaN.getField();
      Complex complex4 = complex3.I.multiply(1.4456468917292502E-16);
      Complex complex5 = complex3.ZERO.multiply(complex1);
      Complex complex6 = complex5.NaN.exp();
      Complex complex7 = complex1.subtract(complex3);
      Complex complex8 = complex5.add(complex0);
      int int0 = complex8.NaN.hashCode();
      Complex complex9 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex2.tan();
      double double0 = complex4.getArgument();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex4.tanh();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-2489.77386), (-40.53692393));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.ONE.multiply((-0.1666666567325592));
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex2.getImaginary();
      Complex complex3 = complex2.multiply(620.549261131);
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex2.sinh();
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.ONE.divide(complex2);
      Complex complex4 = complex1.ONE.sqrt1z();
      Complex complex5 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(3849.59760225509, 3849.59760225509);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.divide(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      int int0 = complex0.hashCode();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      double double0 = complex0.abs();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.createComplex((-1480.53616293), (-1480.53616293));
      Complex complex2 = complex1.cos();
      double double0 = complex2.getReal();
      double double1 = complex2.abs();
      Complex complex3 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.I.log();
      try { 
        complex3.INF.nthRoot((-5236));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,236
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sinh();
      double double0 = complex0.getReal();
      Complex complex2 = complex1.divide(complex0);
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(2787.2092387517, 2787.2092387517);
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.I.add(complex0);
      Complex complex5 = complex2.ZERO.tanh();
      Complex complex6 = complex0.NaN.createComplex(Double.NaN, Double.NaN);
      Complex complex7 = complex2.acos();
      double double0 = complex1.getImaginary();
      double double1 = complex0.getArgument();
      Complex complex8 = complex3.NaN.multiply(1.0);
      Complex complex9 = complex5.multiply((-1070.373623823047));
      Complex complex10 = complex9.I.multiply(complex3);
      Object object0 = complex3.readResolve();
      Complex complex11 = complex1.multiply(complex5);
      double double2 = complex11.I.abs();
      Complex complex12 = complex11.NaN.tanh();
      ComplexField complexField0 = complex0.getField();
      Complex complex13 = complex7.negate();
      Complex complex14 = complex13.ZERO.atan();
      Complex complex15 = complex9.cosh();
      int int0 = complex13.hashCode();
      Complex complex16 = complex0.subtract(complex8);
      Complex complex17 = complex12.createComplex(0.7853981633974483, 1053.346998687833);
      Complex complex18 = complex13.cosh();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.multiply(1346.045358);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.I.pow(complex2);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex4.ZERO.exp();
      double double0 = complex0.ONE.getArgument();
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex7.INF.tanh();
      Complex complex9 = complex8.I.createComplex(1346.045358, 0.0);
      Complex complex10 = complex3.negate();
      int int0 = complex4.hashCode();
      Complex complex11 = complex10.tan();
      Complex complex12 = complex0.tan();
      Complex complex13 = complex5.asin();
      String string0 = complex13.ONE.toString();
      Complex complex14 = complex11.cos();
      Complex complex15 = complex10.add(complex9);
      Complex complex16 = complex10.I.tan();
      String string1 = complex12.toString();
      Complex complex17 = complex13.sin();
      Complex complex18 = complex3.atan();
      boolean boolean0 = complex4.equals(complex17);
      Complex complex19 = complex11.sqrt();
      Complex complex20 = complex19.ONE.acos();
      double double1 = complex20.INF.abs();
      Complex complex21 = complex14.cosh();
      boolean boolean1 = complex13.isInfinite();
      Complex complex22 = Complex.NaN;
      Complex complex23 = complex21.divide(complex22);
      double double2 = complex3.getReal();
      Complex complex24 = complex2.conjugate();
      Complex complex25 = complex11.sin();
      boolean boolean2 = complex4.equals(complex23);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(917.519, 917.519);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      double double0 = complex2.I.abs();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex2.I.log();
      Complex complex5 = complex1.acos();
      double double1 = complex5.I.getArgument();
      Complex complex6 = complex5.multiply(917.519);
      Complex complex7 = complex6.ZERO.add(complex5);
      Complex complex8 = complex7.INF.negate();
      Complex complex9 = complex6.I.acos();
      String string0 = complex2.I.toString();
      Complex complex10 = complex1.NaN.sqrt1z();
      double double2 = complex2.getReal();
      Complex complex11 = complex0.I.tan();
      Complex complex12 = complex6.add(complex0);
      int int0 = complex12.ONE.hashCode();
      int int1 = complex5.hashCode();
      Object object0 = complex1.readResolve();
      Complex complex13 = complex2.asin();
      Complex complex14 = complex13.ONE.subtract(complex11);
      Complex complex15 = complex12.tan();
      Complex complex16 = Complex.ONE;
      Complex complex17 = complex0.INF.negate();
      Complex complex18 = complex0.multiply(complex16);
      Complex complex19 = complex18.ONE.cosh();
      List<Complex> list0 = complex6.nthRoot(1358);
      Complex complex20 = complex0.divide(complex15);
      Complex complex21 = complex0.exp();
      Complex complex22 = complex18.I.sin();
      boolean boolean0 = complex18.equals((Object) null);
      Object object1 = new Object();
      boolean boolean1 = complex22.equals(object1);
      Complex complex23 = complex17.sin();
      ComplexField complexField0 = complex9.getField();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.ZERO.tan();
      Complex complex4 = complex3.ZERO.add(complex1);
      Complex complex5 = complex1.INF.cos();
      Complex complex6 = complex5.atan();
      List<Complex> list0 = complex0.I.nthRoot(1);
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex7.asin();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex8.cos();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex0.ZERO.acos();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex5.multiply(complex3);
      Complex complex7 = complex6.ONE.multiply(0.0);
      Complex complex8 = complex0.divide(complex2);
      ComplexField complexField0 = complex3.ONE.getField();
      double double0 = complex8.NaN.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex9.pow(complex4);
      Complex complex11 = complex4.exp();
      Complex complex12 = complex10.add(complex9);
      Complex complex13 = complex0.createComplex(0.0, 1.2246467991473532E-16);
      Complex complex14 = complex8.ZERO.tanh();
      Complex complex15 = complex12.ZERO.log();
      Complex complex16 = complex0.tanh();
      Complex complex17 = complex16.I.createComplex(3899.7, 3899.7);
      Complex complex18 = complex17.ZERO.sinh();
      Complex complex19 = complex16.ONE.tan();
      Complex complex20 = complex3.sin();
      Complex complex21 = complex20.NaN.log();
      Complex complex22 = complex9.tan();
      boolean boolean1 = complex4.isInfinite();
      Complex complex23 = complex22.log();
      double double1 = complex5.getReal();
      Complex complex24 = complex6.multiply(0.0);
      Complex complex25 = complex10.tanh();
      boolean boolean2 = complex8.isNaN();
      Complex complex26 = complex24.exp();
      Complex complex27 = complex14.sqrt();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.pow(complex1);
      String string0 = complex2.I.toString();
      Complex complex3 = complex0.ZERO.sqrt1z();
      String string1 = complex3.toString();
      String string2 = complex0.INF.toString();
      try { 
        complex0.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.I;
      double double0 = complex0.abs();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ZERO.pow(complex2);
      Complex complex5 = complex0.atan();
      boolean boolean0 = complex4.isNaN();
      Complex complex6 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.INF.pow(complex1);
      Complex complex4 = complex0.conjugate();
      double double0 = complex3.getArgument();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex2.NaN.asin();
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex7.I.atan();
      int int0 = complex2.hashCode();
      Complex complex9 = complex2.I.tanh();
      Complex complex10 = complex2.acos();
      Object object0 = new Object();
      boolean boolean0 = complex4.equals(object0);
      Complex complex11 = complex0.tan();
      Complex complex12 = complex11.tan();
      Complex complex13 = complex12.cos();
      Complex complex14 = complex10.tan();
      double double1 = complex10.getReal();
      Complex complex15 = complex12.acos();
      Complex complex16 = complex13.pow(complex14);
      Complex complex17 = complex1.acos();
      Complex complex18 = complex17.sinh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(352.567685082, 352.567685082);
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex1.NaN.sinh();
      Complex complex4 = complex0.exp();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.ONE.exp();
      double double0 = complex2.I.getArgument();
      Complex complex3 = complex0.ONE.conjugate();
      double double1 = complex0.getArgument();
      Complex complex4 = complex0.createComplex((-579.29), (-579.29));
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex4.sinh();
      // Undeclared exception!
      try { 
        complex1.INF.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }
}
