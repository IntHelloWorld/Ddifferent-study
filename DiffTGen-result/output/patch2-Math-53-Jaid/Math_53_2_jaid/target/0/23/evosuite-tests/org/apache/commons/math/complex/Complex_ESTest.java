/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:53:43 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.INF.add(complex2);
      Complex complex4 = complex2.tanh();
      boolean boolean0 = complex4.equals(complex0);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.I.cosh();
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex5.exp();
      Complex complex10 = complex5.I.pow(complex4);
      ComplexField complexField0 = complex2.I.getField();
      Complex complex11 = complex0.I.multiply(476.7);
      Complex complex12 = complex4.ONE.sin();
      Complex complex13 = complex10.ONE.createComplex(540.2631236935164, 540.2631236935164);
      Object object0 = complex3.ONE.readResolve();
      Complex complex14 = complex10.NaN.conjugate();
      String string0 = complex4.ZERO.toString();
      Object object1 = new Object();
      boolean boolean1 = complex4.equals(object1);
      boolean boolean2 = complex2.isInfinite();
      Complex complex15 = complex3.multiply(540.2631236935164);
      Complex complex16 = complex6.exp();
      double double0 = complex6.getArgument();
      Complex complex17 = complex10.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1.4142135623730951, 1.4142135623730951);
      List<Complex> list0 = complex0.ZERO.nthRoot(76);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.multiply(1.4142135623730951);
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex2.NaN.pow(complex0);
      int int0 = complex3.NaN.hashCode();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.add(complex0);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.ONE.pow(complex0);
      ComplexField complexField0 = complex5.getField();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex2.cosh();
      Object object0 = complex9.NaN.readResolve();
      Complex complex10 = complex8.cosh();
      double double1 = complex10.INF.abs();
      Complex complex11 = complex10.multiply(complex5);
      Complex complex12 = complex10.sqrt1z();
      Complex complex13 = complex1.exp();
      Complex complex14 = complex11.sqrt1z();
      ComplexField complexField1 = complex7.getField();
      Complex complex15 = complex6.tanh();
      Complex complex16 = complex10.sinh();
      Complex complex17 = complex12.multiply(complex16);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex1.multiply(complex3);
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      ComplexField complexField0 = complex1.getField();
      String string0 = complex0.toString();
      Complex complex2 = complex0.ONE.sqrt();
      String string1 = complex0.toString();
      double double0 = complex0.abs();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex0.multiply((-2295.427056));
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex2.createComplex(Double.POSITIVE_INFINITY, (-2295.427056));
      Complex complex8 = complex2.sin();
      Complex complex9 = complex5.ONE.sqrt1z();
      Object object0 = complex9.ONE.readResolve();
      Object object1 = complex7.I.readResolve();
      Complex complex10 = complex7.createComplex(-0.0, Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.NaN.add(complex9);
      Complex complex12 = complex7.log();
      Complex complex13 = complex3.INF.acos();
      Complex complex14 = complex12.divide(complex1);
      Complex complex15 = complex10.add(complex6);
      Complex complex16 = complex6.exp();
      Complex complex17 = complex2.cosh();
      Complex complex18 = complex17.I.multiply(-0.0);
      Complex complex19 = complex18.add(complex3);
      Complex complex20 = complex1.sin();
      Complex complex21 = complex20.INF.atan();
      Complex complex22 = complex8.cosh();
      Complex complex23 = complex3.atan();
      Complex complex24 = complex23.log();
      Complex complex25 = complex5.exp();
      try { 
        complex0.nthRoot((-63));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -63
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(682.90142, 682.90142);
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex5.tanh();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex4.ONE.sqrt1z();
      double double0 = complex1.ZERO.getArgument();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex0.INF.acos();
      Complex complex10 = complex4.asin();
      Complex complex11 = complex10.INF.conjugate();
      Complex complex12 = complex11.tanh();
      Complex complex13 = complex12.negate();
      Complex complex14 = complex5.add(complex10);
      Complex complex15 = complex14.sin();
      Complex complex16 = complex10.tan();
      Complex complex17 = complex15.I.tanh();
      String string0 = complex16.I.toString();
      Complex complex18 = complex2.add(complex1);
      Complex complex19 = complex8.sin();
      Complex complex20 = complex0.tan();
      Complex complex21 = complex2.sqrt1z();
      Complex complex22 = complex21.asin();
      Complex complex23 = complex15.createComplex((-1277.58), 682.90142);
      Complex complex24 = complex20.multiply(complex9);
      Complex complex25 = complex14.cos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(88.876, 88.876);
      Complex complex1 = new Complex((-1444.04227), 88.876);
      Complex complex2 = complex0.NaN.pow(complex1);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex1.createComplex(8.4721531, 0.036);
      Complex complex4 = complex2.INF.sqrt();
      Complex complex5 = complex1.ONE.cosh();
      Complex complex6 = complex5.ZERO.createComplex((-1344.0), 8.4721531);
      Complex complex7 = new Complex(0.036, 0.036);
      Complex complex8 = complex4.ONE.subtract(complex7);
      Complex complex9 = complex8.INF.sqrt1z();
      Complex complex10 = complex3.INF.cos();
      double double1 = complex3.I.getArgument();
      Complex complex11 = complex1.cosh();
      String string0 = complex3.toString();
      Complex complex12 = complex1.sqrt();
      Complex complex13 = complex1.log();
      Complex complex14 = complex0.INF.pow(complex3);
      Complex complex15 = complex0.multiply(0.0);
      double double2 = complex0.abs();
      Complex complex16 = Complex.INF;
      Complex complex17 = complex11.multiply(complex16);
      Complex complex18 = complex17.NaN.createComplex(0.0, (-445.96211));
      try { 
        complex17.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex1.INF.multiply(Double.NaN);
      Complex complex4 = complex0.sin();
      double double0 = complex0.ZERO.getArgument();
      Complex complex5 = complex4.INF.exp();
      Complex complex6 = complex1.divide(complex4);
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.INF.acos();
      Complex complex9 = complex8.tan();
      Complex complex10 = complex9.add(complex8);
      Complex complex11 = complex0.subtract(complex3);
      boolean boolean1 = complex3.isNaN();
      Complex complex12 = new Complex(0.0, Double.NaN);
      Complex complex13 = complex4.multiply(complex12);
      Complex complex14 = complex11.NaN.conjugate();
      Complex complex15 = complex0.add(complex1);
      String string0 = complex11.toString();
      String string1 = complex4.toString();
      Complex complex16 = complex5.sinh();
      Complex complex17 = complex3.I.pow(complex7);
      Complex complex18 = complex16.sinh();
      boolean boolean2 = complex15.isNaN();
      Complex complex19 = complex16.conjugate();
      Complex complex20 = complex19.ONE.subtract(complex15);
      boolean boolean3 = complex14.isInfinite();
      Complex complex21 = complex6.cos();
      Complex complex22 = complex5.negate();
      Complex complex23 = complex8.divide(complex5);
      boolean boolean4 = complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(2925.5644, 2925.5644);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.createComplex(2925.5644, 2925.5644);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.I.negate();
      double double0 = complex3.INF.getArgument();
      double double1 = complex0.INF.getArgument();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex4.I.sqrt();
      Complex complex8 = complex7.INF.multiply(complex4);
      Complex complex9 = complex8.INF.sqrt();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex10.sinh();
      try { 
        complex11.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.ZERO.exp();
      double double1 = complex0.ONE.getArgument();
      Complex complex2 = complex0.ZERO.sin();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.INF.log();
      Complex complex6 = complex3.ONE.cosh();
      Complex complex7 = complex4.I.exp();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex8.multiply(193.5800437);
      Complex complex10 = complex9.asin();
      Complex complex11 = complex3.I.tanh();
      Complex complex12 = complex8.ZERO.multiply(complex0);
      Complex complex13 = complex4.I.sqrt();
      double double2 = complex3.getReal();
      double double3 = complex8.getImaginary();
      Complex complex14 = complex7.add(complex12);
      Complex complex15 = complex12.multiply(Double.NaN);
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex2.ONE.sqrt();
      double double0 = complex3.NaN.abs();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex5.I.pow(complex4);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex6.subtract(complex7);
      Complex complex9 = complex5.ONE.asin();
      Complex complex10 = complex1.I.pow(complex2);
      Complex complex11 = complex3.NaN.atan();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex12 = complex0.I.multiply(complex1);
      Complex complex13 = complex12.NaN.cos();
      List<Complex> list0 = complex0.nthRoot(1239);
      Complex complex14 = complex0.conjugate();
      Complex complex15 = complex0.tan();
      Complex complex16 = complex1.ONE.acos();
      Complex complex17 = complex14.sqrt1z();
      Complex complex18 = complex17.INF.log();
      String string0 = complex0.toString();
      Object object0 = complex0.readResolve();
      Object object1 = complex1.readResolve();
      double double1 = complex4.getImaginary();
      boolean boolean0 = complex18.isInfinite();
      Complex complex19 = complex4.conjugate();
      double double2 = complex19.ONE.abs();
      Object object2 = complex14.readResolve();
      List<Complex> list1 = complex18.nthRoot(1239);
      Complex complex20 = Complex.NaN;
      Complex complex21 = complex9.multiply(complex20);
      Complex complex22 = complex12.cos();
      Object object3 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.I.tanh();
      int int0 = complex1.I.hashCode();
      Complex complex4 = complex2.I.multiply(complex1);
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex0.ONE.atan();
      Complex complex7 = complex6.I.negate();
      Complex complex8 = complex7.INF.multiply((-4170.6654066185));
      Object object0 = complex6.INF.readResolve();
      double double0 = 698.49847826;
      double double1 = 500.88666;
      Complex complex9 = complex0.createComplex(698.49847826, 500.88666);
      Complex complex10 = complex9.ZERO.pow(complex6);
      Complex complex11 = null;
      try { 
        complex9.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.NaN.createComplex(0.0, 0.0);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex0.tanh();
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.ZERO.multiply(complex5);
      Object object0 = complex7.ZERO.readResolve();
      double double0 = complex2.INF.getArgument();
      Complex complex9 = complex3.subtract(complex7);
      int int0 = complex5.hashCode();
      Complex complex10 = complex3.createComplex(0.0, (-1.0));
      Object object1 = complex10.NaN.readResolve();
      Complex complex11 = complex4.atan();
      Complex complex12 = complex11.cos();
      Complex complex13 = Complex.INF;
      Complex complex14 = complex12.INF.subtract(complex13);
      boolean boolean0 = complex3.equals(complex11);
      Complex complex15 = complex6.tanh();
      Complex complex16 = complex15.cos();
      Complex complex17 = complex6.asin();
      Complex complex18 = complex9.sin();
      Complex complex19 = complex1.ONE.add(complex15);
      Complex complex20 = complex18.ZERO.sinh();
      Complex complex21 = complex1.pow(complex15);
      Complex complex22 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.log();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.INF.divide(complex2);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.I.subtract(complex2);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex7.ONE.multiply(complex3);
      Complex complex9 = complex6.cosh();
      double double0 = complex9.NaN.abs();
      Object object0 = complex4.readResolve();
      Complex complex10 = Complex.I;
      Complex complex11 = complex2.divide(complex10);
      boolean boolean0 = complex6.isNaN();
      Complex complex12 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ZERO.log();
      double double0 = complex0.I.getArgument();
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex1.I.divide(complex4);
      double double1 = complex5.INF.getArgument();
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex6.NaN.divide(complex2);
      Complex complex8 = complex4.log();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex1.add(complex9);
      Complex complex11 = complex10.acos();
      boolean boolean0 = complex0.isNaN();
      Complex complex12 = complex0.I.tan();
      Complex complex13 = complex12.cos();
      Complex complex14 = Complex.ONE;
      Complex complex15 = complex13.NaN.pow(complex14);
      Complex complex16 = complex15.ZERO.sqrt();
      Complex complex17 = complex8.createComplex(1.5707963267948966, (-1143.27789686405));
      List<Complex> list0 = complex1.nthRoot(37);
      double double2 = complex0.getReal();
      double double3 = complex12.getReal();
      Object object0 = complex8.readResolve();
      Complex complex18 = complex1.atan();
      Complex complex19 = complex8.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 242.0);
      double double0 = complex0.I.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.sqrt1z();
      double double1 = complex2.ONE.getArgument();
      double double2 = complex2.ONE.getArgument();
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Object object0 = complex0.readResolve();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex3.createComplex(4.0, 4.0);
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex1.sinh();
      String string0 = complex1.toString();
      Object object1 = complex1.readResolve();
      Complex complex8 = complex7.add(complex4);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-254.8268), (-254.8268));
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.NaN.sin();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex1.pow(complex4);
      Complex complex7 = complex6.ONE.conjugate();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex0.sin();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex0.I.add(complex10);
      Complex complex12 = complex4.sin();
      Object object0 = complex12.I.readResolve();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(3200.938, 3200.938);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex6.ZERO.multiply(complex5);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.INF.subtract(complex5);
      Complex complex10 = complex3.sin();
      Complex complex11 = complex8.NaN.atan();
      Complex complex12 = complex5.NaN.log();
      Complex complex13 = complex3.NaN.multiply(3200.938);
      Complex complex14 = complex4.sqrt();
      Complex complex15 = complex5.multiply(3200.938);
      Complex complex16 = Complex.I;
      Complex complex17 = complex3.divide(complex16);
      boolean boolean0 = complex2.isInfinite();
      Complex complex18 = complex15.pow(complex9);
      try { 
        complex12.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-1082.78586), (-1082.78586));
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex2.ZERO.tan();
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex4.atan();
      Complex complex7 = complex6.ONE.exp();
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex2.multiply(complex8);
      double double0 = complex4.abs();
      boolean boolean0 = complex1.equals("v]FO\"(BWb");
      Complex complex10 = complex6.divide(complex7);
      Complex complex11 = complex2.pow(complex4);
      Complex complex12 = complex11.I.tanh();
      double double1 = complex12.I.abs();
      Complex complex13 = complex2.negate();
      Complex complex14 = complex6.multiply(0.0);
      Complex complex15 = complex5.multiply(0.0);
      Complex complex16 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.ZERO.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.multiply(0.0);
      Complex complex3 = complex0.multiply(0.167);
      boolean boolean1 = complex0.equals(complex3);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ONE.multiply((-727.53446212));
      Complex complex6 = complex5.ZERO.sqrt();
      Complex complex7 = complex5.ONE.multiply((-1549.19));
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex9.ZERO.acos();
      String string0 = complex5.toString();
      Complex complex11 = complex1.createComplex(0.0, (-1549.19));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 107.802393791);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.I.tan();
      boolean boolean0 = complex0.isInfinite();
      String string0 = complex0.ZERO.toString();
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.ZERO;
      String string0 = complex1.ONE.toString();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.I.divide(complex0);
      Complex complex5 = complex4.ONE.subtract(complex0);
      Complex complex6 = complex0.ZERO.cos();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex3.add(complex7);
      Complex complex9 = complex8.I.sin();
      Complex complex10 = complex1.ZERO.cosh();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex7.subtract(complex12);
      Complex complex14 = complex1.negate();
      Complex complex15 = complex7.cosh();
      Complex complex16 = complex15.INF.cos();
      boolean boolean0 = complex15.isNaN();
      Complex complex17 = complex13.ONE.subtract(complex0);
      Complex complex18 = complex14.NaN.sqrt1z();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex19 = complex14.multiply(complex7);
      Complex complex20 = complex2.createComplex(0.0, 0.0);
      Complex complex21 = complex6.cosh();
      Complex complex22 = complex13.subtract(complex6);
      Complex complex23 = complex0.conjugate();
      Complex complex24 = complex14.sinh();
      double double0 = complex24.abs();
      Complex complex25 = complex20.add(complex16);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex0.ZERO.negate();
      List<Complex> list0 = complex5.ZERO.nthRoot(188);
      double double0 = complex3.getImaginary();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.subtract(complex6);
      Complex complex8 = complex7.NaN.atan();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex2.asin();
      Complex complex11 = complex8.tanh();
      Complex complex12 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.INF.getField();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex1.I.multiply(complex0);
      String string0 = complex3.ONE.toString();
      Complex complex4 = complex1.conjugate();
      double double0 = complex1.getReal();
      Complex complex5 = complex4.createComplex(Double.NaN, Double.NaN);
      Complex complex6 = complex5.ONE.cos();
      int int0 = complex5.hashCode();
      Complex complex7 = complex6.divide(complex5);
      Complex complex8 = complex5.NaN.log();
      Object object1 = complex5.readResolve();
      Complex complex9 = complex5.log();
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex0.pow(complex4);
      Complex complex12 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-404.492), (-404.492));
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.ONE.subtract(complex0);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.I.log();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex3.multiply((-0.49999999999999994));
      Complex complex6 = complex5.NaN.sinh();
      Complex complex7 = complex1.ONE.acos();
      int int0 = complex0.hashCode();
      Complex complex8 = complex0.log();
      Complex complex9 = complex2.asin();
      double double0 = complex9.ZERO.getArgument();
      Complex complex10 = complex1.createComplex(0.008333333333333333, (-0.49999999999999994));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.INF.pow(complex0);
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex0.ZERO.conjugate();
      Complex complex7 = complex5.ZERO.cos();
      List<Complex> list0 = complex1.I.nthRoot(37);
      Complex complex8 = complex5.NaN.pow(complex2);
      Complex complex9 = complex0.pow(complex1);
      Complex complex10 = complex9.cos();
      Complex complex11 = complex4.cosh();
      String string0 = complex8.toString();
      Complex complex12 = complex0.log();
      Complex complex13 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-2625.15716617905), 0.0);
      Complex complex2 = complex0.INF.multiply(complex1);
      double double0 = complex0.abs();
      Complex complex3 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.ONE.cosh();
      Complex complex5 = complex0.exp();
      Object object0 = complex5.readResolve();
      boolean boolean0 = complex5.isNaN();
      List<Complex> list0 = complex2.nthRoot(211);
      Complex complex6 = complex3.asin();
      Complex complex7 = complex4.subtract(complex5);
      double double1 = complex7.abs();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.exp();
      double double0 = complex2.I.getArgument();
      Complex complex3 = complex2.acos();
      int int0 = complex3.ONE.hashCode();
      Complex complex4 = complex3.tan();
      String string0 = complex4.toString();
      double double1 = complex4.abs();
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.acos();
      Complex complex5 = complex3.ONE.tan();
      Complex complex6 = complex0.multiply(0.0);
      Complex complex7 = complex6.NaN.conjugate();
      Complex complex8 = complex4.add(complex2);
      Complex complex9 = complex4.subtract(complex3);
      Complex complex10 = complex9.I.cosh();
      Complex complex11 = complex7.atan();
      Complex complex12 = complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.sqrt();
      Object object1 = complex0.readResolve();
      Complex complex3 = complex0.I.sqrt();
      Complex complex4 = complex3.ONE.add(complex1);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.pow(complex0);
      Complex complex7 = complex6.NaN.negate();
      boolean boolean0 = complex5.equals((Object) null);
      int int0 = complex4.hashCode();
      Complex complex8 = complex6.multiply(complex5);
      Complex complex9 = complex6.add(complex0);
      Complex complex10 = complex3.cos();
      Complex complex11 = complex4.multiply((-0.16666666666666666));
      Complex complex12 = complex0.I.createComplex((-0.16666666666666666), (-75.11006254265));
      Complex complex13 = complex6.negate();
      double double0 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.multiply((-1.0));
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.ONE.multiply((-1.0));
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex7.createComplex((-1.0), 0.167);
      Complex complex10 = complex4.acos();
      Complex complex11 = complex6.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.NaN.exp();
      Complex complex4 = complex0.sin();
      Object object0 = complex4.readResolve();
      Complex complex5 = complex4.NaN.createComplex((-381.0), (-381.0));
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex1.subtract(complex0);
      Complex complex7 = complex6.I.multiply(complex5);
      Complex complex8 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getArgument();
      String string0 = complex0.toString();
      Complex complex1 = new Complex((-5934.84211335), 673.0);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.atan();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex0.INF.multiply(complex1);
      String string0 = complex1.ZERO.toString();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.I.pow(complex1);
      Complex complex6 = complex1.atan();
      double double0 = complex6.ONE.getArgument();
      Complex complex7 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1259.6189723363445, 1259.6189723363445);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.INF.pow(complex2);
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex2.NaN.tanh();
      Complex complex7 = complex5.INF.conjugate();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.I.acos();
      Complex complex10 = complex8.subtract(complex2);
      List<Complex> list0 = complex10.I.nthRoot(1);
      Complex complex11 = complex3.multiply(complex2);
      Complex complex12 = complex4.multiply((-447.8200838774166));
      Complex complex13 = complex11.sin();
      Complex complex14 = complex1.asin();
      boolean boolean0 = complex2.equals(complex12);
      double double0 = complex3.abs();
      double double1 = complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex4.NaN.log();
      List<Complex> list0 = complex4.nthRoot(2943);
      Complex complex6 = complex0.add(complex3);
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex3.divide(complex6);
      Complex complex9 = complex3.multiply(0.2857142686843872);
      Complex complex10 = complex6.conjugate();
      double double0 = complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(407.054, 407.054);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.ONE.log();
      Complex complex4 = complex1.NaN.tanh();
      Complex complex5 = complex4.ZERO.cos();
      double double0 = complex1.ZERO.getArgument();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex6 = complex1.sin();
      Complex complex7 = complex6.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.multiply(1047.10465476);
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(1246.6131, (-582.237189));
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.ONE.subtract(complex1);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Object object0 = complex1.ZERO.readResolve();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.ONE.multiply(0.0);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex2.createComplex(0.0, 0.0);
      Complex complex6 = complex4.ZERO.acos();
      List<Complex> list0 = complex1.nthRoot(878);
      Complex complex7 = complex2.multiply(complex0);
      Complex complex8 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.036, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Object object0 = complex0.readResolve();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.NaN.exp();
      Object object1 = complex1.readResolve();
      String string0 = complex2.toString();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex0.ONE.cos();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex7 = complex4.exp();
      double double1 = complex7.NaN.getArgument();
      ComplexField complexField0 = complex5.getField();
      Complex complex8 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.cos();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex3 = complex1.ZERO.sqrt1z();
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex3.ONE.add(complex2);
      Complex complex6 = complex3.ZERO.negate();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex7.log();
      Complex complex9 = complex8.tan();
      Complex complex10 = complex9.INF.acos();
      Complex complex11 = complex9.I.sqrt();
      Complex complex12 = complex6.sinh();
      Complex complex13 = complex1.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.asin();
      int int0 = complex3.I.hashCode();
      int int1 = (-72);
      try { 
        complex0.nthRoot((-72));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -72
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.NaN.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex0.add(complex2);
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.I.divide(complex0);
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sinh();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.I.createComplex(0.0, 0.0);
      Complex complex5 = complex3.ONE.negate();
      Complex complex6 = complex0.log();
      Complex complex7 = complex1.tan();
      boolean boolean0 = complex7.isNaN();
      double double1 = complex6.getReal();
      Complex complex8 = complex7.pow(complex0);
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.multiply(75.517646440181);
      double double0 = complex1.ZERO.getArgument();
      Complex complex2 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.createComplex((-913.629247731814), 0.0036);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.cos();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.ONE.multiply(complex2);
      boolean boolean0 = complex1.equals(complex0);
      Complex complex6 = complex4.cos();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      Complex complex2 = complex0.sqrt();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.ONE.createComplex((-2084.094166321912), 0.0);
      int int0 = complex2.NaN.hashCode();
      double double0 = complex1.NaN.getArgument();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex3.ZERO.multiply(complex2);
      double double1 = complex3.ONE.abs();
      Complex complex5 = complex0.INF.log();
      Complex complex6 = complex1.ZERO.tan();
      ComplexField complexField0 = complex6.ONE.getField();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex6.NaN.multiply(complex3);
      try { 
        complex6.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.ONE.nthRoot(37);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex1.abs();
      Complex complex2 = complex0.ONE.tanh();
      String string0 = complex0.toString();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex0.INF.pow(complex2);
      Complex complex4 = Complex.NaN;
      double double1 = (-57.857263957784);
      int int0 = 0;
      Complex complex5 = complex4.ONE.sinh();
      try { 
        complex5.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.createComplex(4547.11, 4547.11);
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex0.ONE.add(complex1);
      Complex complex7 = complex3.ZERO.divide(complex5);
      Object object0 = complex0.NaN.readResolve();
      Complex complex8 = complex7.ONE.tan();
      double double0 = complex2.getReal();
      Complex complex9 = complex3.ONE.sqrt1z();
      Complex complex10 = complex9.exp();
      double double1 = complex0.getImaginary();
      ComplexField complexField0 = complex3.getField();
      double double2 = complex5.abs();
      double double3 = complex4.abs();
      String string0 = complex5.toString();
      Complex complex11 = complex5.conjugate();
      Complex complex12 = complex3.divide(complex2);
      Complex complex13 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.NaN.atan();
      String string0 = complex1.INF.toString();
      Complex complex3 = Complex.INF;
      double double0 = complex3.I.getArgument();
      boolean boolean0 = complex0.equals(complex3);
      double double1 = complex3.abs();
      Complex complex4 = complex0.ZERO.createComplex(2.0, Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex4.ZERO.atan();
      Complex complex7 = complex3.log();
      Complex complex8 = complex1.I.negate();
      int int0 = complex0.hashCode();
      Complex complex9 = complex3.add(complex7);
      Complex complex10 = complex9.atan();
      Complex complex11 = complex10.ZERO.subtract(complex2);
      Complex complex12 = complex3.pow(complex9);
      Complex complex13 = complex9.INF.tan();
      double double2 = complex12.ONE.getArgument();
      Complex complex14 = complex12.exp();
      Object object0 = complex13.INF.readResolve();
      double double3 = complex4.getImaginary();
      Complex complex15 = complex13.tanh();
      Object object1 = complex0.readResolve();
      Complex complex16 = complex3.subtract(complex14);
      Complex complex17 = complex1.divide(complex7);
      Object object2 = complex17.I.readResolve();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex18 = complex0.exp();
      Complex complex19 = complex18.NaN.sqrt1z();
      boolean boolean1 = complex9.isNaN();
      Complex complex20 = complex13.pow(complex18);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.NaN.add(complex2);
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex4.I.pow(complex0);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex0.add(complex7);
      int int0 = complex7.INF.hashCode();
      String string0 = complex8.ZERO.toString();
      Complex complex9 = complex8.cos();
      Object object0 = complex9.INF.readResolve();
      Complex complex10 = complex4.cos();
      Complex complex11 = complex4.pow(complex7);
      Complex complex12 = complex11.ZERO.multiply(complex4);
      Complex complex13 = complex4.multiply(complex10);
      Complex complex14 = complex3.ZERO.multiply(complex10);
      Complex complex15 = complex13.ZERO.tan();
      ComplexField complexField0 = complex7.getField();
      Complex complex16 = complex4.log();
      Complex complex17 = complex7.pow(complex12);
      Complex complex18 = complex17.subtract(complex11);
      Complex complex19 = complex18.tan();
      Complex complex20 = complex0.tan();
      ComplexField complexField1 = complex9.getField();
      Complex complex21 = complex19.negate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.INF.pow(complex0);
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex0.ZERO.conjugate();
      Complex complex7 = complex5.ZERO.cos();
      List<Complex> list0 = complex1.I.nthRoot(37);
      Complex complex8 = complex5.NaN.pow(complex2);
      Complex complex9 = complex0.pow(complex1);
      Complex complex10 = complex9.cos();
      Complex complex11 = complex4.cosh();
      String string0 = complex8.toString();
      Complex complex12 = complex0.log();
      Complex complex13 = complex12.ZERO.acos();
      Complex complex14 = complex13.I.atan();
      Complex complex15 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.acos();
      String string0 = complex2.ONE.toString();
      Complex complex4 = complex2.sqrt();
      boolean boolean0 = complex2.equals(complex0);
      double double0 = complex2.getReal();
      Complex complex5 = complex3.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.log();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex2.ONE.conjugate();
      Complex complex5 = complex1.ONE.acos();
      Complex complex6 = complex5.ZERO.pow(complex4);
      Complex complex7 = complex5.I.conjugate();
      Complex complex8 = complex2.acos();
      Complex complex9 = complex4.I.add(complex5);
      boolean boolean0 = complex1.isInfinite();
      Complex complex10 = complex2.NaN.add(complex1);
      Complex complex11 = complex10.NaN.sin();
      Complex complex12 = complex8.acos();
      Complex complex13 = complex10.INF.sqrt();
      Complex complex14 = complex8.INF.sin();
      String string0 = complex14.ZERO.toString();
      Complex complex15 = complex4.NaN.multiply(0.0);
      boolean boolean1 = complex8.isInfinite();
      boolean boolean2 = complex1.isNaN();
      Complex complex16 = complex4.cos();
      Complex complex17 = complex8.multiply(0.0);
      Complex complex18 = complex15.negate();
      String string1 = complex18.I.toString();
      Complex complex19 = complex18.conjugate();
      Complex complex20 = complex2.ONE.divide(complex14);
      ComplexField complexField0 = complex15.getField();
      try { 
        complex1.nthRoot((-2171));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,171
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.I.multiply((-1334.89144899686));
      Complex complex4 = complex0.multiply(complex1);
      boolean boolean0 = complex4.isNaN();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex5.ZERO.add(complex3);
      Complex complex7 = complex4.pow(complex1);
      Complex complex8 = complex4.I.cosh();
      Complex complex9 = complex3.exp();
      Complex complex10 = complex4.I.cos();
      Complex complex11 = complex6.I.add(complex3);
      Complex complex12 = complex0.sin();
      Complex complex13 = complex12.ONE.tanh();
      boolean boolean1 = complex2.isNaN();
      Complex complex14 = complex6.ZERO.log();
      Complex complex15 = complex4.asin();
      Complex complex16 = complex10.INF.multiply(complex0);
      ComplexField complexField0 = complex7.getField();
      int int0 = complex6.hashCode();
      double double0 = complex1.abs();
      Complex complex17 = complex2.sqrt1z();
      Complex complex18 = complex17.INF.tanh();
      Complex complex19 = complex10.log();
      Complex complex20 = complex19.INF.divide(complex10);
      Complex complex21 = complex19.acos();
      Object object0 = complex15.readResolve();
      Complex complex22 = complex13.multiply(0.0);
      Complex complex23 = complex18.multiply(complex15);
      double double1 = complex11.getArgument();
      int int1 = complex17.hashCode();
      Object object1 = complex5.readResolve();
      Complex complex24 = complex2.subtract(complex3);
      boolean boolean2 = complex21.isInfinite();
  }
}
