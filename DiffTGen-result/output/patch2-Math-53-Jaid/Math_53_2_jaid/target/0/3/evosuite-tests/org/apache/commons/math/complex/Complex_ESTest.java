/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:46:26 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-1118.5357465087934), (-1118.5357465087934));
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.I.conjugate();
      Complex complex4 = complex3.ONE.sin();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex3.multiply(complex1);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.tanh();
      double double0 = complex1.getArgument();
      Complex complex8 = complex6.sqrt();
      Object object0 = complex3.readResolve();
      List<Complex> list0 = complex7.nthRoot(715);
      boolean boolean0 = complex1.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex4 = complex0.ONE.subtract(complex2);
      Object object0 = complex3.INF.readResolve();
      Complex complex5 = complex0.conjugate();
      double double0 = complex3.INF.getArgument();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex8.I.sin();
      Complex complex10 = complex9.INF.sin();
      Complex complex11 = complex6.asin();
      Complex complex12 = complex0.divide(complex3);
      Complex complex13 = complex5.negate();
      double double1 = complex1.getReal();
      Complex complex14 = complex6.divide(complex0);
      boolean boolean0 = complex6.isInfinite();
      Complex complex15 = complex2.negate();
      Complex complex16 = complex7.divide(complex14);
      double double2 = complex9.getImaginary();
      double double3 = complex14.getReal();
      String string0 = complex5.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isInfinite();
      double double0 = 5607.401;
      double double1 = 394.0;
      // Undeclared exception!
      try { 
        complex0.ZERO.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.I.log();
      Object object0 = complex0.ONE.readResolve();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.exp();
      Complex complex4 = new Complex(0.0, 0.0);
      Complex complex5 = complex3.add(complex4);
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex4.INF.divide(complex0);
      Complex complex8 = complex7.log();
      Complex complex9 = complex2.exp();
      Complex complex10 = complex4.INF.exp();
      Complex complex11 = complex4.NaN.tan();
      Complex complex12 = complex4.ONE.acos();
      Complex complex13 = complex12.NaN.add(complex7);
      List<Complex> list1 = complex3.nthRoot(1730);
      boolean boolean0 = complex4.isNaN();
      Complex complex14 = complex2.cosh();
      Complex complex15 = complex4.I.subtract(complex1);
      Complex complex16 = complex15.ONE.negate();
      Complex complex17 = complex12.INF.sin();
      Complex complex18 = complex12.sqrt1z();
      boolean boolean1 = complex1.isNaN();
      Complex complex19 = complex18.sinh();
      boolean boolean2 = complex4.isNaN();
      Complex complex20 = complex18.NaN.sqrt1z();
      double double1 = complex19.getReal();
      Complex complex21 = complex14.atan();
      Complex complex22 = complex18.negate();
      Complex complex23 = complex19.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.INF.exp();
      double double0 = complex1.getReal();
      Complex complex4 = complex1.log();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = complex6.ZERO.multiply(complex2);
      Complex complex8 = complex4.divide(complex5);
      Object object0 = new Object();
      Complex complex9 = complex8.NaN.sqrt1z();
      boolean boolean0 = complex4.equals(object0);
      Object object1 = complex8.readResolve();
      boolean boolean1 = complex2.equals(object1);
      Complex complex10 = complex0.log();
      Complex complex11 = complex8.I.cosh();
      Complex complex12 = complex10.I.subtract(complex0);
      Complex complex13 = complex8.createComplex(0.1666666505023083, Double.NaN);
      Complex complex14 = complex10.atan();
      Complex complex15 = complex3.cosh();
      Complex complex16 = complex1.multiply(0.0);
      Complex complex17 = complex4.cos();
      Complex complex18 = Complex.NaN;
      Complex complex19 = complex6.divide(complex18);
      Complex complex20 = complex14.asin();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex2.INF.conjugate();
      Complex complex5 = complex4.I.add(complex0);
      int int0 = 5823;
      // Undeclared exception!
      complex4.ZERO.nthRoot(5823);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2750.55209216));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex1.INF.createComplex((-2750.55209216), (-2750.55209216));
      boolean boolean0 = complex4.equals(complex3);
      Complex complex7 = complex0.sqrt();
      double double0 = complex7.INF.getArgument();
      Complex complex8 = complex7.ZERO.pow(complex2);
      Complex complex9 = complex2.ZERO.tanh();
      Complex complex10 = complex7.exp();
      int int0 = complex10.ONE.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex11 = complex0.ZERO.conjugate();
      Complex complex12 = complex11.NaN.tan();
      Complex complex13 = complex11.INF.exp();
      double double1 = complex1.INF.abs();
      Complex complex14 = complex2.multiply(2.0);
      Complex complex15 = complex14.INF.add(complex11);
      Complex complex16 = complex0.sin();
      Complex complex17 = complex16.conjugate();
      Complex complex18 = complex14.tan();
      boolean boolean1 = complex2.isInfinite();
      List<Complex> list0 = complex16.nthRoot(147);
      boolean boolean2 = complex14.equals(complex3);
      Complex complex19 = complex7.atan();
      Complex complex20 = complex19.pow(complex6);
      double double2 = complex1.abs();
      boolean boolean3 = complex3.isInfinite();
      Complex complex21 = new Complex(0.0, 2.0);
      boolean boolean4 = complex1.equals(complex21);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(4399.0, 4399.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.log();
      double double0 = complex0.getImaginary();
      double double1 = complex1.getArgument();
      Complex complex2 = complex0.multiply(Double.NaN);
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex2.INF.acos();
      Complex complex5 = complex3.I.createComplex(4399.0, 4399.0);
      Complex complex6 = complex2.I.sinh();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex2.INF.divide(complex7);
      Complex complex9 = complex6.INF.createComplex(4399.0, 2456.65234864);
      Complex complex10 = complex9.ONE.sin();
      ComplexField complexField0 = complex1.getField();
      Complex complex11 = complex1.negate();
      Complex complex12 = complex2.I.negate();
      Complex complex13 = complex0.divide(complex4);
      Complex complex14 = complex2.ZERO.sin();
      double double2 = complex11.I.abs();
      String string0 = complex11.toString();
      Complex complex15 = complex1.sinh();
      Complex complex16 = complex1.cos();
      Complex complex17 = complex16.I.exp();
      Complex complex18 = complex16.exp();
      ComplexField complexField1 = complex18.I.getField();
      Complex complex19 = complex11.sinh();
      Complex complex20 = complex19.INF.sinh();
      Complex complex21 = complex20.acos();
      Complex complex22 = complex21.I.negate();
      Complex complex23 = complex15.divide(complex4);
      boolean boolean1 = complex14.isNaN();
      Complex complex24 = complex5.tanh();
      double double3 = complex4.getImaginary();
      Complex complex25 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(1527.81248, 1527.81248);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex2.ONE.subtract(complex1);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex5.ZERO.divide(complex4);
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex0.subtract(complex8);
      Complex complex10 = complex9.ZERO.conjugate();
      Complex complex11 = complex9.negate();
      Complex complex12 = complex0.I.multiply(complex11);
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex12.NaN.subtract(complex13);
      Complex complex15 = complex11.I.sqrt1z();
      double double0 = complex3.abs();
      int int0 = complex4.hashCode();
      Complex complex16 = complex6.add(complex8);
      double double1 = complex16.NaN.abs();
      Complex complex17 = complex6.asin();
      Complex complex18 = complex7.ZERO.exp();
      Complex complex19 = complex17.ZERO.asin();
      Complex complex20 = complex17.I.createComplex(0.0, 0.11113807559013367);
      Complex complex21 = complex0.cos();
      int int1 = complex10.hashCode();
      Complex complex22 = complex15.multiply(complex9);
      Complex complex23 = complex22.I.pow(complex8);
      Complex complex24 = complex7.negate();
      double double2 = complex20.getReal();
      Complex complex25 = complex5.add(complex7);
      double double3 = complex3.getImaginary();
      Complex complex26 = complex3.tanh();
      Complex complex27 = complex17.multiply(0.08713622391223907);
      boolean boolean0 = complex25.isNaN();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-3902.1479247), 1213.0677978772776);
      Complex complex1 = complex0.NaN.negate();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.log();
      double double0 = complex1.abs();
      Complex complex3 = complex1.I.negate();
      double double1 = complex2.I.abs();
      double double2 = complex0.getReal();
      int int0 = complex1.hashCode();
      Complex complex4 = complex2.NaN.conjugate();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.multiply(complex1);
      Complex complex7 = complex3.ZERO.tan();
      Complex complex8 = complex6.ZERO.pow(complex0);
      Complex complex9 = complex2.multiply(complex6);
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex10 = complex3.sqrt();
      Complex complex11 = complex10.ONE.conjugate();
      Complex complex12 = complex4.tan();
      Complex complex13 = complex1.conjugate();
      double double3 = complex5.getArgument();
      int int1 = complex0.hashCode();
      double double4 = complex10.getImaginary();
      String string0 = complex1.toString();
      Complex complex14 = complex4.atan();
      Complex complex15 = complex14.INF.divide(complex11);
      double double5 = complex12.getImaginary();
      Complex complex16 = complex8.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(53.078355, (-2459.087775));
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.log();
      Complex complex4 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(2126.4512177236797, 2264.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = complex1.NaN.add(complex5);
      Object object0 = complex7.ONE.readResolve();
      Complex complex8 = complex1.I.multiply(complex5);
      Complex complex9 = complex8.ONE.negate();
      Complex complex10 = complex0.sinh();
      ComplexField complexField0 = complex10.getField();
      Complex complex11 = complex1.log();
      double double0 = complex0.NaN.abs();
      Complex complex12 = complex2.ZERO.tanh();
      Complex complex13 = complex2.cosh();
      ComplexField complexField1 = complex13.getField();
      Complex complex14 = complex1.ZERO.divide(complex10);
      Complex complex15 = complex1.cosh();
      double double1 = complex9.getReal();
      Complex complex16 = complex15.negate();
      Complex complex17 = complex11.I.exp();
      Complex complex18 = complex11.multiply((-838.39172849013));
      Complex complex19 = complex10.atan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.I.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(3226.44083962813, 3226.44083962813);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.ZERO.multiply(complex3);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex3.pow(complex6);
      Complex complex8 = complex7.ZERO.acos();
      Complex complex9 = complex7.I.multiply((-1.0));
      Complex complex10 = complex8.ZERO.multiply(complex4);
      Complex complex11 = complex8.INF.exp();
      ComplexField complexField0 = complex1.getField();
      Complex complex12 = complex4.multiply(0.3333333333333333);
      Complex complex13 = complex12.sqrt();
      double double0 = complex6.getArgument();
      Complex complex14 = complex6.pow(complex1);
      Complex complex15 = complex12.tanh();
      Complex complex16 = complex15.acos();
      Complex complex17 = complex6.cosh();
      Complex complex18 = complex3.tan();
      Complex complex19 = complex14.cos();
      Complex complex20 = Complex.NaN;
      Complex complex21 = complex16.subtract(complex20);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.createComplex(1.5707963267948966, 1.5707963267948966);
      Complex complex2 = complex1.ZERO.createComplex(1.5707963267948966, 1.5707963267948966);
      Complex complex3 = complex0.add(complex1);
      Object object0 = complex3.INF.readResolve();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex4.I.conjugate();
      Complex complex7 = complex5.INF.pow(complex6);
      Object object1 = complex4.readResolve();
      double double1 = complex0.getReal();
      Complex complex8 = complex2.ZERO.cosh();
      String string0 = complex8.NaN.toString();
      Complex complex9 = complex2.pow(complex0);
      Complex complex10 = complex5.conjugate();
      Complex complex11 = complex10.NaN.add(complex4);
      Complex complex12 = complex2.multiply(complex10);
      boolean boolean0 = complex5.isInfinite();
      double double2 = complex4.getReal();
      Complex complex13 = complex4.cos();
      double double3 = complex10.getArgument();
      ComplexField complexField0 = complex7.getField();
      Complex complex14 = complex2.log();
      Complex complex15 = complex6.sin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1.125, Double.NaN);
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex0.createComplex((-1.0), (-1.0));
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2037.60199874603));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex1.tan();
      List<Complex> list0 = complex0.ONE.nthRoot(2213);
      Complex complex4 = complex2.NaN.createComplex(0.0, 0.0875862700108075);
      List<Complex> list1 = complex1.ZERO.nthRoot(168);
      Complex complex5 = complex4.INF.add(complex3);
      Complex complex6 = complex2.ZERO.add(complex4);
      String string0 = complex0.INF.toString();
      List<Complex> list2 = complex0.ZERO.nthRoot(2213);
      Complex complex7 = complex0.cos();
      String string1 = complex7.toString();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex1.I.exp();
      Complex complex10 = complex2.atan();
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex2.acos();
      boolean boolean0 = complex1.isNaN();
      Complex complex13 = complex2.sqrt();
      boolean boolean1 = complex6.isInfinite();
      Complex complex14 = complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      int int0 = complex0.hashCode();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      String string0 = complex0.NaN.toString();
      Complex complex2 = complex1.acos();
      double double0 = complex0.I.getArgument();
      double double1 = complex0.getReal();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex0.asin();
      boolean boolean0 = complex1.equals((Object) null);
      Complex complex7 = complex3.log();
      int int0 = complex7.hashCode();
      boolean boolean1 = complex3.isNaN();
      Complex complex8 = complex3.multiply(complex0);
      Complex complex9 = complex8.INF.divide(complex0);
      boolean boolean2 = complex3.equals("");
      Complex complex10 = complex4.sin();
      try { 
        complex3.nthRoot((-3295));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,295
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1713.988, 1.2675934823758863E-8);
      String string0 = complex0.toString();
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.ZERO.pow(complex2);
      Object object0 = complex1.readResolve();
      Complex complex4 = complex0.ZERO.cosh();
      Complex complex5 = complex3.log();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex2.createComplex(1667.46, 0.0);
      Complex complex9 = complex3.sinh();
      Complex complex10 = complex1.exp();
      Complex complex11 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex0.ZERO.sinh();
      Complex complex4 = complex3.I.acos();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex0.INF.sqrt();
      Complex complex6 = complex5.NaN.add(complex4);
      double double1 = complex6.ZERO.abs();
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex7.I.divide(complex2);
      int int0 = complex6.I.hashCode();
      Complex complex9 = complex1.NaN.sqrt();
      List<Complex> list0 = complex5.nthRoot(1);
      double double2 = complex2.ZERO.abs();
      Complex complex10 = complex3.tanh();
      ComplexField complexField0 = complex0.getField();
      Complex complex11 = complex1.divide(complex0);
      Complex complex12 = complex0.sin();
      double double3 = complex11.getReal();
      Complex complex13 = complex0.cosh();
      Object object0 = complex2.readResolve();
      double double4 = complex4.getImaginary();
      Complex complex14 = complex6.tanh();
      double double5 = complex6.getReal();
      Complex complex15 = Complex.NaN;
      Complex complex16 = complex10.divide(complex15);
      double double6 = complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 1291.78067);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.INF.acos();
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex1.INF.multiply(1291.78067);
      Complex complex5 = complex3.NaN.multiply(complex4);
      Object object1 = complex5.I.readResolve();
      Complex complex6 = complex4.ONE.cos();
      List<Complex> list0 = complex6.INF.nthRoot(151);
      Complex complex7 = complex1.multiply(1291.78067);
      Complex complex8 = complex7.ONE.add(complex3);
      double double0 = complex0.getArgument();
      int int0 = complex1.hashCode();
      Complex complex9 = complex4.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.INF.acos();
      Complex complex4 = complex2.NaN.tan();
      Complex complex5 = complex2.atan();
      double double0 = complex5.getArgument();
      Complex complex6 = complex0.NaN.sin();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex7.I.sqrt();
      Complex complex9 = complex8.I.multiply((-985.60892));
      Complex complex10 = complex5.ONE.atan();
      Complex complex11 = complex8.INF.divide(complex4);
      Complex complex12 = complex7.I.add(complex5);
      boolean boolean0 = complex5.isInfinite();
      double double1 = complex1.abs();
      boolean boolean1 = complex2.equals(complex12);
      Complex complex13 = complex7.divide(complex2);
      Complex complex14 = complex13.ZERO.exp();
      String string0 = complex12.toString();
      double double2 = complex10.getImaginary();
      Complex complex15 = complex12.exp();
      double double3 = complex10.abs();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.ONE.createComplex(0.0, 2.0);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.multiply(591.711177985);
      Object object0 = complex6.ZERO.readResolve();
      Complex complex7 = complex4.divide(complex6);
      Complex complex8 = complex1.atan();
      Complex complex9 = complex5.NaN.sqrt1z();
      Complex complex10 = complex6.tan();
      Complex complex11 = complex0.ZERO.atan();
      Complex complex12 = complex5.pow(complex7);
      Complex complex13 = complex5.tan();
      Complex complex14 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex4.NaN.sqrt();
      Complex complex7 = complex6.I.createComplex(72.556465, 72.556465);
      Complex complex8 = complex0.cosh();
      double double0 = complex8.NaN.abs();
      boolean boolean0 = complex3.equals(complex2);
      Complex complex9 = complex8.asin();
      Complex complex10 = complex2.log();
      Complex complex11 = complex3.INF.createComplex(Double.NaN, Double.NaN);
      Object object0 = complex3.readResolve();
      boolean boolean1 = complex3.equals(object0);
      double double1 = complex0.getReal();
      double double2 = complex10.abs();
      boolean boolean2 = complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex0.I.divide(complex1);
      double double0 = complex0.ONE.abs();
      Complex complex4 = complex0.NaN.cosh();
      Complex complex5 = complex4.ZERO.divide(complex0);
      Complex complex6 = complex4.INF.sqrt();
      boolean boolean0 = complex0.isNaN();
      String string0 = complex4.toString();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex5.multiply(1371.836377);
      double double1 = complex3.abs();
      Complex complex9 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex2.I.multiply(complex0);
      int int0 = complex1.NaN.hashCode();
      Complex complex4 = complex2.ONE.exp();
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex4.createComplex(583.0, 583.0);
      double double0 = complex8.getArgument();
      Complex complex9 = complex1.createComplex(583.0, (-2498.75285927));
      Complex complex10 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.ZERO.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex2.ZERO.acos();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.ONE.pow(complex6);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex0.subtract(complex8);
      Complex complex10 = complex9.INF.divide(complex0);
      Complex complex11 = complex8.ONE.negate();
      Complex complex12 = complex9.I.log();
      String string0 = complex9.toString();
      Complex complex13 = complex9.cos();
      String string1 = complex13.I.toString();
      Complex complex14 = complex0.ONE.sqrt();
      Complex complex15 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex16 = complex9.subtract(complex15);
      double double0 = complex15.abs();
      Complex complex17 = complex0.divide(complex10);
      List<Complex> list0 = complex17.ZERO.nthRoot(254);
      Complex complex18 = complex15.ZERO.asin();
      Complex complex19 = complex16.I.atan();
      try { 
        complex18.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex0.INF.add(complex2);
      Complex complex5 = complex3.pow(complex2);
      List<Complex> list0 = complex5.ONE.nthRoot(1);
      Complex complex6 = complex5.acos();
      int int0 = complex1.hashCode();
      Complex complex7 = Complex.I;
      Complex complex8 = complex0.add(complex7);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.2, 0.2);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.ZERO.log();
      double double0 = complex0.getImaginary();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.ONE.multiply(complex2);
      double double1 = complex4.NaN.getArgument();
      Complex complex6 = complex4.ONE.asin();
      ComplexField complexField0 = complex6.ONE.getField();
      Complex complex7 = complex1.subtract(complex4);
      boolean boolean0 = complex4.isInfinite();
      Complex complex8 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.NaN.acos();
      Complex complex4 = complex1.ONE.divide(complex2);
      Complex complex5 = complex2.I.negate();
      Complex complex6 = complex3.I.cosh();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex1.log();
      Complex complex8 = complex3.add(complex2);
      Complex complex9 = complex3.ONE.sin();
      Complex complex10 = complex5.NaN.cos();
      Complex complex11 = complex8.I.sin();
      Complex complex12 = complex11.ZERO.divide(complex6);
      Complex complex13 = complex7.cos();
      Complex complex14 = complex13.ONE.acos();
      String string0 = complex3.toString();
      Object object1 = complex3.ONE.readResolve();
      int int0 = complex3.hashCode();
      Complex complex15 = complex5.tanh();
      Complex complex16 = complex4.ONE.add(complex0);
      Complex complex17 = complex9.conjugate();
      Complex complex18 = complex3.pow(complex15);
      boolean boolean0 = complex13.isNaN();
      Complex complex19 = complex0.exp();
      String string1 = complex2.toString();
      Complex complex20 = complex4.sinh();
      Complex complex21 = complex8.exp();
      Complex complex22 = complex4.negate();
      double double0 = complex14.abs();
      Complex complex23 = complex22.tanh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getImaginary();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.atan();
      double double1 = complex3.ONE.abs();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex3.ONE.subtract(complex0);
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex6 = complex3.createComplex(0.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.I.conjugate();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex2.NaN.pow(complex1);
      Complex complex4 = complex2.ZERO.asin();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex2.INF.negate();
      Complex complex8 = complex0.tan();
      String string0 = complex0.ONE.toString();
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex2.sqrt1z();
      boolean boolean0 = complex8.isInfinite();
      int int0 = complex8.hashCode();
      Complex complex10 = complex8.exp();
      Complex complex11 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = (-555.52655599253);
      double double1 = 0.0;
      Complex complex0 = new Complex((-555.52655599253), 0.0);
      try { 
        complex0.INF.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex1.NaN.tan();
      Complex complex5 = complex0.divide(complex1);
      boolean boolean0 = complex4.equals(complex5);
      int int0 = complex5.hashCode();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.pow(complex1);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      String string0 = complex2.I.toString();
      double double0 = complex0.abs();
      Complex complex3 = complex0.ZERO.tan();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.ZERO.sinh();
      Complex complex8 = complex0.log();
      Complex complex9 = complex7.acos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.NaN.pow(complex2);
      Complex complex4 = complex3.createComplex(Double.POSITIVE_INFINITY, (-2026.08414));
      Complex complex5 = complex1.I.exp();
      String string0 = complex1.toString();
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex1.exp();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.14982303977012634, 0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex1.INF.conjugate();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.exp();
      List<Complex> list0 = complex1.nthRoot(197);
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex0.multiply(complex4);
      ComplexField complexField0 = complex5.getField();
      Complex complex9 = complex5.cosh();
      Complex complex10 = complex9.INF.atan();
      Complex complex11 = complex6.atan();
      Complex complex12 = complex9.sqrt();
      Complex complex13 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(719.5946437001701, (-686.99598242827));
      Complex complex1 = complex0.sin();
      ComplexField complexField0 = complex1.INF.getField();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.multiply((-1726.23255382));
      double double1 = complex0.getArgument();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex6.ONE.tanh();
      Complex complex8 = complex2.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.I.asin();
      double double0 = complex0.getReal();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex1.add(complex4);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex((-1528.80457707933), (-1099.1737));
      Complex complex3 = complex1.ONE.multiply(complex2);
      Complex complex4 = complex3.ONE.add(complex2);
      Object object0 = complex3.I.readResolve();
      Complex complex5 = complex0.I.subtract(complex1);
      Complex complex6 = complex5.INF.sqrt1z();
      double double0 = complex6.abs();
      double double1 = complex5.INF.abs();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex1.subtract(complex7);
      Complex complex9 = complex8.tan();
      double double2 = complex2.ONE.abs();
      int int0 = complex8.ZERO.hashCode();
      Complex complex10 = complex2.pow(complex7);
      Complex complex11 = complex1.ONE.tan();
      Complex complex12 = complex10.I.exp();
      Complex complex13 = complex12.ONE.sin();
      double double3 = complex13.getArgument();
      Complex complex14 = complex2.tan();
      Complex complex15 = complex3.cosh();
      boolean boolean0 = complex14.isInfinite();
      Complex complex16 = complex12.negate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.nthRoot(42);
      Complex complex1 = complex0.INF.sqrt1z();
      double double0 = complex1.INF.getArgument();
      double double1 = complex0.abs();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.negate();
      double double0 = complex0.getArgument();
      double double1 = complex0.abs();
      Complex complex3 = complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-603.72085683179), (-1434.3314977));
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(589.31424388, 589.31424388);
      Complex complex1 = complex0.I.cos();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex2.INF.multiply(589.31424388);
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.ONE.multiply(complex4);
      Complex complex6 = complex2.NaN.exp();
      Complex complex7 = complex6.ONE.add(complex2);
      Complex complex8 = complex6.NaN.cos();
      int int0 = complex7.NaN.hashCode();
      Complex complex9 = complex0.createComplex(589.31424388, 589.31424388);
      Complex complex10 = complex1.tan();
      try { 
        complex1.I.nthRoot((-1382));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,382
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      double double0 = complex1.I.abs();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.ONE.sqrt();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex1.INF.cos();
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex0.multiply(Double.NaN);
      Complex complex7 = complex6.subtract(complex0);
      ComplexField complexField0 = complex2.getField();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex2.createComplex(0.16666666666745392, (-264.8811));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(6.0, 2035.8388098267856);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.I.sqrt();
      Complex complex4 = complex0.I.multiply(complex1);
      Complex complex5 = complex0.ONE.cosh();
      Complex complex6 = complex0.createComplex(1.0, 968.95779692754);
      Complex complex7 = complex0.INF.atan();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex8.INF.tanh();
      Object object0 = complex8.ONE.readResolve();
      List<Complex> list0 = complex6.nthRoot(45);
      Complex complex10 = complex0.sinh();
      Object object1 = complex8.INF.readResolve();
      double double0 = complex4.getImaginary();
      Complex complex11 = complex6.divide(complex8);
      boolean boolean0 = complex2.equals(complex10);
      Complex complex12 = complex1.acos();
      double double1 = complex0.getImaginary();
      Complex complex13 = complex9.asin();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(2867.266013452, 0.0);
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.log();
      double double1 = complex1.ONE.getArgument();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.ONE.negate();
      double double2 = complex5.ONE.getArgument();
      Complex complex6 = complex1.multiply(complex2);
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.ONE.pow(complex2);
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.INF.cosh();
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex7 = complex5.I.tan();
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-393.63), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.pow(complex1);
      List<Complex> list0 = complex0.nthRoot(5);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex4.ZERO.createComplex((-393.63), (-1016.04));
      Complex complex6 = complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.createComplex(0.0, 4.0);
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex3.ONE.pow(complex1);
      Complex complex5 = complex0.INF.tanh();
      List<Complex> list0 = complex0.nthRoot(195);
      Complex complex6 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(0.08371849358081818);
      double double0 = complex0.getReal();
      boolean boolean0 = complex1.equals((Object) null);
      Complex complex2 = complex0.cos();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      String string0 = complex1.I.toString();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.I.toString();
      double double0 = complex0.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.add(complex1);
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.NaN;
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex0.I.tanh();
      Complex complex6 = complex1.I.cosh();
      Complex complex7 = complex0.multiply(481.790527);
      Complex complex8 = complex4.pow(complex0);
      Complex complex9 = complex5.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex3.I.atan();
      Complex complex7 = complex6.INF.pow(complex3);
      Complex complex8 = complex6.ONE.createComplex((-1.0), (-1.0));
      Complex complex9 = complex5.NaN.cos();
      Complex complex10 = complex9.negate();
      Complex complex11 = complex5.ONE.sin();
      Complex complex12 = complex3.ONE.multiply(complex9);
      Complex complex13 = complex0.cosh();
      Complex complex14 = complex13.ZERO.conjugate();
      boolean boolean0 = complex0.equals(complex3);
      double double0 = complex13.abs();
      Complex complex15 = complex2.I.sin();
      Complex complex16 = complex2.acos();
      Complex complex17 = complex0.I.sinh();
      Complex complex18 = complex17.I.sqrt();
      Complex complex19 = complex2.conjugate();
      Complex complex20 = complex1.tan();
      Complex complex21 = complex20.divide(complex13);
      Complex complex22 = complex20.sqrt1z();
      Complex complex23 = complex11.tanh();
      int int0 = 0;
      try { 
        complex15.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ZERO.multiply(0.0);
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex1.ONE.atan();
      double double0 = complex7.INF.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex8.NaN.sin();
      Complex complex10 = complex9.ZERO.divide(complex1);
      Complex complex11 = complex3.INF.cos();
      Complex complex12 = complex5.ONE.conjugate();
      Complex complex13 = complex4.atan();
      Complex complex14 = complex0.sqrt();
      Complex complex15 = complex14.NaN.conjugate();
      Complex complex16 = complex15.INF.asin();
      Complex complex17 = complex16.ONE.conjugate();
      List<Complex> list0 = complex17.ZERO.nthRoot(154);
      Complex complex18 = complex15.INF.cos();
      double double1 = complex15.I.getArgument();
      boolean boolean1 = complex14.equals(complex5);
      Object object0 = complex15.readResolve();
      Complex complex19 = complex1.divide(complex4);
      Complex complex20 = complex19.tan();
      Complex complex21 = complex19.asin();
      String string0 = complex3.toString();
      Complex complex22 = complex8.multiply(complex2);
      ComplexField complexField1 = complex21.getField();
      Complex complex23 = complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex2.ZERO.createComplex(129.9, 129.9);
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex3.NaN.negate();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.INF.cos();
      double double0 = complex6.getArgument();
      Complex complex8 = complex6.log();
      Complex complex9 = complex8.sqrt();
      String string0 = complex7.toString();
      Complex complex10 = complex1.ONE.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex11 = complex9.acos();
      Complex complex12 = complex0.exp();
      double double1 = complex7.getReal();
      Complex complex13 = complex0.ONE.add(complex1);
      Complex complex14 = complex9.add(complex6);
      Complex complex15 = complex1.pow(complex14);
      Complex complex16 = complex14.add(complex11);
      Complex complex17 = complex8.negate();
      Complex complex18 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.INF.log();
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(439.854635, 439.854635);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.INF.createComplex((-2273.02545617), (-2273.02545617));
      Complex complex4 = complex0.NaN.conjugate();
      Complex complex5 = complex1.I.add(complex0);
      double double0 = complex0.getReal();
      double double1 = complex1.getArgument();
      Complex complex6 = complex4.ONE.asin();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.multiply(complex5);
      Complex complex9 = complex8.conjugate();
      double double2 = complex9.I.getArgument();
      Complex complex10 = complex8.ZERO.tanh();
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex1.exp();
      Complex complex13 = complex4.sinh();
      Complex complex14 = complex8.createComplex(0.0, 439.854635);
      Complex complex15 = complex4.tanh();
      Complex complex16 = complex1.createComplex(0.0, (-1436.33356431266));
      Complex complex17 = complex16.ZERO.subtract(complex15);
      boolean boolean0 = complex2.isNaN();
      Complex complex18 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tan();
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex1.atan();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.INF.atan();
      double double1 = complex1.getReal();
      String string0 = complex1.toString();
      int int0 = complex5.hashCode();
  }
}
