/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:46:18 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(1724.53073083, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.createComplex(Double.NaN, 1724.53073083);
      Complex complex5 = complex1.NaN.log();
      Complex complex6 = complex2.NaN.acos();
      Complex complex7 = complex1.sin();
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex8.INF.multiply(complex2);
      Complex complex10 = complex0.atan();
      Complex complex11 = complex10.ZERO.subtract(complex7);
      Complex complex12 = complex11.atan();
      double double0 = complex8.abs();
      Complex complex13 = new Complex((-1879.46139354), 1724.53073083);
      Complex complex14 = complex0.pow(complex13);
      String string0 = complex8.toString();
      Complex complex15 = complex8.tan();
      Complex complex16 = complex8.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.I.abs();
      Complex complex1 = new Complex((-413.5981), (-1648.64220136587));
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex4.NaN.sinh();
      double double1 = complex0.getReal();
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex7.INF.conjugate();
      Complex complex9 = complex1.ZERO.multiply(complex0);
      ComplexField complexField0 = complex7.NaN.getField();
      Complex complex10 = complex7.add(complex1);
      Complex complex11 = complex0.log();
      Complex complex12 = complex10.INF.createComplex((-1648.64220136587), (-3401.877698110637));
      Complex complex13 = complex12.INF.sin();
      Complex complex14 = complex11.NaN.pow(complex1);
      double double2 = complex10.getReal();
      Complex complex15 = complex14.I.multiply(complex6);
      Complex complex16 = complex11.log();
      Complex complex17 = complex14.exp();
      Complex complex18 = complex2.divide(complex11);
      Complex complex19 = complex1.add(complex9);
      List<Complex> list0 = complex3.nthRoot(1);
      ComplexField complexField1 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex0.exp();
      double double0 = complex1.INF.abs();
      double double1 = complex3.NaN.abs();
      Complex complex4 = complex3.ONE.multiply(0.0);
      Complex complex5 = complex2.I.subtract(complex3);
      boolean boolean0 = complex3.equals(complex0);
      Complex complex6 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-1824.41));
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex3.INF.divide(complex2);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex2.ONE.createComplex(1946.6, 1946.6);
      Complex complex9 = complex8.ZERO.atan();
      List<Complex> list0 = complex0.I.nthRoot(1);
      Complex complex10 = complex0.ONE.divide(complex3);
      boolean boolean0 = complex0.isNaN();
      Complex complex11 = complex1.sqrt1z();
      double double0 = complex6.NaN.getArgument();
      Complex complex12 = complex1.log();
      Complex complex13 = complex1.ONE.tan();
      Complex complex14 = complex12.ONE.multiply(4.0);
      int int0 = complex3.hashCode();
      List<Complex> list1 = complex6.nthRoot(1);
      Complex complex15 = complex8.subtract(complex1);
      ComplexField complexField0 = complex15.I.getField();
      Complex complex16 = complex12.sinh();
      Complex complex17 = complex1.sqrt1z();
      Complex complex18 = complex0.add(complex15);
      Complex complex19 = complex7.sinh();
      Complex complex20 = complex7.sqrt();
      double double1 = complex1.getImaginary();
      Complex complex21 = complex17.asin();
      ComplexField complexField1 = complex13.getField();
      double double2 = complex3.getImaginary();
      boolean boolean1 = complex16.equals(complex18);
      boolean boolean2 = complex13.isInfinite();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1654.1715));
      Complex complex1 = complex0.pow(complex0);
      int int0 = complex0.ONE.hashCode();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex1.getArgument();
      double double1 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.multiply(0.11111095942313305);
      Complex complex3 = complex0.I.add(complex1);
      Object object0 = complex0.readResolve();
      Complex complex4 = complex1.ZERO.subtract(complex3);
      Object object1 = complex0.readResolve();
      Complex complex5 = complex1.cosh();
      boolean boolean0 = complex4.isInfinite();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex6.createComplex((-600.5004352591), (-600.5004352591));
      int int0 = complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-4880.801), 2.0);
      double double0 = complex0.abs();
      Complex complex1 = complex0.I.createComplex(0.0, (-968.3));
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.acos();
      Object object0 = complex1.readResolve();
      Complex complex5 = complex3.ZERO.subtract(complex2);
      Complex complex6 = complex2.exp();
      Complex complex7 = complex6.I.divide(complex4);
      Complex complex8 = complex0.exp();
      Object object1 = new Object();
      boolean boolean0 = complex3.equals(object1);
      Complex complex9 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 265.585);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex1.INF.conjugate();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex5.ONE.asin();
      Complex complex7 = complex6.I.sin();
      Complex complex8 = complex4.INF.createComplex(4.503599627370496E15, (-1336.984612));
      Complex complex9 = complex3.I.multiply(complex0);
      Object object0 = complex9.readResolve();
      double double0 = complex9.INF.abs();
      Complex complex10 = complex1.log();
      Complex complex11 = complex2.pow(complex10);
      Complex complex12 = complex11.INF.createComplex(563.874, (-1336.984612));
      Complex complex13 = complex3.sqrt();
      Complex complex14 = complex0.multiply(0.0);
      Complex complex15 = complex14.negate();
      boolean boolean0 = complex15.equals(complex0);
      Complex complex16 = complex15.createComplex(0.0, (-1336.984612));
      List<Complex> list0 = complex4.nthRoot(37);
      boolean boolean1 = complex8.isNaN();
      Complex complex17 = complex14.createComplex(0.0, 265.585);
      List<Complex> list1 = complex16.nthRoot(158);
      Complex complex18 = complex17.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex1.ONE.multiply(Double.POSITIVE_INFINITY);
      double double0 = complex3.abs();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex5.atan();
      ComplexField complexField0 = complex4.NaN.getField();
      String string0 = complex1.NaN.toString();
      Complex complex7 = complex1.I.exp();
      Complex complex8 = complex7.NaN.tanh();
      Complex complex9 = complex0.INF.divide(complex7);
      Complex complex10 = complex1.add(complex0);
      Complex complex11 = complex0.subtract(complex1);
      Complex complex12 = complex11.INF.sqrt1z();
      Complex complex13 = complex2.sqrt1z();
      Complex complex14 = complex13.createComplex(Double.POSITIVE_INFINITY, 0.0);
      List<Complex> list0 = complex7.nthRoot(1);
      double double1 = complex10.getImaginary();
      Complex complex15 = complex7.conjugate();
      Complex complex16 = complex7.cos();
      double double2 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex2.NaN.multiply(642.676311);
      Complex complex5 = complex2.ZERO.multiply(0.0);
      Complex complex6 = complex5.NaN.cosh();
      Complex complex7 = complex2.ZERO.atan();
      Complex complex8 = complex2.createComplex(Double.POSITIVE_INFINITY, (-2723.6491));
      Complex complex9 = complex0.sin();
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex9.add(complex8);
      double double0 = complex9.getReal();
      Complex complex12 = complex7.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.multiply(3027.8);
      Complex complex3 = complex0.ZERO.cosh();
      Complex complex4 = complex3.ONE.cosh();
      double double0 = complex4.ZERO.abs();
      Complex complex5 = complex0.I.exp();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex0.multiply(complex1);
      double double0 = complex0.getImaginary();
      int int0 = complex1.NaN.hashCode();
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex4.add(complex1);
      Complex complex7 = complex6.divide(complex1);
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.I.atan();
      Complex complex10 = complex7.INF.multiply(complex0);
      String string0 = complex4.toString();
      Complex complex11 = complex0.tan();
      Complex complex12 = complex10.acos();
      // Undeclared exception!
      try { 
        complex1.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.atan();
      boolean boolean0 = complex2.isNaN();
      Complex complex6 = complex2.add(complex3);
      Complex complex7 = complex2.sin();
      Complex complex8 = complex4.I.sinh();
      Complex complex9 = complex7.ONE.createComplex((-475.96184102), (-475.96184102));
      Complex complex10 = complex4.createComplex((-241.093779), (-241.093779));
      double double0 = complex6.getImaginary();
      Complex complex11 = complex2.conjugate();
      double double1 = complex9.getImaginary();
      double double2 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.multiply(complex1);
      double double0 = complex0.getArgument();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex2.NaN.multiply(complex0);
      Complex complex4 = new Complex(46.30069262, (-2498.113849818));
      Complex complex5 = complex0.I.subtract(complex4);
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex6.ZERO.atan();
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex5.exp();
      Complex complex11 = complex0.NaN.multiply(complex4);
      double double0 = complex10.I.getArgument();
      double double1 = complex4.getArgument();
      ComplexField complexField0 = complex6.getField();
      Object object0 = complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ZERO.acos();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex1.ZERO.exp();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.NaN.atan();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.log();
      Object object1 = complex1.ONE.readResolve();
      Complex complex2 = complex1.INF.sqrt();
      double double0 = complex2.ONE.abs();
      double double1 = complex2.abs();
      Complex complex3 = complex0.ONE.multiply(complex1);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.ONE.sqrt1z();
      Object object2 = complex4.NaN.readResolve();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex4.I.tan();
      Complex complex8 = complex6.INF.exp();
      Complex complex9 = complex6.INF.multiply(Double.NaN);
      Complex complex10 = complex6.sqrt();
      String string0 = complex9.toString();
      Complex complex11 = complex0.sqrt();
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex4.getField();
      Complex complex12 = complex10.NaN.subtract(complex11);
      Complex complex13 = complex12.I.negate();
      double double2 = complex5.getImaginary();
      Complex complex14 = complex10.cos();
      ComplexField complexField2 = complex6.getField();
      boolean boolean0 = complex8.isInfinite();
      Complex complex15 = complex10.ONE.asin();
      Complex complex16 = complex5.sqrt();
      double double3 = complex16.abs();
      Complex complex17 = complex1.add(complex13);
      int int0 = complex6.hashCode();
      String string1 = complex7.toString();
      String string2 = complex6.toString();
      Complex complex18 = complex10.divide(complex6);
      int int1 = complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-116.0), 1073.83270396);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.I.subtract(complex1);
      double double0 = complex0.ZERO.abs();
      double double1 = complex0.abs();
      int int0 = complex0.NaN.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.subtract(complex2);
      Object object0 = complex2.I.readResolve();
      Complex complex6 = complex1.NaN.sqrt();
      Complex complex7 = complex2.createComplex(1080.0799396776356, (-2943.87));
      Complex complex8 = complex7.acos();
      Complex complex9 = complex1.ONE.atan();
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex10.NaN.divide(complex7);
      Complex complex12 = Complex.ZERO;
      boolean boolean0 = complex3.equals(complex12);
      Complex complex13 = complex10.multiply(complex0);
      Complex complex14 = complex11.acos();
      Complex complex15 = complex3.cos();
      double double2 = complex7.abs();
      Complex complex16 = complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(571.3553425535871, 2095.97);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.ONE.multiply((-1190.564905043683));
      Complex complex3 = complex1.ZERO.sqrt1z();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex2.multiply(2.0);
      Complex complex5 = complex2.divide(complex3);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex3.subtract(complex6);
      Complex complex8 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-0.5));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = new Complex(0.0, (-0.5));
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex2.I.createComplex((-0.5), 0.0);
      Complex complex6 = complex3.NaN.subtract(complex2);
      Complex complex7 = complex3.createComplex(0.0, (-3452.38693871));
      Complex complex8 = complex7.acos();
      Complex complex9 = complex8.atan();
      Complex complex10 = complex9.cos();
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex6.tan();
      Complex complex13 = complex8.acos();
      Complex complex14 = complex0.sqrt();
      Complex complex15 = complex8.I.multiply(0.0);
      Complex complex16 = complex9.ONE.subtract(complex3);
      Complex complex17 = complex14.NaN.multiply(0.0);
      Complex complex18 = complex12.ONE.sqrt();
      ComplexField complexField0 = complex7.getField();
      Complex complex19 = complex10.ONE.log();
      int int0 = complex12.hashCode();
      boolean boolean0 = complex9.isNaN();
      Complex complex20 = complex4.sin();
      Complex complex21 = complex20.ZERO.pow(complex11);
      boolean boolean1 = complex9.isInfinite();
      boolean boolean2 = complex20.isNaN();
      Complex complex22 = complex5.cosh();
      double double0 = complex8.getImaginary();
      ComplexField complexField1 = complex22.getField();
      Object object0 = new Object();
      boolean boolean3 = complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.sin();
      List<Complex> list0 = complex3.INF.nthRoot(236);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-1948.78909978663), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex2 = complex0.NaN.divide(complex1);
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.divide(complex1);
      double double1 = complex1.abs();
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex5.I.sqrt();
      Object object0 = complex1.readResolve();
      double double2 = complex1.getArgument();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.NaN.add(complex1);
      Complex complex9 = complex7.negate();
      Complex complex10 = complex9.I.tanh();
      Complex complex11 = complex4.tan();
      Complex complex12 = complex0.tan();
      Complex complex13 = complex12.INF.multiply(Double.POSITIVE_INFINITY);
      ComplexField complexField1 = complex2.getField();
      Complex complex14 = complex11.cos();
      String string0 = complex5.toString();
      boolean boolean0 = complex13.isNaN();
      Object object1 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1597.88011180825);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.conjugate();
      String string0 = complex0.I.toString();
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex0.multiply(1521.77388754);
      Complex complex5 = complex2.multiply(1597.88011180825);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(6.283185307179586, 1.0);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex2.cosh();
      Object object0 = complex0.readResolve();
      double double0 = complex0.getArgument();
      Complex complex7 = complex4.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-317.272457749598), (-317.272457749598));
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex2.ONE.multiply(complex1);
      Complex complex4 = complex0.ONE.cos();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex0.conjugate();
      boolean boolean0 = complex6.isInfinite();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex7.ONE.tanh();
      Complex complex9 = complex6.cos();
      Complex complex10 = complex9.I.exp();
      Complex complex11 = complex7.tanh();
      Complex complex12 = complex7.ONE.multiply((-317.272457749598));
      Complex complex13 = complex7.sin();
      Complex complex14 = complex8.log();
      Object object0 = complex9.NaN.readResolve();
      List<Complex> list0 = complex7.nthRoot(1);
      Complex complex15 = complex7.INF.multiply(0.0);
      ComplexField complexField0 = complex7.getField();
      Complex complex16 = complex14.sqrt1z();
      double double0 = complex0.abs();
      Complex complex17 = complex0.divide(complex1);
      Complex complex18 = complex9.tanh();
      Complex complex19 = complex9.sinh();
      boolean boolean1 = complex17.isInfinite();
      Complex complex20 = complex12.conjugate();
      Complex complex21 = complex17.sin();
      Complex complex22 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.divide(complex1);
      Object object0 = complex1.NaN.readResolve();
      Complex complex3 = complex1.I.conjugate();
      Complex complex4 = complex3.asin();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.I.subtract(complex5);
      Complex complex7 = complex0.subtract(complex1);
      Complex complex8 = complex7.I.acos();
      Complex complex9 = complex8.ONE.sqrt1z();
      Complex complex10 = complex0.acos();
      ComplexField complexField0 = complex0.getField();
      Complex complex11 = complex0.negate();
      Complex complex12 = complex3.cosh();
      Complex complex13 = complex10.add(complex11);
      Complex complex14 = complex13.INF.pow(complex1);
      Complex complex15 = complex13.acos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.ONE.conjugate();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.ZERO.acos();
      Complex complex8 = complex1.exp();
      Complex complex9 = Complex.I;
      Complex complex10 = complex8.INF.multiply(complex9);
      int int0 = complex6.hashCode();
      double double0 = complex10.NaN.abs();
      try { 
        complex6.nthRoot((-1109));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,109
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex3.INF.subtract(complex2);
      Complex complex6 = complex4.NaN.sqrt();
      Object object0 = complex2.readResolve();
      Complex complex7 = complex3.log();
      ComplexField complexField0 = complex7.INF.getField();
      Complex complex8 = complex2.INF.exp();
      Complex complex9 = complex5.subtract(complex1);
      ComplexField complexField1 = complex0.getField();
      boolean boolean0 = complex3.equals(complex6);
      Complex complex10 = complex1.atan();
      Complex complex11 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      double double0 = complex1.ZERO.abs();
      Complex complex2 = complex1.I.sin();
      int int0 = complex2.INF.hashCode();
      String string0 = complex2.ONE.toString();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.INF.multiply(complex2);
      boolean boolean0 = complex3.isNaN();
      Complex complex5 = complex3.multiply(0.0);
      Complex complex6 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1227.779863793, 170.35972138);
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-890.58614665179));
      Complex complex1 = complex0.createComplex(0.0, (-506.5166813280401));
      Complex complex2 = complex1.NaN.add(complex0);
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex3.subtract(complex4);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex5.createComplex((-1.0), 1847.37160793453);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-347.5145126), 1.7976931348623157E308);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.log();
      ComplexField complexField0 = complex1.getField();
      int int0 = complex0.ONE.hashCode();
      Complex complex2 = complex0.cos();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex2.multiply(3474.503115);
      Complex complex4 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ZERO.abs();
      double double1 = complex0.getImaginary();
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex1.isNaN();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.I.multiply(complex1);
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex4.NaN.tan();
      Complex complex8 = complex1.pow(complex0);
      Complex complex9 = complex4.cos();
      Complex complex10 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(60.31564336, (-115.3629849));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.I.sqrt1z();
      double double0 = complex1.getArgument();
      boolean boolean0 = complex1.equals(complex2);
      Complex complex4 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.ZERO.negate();
      List<Complex> list0 = complex0.nthRoot(1998);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.subtract(complex3);
      double double1 = complex4.I.getArgument();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(5156.0, Double.NaN);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.tanh();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-489.2), (-489.2));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.multiply((-404.16));
      Complex complex3 = complex0.ZERO.cos();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.multiply((-489.2));
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex4.sin();
      Complex complex10 = complex9.I.asin();
      ComplexField complexField0 = complex8.getField();
      int int0 = complex6.hashCode();
      boolean boolean0 = complex2.equals((Object) null);
      Complex complex11 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.INF.sqrt1z();
      double double0 = complex2.ZERO.getArgument();
      double double1 = complex0.getImaginary();
      Complex complex3 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-3605.0675), (-1.0));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sin();
      double double0 = complex2.getImaginary();
      double double1 = complex1.getReal();
      Complex complex3 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = new Complex(2453.597618643, 2453.597618643);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex1.log();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex2.ZERO.log();
      Complex complex10 = complex4.ZERO.divide(complex2);
      Complex complex11 = complex10.pow(complex7);
      double double0 = complex7.getImaginary();
      ComplexField complexField0 = complex4.getField();
      double double1 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.sqrt();
      List<Complex> list0 = complex3.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      double double1 = complex0.ZERO.abs();
      double double2 = complex0.abs();
      boolean boolean0 = complex0.isInfinite();
      List<Complex> list0 = complex0.nthRoot(980);
      Complex complex1 = complex0.sqrt();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = new Complex(0.0, 0.0);
      Complex complex6 = complex4.I.multiply(complex5);
      Complex complex7 = complex2.subtract(complex0);
      Complex complex8 = complex2.NaN.sqrt();
      Complex complex9 = complex0.tan();
      Complex complex10 = Complex.ONE;
      try { 
        complex10.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = 1;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ZERO.sqrt();
      try { 
        complex0.INF.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex0.ONE.sin();
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex5.I.conjugate();
      double double0 = complex0.NaN.getArgument();
      Complex complex7 = complex5.ZERO.negate();
      double double1 = complex4.NaN.getArgument();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.I.sqrt();
      ComplexField complexField0 = complex8.I.getField();
      int int0 = complex8.hashCode();
      Complex complex10 = complex8.conjugate();
      Complex complex11 = complex5.acos();
      Complex complex12 = complex8.sin();
      double double2 = complex11.I.abs();
      Complex complex13 = complex4.ZERO.pow(complex2);
      Complex complex14 = complex11.atan();
      Complex complex15 = Complex.INF;
      Complex complex16 = complex14.subtract(complex15);
      Complex complex17 = complex0.sqrt();
      Complex complex18 = complex15.ONE.sqrt1z();
      Complex complex19 = Complex.ONE;
      Complex complex20 = complex16.ZERO.subtract(complex19);
      List<Complex> list0 = complex20.I.nthRoot(174);
      Complex complex21 = complex4.atan();
      double double3 = complex15.getImaginary();
      int int1 = complex10.hashCode();
      Complex complex22 = complex10.cos();
      boolean boolean0 = complex4.equals(complex8);
      Complex complex23 = complex8.tanh();
      Complex complex24 = complex23.subtract(complex2);
      double double4 = complex23.getImaginary();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.I.acos();
      List<Complex> list0 = complex1.ZERO.nthRoot(1);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.I.tan();
      List<Complex> list1 = complex5.ZERO.nthRoot(1);
      double double0 = complex4.getArgument();
      Complex complex6 = complex3.ONE.multiply(complex0);
      double double1 = complex4.getArgument();
      Complex complex7 = complex0.sin();
      double double2 = complex3.abs();
      Complex complex8 = complex2.acos();
      Complex complex9 = complex8.INF.subtract(complex6);
      ComplexField complexField0 = complex6.ONE.getField();
      List<Complex> list2 = complex3.nthRoot(1);
      Complex complex10 = complex5.divide(complex8);
      Complex complex11 = complex6.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex2.INF.multiply(complex0);
      double double0 = complex4.getArgument();
      Complex complex5 = complex0.subtract(complex1);
      double double1 = complex1.I.abs();
      Complex complex6 = complex5.createComplex(147.2, 1276.51511132);
      String string0 = complex0.toString();
      Complex complex7 = complex0.I.cos();
      Complex complex8 = complex2.sqrt();
      Object object0 = complex8.readResolve();
      Complex complex9 = complex2.ONE.exp();
      Complex complex10 = complex5.ONE.sinh();
      String string1 = complex10.ZERO.toString();
      Complex complex11 = complex0.createComplex(0.0, Double.NaN);
      double double2 = complex11.ONE.abs();
      double double3 = complex5.getImaginary();
      boolean boolean0 = complex8.isInfinite();
      double double4 = complex2.abs();
      int int0 = complex1.hashCode();
      List<Complex> list0 = complex1.nthRoot(1);
      double double5 = complex8.abs();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.acos();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex1.INF.createComplex(0.0, 0.0);
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.log();
      Complex complex7 = complex6.ONE.asin();
      Complex complex8 = complex2.INF.multiply(complex4);
      Complex complex9 = complex6.subtract(complex5);
      double double1 = complex9.getArgument();
      boolean boolean1 = complex6.isNaN();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex10.tanh();
      boolean boolean2 = complex3.equals(complex1);
      Complex complex12 = complex6.sin();
      boolean boolean3 = complex4.equals("mt<'}fDjjM>");
      double double2 = complex2.getImaginary();
      Complex complex13 = complex3.sqrt1z();
      Complex complex14 = complex13.I.negate();
      Complex complex15 = complex14.ZERO.cosh();
      Complex complex16 = complex7.subtract(complex1);
      Complex complex17 = complex10.negate();
      double double3 = complex3.getReal();
      Complex complex18 = complex10.multiply(complex7);
      Complex complex19 = complex9.negate();
      Complex complex20 = complex16.multiply(1069.7487422264);
      Complex complex21 = complex15.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.NaN.acos();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex6 = complex5.INF.subtract(complex1);
      Complex complex7 = complex4.pow(complex1);
      double double0 = complex4.getArgument();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex8.ZERO.multiply(complex0);
      Complex complex10 = complex8.log();
      Complex complex11 = complex10.I.exp();
      Complex complex12 = complex10.I.cosh();
      Complex complex13 = complex10.INF.pow(complex0);
      Complex complex14 = complex13.INF.sqrt();
      ComplexField complexField1 = complex9.getField();
      Complex complex15 = complex0.conjugate();
      Complex complex16 = complex15.NaN.log();
      Complex complex17 = complex15.multiply(complex0);
      Complex complex18 = complex15.multiply(complex0);
      double double1 = complex9.getReal();
      String string0 = complex1.toString();
      Complex complex19 = complex15.add(complex16);
      String string1 = complex19.ZERO.toString();
      Complex complex20 = complex7.sinh();
      Complex complex21 = complex8.asin();
      double double2 = complex3.getArgument();
      Complex complex22 = complex14.negate();
      Complex complex23 = complex18.createComplex(0.0, 0.0);
      Complex complex24 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = null;
      double double0 = complex1.INF.abs();
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ONE.cosh();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex0.I.add(complex3);
      double double0 = complex6.ZERO.abs();
      double double1 = complex3.getReal();
      double double2 = complex3.getImaginary();
      String string0 = complex3.toString();
      Complex complex7 = complex6.exp();
      double double3 = complex7.getImaginary();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex3.sin();
      Complex complex10 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sinh();
      double double0 = complex0.ZERO.abs();
      String string0 = complex0.toString();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.ONE.multiply(0.0);
      Complex complex4 = complex2.I.tanh();
      Complex complex5 = complex0.atan();
      double double1 = complex5.abs();
      Complex complex6 = complex4.sinh();
      double double2 = complex6.NaN.abs();
      Complex complex7 = complex2.ZERO.cosh();
      Complex complex8 = complex7.log();
      double double3 = complex4.getArgument();
      double double4 = complex5.NaN.abs();
      Complex complex9 = complex2.INF.tanh();
      Complex complex10 = complex6.add(complex2);
      try { 
        complex5.nthRoot((-3460));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,460
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(1.125, (-2563.41517961749));
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.NaN.divide(complex0);
      Complex complex6 = complex1.I.sin();
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex3.INF.asin();
      Complex complex10 = complex8.ZERO.add(complex3);
      String string1 = complex6.I.toString();
      Complex complex11 = complex10.I.divide(complex6);
      Complex complex12 = complex2.NaN.add(complex6);
      Complex complex13 = complex8.NaN.sqrt();
      Complex complex14 = complex0.subtract(complex8);
      ComplexField complexField0 = complex14.NaN.getField();
      Complex complex15 = complex3.sin();
      Complex complex16 = complex0.tanh();
      double double0 = complex16.ONE.abs();
      Complex complex17 = complex8.sinh();
      double double1 = complex0.getReal();
      Complex complex18 = complex0.multiply((-2563.41517961749));
      Complex complex19 = complex8.log();
      Complex complex20 = complex18.sqrt();
      Complex complex21 = complex20.ONE.multiply((-1167.22));
      String string2 = complex20.ZERO.toString();
      boolean boolean0 = complex18.isInfinite();
      Complex complex22 = complex15.asin();
      double double2 = complex15.getImaginary();
      Complex complex23 = complex3.multiply(1.125);
      double double3 = complex15.getReal();
      double double4 = complex10.getArgument();
      Complex complex24 = complex21.divide(complex5);
  }
}
