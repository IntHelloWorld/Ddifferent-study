/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:53:47 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.acos();
      String string0 = complex0.toString();
      double double0 = complex0.abs();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 4478934.172043493);
      Complex complex1 = complex0.ZERO.exp();
      double double0 = complex0.abs();
      Complex complex2 = complex1.ZERO.multiply(4478934.172043605);
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex5.divide(complex1);
      Complex complex8 = complex7.ONE.add(complex4);
      Complex complex9 = complex1.pow(complex4);
      Complex complex10 = complex4.sqrt1z();
      Complex complex11 = complex5.pow(complex0);
      String string0 = complex6.toString();
      Complex complex12 = complex2.cos();
      Complex complex13 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-1841.2469792338), (-1841.2469792338));
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.multiply((-1841.2469792338));
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.subtract(complex5);
      Complex complex7 = complex1.I.cosh();
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex8.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.NaN.atan();
      Complex complex11 = complex4.NaN.asin();
      List<Complex> list0 = complex8.I.nthRoot(209);
      Complex complex12 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex3.ONE.subtract(complex2);
      Complex complex5 = complex2.ONE.add(complex1);
      double double0 = complex5.I.abs();
      Complex complex6 = complex0.log();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.INF.pow(complex3);
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex9.ONE.tanh();
      Complex complex11 = complex6.asin();
      Complex complex12 = complex11.acos();
      Complex complex13 = complex12.INF.acos();
      Complex complex14 = complex13.INF.cosh();
      Complex complex15 = complex13.multiply(complex12);
      double double1 = complex12.getArgument();
      boolean boolean0 = complex3.equals(complex0);
      Complex complex16 = complex0.sin();
      Complex complex17 = complex6.sqrt();
      Complex complex18 = complex17.INF.sqrt();
      Complex complex19 = complex3.INF.asin();
      String string0 = complex19.I.toString();
      double double2 = complex18.I.getArgument();
      Complex complex20 = complex17.INF.negate();
      Complex complex21 = complex9.pow(complex3);
      Complex complex22 = complex14.tanh();
      Complex complex23 = complex14.tanh();
      Complex complex24 = complex10.asin();
      Complex complex25 = complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.I.sin();
      Complex complex4 = complex1.NaN.tan();
      Complex complex5 = complex3.ZERO.exp();
      Complex complex6 = complex2.NaN.conjugate();
      Complex complex7 = complex4.conjugate();
      double double0 = complex3.ONE.abs();
      Complex complex8 = complex1.INF.subtract(complex0);
      double double1 = complex0.getImaginary();
      Complex complex9 = complex2.I.sinh();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex10 = complex0.ZERO.sin();
      Complex complex11 = complex1.ZERO.tan();
      Complex complex12 = complex0.acos();
      String string0 = complex9.toString();
      Complex complex13 = complex4.sinh();
      Complex complex14 = complex9.tanh();
      double double2 = complex7.getArgument();
      boolean boolean0 = complex10.equals(complex14);
      Complex complex15 = complex13.add(complex1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.I.cos();
      Complex complex5 = complex4.pow(complex3);
      Complex complex6 = complex4.log();
      double double0 = complex3.ONE.getArgument();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex2.acos();
      Complex complex9 = complex8.INF.add(complex4);
      boolean boolean0 = complex3.isNaN();
      Complex complex10 = complex3.ONE.cosh();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex11 = complex8.INF.sqrt1z();
      Complex complex12 = complex2.exp();
      int int0 = complex12.hashCode();
      Complex complex13 = complex3.INF.sinh();
      Complex complex14 = complex12.ONE.sin();
      Complex complex15 = Complex.ZERO;
      boolean boolean1 = complex8.equals(complex15);
      Complex complex16 = complex5.exp();
      double double1 = complex15.abs();
      Complex complex17 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.I.toString();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.I.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.ZERO.createComplex(2915.403644, 0.0);
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.NaN.pow(complex4);
      Complex complex6 = complex2.atan();
      Complex complex7 = complex6.cosh();
      double double1 = complex6.getArgument();
      int int0 = complex6.INF.hashCode();
      Complex complex8 = complex2.INF.conjugate();
      Complex complex9 = complex8.ONE.exp();
      Complex complex10 = complex7.INF.multiply(0.0);
      try { 
        complex10.ONE.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.ONE.createComplex((-1671.76), (-1671.76));
      String string0 = complex1.toString();
      Complex complex4 = Complex.INF;
      Object object0 = complex4.ZERO.readResolve();
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = complex5.I.tan();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex4.pow(complex0);
      Complex complex9 = complex1.cos();
      Complex complex10 = complex7.cos();
      try { 
        complex1.nthRoot((-1600));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,600
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = new Complex((-3447.621847028), (-3447.621847028));
      Complex complex5 = complex0.divide(complex4);
      Object object0 = complex4.readResolve();
      double double0 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      try { 
        complex0.ZERO.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.I.divide(complex2);
      Complex complex4 = complex2.INF.atan();
      List<Complex> list0 = complex0.nthRoot(4579);
      Complex complex5 = complex0.exp();
      boolean boolean0 = complex0.equals(complex5);
      // Undeclared exception!
      complex5.ZERO.nthRoot(4579);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(13.07, (-2609.16));
      Complex complex1 = complex0.ONE.sqrt();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex2.ZERO.add(complex1);
      double double0 = complex1.getImaginary();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex0.sqrt1z();
      ComplexField complexField0 = complex6.getField();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex8.ZERO.add(complex7);
      double double1 = complex7.getImaginary();
      Complex complex10 = complex4.sqrt1z();
      Complex complex11 = complex5.NaN.subtract(complex7);
      Complex complex12 = complex10.ONE.log();
      Complex complex13 = complex0.multiply(0.0);
      Complex complex14 = complex5.exp();
      Complex complex15 = complex0.cos();
      Complex complex16 = complex5.multiply(2609.16);
      Complex complex17 = complex13.add(complex7);
      Complex complex18 = complex5.sqrt1z();
      Complex complex19 = complex11.sqrt();
      Object object1 = complex12.readResolve();
      boolean boolean0 = complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-838.7175135), 4999.30411307149);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.createComplex((-838.7175135), (-838.7175135));
      Complex complex3 = complex2.NaN.multiply((-838.7175135));
      double double0 = complex0.abs();
      Complex complex4 = complex2.I.subtract(complex1);
      double double1 = complex2.abs();
      double double2 = complex2.getImaginary();
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex0.cos();
      double double3 = complex1.getArgument();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex7.I.createComplex(1050.288546, 5.669184079525E-24);
      double double4 = complex7.I.abs();
      Complex complex9 = complex4.ONE.divide(complex1);
      Complex complex10 = complex0.ONE.multiply(complex4);
      Complex complex11 = complex10.I.tan();
      Object object0 = new Object();
      boolean boolean0 = complex4.equals(object0);
      Complex complex12 = complex1.sqrt1z();
      Complex complex13 = complex12.exp();
      boolean boolean1 = complex5.equals(complex2);
      Complex complex14 = complex4.exp();
      Complex complex15 = complex2.createComplex((-838.7175135), 4473.12274331066);
      Object object1 = new Object();
      boolean boolean2 = complex4.equals(object1);
      Complex complex16 = complex14.cosh();
      Complex complex17 = complex13.multiply(5125.82303702907);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex0.I.divide(complex1);
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.asin();
      ComplexField complexField0 = complex5.INF.getField();
      int int0 = complex0.hashCode();
      Complex complex8 = complex5.add(complex4);
      double double0 = complex0.getImaginary();
      Complex complex9 = complex3.sin();
      double double1 = complex8.getReal();
      Complex complex10 = complex0.multiply(Double.NaN);
      ComplexField complexField1 = complex5.getField();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Object object0 = complex2.readResolve();
      String string0 = complex2.toString();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(825.24262220296, (-4.503599627370496E15));
      Complex complex1 = complex0.NaN.createComplex(0.0, (-1251.11689335916));
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex2.NaN.add(complex1);
      Complex complex5 = complex4.ONE.cos();
      double double0 = complex2.ONE.abs();
      Complex complex6 = complex2.ZERO.cosh();
      List<Complex> list0 = complex0.nthRoot(130);
      int int0 = complex0.ONE.hashCode();
      Complex complex7 = complex2.NaN.tanh();
      double double1 = complex0.abs();
      Complex complex8 = complex0.acos();
      int int1 = complex2.hashCode();
      Object object0 = new Object();
      boolean boolean0 = complex8.equals(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.I.negate();
      Complex complex4 = complex3.tanh();
      int int1 = complex3.ONE.hashCode();
      double double0 = complex1.ZERO.getArgument();
      Complex complex5 = complex0.sinh();
      double double1 = complex0.abs();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.NaN.exp();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex4.multiply(6.283185307179586);
      Complex complex8 = complex7.NaN.sinh();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField0 = complex3.getField();
      String string0 = complex3.toString();
      Complex complex9 = complex3.ZERO.exp();
      Complex complex10 = complex9.sqrt1z();
      Complex complex11 = complex2.cosh();
      boolean boolean1 = complex3.isInfinite();
      Complex complex12 = complex0.log();
      Complex complex13 = complex12.INF.sinh();
      double double0 = complex12.NaN.getArgument();
      Complex complex14 = complex11.tan();
      Complex complex15 = complex14.ZERO.multiply(complex3);
      Complex complex16 = complex14.sqrt();
      String string1 = complex16.ONE.toString();
      Complex complex17 = complex16.cosh();
      Complex complex18 = Complex.NaN;
      Complex complex19 = complex16.I.pow(complex18);
      Complex complex20 = complex4.atan();
      Complex complex21 = complex14.INF.asin();
      int int1 = complex16.hashCode();
      Complex complex22 = complex3.sin();
      Complex complex23 = complex7.sinh();
      Complex complex24 = complex17.sqrt();
      Complex complex25 = complex23.acos();
      Complex complex26 = complex18.sqrt1z();
      Complex complex27 = complex16.add(complex21);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(800.0, 800.0);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Object object0 = complex2.I.readResolve();
      double double0 = complex2.NaN.abs();
      Object object1 = complex0.readResolve();
      double double1 = complex2.abs();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex1.I.conjugate();
      String string0 = complex0.toString();
      double double2 = complex2.getReal();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.ONE.log();
      double double3 = complex1.INF.getArgument();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex1.ONE.pow(complex5);
      Complex complex9 = complex8.ZERO.acos();
      boolean boolean0 = complex1.isNaN();
      boolean boolean1 = complex6.isNaN();
      Complex complex10 = complex3.tan();
      Complex complex11 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex4.createComplex((-552.903175941612), (-552.903175941612));
      Complex complex7 = complex5.divide(complex2);
      Complex complex8 = complex5.ZERO.cos();
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex9 = complex1.tan();
      Complex complex10 = complex6.ZERO.sqrt1z();
      Object object0 = complex10.ONE.readResolve();
      List<Complex> list1 = complex10.ONE.nthRoot(1);
      Complex complex11 = complex6.cos();
      Complex complex12 = complex1.multiply(complex11);
      String string0 = complex12.ONE.toString();
      Complex complex13 = complex5.sqrt1z();
      Complex complex14 = complex3.NaN.pow(complex6);
      Complex complex15 = complex11.exp();
      Complex complex16 = complex4.NaN.tanh();
      boolean boolean0 = complex6.isNaN();
      Complex complex17 = complex11.cosh();
      Complex complex18 = complex3.negate();
      String string1 = complex3.toString();
      double double0 = complex4.abs();
      double double1 = complex15.getArgument();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(1.0, (-1.0));
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.NaN.log();
      double double0 = complex1.getArgument();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex4.divide(complex0);
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex4.INF.tanh();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.INF.sqrt();
      Complex complex11 = complex10.ONE.sinh();
      Complex complex12 = complex11.I.exp();
      double double1 = complex11.abs();
      Complex complex13 = complex6.subtract(complex9);
      Complex complex14 = complex13.multiply(complex4);
      Complex complex15 = complex13.sinh();
      Object object0 = complex13.readResolve();
      Complex complex16 = complex5.sqrt1z();
      Object object1 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.INF.conjugate();
      double double0 = complex0.ONE.abs();
      double double1 = complex0.getImaginary();
      double double2 = complex0.I.abs();
      Object object0 = complex0.readResolve();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.divide(complex2);
      ComplexField complexField1 = complex2.getField();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex3.sqrt1z();
      double double3 = complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      String string0 = complex0.ONE.toString();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.ZERO.atan();
      Object object0 = complex4.NaN.readResolve();
      int int0 = complex4.ZERO.hashCode();
      double double0 = complex0.getReal();
      Complex complex5 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-142.7240039878), (-142.7240039878));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex0.ZERO.sinh();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.NaN.multiply((double) 1);
      double double0 = complex0.abs();
      Complex complex6 = complex0.cosh();
      List<Complex> list1 = complex6.INF.nthRoot(1);
      Object object0 = complex4.readResolve();
      Complex complex7 = complex0.sqrt1z();
      double double1 = complex7.ZERO.getArgument();
      Complex complex8 = complex3.sin();
      Complex complex9 = complex6.subtract(complex0);
      Object object1 = new Object();
      boolean boolean0 = complex8.equals(object1);
      Complex complex10 = complex4.sin();
      double double2 = complex10.INF.getArgument();
      Complex complex11 = complex1.tan();
      Complex complex12 = complex6.atan();
      Complex complex13 = complex6.asin();
      boolean boolean1 = complex12.isInfinite();
      Complex complex14 = complex13.sqrt1z();
      Complex complex15 = complex8.tan();
      Complex complex16 = complex10.negate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(5.650007086920087E-9, 5.650007086920087E-9);
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.atan();
      double double0 = complex2.getReal();
      Complex complex5 = complex4.multiply(complex2);
      Complex complex6 = complex5.ONE.tanh();
      Object object1 = complex2.readResolve();
      Complex complex7 = complex3.ZERO.multiply(0.0);
      Complex complex8 = complex5.multiply(924.1131393367);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.multiply(0.008333333333329196);
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex1.ONE.conjugate();
      Complex complex4 = complex3.ONE.multiply(6.283185307179586);
      Complex complex5 = complex3.I.atan();
      boolean boolean1 = complex1.isNaN();
      Complex complex6 = complex3.add(complex5);
      double double0 = complex5.abs();
      Complex complex7 = complex6.multiply(complex5);
      List<Complex> list0 = complex7.INF.nthRoot(37);
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex7.NaN.cos();
      double double1 = complex1.abs();
      Complex complex10 = complex6.ZERO.log();
      Complex complex11 = complex1.add(complex3);
      Complex complex12 = complex7.ONE.tanh();
      int int0 = complex6.hashCode();
      Complex complex13 = complex11.sqrt1z();
      Complex complex14 = complex13.I.negate();
      double double2 = complex1.I.getArgument();
      Complex complex15 = complex13.I.sqrt1z();
      Complex complex16 = complex15.INF.subtract(complex9);
      Complex complex17 = complex14.INF.exp();
      Complex complex18 = Complex.INF;
      Complex complex19 = complex17.I.subtract(complex18);
      Complex complex20 = complex13.log();
      int int1 = complex5.hashCode();
      Complex complex21 = complex14.sqrt();
      Object object0 = complex8.readResolve();
      Complex complex22 = complex17.add(complex6);
      Complex complex23 = complex8.sqrt1z();
      Complex complex24 = Complex.ZERO;
      Complex complex25 = complex11.divide(complex24);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(complex0);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply(3705.4621);
      Complex complex2 = complex1.NaN.createComplex(2461.8, (-1362.4147417));
      Complex complex3 = complex0.multiply((-1362.4147417));
      double double0 = complex0.getReal();
      Complex complex4 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.INF.subtract(complex0);
      double double0 = complex1.INF.abs();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.asin();
      String string0 = complex4.toString();
      String string1 = complex4.toString();
      boolean boolean0 = complex3.equals("(1.5707963267948966, -0.0)");
      Complex complex5 = complex3.asin();
      Complex complex6 = complex4.multiply((-412.9407241));
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex6.sqrt();
      double double1 = complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(1521.0831, (-1472.284509650884));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex2.ONE.acos();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.I.subtract(complex2);
      Complex complex7 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex5.ZERO.asin();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex1.ONE.createComplex(3865.4851, 14.0);
      Complex complex9 = complex7.NaN.atan();
      Complex complex10 = complex3.NaN.multiply(3865.4851);
      Object object0 = complex1.readResolve();
      Complex complex11 = complex2.negate();
      Complex complex12 = complex1.subtract(complex0);
      Complex complex13 = complex10.cosh();
      double double0 = complex13.getReal();
      boolean boolean0 = complex13.isInfinite();
      Complex complex14 = complex12.acos();
      Complex complex15 = complex12.divide(complex4);
      boolean boolean1 = complex11.isInfinite();
      Complex complex16 = complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      Complex complex1 = complex0.cos();
      double double1 = complex0.ONE.abs();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex3.ONE.multiply(complex2);
      double double2 = complex2.getArgument();
      Complex complex5 = complex0.I.createComplex(1.0, Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.ZERO.sin();
      Complex complex7 = complex6.NaN.exp();
      List<Complex> list0 = complex5.nthRoot(589);
      Complex complex8 = complex0.asin();
      String string0 = complex2.toString();
      Complex complex9 = complex0.subtract(complex2);
      Complex complex10 = complex9.multiply(1.0);
      Complex complex11 = complex10.I.sqrt();
      Complex complex12 = complex5.asin();
      Complex complex13 = complex12.ZERO.multiply(complex0);
      Complex complex14 = complex4.cosh();
      Complex complex15 = complex3.sin();
      Complex complex16 = complex2.exp();
      boolean boolean0 = complex9.isInfinite();
      Complex complex17 = complex13.createComplex(967.403, 297.9257499);
      Complex complex18 = complex6.log();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-762.7));
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2542.0427669, 2.0);
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.ZERO.sqrt1z();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex1.pow(complex2);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex4.exp();
      Complex complex9 = complex2.pow(complex3);
      Complex complex10 = complex7.tanh();
      Complex complex11 = complex1.multiply((-1200.7913084328));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sin();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex3 = complex0.I.sqrt1z();
      ComplexField complexField0 = complex1.getField();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex1.getArgument();
      Complex complex4 = complex0.acos();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.ONE.sinh();
      boolean boolean1 = complex3.equals(complex5);
      double double1 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.acos();
      String string0 = complex1.ZERO.toString();
      Complex complex3 = complex1.ONE.multiply(complex0);
      Complex complex4 = complex2.I.createComplex((-2992.37519), (-2992.37519));
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex4.sinh();
      int int0 = complex4.hashCode();
      Complex complex6 = complex1.log();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex2.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-4.503599627370496E15));
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex2.multiply(0.0);
      List<Complex> list0 = complex1.INF.nthRoot(17);
      boolean boolean0 = complex0.equals((Object) null);
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.atan();
      double double1 = complex2.getReal();
      Complex complex5 = complex3.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.tan();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex3 = complex2.INF.multiply(0.0);
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex3.ZERO.conjugate();
      Complex complex6 = complex2.ONE.sqrt();
      Complex complex7 = complex6.ZERO.multiply(complex3);
      Complex complex8 = complex0.add(complex1);
      Complex complex9 = complex1.I.subtract(complex5);
      double double0 = complex0.getArgument();
      Complex complex10 = complex8.asin();
      Complex complex11 = complex10.I.sqrt1z();
      Complex complex12 = complex1.multiply(0.0);
      Complex complex13 = complex6.pow(complex10);
      Complex complex14 = complex13.I.multiply(0.0);
      String string0 = complex13.ZERO.toString();
      Complex complex15 = complex10.cosh();
      Complex complex16 = complex2.sin();
      Complex complex17 = complex10.sin();
      Complex complex18 = complex13.acos();
      Complex complex19 = complex14.tan();
      boolean boolean0 = complex4.isInfinite();
      Complex complex20 = complex9.pow(complex18);
      Complex complex21 = complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 6.283185307179586);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.multiply((-897.9883178601877));
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.ONE.tan();
      String string0 = complex2.ZERO.toString();
      Complex complex4 = complex0.INF.divide(complex1);
      List<Complex> list0 = complex4.INF.nthRoot(1);
      Complex complex5 = complex0.createComplex(Double.NaN, Double.NaN);
      double double0 = complex1.getArgument();
      Complex complex6 = complex5.ZERO.sin();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex5.I.divide(complex8);
      Complex complex10 = complex5.sqrt();
      Complex complex11 = complex8.I.pow(complex3);
      Complex complex12 = complex11.I.add(complex4);
      Complex complex13 = complex7.ZERO.pow(complex8);
      double double1 = complex5.getImaginary();
      Complex complex14 = complex3.tan();
      Complex complex15 = complex14.sqrt();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.acos();
      double double0 = complex0.INF.getArgument();
      Complex complex2 = complex0.atan();
      boolean boolean0 = complex0.isNaN();
      double double1 = complex2.abs();
      boolean boolean1 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.sqrt1z();
      int int0 = (-2170);
      try { 
        complex2.ZERO.nthRoot((-2170));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,170
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-3481.0899073311293), 0.0);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.subtract(complex2);
      int int0 = complex3.hashCode();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.log();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.add(complex2);
      ComplexField complexField1 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      String string0 = complex0.ZERO.toString();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.createComplex((-262.332764352), (-262.332764352));
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex5.I.add(complex4);
      Complex complex7 = complex1.tanh();
      double double0 = complex2.abs();
      double double1 = complex7.abs();
      Complex complex8 = complex5.atan();
      int int0 = complex3.hashCode();
      int int1 = complex3.hashCode();
      Complex complex9 = complex5.multiply(complex6);
      Complex complex10 = complex2.add(complex4);
      Complex complex11 = complex4.pow(complex1);
      Complex complex12 = complex10.atan();
      try { 
        complex3.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex0.ZERO.tan();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.subtract(complex0);
      Object object0 = complex0.readResolve();
      double double0 = complex2.getReal();
      ComplexField complexField1 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sin();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.nthRoot(2199);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-1584.85), (-1584.85));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.NaN.createComplex(0.0, (-1584.85));
      Complex complex6 = complex1.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-2192.9612682725), (-1172.918));
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.sin();
      int int0 = (-2845);
      try { 
        complex1.INF.nthRoot((-2845));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,845
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.createComplex(0.0, 0.0);
      double double0 = complex0.getArgument();
      Complex complex4 = complex2.asin();
      Object object0 = complex0.ONE.readResolve();
      Complex complex5 = complex1.log();
      Complex complex6 = complex2.multiply(complex5);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex6.NaN.add(complex7);
      Complex complex9 = complex5.multiply(complex3);
      int int0 = (-736);
      try { 
        complex7.nthRoot((-736));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -736
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex2.I.sqrt();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex6 = complex2.log();
      Complex complex7 = complex1.add(complex5);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(1521.0831, (-1472.284509650884));
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 2817.2703);
      List<Complex> list0 = complex0.NaN.nthRoot(1543);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cos();
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex2.multiply(complex4);
      Complex complex6 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      boolean boolean0 = complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.createComplex(0.0, 180.0527034167);
      Complex complex3 = complex1.add(complex0);
      boolean boolean0 = complex0.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = complex3.I.add(complex2);
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.createComplex((-1.0), (-1.0));
      double double0 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.NaN.getField();
      String string0 = complex0.toString();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tan();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.ONE.pow(complex2);
      Complex complex4 = complex2.log();
      Complex complex5 = complex1.INF.divide(complex0);
      double double0 = complex5.ZERO.abs();
      try { 
        complex5.ONE.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.INF.pow(complex0);
      double double0 = complex0.getReal();
      Complex complex3 = complex0.cos();
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-1974.9285), 3100.0351307798);
      Complex complex1 = Complex.ZERO;
      int int0 = complex0.ZERO.hashCode();
      List<Complex> list0 = complex1.INF.nthRoot(241);
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.divide(complex1);
      double double0 = complex4.I.abs();
      Complex complex5 = complex4.multiply((-1814.5877446191964));
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex3.I.asin();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex6.atan();
      Complex complex10 = complex4.acos();
      Complex complex11 = complex7.ONE.sqrt1z();
      Object object0 = complex11.ZERO.readResolve();
      Complex complex12 = complex4.tanh();
      Complex complex13 = complex12.NaN.asin();
      Complex complex14 = complex6.multiply(Double.NaN);
      Complex complex15 = complex14.NaN.tanh();
      Complex complex16 = complex15.ONE.add(complex13);
      Object object1 = complex16.ONE.readResolve();
      String string0 = complex14.ZERO.toString();
      Complex complex17 = complex14.sqrt1z();
      Complex complex18 = complex17.NaN.cosh();
      Complex complex19 = complex18.I.exp();
      Complex complex20 = complex6.asin();
      Complex complex21 = complex7.sinh();
      Complex complex22 = complex18.subtract(complex7);
      boolean boolean0 = complex21.equals((Object) null);
      Complex complex23 = complex22.asin();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.ZERO.createComplex((-229.3), (-229.3));
      Complex complex4 = complex2.ZERO.sinh();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex0.NaN.negate();
      Complex complex7 = complex0.sqrt();
      double double0 = complex0.getReal();
      Complex complex8 = complex7.atan();
      String string0 = complex6.toString();
      Complex complex9 = complex8.ONE.pow(complex0);
      Complex complex10 = complex6.tanh();
      Complex complex11 = complex0.cos();
      Complex complex12 = complex7.I.multiply(0.0);
      Complex complex13 = complex6.pow(complex11);
      Complex complex14 = complex13.ZERO.multiply(complex8);
      Complex complex15 = complex11.ONE.multiply(2806.1109);
      double double1 = complex11.ZERO.getArgument();
      Complex complex16 = complex11.I.atan();
      boolean boolean0 = complex8.isInfinite();
      Complex complex17 = complex15.log();
      boolean boolean1 = complex11.isInfinite();
      Complex complex18 = complex6.INF.conjugate();
      Complex complex19 = complex6.createComplex(15.0, 0.0);
      Complex complex20 = complex11.acos();
      Complex complex21 = complex17.tan();
      Complex complex22 = complex19.negate();
      Complex complex23 = Complex.I;
      Complex complex24 = complex22.ZERO.divide(complex23);
      double double2 = complex10.abs();
      boolean boolean2 = complex20.equals(complex17);
      List<Complex> list0 = complex2.nthRoot(1023);
      Complex complex25 = complex9.conjugate();
      double double3 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.divide(complex1);
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex2.equals(complex1);
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex2.ZERO.negate();
      Complex complex6 = complex0.multiply(complex2);
      double double0 = complex2.abs();
      Complex complex7 = complex1.ZERO.add(complex6);
      Complex complex8 = complex7.INF.divide(complex2);
      int int0 = complex6.hashCode();
      Complex complex9 = complex0.log();
      Complex complex10 = complex5.divide(complex2);
      Complex complex11 = complex0.exp();
      Complex complex12 = complex6.createComplex((-1743.28746217847), (-1743.28746217847));
      Complex complex13 = complex1.sqrt();
      double double1 = complex5.getImaginary();
      Complex complex14 = complex5.cosh();
      Complex complex15 = complex2.conjugate();
      Complex complex16 = complex11.atan();
      Complex complex17 = complex12.add(complex3);
      Complex complex18 = complex12.negate();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex1.ZERO.divide(complex0);
      Complex complex4 = complex1.INF.atan();
      Complex complex5 = complex4.ONE.tanh();
      String string0 = complex0.NaN.toString();
      Complex complex6 = complex4.ZERO.sin();
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex7.sin();
      boolean boolean0 = complex7.isNaN();
      double double0 = complex0.getArgument();
      double double1 = complex0.getArgument();
      String string1 = complex7.toString();
      String string2 = complex0.toString();
      Complex complex9 = complex7.conjugate();
      try { 
        complex9.nthRoot((-2810));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,810
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.cos();
      double double0 = complex0.getReal();
      Complex complex3 = complex1.INF.createComplex(0.0, 5298.918335949382);
      Complex complex4 = complex1.log();
      Complex complex5 = complex1.subtract(complex4);
      Complex complex6 = complex4.ZERO.cos();
      List<Complex> list0 = complex6.ONE.nthRoot(7);
      Complex complex7 = complex6.I.log();
      Object object0 = complex6.ZERO.readResolve();
      Complex complex8 = complex4.NaN.sin();
      Object object1 = complex4.readResolve();
      Complex complex9 = complex7.multiply(complex5);
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex10.negate();
      boolean boolean0 = complex1.isNaN();
      double double1 = complex8.getReal();
      double double2 = complex2.getImaginary();
      Complex complex12 = complex7.cosh();
      Object object2 = complex10.readResolve();
      boolean boolean1 = complex11.isInfinite();
      Complex complex13 = complex9.tan();
      boolean boolean2 = complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 710.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex3.ZERO.multiply(2.0);
      Complex complex5 = complex2.multiply(14.0);
      int int0 = complex2.hashCode();
      Complex complex6 = complex0.pow(complex1);
      Object object0 = complex6.I.readResolve();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex2.log();
      Complex complex10 = complex7.conjugate();
      Complex complex11 = complex7.tanh();
      Complex complex12 = complex6.add(complex0);
      Complex complex13 = complex9.sqrt1z();
      Complex complex14 = complex7.exp();
      Complex complex15 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.cosh();
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex1.asin();
      String string0 = complex3.ONE.toString();
      Complex complex4 = complex3.conjugate();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex0.ONE.asin();
      Complex complex7 = complex2.INF.acos();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex4.I.tan();
      Complex complex10 = complex4.createComplex(513.08221882, (-2521.84924));
      Complex complex11 = complex10.sin();
      Complex complex12 = complex9.I.sqrt();
      Complex complex13 = complex12.ZERO.atan();
      double double0 = complex5.abs();
      Complex complex14 = complex5.add(complex2);
      Complex complex15 = complex5.log();
      Complex complex16 = complex15.ZERO.tanh();
      ComplexField complexField1 = complex9.getField();
      ComplexField complexField2 = complex0.getField();
      String string1 = complex4.toString();
      Complex complex17 = complex5.multiply(0.0);
      Complex complex18 = complex16.asin();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isInfinite();
  }
}
