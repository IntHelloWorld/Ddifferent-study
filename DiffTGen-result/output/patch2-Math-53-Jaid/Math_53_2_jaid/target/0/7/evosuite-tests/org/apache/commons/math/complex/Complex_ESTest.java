/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:46:25 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.ZERO.nthRoot(2823);
      Complex complex1 = complex0.ZERO.atan();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex2.ZERO.tan();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex2.I.cosh();
      Complex complex5 = complex1.INF.acos();
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.NaN.sin();
      Complex complex8 = complex7.I.tan();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex0.ONE.cosh();
      Complex complex11 = complex10.NaN.add(complex9);
      Complex complex12 = complex2.INF.conjugate();
      Complex complex13 = complex1.tan();
      String string0 = complex6.toString();
      Complex complex14 = complex2.asin();
      Object object0 = complex12.readResolve();
      double double1 = complex2.abs();
      Complex complex15 = complex13.createComplex(Double.NaN, Double.NaN);
      Complex complex16 = complex10.NaN.cos();
      Complex complex17 = complex11.sinh();
      Complex complex18 = complex1.sqrt1z();
      Complex complex19 = complex18.I.cosh();
      double double2 = complex17.abs();
      Complex complex20 = complex11.sqrt();
      Complex complex21 = complex20.ONE.createComplex((-1452.03275869513), 2823);
      Complex complex22 = complex18.acos();
      Complex complex23 = complex9.pow(complex3);
      Complex complex24 = complex14.sinh();
      Complex complex25 = complex22.divide(complex9);
      // Undeclared exception!
      complex3.nthRoot(2823);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 728.20226);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.cos();
      List<Complex> list0 = complex1.ONE.nthRoot(1353);
      Complex complex4 = complex0.NaN.tan();
      Complex complex5 = complex0.ONE.multiply((double) 1353);
      Complex complex6 = complex4.INF.asin();
      Complex complex7 = complex6.NaN.cos();
      boolean boolean0 = complex2.equals(complex1);
      Complex complex8 = complex0.NaN.multiply(6.283185307179586);
      Complex complex9 = complex8.ONE.sqrt();
      List<Complex> list1 = complex2.nthRoot(720);
      double double0 = complex2.abs();
      Complex complex10 = complex2.sqrt1z();
      Complex complex11 = complex3.exp();
      Complex complex12 = complex11.I.multiply(complex7);
      boolean boolean1 = complex8.isNaN();
      Complex complex13 = complex0.negate();
      Complex complex14 = complex10.NaN.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double1 = complex2.abs();
      Complex complex15 = complex10.sqrt1z();
      Complex complex16 = complex8.add(complex7);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.ONE.multiply(2.0);
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex3.I.asin();
      Complex complex6 = complex1.ZERO.subtract(complex0);
      Complex complex7 = complex0.I.multiply((-3623.55051));
      Complex complex8 = complex7.NaN.log();
      Complex complex9 = complex1.NaN.sin();
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex0.ZERO.pow(complex1);
      Complex complex12 = complex11.ONE.exp();
      Complex complex13 = complex9.ZERO.sqrt1z();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex14 = complex1.sqrt1z();
      Complex complex15 = complex14.I.exp();
      Complex complex16 = complex14.cosh();
      Complex complex17 = complex0.add(complex10);
      Object object0 = complex10.readResolve();
      Complex complex18 = complex9.divide(complex0);
      Complex complex19 = complex8.sin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.NaN.pow(complex1);
      double double1 = complex0.ZERO.getArgument();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.NaN.subtract(complex0);
      List<Complex> list0 = complex2.I.nthRoot(572);
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex1.ZERO.atan();
      Complex complex4 = complex3.INF.multiply(complex1);
      Complex complex5 = complex4.ONE.tan();
      ComplexField complexField1 = complex4.I.getField();
      Complex complex6 = complex3.NaN.log();
      Complex complex7 = complex0.INF.log();
      Complex complex8 = complex1.ZERO.atan();
      Complex complex9 = complex8.INF.sqrt1z();
      Complex complex10 = complex7.negate();
      Complex complex11 = complex10.cosh();
      Complex complex12 = complex7.sinh();
      double double1 = complex1.getImaginary();
      String string0 = complex1.toString();
      Object object0 = complex3.readResolve();
      Complex complex13 = complex12.sin();
      Complex complex14 = complex9.pow(complex2);
      Complex complex15 = complex14.INF.subtract(complex6);
      Complex complex16 = complex15.ONE.asin();
      Complex complex17 = complex13.sin();
      Complex complex18 = complex12.ZERO.negate();
      Complex complex19 = complex1.exp();
      Complex complex20 = complex17.tan();
      Complex complex21 = complex0.asin();
      Complex complex22 = complex4.sin();
      Complex complex23 = complex16.add(complex1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.multiply((-1520.2114649));
      Complex complex5 = complex4.sqrt1z();
      ComplexField complexField0 = complex3.NaN.getField();
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex1.isNaN();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex2.I.cosh();
      String string0 = complex2.ONE.toString();
      double double0 = complex6.NaN.abs();
      List<Complex> list0 = complex6.nthRoot(5194);
      String string1 = complex6.toString();
      Complex complex9 = complex3.add(complex2);
      Complex complex10 = complex9.ZERO.cosh();
      Complex complex11 = complex0.multiply((-161.267032211114));
      Complex complex12 = new Complex(0.0, 5194);
      Complex complex13 = complex11.I.pow(complex12);
      double double1 = complex11.NaN.abs();
      int int0 = complex1.hashCode();
      boolean boolean1 = complex0.isInfinite();
      Complex complex14 = complex4.log();
      Complex complex15 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(818.3771, 1.125);
      String string0 = complex0.toString();
      Complex complex2 = complex1.createComplex(818.3771, 6.283185307179586);
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex2.subtract(complex1);
      Complex complex5 = complex4.add(complex1);
      Complex complex6 = complex1.tan();
      Object object0 = complex6.readResolve();
      ComplexField complexField0 = complex6.getField();
      boolean boolean0 = complex1.isInfinite();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex7.I.negate();
      Complex complex9 = complex7.ONE.tan();
      Complex complex10 = complex5.negate();
      Complex complex11 = complex7.INF.multiply(6.283185307179586);
      Complex complex12 = complex10.sqrt1z();
      Complex complex13 = complex7.negate();
      Complex complex14 = complex2.sqrt1z();
      boolean boolean1 = complex5.equals(object0);
      Complex complex15 = complex14.pow(complex3);
      Complex complex16 = complex5.conjugate();
      Complex complex17 = complex4.cos();
      Complex complex18 = complex14.atan();
      Complex complex19 = complex12.cos();
      Complex complex20 = complex5.sqrt();
      double double0 = complex0.getReal();
      Complex complex21 = complex12.tan();
      Complex complex22 = complex1.multiply(complex5);
      Complex complex23 = complex16.cos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-1587.5466310621957), 1022.36396712);
      Complex complex1 = complex0.ONE.exp();
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex3.ZERO.multiply(complex0);
      Complex complex5 = complex2.INF.pow(complex1);
      Complex complex6 = complex2.ZERO.sin();
      Complex complex7 = complex2.divide(complex1);
      Complex complex8 = complex7.cos();
      List<Complex> list0 = complex2.nthRoot(2177);
      double double1 = complex0.ONE.abs();
      List<Complex> list1 = complex6.nthRoot(1);
      double double2 = complex1.ZERO.getArgument();
      boolean boolean0 = complex0.isInfinite();
      Complex complex9 = complex7.cosh();
      boolean boolean1 = complex6.isNaN();
      Complex complex10 = complex0.tan();
      Complex complex11 = complex4.NaN.sqrt();
      Complex complex12 = complex9.divide(complex6);
      Complex complex13 = complex12.I.multiply(0.0);
      Complex complex14 = complex6.sin();
      Complex complex15 = complex4.createComplex(1, 1.0);
      Complex complex16 = complex8.cosh();
      Complex complex17 = complex9.asin();
      Complex complex18 = complex3.sqrt();
      Complex complex19 = complex16.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(3770.779403342, (-1747.964134577912));
      Complex complex1 = complex0.I.sin();
      String string0 = complex1.I.toString();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex1.NaN.log();
      Complex complex6 = complex0.cosh();
      int int0 = complex1.hashCode();
      ComplexField complexField0 = complex6.getField();
      Object object0 = complex1.readResolve();
      Complex complex7 = complex6.log();
      Complex complex8 = complex7.INF.cosh();
      ComplexField complexField1 = complex7.getField();
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = Complex.I;
      Complex complex11 = complex8.multiply(complex10);
      Complex complex12 = complex6.log();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(1165.03548, 1165.03548);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.sinh();
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      // Undeclared exception!
      try { 
        complex0.I.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      double double0 = complex0.INF.abs();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex4.INF.add(complex0);
      Complex complex6 = complex0.INF.createComplex(0.0, (-869.002473013674));
      Complex complex7 = complex4.ZERO.add(complex0);
      Complex complex8 = complex0.log();
      double double1 = complex8.getArgument();
      Complex complex9 = complex3.INF.cos();
      Complex complex10 = Complex.ZERO;
      boolean boolean0 = complex1.equals(complex10);
      try { 
        complex3.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.log();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex3 = complex1.sinh();
      double double0 = complex3.ZERO.abs();
      Complex complex4 = complex0.acos();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = complex2.conjugate();
      double double1 = complex6.getImaginary();
      List<Complex> list1 = complex5.NaN.nthRoot(1);
      double double2 = complex3.getImaginary();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex6.I.sqrt1z();
      String string0 = complex8.ONE.toString();
      String string1 = complex3.toString();
      Complex complex9 = complex2.divide(complex6);
      Complex complex10 = complex9.NaN.atan();
      Object object0 = complex0.readResolve();
      Complex complex11 = complex8.subtract(complex7);
      Complex complex12 = complex10.sqrt1z();
      ComplexField complexField1 = complex12.getField();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ONE.multiply(0.07842259109020233);
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex1.I.cosh();
      Complex complex6 = complex4.tanh();
      ComplexField complexField0 = complex3.getField();
      List<Complex> list0 = complex4.nthRoot(68);
      Complex complex7 = complex1.ZERO.add(complex5);
      Object object0 = complex7.ONE.readResolve();
      Complex complex8 = complex4.createComplex(Double.POSITIVE_INFINITY, 68);
      double double0 = complex3.getImaginary();
      Complex complex9 = complex3.add(complex0);
      Complex complex10 = complex9.cos();
      Complex complex11 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex3.I.pow(complex2);
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex4.I.sqrt();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex7 = complex1.ZERO.negate();
      Complex complex8 = complex7.ZERO.acos();
      Complex complex9 = complex5.I.cos();
      List<Complex> list0 = complex0.nthRoot(282);
      Complex complex10 = complex1.createComplex(0.0, 282);
      Complex complex11 = complex2.subtract(complex6);
      ComplexField complexField0 = complex4.I.getField();
      Complex complex12 = complex11.tanh();
      List<Complex> list1 = complex11.nthRoot(282);
      Complex complex13 = complex10.atan();
      boolean boolean0 = complex5.equals(complex1);
      Complex complex14 = complex10.negate();
      Complex complex15 = complex10.pow(complex4);
      Complex complex16 = complex15.ZERO.sqrt();
      Complex complex17 = complex15.acos();
      Complex complex18 = complex6.createComplex(0.0, 282);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-546.23463), (-1.0));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.NaN.sin();
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.sinh();
      String string0 = complex0.toString();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.ZERO.sqrt();
      Object object0 = complex2.readResolve();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex0.divide(complex3);
      double double0 = complex5.abs();
      double double1 = complex5.abs();
      Complex complex8 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2425.6382988773667));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.NaN.divide(complex4);
      Complex complex6 = complex1.cos();
      Complex complex7 = complex5.NaN.sqrt();
      Complex complex8 = complex0.tanh();
      int int0 = complex8.hashCode();
      Complex complex9 = complex5.cosh();
      Complex complex10 = complex9.cosh();
      Object object0 = complex9.ZERO.readResolve();
      Complex complex11 = complex7.sqrt();
      Complex complex12 = complex2.subtract(complex4);
      double double0 = complex12.getReal();
      Complex complex13 = complex5.add(complex8);
      String string0 = complex13.toString();
      Complex complex14 = complex2.log();
      Complex complex15 = complex5.sin();
      Complex complex16 = complex11.subtract(complex0);
      String string1 = complex0.toString();
      Complex complex17 = complex8.cos();
      Complex complex18 = complex16.exp();
      ComplexField complexField0 = complex1.getField();
      Complex complex19 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.036, 1598.9493);
      Complex complex2 = complex0.I.divide(complex1);
      Object object0 = complex0.NaN.readResolve();
      Complex complex3 = complex0.multiply((-1230.14724489432));
      boolean boolean0 = complex3.isInfinite();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1.1430250008909141E-8);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = new Complex((-933.7623606383), (-933.7623606383));
      Complex complex3 = complex0.I.divide(complex2);
      Complex complex4 = complex3.I.atan();
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.INF.asin();
      try { 
        complex6.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.sqrt1z();
      double double0 = complex2.abs();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.I.add(complex0);
      double double1 = 1.0;
      Complex complex5 = complex0.cos();
      Complex complex6 = complex3.INF.negate();
      try { 
        complex6.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-2581.5), (-2581.5));
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.ZERO.exp();
      List<Complex> list0 = complex0.nthRoot(4595);
      String string0 = complex3.toString();
      Complex complex4 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.acos();
      List<Complex> list0 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.cos();
      try { 
        complex3.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-1594.22637), (-1594.22637));
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex1.asin();
      List<Complex> list0 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-134.198353799605), (-2319.43951));
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex1.ZERO.createComplex((-2319.43951), (-134.198353799605));
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.divide(complex4);
      boolean boolean0 = complex0.isInfinite();
      String string0 = complex0.toString();
      int int0 = complex0.hashCode();
      Complex complex6 = complex4.sin();
      int int1 = complex6.ONE.hashCode();
      Complex complex7 = complex6.I.cos();
      Complex complex8 = complex5.sinh();
      double double0 = complex8.ZERO.abs();
      Complex complex9 = complex4.pow(complex5);
      Complex complex10 = complex8.NaN.atan();
      ComplexField complexField0 = complex1.getField();
      Complex complex11 = complex4.sqrt();
      Complex complex12 = complex5.asin();
      double double1 = complex6.getImaginary();
      Complex complex13 = complex4.sqrt();
      boolean boolean1 = complex0.equals("(-134.198353799605, -2319.43951)");
      Complex complex14 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(2.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.ZERO.pow(complex2);
      Complex complex4 = complex2.NaN.log();
      Complex complex5 = complex4.ONE.subtract(complex1);
      Complex complex6 = complex3.ZERO.createComplex((-1837.71004), 2.0);
      Complex complex7 = complex0.multiply(complex1);
      double double0 = complex1.ZERO.abs();
      Object object0 = complex7.readResolve();
      Object object1 = complex1.ZERO.readResolve();
      double double1 = complex3.INF.getArgument();
      double double2 = complex2.ZERO.getArgument();
      int int0 = complex1.hashCode();
      double double3 = complex0.getImaginary();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex6.multiply((-1837.71004));
      Complex complex10 = complex0.exp();
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex0.negate();
      Complex complex13 = complex0.sin();
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.NaN.multiply(0.0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.createComplex(1461.2, 1461.2);
      double double0 = complex0.getArgument();
      Complex complex5 = complex1.sqrt1z();
      int int0 = complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      ComplexField complexField0 = complex1.getField();
      double double0 = complex1.ZERO.abs();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex0.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex3.ZERO.sqrt1z();
      boolean boolean0 = complex3.isNaN();
      Complex complex5 = complex1.acos();
      int int0 = complex5.ZERO.hashCode();
      ComplexField complexField0 = complex0.getField();
      String string0 = complex3.toString();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(2.356194490192345, 0.0);
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.createComplex(2575.74313, 1.0);
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.I.tanh();
      ComplexField complexField1 = complex4.ZERO.getField();
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex5.I.multiply(complex3);
      Complex complex7 = complex6.ONE.cosh();
      Complex complex8 = complex3.INF.cosh();
      Complex complex9 = complex8.ONE.sqrt();
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex10.divide(complex2);
      Complex complex12 = complex11.NaN.conjugate();
      Complex complex13 = complex2.asin();
      Complex complex14 = complex1.tanh();
      Complex complex15 = complex10.asin();
      Complex complex16 = complex10.sin();
      Complex complex17 = Complex.NaN;
      Complex complex18 = complex17.ZERO.sqrt();
      Complex complex19 = complex0.pow(complex17);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.divide(complex1);
      List<Complex> list0 = complex2.I.nthRoot(37);
      double double0 = complex0.I.getArgument();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.subtract(complex2);
      Complex complex5 = complex0.ONE.sqrt1z();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.INF.asin();
      boolean boolean0 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = new Complex(0.0, 0.0);
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex1.NaN.asin();
      Complex complex4 = complex0.ONE.pow(complex1);
      Complex complex5 = complex0.INF.atan();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex0.ZERO.atan();
      ComplexField complexField0 = complex4.getField();
      Complex complex8 = complex6.sqrt();
      Complex complex9 = complex5.pow(complex4);
      String string0 = complex1.toString();
      String string1 = complex0.toString();
      Complex complex10 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-2416.66261), (-2416.66261));
      Complex complex1 = complex0.sqrt();
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex1.createComplex(Double.NaN, (-2416.66261));
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex2.NaN.cosh();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex4.ONE.negate();
      Complex complex8 = complex6.NaN.atan();
      boolean boolean0 = complex4.equals(complex5);
      double double0 = complex8.abs();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-1531.5944026416), (-1531.5944026416));
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.cosh();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.I.sin();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(361.6574095999, 361.6574095999);
      ComplexField complexField0 = complex1.ZERO.getField();
      double double0 = complex1.INF.abs();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.sinh();
      Object object0 = complex2.ZERO.readResolve();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex4 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex2.INF.sqrt1z();
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex2.I.conjugate();
      Complex complex7 = complex6.INF.conjugate();
      boolean boolean0 = complex1.isInfinite();
      double double0 = complex2.getArgument();
      boolean boolean1 = complex0.equals(complex2);
      Complex complex8 = complex0.sin();
      int int0 = complex2.hashCode();
      Complex complex9 = complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.multiply(6.283185307179586);
      Complex complex2 = complex0.INF.sinh();
      double double0 = complex1.getReal();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = new Complex(0.0, 0.1666666505023083);
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-331.827200354007), (-331.827200354007));
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex3.sin();
      ComplexField complexField0 = complex2.I.getField();
      Object object0 = complex0.I.readResolve();
      double double0 = complex0.getReal();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex1.INF.divide(complex0);
      ComplexField complexField1 = complex6.ONE.getField();
      double double1 = complex2.getArgument();
      Complex complex8 = complex0.NaN.sinh();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex9.atan();
      Complex complex11 = complex1.NaN.tanh();
      try { 
        complex9.nthRoot((-1021));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,021
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.I.atan();
      double double0 = complex2.getArgument();
      Complex complex4 = complex1.INF.exp();
      Complex complex5 = complex2.NaN.negate();
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex3.INF.sqrt();
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(267.92179677563877, 2007.9216597866164);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.NaN.cosh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.5039018405998233, 0.5039018405998233);
      Complex complex1 = complex0.NaN.conjugate();
      double double0 = complex0.abs();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-2437.1));
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = complex0.NaN.sqrt();
      double double0 = complex0.getArgument();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex6.cos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.NaN.asin();
      Complex complex4 = complex1.ZERO.sin();
      Object object0 = complex0.INF.readResolve();
      Complex complex5 = complex0.NaN.sqrt();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex5.NaN.tan();
      Complex complex9 = complex8.NaN.log();
      ComplexField complexField0 = complex6.INF.getField();
      Complex complex10 = complex9.ONE.conjugate();
      double double0 = complex9.INF.abs();
      Complex complex11 = complex8.INF.subtract(complex0);
      Complex complex12 = complex6.INF.multiply(7454.0);
      int int0 = complex2.INF.hashCode();
      Complex complex13 = complex2.log();
      Complex complex14 = complex13.cos();
      Complex complex15 = complex1.sqrt();
      ComplexField complexField1 = complex13.ONE.getField();
      Complex complex16 = complex5.sqrt();
      Complex complex17 = complex13.divide(complex15);
      Complex complex18 = complex6.pow(complex13);
      int int1 = complex16.INF.hashCode();
      List<Complex> list0 = complex13.nthRoot(246);
      Complex complex19 = complex16.add(complex7);
      Complex complex20 = complex10.atan();
      String string0 = complex10.toString();
      ComplexField complexField2 = complex3.getField();
      Complex complex21 = complex19.exp();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.cosh();
      int int0 = complex2.ZERO.hashCode();
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.ZERO.divide(complex1);
      Object object0 = complex2.readResolve();
      Complex complex6 = complex1.I.createComplex(0.0, (-75.42221689));
      boolean boolean0 = complex2.equals(object0);
      Complex complex7 = complex4.multiply(0.0);
      Complex complex8 = complex0.INF.multiply(0.0);
      Complex complex9 = complex2.cos();
      Complex complex10 = complex7.pow(complex4);
      Complex complex11 = complex6.negate();
      boolean boolean1 = complex7.isNaN();
      ComplexField complexField0 = complex0.getField();
      boolean boolean2 = complex1.isNaN();
      Complex complex12 = complex9.cos();
      Complex complex13 = complex12.INF.cos();
      Complex complex14 = complex12.negate();
      Complex complex15 = complex11.tan();
      double double0 = complex15.ZERO.getArgument();
      boolean boolean3 = complex9.equals(complexField0);
      List<Complex> list0 = complex10.nthRoot(760);
      Complex complex16 = complex1.cosh();
      Complex complex17 = complex0.cos();
      Complex complex18 = complex0.multiply(Double.NaN);
      Complex complex19 = complex5.add(complex9);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      double double0 = complex1.I.abs();
      Complex complex2 = complex0.I.multiply(Double.POSITIVE_INFINITY);
      double double1 = complex0.INF.getArgument();
      double double2 = complex0.NaN.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.multiply(complex2);
      Object object0 = complex3.ONE.readResolve();
      ComplexField complexField1 = complex3.NaN.getField();
      Complex complex4 = complex2.ONE.createComplex((-87.21578628634877), (-1778.861582));
      Complex complex5 = complex4.INF.atan();
      double double3 = complex2.getReal();
      ComplexField complexField2 = complex2.getField();
      Complex complex6 = complex0.ONE.tanh();
      Complex complex7 = complex3.createComplex((-4302.977612339462), Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.NaN.cos();
      ComplexField complexField3 = complex4.getField();
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex9.ONE.sinh();
      Complex complex11 = complex9.NaN.multiply((-87.21578628634877));
      Complex complex12 = complex7.tanh();
      Complex complex13 = complex12.sin();
      Complex complex14 = complex13.NaN.multiply(complex0);
      double double4 = complex7.abs();
      double double5 = complex7.getArgument();
      Complex complex15 = complex4.sinh();
      Complex complex16 = complex15.exp();
      Complex complex17 = new Complex(1.3245471311735498E-8, (-87.21578628634877));
      Complex complex18 = complex8.subtract(complex17);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.ZERO.log();
      int int0 = complex0.ZERO.hashCode();
      double double1 = complex5.ZERO.getArgument();
      ComplexField complexField0 = complex6.getField();
      Complex complex7 = complex0.add(complex5);
      Complex complex8 = complex7.ZERO.exp();
      Complex complex9 = complex5.add(complex6);
      Complex complex10 = complex0.cos();
      Complex complex11 = complex10.sqrt1z();
      int int1 = complex5.INF.hashCode();
      Complex complex12 = complex10.I.conjugate();
      ComplexField complexField1 = complex12.I.getField();
      Complex complex13 = complex12.I.exp();
      Complex complex14 = complex13.ZERO.divide(complex0);
      Complex complex15 = complex9.NaN.tanh();
      Object object0 = complex10.readResolve();
      Complex complex16 = complex6.tanh();
      Complex complex17 = complex16.ZERO.multiply(complex5);
      Complex complex18 = complex17.cosh();
      Complex complex19 = complex18.multiply(0.0);
      Complex complex20 = complex18.I.multiply(complex7);
      double double2 = complex9.getImaginary();
      Object object1 = new Object();
      boolean boolean0 = complex0.equals(object1);
      double double3 = complex9.abs();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.asin();
      double double0 = complex1.ONE.getArgument();
      String string0 = complex0.ONE.toString();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex1.ZERO.tanh();
      Object object0 = complex3.NaN.readResolve();
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex3.NaN.divide(complex0);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex0.INF.sqrt1z();
      Complex complex9 = complex7.INF.cosh();
      Complex complex10 = complex9.INF.subtract(complex0);
      Complex complex11 = complex1.atan();
      List<Complex> list0 = complex7.nthRoot(33);
      ComplexField complexField1 = complex1.getField();
      double double1 = complex7.getReal();
      ComplexField complexField2 = complex9.getField();
      List<Complex> list1 = complex4.nthRoot(33);
      Complex complex12 = complex0.acos();
      Complex complex13 = complex1.exp();
      Complex complex14 = complex4.tanh();
      Complex complex15 = complex14.multiply(0.0);
      Complex complex16 = complex14.add(complex2);
      Complex complex17 = complex16.NaN.exp();
      Complex complex18 = complex17.I.createComplex(1.0, 0.0);
      Complex complex19 = complex3.tanh();
      double double2 = complex16.getImaginary();
      Complex complex20 = complex0.asin();
      Complex complex21 = complex20.cos();
      Complex complex22 = complex14.subtract(complex8);
      double double3 = complex4.getReal();
      List<Complex> list2 = complex4.nthRoot(2162);
      double double4 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-56.64122071), 10.0);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.ONE.conjugate();
      String string0 = complex0.ONE.toString();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.multiply(10.0);
      Complex complex3 = complex2.sinh();
      Complex complex4 = new Complex((-56.64122071), 0.0);
      Complex complex5 = complex2.I.multiply(complex4);
      Complex complex6 = complex3.I.log();
      String string1 = complex6.ONE.toString();
      Complex complex7 = complex3.ONE.multiply(10.0);
      Complex complex8 = complex3.multiply(complex2);
      double double1 = complex3.getArgument();
      Complex complex9 = complex6.asin();
  }
}
